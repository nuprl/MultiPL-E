language: java
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder45 = new \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy17abnw8.java:72: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmpy17abnw8.java:73:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmpy17abnw8.java:73: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmpy17abnw8.java:74: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpy17abnw8.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpy17abnw8.java:74: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpy17abnw8.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpy17abnw8.java:84: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.length() == 0) {\n            return result;\n        }\n     \
    \   ArrayList<String> words = new ArrayList<String>();\n        boolean found\
    \ = false;\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                words.add(\"\" + c);\n                found = true;\n   \
    \         }\n        }\n        if (found) {\n            Collections.sort(words);\n\
    \            int count = 0;\n            for (String word : words) {\n       \
    \         if (word.length() == n) {\n                    result.add(word);\n \
    \                   count++;\n                }\n            }\n            if\
    \ (count == 0) {\n                return result;\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyeyzxtyk.java:54)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<String>\
    \ word54 = new ArrayList<>();\n        ArrayList<String> \n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypopqnrs.java:82: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpypopqnrs.java:82: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n        ArrayList<String> word49 = new ArrayList<String>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpap5bp6fy.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.length() == 0) {\n            return result;\n        }\n     \
    \   ArrayList<String> words = new ArrayList<String>();\n        ArrayList<String>\
    \ word = new ArrayList<String>();\n        ArrayList<String> word2 = new ArrayList<String>();\n\
    \        ArrayList<String> word3 = new ArrayList<String>();\n        ArrayList<String>\
    \ word4 = new ArrayList<String>();\n        ArrayList<String> word5 = new ArrayList<String>();\n\
    \        ArrayList<String> word6 = new ArrayList<String>();\n        ArrayList<String>\
    \ word7 = new ArrayList<String>();\n        ArrayList<String> word8 = new ArrayList<String>();\n\
    \        ArrayList<String> word9 = new ArrayList<String>();\n        ArrayList<String>\
    \ word10 = new ArrayList<String>();\n        ArrayList<String> word11 = new ArrayList<String>();\n\
    \        ArrayList<String> word12 = new ArrayList<String>();\n        ArrayList<String>\
    \ word13 = new ArrayList<String>();\n        ArrayList<String> word14 = new ArrayList<String>();\n\
    \        ArrayList<String> word15 = new ArrayList<String>();\n        ArrayList<String>\
    \ word16 = new ArrayList<String>();\n        ArrayList<String> word17 = new ArrayList<String>();\n\
    \        ArrayList<String> word18 = new ArrayList<String>();\n        ArrayList<String>\
    \ word19 = new ArrayList<String>();\n        ArrayList<String> word20 = new ArrayList<String>();\n\
    \        ArrayList<String> word21 = new ArrayList<String>();\n        ArrayList<String>\
    \ word22 = new ArrayList<String>();\n        ArrayList<String> word23 = new ArrayList<String>();\n\
    \        ArrayList<String> word24 = new ArrayList<String>();\n        ArrayList<String>\
    \ word25 = new ArrayList<String>();\n        ArrayList<String> word26 = new ArrayList<String>();\n\
    \        ArrayList<String> word27 = new ArrayList<String>();\n        ArrayList<String>\
    \ word28 = new ArrayList<String>();\n        ArrayList<String> word29 = new ArrayList<String>();\n\
    \        ArrayList<String> word30 = new ArrayList<String>();\n        ArrayList<String>\
    \ word31 = new ArrayList<String>();\n        ArrayList<String> word32 = new ArrayList<String>();\n\
    \        ArrayList<String> word33 = new ArrayList<String>();\n        ArrayList<String>\
    \ word34 = new ArrayList<String>();\n        ArrayList<String> word35 = new ArrayList<String>();\n\
    \        ArrayList<String> word36 = new ArrayList<String>();\n        ArrayList<String>\
    \ word37 = new ArrayList<String>();\n        ArrayList<String> word38 = new ArrayList<String>();\n\
    \        ArrayList<String> word39 = new ArrayList<String>();\n        ArrayList<String>\
    \ word40 = new ArrayList<String>();\n        ArrayList<String> word41 = new ArrayList<String>();\n\
    \        ArrayList<String> word42 = new ArrayList<String>();\n        ArrayList<String>\
    \ word43 = new ArrayList<String>();\n        ArrayList<String> word44 = new ArrayList<String>();\n\
    \        ArrayList<String> word45 = new ArrayList<String>();\n        ArrayList<String>\
    \ word46 = new ArrayList<String>();\n        ArrayList<String> word47 = new ArrayList<String>();\n\
    \        ArrayList<String> word48 = new ArrayList<String\n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt5_aluf_.java:79: error: > expected\n    }\n    ^\n/tmp/tmpt5_aluf_.java:79:\
    \ error: ';' expected\n    }\n     ^\n/tmp/tmpt5_aluf_.java:80: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n        \
    \   ^\n/tmp/tmpt5_aluf_.java:80: error: ';' expected\n    public static void main(String[]\
    \ args) {\n                 ^\n/tmp/tmpt5_aluf_.java:80: error: '.class' expected\n\
    \    public static void main(String[] args) {\n                              \
    \       ^\n/tmp/tmpt5_aluf_.java:80: error: ';' expected\n    public static void\
    \ main(String[] args) {\n                                         ^\n/tmp/tmpt5_aluf_.java:90:\
    \ error: reached end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants =\
    \ new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants2 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants3 = new ArrayList<>();\n      \
    \  ArrayList<String> wordsWithNConsonants4 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNConsonants5 = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants6\
    \ = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants7 = new\
    \ ArrayList<>();\n        ArrayList<String> wordsWithNConsonants8 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants9 = new ArrayList<>();\n      \
    \  ArrayList<String> wordsWithNConsonants10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNConsonants11 = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants13 = new\
    \ ArrayList<>();\n        ArrayList<String> wordsWithNConsonants14 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants15 = new ArrayList<>();\n     \
    \   ArrayList<String> wordsWithNConsonants16 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNConsonants17 = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants18\
    \ = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants19 = new\
    \ ArrayList<>();\n        ArrayList<String> wordsWithNConsonants20 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants21 = new ArrayList<>();\n     \
    \   ArrayList<String> wordsWithNConsonants22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNConsonants23 = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants25 = new\
    \ ArrayList<>();\n        ArrayList<String> wordsWithNConsonants26 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants27 = new ArrayList<>();\n     \
    \   ArrayList<String> wordsWithNConsonants28 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNConsonants29 = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants30\
    \ = new ArrayList<>();\n        ArrayList<String> wordsWithNConsonants31 = new\
    \ ArrayList<>();\n        ArrayList<String> wordsWithNConsonants32 = new ArrayList<>();\n\
    \        ArrayList<String> wordsWithNConsonants33 = new ArrayList<>();\n     \
    \   ArrayList<String> wordsWithNConsonants34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsWithNCon\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsknt0xd.java:65: error: ';' expected\n        ArrayList<String>\
    \ wordsWithNCon\n                                       ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        ArrayList<String> temp = new ArrayList<String>();\n\
    \        boolean flag = false;\n        long count = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            if (Character.isLetter(c)) {\n             \
    \   temp.add(c);\n                count++;\n            }\n            if (count\
    \ == n) {\n                words.addAll(temp);\n                temp.clear();\n\
    \                count = 0;\n            }\n        }\n        words.addAll(temp);\n\
    \        for (String word : words) {\n            result.add(word);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hcio8bs.java:36: error: no suitable method found for add(char)\n\
    \                temp.add(c);\n                    ^\n    method Collection.add(String)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method List.add(String) is not applicable\n      (argument mismatch; char\
    \ cannot be converted to String)\n    method AbstractCollection.add(String) is\
    \ not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractList.add(String) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n    method ArrayList.add(String) is not\
    \ applicable\n      (argument mismatch; char cannot be converted to String)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> word = new ArrayList<String>();\n\
    \        ArrayList<String> word2 = new ArrayList<String>();\n        ArrayList<String>\
    \ word3 = new ArrayList<String>();\n        ArrayList<String> word4 = new ArrayList<String>();\n\
    \        ArrayList<String> word5 = new ArrayList<String>();\n        ArrayList<String>\
    \ word6 = new ArrayList<String>();\n        ArrayList<String> word7 = new ArrayList<String>();\n\
    \        ArrayList<String> word8 = new ArrayList<String>();\n        ArrayList<String>\
    \ word9 = new ArrayList<String>();\n        ArrayList<String> word10 = new ArrayList<String>();\n\
    \        ArrayList<String> word11 = new ArrayList<String>();\n        ArrayList<String>\
    \ word12 = new ArrayList<String>();\n        ArrayList<String> word13 = new ArrayList<String>();\n\
    \        ArrayList<String> word14 = new ArrayList<String>();\n        ArrayList<String>\
    \ word15 = new ArrayList<String>();\n        ArrayList<String> word16 = new ArrayList<String>();\n\
    \        ArrayList<String> word17 = new ArrayList<String>();\n        ArrayList<String>\
    \ word18 = new ArrayList<String>();\n        ArrayList<String> word19 = new ArrayList<String>();\n\
    \        ArrayList<String> word20 = new ArrayList<String>();\n        ArrayList<String>\
    \ word21 = new ArrayList<String>();\n        ArrayList<String> word22 = new ArrayList<String>();\n\
    \        ArrayList<String> word23 = new ArrayList<String>();\n        ArrayList<String>\
    \ word24 = new ArrayList<String>();\n        ArrayList<String> word25 = new ArrayList<String>();\n\
    \        ArrayList<String> word26 = new ArrayList<String>();\n        ArrayList<String>\
    \ word27 = new ArrayList<String>();\n        ArrayList<String> word28 = new ArrayList<String>();\n\
    \        ArrayList<String> word29 = new ArrayList<String>();\n        ArrayList<String>\
    \ word30 = new ArrayList<String>();\n        ArrayList<String> word31 = new ArrayList<String>();\n\
    \        ArrayList<String> word32 = new ArrayList<String>();\n        ArrayList<String>\
    \ word33 = new ArrayList<String>();\n        ArrayList<String> word34 = new ArrayList<String>();\n\
    \        ArrayList<String> word35 = new ArrayList<String>();\n        ArrayList<String>\
    \ word36 = new ArrayList<String>();\n        ArrayList<String> word37 = new ArrayList<String>();\n\
    \        ArrayList<String> word38 = new ArrayList<String>();\n        ArrayList<String>\
    \ word39 = new ArrayList<String>();\n        ArrayList<String> word40 = new ArrayList<String>();\n\
    \        ArrayList<String> word41 = new ArrayList<String>();\n        ArrayList<String>\
    \ word42 = new ArrayList<String>();\n        ArrayList<String> word43 = new ArrayList<String>();\n\
    \        ArrayList<String> word44 = new ArrayList<String>();\n        ArrayList<String>\
    \ word45 = new ArrayList<String>();\n        ArrayList<String> word46 = new ArrayList<String>();\n\
    \        ArrayList<String> word47 = new ArrayList<String>();\n        ArrayList<String>\
    \ word48 = new ArrayList<String>();\n        ArrayList<String> word49 = new ArrayList<String>();\n\
    \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpap5bp6fy.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> word = new ArrayList<>();\n\
    \        ArrayList<String> word2 = new ArrayList<>();\n        ArrayList<String>\
    \ word3 = new ArrayList<>();\n        ArrayList<String> word4 = new ArrayList<>();\n\
    \        ArrayList<String> word5 = new ArrayList<>();\n        ArrayList<String>\
    \ word6 = new ArrayList<>();\n        ArrayList<String> word7 = new ArrayList<>();\n\
    \        ArrayList<String> word8 = new ArrayList<>();\n        ArrayList<String>\
    \ word9 = new ArrayList<>();\n        ArrayList<String> word10 = new ArrayList<>();\n\
    \        ArrayList<String> word11 = new ArrayList<>();\n        ArrayList<String>\
    \ word12 = new ArrayList<>();\n        ArrayList<String> word13 = new ArrayList<>();\n\
    \        ArrayList<String> word14 = new ArrayList<>();\n        ArrayList<String>\
    \ word15 = new ArrayList<>();\n        ArrayList<String> word16 = new ArrayList<>();\n\
    \        ArrayList<String> word17 = new ArrayList<>();\n        ArrayList<String>\
    \ word18 = new ArrayList<>();\n        ArrayList<String> word19 = new ArrayList<>();\n\
    \        ArrayList<String> word20 = new ArrayList<>();\n        ArrayList<String>\
    \ word21 = new ArrayList<>();\n        ArrayList<String> word22 = new ArrayList<>();\n\
    \        ArrayList<String> word23 = new ArrayList<>();\n        ArrayList<String>\
    \ word24 = new ArrayList<>();\n        ArrayList<String> word25 = new ArrayList<>();\n\
    \        ArrayList<String> word26 = new ArrayList<>();\n        ArrayList<String>\
    \ word27 = new ArrayList<>();\n        ArrayList<String> word28 = new ArrayList<>();\n\
    \        ArrayList<String> word29 = new ArrayList<>();\n        ArrayList<String>\
    \ word30 = new ArrayList<>();\n        ArrayList<String> word31 = new ArrayList<>();\n\
    \        ArrayList<String> word32 = new ArrayList<>();\n        ArrayList<String>\
    \ word33 = new ArrayList<>();\n        ArrayList<String> word34 = new ArrayList<>();\n\
    \        ArrayList<String> word35 = new ArrayList<>();\n        ArrayList<String>\
    \ word36 = new ArrayList<>();\n        ArrayList<String> word37 = new ArrayList<>();\n\
    \        ArrayList<String> word38 = new ArrayList<>();\n        ArrayList<String>\
    \ word39 = new ArrayList<>();\n        ArrayList<String> word40 = new ArrayList<>();\n\
    \        ArrayList<String> word41 = new ArrayList<>();\n        ArrayList<String>\
    \ word42 = new ArrayList<>();\n        ArrayList<String> word43 = new ArrayList<>();\n\
    \        ArrayList<String> word44 = new ArrayList<>();\n        ArrayList<String>\
    \ word45 = new ArrayList<>();\n        ArrayList<String> word46 = new ArrayList<>();\n\
    \        ArrayList<String> word47 = new ArrayList<>();\n        ArrayList<String>\
    \ word48 = new ArrayList<>();\n        ArrayList<String> word49 = new ArrayList<>();\n\
    \        ArrayList<String> word50 = new ArrayList<>();\n        ArrayList<String>\
    \ word51 = new ArrayList<>();\n        ArrayList<String> word52 = new ArrayList<>();\n\
    \        ArrayList<String> word53 = new ArrayList<>();\n        ArrayList<String>\
    \ word54 = new ArrayList<>();\n        ArrayList<String> \n    }\n    public static\
    \ void main(String[] args) {\n    assert(selectWords((\"Mary had a little lamb\"\
    ), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"little\")))));\n\
    \    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))));\n    assert(selectWords((\"simple white space\"\
    ), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(selectWords((\"\
    Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"world\"\
    )))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpypopqnrs.java:82: error: not a statement\n        ArrayList<String>\
    \ \n                 ^\n/tmp/tmpypopqnrs.java:82: error: ';' expected\n      \
    \  ArrayList<String> \n                         ^\n2 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.length() == 0) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isConsonant = false;\n        for\
    \ (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n   \
    \             isConsonant = isConsonant(c);\n                if (isConsonant)\
    \ {\n                    words.add(String.valueOf(c));\n                }\n  \
    \          }\n        }\n        if (words.size() == 0) {\n            return\
    \ result;\n        }\n        long totalWords = words.size();\n        long totalLetters\
    \ = words.get(0).length();\n        long totalConsonants = totalLetters - totalWords;\n\
    \        if (totalConsonants == n) {\n            result.addAll(words);\n    \
    \    }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(selectWords((\"Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyal598ti.java:34: error: cannot find symbol\n                isConsonant\
    \ = isConsonant(c);\n                              ^\n  symbol:   method isConsonant(char)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        boolean isConsonant = false;\n   \
    \     boolean isConsonant2 = false;\n        boolean isConsonant3 = false;\n \
    \       boolean isConsonant4 = false;\n        boolean isConsonant5 = false;\n\
    \        boolean isConsonant6 = false;\n        boolean isConsonant7 = false;\n\
    \        boolean isConsonant8 = false;\n        boolean isConsonant9 = false;\n\
    \        boolean isConsonant10 = false;\n        boolean isConsonant11 = false;\n\
    \        boolean isConsonant12 = false;\n        boolean isConsonant13 = false;\n\
    \        boolean isConsonant14 = false;\n        boolean isConsonant15 = false;\n\
    \        boolean isConsonant16 = false;\n        boolean isConsonant17 = false;\n\
    \        boolean isConsonant18 = false;\n        boolean isConsonant19 = false;\n\
    \        boolean isConsonant20 = false;\n        boolean isConsonant21 = false;\n\
    \        boolean isConsonant22 = false;\n        boolean isConsonant23 = false;\n\
    \        boolean isConsonant24 = false;\n        boolean isConsonant25 = false;\n\
    \        boolean isConsonant26 = false;\n        boolean isConsonant27 = false;\n\
    \        boolean isConsonant28 = false;\n        boolean isConsonant29 = false;\n\
    \        boolean isConsonant30 = false;\n        boolean isConsonant31 = false;\n\
    \        boolean isConsonant32 = false;\n        boolean isConsonant33 = false;\n\
    \        boolean isConsonant34 = false;\n        boolean isConsonant35 = false;\n\
    \        boolean isConsonant36 = false;\n        boolean isConsonant37 = false;\n\
    \        boolean isConsonant38 = false;\n        boolean isConsonant39 = false;\n\
    \        boolean isConsonant40 = false;\n        boolean isConsonant41 = false;\n\
    \        boolean isConsonant42 = false;\n        boolean isConsonant43 = false;\n\
    \        boolean isConsonant44 = false;\n        boolean isConsonant45 = false;\n\
    \        boolean isConsonant46 = false;\n        boolean isConsonant47 = false;\n\
    \        boolean isConsonant48 = false;\n        boolean isConsonant49 = false;\n\
    \        boolean isConsonant50 = false;\n        boolean isConsonant51 = false;\n\
    \        boolean isConsonant52 = false;\n        boolean isConsonant\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsoytoc8e.java:83: error: ';' expected\n        boolean isConsonant\n\
    \                           ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        long count = 1;\n        boolean isConsonant\
    \ = false;\n        boolean isLetter = false;\n        boolean isSpace = false;\n\
    \        boolean isWord = false;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                isLetter = true;\n            }\n            if (Character.isSpaceChar(c))\
    \ {\n                isSpace = true;\n            }\n            if (Character.isLetterOrDigit(c))\
    \ {\n                isConsonant = true;\n            }\n            if (Character.isSpaceChar(c)\
    \ && isSpace) {\n                isWord = true;\n            }\n            if\
    \ (isConsonant && isLetter) {\n                words.add(s.substring(i, i + 1));\n\
    \                count++;\n            }\n            if (isConsonant && isWord)\
    \ {\n                words.add(s.substring(i, i + 1));\n                count++;\n\
    \            }\n            if (isConsonant && isSpace) {\n                words.add(s.substring(i,\
    \ i + 1));\n                count++;\n            }\n            if (isConsonant\
    \ && isLetter) {\n                words.add(s.substring(i, i + 1));\n        \
    \        count++;\n            }\n            if (isConsonant && isWord) {\n \
    \               words.add(s.substring(i, i + 1));\n                count++;\n\
    \            }\n            if (isConsonant && isSpace) {\n                words.add(s.substring(i,\
    \ i + 1));\n                count++;\n            }\n            if (isConsonant\
    \ && isLetter) {\n                words.add(s.substring(i, i + 1));\n        \
    \        count++;\n            }\n            if (isConsonant && isWord) {\n \
    \               words.add(s.substring(i, i + 1));\n                count++;\n\
    \            }\n            if (isConsonant && isSpace) {\n                words.add(s.substring(i,\
    \ i + 1));\n                count++;\n            }\n            if (isConsonant\
    \ && isLetter) {\n                words.add(s.substring(i, i + 1));\n        \
    \        count++;\n            }\n            if (isConsonant && isWord) {\n \
    \               words.add(s.substring(i, i + 1));\n                count++;\n\
    \            }\n            if (isConsonant && isSpace) {\n                words.add(s.substring(i,\
    \ i + 1));\n                count++;\n            }\n            if (isConsonant\
    \ && isLetter) {\n                words.add(s.substring(i, i + 1));\n        \
    \        count++;\n            }\n            if (isConsonant && isWord) {\n \
    \               words.add(s.substring(i, i + 1));\n                count++;\n\
    \            }\n            if (isConsonant && isSpace) {\n                words.add(s.substring(i,\
    \ i + 1));\n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbktwvmj4.java:109: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpbktwvmj4.java:109: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpbktwvmj4.java:109: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmpbktwvmj4.java:109: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmpbktwvmj4.java:109: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmpbktwvmj4.java:119: error: reached end of file while parsing\n\
    }\n ^\n6 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        ArrayList<String> wordsInOrder = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder2 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder3 = new ArrayList<>();\n        ArrayList<String> wordsInOrder4\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder5 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder6 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder7 = new ArrayList<>();\n        ArrayList<String> wordsInOrder8\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder9 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder10 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder11 = new ArrayList<>();\n        ArrayList<String> wordsInOrder12\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder13 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder14 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder15 = new ArrayList<>();\n        ArrayList<String> wordsInOrder16\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder17 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder18 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder19 = new ArrayList<>();\n        ArrayList<String> wordsInOrder20\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder21 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder22 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder23 = new ArrayList<>();\n        ArrayList<String> wordsInOrder24\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder25 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder26 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder27 = new ArrayList<>();\n        ArrayList<String> wordsInOrder28\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder29 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder30 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder31 = new ArrayList<>();\n        ArrayList<String> wordsInOrder32\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder33 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder34 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder35 = new ArrayList<>();\n        ArrayList<String> wordsInOrder36\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder37 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder38 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder39 = new ArrayList<>();\n        ArrayList<String> wordsInOrder40\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder41 = new ArrayList<>();\n\
    \        ArrayList<String> wordsInOrder42 = new ArrayList<>();\n        ArrayList<String>\
    \ wordsInOrder43 = new ArrayList<>();\n        ArrayList<String> wordsInOrder44\
    \ = new ArrayList<>();\n        ArrayList<String> wordsInOrder45 = new \n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy17abnw8.java:72: error: <identifier> expected\n        ArrayList<String>\
    \ wordsInOrder45 = new \n                                              ^\n/tmp/tmpy17abnw8.java:73:\
    \ error: '(' or '[' expected\n    }\n    ^\n/tmp/tmpy17abnw8.java:73: error: ';'\
    \ expected\n    }\n     ^\n/tmp/tmpy17abnw8.java:74: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n           ^\n/tmp/tmpy17abnw8.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \         ^\n/tmp/tmpy17abnw8.java:74: error: '.class' expected\n    public static\
    \ void main(String[] args) {\n                                     ^\n/tmp/tmpy17abnw8.java:74:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmpy17abnw8.java:84: error: reached\
    \ end of file while parsing\n}\n ^\n8 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<>();\n        boolean found = false;\n        long start = 0;\n\
    \        long end = 0;\n        long index = 0;\n        while (index < s.length())\
    \ {\n            char c = s.charAt(index);\n            if (Character.isLetter(c))\
    \ {\n                found = true;\n                start = index;\n         \
    \       while (index < s.length() && Character.isLetter(s.charAt(index))) {\n\
    \                    index++;\n                }\n                end = index;\n\
    \                while (index < s.length() && Character.isSpaceChar(s.charAt(index)))\
    \ {\n                    index++;\n                }\n                if (end\
    \ - start == n) {\n                    words.add(s.substring(start, end));\n \
    \               }\n            }\n            index++;\n        }\n        if\
    \ (found) {\n            result.addAll(words);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr29wuswe.java:36: error: no suitable method found for charAt(long)\n\
    \            char c = s.charAt(index);\n                      ^\n    method CharSequence.charAt(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method String.charAt(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmpr29wuswe.java:40:\
    \ error: no suitable method found for charAt(long)\n                while (index\
    \ < s.length() && Character.isLetter(s.charAt(index))) {\n                   \
    \                                              ^\n    method CharSequence.charAt(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method String.charAt(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmpr29wuswe.java:44:\
    \ error: no suitable method found for charAt(long)\n                while (index\
    \ < s.length() && Character.isSpaceChar(s.charAt(index))) {\n                \
    \                                                    ^\n    method CharSequence.charAt(int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method String.charAt(int) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from long to int)\n/tmp/tmpr29wuswe.java:48:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                words.add(s.substring(start, end));\n                       \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isWord = false;\n        boolean\
    \ isWordWithConsonants = false;\n        boolean isWordWithConsonantsAndSpace\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetter = false;\n \
    \       boolean isWordWithConsonantsAndSpaceAndLetterAndNumber = false;\n    \
    \    boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpace = false;\n\
    \        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumber\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpace\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumber\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpace\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumber\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpace\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetter\
    \ = false;\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAnd\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp491a1rhm.java:46: error: ';' expected\n        boolean isWordWithConsonantsAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAndLetterAndNumberAndSpaceAnd\n\
    \                                                                            \
    \                                                                           ^\n\
    1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        boolean isConsonant = false;\n        boolean\
    \ isWord = false;\n        boolean isWordWithConsonant = false;\n        boolean\
    \ isWordWithConsonantAndWord = false;\n        boolean isWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWord = false;\n\
    \        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonant =\
    \ false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = \n    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgrgasy9.java:48: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmppgrgasy9.java:49: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmppgrgasy9.java:49: error: ';'\
    \ expected\n    public static void main(String[] args) {\n          ^\n/tmp/tmppgrgasy9.java:49:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n                  ^\n/tmp/tmppgrgasy9.java:49: error: ';' expected\n    public\
    \ static void main(String[] args) {\n                           ^\n/tmp/tmppgrgasy9.java:49:\
    \ error: ';' expected\n    public static void main(String[] args) {\n        \
    \                                 ^\n/tmp/tmppgrgasy9.java:59: error: reached\
    \ end of file while parsing\n}\n ^\n7 errors\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s\
    \ == null || s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<String>();\n        ArrayList<String> wordList = new ArrayList<String>();\n\
    \        ArrayList<String> wordList2 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList3 = new ArrayList<String>();\n        ArrayList<String> wordList4 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList5 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList6 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList7 = new ArrayList<String>();\n        ArrayList<String> wordList8 =\
    \ new ArrayList<String>();\n        ArrayList<String> wordList9 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList10 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList11 = new ArrayList<String>();\n        ArrayList<String> wordList12\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList13 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList14 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList15 = new ArrayList<String>();\n        ArrayList<String> wordList16\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList17 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList18 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList19 = new ArrayList<String>();\n        ArrayList<String> wordList20\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList21 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList22 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList23 = new ArrayList<String>();\n        ArrayList<String> wordList24\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList25 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList26 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList27 = new ArrayList<String>();\n        ArrayList<String> wordList28\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList29 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList30 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList31 = new ArrayList<String>();\n        ArrayList<String> wordList32\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList33 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList34 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList35 = new ArrayList<String>();\n        ArrayList<String> wordList36\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList37 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList38 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList39 = new ArrayList<String>();\n        ArrayList<String> wordList40\
    \ = new ArrayList<String>();\n        ArrayList<String> wordList41 = new ArrayList<String>();\n\
    \        ArrayList<String> wordList42 = new ArrayList<String>();\n        ArrayList<String>\
    \ wordList43 = new ArrayList<String>();\n        ArrayList<String> wordList\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7tbiiyt.java:74: error: ';' expected\n        ArrayList<String>\
    \ wordList\n                                  ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        long count = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                count++;\n    \
    \            if (count == n) {\n                    words.add(s.substring(0, s.length()\
    \ - 1));\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvz8xzxfv.java:43)\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<String>();\n        if (s.isEmpty())\
    \ {\n            return result;\n        }\n        ArrayList<String> words =\
    \ new ArrayList<String>();\n        boolean found = false;\n        boolean isConsonant\
    \ = false;\n        boolean isConsonant2 = false;\n        boolean isConsonant3\
    \ = false;\n        boolean isConsonant4 = false;\n        boolean isConsonant5\
    \ = false;\n        boolean isConsonant6 = false;\n        boolean isConsonant7\
    \ = false;\n        boolean isConsonant8 = false;\n        boolean isConsonant9\
    \ = false;\n        boolean isConsonant10 = false;\n        boolean isConsonant11\
    \ = false;\n        boolean isConsonant12 = false;\n        boolean isConsonant13\
    \ = false;\n        boolean isConsonant14 = false;\n        boolean isConsonant15\
    \ = false;\n        boolean isConsonant16 = false;\n        boolean isConsonant17\
    \ = false;\n        boolean isConsonant18 = false;\n        boolean isConsonant19\
    \ = false;\n        boolean isConsonant20 = false;\n        boolean isConsonant21\
    \ = false;\n        boolean isConsonant22 = false;\n        boolean isConsonant23\
    \ = false;\n        boolean isConsonant24 = false;\n        boolean isConsonant25\
    \ = false;\n        boolean isConsonant26 = false;\n        boolean isConsonant27\
    \ = false;\n        boolean isConsonant28 = false;\n        boolean isConsonant29\
    \ = false;\n        boolean isConsonant30 = false;\n        boolean isConsonant31\
    \ = false;\n        boolean isConsonant32 = false;\n        boolean isConsonant33\
    \ = false;\n        boolean isConsonant34 = false;\n        boolean isConsonant35\
    \ = false;\n        boolean isConsonant36 = false;\n        boolean isConsonant37\
    \ = false;\n        boolean isConsonant38 = false;\n        boolean isConsonant39\
    \ = false;\n        boolean isConsonant40 = false;\n        boolean isConsonant41\
    \ = false;\n        boolean isConsonant42 = false;\n        boolean isConsonant43\
    \ = false;\n        boolean isConsonant44 = false;\n        boolean isConsonant45\
    \ = false;\n        boolean isConsonant46 = false;\n        boolean isConsonant47\
    \ = false;\n        boolean isConsonant48 = false;\n        boolean isConsonant49\
    \ = false;\n        boolean isConsonant50 = false;\n        boolean isConsonant51\
    \ = false;\n        boolean isConsonant52 = false;\n        boolean is\n    }\n\
    \    public static void main(String[] args) {\n    assert(selectWords((\"Mary\
    \ had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp65_bn94g.java:84: error: ';' expected\n        boolean is\n   \
    \               ^\n1 error\n"
  stdout: ''
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"\
    ), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"little\")))\n\
    \    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Mary\", (String)\"lamb\")))\n    // >>> selectWords((\"simple white space\"),\
    \ (2l))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> selectWords((\"\
    Hello world\"), (4l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    world\")))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))\n    public static ArrayList<String> selectWords(String s, long n)\
    \ {\n        ArrayList<String> result = new ArrayList<>();\n        if (s == null\
    \ || s.isEmpty()) {\n            return result;\n        }\n        ArrayList<String>\
    \ words = new ArrayList<>();\n        boolean isConsonant = false;\n        boolean\
    \ isWord = false;\n        boolean isWordWithConsonant = false;\n        boolean\
    \ isWordWithConsonantAndWord = false;\n        boolean isWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWord = false;\n\
    \        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonant =\
    \ false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWordWithConsonant\
    \ = false;\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\n\
    \    }\n    public static void main(String[] args) {\n    assert(selectWords((\"\
    Mary had a little lamb\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    little\")))));\n    assert(selectWords((\"Mary had a little lamb\"), (3l)).equals((new\
    \ ArrayList<String>(Arrays.asList((String)\"Mary\", (String)\"lamb\")))));\n \
    \   assert(selectWords((\"simple white space\"), (2l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"Hello world\"), (4l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    world\")))));\n    assert(selectWords((\"Uncle sam\"), (3l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    Uncle\")))));\n    assert(selectWords((\"\"), (4l)).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(selectWords((\"a b c d e f\"), (1l)).equals((new ArrayList<String>(Arrays.asList((String)\"\
    b\", (String)\"c\", (String)\"d\", (String)\"f\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpne1tdqog.java:48: error: ';' expected\n        boolean isWordWithConsonantAndWordWithConsonantAndWordWithConsonantAndWord\n\
    \                                                                            \
    \      ^\n1 error\n"
  stdout: ''
