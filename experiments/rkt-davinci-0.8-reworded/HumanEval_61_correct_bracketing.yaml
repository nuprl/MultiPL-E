name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return #t\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (local [(define (helper brackets n)\n            (cond\n        \
    \      [(empty? brackets) (= n 0)]\n              [(symbol=? (first brackets)\
    \ #\\() (helper (rest brackets) (+ n 1))]\n              [(symbol=? (first brackets)\
    \ #\\)) (and (not (= n 0)) (helper (rest brackets) (- n 1)))]\n              [else\
    \ (error \"corrupt bracketing string\")]))]\n    (helper brackets 0)))\n", " \
    \ (let loop ([brackets brackets] [i 0])\n    (cond\n      [(equal? i (string-length\
    \ brackets)) #t]\n      [(equal? (string-ref brackets i) #\\()\n       (or (equal?\
    \ (string-ref brackets (+ i 1)) #\\()\n           (equal? (string-ref brackets\
    \ (+ i 1)) #\\)))]\n      [(equal? (string-ref brackets i) #\\))\n       (or (equal?\
    \ (string-ref brackets (- i 1)) #\\()\n           (equal? (string-ref brackets\
    \ (- i 1)) #\\)))]\n      [else #f])))\n", '  (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and
    (and (and (and (and (and (and (and (and', "  (define (count-opening-brackets brackets)\n\
    \    (if (string-empty? brackets)\n        0\n        (if (string=? (string-take\
    \ brackets 1) \"(\")\n            (+ 1 (count-opening-brackets (string-drop brackets\
    \ 1)))\n            (count-opening-brackets (string-drop brackets 1)))))\n  (define\
    \ (count-closing-brackets brackets)\n    (if (string-empty? brackets)\n      \
    \  0\n        (if (string=? (string-take brackets 1) \")\")\n            (+ 1\
    \ (count-closing-brackets (string-drop brackets 1)))\n            (count-closing-brackets\
    \ (string-drop brackets 1)))))\n  (= (count-opening-brackets brackets) (count-closing-brackets\
    \ brackets)))\n", "  (cond\n    [(empty? brackets) true]\n    [(eq? (first brackets)\
    \ \")\") false]\n    [else (correct_bracketing (remainder brackets))]))\n", " \
    \ (cond\n    [(null? brackets) true]\n    [(equal? \"(\" (car brackets)) (correct_bracketing\
    \ (cdr brackets))]\n    [(and (not (null? brackets)) (equal? \")\" (car brackets)))\
    \ (and (not (null? (cdr brackets))) (equal? \"(\" (car (cdr brackets))))]\n  \
    \  [else false]))\n", "    (if (or (equal? brackets \"\") (string-empty? brackets))\
    \ #t\n        (if (equal? (substring brackets 0 1) \"(\")\n            (if (correct_bracketing\
    \ (substring brackets 1))\n                (let ((next-close (string-index brackets\
    \ \")\")))\n                    (if (equal? next-close -1) #f\n              \
    \          (correct_bracketing (substring brackets next-close 1))))\n        \
    \        #f)\n            #f)))\n```\n\n```Racket\n#lang racket\n", "  \n)\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(equal? \"(\" (first brackets))\n   \
    \  (correct_bracketing (append (substring (rest brackets) 1) \")\"))]\n    [else\
    \ #f]))\n```\n\n```racket\n#lang racket\n", "  (define (check_bracketing brackets\
    \ count)\n    (cond\n      [(string=? brackets \"\") (= count 0)]\n      [(string=?\
    \ (substring brackets 0 1) \"(\") (check_bracketing (substring brackets 1) (+\
    \ count 1))]\n      [(string=? (substring brackets 0 1) \")\") (check_bracketing\
    \ (substring brackets 1) (- count 1))]))\n  (check_bracketing brackets 0))\n",
  "  (let loop ([brackets brackets] [open-count 0])\n    (cond [(empty? brackets)\
    \ (zero? open-count)]\n          [(char=? (first brackets) #\\()\n           (loop\
    \ (rest brackets) (+ open-count 1))]\n          [(char=? (first brackets) #\\\
    ))\n           (and (positive? open-count)\n                (loop (rest brackets)\
    \ (- open-count 1)))]\n          [else (error \"invalid bracketing string\")])))\n",
  "  (cond\n    [(null? brackets) #t]\n    [(char=? (string-ref brackets 0) #\\()\
    \ (correct_bracketing (substring brackets 1))]\n    [(char=? (string-ref brackets\
    \ 0) #\\)) #f]))\n", "    (cond ((string=? brackets \"\") #t)\n          ((string=?\
    \ (substring brackets 0 1) \"(\") (correct_bracketing (substring brackets 1)))))\n",
  "  (cond ((string=? brackets \"\") #t)\n        ((string=? (substring brackets 0\
    \ 1) \"(\")\n         (if (string=? (substring brackets -1) \")\")\n         \
    \    (correct_bracketing (substring brackets 1 -1))\n             #f))\n     \
    \   (#t #f)))\n", "  (cond\n    [(empty? brackets) true]\n    [(equal? (first\
    \ brackets) \"(\")\n     (and (correct_bracketing (rest brackets))\n         \
    \ (correct_bracketing (bracket_rest brackets)))]\n    [(equal? (first brackets)\
    \ \")\") false]))\n", "  (cond\n    [(empty? brackets)\n     #t]\n    [(string=?\
    \ (first brackets) \")\")\n     #f]\n    [(string=? (first brackets) \"(\")\n\
    \     (correct_bracketing (rest brackets))]))\n", "  (let ([open (count brackets\
    \ \"(\" \"\")]\n        [close (count brackets \")\" \"\")])\n    (and (and (>=\
    \ open 1) (>= close 1))\n         (= open close))))\n", "  (cond [(empty? brackets)\
    \ true]\n        [(equal? (first brackets) \")\") false]\n        [(equal? (first\
    \ brackets) \"(\")\n         (if (not (empty? (rest brackets)))\n            \
    \ (correct_bracketing (rest brackets))\n             false)]))\n", "  (match brackets\n\
    \t\t[() #t]\n\t\t[(cons '(?\\() (cons '(?\\)) rest)) (correct_bracketing rest)]\n\
    \t\t[else #f]))\n", "  (define (bracket-char? c)\n    (equal? c #\\( || equal?\
    \ c #\\)))\n  (define (first-non-bracketing-char str)\n    (if (string-null? str)\
    \ \"\"\n        (if (bracket-char? (string-ref str 0)) (first-non-bracketing-char\
    \ (substring str 1))\n            str)))\n  (define (bracketing? str)\n    (string-null?\
    \ (first-non-bracketing-char str)))\n  (define (match-count str)\n    (define\
    \ (match-count-it s n)\n      (if (string-null? s) n\n          (if (equal? (string-ref\
    \ s 0) #\\() (match-count-it (substring s 1) (+ n 1))\n              (if (equal?\
    \ (string-ref s 0) #\\)) (match-count-it (substring s 1) (- n 1))\n          \
    \        (match-count-it (substring s 1) n)))))\n    (match-count-it str 0))\n\
    \  (cond ((string-null? brackets) #t)\n        ((not (bracketing? brackets)) #f)\n\
    \        ((equal? (match-count brackets) 0) #t)\n        (else #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
