name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (cond ((> (+ a b) c)\n         (round (* 0.5 (* a (sqrt (- (* b b)\
    \ (* 0.25 (- (* c c) (* a a))))))) 2))\n        (else -1)))\n", "  (cond ((>=\
    \ (+ a b) c) (* (/ (+ a b) 2) (sqrt (- (* (* a a) (* b b)) (* (* a b) (* 2 a b\
    \ c)) (* (* c c) (* b b))))))\n        ((>= (+ a c) b) (* (/ (+ a c) 2) (sqrt\
    \ (- (* (* a a) (* c c)) (* (* a c) (* 2 a b c)) (* (* b c) (* b b))))))\n   \
    \     ((>= (+ b c) a) (* (/ (+ b c) 2) (sqrt (- (* (* b b) (* c c)) (* (* b c)\
    \ (* 2 a b c)) (* (* a c) (* a a))))))\n        (else -1)))\n", "  (define s (/\
    \ (+ a b c) 2))\n  (if (< (- s a) a)\n      -1\n      (define area (sqrt (* s\
    \ (- s a) (- s b) (- s c))))\n      (if (= area 0)\n          -1\n          (round\
    \ (* 2 area) 2))))\n", "  (if (or (&gt;= (+ a b) c)\n          (&gt;= (+ a c)\
    \ b)\n          (&gt;= (+ b c) a))\n      (round (* (/ (- (+ a b c) (* -1.0 a)\
    \ (* -1.0 b) (* -1.0 c)) 2.0)\n                (sqrt (+ (* (- (+ a b c) (* -1.0\
    \ a) (* -1.0 b) (* -1.0 c))\n                          (- (+ a b c) (* -1.0 a)\
    \ (* -1.0 b) (* -1.0 c)))\n                        (* a a)\n                 \
    \       (* b b)\n                        (* c c)))))\n      -1))\n", "  (define\
    \ (positive x) (> x 0))\n  (define (is-triangle? a b c)\n    (and (positive a)\n\
    \         (positive b)\n         (positive c)\n         (<= (+ a b) c)\n     \
    \    (<= (+ a c) b)\n         (<= (+ b c) a)))\n  (cond ((is-triangle? a b c)\
    \ (* .5 (- (* a b) (* b c) (* a c))))\n        (else -1)))\n", "  (if (valid?\
    \ a b c)\n      (round (* 0.5 ( + a b c)))\n      -1))\n", "  (if (and (&gt; (+\
    \ a b) c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b c) a))\n      (round\
    \ (* 0.5 a b (sqrt (- (* c c) (+ (* (- a) (- a)) (+ (* (- b) (- b)) (* (- c) (-\
    \ c)))))))\n      -1))\n</code>\nI am pretty new to scheme so I believe I can\
    \ improve this code especially on the last line. How can I improve this code?\
    \ Also, how can I make it more functional?\n\n\nA:\n\nYour code is correct and\
    \ quite functional. It's important to remember that functional programming is\
    \ not just about using some functional language. You can write functional style\
    \ code using any language, it's a style of programming that can be emulated using\
    \ any language.\nThat said, there's always room for improvement. The first thing\
    \ that I would change is that your last line is hard to read, so I'd rewrite it\
    \ in this way:\n<code>(define (triangle_area a b c)\n  (if (and (&gt; (+ a b)\
    \ c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b c) a))\n      (round\
    \ (* 0.5 a b (sqrt (- (* c c) (+ (* (- a) (- a)) (+ (* (- b) (- b)) (* (- c) (-\
    \ c)))))))\n      -1))\n</code>\nNotice how the use of some extra <code>begin</code>\
    \ expressions helps make it more readable, especially the part that calculates\
    \ the area, which was transformed into this:\n<code>(sqrt\n  (- (* c c)\n    \
    \ (+ (* (- a) (- a))\n        (+ (* (- b) (- b))\n           (* (- c) (- c))))))\n\
    </code>\n", "  (cond ((and (< a 0) (< b 0) (< c 0)) -1)\n        ((or (< a 0)\
    \ (< b 0) (< c 0)) -1)\n        ((or (> a (+ b c)) (> b (+ a c)) (> c (+ a b)))\
    \ -1)\n        (else (* 0.5 (* a (sqrt (* (- (* a a) (* b b)) (* c c))))))))\n",
  "    (cond\n      [(and (>= c (+ a b)) (>= b (+ a c)) (>= a (+ b c))) (/ (* (- a\
    \ (* 0.5)) (- b (* 0.5)) (- c (* 0.5))) (- c (* 0.5)))]\n      [else -1]))\n",
  "  (cond\n    [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a)) (* 0.5 (- (+ a\
    \ b c) c))]\n    [else -1]))\n", "  (define (s) \n    (/ (+ a b c) 2))\n  (define\
    \ (area)\n    (sqrt (- (s) (* a (- (s) a)) (* b (- (s) b)) (* c (- (s) c)))))\n\
    \  (cond ((< (area) 0) -1)\n        ((= (area) 0) 0)\n        (else (round (*\
    \ 100 (area)) (/ 100 2)))))\n```", "  (if (or (or (&lt; a (+ b c)) (&lt; b (+\
    \ a c)) (&lt; c (+ a b))) (&lt; 0 a) (&lt; 0 b) (&lt; 0 c))\n      -1\n      (round\
    \ (* 0.5 (sqrt (+ (* (- b c) (- b c)) (* (- a c) (- a c)) (* (- a b) (- a b))))))\n\
    \      ))\n</code>\n<code>#lang racket\n", "  (if (or (> a (+ b c)) (> b (+ a\
    \ c)) (> c (+ a b)))\n      -1\n      (let* ([s (/ (+ a b c) 2)]\n           \
    \  [area (sqrt (* s (- s a) (- s b) (- s c)))])\n        (round (* area 100) 2))))\n",
  "  (if (> a 0)\n      (if (> b 0)\n          (if (> c 0)\n              (if (< (+\
    \ a b) c)\n                  -1\n                  (round (* (tri-s a b c) (/\
    \ 2.0 (max a b c))))\n                  )\n              )\n          )\n    \
    \  )\n  )\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b)\
    \ c) (> (+ a c) b) (> (+ b c) a))\n          (define (half-perimeter x y z) (/\
    \ (+ x y z) 2))\n          (define (Heron-formula p a b c)\n            (sqrt\
    \ (* p (- p a) (- p b) (- p c))))\n          (round (* 2 (Heron-formula (half-perimeter\
    \ a b c) a b c)) 2))\n      -1))\n", "  (cond [(<= a 0) -1]\n        [(<= b 0)\
    \ -1]\n        [(<= c 0) -1]\n        [(or (<= (+ a b) c)\n             (<= (+\
    \ a c) b)\n             (<= (+ b c) a)) -1]\n        [else \n         (round (*\
    \ (sqrt\n                    (- (* (- a 1/2) (- a 1/2))\n                    \
    \   (* (- b 1/2) (- b 1/2))\n                       (* (- c 1/2) (- c 1/2))))\
    \ 2))]))\n", "  (cond ((or (< a 0) (< b 0) (< c 0)) -1)\n        ((or (> (+ a\
    \ b) c) (> (+ a c) b) (> (+ b c) a))\n         (* (/ (* (+ a b) c) 2) 1000)\n\
    \         (floor (* (/ (* (+ a b) c) 2) 1000))\n         (/ (floor (* (/ (* (+\
    \ a b) c) 2) 1000)) 1000.0))\n        (else -1)))\n", "  (let-values ([(s1 s2\
    \ s3) (sort '(a b c) <)])\n    (when (> (+ s1 s2) s3)\n      (round (* (sqrt (-\
    \ (* s3 s3) (/ (* (- (* s1 s1) (* s2 s2)) 2) 4))) 2)))))\n", "  (if (>= (+ a b)\
    \ c)\n      (round (* (sqrt (- (* (- a (/ a 2)) (- a (/ a 2)))\n             \
    \            (* (- b (/ b 2)) (- b (/ b 2)))\n                         (* (- c\
    \ (/ c 2)) (- c (/ c 2)))))\n               2))\n      -1))\n```\n\n9. Powers\
    \ of 2 that are also palindromes in binary.\n```#lang racket\n", "  (let ((s (/\
    \ (+ a b c) 2)))\n    (if (&gt; s a)\n        (* (/ (- s a) s)\n           (*\
    \ (/ (- s b) s)\n              (* (/ (- s c) s)\n                 s)))\n     \
    \   -1)))\n</code>\n", "  (if (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+\
    \ b c) a))\n      (round (* 0.5 (* (+ a b) c)))\n      -1))\n", "  (if (>= (+\
    \ a b) c)\n      (floor (/ (* a b) 2) 2)\n      -1))\n```\n\nWe can only know\
    \ whether or not this is true by writing tests.\n\n```racket\n#lang racket\n",
  "  (define s (/ (+ a b c) 2))\n  (cond\n    [(< a 0) -1]\n    [(< b 0) -1]\n   \
    \ [(< c 0) -1]\n    [(> a b) (if (> b c) (sqrt (- s a) (* (- s b) (- s c))) -1)]\n\
    \    [(> b c) (if (> a c) (sqrt (- s b) (* (- s a) (- s c))) -1)]\n    [(> a c)\
    \ (if (> b c) (sqrt (- s c) (* (- s a) (- s b))) -1)]\n    [else (sqrt (- s a)\
    \ (* (- s b) (- s c)))]))\n", "  (define (half-perimeter) (/ (+ a b c) 2))\n \
    \ (define (area)\n    (sqrt (* (half-perimeter) (- (half-perimeter) a) (- (half-perimeter)\
    \ b) (- (half-perimeter) c))))\n  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (round (* 100 (area)))\n     ]\n    [else -1]))\n ", "  (cond [(and (&gt;\
    \ (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n         (round (* 0.5 (- (+\
    \ (- a) b c) (* (- a) b c)) 2))]\n        [else -1]))\n", "  (cond ((or (< a 1)\
    \ (< b 1) (< c 1)) -1)\n        ((or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\
    \ -1)\n        (else\n         (round (/ (* a b c) 2) 2))))\n```\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(or (> (+ a b) c)\n         (> (+ a c) b)\n  \
    \       (> (+ b c) a))\n     (round (* (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2)))\
    \ (* (- b (/ a 2)) (- b (/ a 2))))) 2))]\n    [else -1]))\n", "  (if (and (&gt;\
    \ (+ a b) c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b c) a))\n    \
    \  (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n</code>\nI've tried to follow\
    \ the examples that I've found online, but they all seem to use a lot of built\
    \ in functions, and I'm not sure which ones I should be using.\nThanks in advance!\n\
    \n\nA:\n\n<code>#lang racket\n", "  (define (is_valid_triangle a b c)\n    (or\n\
    \     (and (&gt; (+ a b) c)\n          (&gt; (+ a c) b)\n          (&gt; (+ b\
    \ c) a))\n     0))\n  (define (area)\n    (* (/ (sqrt (+ (* (- a (/ (/ a 2) 2))\n\
    \                    (* (- b (/ (/ b 2) 2))\n                       (- b (/ (/\
    \ b 2) 2))))\n               (* (- a (/ (/ a 2) 2))\n                  (- c (/\
    \ (/ c 2) 2))))\n           2)\n        (- c (/ (/ c 2) 2))))\n  (cond ((is_valid_triangle\
    \ a b c)\n         (round (* 2 (area)) 2))\n        (else -1)))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c)) (cond\n                               [(> (+ b c)\
    \ a) (/ (* a (sqrt (- (* a a) (/ (+ (* b b) (* c c)) 4)))) 2) ]\n            \
    \                   [else -1])]\n    [(and (>= b a) (>= b c)) (cond\n        \
    \                       [(> (+ a c) b) (/ (* b (sqrt (- (* b b) (/ (+ (* a a)\
    \ (* c c)) 4)))) 2) ]\n                               [else -1])]\n    [(and (>=\
    \ c a) (>= c b)) (cond\n                               [(> (+ a b) c) (/ (* c\
    \ (sqrt (- (* c c) (/ (+ (* a a) (* b b)) 4)))) 2) ]\n                       \
    \        [else -1])]\n    [else -1]))\n```\n\n```racket\n#lang racket\n", "  (if\
    \ (and (&gt; (+ a b) c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b c)\
    \ a))\n      (round (* (/ (- (+ a b) c) 2)\n                 (sqrt (- (* (- (+\
    \ a b) c)\n                             (- (+ a b) c)\n                      \
    \       (- (+ a b) c))\n                          (+ (* (- (+ a c) b)\n      \
    \                         (- (+ a c) b)\n                               (- (+\
    \ a c) b))\n                             (* (- (+ b c) a)\n                  \
    \              (- (+ b c) a)\n                                (- (+ b c) a))))))\n\
    \      2)\n  -1)\n</code>\nI believe this is well within the bounds of code golf,\
    \ but I'm having trouble getting the precision right.\n\n\nA:\n\nYour version\
    \ is over-complicated, the following is good enough:\n<code>(define (triangle_area\
    \ a b c)\n  (let* ([s (/ (+ a b c) 2)]\n         [a (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n    (if (&lt; a 0) -1 (round (* 2 a) 2))))\n</code>\nNote that\
    \ it is still possible to find invalid triangles that return a number, because\
    \ of rounding errors.  For example, \n<code>(triangle_area 1e-18 1e-18 1e-17)\n\
    &gt; 1.0\n</code>\n", "  (cond [(and (&gt;= (+ a b) c)\n             (&gt;= (+\
    \ a c) b)\n             (&gt;= (+ b c) a))\n         (define s (/ (+ a b c) 2))\n\
    \         (round (* (sqrt (- s a) (- s b) (- s c)) 2))]\n        [else -1]))\n\
    </code>\nThe error I am receiving is:\n<code>define: missing the code for the\
    \ function body in: (define (triangle_area a b c) (cond [(and (&gt;= (+ a b) c)\
    \ (&gt;= (+ a c) b) (&gt;= (+ b c) a)) (define s (/ (+ a b c) 2)) (round (* (sqrt\
    \ (- s a) (- s b) (- s c)) 2))) (else -1)]))\n</code>\nWhy am I receiving this\
    \ error?\n\n\nA:\n\nYou can't nest a <code>define</code> inside a <code>cond</code>.\
    \ If you want the <code>s</code> to be defined only if the condition is true,\
    \ define it as a separate <code>let</code> binding.\n<code>(define (triangle_area\
    \ a b c)\n  (cond [(and (&gt;= (+ a b) c)\n             (&gt;= (+ a c) b)\n  \
    \           (&gt;= (+ b c) a))\n         (let ([s (/ (+ a b c) 2)])\n        \
    \   (round (* (sqrt (- s a) (- s b) (- s c)) 2)))]\n        [else -1]))\n</code>\n",
  "  (if (&gt; (+ a b) c) (string-&gt;number (number-&gt;string (* (/ (+ a b) 2) (sqrt\
    \ (- (* a a) (* (/ (- (* a a) (* b b)) (* (+ a b) (* -1 c))) (* c c)))))) -1))\n",
  "  (cond [(and (>= (+ a b) c)\n              (>= (+ a c) b)\n              (>= (+\
    \ b c) a))\n         (define (findArea a b c)\n           (* (/ (- (+ a b) c)\
    \ 2) (sqrt (- (* b b) (- (* a a) (* c c)) (* 2 a b))))\n         (* (findArea\
    \ a b c) 2)\n         ]\n        [else -1]))\n\n", "  (let ([s (/ (+ a b c) 2)])\n\
    \    (if (and (> a 0) (> b 0) (> c 0)\n             (> (+ a b) c)\n          \
    \   (> (+ a c) b)\n             (> (+ b c) a))\n        (sqrt (* s (- s a) (-\
    \ s b) (- s c)))\n        -1)))\n", "  (cond\n    [(and\n      (< (+ a b) c)\n\
    \      (< (+ a c) b)\n      (< (+ b c) a))\n     -1]\n    [else\n     (round (*\
    \ .5 (* a b) (* a c)))\n    ]))\n", "  (if (&gt; (+ a b) c)\n      (round (* (sqrt\
    \ (+ (* (- a (/ a 2)) (- a (/ a 2)))\n                        (* (- b (/ b 2))\
    \ (- b (/ b 2)))\n                        (* (- c (/ c 2)) (- c (/ c 2))))) 2))\n\
    \      -1))\n</code>\nTest cases:\n<code>#lang racket\n", "  (let ((s (* 0.5 (+\
    \ a b c))))\n    (if (&lt;= a s)\n        (if (&lt;= b s)\n            (if (&lt;=\
    \ c s)\n                (* s (- s a) (- s b) (- s c))\n                -1)\n \
    \           -1)\n        -1)))\n</code>\nThis is my code.\nI've been wondering\
    \ why this code is slow.\n\n\nA:\n\nThe main problem with your code is that it\
    \ fails to use memoization (in order to cache previously calculated values). This\
    \ is important because, as a rule of thumb, the vast majority of recursive calls\
    \ in a program will be tail-recursive, and it's really important to take advantage\
    \ of the performance increase that memoization provides. For example, notice that\
    \ you're repeating the same check over and over again:\n<code>(if (&lt;= a s)\n\
    \    (if (&lt;= b s)\n        (if (&lt;= c s)\n            (* s (- s a) (- s b)\
    \ (- s c))\n            -1)\n        -1)\n    -1)\n</code>\nA solution that uses\
    \ memoization, is simpler to follow, and is also more efficient, would be this:\n\
    <code>(define (triangle-area a b c)\n  (define (area-aux a b c)\n    (cond ((or\
    \ (&lt;= a 0) (&lt;= b 0) (&lt;= c 0)) -1)\n          ((&lt;= a (+ b c)) -1)\n\
    \          ((&lt;= b (+ a c)) -1)\n          ((&lt;= c (+ a b)) -1)\n        \
    \  (else (let ((s (/ (+ a b c) 2)))\n                  (* s (- s a) (- s b) (-\
    \ s c))))))\n  (define areas (make-hash))\n  (lambda (a b c)\n    (cond ((hash-ref\
    \ areas (list a b c) (lambda () #f)))\n          (else (let ((a (area-aux a b\
    \ c)))\n                  (hash-set! areas (list a b c) a)\n                 \
    \ a)))))\n</code>\n", "  (cond\n    [(< a 1) -1]\n    [(< b 1) -1]\n    [(< c\
    \ 1) -1]\n    [(< (+ a b) c) -1]\n    [(< (+ a c) b) -1]\n    [(< (+ b c) a) -1]\n\
    \    [else (round (/ (* a b) 2) 2)]))\n", "  (cond [(or (= 0 a) (= 0 b) (= 0 c))\
    \ -1]\n        [(and (> (+ a b) c)\n              (> (+ a c) b)\n            \
    \  (> (+ b c) a))\n         (round (* (sqrt (+ (* (- a (/ a 2)) (- a (/ a 2)))\n\
    \                            (* (- b (/ b 2)) (- b (/ b 2)))\n               \
    \             (* (- c (/ c 2)) (- c (/ c 2))))) 2))]\n        [else -1]))\n",
  "  (cond\n    [(>= (+ a b) c)\n     (round (* 0.5 (* a b)) 2)]\n    [(>= (+ a c)\
    \ b)\n     (round (* 0.5 (* a c)) 2)]\n    [(>= (+ b c) a)\n     (round (* 0.5\
    \ (* b c)) 2)]\n    [else -1]))\n", "  (cond\n    [(<= (+ a b) c) -1]\n    [(<=\
    \ (+ a c) b) -1]\n    [(<= (+ b c) a) -1]\n    [else\n     (/ (* a b) 2)]))\n",
  "  (cond\n    [(>= a b) (cond\n                [(>= a c) (- b c)]\n            \
    \    [else (- a c)])]\n    [else (cond\n            [(>= b c) (- a c)]\n     \
    \       [else (- a b)])]))\n", "  (cond ((or (> (+ a b) c) (> (+ a c) b) (> (+\
    \ b c) a))\n         (printf \"~a\" (* 0.5 (+ (- a b) (- a c) (- b c))))\n   \
    \      (-1))\n        (else (-1))))\n", "  (if (valid-triangle? a b c)\n     \
    \ (* (/ (expt (+ a b c) 2)\n            (* -1 (expt a 2)))\n         (/ 2 a))\n\
    \      -1))\n", "  (cond\n    [(>= a 0) (>= b 0) (>= c 0) (>= (+ a b) c) (>= (+\
    \ a c) b) (>= (+ b c) a) (+ (/ (* a b) 2) (/ (* a c) 2) (/ (* b c) 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(< a 0) -1]\n    [(< b 0) -1]\n    [(< c 0) -1]\n \
    \   [(>= a (+ b c)) -1]\n    [(>= b (+ a c)) -1]\n    [(>= c (+ a b)) -1]\n  \
    \  [else (/ (* a b (sin (acos (/ c (sqrt (+ (* a a) (* b b))))))) 2)]))\n", " \
    \ (define (is_valid_triangle)\n    (>= (+ a b) c)\n    (>= (+ a c) b)\n    (>=\
    \ (+ b c) a))\n  (if (is_valid_triangle)\n      (define s (/ (+ a b c) 2.0))\n\
    \      (sqrt (* s (- s a) (- s b) (- s c))))\n  (else -1))\n", "  (if (&gt;= a\
    \ (+ b c)) -1\n      (define (helper a b c)\n        (let ([s (/ (+ a b c) 2)])\n\
    \          (* s (- s a) (- s b) (- s c))))\n      (round (* (/ 1 2) (helper a\
    \ b c)) 2)))\n</code>\nThis code does the same thing, and is a little simpler:\n\
    <code>#lang racket\n", "  (cond\n    [(> (+ a b) c)\n     (begin\n       (define\
    \ perimeter (/ (+ a b c) 2))\n       (define area (sqrt (* (- perimeter a) (-\
    \ perimeter b) (- perimeter c))))\n       (printf \"~2f\" area))]\n    [else -1]))\n",
  "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* .5 (- (expt\
    \ a 2) (expt b 2) (expt c 2))) 2)\n      -1))\n", "  (if (and (<= a (+ b c)) (<=\
    \ b (+ a c)) (<= c (+ a b)))\n      (/ (* a b) 2.0)\n      -1))\n```\n3. Write\
    \ a function called `has_sum(total, numbers)` which takes a number and an unordered\
    \ list of integers.\nReturn True if any combination of two numbers in the list\
    \ equals `total` otherwise return False.\n```racket\n#lang racket\n", "  (if (<\
    \ a 0)\n      -1\n      (if (< b 0)\n          -1\n          (if (< c 0)\n   \
    \           -1\n              (if (> a (+ b c))\n                  -1\n      \
    \            (if (> b (+ a c))\n                      -1\n                   \
    \   (if (> c (+ a b))\n                          -1\n                        \
    \  (sqrt (* (- (* a a) (* b b) (* c c))\n                                   (+\
    \ (* a a) (* b b) (* c c))\n                                   )\n           \
    \                     )\n                          )\n                      )\n\
    \                  )\n              )\n          )\n      )\n  )\n", "  (cond\
    \ [(> (+ a b) c) (sqrt (* (- (- a b) c) (* (- (+ a b) c) (- (+ a b c) a) (- (+\
    \ a b c) b))))]\n        [else -1]))\n", "  (cond [(and (>= (+ a b) c)\n     \
    \         (>= (+ a c) b)\n              (>= (+ b c) a))\n         (round (* 0.5\
    \ (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c)) 2)]\n        [else -1]))\n",
  "  (cond [(and (<= 0 a) (<= 0 b) (<= 0 c)) \n         (cond [(and (<= a b) (<= a\
    \ c)) (cond [(and (<= b c) (>= (+ b c) a)) (/ (* a (- c b)) 2)])]\n          \
    \     [(and (<= b a) (<= b c)) (cond [(and (<= a c) (>= (+ a c) b)) (/ (* b (-\
    \ c a)) 2)])]\n               [(and (<= c a) (<= c b)) (cond [(and (<= a b) (>=\
    \ (+ a b) c)) (/ (* c (- b a)) 2)])])]\n        [else -1]))\n", "  (cond\n   \
    \ [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a))\n     (string-&gt;number\
    \ (format \"~2f\" (/ (* a b) 2)))]\n    [else -1]))\n</code>\nIf the <code>else</code>\
    \ part was <code>else #f</code>, the function would still work and indeed be exactly\
    \ the same function.\n", "  ;; Use Heron's formula\n  (define (s a b c)\n    (/\
    \ (+ a b c) 2))\n  (define (area a b c)\n    (sqrt (* (s a b c) (- (s a b c) a)\
    \ (- (s a b c) b) (- (s a b c) c))))\n  (define (add a b)\n    (+ a b))\n  (define\
    \ (test a b c)\n    (and (< a (add b c)) (< b (add a c)) (< c (add a b))))\n \
    \ (if (test a b c)\n      (round (* 100 (area a b c)))\n      -1))", "  (if (&gt;=\
    \ (+ a b) c)\n      (round (* (sqrt (- (* (- a c) (- a c))\n                 \
    \       (* (- b c) (- b c))))\n                2)\n             2)\n      -1))\n\
    </code>\nThe code is working and I'm good with that. The test cases are also passing\
    \ in my course.\nThe problem is that I want to know the more Racket way to do\
    \ it and the most efficient solution.\n\n\nA:\n\nThis isn't \"more Racket\" way.\
    \ This is just more obscure way.\nIn Racket, you can use <code>with-handlers</code>\
    \ to trap exceptions, and <code>raise</code> or <code>raise:continuable</code>\
    \ to raise them.\n<code>(define (triangle-area a b c)\n  (with-handlers ([exn:fail:contract?\
    \ (lambda (e) -1)])\n    (round (* (sqrt (+ (* a a) (* b b) (* (- c) (- c))))\n\
    \             2))))\n</code>\nNote, however, that I rewrote <code>-</code> with\
    \ <code>*</code>, so it will not get negative results.\nThe <code>round</code>\
    \ is dangerous as well. Maybe you should check if the result is a real number\
    \ before rounding it.\n<code>(define (triangle-area a b c)\n  (with-handlers ([exn:fail:contract?\
    \ (lambda (e) -1)])\n    (let ([area (* (sqrt (+ (* a a) (* b b) (* (- c) (- c))))\n\
    \                  2)])\n      (if (real? area)\n          (round area 2)\n  \
    \        -1))))\n</code>\n", "  (let ([[sorted-side1 sorted-side2 sorted-side3]\
    \ (sort (list a b c) <)])\n    (if (> (+ sorted-side1 sorted-side2) sorted-side3)\n\
    \      (round (* (/ sorted-side1 2) \n                (sqrt (- (* sorted-side3\
    \ sorted-side3)\n                         (* sorted-side1 sorted-side1))))\n \
    \            2)\n      -1)))\n", "  (if (and (< a (+ b c)) (< b (+ a c)) (< c\
    \ (+ a b)))\n      (round (* 0.5 (- (+ a b c) (- a)) (- (+ a b c) (- b)) (- (+\
    \ a b c) (- c))) 2)\n      -1))\n```\n\n```racket\n#lang racket\n", "  (if (&gt;=\
    \ (+ a b) c)\n      (-&gt;&gt; (sqrt (* (- (* a a) (* b b)) (* c c)))\n      \
    \     (* 0.5)\n           (* a b)\n           (* 2)\n           round)\n     \
    \ -1))\n", "  (cond ((and (< a (+ b c)) (< b (+ a c)) (< c (+ a b)))\n       \
    \  (sqrt (+ (* (- a) (- a) (- b) (- b)) (* (- b) (- b) (- c) (- c)) (* (- c) (-\
    \ c) (- a) (- a)) (* (+ (* 2 a) (* 2 b) (* 2 c))))))\n        (-1)))\n", "  (define\
    \ s (/ (+ a b c) 2))\n  (if (> (+ a b) c)\n      (round (* s (- s a) (- s b) (-\
    \ s c)) 2)\n      -1))\n", "  (if (and (>= a (+ b c)) (>= b (+ a c)) (>= c (+\
    \ a b)))\n      (* 0.5 (* a b c))\n      -1))\n", "  (cond ((< a 0) -1)\n    \
    \    ((< b 0) -1)\n        ((< c 0) -1)\n        ((> (+ a b) c) (* (sqrt (* (-\
    \ (* a a) (* b b) (* c c)) (+ (* a a) (* b b) (* c c)))) 0.5))\n        (else\
    \ -1)))\n```\n\n```racket\n#lang racket\n", "    (define (valid-triangle? a b\
    \ c)\n        (and (&gt; a 0)\n             (&gt; b 0)\n             (&gt; c 0)\n\
    \             (&gt; (+ a b) c)\n             (&gt; (+ a c) b)\n             (&gt;\
    \ (+ b c) a)))\n    (if (valid-triangle? a b c)\n        (define (semi-perimeter)\
    \ (/ (+ a b c) 2))\n        (define (square x) (* x x))\n        (define (area)\
    \ (sqrt (* (- (semi-perimeter) a)\n                                (- (semi-perimeter)\
    \ b)\n                                (- (semi-perimeter) c)\n               \
    \                 (semi-perimeter))))\n        (format \"~2f\" area))\n    -1)\n\
    </code>\nwhich gives the error\n<code>1&gt; (define (triangle_area a b c)\n2&gt;\
    \     (define (valid-triangle? a b c)\n3&gt;         (and (&gt; a 0)\n4&gt;  \
    \            (&gt; b 0)\n5&gt;              (&gt; c 0)\n6&gt;              (&gt;\
    \ (+ a b) c)\n7&gt;              (&gt; (+ a c) b)\n8&gt;              (&gt; (+\
    \ b c) a)))\nvalid-triangle?: bad syntax in: valid-triangle?\n  where: internal\
    \ definition of valid-triangle?\n  context...:\n   /home/jmachado/scratch/scratch.rkt:2:23:\
    \ define/form-level\n   /home/jmachado/scratch/scratch.rkt:2:2: define\n   /home/jmachado/scratch/scratch.rkt:1:0:\
    \ module body\n   /home/jmachado/scratch/scratch.rkt:1:0: module body\n \n2&gt;\
    \     (if (valid-triangle? a b c)\n3&gt;         (define (semi-perimeter) (/ (+\
    \ a b c) 2))\n4&gt;         (define (square x) (* x x", "  (define perimeter (/\
    \ (+ a b c) 2))\n  (define area (sqrt (* (- perimeter a) (- perimeter b) (- perimeter\
    \ c))))\n  (cond ((or (&lt; a 0) (&lt; b 0) (&lt; c 0)) -1)\n        ((or (&lt;\
    \ a (+ b c)) (&lt; b (+ a c)) (&lt; c (+ a b))) -1)\n        (else (round (* 100\
    \ area) ))))\n</code>\nand \n<code>#lang racket", "  (if (and (> a 0) (> b 0)\
    \ (> c 0))\n      (cond\n        [(or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n\
    \         (* 0.5 (* a b c))]\n        [else -1])\n      -1))\n", "  (cond\n  \
    \  [(>= a b)\n     (if (< (- a b) c)\n         (- 1)\n         (/ (* a b) 2))]\n\
    \    [else\n     (if (< (- b a) c)\n         (- 1)\n         (/ (* a b) 2))]))\n\
    ```\n* in Racket, floating-point division is performed with `/`\n\n```\n#lang\
    \ racket\n", "  (define (triangle-condition a b c)\n    (or (> (+ a b) c)\n  \
    \      (> (+ a c) b)\n        (> (+ b c) a)))\n  (define (heron a b c)\n    (define\
    \ s (/ (+ a b c) 2))\n    (sqrt (* s (- s a) (- s b) (- s c))))\n  (cond\n   \
    \ [(triangle-condition a b c) (heron a b c)]\n    [else -1]))\n", "  (if (valid?\
    \ a b c)\n      (sqrt (* (pow a 2) (pow b 2) (pow c 2)))\n      -1))\n", "  (let*\
    \ ([x (/ (+ a b c) 2.0)]\n         [s (* x (- x a) (- x b) (- x c))])\n    (if\
    \ (&lt; s 0) -1 (sqrt s))))\n</code>\nIf you want to be precise, use <code>exact-&gt;inexact</code>\
    \ when you need a <code>double</code>.\n", "  (cond\n    [(and (&gt;= a b c) (&gt;\
    \ (+ b c) a)) (define (s (/ (+ a b c) 2)) (* s (- s a) (- s b) (- s c)))\n   \
    \  (sqrt s)]\n    [else -1]))\n</code>\nI got this error:\n<code>application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 8\n  arguments...:\n   [none]\n</code>\nCan you guys give me some tips\
    \ on how to fix this? Thanks.\n\n\nA:\n\nYou have a syntax error in your code:\
    \ you're placing the <code>define</code> expression inside the body of the <code>cond</code>,\
    \ this is wrong. For a first approximation, you have to fix that and use <code>heron</code>\
    \ to calculate the area of the triangle:\n<code>(define (triangle_area a b c)\n\
    \  (cond\n    [(and (&gt;= a b c) (&gt; (+ b c) a)) (sqrt (heron a b c))]\n  \
    \  [else -1]))\n", "  (cond ((or (= a 0) (= b 0) (= c 0)) -1)\n        ((or (&lt;\
    \ (+ a b) c) (&lt; (+ a c) b) (&lt; (+ b c) a)) -1)\n        (else (/ (+ (* a\
    \ b) (* b c) (* a c)) 2))))\n", "  ;; Determine if a, b, and c form a valid triangle\n\
    \  (cond ((and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n         (if (&gt; (+ a b)\
    \ c)\n             (if (&gt; (+ a c) b)\n                 (if (&gt; (+ b c) a)\n\
    \                     (* (/ (+ (* a a) (* b b)) 2)\n                        (sqrt\
    \ (- (* a a) (/ (* (+ (* a a) (* b b)) 2)))))\n                     -1)\n    \
    \             -1)\n             -1))\n        (else -1)))\n</code>\n", "  (cond\
    \ [(<= (+ a b) c) -1]\n        [(<= (+ a c) b) -1]\n        [(<= (+ b c) a) -1]\n\
    \        [else (/ (* a b) 2.0)]))", "  (cond\n    [(or (> (+ a b) c) (> (+ a c)\
    \ b) (> (+ b c) a))\n     (round (* 0.5 (sqrt (+ (* (- a (/ (+ a b c) 2)) (- a\
    \ (/ (+ a b c) 2))) (* (- b (/ (+ a b c) 2)) (- b (/ (+ a b c) 2))) (* (- c (/\
    \ (+ a b c) 2)) (- c (/ (+ a b c) 2)))))) 2)]\n    [else -1]))\n", "  (define\
    \ (helper acc x xs)\n    (if (null? xs)\n        acc\n        (helper (+ acc (*\
    \ x (sqrt (- (* x x) (/ acc x))))) (car xs) (cdr xs))))\n  (cond\n    [(or (=\
    \ a 0) (= b 0) (= c 0)) -1]\n    [(>= (+ a b) c) (/ (helper a b (list c)) 4)]\n\
    \    [(>= (+ a c) b) (/ (helper a c (list b)) 4)]\n    [(>= (+ b c) a) (/ (helper\
    \ b c (list a)) 4)]\n    [else -1]))\n</code>\n", "  (cond\n    [(and (>= (+ a\
    \ b) c)\n          (>= (+ a c) b)\n          (>= (+ b c) a))\n     (round (* .5\
    \ (- (+ a b c) (- a b)) (- (+ a b c) (- a c)) (- (+ a b c) (- b c))) 2)]\n   \
    \ [else -1]))\n```\n## \n```\n#lang racket\n", "  (cond\n    [(and (< a 0) (<\
    \ b 0) (< c 0)) -1]\n    [(or (< a b) (< a c)) -1]\n    [(and (>= (+ a b) c) (>=\
    \ (+ b c) a) (>= (+ a c) b))\n      (let ([p (+ a b c)])\n        (/ (* p (- p\
    \ a) (- p b) (- p c)) 4.0))]\n    [else -1]))\n</code>\nTest:\n<code>#lang racket\n",
  "  (if (and (>= (+ a b) c)\n           (>= (+ a c) b)\n           (>= (+ b c) a))\n\
    \      (define heron\n        (lambda (a b c)\n          (let ((s (/ (+ a b c)\
    \ 2)))\n            (sqrt (* s (- s a) (- s b) (- s c))))))\n      (- heron a\
    \ b c)\n      -1))", "  (define (min a b)\n    (if (< a b) a b))\n  (define (max\
    \ a b)\n    (if (> a b) a b))\n  (define (valid-triangle a b c)\n    (> (+ (min\
    \ a b) (min b c)) (max a b)))\n  (if (valid-triangle a b c)\n      (sqrt (+ (*\
    \ (- a b 1) (- a b 1)) (* (- b c 1) (- b c 1))))\n      -1))\n```\n\n### Prime\
    \ number\n\nWrite a function that returns true if a number is prime and false\
    \ otherwise.\n\n```racket\n#lang racket\n", "  (define (calc-s triangle-sides)\n\
    \    (define (sum lst)\n      (if (null? lst)\n          0\n          (+ (car\
    \ lst) (sum (cdr lst)))))\n    (/ (sum triangle-sides) 2))\n  (define (calc-area\
    \ s a b c)\n    (sqrt (* s (- s a) (- s b) (- s c))))\n  (define (valid-triangle?\
    \ a b c)\n    (if (or (<= (+ a b) c) (<= (+ a c) b) (<= (+ b c) a))\n        #f\n\
    \        #t))\n  (define (append-decimals n)\n    (number->string (* n 100) 10))\n\
    \  (define (round-to-2dec n)\n    (string-&gt;number (substring (append-decimals\
    \ n) 0 5)))\n  (if (valid-triangle? a b c)\n      (round-to-2dec (calc-area (calc-s\
    \ (list a b c)) a b c))\n      -1))\n", "  (cond\n    [(or (&lt; a 1)\n      \
    \   (&lt; b 1)\n         (&lt; c 1)) -1]\n    [(or (&lt; a (+ b c))\n        \
    \ (&lt; b (+ a c))\n         (&lt; c (+ a b))) -1]\n    [else\n     (let ((s (/\
    \ (+ a b c) 2)))\n       (* s (- s a) (- s b) (- s c)))\n     ]))\n", "  (if (and\
    \ (&gt; (+ a b) c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b c) a))\n\
    \      (round (* (sqrt (* (- (* (+ a b) (- a b))\n                           \
    \ (- (* (+ a c) (- a c))\n                               (* (+ b c) (- b c))))\n\
    \                         2))\n                100))\n      -1))\n", "  (define\
    \ (s a b c)\n    (/ (+ a b c) 2))\n  (define (is-valid-triangle a b c)\n    (and\
    \ (> a 0)\n         (> b 0)\n         (> c 0)\n         (> (+ a b) c)\n      \
    \   (> (+ a c) b)\n         (> (+ b c) a)))\n  (cond\n    [(is-valid-triangle\
    \ a b c)\n     (round (* (sqrt (- (* (s a b c)\n                           (*\
    \ (s a b c)\n                              (- (s a b c) a)\n                 \
    \             (- (s a b c) b)\n                              (- (s a b c) c))))\n\
    \                    2))\n            2)]\n    [else -1]))\n", "  (define (p)\
    \ (* (+ a b c) -0.5)) ;; p is half of the perimeter\n  (if (< (* a b c) 0)\n \
    \     -1\n      (* (sqrt (+ (* a (- p a)) (* b (- p b)) (* c (- p c)))) p)))",
  "  (let ([s (+ a b c)])\n    (/ (* (- s a) (- s b) (- s c)) (* s 2))))\n", "  (if\
    \ (valid-triangle? a b c)\n      (let ([s (/ (+ a b c) 2)])\n        (round (*\
    \ (- s a) (- s b) (- s c)) 2))\n      -1))\n", "  (cond\n    [(and (>= a 0) (>=\
    \ b 0) (>= c 0)) (let ([s (/ (+ a b c) 2.0)])\n                              \
    \         (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (let\n    [(s\
    \ (/ (+ a b c) 2))]\n    (cond\n      [(>= a b)\n       (cond\n         [(>= b\
    \ c) (* (sqrt (- s a) (- s b) (- s c)) 0.5)]\n         [(>= a c) (* (sqrt (- s\
    \ b) (- s c) (- s a)) 0.5)])]\n      [(>= b c) (* (sqrt (- s a) (- s b) (- s c))\
    \ 0.5)]\n      [else (* (sqrt (- s a) (- s b) (- s c)) 0.5)])))\n```\n\n<br>\n\
    \n### Problem 17\n\n```racket\n#lang racket\n", "  (define area\n    (* (/ (sqrt\
    \ (+ (* (- a (/ b 2)) (- a (/ b 2)))\n                  (* (- b (/ c 2)) (- b\
    \ (/ c 2)))\n                  (* (- c (/ a 2)) (- c (/ a 2)))))\n          2)\n\
    \       (/ b 2)))\n  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n   \
    \   (round (exact->inexact area) 2)\n      -1))\n", "  (cond\n    [(>= (+ a b)\
    \ c) (/ (* a b) 2)]\n    [(>= (+ a c) b) (/ (* a c) 2)]\n    [(>= (+ b c) a) (/\
    \ (* b c) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (define s (/ (+ a b c) 2))\n     (* s (- s a) (- s b) (- s c))]\n    [else\
    \ -1]))\n</code>\n", "  (cond\n    [(or (> a (+ b c)) (> b (+ a c)) (> c (+ a\
    \ b))) -1]\n    [else (* (/ (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2))) (* (- b (/\
    \ a 2)) (- b (/ a 2))))) 2) a)]))\n```\n\n```\n#lang racket\n", "  (cond [(< a\
    \ 1) (-1)]\n        [(< b 1) (-1)]\n        [(< c 1) (-1)]\n        [(> (+ a b)\
    \ c) (* (sqrt (* (- (* a a) (* b b)) (* c c))) 0.5)]\n        [else (-1)]))\n\
    ```\n\nWrite a function that takes a list of numbers and returns the mean of the\
    \ list.\n```racket\n#lang racket\n", "  (if (and (and (> a 0) (> b 0) (> c 0))\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (/ (* (+ a b c) (- (+ a b\
    \ c) a) (- (+ a b c) b) (- (+ a b c) c)) 24)\n      -1))\n```\n\n```racket\n#lang\
    \ racket\n", "  (cond\n    ((<= a b c) -1)\n    ((<= b c a) -1)\n    ((<= c a\
    \ b) -1)\n    (else\n     (let\n       ([s (/ (+ a b c) 2)])\n       (* (/ s (-\
    \ s a)) (/ s (- s b)) (/ s (- s c)))\n       )\n     )\n    )\n  )\n", "  ;; All\
    \ inputs will be valid positive numbers greater than 0.\n  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a)) (exact->inexact (* 0.5 (+ (* a b) (* b c) (* a c))))]\n     \
    \  [else -1])]\n    [else -1]))\n", "  (define s (/ (+ a b c) 2))\n  (if (&gt;=\
    \ (+ a b) c)\n      (/ (* s (- s a) (- s b) (- s c)) 2)\n      -1))\n", "  (if\
    \ (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n      (round (* 0.5\
    \ (* a b c)) 2)\n      -1))\n</code>\nIs there a more concise way to do this?\n\
    \n\nA:\n\nSome observations:\n\nThere's no need to check if the third side is\
    \ greater than the first two:\nif the first two pass the test, the third must\
    \ also be greater than the first two.\n<code>(round ... 2)</code> will give the\
    \ correct result only when the answer is an integer, or almost an integer (but\
    \ with a 4 in the hundredths place). When the answer is not nearly an integer,\
    \ it will drop the hundredths place instead of rounding.\nIt's not clear why you're\
    \ asking for a more concise way to do this, or what you're trying to accomplish.\n\
    \nA better way to do this is to recognize that the triangle inequality theorem\
    \ is really saying that no side can be longer than the sum of the others. This\
    \ can be expressed as <code>(&lt; a (+ b c))</code>. If you use this approach,\
    \ the output will always be rounded to two decimal places.\n<code>(define (triangle-area\
    \ a b c)\n  (cond ((&lt; a (+ b c))\n         (round (* 0.5 (* a b c)) 2))\n \
    \       ((&lt; b (+ a c))\n         (round (* 0.5 (* a b c)) 2))\n        ((&lt;\
    \ c (+ a b))\n         (round (* 0.5 (* a b c)) 2))\n        (else -1)))\n</code>\n",
  "  (let ((s (* 0.5 (+ a b c))))\n    (if (&lt;= a 0 b 0 c 0)\n        -1\n     \
    \   (sqrt (- (* s (- s a)) (* s (- s b)) (* s (- s c)))))))\n", "  (if (and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (let ([s (/ (+ a b c) 2)])\n\
    \        (round (* s (- s a) (- s b) (- s c)) 2))\n      -1))\n</code>\nAnd I'm\
    \ getting the following errors:\n<code>application: not a procedure;\n expected\
    \ a procedure that can be applied to arguments\n  given: '(a b c)\n  arguments...:\n\
    \   3\n   4\n   5\n</code>\nHere's what I think is going on:\n", "  (cond [(and\
    \ (> a 0) (> b 0) (> c 0))\n         (let [(p (/ (+ a b c) 2))]\n           (*\
    \ (/ p (- p a) (- p b) (- p c)) (sqrt p)))]\n        [else -1]))\n", "  (let ((s\
    \ (* (/ (+ a b c) 2) (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c)) ))\n   \
    \ (cond ((&gt; s 0) (sqrt s))\n          (else -1))))\n", "  (cond\n    ((and\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (/ (* (+ a b c)\n  \
    \                (- (+ a b c) a)\n                  (- (+ a b c) b)\n        \
    \          (- (+ a b c) c))\n               16.0)\n            2))\n    (else\
    \ -1)))\n```\n\n```python\ndef triangle_area(a, b, c):\n    if a + b > c and a\
    \ + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round((p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n    return -1\n```\n\n```ruby\ndef\
    \ triangle_area(a, b, c)\n  return -1 if (a + b <= c) || (a + c <= b) || (b +\
    \ c <= a)\n  s = (a + b + c) / 2.0\n  return (s * (s - a) * (s - b) * (s - c))\
    \ ** 0.5\nend\n```\n\n```javascript\nfunction triangle_area(a, b, c) {\n  var\
    \ x = (a + b + c) / 2\n  var s = Math.sqrt(x * (x - a) * (x - b) * (x - c))\n\
    \  return (s === s) ? s : -1\n}\n```\n\n```coffeescript\ntriangle_area = (a, b,\
    \ c) ->\n  s = (a + b + c) / 2\n  return -1 if (s * (s - a) * (s - b) * (s - c))\
    \ < 0\n  Math.sqrt(s * (s - a) * (s - b) * (s - c))\n```\n\n```julia\ntriangle_area(a,\
    \ b, c) = let x = (a + b + c) / 2.0 in sqrt(x * (x - a) * (x - b) * (x - c))\n\
    ```\n\n```c\n#include <", "  (cond\n    [(> (+ a b) c) (round (/ (triangle-area\
    \ a b c) 2) 2)]\n    [(> (+ a c) b) (round (/ (triangle-area a c b) 2) 2)]\n \
    \   [(> (+ b c) a) (round (/ (triangle-area b c a) 2) 2)]\n    [else -1]))\n",
  "  (if (&gt; (+ a b) c)\n      (define (heron-formula a b c)\n        (define s\
    \ (/ (+ a b c) 2))\n        (define-values (q r) (quotient/remainder s 2))\n \
    \       (cond ((&gt; r 0) (+ (* q q) 1))\n              (else (* q q))))\n   \
    \   (define perimeter (+ a b c))\n      (round (/ (* perimeter (heron-formula\
    \ a b c)) 2)))\n      (-1)))\n</code>\nAnd the error message:\n<code>; File: /home/mike/Racket/chapter-4/triangle_area.rkt",
  "  (define s (/ (+ a b c) 2))\n  (sqrt (* s (- s a) (- s b) (- s c))))\n", "  (if\
    \ (and (&gt;= a (+ b c))\n           (&gt;= b (+ a c))\n           (&gt;= c (+\
    \ a b)))\n      -1\n      (* .5 (+ (* a a) (* b b) (* c c)))))\n</code>\nI hope\
    \ that helps you get started.\n", "  (if (and (> a 0) (> b 0) (> c 0))\n     \
    \ (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (printf \"~a~n\"\
    \ (/ (* a b) 2))\n          (printf \"-1~n\"))\n      (printf \"-1~n\")))\n",
  "  (define (sum-of-sides l1 l2 l3)\n    (cond [(> l1 l2 l3) (+ l2 l3)]\n       \
    \   [(> l2 l1 l3) (+ l1 l3)]\n          [(> l3 l1 l2) (+ l1 l2)]\n          [else\
    \ -1]))\n  (define (heron a b c)\n    (define s (/ (+ a b c) 2))\n    (sqrt (*\
    \ s (- s a) (- s b) (- s c))))\n  (cond [(or (< a 0) (< b 0) (< c 0)) -1]\n  \
    \      [(= a 0) 0]\n        [(= b 0) 0]\n        [(= c 0) 0]\n        [(= a b)\
    \ (* 2 b)]\n        [(= b c) (* 2 c)]\n        [(= a c) (* 2 a)]\n        [(>\
    \ (+ a b) c) (heron a b c)]\n        [(> (+ b c) a) (heron b c a)]\n        [(>\
    \ (+ a c) b) (heron a c b)]\n        [else -1]))", "  (cond\n    [(< a 0) -1]\n\
    \    [(< b 0) -1]\n    [(< c 0) -1]\n    [(> (+ a b) c) (sqrt (* (- (* a a) (*\
    \ b b) (* c c)) 4))]\n    [else -1]))", "  (define (is-valid-triangle? a b c)\n\
    \    (and (&gt;= a b c)\n         (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n\
    \         (&gt; (+ b c) a)))\n  (if (is-valid-triangle? a b c)\n      (exact-&gt;inexact\
    \ (/ (* a b c) 2))\n      -1))\n</code>\n", "  (define (heron_formula s a b c)\n\
    \    (sqrt (* s (- s a) (- s b) (- s c))))\n  (define (sum-of-two a b c)\n   \
    \ (cond\n      [(> (+ a b) c) (+ a b)]\n      [(> (+ a c) b) (+ a c)]\n      [(>\
    \ (+ b c) a) (+ b c)]\n      [else #f]))\n  (cond\n    [(> a 0) (* 0.5 (heron_formula\
    \ (/ (+ a b c) 2) a b c))]\n    [else -1]))\n", "  (define (semiperimeter s1 s2\
    \ s3)\n    (cond [(and (> (+ s1 s2) s3) (> (+ s1 s3) s2) (> (+ s2 s3) s1))\n \
    \           (floor (* (sqrt (* (* (+ s1 s2 s3) (- s1 s2 s3)) (+ s1 s2 s3))) 100))\n\
    \           ]\n          [else\n           -1\n           ]\n         )\n    )\n\
    \  (semiperimeter a b c)\n  )\n</code>\nI fail this test case: \n<code>tests[2]\
    \ | \n  triangle_area(5, 4, 3) | \n  expected: 6.0, instead got: -1 | \n  FAIL\n\
    </code>\nThis is my failure condition:\n<code>(= (triangle_area 5 4 3) 6.0)\n\
    </code>\nI can't seem to figure out why it is failing. It doesn't make sense.\n\
    My code is not very elegant but it works for every test case but this one.\n\n\
    \nA:\n\nThere are two issues with your function:\n\nYou are comparing the numbers\
    \ as they are passed in, not their absolute values, so the function can't distinguish\
    \ <code>(triangle_area 5 4 3)</code> from <code>(triangle_area 3 4 5)</code>\n\
    You are using <code>floor</code> to round the result to two decimal places, but\
    \ the tests expect the number to be rounded to two decimal places and then converted\
    \ to a string\n\nThis is how I would rewrite your function:\n<code>(define (triangle_area\
    \ a b c)\n  (define (semiperimeter s1 s2 s3)\n    (cond [(and (&gt; (+ (abs s1)\
    \ (abs s2)) (abs s3))\n               (&gt; (+ (abs s1) (abs s3)) (abs s2))\n\
    \               (&gt; (+ (abs s2) (abs s3)) (abs s1)))\n            (number-&gt;string\
    \ (exact-&gt;inexact (* (/ (sqrt (* (- s1 s2 s3) (+ s1 s2 s3) (+ s1 s2 s3))) 2)\
    \ 100)))\n           ]", "  (cond\n    [(>= (+ a b) c) (/ (+ (- b) a c) 2.0)]\n\
    \    [(>= (+ a c) b) (/ (+ (- c) a b) 2.0)]\n    [(>= (+ b c) a) (/ (+ (- c) a\
    \ b) 2.0)]\n    [else -1]))\n", "  (define (is-valid a b c)\n    (and (> a (-\
    \ b c))\n         (> b (- a c))\n         (> c (- a b))))\n  (define (heron-formula\
    \ a b c)\n    (define (s (/ (+ a b c) 2))\n      (* (- s a) (- s b) (- s c)))\n\
    \    (sqrt s))\n  (cond [(is-valid a b c) (heron-formula a b c)]\n        [else\
    \ -1]))\n", "  (let ([p (/ (+ a b c) 2)])\n    (if (<= (+ a b) c)\n        -1\n\
    \        (floor (* p (- p a) (- p b) (- p c)) 2))))\n", "  (define s (* (+ a b\
    \ c) 0.5))\n  (cond [(<= a 0) -1]\n        [(<= b 0) -1]\n        [(<= c 0) -1]\n\
    \        [(>= (+ a b) c) (* s (- s a) (- s b) (- s c))]\n        [else -1]))\n",
  "  (cond\n    [(<= (+ a b) c) -1]\n    [(<= (+ a c) b) -1]\n    [(<= (+ b c) a)\
    \ -1]\n    [else (round (* (/ (+ a b c) 2) \n                    (sqrt (- (* (-\
    \ (+ a b c) a) \n                                (- (+ a b c) b) \n          \
    \                      (- (+ a b c) c)\n                                )\n  \
    \                           3))\n                    ) 2)]))\n", "  (if (and (>=\
    \ a b c)\n           (>= b c a)\n           (>= c a b))\n      (round (* 0.5 (-\
    \ a b c)) 2)\n      -1))\n", "  (cond ((and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n\
    \         (+ (/ (* a b) 2) (/ (* a c) 2) (/ (* b c) 2)))\n        (else (-1))))\n",
  "  ;; `(* pi (/ (/ (+ a b c) 2) (+ (- a) (- b) (- c)))))\n  )", "  (if (and (> (+\
    \ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round (*\
    \ 1/2 ( + a b ) ( + a c )))\n      -1))\n", "  (define pi 3.14159265359)\n  (cond\n\
    \    [(<= a 0) -1]\n    [(<= b 0) -1]\n    [(<= c 0) -1]\n    [(<= (+ a b) c)\
    \ -1]\n    [(<= (+ a c) b) -1]\n    [(<= (+ b c) a) -1]\n    [else (* .5 (* a\
    \ b) sin (* pi (/ c (sqrt (+ (* a a) (* b b))))))]))\n", "  (cond\n    [(or (<\
    \ a 0) (< b 0) (< c 0))  -1]\n    [(or (< (+ a b) c) (< (+ a c) b) (< (+ b c)\
    \ a)) -1]\n    [else\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt\
    \ (* s (- s a) (- s b) (- s c))))\n     (* area 100 (/ (round (* area 100)) 100))]))\n",
  "  (let* ([s (* 0.5 (+ a b c))]\n         [area (sqrt (* s (- s a) (- s b) (- s\
    \ c)))])\n    (cond [(<= a 0) -1]\n          [(<= b 0) -1]\n          [(<= c 0)\
    \ -1]\n          [(<= (+ a b) c) -1]\n          [(<= (+ a c) b) -1]\n        \
    \  [(<= (+ b c) a) -1]\n          [else (floor (* area 100))])))\n```\n### Run\
    \ tests:\n```\nmake test\n```\n# day-28-space-age\n### Run tests:\n```\nmake test\n\
    ```\n### Run tests with detailed output:\n```\nmake test_verbose\n```\n### Clean\
    \ up:\n```\nmake clean\n```\n# day-29-markdown-table\n### Run tests:\n```\nmake\
    \ test\n```\n### Run tests with detailed output:\n```\nmake test_verbose\n```\n\
    ### Clean up:\n```\nmake clean\n```\n# day-30-account-balance\n### Run tests:\n\
    ```\nmake test\n```\n### Run tests with detailed output:\n```\nmake test_verbose\n\
    ```\n### Clean up:\n```\nmake clean\n```\n# day-31-mumbling\n### Run tests:\n\
    ```\nmake test\n```\n### Run tests with detailed output:\n```\nmake test_verbose\n\
    ```\n### Clean up:\n```\nmake clean\n```\n# day-32-json-query\n### Run tests:\n\
    ```\nmake test\n```\n### Run tests with detailed output:\n```\nmake test_verbose\n\
    ```\n### Clean up:\n```\nmake clean\n```\n# day-33-squares-in-rectangles\n###\
    \ Run tests:\n```\nmake test\n```\n### Run tests with detailed output:\n```\n\
    make test_verbose\n```\n### Clean up:\n```\nmake clean\n```\n# day-34-naughty-or-nice\n\
    ### Run tests:\n```\n", "  (if (and (<= a 0) (<= b 0) (<= c 0))\n      -1\n  \
    \    (+ (* 0.5 (* a b c))\n\t (- (/ (+ a b c) 2)))))\n", "  (if (&gt; a 0)\n \
    \     (if (&gt; b 0)\n          (if (&gt; c 0)\n              (if (&gt; (+ a b)\
    \ c)\n                  (if (&gt; (+ a c) b)\n                      (if (&gt;\
    \ (+ b c) a)\n                          (let ([s (/ (+ a b c) 2)])\n         \
    \                   (sqrt (- (* s (- s a))\n                                 \
    \    (* s (- s b))\n                                     (* s (- s c)))))\n  \
    \                        -1)\n                      -1)\n                  -1)\n\
    \              -1)\n          -1)\n      -1))\n", "  (cond\n    [(>= a 0) (cond\n\
    \                [(>= b 0) (cond\n                            [(>= c 0) (cond\n\
    \                                        [(+ a b) (> c) (cond\n              \
    \                                        [(+ b c) (> a) (cond\n              \
    \                                                      [(+ a c) (> b) (* (/ (+\
    \ a b c) 2.0) (sqrt (- (/ (* (+ a b c) (* a b c)) 16.0) (+ (* a a) (* b b) (*\
    \ c c)))))\n                                                                 \
    \                   (else -1)])\n                                            \
    \          (else -1)])\n                                        (else -1)])\n\
    \                            (else -1)])\n                (else -1)])\n    (else\
    \ -1)))", "  (if (and (&gt;= (+ a b) c)\n           (&gt;= (+ a c) b)\n      \
    \     (&gt;= (+ b c) a))\n      (* (/ (* a b) 2) (sin (/ (* a b c) (+ a b c)))))\n\
    \  -1)\n</code>\nI have been trying to figure out why this does not seem to be\
    \ working but I have not been able to. Any help would be much appreciated.\n\n\
    \nA:\n\nYou have the conditional backwards. You probably want:\n<code>(define\
    \ (triangle_area a b c)\n  (cond ((and (&gt;= (+ a b) c)\n              (&gt;=\
    \ (+ a c) b)\n              (&gt;= (+ b c) a))\n         (* (/ (* a b) 2) (sin\
    \ (/ (* a b c) (+ a b c)))))\n        (else -1)))\n</code>\n", "  (if (&gt;= (+\
    \ a b) c)\n      (format \"~2.2f\" (* (/ (+ a b) 2)\n                  (sqrt (-\
    \ (* a a) (* (/ (* b b) 4) (- (* c c) (* a a) (* b b))))))\n      -1))\n", " \
    \ (cond\n    [(or (or (< a 0) (< b 0) (< c 0))\n         (or (> (+ a b) c) (>\
    \ (+ a c) b) (> (+ b c) a))) -1]\n    [else (round (* 0.5 (- (* b b) (- (* c c)\
    \ (- (* a a))))))]))\n", "  (cond\n    [(>= (+ a b) c) (round (* (/ (sqrt (+ (*\
    \ (- a (/ a 2)) (- a (/ a 2))) (* (- b (/ b 2)) (- b (/ b 2))) (* (- c (/ c 2))\
    \ (- c (/ c 2))))) 2) 2))]\n    [else -1]))\n", "  (cond\n    [(>= (+ a b) c)\n\
    \     (* (/ (+ a b) 2) (sqrt (- (* (- a (/ (+ a b) 2)) (- a (/ (+ a b) 2)))\n\
    \                               (* (- c (/ (+ a b) 2)) (- c (/ (+ a b) 2))))))]\n\
    \    [else -1]))\n", "  (cond ((and (< a 0) (< b 0) (< c 0)) -1)\n        ((or\
    \ (< (+ a b) c) (< (+ a c) b) (< (+ b c) a)) -1)\n        (else\n         (round\
    \ (* (sqrt (* (* (- a (/ (* a 2) a)) (* (- b (/ (* b 2) b)) (* (- c (/ (* c 2)\
    \ c))))) 2)) 2))))\n</code>\nWhen I send a negative number to this function, I\
    \ get an error, when I put an invalid triangle, it gives me the right answer,\
    \ but when I give it a valid triangle and a float, it doesn't work:\n<code>&gt;\
    \ (triangle_area 10.5 10.5 10.5)\n10.0\n&gt; (triangle_area 10 10 10)\n10.0\n\
    &gt; (triangle_area 10.5 10 10)\n-1\n&gt; (triangle_area 10 10.5 10)\n-1\n&gt;\
    \ (triangle_area 10 10 10.5)\n-1\n</code>\nI think it's because of the <code>sqrt</code>\
    \ function, but I don't know how to fix it.\n\n\nA:\n\nThe problem is in the <code>sqrt</code>\
    \ function.\n<code>&gt; (sqrt 4)\n2\n&gt; (sqrt 4.0)\n2.0\n&gt; (sqrt (+ 9 (*\
    \ 4 4)))\n5\n&gt; (sqrt (+ 9 (* 4 4.0)))\n5.0\n</code>\nAs you can see, <code>sqrt</code>\
    \ ignores the type of the input and will always return a rational value.\nThis\
    \ is because <code>sqrt</code> is implemented in Racket as follows:\n<code>(define\
    \ (sqrt x)\n  (if (zero? x) 0\n      (if (negative? x) (error 'sqrt \"undefined\
    \ for negative numbers\")\n          (exact-sqrt (abs x)))))\n</code>\nIf you\
    \ try a non-rational value, you get the following result:\n<code>&gt; (sqrt 4.5)\n\
    /usr/share/racket/collects", "  (if (= (- (+ a b) c) 0)\n      -1\n      (round\
    \ (/ (sqrt (+ (* (- (+ a b) c) (* (- (+ a b) c) (- (+ a b) c))) (* (* (- a c)\
    \ (- a c)) (* (* a a) (* b b))))) 4) 2)))\n\n```\n\n```racket\n#lang racket\n",
  "  (if (and (&gt; a 0) (&gt; b 0) (&gt; c 0))\n      (-1)\n      (+ (* 3 4) (* 4\
    \ 5) (* 5 3))\n      )\n</code>\nHere's the error I get:\n<code>define: undefined;\n\
    \ cannot reference undefined identifier\n at: (triangle_area a b c)\n in: (define\
    \ (triangle_area a b c)\n          (if (and (&gt; a 0) (&gt; b 0) (&gt; c 0))\n\
    \              (-1)\n              (+ (* 3 4) (* 4 5) (* 5 3))\n             \
    \ )\n</code>\nCan someone explain what I did wrong here?\n\n\nA:\n\nYou need to\
    \ indent your lines better. <code>if</code> is an expression which evaluates its\
    \ first argument. If that expression evaluates to true, it evaluates the second\
    \ argument. If that expression evaluates to false, it evaluates the third argument.\
    \ In your case, your code is evaluated as if it were:\n<code>(define (triangle_area\
    \ a b c)\n  (if (and (&gt; a 0) (&gt; b 0) (&gt; c 0))\n      (-1)\n      (+ (*\
    \ 3 4) (* 4 5) (* 5 3))\n  )\n</code>\nRacket then throws an error when it tries\
    \ to evaluate the <code>+</code> expression, because it's not allowed to have\
    \ an expression after an <code>if</code>'s predicate has been evaluated.\nIf you\
    \ instead indent your lines properly, Racket will see the code as it should be\
    \ interpreted.\n<code>(define (triangle_area a b c)\n  (if (and (&gt; a 0) (&gt;\
    \ b 0) (&gt; c 0))\n      (-1)\n      (+ (* 3 4) (* 4 5) (* 5 3))))\n</code>\n\
    This code will then evaluate as you expect it to.\n", "  (if (and (>= a (+ b c))\n\
    \           (>= b (+ a c))\n           (>= c (+ a b)))\n      (round (* (sqrt\
    \ (/ (* (+ a b c) (- a b c) (- b c a)) 4)) 2))\n      -1))", "  (cond [(or (>\
    \ a (+ b c)) (> b (+ a c)) (> c (+ a b))) -1]\n        [else (round (* (sqrt (+\
    \ (* (- a (/ b 2)) (- a (/ b 2))) (* (- b (/ a 2)) (- b (/ a 2))))) (/ b 2)) 2)]))\n",
  "  (if (&gt; (+ a b) c)\n      (* 0.5 (expt (+ (- a c) (- b c)) 2))\n      -1))\n",
  "  (cond\n    [(>= (+ a b) c)\n     (round (* (sqrt (- (* (- a (/ c 2)) (- a (/\
    \ c 2))) (* b b (/ a 2)))) 2) 2)]\n    [else -1]))\n", "  (if (and (> (+ a b)\
    \ c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (* 0.5 (* a b\
    \ c))\n      -1))\n", "  (cond [(< (+ a b) c) -1]\n        [(< (+ a c) b) -1]\n\
    \        [(< (+ b c) a) -1]\n        [else\n         (define s (/ (+ a b c) 2))\n\
    \         (round (* s (- s a) (- s b) (- s c)) 2)]))\n", "  (cond\n    [(and (>\
    \ (+ a b) c)\n          (> (+ a c) b)\n          (> (+ b c) a))\n     (round (*\
    \ 0.5 (* (+ a b c) (- a (+ b c)) (- b (+ a c)) (- c (+ a b)))) 2)]\n    [else\
    \ -1]))\n", "  (cond\n    [(or (< a 0) (< b 0) (< c 0)) -1]\n    [(or (= a 0)\
    \ (= b 0) (= c 0)) -1]\n    [(or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a)) -1]\n\
    \    [else (round (* 0.5 (- (+ a b c) (- a b c))) 2)]))\n", "  (if (and (> a 0)\
    \ (> b 0) (> c 0))\n      (if (and (< (+ a b) c) (< (+ a c) b) (< (+ b c) a))\n\
    \          (-1)\n          (round (* (/ (sqrt (* (+ (* (- a (/ a 2)) (- a (/ a\
    \ 2))) (- (+ (* b (/ b 2)) (- b (/ b 2))) (* c c)))) 4) 2) 2))\n      (-1)))\n",
  "  (if (> (+ a b) c)\n      (define p (/ (+ a b c) 2))\n      (round (* (sqrt p\
    \ (- p a) (- p b) (- p c)) 2)))\n  (-1))\n", "  (define base (/ (+ a b c) 2))\n\
    \  (define area (sqrt (* base (- base a) (- base b) (- base c))))\n  (cond\n \
    \   [(and (not(eq? a b)) (not(eq? b c)) (not(eq? a c)))\n     (round area 2)]\n\
    \    [else -1]))\n", "  (cond ((and (< (+ a b) c) (< (+ a c) b) (< (+ b c) a))\
    \ -1)\n        (else (* 0.5 (* a (sqrt (- (* b b) (* (/ a 2) (/ a 2))))))))\n\
    \  )\n```\n\n```racket\n#lang racket\n", "  (cond ((>= (+ a b) c) (round (* (sqrt\
    \ (* (- (* a a) (* b b)) (* (+ a b) (* a b)))) 0.5) 2))\n        ((>= (+ a c)\
    \ b) (round (* (sqrt (* (- (* a a) (* c c)) (* (+ a c) (* a c)))) 0.5) 2))\n \
    \       ((>= (+ b c) a) (round (* (sqrt (* (- (* b b) (* c c)) (* (+ b c) (* b\
    \ c)))) 0.5) 2))\n        (else -1)))\n", "  ;; Complete the function here\n \
    \ )\n", "    (cond [(or (< a (+ b c)) (< b (+ a c)) (< c (+ a b))) -1]\n     \
    \     [else (round (* (/ (+ a b c) 2) (sqrt (- (* (/ (+ a b c) 2) (/ (+ a b c)\
    \ 2)) (* a a) (* b b) (* c c)))) 2)]))\n", "  ;; If a + b &gt; c and a + c &gt;\
    \ b and b + c &gt; a\n  (cond\n    [(and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt;\
    \ (+ b c) a))\n     ;; Calculate the area\n     (define area (/ (* (sqrt (- (*\
    \ a a) (* b b) (* c c))) b) 2))\n     ;; Round to 2 decimal points\n     (round\
    \ (* area 100))]\n    [else -1]))\n</code>\nOutput:\n<code>&gt; (triangle_area\
    \ 3 4 5)\n6\n&gt; (triangle_area 1 2 10)\n-1\n</code>\n", "  (define (is_valid_triangle)\n\
    \    (and\n     (&gt; (+ a b) c)\n     (&gt; (+ a c) b)\n     (&gt; (+ b c) a)))\n\
    \  (cond\n    ((is_valid_triangle)\n     (round (* 0.5 (- (+ a b c) a b c))))\n\
    \    (else -1)))\n</code>\nOnce I have a triangle area function, then it is easy\
    \ to write a function that returns the perimeter.\n<code>#lang racket\n", "  (cond\n\
    \    ((or (< a 1) (< b 1) (< c 1)) -1)\n    ((or (> a (+ b c)) (> b (+ a c)) (>\
    \ c (+ a b))) -1)\n    (else (round (* (/ (+ a b c) 2) (sqrt (- (* (/ (+ a b c)\
    \ 2) (- (/ (+ a b c) 2) a)) (* (- (* (/ (+ a b c) 2) (- (/ (+ a b c) 2) b)) (-\
    \ (* (/ (+ a b c) 2) (- (/ (+ a b c) 2) c)))))))) 2))))\n", "  (define (is-valid-triangle?\
    \ a b c)\n    (and\n     (and\n      (&gt;= a 0)\n      (&gt;= b 0)\n      (&gt;=\
    \ c 0))\n     (and\n      (&gt; a (- b c))\n      (&gt; b (- a c))\n      (&gt;\
    \ c (- a b)))))\n  (if (is-valid-triangle? a b c)\n      (/ (+ (* a b) (* b c)\
    \ (* c a)) 4)\n      -1))\n</code>\nI've tried nesting <code>cond</code> as well\
    \ but that too failed.\nSolution for this question is here.\nI'm not looking for\
    \ a solution, I'm just looking for a direction because I've tried multiple approaches\
    \ but can't get it right.\n\n\nA:\n\nIf you want the expression to evaluate to\
    \ <code>-1</code> if and only if <code>a</code>, <code>b</code>, or <code>c</code>\
    \ is negative, you'll have to take the sum of your two guards <code>(&gt;= a 0)</code>,\
    \ <code>(&gt;= b 0)</code>, and <code>(&gt;= c 0)</code>; if any of these is false,\
    \ the <code>and</code> will evaluate to <code>#f</code>.\nThe second half of your\
    \ <code>and</code> doesn't work for the same reason. You've written the guards\
    \ as \"the length of the side is greater than the length of the other two sides\"\
    , which will always be false.\nInstead, the guards should be \"the length of the\
    \ side is greater than the sum of the other two sides\".\n<code>(define (is-valid-triangle?\
    \ a b c)\n  (and\n   (and\n    (&gt;= a 0)\n    (&gt;= b 0)\n    (&gt;= c 0))\n\
    \   (and\n    (&gt; a (+ b c))\n    (&gt; b (+ a c))\n    (&gt; c (+ a b)))))\n\
    </code>\n", "  (define (is-valid)\n    (and (> a 0) (> b 0) (> c 0)\n        \
    \ (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area)\n\
    \    (* (/ 1 2) a b))\n  (if (is-valid) (area) -1))\n", "    (cond\n      [(or\
    \ (= a b) (= b c) (= a c)) 6.0]\n      [(> a b)\n       (if (> c b)\n        \
    \   (/ (* (sqrt (- (+ (* a a) (* b b)) (* c c))) 3) 4)\n           -1)]\n    \
    \  [(> b c)\n       (if (> a c)\n           (/ (* (sqrt (- (+ (* a a) (* b b))\
    \ (* c c))) 3) 4)\n           -1)]\n      [(> c a)\n       (if (> b a)\n     \
    \      (/ (* (sqrt (- (+ (* a a) (* b b)) (* c c))) 3) 4)\n           -1)]\n \
    \     [else -1]))", "  (define (is-triangle a b c)\n    (and (&gt; a 0)\n    \
    \     (&gt; b 0)\n         (&gt; c 0)\n         (&gt; a (+ b c))\n         (&gt;\
    \ b (+ a c))\n         (&gt; c (+ a b))))\n  (cond ((is-triangle a b c) (* 0.5\
    \ (* a (sqrt (- (* b b) (* (* c c) (/ 4)))))))\n        (else -1)))\n</code>\n\
    The above code works great but I'm not sure if my solution is idiomatic. \n\n\n\
    A:\n\nYes, this is idiomatic. \nI've seen this sort of thing:\n<code>(cond ((is-triangle\
    \ a b c) (do-something))\n      (else (do-something-else)))\n</code>\nfor cases\
    \ where the first branch is particularly complicated, with various sub-expressions\
    \ that are needed in the second branch.\nThe only thing I can comment on is that\
    \ the intermediate variable <code>is-triangle</code> might be unnecessary, and\
    \ you could just inline the definition. But it's a small thing. \n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (let\
    \ ([area (sqrt (* s (- s a) (- s b) (- s c)))])\n         (round (* 100 area))))]\n\
    \    [else -1]))\n", "  (define s (/ (+ a b c) 2))\n  (if (&gt;= (+ a b) c)\n\
    \      (* s (- s a) (- s b) (- s c))\n      -1))\n</code>\nI do not understand\
    \ why after the first check we need to check again whether the sum of a and b\
    \ is greater than c. \nI have researched the net but did not find any explanation.\
    \ Can someone please explain?\n\n\nA:\n\nYou don't need to check again if the\
    \ sum of the first two is greater than the third. \nIn fact, the <code>if</code>\
    \ statement could be written as:\n<code>(if (&gt;= (+ a b) c)\n    (* s (- s a)\
    \ (- s b) (- s c))\n    -1)\n</code>\nAlso, the <code>if</code> could be rewritten\
    \ using a <code>cond</code> statement, as @Don Provan suggested:\n<code>(cond\n\
    \  [(&gt;= (+ a b) c) (* s (- s a) (- s b) (- s c))]\n  [else -1])\n</code>\n",
  "  (cond\n    [(and (< a b c) (< (+ a b) c)) -1]\n    [(and (< b a c) (< (+ b a)\
    \ c)) -1]\n    [(and (< c a b) (< (+ c a) b)) -1]\n    [else (* 0.5 a b c)]))\n",
  "  (if (and (&gt; a 0) (&gt; b 0) (&gt; c 0))\n      (let ((s (/ (+ a b c) 2)))\n\
    \        (sqrt (* s (- s a) (- s b) (- s c))))\n      -1))\n</code>\n<code>#lang\
    \ racket\n", "  (cond ((or (= a 0) (= b 0) (= c 0)) -1)\n        ((not (and (<\
    \ a (+ b c)) (< b (+ a c)) (< c (+ a b)))) -1)\n        (else (round (* (/ (sqrt\
    \ (- (* (- a b) (- a b)) (* (+ (* a a) (* b b)) (* c c)))) 2) 2))))\n", "  (let\
    \ ((s (/ (+ a b c) 2)))\n    (if (&gt; (+ a b) c)\n        (let ((area (sqrt (-\
    \ (* s (- s a)) (* s (- s b)) (* s (- s c))))))\n          (if (number? area)\n\
    \              (/ (* 2 area) 2)\n              -1))\n        -1)))\n</code>\n",
  "  (cond\n    ((and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (sqrt (* s (- s a) (- s b) (- s c))))\n    (else -1)))\n", "  (define (is_valid_triangle?\
    \ x y z)\n    (and (>= x y z) (> (+ x y) z) (> (+ x z) y) (> (+ y z) x)))\n  (if\
    \ (is_valid_triangle? a b c)\n      (round (* 0.5 (* (- a c) (- b c))))\n    \
    \  -1))\n", "  (cond\n    [(not (or (< a (+ b c)) (< b (+ a c)) (< c (+ a b))))\n\
    \     (* 0.5 a b)]\n    [else -1]))\n", "  (let ((two (/ 2.0)))\n    (cond [(and\
    \ (> a 0) (> b 0) (> c 0))\n           (* two (- (+ a b c) a b c))]\n        \
    \  [else -1])))\n", "  (cond [(and (< (- a b) c) (< (- b c) a) (< (- c a) b))\n\
    \         (round (* .5 (- a b c)) 2)]\n        [else -1]))\n```\n\n```\n#lang\
    \ racket\n", "  (let ((s (+ a b c)))\n    (if (and (> a 0) (> b 0) (> c 0) (>\
    \ s 0))\n        (/ (* s (- s a) (- s b) (- s c)) 16)\n        -1)))\n", "  (cond\n\
    \    [(or (< a 0) (< b 0) (< c 0)) (display -1)]\n    [(or (> (+ a b) c) (> (+\
    \ a c) b) (> (+ b c) a)) (display -1)]\n    [else (round (* (/ (sqrt (* (+ (*\
    \ a a) (* b b)) (* c c))) 4) 2))]))\n", "  (cond ((>= (+ a b) c)\n         (round\
    \ (* (/ (sqrt (+ (* (- a (/ a 2)) (- a (/ a 2)))\n                           \
    \    (* (- b (/ b 2)) (- b (/ b 2)))\n                               (* (- c (/\
    \ c 2)) (- c (/ c 2))))) 2) 3)))\n        (else -1)))\n", "  (define (is_triangle?\
    \ a b c)\n    (< (+ a b) c))\n  (if (and (< a 0) (< b 0) (< c 0)) -1\n      (if\
    \ (is_triangle? a b c)\n          (/ (* a b) 2)\n          -1)))\n", "  (define\
    \ semiperimeter (/ (+ a b c) 2))\n  (cond\n    [(and (>= a b c) (>= b c a) (>=\
    \ c a b))\n     (sqrt (- (* semiperimeter (- semiperimeter a))\n             \
    \ (* semiperimeter (- semiperimeter b))\n              (* semiperimeter (- semiperimeter\
    \ c))))]\n    [else -1]))", "  (cond ((and (> a 0) (> b 0) (> c 0))\n        \
    \ (define s (/ (+ a b c) 2))\n         (* (- s a) (- s b) (- s c)))\n        (else\
    \ -1)))\n", "  (cond [(and (<= (+ a b) c) (<= (+ a c) b) (<= (+ b c) a)) -1]\n\
    \        [else (round (* 0.5 ( + a b c)))]))\n", "  (cond\n    [(<= (+ a b) c)\
    \ -1]\n    [(<= (+ a c) b) -1]\n    [(<= (+ b c) a) -1]\n    [else (* 0.5 (- (+\
    \ a b c) a b c))]))\n", "  (let loop ([s1 a] [s2 b] [s3 c])\n    (cond [(< (+\
    \ s1 s2) s3) -1]\n          [(and (>= (+ s1 s2) s3)\n                (>= (+ s2\
    \ s3) s1)\n                (>= (+ s1 s3) s2))\n           (round (* 0.5 (* s1\
    \ s2)) 2)]\n          [else (loop (+ s1 s2) s3 s1)])))\n", "  (let ([s (/ (+ a\
    \ b c) 2)])\n    (if (&lt; s (+ a b))\n        -1\n        (* s (- s a) (- s b)\
    \ (- s c)))))\n</code>\nThe above code looks good to me except the <code>let</code>\
    \ macro call. I think it's a little difficult to read and understand what <code>s</code>\
    \ stands for. I just want to see if anyone can help me to re-write the above <code>let</code>\
    \ expression to something that is more easy to read and understand.\nI will appreciate\
    \ a lot.\n\n\nA:\n\nI don't know what <code>s</code> stands for, but I can tell\
    \ you that the expression <code>(/ (+ a b c) 2)</code> is the height of the triangle\
    \ divided by two, if I'm not mistaken.\nIf you don't care about the <code>let</code>\
    \ statement, try naming it as <code>tri-height</code> or something.\n<code>(define\
    \ (triangle_area a b c)\n  (let ([tri-height (/ (+ a b c) 2)])\n    (if (&lt;\
    \ tri-height (+ a b))\n        -1\n        (* tri-height (- tri-height a) (- tri-height\
    \ b) (- tri-height c)))))\n</code>\n", "  (cond [(and (<= a 0) (<= b 0) (<= c\
    \ 0)) -1]\n        [(and (<= (+ a b) c) (<= (+ a c) b) (<= (+ b c) a)) -1]\n \
    \       [else (round (/ (* a b) 2) 2)]))\n", "  (define (triangle-help a b c)\n\
    \    (cond\n      [(>= a (+ b c)) -1]\n      [(>= b (+ a c)) -1]\n      [(>= c\
    \ (+ a b)) -1]\n      [else (sqrt (* (- (* a a) (* b b) (* c c)) 3))]))\n  (cond\n\
    \    [(zero? a) -1]\n    [(zero? b) -1]\n    [(zero? c) -1]\n    [else (round\
    \ (* 100 (triangle-help a b c)))]))\n", "  (cond ((and (<= a 0) (<= b 0) (<= c\
    \ 0)) -1)\n        ((or (> (+ a b) c) (> (+ a c) b) (> (+ b c) a)) -1)\n     \
    \   (else (* 0.5 (* a b c)))))\n", "  (if (and (< (+ a b) c) (< (+ a c) b) (<\
    \ (+ b c) a))\n      -1\n      (/ (* a b c) 4)))\n", "  (if (&gt; (+ a b) c)\n\
    \      (string-&gt;number (number-&gt;string (floor (* .5 (sqrt (- (* a a) (*\
    \ b b) (* c c)))) 2)))\n      -1))\n", "  (if (and (>= a b c) (>= b c a) (>= c\
    \ a b))\n      (* (/ (- (+ a b c) (* -1 a)) 2) (sqrt (/ (- (+ (* a a) (* b b))\
    \ (* c c)) 4)))\n      -1))\n", "  (let ([lst (list a b c)])\n    (cond\n    \
    \  [(equal? (sort lst <) lst) (-1)]\n      [else (round (* (sqrt (* (+ (- a) (-\
    \ b) (- c))\n                                (* (- a) (- b) (- c))\n         \
    \                       (* (- a) (- b) (- c))))\n                      0.5)\n\
    \            2)])))\n", "  (define (area x y z)\n    (define (s x y z) \n    \
    \  (+ x y z))\n    (define (ss x y z)\n      (/ (s x y z) 2))\n    (define (t\
    \ x y z)\n      (sqrt (* (- (ss x y z) x) (- (ss x y z) y) (- (ss x y z) z))))\n\
    \    (t x y z))\n  (cond\n    [(and (< (+ a b) c) (< (+ a c) b) (< (+ b c) a))\
    \ -1]\n    [else (* (area a b c) 2)]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n\
    \      (cond ((and (< (+ a b) c)\n                  (< (+ a c) b)\n          \
    \        (< (+ b c) a))\n             -1)\n            (else (round (* (sqrt (+\
    \ (* (- a (/ b 2)) (- a (/ b 2)))\n                                    (* (- b\
    \ (/ c 2)) (- b (/ c 2)))\n                                    (* (- c (/ a 2))\
    \ (- c (/ a 2)))))\n                          0.5)\n                         \
    \ 2)))\n      -1))\n", "  (if (and (>= a b c) (>= b c a) (>= c a b))\n      (let\
    \ ((s (/ (+ a b c) 2)))\n        (sqrt (* s (- s a) (- s b) (- s c))))\n     \
    \ -1))\n", "  (cond\n    [(> a 0) (cond [(> b 0) (cond [(> c 0) (cond [(> (+ a\
    \ b) c) (cond [(> (+ a c) b) (cond [(> (+ b c) a) (* 1/2 (* a b c)) (-1)]) (-1)])\
    \ (-1)]) (-1)]) (-1)]) (-1)]))\n```\n\n## Question 3\n\n```#lang racket\n", " \
    \ (define (valid? a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n   \
    \      (> (+ b c) a)))\n  (define (heron a b c)\n    (define (p)\n      (/ (+\
    \ a b c) 2))\n    (define (s)\n      (- p a)\n      (- p b)\n      (- p c))\n\
    \    (sqrt (* p s s s)))\n  (if (valid? a b c)\n      (round (* 2 heron a b c))\n\
    \      -1))\n", "  (cond\n    [(or (< a 0) (< b 0) (< c 0)) -1]\n    [(or (> a\
    \ (+ b c)) (> b (+ a c)) (> c (+ a b))) -1]\n    [else (* 0.5 (* a (sqrt (- (*\
    \ b b) (* (/ a 2) (/ a 2))))))]))\n```\n\n```", "  (if (and (&gt; a 0) (&gt; b\
    \ 0) (&gt; c 0))\n      (if (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b\
    \ c) a))\n          (exact-&gt;inexact (/ (* 1/2 a b) (sqrt (+ (* (- a (/ b 2))\
    \ (- a (/ b 2))) (* (- c (/ b 2)) (- c (/ b 2)))))))\n      -1)\n  -1))\n</code>\n\
    But I keep getting the following error:\n<code>triangle.rkt:8:6: expected function\
    \ name, given: #&lt;procedure:...eb9c6a&gt;\n  context...:\n   /Applications/Racket\
    \ v5.3.5/collects/racket/private/misc.rkt:87:2: loop\n   /Applications/Racket\
    \ v5.3.5/collects/racket/private/misc.rkt:87:2: loop\n   /Applications/Racket\
    \ v5.3.5/collects/racket/private/misc.rkt:87:2: loop\n   ...\n</code>\nI'm very\
    \ new to Racket and any help would be greatly appreciated.\n\n\nA:\n\nYou're closing\
    \ the <code>if</code> only for the first branch.\n<code>(define (triangle_area\
    \ a b c)\n  (if (and (&gt; a 0) (&gt; b 0) (&gt; c 0))\n      (if (and (&gt; (+\
    \ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n          (exact-&gt;inexact (/\
    \ (* 1/2 a b) (sqrt (+ (* (- a (/ b 2)) (- a (/ b 2))) (* (- c (/ b 2)) (- c (/\
    \ b 2)))))))\n          -1)\n      -1))\n</code>\n", "  (cond\n    [(and (&gt;=\
    \ a 0) (&gt;= b 0) (&gt;= c 0))\n     (if (and (&gt; (+ a b) c) (&gt; (+ a c)\
    \ b) (&gt; (+ b c) a))\n         (define S (/ (+ a b c) 2))\n         (sqrt (*\
    \ S (- S a) (- S b) (- S c))))]\n    [else -1]))\n</code>\nI'm getting the following\
    \ error:\n<code>./triangle.rkt:11:1: triangle_area: no expression after a sequence\
    \ of internal definitions in: (let ((#%app values)) (if (and (&gt; (+ a b) c)\
    \ (&gt; (+ a c) b) (&gt; (+ b c) a)) (define S (/ (+ a b c) 2)) (sqrt (* S (-\
    \ S a) (- S b) (- S c)))))\n</code>\nWhy is this and how do I fix it?\n\n\nA:\n\
    \nThe problem is that the <code>if</code> expression does not have a consequent\
    \ expression in its false branch. The function is returning an <code>if</code>\
    \ expression, and not the value of the <code>if</code> expression.\n<code>(if\
    \ (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n    (define S (/ (+\
    \ a b c) 2))\n    (sqrt (* S (- S a) (- S b) (- S c))))\n</code>\nshould be\n\
    <code>(if (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n    (define\
    \ S (/ (+ a b c) 2))\n    (sqrt (* S (- S a) (- S b) (- S c))))\n</code>\nAlternatively,\
    \ you could just move the <code>sqrt</code> expression out of the <code>if</code>\
    \ altogether.\n<code>(define S (/ (+ a b c) 2))", "  (cond\n    [(>= a 0)\n  \
    \   (cond\n       [(>= b 0)\n        (cond\n          [(>= c 0)\n           (cond\n\
    \             [(>= (+ a b) c)\n              (cond\n                [(>= (+ a\
    \ c) b)\n                 (cond\n                   [(>= (+ b c) a)\n        \
    \            (* (/ (+ a b c) 2) (sqrt (- (* (+ a b c) (* (+ a b c)) ) \n     \
    \                                            (* (- (+ a b) c) (* (- (+ a b) c))\n\
    \                                                    (* (- (+ a c) b) (* (- (+\
    \ a c) b))\n                                                       (* (- (+ b\
    \ c) a) (* (- (+ b c) a)))))))\n                   #f])\n                #f])\n\
    \             #f])\n          #f])\n       #f])\n     #f])\n  -1)\n\n\n", "  (cond\
    \ [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a)) \n         (round (* 0.5 (*\
    \ a b (- 1 (sqrt (/ (+ (* a a) (* b b)) (* c c)))))) 2)]\n        [else -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
