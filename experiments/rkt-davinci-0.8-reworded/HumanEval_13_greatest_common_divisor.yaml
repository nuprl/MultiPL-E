name: HumanEval_13_greatest_common_divisor
language: rkt
prompt: "#lang racket\n\n;; Return a greatest common divisor of two integers a and\
  \ b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor\
  \ 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
  \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
  \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= a 0) b]\n    [(= b 0) a]\n    [(= a b) a]\n    [(<\
    \ a b) (greatest_common_divisor (- b a) a)]\n    [else (greatest_common_divisor\
    \ a (- b a))]))\n", "  (if (= a 0)\n      b\n      (greatest_common_divisor (modulo\
    \ b a) a)))\n```\n\n##### `test.rkt`\n\n```racket\n#lang racket\n", "  (cond [(=\
    \ a 0) b]\n        [(= b 0) a]\n        [(< a b) (greatest_common_divisor a (-\
    \ b a))]\n        [else (greatest_common_divisor (- a b) b)]))\n", "  (if (= b\
    \ 0)\n      a\n      (greatest_common_divisor b (modulo a b))))\n", "  (define\
    \ (gcd-helper a b)\n    (if (= b 0)\n        a\n        (gcd-helper b (remainder\
    \ a b))))\n  (gcd-helper (abs a) (abs b)))\n", "  (if (= b 0)\n      a\n     \
    \ (greatest_common_divisor b (modulo a b))))\n", "  (define (divisor a b)\n  \
    \  (cond ((< a b) (divisor b a))\n          ((= a b) a)\n          ((= (remainder\
    \ a b) 0) b)\n          (else (divisor b (remainder a b)))))\n  (divisor a b))\n",
  "  (if (= b 0)\n      a\n      (greatest_common_divisor b (modulo a b))))\n", " \
    \ (cond\n    [(zero? b) a]\n    [else (greatest_common_divisor b (modulo a b))]))\n\
    ```\n\n**Usage**\n\n```racket\n#lang racket\n", "  (let loop ([a a] [b b])\n \
    \   (if (= b 0)\n        a\n        (loop b (- a (* (quotient a b) b))))))\n",
  "  (define (gcd a b)\n    (cond ((or (= a 0) (= b 0)) 0)\n          ((= a b) a)\n\
    \          ((> a b) (gcd (- a b) b))\n          (else (gcd a (- b a)))))\n  (let\
    \ ((a-abs (abs a))\n        (b-abs (abs b)))\n    (gcd a-abs b-abs)))\n", "  (cond\n\
    \    [(zero? b) a]\n    [else (greatest_common_divisor b (modulo a b))]))\n",
  "  (cond\n    [(> a b) (greatest_common_divisor a (- a b))]\n    [(> b a) (greatest_common_divisor\
    \ (- b a) b)]\n    [else a]))\n", "  (let ([abs_a (abs a)]\n        [abs_b (abs\
    \ b)])\n    (cond\n      [(> abs_a abs_b) (gcd abs_b abs_a)]\n      [(= abs_a\
    \ abs_b) abs_a]\n      [else (gcd (- abs_a abs_b) abs_b)])))\n```\n\n```racket\n\
    #lang racket\n", "  (define (rec a b)\n    (if (= b 0)\n        a\n        (rec\
    \ b (modulo a b))))\n  (rec (abs a) (abs b)))\n", "  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n", "  (let ([r (modulo\
    \ a b)])\n    (if (= r 0)\n        b\n        (greatest_common_divisor b r))))\n",
  "  (cond [(= b 0) a]\n        [else (greatest_common_divisor b (modulo a b))]))\n",
  "  (cond ((< a b) (greatest_common_divisor b a))\n        ((= b 0) a)\n        (else\
    \ (greatest_common_divisor b (% a b)))))\n", "  (if (= b 0)\n      a\n      (greatest_common_divisor\
    \ b (modulo a b))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
