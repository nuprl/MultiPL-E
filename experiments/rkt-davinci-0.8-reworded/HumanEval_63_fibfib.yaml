name: HumanEval_63_fibfib
language: rkt
prompt: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
  \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  ;; Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n;; >>> (fibfib 1)\n;; 0\n;; >>> (fibfib 5)\n;; 4\n;; >>> (fibfib\
  \ 8)\n;; 24\n(define (fibfib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
  \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
  \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
  \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14)\
  \ 927)\n))\n\n(test-humaneval)"
completions: ["  (define (fibfib-t n-1 n-2 n-3 acc)\n    (if (= n 0)\n        acc\n\
    \        (fibfib-t n-2 n-3 (+ acc n-1 n-2 n-3) (+ acc n-1 n-2 n-3))))\n  (fibfib-t\
    \ 0 0 1 0))\n", "    (define (loop n a b c)\n        (if (= n 0)\n           \
    \ a\n            (loop (- n 1) b c (+ b c a))))\n    (loop n 0 0 1))\n", "  (define\
    \ fibfib-first-three (list 0 0 1))\n  (define (iter n lst)\n    (if (= n 0)\n\
    \        (list-ref lst 0)\n        (iter (- n 1) (append lst (list (+ (list-ref\
    \ lst (- (length lst) 1)) (list-ref lst (- (length lst) 2)) (list-ref lst (- (length\
    \ lst) 3))))))))\n  (iter n fibfib-first-three))", "  (if (< n 3)\n      (if (=\
    \ n 0)\n          0\n          1)\n      (+ (fibfib (- n 1)) (fibfib (- n 2))\
    \ (fibfib (- n 3)))))\n", "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n",
  "  (cond\n    [(equal? n 0) 0]\n    [(equal? n 1) 0]\n    [(equal? n 2) 1]\n   \
    \ [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else\n     (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n\
    \ 2)) (fibfib (- n 3)))]))", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n",
  "  (define (fibfib-iter a b c n)\n    (if (= n 0)\n        a\n        (fibfib-iter\
    \ b c (+ c (+ a b)) (- n 1))))\n  (fibfib-iter 0 0 1 n))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)) (fibfib (- n 3)))]))\n", "  (define (inner n x y z)\n    (if (= n 0)\n\
    \        x\n        (inner (- n 1) y z (+ x y z))))\n  (inner n 0 0 1))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n", "  (let loop ([n n] [p 0]\
    \ [pp 0] [ppp 0])\n    (cond\n      [(= n 0) p]\n      [(= n 1) pp]\n      [(=\
    \ n 2) ppp]\n      [else (loop (- n 1)\n                  (+ p pp ppp)\n     \
    \             p\n                  pp)])))\n", "  (define (fibfib-nth-tail n first\
    \ second third)\n    (cond\n      [(= n 0) first]\n      [(= n 1) second]\n  \
    \    [(= n 2) third]\n      [else (fibfib-nth-tail (- n 1) second third (+ first\
    \ second third))]))\n  (fibfib-nth-tail n 0 0 1))\n", "  (define (helper n acc1\
    \ acc2 acc3)\n    (cond [(= n 0) acc1]\n          [(= n 1) acc2]\n          [(=\
    \ n 2) acc3]\n          [else (helper (- n 1) acc2 acc3 (+ acc1 acc2 acc3))]))\n\
    \  (helper n 0 0 1))\n", "  (define (fibfib-iter a b c n)\n    (if (zero? n)\n\
    \        a\n        (fibfib-iter b c (+ a b c) (- n 1))))\n  (fibfib-iter 0 0\
    \ 1 n))\n", "  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n \
    \       (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", " \
    \ (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((= n 2) 1)\n        (else (+\
    \ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n", "  (cond\n    [(=\
    \ n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib\
    \ (- n 2)) (fibfib (- n 3)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
