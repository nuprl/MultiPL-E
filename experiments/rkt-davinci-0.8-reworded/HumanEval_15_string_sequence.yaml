name: HumanEval_15_string_sequence
language: rkt
prompt: "#lang racket\n\n;; Return a string containing space-delimited numbers starting\
  \ from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;; >>> (string_sequence\
  \ 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n\
  \    (check-equal? (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2\
  \ 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
completions: ["  (string-join (map number->string (range 0 (+ 1 n))) \" \"))\n", " \
    \ (string-join (map number->string (range 0 (+ 1 n))) \" \"))\n", "  (if (= n\
    \ 0)\n      \"0\"\n      (begin\n        (number->string n)\n        (string-append\
    \ \" \" (string_sequence (- n 1))))))\n", "  (apply string-append (for/list ([i\
    \ (in-range n)]) (format \"~a \" i))))\n", "  (let ([n (add1 n)])\n    (cond\n\
    \      [(zero? n) \"\"]\n      [else (string-append (number->string (sub1 n))\
    \ \" \" (string_sequence (sub1 n)))])))\n", "  (if (= n 0)\n      \"0\"\n    \
    \  (string-append (string_sequence (- n 1)) \" \" (number->string n))))\n```\n\
    \n<!-- > -->\n\n```python\n#lang racket\n", "  (if (= n 0)\n      \"0\"\n    \
    \  (string-append (string_sequence (- n 1)) \" \" (number->string n))))\n", " \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n", "  (regexp-replace #rx\"([0-9]+) ([0-9]+)\"\n \
    \                 (regexp-replace #rx\"([0-9]+)\"\n                          \
    \        (number->string n)\n                                  (\u03BB (m) (string-join\
    \ (range (string->number (cadr m)) (string->number (cadr m)))) \" \"))\n     \
    \             (\u03BB (m) (string-join (range (string->number (cadr m)) (string->number\
    \ (cadddr m)))) \" \")))\n", "  (define (string_sequence-helper n s)\n    (if\
    \ (= n 0)\n        s\n        (string_sequence-helper (- n 1) (string-append s\
    \ \" \" (number->string n)))))\n  (string_sequence-helper n \"0\"))\n", "  (if\
    \ (negative? n)\n      (string_sequence (+ n 1))\n      (string-join (list->string\
    \ (map number->string (build-list (add1 n) add)))))", "  (cond\n    [(= n 0) \"\
    0\"]\n    [else (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))]))\n", "  (string-join (range 0 (add1 n))))\n```\n\n```racket\n#lang racket\n",
  "  (if (= n 0)\n      \"0\"\n      (append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n", "  (define (helper i)\n    (if (= i n) (number->string i)\n      (string-append\
    \ (number->string i) \" \" (helper (+ i 1)))))\n  (helper 0))\n", "  (build-string\
    \ (+ n 1) (lambda (index) (cond ((eq? index 0) \"0\") (else (string-append (number->string\
    \ index) \" \"))))))\n", "  (cond [(equal? n 0) \"0\"]\n        [else\n      \
    \   (local ([define (recurse n)\n                    (cond [(equal? n 0) \"\"\
    ]\n                          [else (string-append (number->string n) \" \" (recurse\
    \ (sub1 n)))]\n                          )\n                    ])\n         \
    \        (string-append (recurse n) \"0\")\n                 )\n         ]\n \
    \       )\n  )\n", "  (define (iter n acc)\n    (if (= n 0)\n        (number->string\
    \ n)\n        (string-append (number->string n) \" \" (iter (- n 1) acc))))\n\
    \  (iter n \"\"))\n", "  (if (= n 0)\n      \"0\"\n      (string-append (string_sequence\
    \ (- n 1)) \" \" (number->string n))))\n", "  (cond\n    [(zero? n) \"0\"]\n \
    \   [else (string-append (number->string n) \" \" (string_sequence (sub1 n)))]))\n\
    ```\n\n```Racket\n#lang racket\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
