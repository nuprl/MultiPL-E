name: HumanEval_152_compare
language: rkt
prompt: "#lang racket\n\n;; I think we all remember that feeling when the result of\
  \ some long-awaited\n;; event is finally known. The feelings and thoughts you have\
  \ at that moment are\n;; definitely worth noting down and comparing.\n;; Your task\
  \ is to determine if a person correctly guessed the results of a number of matches.\n\
  ;; You are given two lists of scores and guesses of equal length, where each index\
  \ shows a match. \n;; Return a list of the same length denoting how far off each\
  \ guess was. If they have guessed correctly,\n;; the value is 0, and if not, the\
  \ value is the absolute difference between the guess and the score.\n;; example:\n\
  ;; >>> (compare (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2))\n;; (list 0 0 0 0 3 3)\n\
  ;; >>> (compare (list 0 5 0 0 0 4) (list 4 1 1 0 0 -2))\n;; (list 4 4 1 0 0 6)\n\
  (define (compare game guess)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate compare))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5 1) (list 1 2 3 4 2 -2)) (list 0 0\
  \ 0 0 3 3))\n    (check-equal? (candidate (list 0 0 0 0 0 0) (list 0 0 0 0 0 0))\
  \ (list 0 0 0 0 0 0))\n    (check-equal? (candidate (list 1 2 3) (list -1 -2 -3))\
  \ (list 2 4 6))\n    (check-equal? (candidate (list 1 2 3 5) (list -1 2 3 4)) (list\
  \ 2 0 0 1))\n))\n\n(test-humaneval)"
completions: ["  (map (lambda (x y)\n         (if (= x y) 0 (abs (- x y))))\n    \
    \   game guess))", "  (for/list ([(list g s) (zip game guess)])\n    (cond [(=\
    \ g s) 0]\n          [else (abs (- g s))])))\n", "  (map abs (map - game guess)))\n",
  "  (for/list ([(list a b) (zip (list-ref game) (list-ref guess))])\n    (abs (-\
    \ a b))))\n", "  (map (lambda (x y)\n         (abs (- x y)))\n       game guess))\n\
    \n", "  (map (lambda (x y)\n         (if (= x y)\n             0\n           \
    \  (abs (- x y))))\n       game guess))\n</code>\nMy code works fine but the list\
    \ is returned in reverse order.\nHow can I write this code to return the desired\
    \ list in the right order?\n\n\nA:\n\nThe answer to this problem is in the comment\
    \ by @KevinKirsche.\n<code>#lang racket\n", "  (map abs (map - game guess)))\n\
    </code>\nAnd it's test:\n<code>#lang racket\n", "    (map (lambda (x y)\n    \
    \        (if (= x y) 0\n                (abs (- x y))))\n         game guess))\n",
  "  (for/list ([x (in-list game)]\n             [y (in-list guess)])\n    (cond\n\
    \      [(equal? x y) 0]\n      [else (abs (- x y))])))\n", "  (map abs (map -\
    \ game guess)))\n", "  (map (lambda (x y)\n         (if (= x y)\n            \
    \ 0\n             (abs (- x y))))\n       game guess))", "  (map\n   (lambda (game-score\
    \ guess-score)\n     (if (= game-score guess-score)\n         0\n         (abs\
    \ (- game-score guess-score))))\n   game\n   guess))\n", "  (map (lambda (game1\
    \ guess1) (if (= game1 guess1) 0 (abs (- game1 guess1)))) game guess))\n", " \
    \   (map (lambda (pair)\n        (if (car pair)\n            (- (car pair) (cadr\
    \ pair))\n            (abs (- (car pair) (cadr pair)))))\n        (zip game guess)))\n",
  "  (map (lambda (pair)\n         (if (= (car pair) (cadr pair))\n             0\n\
    \             (abs (- (car pair) (cadr pair)))))\n       (map list game guess)))\n",
  '  (map abs-diff game guess))', "  (for/list ([s game] [g guess]) (abs (- s g))))\n",
  "  (if (empty? game)\n      empty\n      (cons (abs (- (first game) (first guess)))\n\
    \            (compare (rest game) (rest guess)))))\n</code>\n", "  (map (lambda\
    \ (x y) (if (= x y) 0 (abs (- x y)))) game guess))\n", "  (for/list ([i (in-list\
    \ game)]\n             [j (in-list guess)])\n    (if (= i j)\n        0\n    \
    \    (abs (- i j)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
