name: HumanEval_60_sum_to_n
language: rkt
prompt: "#lang racket\n\n;; sum_to_n is a function that sums numbers from 1 to n.\n\
  ;; >>> (sum_to_n 30)\n;; 465\n;; >>> (sum_to_n 100)\n;; 5050\n;; >>> (sum_to_n 5)\n\
  ;; 15\n;; >>> (sum_to_n 10)\n;; 55\n;; >>> (sum_to_n 1)\n;; 1\n(define (sum_to_n\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal?\
  \ (candidate 11) 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate\
  \ 100) 5050)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-iter n acc)\n    (if (<= n\
    \ 0)\n        acc\n        (sum_to_n-iter (- n 1) (+ acc n))))\n  (sum_to_n-iter\
    \ n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\
    \ ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n", "  (sum-accumulator\
    \ 1 n 0))\n", "  (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define\
    \ (iter i acc)\n    (if (= i n)\n        acc\n        (iter (+ i 1) (+ acc i))))\n\
    \  (iter 1 0))\n", '  (+ n (sum_to_n (- n 1))))', "  (sum_to_n-iter n 0 0))\n",
  "  (define (sum_to_n-iter k count)\n    (if (= k count)\n        0\n        (+ k\
    \ (sum_to_n-iter (+ k 1) count))))\n  (sum_to_n-iter 1 n))\n", "  (define (tail-rec\
    \ n acc)\n    (if (zero? n)\n        acc\n        (tail-rec (- n 1) (+ acc n))))\n\
    \  (tail-rec n 0))\n```\n\n```scheme\n#lang racket\n", "  (cond\n    [(= n 1)\
    \ 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond ((= n 1) 1)\n       \
    \ (else (+ n (sum_to_n (- n 1))))))\n```\n\n```text\n#lang racket\n", '  (sum-iter
    0 n))', "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
