name: HumanEval_60_sum_to_n
language: rkt
prompt: "#lang racket\n\n;; sum_to_n is a function that sums numbers from 1 to n.\n\
  ;; >>> (sum_to_n 30)\n;; 465\n;; >>> (sum_to_n 100)\n;; 5050\n;; >>> (sum_to_n 5)\n\
  ;; 15\n;; >>> (sum_to_n 10)\n;; 55\n;; >>> (sum_to_n 1)\n;; 1\n(define (sum_to_n\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_to_n))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 6) 21)\n    (check-equal?\
  \ (candidate 11) 66)\n    (check-equal? (candidate 30) 465)\n    (check-equal? (candidate\
  \ 100) 5050)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-iter n acc)\n    (if (<= n\
    \ 0)\n        acc\n        (sum_to_n-iter (- n 1) (+ acc n))))\n  (sum_to_n-iter\
    \ n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\
    \ ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n", "  (sum-accumulator\
    \ 1 n 0))\n", "  (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define\
    \ (iter i acc)\n    (if (= i n)\n        acc\n        (iter (+ i 1) (+ acc i))))\n\
    \  (iter 1 0))\n", '  (+ n (sum_to_n (- n 1))))', "  (sum_to_n-iter n 0 0))\n",
  "  (define (sum_to_n-iter k count)\n    (if (= k count)\n        0\n        (+ k\
    \ (sum_to_n-iter (+ k 1) count))))\n  (sum_to_n-iter 1 n))\n", "  (define (tail-rec\
    \ n acc)\n    (if (zero? n)\n        acc\n        (tail-rec (- n 1) (+ acc n))))\n\
    \  (tail-rec n 0))\n```\n\n```scheme\n#lang racket\n", "  (cond\n    [(= n 1)\
    \ 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond ((= n 1) 1)\n       \
    \ (else (+ n (sum_to_n (- n 1))))))\n```\n\n```text\n#lang racket\n", '  (sum-iter
    0 n))', "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n\
    \      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n_iter counter total)\n\
    \    (if (= counter n)\n        total\n        (sum_to_n_iter (+ counter 1) (+\
    \ total counter))))\n  (sum_to_n_iter 1 0))\n```\n\nThis is equivalent to the\
    \ following Python program:\n\n```python\n#!/usr/bin/env python\n\n# sum_to_n\
    \ is a function that sums numbers from 1 to n.\n# >>> (sum_to_n 30)\n# 465\n#\
    \ >>> (sum_to_n 100)\n# 5050\n# >>> (sum_to_n 5)\n# 15\n# >>> (sum_to_n 10)\n\
    # 55\n# >>> (sum_to_n 1)\n# 1\ndef sum_to_n(n):\n    def sum_to_n_iter(counter,\
    \ total):\n        if counter == n:\n            return total\n        else:\n\
    \            return sum_to_n_iter(counter + 1, total + counter)\n    return sum_to_n_iter(1,\
    \ 0)\n```\n\n## Exercise 2.16\n\nAlyssa P. Hacker complains that we went to a\
    \ lot of extra work in writing accumulative-n. After all, she says, we could have\
    \ simply written the sum as\n\n```racket", "  (define (helper x sum)\n    (if\
    \ (= x n)\n        (+ 1 sum)\n        (helper (+ x 1) (+ x sum))))\n  (helper\
    \ 1 0))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))", "  (cond\n    ((= n\
    \ 1) 1)\n    (else (+ n (sum_to_n (- n 1))))))\n", "  (sum-from-to 1 n))\n", " \
    \ (define (helper sum n)\n    (if (= n 0)\n        sum\n        (helper (+ sum\
    \ n) (- n 1))))\n  (helper 0 n))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (sum-from-to 1 n))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n```\n\n```\n#lang racket\n", "  (if (= n 1)\n     \
    \ 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n\
    \ (sum_to_n (- n 1)))))\n\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n\
    \ (- n 1)))]))\n```\n\n```Racket\n#lang racket\n", "  (if (eq? n 1)\n      1\n\
    \      (+ n (sum_to_n (- n 1)))))\n\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n```\n\n```racket\n#lang racket\n", "  (if (= n 1) 1\n      (+ n\
    \ (sum_to_n (- n 1)))))\n\n", "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n\
    \ (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (sum_to_n-rec n 0))\n", "  (cond ((= n 1) 1)\n\
    \        (else (+ n (sum_to_n (- n 1))))))\n```\n\n### \uACFC\uC81C 2.\n\n```racket",
  "    (if (= n 1)\n        1\n        (+ n (sum_to_n (- n 1)))))\n", "  (define (iter\
    \ i currentSum)\n    (if (= i 1)\n        currentSum\n        (iter (- i 1) (+\
    \ currentSum i))))\n  (iter n 0))\n", "  (define (iter acc cnt)\n    (if (equal?\
    \ cnt n)\n        acc\n        (iter (+ acc cnt) (+ cnt 1))))\n  (iter 0 1))\n",
  "  (define (helper i)\n    (if (= i n)\n        i\n        (+ i (helper (+ i 1)))))\n\
    \  (helper 1))\n```", "  (foldl + 0 (range 1 (+ n 1))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (define (sum_iter i result)\n    (if (= i n)\n\
    \        result\n        (sum_iter (+ i 1) (+ result i))))\n  (sum_iter 1 0))\n",
  "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n_iter\
    \ current_sum current_n)\n    (if (= current_n n)\n        current_sum\n     \
    \   (sum_to_n_iter (+ current_sum current_n) (+ current_n 1))))\n  (sum_to_n_iter\
    \ 0 1))\n```\n\n```\n#lang racket\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (define (sum a b)\n    (+ a b))\n  (for/fold ([sum 0]) ([number (in-range 1 (add1\
    \ n))])\n    (sum number sum)))\n", "  (for/sum ([i (in-range 1 (add1 n))]) i))\n",
  "  (cond\n    [(= n 1)\n     1]\n    [else\n     (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n```\n\n```racket\n#lang racket\n", "  (define (sum_to_n-help\
    \ sum n)\n    (if (= n 0)\n        sum\n        (sum_to_n-help (+ sum n) (- n\
    \ 1))))\n  (sum_to_n-help 0 n))\n", "  (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1\n    (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond [(= n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n", "  (for/sum ([i (in-range 1 (+\
    \ n 1))])\n    i))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\
    ```\n\n# Ejercicio\n\n1. Describe que hace el programa\n\n    ```scheme\n    #lang\
    \ racket\n    (define (f x) (if (even? x)\n                       (/ x 2)\n  \
    \                     (+ 1 (* 3 x))))\n    (define (g x) (if (negative? x)\n \
    \                      0\n                       (f (g (- x 1)))))\n    (g 3)\n\
    \    ```\n\n1. Describe que hace el programa\n\n    ```scheme\n    #lang racket\n\
    \    (define (sum-to-even n)\n      (if (even? n)\n          n\n          (+ n\
    \ (sum-to-even (sub1 n)))))\n    (sum-to-even 5)\n    ```\n\n1. Una lista es un\
    \ conjunto ordenado de elementos enlazados. En esta secci\xF3n veremos como manipular\
    \ listas en Racket.\n   1. Listas en Racket:\n\n        ```scheme\n        #lang\
    \ racket\n        ;; A list is represented as\n        ;; '(item1 item2 item3)\n\
    \        ;; '() is the empty list.\n        (list 1 2 3)\n        '()\n      \
    \  ;; Lets use cons to build a list\n        (cons 1 (cons 2 (cons 3 '())))\n\
    \        ;; Lambda in Racket is the operator\n        ;; to build a function.\n\
    \        (lambda (x) x)\n        ```\n\n   1. `length` y `append`\n\n        ```scheme\n\
    \        #lang racket\n        ;; length takes a list and returns\n        ;;\
    \ the number of elements in it.\n        (length (list 1 2 3))\n        ;; append\
    \ takes two lists and returns\n        ;; a list with the elements of the first\n\
    \        ;; list followed by the elements of the\n        ;; second list.\n  \
    \      (append (list 1 2 3) (list 4 5 6))\n        ;; append can also be used\
    \ to append an\n        ;; element to a list.\n        (append (list 1 2 3) (list\
    \ 4))\n        ;; Remember that '(a b c) is", "  (letrec ([loop (lambda (n sum)\n\
    \                   (if (= n 0)\n                       sum\n                \
    \       (loop (- n 1) (+ n sum))))])\n    (loop n 0)))\n", "  (if (= n 1)\n  \
    \    1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) n (+ n (sum_to_n (-\
    \ n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", " \
    \ (if (or (zero? n)\n          (= n 1))\n      n\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-helper\
    \ n answer)\n    (if (= n 0)\n        answer\n        (sum_to_n-helper (- n 1)\
    \ (+ answer n))))\n  (sum_to_n-helper n 0))\n", "  (cond\n    ((= n 1) 1)\n  \
    \  (else (+ n (sum_to_n (- n 1))))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n",
  "  (define (loop i res)\n    (if (= i n)\n        res\n        (loop (+ i 1) (+\
    \ res i))))\n  (loop 1 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "    (cond \n        [(= n 1) 1]\n        [else (+ n (sum_to_n\
    \ (- n 1)))]))\n", "  (define (iter m)\n    (if (= m 0) 0 (+ m (iter (- m 1)))))\n\
    \  (iter n))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (zero? n)\n      0\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1) 1\
    \ (+ n (sum_to_n (- n 1)))))\n", "    (if (= n 1) \n        1\n        (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (define (loop acc i)\n    (if (= i 1)\n        acc\n    \
    \    (loop (+ acc i) (- i 1))))\n  (loop 0 n))\n", "  (cond ((= n 1) 1)\n    \
    \    (else (+ n (sum_to_n (- n 1))))))\n", "  (define (summation m)\n    (if (=\
    \ m 1)\n        1\n        (+ m (summation (- m 1)))))\n  (summation n))\n", " \
    \ (if (<= n 1)\n      n\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (for/sum ([i (in-range 1 (+ n 1))])\n    i))\n",
  "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define\
    \ (sum_to_n-1 n k)\n    (if (= n k)\n        n\n        (+ n (sum_to_n-1 n (+\
    \ k 1)))))\n  (sum_to_n-1 n 1))\n", "  (define (sum i s)\n    (if (= i (add1 n))\n\
    \        s\n        (sum (add1 i) (+ i s))))\n  (sum 1 0))\n", "  (+ (- n 1) n))\n",
  "  (if (= n 1) 1 (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (sum_to_n-helper n 0))\n", "  (if (= n 1) 1\n\
    \      (+ n (sum_to_n (- n 1)))))\n", "  (define (seq_iter n acc)\n    (if (=\
    \ n 0)\n      acc\n      (seq_iter (- n 1) (+ acc n))))\n  (seq_iter n 0))\n",
  "  (cond\n    ((= n 1) 1)\n    (else (+ n (sum_to_n (- n 1))))))\n", "  (define\
    \ (summation current total)\n    (if (= current n)\n        total\n        (summation\
    \ (+ current 1) (+ total current))))\n  (summation 1 0))\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (sum-range 1 n))\n", "  (if (= n 1)\n    \
    \  1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (iter i total)\n    (if\
    \ (= i 0)\n        total\n        (iter (- i 1) (+ total i))))\n  (iter n 0))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "    (if (= n 1)\n\
    \        1\n        (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (+ n (sum_to_n (- n 1)))))\n```\n\nIterative Version:\n\n```\n#lang racket\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(zero?\
    \ n) 0]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (cond\n    [(= n 1) 1]\n\
    \    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define (summation i sum)\n    (if\
    \ (> i n)\n        sum\n        (summation (+ i 1) (+ sum i))))\n  (summation\
    \ 1 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if\
    \ (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (sum-from-to 1 n))\n",
  "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n", "  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (if (= n 1)\n      1\n\
    \      (+ n (sum_to_n (- n 1)))))\n", "  (local ((define (numerator n) (* n (+\
    \ n 1)))\n          (define (denominator n) 2))\n    (/ (* numerator n) denominator\
    \ n)))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (letrec ((sum_to_n (lambda (k)\n\
    \                       (if (= k 0)\n                           0\n          \
    \                 (+ k (sum_to_n (- k 1)))))))\n    (sum_to_n n)))\n", "  (if\
    \ (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n```\n#lang racket\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (iter n\
    \ sum)\n    (if (= n 0)\n        sum\n        (iter (- n 1) (+ n sum))))\n  (iter\
    \ n 0))\n", "  (define (sum_to_n_iter (a n) (i n))\n    (if (= a i)\n        a\n\
    \        (+ a (sum_to_n_iter a (- i 1)))))\n  (sum_to_n_iter 0 n))\n```\n\n```\n\
    #lang racket\n", "  (sum_to_n_helper n 1))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+\
    \ n (sum_to_n (- n 1)))))\n", "  (define (helper i a)\n    (if (= i n)\n     \
    \   a\n        (helper (+ i 1) (+ a i))))\n  (helper 1 0))\n\n", "  (if (= n 1)\n\
    \      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (+ n (sum_to_n (- n 1)))))\n", "  (cond ((<= n 1) n)\n        (else (+ n (sum_to_n\
    \ (- n 1))))))\n", "  (define (sigma_iter result i)\n    (if (= i (+ n 1))\n \
    \       result\n        (sigma_iter (+ result i) (+ i 1))))\n  (sigma_iter 0 1))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n```", "  (if (= n 1)\n     \
    \ 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (loop i sum)\n    (if (=\
    \ i (add1 n))\n        sum\n        (loop (add1 i) (add1 sum i))))\n  (loop 1\
    \ 0))\n", "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond [(=\
    \ n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n", "  (+ n (* n (- n 1))\
    \ (/ n 2)))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (let loop ((i 1) (sum 0))\n    (if (> i n)\n        sum\n        (loop (+ i 1)\
    \ (+ sum i)))))", "  (if (<= n 1)\n      n\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (cond\n    [(zero? n)\
    \ 0]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define (iter total i)\n  \
    \  (if (= i n)\n      total\n      (iter (+ total i) (+ i 1))))\n  (iter 0 1))\n\
    ```\n\n## A Function that Returns a Function\n\n``` #lang racket\n", "  (if (=\
    \ n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))", "  (if (= n 1) 1 (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "    (if (= n 1)\n        1\n        (+ n (sum_to_n (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n```\n\n```racket\n#lang racket\n",
  "  (let* ([sum (lambda (n)\n                (if (= n 1) 1 (+ n (sum (- n 1)))))]\n\
    \         [s (sum n)])\n    s))\n", "  (cond\n    [(zero? n) 0]\n    [else (+\
    \ n (sum_to_n (- n 1)))]))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (-\
    \ n 1)))))\n", "    (define (summ n)\n        (cond ((= n 1) 1)\n            \
    \  (else (+ n (summ (- n 1))))))\n    (summ n))\n```\n\n```racket\n#lang racket\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (define (sum_to_n-iter\
    \ running-total current)\n    (if (= current n)\n        running-total\n     \
    \   (sum_to_n-iter (+ running-total current) (+ current 1))))\n  (sum_to_n-iter\
    \ 0 1))\n", "  (sum (build_list n)))\n", "  (define (iter n sum)\n    (if (= n\
    \ 0)\n        sum\n        (iter (- n 1) (+ n sum))))\n  (iter n 0))\n", "  (if\
    \ (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "    (cond\n        [(<=\
    \ n 1) 1]\n        [else (+ n (sum_to_n (- n 1)))]))\n```\n\n```Racket\n#lang\
    \ racket\n", "  (if (= n 1) 1\n      (+ n (sum_to_n (- n 1)))))\n", "  (sum '()\
    \ n))\n", "  (sum_to_n_helper n 0))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (define (sum n)\n    (if (= n 1) 1 (+ n (sum (- n 1)))))\n\
    \  (sum n))\n", "  (local [\n           (define (iter i sum)\n             (cond\
    \ [(= i n) sum]\n                   [else (iter (+ i 1) (+ sum i))]))\n      \
    \     ]\n    (iter 1 0)))\n", "  (define (helper total index)\n    (if (> index\
    \ n)\n        total\n        (helper (+ total index) (+ index 1))))\n  (helper\
    \ 0 1))\n", "  (define (summation k)\n    (if (= k n) k\n        (+ k (summation\
    \ (+ k 1)))))\n  (summation 1))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n\
    \ (- n 1)))))\n", "  (let sum_to_n_helper (n acc)\n    (if (= n 0)\n        acc\n\
    \        (sum_to_n_helper (- n 1) (+ acc n)))))\n", "  (define (iter n sum)\n\
    \    (if (= n 0)\n        sum\n        (iter (- n 1) (+ n sum))))\n  (iter n 0))\n",
  "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n", "  (if (= n 1)\n \
    \     1\n      (+ n (sum_to_n (- n 1)))))\n\n", "  (for/sum ([i (in-range 1 (add1\
    \ n))]) i))\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n",
  "  (cond ((= n 1) 1)\n        (else (+ n (sum_to_n (- n 1))))))\n", "  (define (get_sum\
    \ i)\n    (if (= i n)\n        n\n        (+ i (get_sum (+ i 1)))))\n  (get_sum\
    \ 1))\n", "  (cond\n    [(= n 1)\n     1]\n    [else\n     (+ n (sum_to_n (- n\
    \ 1)))]))\n\n", "  (if (= n 1)\n      1\n      (+ n (sum_to_n (- n 1)))))\n\n",
  "  (cond\n    [(= n 1) 1]\n    [else (+ n (sum_to_n (- n 1)))]))\n", "  (define\
    \ (sum i)\n    (if (= i n)\n        i\n        (+ i (sum (+ i 1)))))\n  (sum 1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
