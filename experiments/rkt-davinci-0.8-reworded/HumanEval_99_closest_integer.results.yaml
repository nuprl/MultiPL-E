language: rkt
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round (/ (+ (string->number\
    \ value) 0.5) 1)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqzqszrnh.rkt:18:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpqzqszrnh.rkt:18:0\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ((value\
    \ (string->number value))\n         (value-integral-part (inexact->exact (truncate\
    \ value)))\n         (value-fractional-part (- value value-integral-part)))\n\
    \    (cond\n      ((>= value-fractional-part 0.5) (+ value-integral-part 1))\n\
    \      ((<= value-fractional-part -0.5) (- value-integral-part 1))\n      (else\
    \ value-integral-part))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\")\
    \ 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (negative?\
    \ (string->number value))\n      (- (round (string->number value)))\n      (round\
    \ (string->number value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw71oux1c.rkt:27:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw71oux1c.rkt:28:4

    actual:     16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw71oux1c.rkt:29:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (integer?\
    \ value) value\n      (if (= (floor (round value)) (ceiling (round value)))\n\
    \          (if (< (round value) 0) (floor (round value)) (ceiling (round value)))\n\
    \          (if (< value 0) (floor (round value)) (ceiling (round value))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt9gyc8t.rkt:27:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt9gyc8t.rkt:28:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt9gyc8t.rkt:29:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt9gyc8t.rkt:30:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvt9gyc8t.rkt:31:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (string->number\
    \ (string-append (number->string (exact->inexact (round (string->number value)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoy5s5b8n.rkt:24:4

    actual:     10.0

    expected:   10

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoy5s5b8n.rkt:25:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoy5s5b8n.rkt:26:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoy5s5b8n.rkt:27:4

    actual:     15.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoy5s5b8n.rkt:28:4

    actual:     0.0

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (closest_integer-inner\
    \ value acc)\n    (cond [(string=? \".\" (substring value 0 1)) (closest_integer-inner\
    \ (string-append \"0\" value) acc)]\n          [(string=? \"-\" (substring value\
    \ 0 1)) (closest_integer-inner (substring value 1) (cons \"-\" acc))]\n      \
    \    [(string=? \"+\" (substring value 0 1)) (closest_integer-inner (substring\
    \ value 1) acc)]\n          [(string=? \"\" value) (apply number-&gt;string (reverse\
    \ acc))]\n          [(&gt; (string-&gt;number (substring value 0 1)) 4) (closest_integer-inner\
    \ (substring value 1) (cons \"5\" acc))]\n          [else (closest_integer-inner\
    \ (substring value 1) (cons \"0\" acc))]))\n  (closest_integer-inner value '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp8_06dz1b.rkt:23:76: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1659821023
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (positive?\
    \ (string->number value))\n      (inexact->exact (round (string->number value)))\n\
    \      (inexact->exact (round (string->number value)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5tamwotf.rkt:27:4

    actual:     14

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond ((= 0.0\
    \ value) 0)\n        ((= 0.5 value) 1)\n        ((= -0.5 value) -1)\n        ((&gt;\
    \ value 0) (inexact-&gt;exact (floor value)))\n        ((&lt; value 0) (inexact-&gt;exact\
    \ (ceiling value)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\") 10)\n\
    \    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\"\
    ) -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate\
    \ \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp7lwzqiy8.rkt:21:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1659821023
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (cond [(< value\
    \ 0) (- (round (abs value)))]\n        [else (round value)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuqyymx9n.rkt:25:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuqyymx9n.rkt:26:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuqyymx9n.rkt:27:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuqyymx9n.rkt:28:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuqyymx9n.rkt:29:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (exact->inexact\
    \ (round (string->number value))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxonz7fbn.rkt:24:4

    actual:     10.0

    expected:   10

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxonz7fbn.rkt:25:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxonz7fbn.rkt:26:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxonz7fbn.rkt:27:4

    actual:     15.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxonz7fbn.rkt:28:4

    actual:     0.0

    expected:   0

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (apply round (list\
    \ value)))\n```\n\n```racket\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\")\
    \ 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqs1ydc1d.rkt:26:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqs1ydc1d.rkt:27:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqs1ydc1d.rkt:28:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqs1ydc1d.rkt:29:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqs1ydc1d.rkt:30:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: '''`````racket

    '
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (extract_sign\
    \ value)\n    (cond\n      [(string=? value \"0\")]\n      [(string-index value\
    \ #\\-) -1]\n      [else 1]))\n  (define (abs-string str)\n    (if (string=? str\
    \ \"0\")\n        \"0\"\n        (if (string-index str #\\-)\n            (string-drop\
    \ str 1)\n            str)))\n  (define (drop-dot value)\n    (if (string-index\
    \ value #\\.)\n        (string-drop value (add1 (string-index value #\\.)))\n\
    \        value))\n  (define (normalize-digits value)\n    (cond\n      [(< (string-length\
    \ value) 2) value]\n      [(= (string-length value) 2) (string-append \"0\" value)]\n\
    \      [else value]))\n  (define (dec-str value)\n    (string-append\n     (normalize-digits\n\
    \      (drop-dot value))\n     \"0\"))\n  (define (inc-str value)\n    (string-append\n\
    \     (normalize-digits\n      (drop-dot value))\n     \"1\"))\n  (define (greater-than\
    \ value1 value2)\n    (let ((val1 (string->number value1))\n          (val2 (string->number\
    \ value2)))\n      (> val1 val2)))\n  (define (round-away-from-zero value)\n \
    \   (let ((sign (extract-sign value)))\n      (if (string=? (abs-string value)\
    \ \"0\")\n          \"0\"\n          (if (string-index value #\\.)\n         \
    \     (let ((digits (drop-dot value)))\n                (if (greater-than digits\
    \ \"5\")\n                    (number->string (round (string->number value)))\n\
    \                    (number->string (round (string->number value)))))\n     \
    \         (if (greater-than value \"5\")\n                  (number->string (+\
    \ sign 1))\n                  (number->string sign)))))))\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz8789gg3.rkt:16:0: begin (possibly implicit): no expression after\
    \ a sequence of internal definitions\n  in: (begin (define (extract_sign value)\
    \ (cond ((string=? value \"0\")) ((string-index value #\\-) -1) (else 1))) (define\
    \ (abs-string str) (if (string=? str \"0\") \"0\" (if (string-index str #\\-)\
    \ (string-drop str 1) str))) (define (drop-dot value) (if (string-inde...\n  location...:\n\
    \   /tmp/tmpz8789gg3.rkt:16:0\n   /tmp/tmpz8789gg3.rkt:17:2\n   /tmp/tmpz8789gg3.rkt:22:2\n\
    \   /tmp/tmpz8789gg3.rkt:28:2\n   /tmp/tmpz8789gg3.rkt:32:2\n   /tmp/tmpz8789gg3.rkt:37:2\n\
    \   /tmp/tmpz8789gg3.rkt:42:2\n   /tmp/tmpz8789gg3.rkt:47:2\n   /tmp/tmpz8789gg3.rkt:51:2\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([chunks\
    \ (string-split value #\\.)]\n         [int (string->number (car chunks))]\n \
    \        [dec (string->number (cadr chunks))])\n    (cond ((= dec 0) int)\n  \
    \        ((&gt; dec 0) (+ int 1))\n          ((&lt; dec 0) (- int 1)))))\n</code>\n\
    Here's the output of some Racket tests:\n<code>&gt; (closest_integer \"10\")\n\
    10\n&gt; (closest_integer \"15.3\")\n15\n&gt; (closest_integer \"15.5\")\n16\n\
    &gt; (closest_integer \"14.5\")\n15\n&gt; (closest_integer \"-14.5\")\n-15\n&gt;\
    \ (closest_integer \"-14.5\")\n-15\n&gt; (closest_integer \"-11.4\")\n-11\n&gt;\
    \ (closest_integer \"-11.5\")\n-12\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp1fzfws72.rkt:22:11: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1659821023
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define value-integer\
    \ (round value))\n  (define value-real (real-part value))\n  (if (or (and (= value-integer\
    \ value-real) (> value-integer 0))\n          (and (= value-integer value-real)\
    \ (< value-integer 0)))\n      value-integer\n      (if (> value-integer 0)\n\
    \          (add1 value-integer)\n          (sub1 value-integer))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4psrc40.rkt:31:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4psrc40.rkt:32:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4psrc40.rkt:33:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4psrc40.rkt:34:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa4psrc40.rkt:35:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (round value))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp214egja8.rkt:24:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"10\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp214egja8.rkt:25:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"14.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp214egja8.rkt:26:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"-15.5\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp214egja8.rkt:27:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"15.3\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp214egja8.rkt:28:4\n\
    \nround: contract violation\n  expected: real?\n  given: \"0\"\n--------------------\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (let* ([value\
    \ (string->number value)]\n         (x (quotient value 1))\n         (y (quotient\
    \ value 1.0)))\n    (if (= x y)\n        x\n        (if (>= value 0)\n       \
    \     (1+ x)\n            (1- x)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate closest_integer))\n    (check-equal? (candidate \"10\"\
    ) 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal? (candidate\
    \ \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n    (check-equal?\
    \ (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuqcjj2iv.rkt:23:13: 1+: unbound identifier\n  in: 1+\n  location...:\n\
    \   /tmp/tmpuqcjj2iv.rkt:23:13\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (float-abs\
    \ x)\n    (if (&lt; x 0) (- x) x))\n  (define (floor-to-int x)\n    (integer?\
    \ x))\n  (define (ceiling-to-int x)\n    (add1 (floor-to-int x)))\n  (define (integers-around\
    \ x)\n    (list (floor-to-int x) (ceiling-to-int x)))\n  (define (get-closest\
    \ x y)\n    (if (&lt;= (float-abs (- x (floor-to-int x)))\n             (float-abs\
    \ (- x (ceiling-to-int x))))\n        (floor-to-int x)\n        (ceiling-to-int\
    \ x)))\n  (get-closest (string-&gt;number value) (integers-around (string-&gt;number\
    \ value))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ closest_integer))\n    (check-equal? (candidate \"10\") 10)\n    (check-equal?\
    \ (candidate \"14.5\") 15)\n    (check-equal? (candidate \"-15.5\") -16)\n   \
    \ (check-equal? (candidate \"15.3\") 15)\n    (check-equal? (candidate \"0\")\
    \ 0)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp_1qqy74c.rkt:30:15: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1659821023
- exit_code: 1
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define int_value\n\
    \    (if (string-index value #\\.)\n        (substring value 0 (string-index value\
    \ #\\.))\n        value))\n  (define (trailing_decimal str)\n    (substring str\
    \ (string-index str #\\.) 1))\n  (cond\n    [(> (string->number (trailing_decimal\
    \ value)) .5)\n     (add1 (string->number int_value))]\n    [(< (string->number\
    \ (trailing_decimal value)) .5)\n     (string->number int_value)]\n    [(= (string->number\
    \ (trailing_decimal value)) .5)\n     (if (positive? (string->number value))\n\
    \         (add1 (string->number int_value))\n         (sub1 (string->number int_value)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6qdre0t6.rkt:18:9: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp6qdre0t6.rkt:18:9\n"
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (if (exact-integer?\
    \ value)\n      value\n      (round (string->number value))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n    (check-equal?\
    \ (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\") 15)\n    (check-equal?\
    \ (candidate \"-15.5\") -16)\n    (check-equal? (candidate \"15.3\") 15)\n   \
    \ (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxoa83wip.rkt:27:4

    actual:     14.0

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxoa83wip.rkt:28:4

    actual:     -16.0

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxoa83wip.rkt:29:4

    actual:     15.0

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.\n(define (closest_integer value)\n  (define (abs x)\n\
    \    (if (< x 0)\n        (- x)\n        x))\n  (define (closest-integer-helper\
    \ n)\n    (if (not (integer? n))\n        (if (or (and (>= (abs (- n (inexact->exact\
    \ n)))\n                        (abs (- n (+ 1 (inexact->exact n)))))\n      \
    \               (< (abs (- n (inexact->exact n)))\n                        (abs\
    \ (- n (- 1 (inexact->exact n))))))\n                (and (<= (abs (- n (inexact->exact\
    \ n)))\n                        (abs (- n (+ 1 (inexact->exact n)))))\n      \
    \               (> (abs (- n (inexact->exact n)))\n                        (abs\
    \ (- n (- 1 (inexact->exact n)))))))\n            (+ (inexact->exact n) 1)\n \
    \           (- (inexact->exact n) 1))\n        n))\n  (cond ((integer? value)\n\
    \         value)\n        ((string? value)\n         (closest-integer-helper (string->number\
    \ value)))\n        ((number? value)\n         (closest-integer-helper value))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
    \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
    ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
    \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4mdprct.rkt:47:4

    actual:     27/2

    expected:   15

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4mdprct.rkt:48:4

    actual:     -33/2

    expected:   -16

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4mdprct.rkt:49:4

    actual:     4025092166962381/281474976710656

    expected:   15

    --------------------

    '
  stdout: ''
  timestamp: 1659821024
