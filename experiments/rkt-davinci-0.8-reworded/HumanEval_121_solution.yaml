name: HumanEval_121_solution
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers, return the sum of\
  \ all of the odd elements that are in even positions.\n;; Examples\n;; >>> (solution\
  \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
  \ (list 30 13 24 321))\n;; 0\n(define (solution lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
  \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
  \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n \
  \   (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
  \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
  \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
completions: ["  (define (helper sum ls cnt)\n    (cond\n      [(null? ls) sum]\n\
    \      [(and (odd? (car ls)) (= 0 (modulo cnt 2))) (helper (+ sum (car ls)) (cdr\
    \ ls) (+ cnt 1))]\n      [else (helper sum (cdr ls) (+ cnt 1))]))\n  (helper 0\
    \ lst 0))\n", "  (list-ref lst 2))\n", "  (if (empty? lst)\n      0\n      (cond\n\
    \        [(odd? (first lst))\n         (+ (first lst) (solution (rest lst)))]\n\
    \        [else\n         (solution (rest lst))])))\n", "  (for/sum ([(x y) (in-indexed\
    \ lst)]\n            #:when (and (odd? x) (even? y)))\n    y))\n```\n## Arithmetic\
    \ progression sum\n\n```racket\n#lang racket\n", "  (match lst\n    [(list first\
    \ _ rest ...)\n     (if (odd? first)\n         (+ first (solution rest))\n   \
    \      (solution rest))]\n    [else 0]))\n", "  (accumulate + 0 (filter odd? (filter-even-positions\
    \ lst))))\n", "  (cond [(empty? lst) 0]\n        [(even? (rest lst)) (+ (first\
    \ lst) (solution (rest (rest lst))))]\n        [else (solution (rest lst))]))",
  "  (define (sum lst)\n    (cond ((null? lst)\n           0)\n          ((even? (car\
    \ lst))\n           (+ (car lst) (sum (cdr lst))))\n          (else\n        \
    \   (sum (cdr lst)))))\n  (define (even? n)\n    (= (modulo n 2) 0))\n  (define\
    \ (odd? n)\n    (= (modulo n 2) 1))\n  (define (odd-in-even lst)\n    (cond ((null?\
    \ lst)\n           0)\n          ((odd? (car lst))\n           (+ (car lst) (odd-in-even\
    \ (cdr lst))))\n          (else\n           (odd-in-even (cdr lst)))))\n  (define\
    \ (even-in-odd lst)\n    (cond ((null? lst)\n           0)\n          ((even?\
    \ (car lst))\n           (+ (car lst) (even-in-odd (cdr lst))))\n          (else\n\
    \           (even-in-odd (cdr lst)))))\n  (define (even-in-even lst)\n    (cond\
    \ ((null? lst)\n           0)\n          ((even? (car lst))\n           (+ (car\
    \ lst) (even-in-even (cdr lst))))\n          (else\n           (even-in-even (cdr\
    \ lst)))))\n  (define (odd-in-odd lst)\n    (cond ((null? lst)\n           0)\n\
    \          ((odd? (car lst))\n           (+ (car lst) (odd-in-odd (cdr lst))))\n\
    \          (else\n           (odd-in-odd (cdr lst)))))\n  (define (take-odds lst)\n\
    \    (cond ((null? lst)\n           '())\n          ((odd? (car lst))\n      \
    \     (cons (car lst) (take-odds (cdr lst))))\n          (else\n           (take-odds\
    \ (cdr lst)))))\n  (define (take-evens lst)\n    (cond ((null? lst)\n        \
    \   '())\n          ((even", "  (cond\n    [(empty? lst) 0]\n    [(= (remainder\
    \ (first lst) 2) 1)\n     (+ (first lst) (solution (cddr lst)))]\n    [else (solution\
    \ (cddr lst))]))\n", "  (cond ((empty? lst) 0)\n        ((= (remainder (length\
    \ lst) 2) 0) (+ (car lst) (solution (cdr lst))))\n        (else (solution (cdr\
    \ lst)))))", "  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (is-odd?\
    \ n)\n    (= (remainder n 2) 1))\n  (define (is-even-idx? i)\n    (is-even? i))\n\
    \  (define (is-odd-idx? i)\n    (is-odd? i))\n  (foldl + 0 (map (curryr list-ref\
    \ lst) (filter is-even-idx? (iota (length lst))))))", "  (accumulate + 0 (filter\
    \ odd? (evens lst))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst))\
    \ (solution (cdr (cdr lst))) ]\n    [else (+ (car lst) (solution (cdr (cdr lst))))]))\n\
    ```\n\n### Problem 5\n\nYou are given a non-empty list of integers. You will be\
    \ given a number n. Using only this function, write a function that removes the\
    \ last n elements from the list.\n\n```#lang racket\n", "  (local [(define (oddpos\
    \ lst sum)\n            (cond [(empty? lst) sum]\n                  [(and (= (remainder\
    \ (first lst) 2) 1)\n                        (= (remainder (length lst) 2) 0))\n\
    \                   (oddpos (rest lst) (+ sum (first lst)))]\n               \
    \   [else (oddpos (rest lst) sum)]))]\n    (oddpos lst 0)))\n\n```\n\n```racket\n\
    #lang racket\n", "  (if (null? lst)\n      0\n      (let ([x (car lst)]\n    \
    \        [y (cadr lst)])\n        (+ (if (and (odd? x) (even? y)) x 0)\n     \
    \      (solution (cdr lst))))))\n</code>\n", "  (if (null? lst)\n      0\n   \
    \   (let ([x (car lst)]\n            [y (cadr lst)])\n        (+ x (solution (cddr\
    \ lst))))))\n```\n\n```racket\n#lang racket\n", "  (define (sum-of-odds lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(odd? (car lst)) (+ (car lst) (sum-of-odds\
    \ (cdr lst)))]\n      [else (sum-of-odds (cdr lst))]))\n  (sum-of-odds (filter\
    \ odd? (filter-odds lst))))", "  (cond\n    [(empty? lst) 0]\n    [(even? (first\
    \ lst)) (solution (rest lst))]\n    [(odd? (first lst)) (+ (first lst) (solution\
    \ (rest lst)))]))\n", "  (foldl + 0\n    (for/list ([e (in-list lst) :when (odd?\
    \ e)]\n               [i (in-range (length lst)) :when (even? i)])\n      e)))\n",
  '  (foldl + 0 (map (lambda (e) (cond [(even? (cdr e)) (car e)])) (enumerate lst))))']
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
