name: HumanEval_7_filter_by_substring
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that contain\
  \ given substring\n;; >>> (filter_by_substring (list ) \"a\")\n;; (list )\n;; >>>\
  \ (filter_by_substring (list \"abc\" \"bacd\" \"cde\" \"array\") \"a\")\n;; (list\
  \ \"abc\" \"bacd\" \"array\")\n(define (filter_by_substring strings substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_substring))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"xxx\" \"asd\"\
  \ \"aaaxxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xx\") (list \"xxx\" \"aaaxxy\" \"\
  xxxAAA\" \"xxx\"))\n    (check-equal? (candidate (list \"grunt\" \"trumpet\" \"\
  prune\" \"gruesome\") \"run\") (list \"grunt\" \"prune\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (item) (string-contains item substring)) strings))\n",
  "  (filter (lambda (str) (search str substring)) strings))\n", "  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n", "  (filter (lambda (s) (regexp-match\
    \ #rx substring s)) strings))\n", "  (filter (lambda (string) (string-contains\
    \ string substring)) strings))\n", "  (filter (lambda (x) (substring? substring\
    \ x)) strings))\n", "  (if (empty? strings)\n      (list)\n      (if (string-contains?\
    \ (first strings) substring)\n          (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))\n          (filter_by_substring (rest strings) substring))))\n",
  "  (filter (lambda (s) (contains? s substring)) strings))\n", "  (cond ((null? strings)\
    \ (list))\n        ((string-contains? (car strings) substring)\n         (cons\
    \ (car strings) (filter_by_substring (cdr strings) substring)))\n        (else\
    \ (filter_by_substring (cdr strings) substring))))\n```\n\n```racket\n#lang racket\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (cond\n \
    \   [(empty? strings) (list)]\n    [(string-contains (first strings) substring)\n\
    \      (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "    (filter\
    \ (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (string) (member substring string)) strings))\n", "  (filter (lambda (str) (string-contains\
    \ str substring)) strings))\n", "  (filter (lambda (string) (string-contains string\
    \ substring)) strings))\n", "  (cond\n    [(empty? strings) empty]\n    [(string-contains\
    \ (first strings) substring)\n     (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]\n    [else (filter_by_substring (rest strings) substring)]))\n",
  "  (cond\n    [(empty? strings) '()]\n    [(string-contains (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (word) (contains? word substring)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (filter (lambda (str) (string-contains\
    \ str substring)) strings))\n", "  (filter (\u03BB (a-string)\n            (if\
    \ (string-contains a-string substring)\n                #t\n                #f))\n\
    \          strings))\n```\n\n[Back to Section](#problem-solving-with-racket)\n\
    \n### Lazy evaluation\n\n```racket\n#lang racket\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (item) (string-contains item substring)) strings))\n",
  "  (filter (lambda (str) (string-contains str substring)) strings))\n", "  (filter\
    \ (\u03BB (x) (substring? substring x)) strings))\n", "  (filter (lambda (s) (contains\
    \ s substring)) strings))\n", "  (filter (lambda (str) (regexp-match? substring\
    \ str)) strings))\n", "  (filter (lambda (str) (string-contains str substring))\
    \ strings))\n", "  (filter (lambda (string) (and (not (null? (string-contains\
    \ string substring))) (string-contains string substring))) strings))\n", "  (define\
    \ (in-string? string substring)\n    (cond [(string=? \"\" substring) false]\n\
    \          [(string-contains string substring) true]\n          [else false]))\n\
    \  (cond [(null? strings) (list)]\n        [(in-string? (car strings) substring)\n\
    \         (cons (car strings) (filter_by_substring (cdr strings) substring))]\n\
    \        [else (filter_by_substring (cdr strings) substring)]))", "  (cond\n \
    \   [(equal? '() strings) '()]\n    [(string-contains? (car strings) substring)\n\
    \     (cons (car strings) (filter_by_substring (cdr strings) substring))]\n  \
    \  [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter (\u03BB\
    \ (s) (regexp-match #rx substring s)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (define (substring? s)\n\
    \    (andmap (lambda (s1) (string-contains s1 substring)) s))\n  (filter substring?\
    \ strings))\n", "  (filter (lambda (str) (not (string-contains str substring)))\
    \ strings))\n", "  (filter (lambda (s) (string-contains s substring)) strings))\n",
  "  (filter (lambda (string) (substring? string substring)) strings))\n", "  (filter\
    \ (lambda (s) (string-contains s substring)) strings))\n```\n\n```\n#lang racket\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (lambda\
    \ (string) (substring? string substring)) strings))\n", "  (filter (lambda (str)\
    \ (string-contains str substring)) strings))\n", "  (foldl (lambda (acc string)\n\
    \           (if (string-contains string substring)\n               (cons string\
    \ acc)\n               acc))\n         '()\n         strings))\n", "  (filter\
    \ (lambda (str) (string-contains str substring)) strings))\n", "  (filter (lambda\
    \ (x) (contains? x substring)) strings))\n", "  (filter (lambda (string) (string-contains\
    \ string substring)) strings))\n", "  (filter (\u03BB (string) (string-contains\
    \ string substring)) strings))\n", "  (filter (lambda (string) (string-contains\
    \ string substring)) strings))\n", "  (filter (\u03BB (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (str) (string-contains str substring)) strings))\n",
  "  (filter (lambda (string) (substring? string substring)) strings))\n", "  (define\
    \ (filter_by_substring_iter strings acc)\n    (if (null? strings)\n        acc\n\
    \        (if (string-contains (car strings) substring)\n            (filter_by_substring_iter\
    \ (cdr strings) (cons (car strings) acc))\n            (filter_by_substring_iter\
    \ (cdr strings) acc))))\n  (reverse (filter_by_substring_iter strings '())))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (cond [(empty?\
    \ strings) '()]\n        [else (if (contains (first strings) substring)\n    \
    \              (cons (first strings) (filter_by_substring (rest strings) substring))\n\
    \                  (filter_by_substring (rest strings) substring))]))\n", "  (filter\
    \ (\u03BB (str) (regexp-match? (regexp (string-append substring \".*\")) str))\
    \ strings))\n```\n* * * *\n\n#### *[9kyu]* CamelCase Method\n```racket\n#lang\
    \ racket\n", "  (filter (lambda (string) (string-contains string substring)) strings))\n",
  "  (cond ((null? strings) '())\n        ((string-contains? (car strings) substring)\n\
    \         (cons (car strings) (filter_by_substring (cdr strings) substring)))\n\
    \        (else (filter_by_substring (cdr strings) substring))))\n", "  (filter\
    \ (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (s) (not (equal? (string-index s substring) #f))) strings))\n```\n\n``` #lang\
    \ racket\n", "  (filter (\u03BB (x) (string-contains x substring)) strings))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (cond [(empty?\
    \ strings) empty]\n        [else (cons (first strings)\n                    (filter_by_substring\
    \ (rest strings) substring))]))\n", "  (filter (lambda (string) (string-contains\
    \ string substring)) strings))\n", "  (if (empty? strings)\n      (list)\n   \
    \   (if (string-contains? (first strings) substring)\n          (cons (first strings)\
    \ (filter_by_substring (rest strings) substring))\n          (filter_by_substring\
    \ (rest strings) substring))))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (input) (string-contains input substring))\
    \ strings))\n```\n\n```clojure", "  (filter (\u03BB (x) (string-contains x substring))\
    \ strings))\n", "  (filter (\u03BB (x) (substring? substring x)) strings))\n",
  "  (filter (lambda (x) (not (equal? -1 (string-index x substring)))) strings))\n",
  "  (filter (lambda (s) (and (string? s)\n                           (regexp-match\
    \ (regexp substring) s)))\n          strings))\n```\n\n## Regexp\n\n```racket",
  "  (filter (lambda (x) (regexp-match substring x)) strings))\n", "  (cond\n    ((null?\
    \ strings)\n     (list))\n    ((string-contains? (car strings) substring)\n  \
    \   (cons (car strings) (filter_by_substring (cdr strings) substring)))\n    (else\n\
    \     (filter_by_substring (cdr strings) substring))))\n", "  (filter (lambda\
    \ (s) (substring? s substring)) strings))\n```\n\nAnd then your autograder, `submission-correctness.rkt`,\
    \ might look like this:\n\n```racket\n#lang racket\n", "  (filter (lambda (word)\
    \ (regexp-match? (regexp substring) word)) strings))\n", "  (filter (lambda (n)\
    \ (string-contains n substring)) strings))\n", "  (cond [(empty? strings) '()]\n\
    \        [else (if (has_substring? (first strings) substring)\n              \
    \    (cons (first strings) (filter_by_substring (rest strings) substring))\n \
    \                 (filter_by_substring (rest strings) substring))]))\n", "  (cond\n\
    \    [(null? strings) '()]\n    [(string-contains (car strings) substring)\n \
    \    (cons (car strings) (filter_by_substring (cdr strings) substring))]\n   \
    \ [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n", "  (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "  (cond\n    [(empty? strings)\n     (list)]\n\
    \    [(contains_substring? (first strings) substring)\n     (cons (first strings)\
    \ (filter_by_substring (rest strings) substring))]\n    [else\n     (filter_by_substring\
    \ (rest strings) substring)]))\n", "  (filter (lambda (str) (substring? str substring))\
    \ strings))\n", "  (if (null? strings) '()\n    (if (string-contains (car strings)\
    \ substring)\n        (cons (car strings) (filter_by_substring (cdr strings) substring))\n\
    \        (filter_by_substring (cdr strings) substring))))\n", "  (filter (lambda\
    \ (str) (substring? str substring)) strings))\n", "  (filter (lambda (x) (substring\
    \ x substring)) strings))\n", "  (filter (lambda (s) (search s substring)) strings))\n",
  "  (filter (lambda (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (s) (regexp-match? substring s)) strings))\n", "  (cond [(empty? strings) empty]\n\
    \        [(empty? substring) empty]\n        [else (cons (first strings)\n   \
    \                 (filter_by_substring (rest strings) substring))]))\n\n", " \
    \ (filter (lambda (x) (string-contains x substring)) strings))\n", "  (cond\n\
    \    [(empty? strings) empty]\n    [(contains? (first strings) substring)\n  \
    \   (cons (first strings) (filter_by_substring (rest strings) substring))]\n \
    \   [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (\u03BB (str)\
    \ (regexp-match #rx substring str)) strings))\n", "  (filter (\u03BB (s) (string-contains\
    \ s substring)) strings))\n", "  (filter (lambda (string) (string-contains string\
    \ substring)) strings))\n", "  (filter (lambda (str) (string-contains str substring))\
    \ strings))\n", "  (filter (lambda (x) (string-contains x substring)) strings))\n",
  "  (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter (lambda\
    \ (string) (string-contains string substring)) strings))\n", "  (cond [(null?\
    \ strings) (list)]\n        [(empty? substring) (list)]\n        [(string-contains?\
    \ (car strings) substring) (cons (car strings) (filter_by_substring (cdr strings)\
    \ substring))]\n        [else (filter_by_substring (cdr strings) substring)]))\n",
  "  (cond\n    [(null? strings) (list)]\n    [(string-contains? (car strings) substring)\n\
    \      (cons (car strings) (filter_by_substring (cdr strings) substring))]\n \
    \   [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter (lambda\
    \ (string) (member substring string)) strings))\n", "  (filter (lambda (string)\
    \ (string-contains string substring)) strings))\n", "  (define (loop strings)\n\
    \    (cond\n      [(empty? strings) '()]\n      [(contains? (first strings) substring)\n\
    \       (cons (first strings) (loop (rest strings)))]\n      [else (loop (rest\
    \ strings))]))\n  (loop strings))\n```", "    (filter (lambda (s) (string-contains\
    \ s substring)) strings))\n", "    (for/list ([str strings])\n        (if (string-contains\
    \ str substring)\n            str)\n        )\n    )\n", "  (filter (lambda (string)\
    \ (substring? string substring)) strings))\n", "  (filter (\u03BB (x) (substring?\
    \ substring x)) strings))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (list-&gt;string (filter (lambda (str)\n                  \
    \         (member substring (string-&gt;list str)))\n                        \
    \ strings)))\n", "  (filter (lambda (s) (string-contains s substring)) strings))\n",
  "  (filter (lambda (x) (string-contains? x substring)) strings))\n", "  (filter\
    \ (lambda (string) (string-contains string substring)) strings))\n", "  (filter\
    \ (\u03BB (x) (string-contains x substring)) strings))\n", "  (cond [(empty? strings)\
    \ empty]\n        [(string-contains? (first strings) substring)\n         (cons\
    \ (first strings) (filter_by_substring (rest strings) substring))]\n        [else\
    \ (filter_by_substring (rest strings) substring)]))\n", "  (cond ((null? strings)\
    \ '())\n        ((string-contains? (car strings) substring) (cons (car strings)\
    \ (filter_by_substring (cdr strings) substring)))\n        (else (filter_by_substring\
    \ (cdr strings) substring))))\n", '  (filter (lambda (s) (string-contains s substring))
    strings))', "  (filter (lambda (s) (contains? s substring)) strings))\n", "  (filter\
    \ (lambda (string) (string-contains string substring)) strings))\n", "  (cond\n\
    \    [(empty? strings) (list)]\n    [(string-contains (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "    (cond ((empty?\
    \ strings) strings)\n          ((string-contains (first strings) substring)\n\
    \           (cons (first strings) (filter_by_substring (rest strings) substring)))\n\
    \          (else (filter_by_substring (rest strings) substring))))\n", "  (filter\
    \ (lambda (s) (regexp-match (regexp (string-append \".*\" substring \".*\")) s))\
    \ strings))\n```\n\n```Racket\n#lang racket\n", "    (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (lambda (s) (string-contains s substring))\
    \ strings))\n", "  (filter (lambda (string) (string-contains string substring))\
    \ strings))\n", "  (filter (\u03BB (x) (string-contains x substring)) strings))\n",
  "  (filter (lambda (x) (regexp-match? (regexp substring) x)) strings))\n", "  (filter\
    \ (lambda (s) (string-contains s substring)) strings))\n", "  (filter (\u03BB\
    \ (word) (string-contains word substring)) strings))\n", "  (cond\n    [(null?\
    \ strings) (list)]\n    [(string-contains (car strings) substring)\n     (cons\
    \ (car strings) (filter_by_substring (cdr strings) substring))]\n    [else (filter_by_substring\
    \ (cdr strings) substring)]))\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "    (cond\n        [(empty? strings) (list )]\n        [(string-contains?\
    \ (first strings) substring)\n         (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]\n        [else (filter_by_substring (rest strings)\
    \ substring)]))\n", "    (if (null? strings)\n        (list)\n        (if (string-contains\
    \ (car strings) substring)\n            (cons (car strings) (filter_by_substring\
    \ (cdr strings) substring))\n            (filter_by_substring (cdr strings) substring))))\n",
  "  (filter (lambda (s) (and (= (count s substring) 0) #f) #t) strings))\n", "  (for/list\
    \ ([s strings]\n             #:when (string-contains? s substring))\n    s))\n",
  "  (cond\n    [(null? strings)\n     empty]\n    [(string-contains? (car strings)\
    \ substring)\n     (cons (car strings) (filter_by_substring (cdr strings) substring))]\n\
    \    [else\n     (filter_by_substring (cdr strings) substring)]))\n", "  (filter\
    \ (\u03BB (string) (regexp-contains? (string->regexp substring) string)) strings))",
  "  (filter (\u03BB (x) (string-contains x substring)) strings))\n", "  (filter (\u03BB\
    \ (x) (string-contains x substring)) strings))\n", "  (filter (lambda (str) (regexp-match?\
    \ (regexp substring) str)) strings))\n", "  (filter (lambda (str) (string-contains\
    \ str substring)) strings))\n```\n\nA common pattern in Racket is to define a\
    \ simple helper function that solves a subset of the problem to be useful, and\
    \ then use that function as a building block to build the solution to the bigger\
    \ problem.  For example, the `sum` function above was implemented first, then\
    \ we used it to implement `sum-square-evens`.\n\n### Homework\n\n1. Write the\
    \ `binary-search` function in Racket, using the above examples as a guide.\n2.\
    \ Define a function `(max-of-3 a b c)` that takes in three numbers and returns\
    \ the largest.  (Hint: use the `max` function).\n3. Define a function `(filter-evens\
    \ lst)` that returns a list of only the even numbers from the input list of numbers.\
    \  (Hint: use the `even?` function).\n4. Define a function `(filter-range lower\
    \ upper lst)` that returns a list of numbers from the input list that are in the\
    \ range `[lower, upper]` (inclusive).  (Hint: use the `<=` function).", "  (filter\
    \ (lambda (string) (string-contains string substring)) strings))\n", "  (cond\n\
    \    [(null? strings) (list)]\n    [(string-contains? (car strings) substring)\n\
    \     (cons (car strings) (filter_by_substring (cdr strings) substring))]\n  \
    \  [else (filter_by_substring (cdr strings) substring)]))\n", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "  (filter (lambda (string) (string-contains string substring))\
    \ strings))\n", "  (filter (\u03BB (string) (substring? substring string)) strings))\n",
  "  (cond\n    [(empty? strings) (list)]\n    [(string-contains? (first strings)\
    \ substring)\n     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda\
    \ (s) (contains_substring? s substring)) strings))\n", "  (for/list ([s strings]\n\
    \             #:when (regexp-match? (regexp substring) s))\n    s))\n", "  (cond\n\
    \    [(null? strings) (list)]\n    [(string-contains (car strings) substring)\n\
    \     (cons (car strings) (filter_by_substring (cdr strings) substring))]\n  \
    \  [else (filter_by_substring (cdr strings) substring)]))\n", "  (cond\n    [(empty?\
    \ strings)\n     (list)]\n    [(string-contains? (first strings) substring)\n\
    \     (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \    [else\n     (filter_by_substring (rest strings) substring)]))\n```\n\n##\
    \ Remove\n\n```\n#lang racket\n", "  (filter (lambda (x) (string-contains x substring))\
    \ strings))\n", "  (filter (\u03BB (string) (string-contains string substring))\
    \ strings))\n```\n\n### FizzBuzz\n\n```racket\n#lang racket\n", "  (for/list ([s\
    \ strings] #:when (string-contains s substring))\n    s))\n", "  (filter (\u03BB\
    \ (x) (substring? substring x)) strings))\n", "  (cond [(empty? strings) '()]\n\
    \        [else\n         (cond [(string-contains (first strings) substring)\n\
    \                (cons (first strings) (filter_by_substring (rest strings) substring))]\n\
    \               [else (filter_by_substring (rest strings) substring)])]))\n",
  "  (filter (\u03BB (s) (string-contains s substring)) strings))\n", "  (filter (lambda\
    \ (x) (string-contains x substring)) strings))\n", "  (filter (lambda (s) (contains_substring?\
    \ s substring)) strings))\n", "  (cond\n    [(empty? strings) (list)]\n    [(string-contains\
    \ (first strings) substring)\n     (cons (first strings) (filter_by_substring\
    \ (rest strings) substring))]\n    [else (filter_by_substring (rest strings) substring)]))\n",
  "  (filter (lambda (x) (contains x substring)) strings))\n", "  (filter (lambda\
    \ (str) (substring? str substring)) strings))\n", "  (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (\u03BB (string) (string-contains string\
    \ substring)) strings))\n", "  (filter (lambda (s) (substring s substring)) strings))\n",
  "  (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (filter (lambda (x) (string-contains x substring)) strings))\n", "  (filter\
    \ (\u03BB (str) (string-contains str substring)) strings))\n", "  (cond [(null?\
    \ strings) (list)]\n        [(string-contains (car strings) substring)\n     \
    \    (cons (car strings) (filter_by_substring (cdr strings) substring))]\n   \
    \     [else (filter_by_substring (cdr strings) substring)]))\n```\n\n```racket\n\
    #lang racket\n", "  (filter (\u03BB (x) (contains_substring? x substring)) strings))\n",
  "  (filter (lambda (string) (contains-substring? string substring)) strings))\n",
  "  (filter (\u03BB (s) (regexp-match? (regexp substring) s)) strings))\n", "  (filter\
    \ (lambda (string) (substring string substring)) strings))\n", "  (cond\n    [(empty?\
    \ strings) (list)]\n    [(substring? (first strings) substring)\n     (cons (first\
    \ strings) (filter_by_substring (rest strings) substring))]\n    [else (filter_by_substring\
    \ (rest strings) substring)]))\n", "  (cond\n    [(null? strings)\n      '()]\n\
    \    [(string-contains (car strings) substring)\n      (cons (car strings) (filter_by_substring\
    \ (cdr strings) substring))]\n    [else\n      (filter_by_substring (cdr strings)\
    \ substring)]))\n```\n\n#### Problem 2\n\nImplement `output_filter_by_substring`,\
    \ which uses `filter_by_substring` to filter an input list of strings read from\
    \ file, outputting only ones that contain given substring.\n\n```racket\n#lang\
    \ racket\n", "  (filter (lambda (s) (substring? s substring)) strings))\n", " \
    \ (filter (lambda (s) (substring? s substring)) strings))\n", "  (cond\n    [(empty?\
    \ strings) '()]\n    [(string-contains (first strings) substring)\n     (cons\
    \ (first strings) (filter_by_substring (rest strings) substring))]\n    [else\
    \ (filter_by_substring (rest strings) substring)]))\n", "  (filter (lambda (x)\
    \ (string-contains x substring)) strings))\n", "  (filter (lambda (str) (string-contains\
    \ str substring)) strings))\n```\n## To Do\nYou are to implement a string filter\
    \ in your native language\n## Input\nInput will come from Standard Input, and\
    \ should be in the format:\n```\nbacd\nabc\ncd\nc\n```\nYour program should filter\
    \ this input based on a given substring, \"c\".\n## Output\nOutput should be the\
    \ filtered list of strings, formatted like this:\n```\nbacd\ncd\n```\n## Notes\n\
    Your solution should be in a file called string_filter.py.", "  (filter (lambda\
    \ (s) (string-contains s substring)) strings))\n", "  (filter (lambda (string)\
    \ (regexp-contains-match? string substring)) strings))\n```\n\n```scheme\n#lang\
    \ racket\n", "  (filter (lambda (s) (regexp-match? (regexp substring) s)) strings))\n",
  "  (filter (lambda (s) (regexp-match? (regexp substring) s)) strings))\n", "  (filter\
    \ (lambda (elem) (string-contains elem substring)) strings))\n", "  (filter (lambda\
    \ (str) (string-contains str substring)) strings))\n", "  (filter (lambda (s)\
    \ (not (not (string-contains s substring)))) strings))\n", "  (filter (lambda\
    \ (string) (contains? string substring)) strings))\n", "  (filter (lambda (str)\
    \ (contains? str substring)) strings))\n", "  (filter (lambda (x) (string-contains\
    \ x substring)) strings))\n", "  (filter (lambda (str) (substring? str substring))\
    \ strings))\n", "  (filter (lambda (s) (member substring s)) strings))\n", " \
    \ (cond [(empty? strings) '()]\n        [else (if (string-contains? (first strings)\
    \ substring)\n                  (cons (first strings) (filter_by_substring (rest\
    \ strings) substring))\n                  (filter_by_substring (rest strings)\
    \ substring))]))\n```\n### Lambda expression\n\n```racket\n#lang racket\n", " \
    \ (filter (lambda (string) (string-contains string substring)) strings))\n", " \
    \ (for/list ([item strings])\n    (if (string-contains item substring)\n     \
    \   item\n        (void))))\n", "  (if (null? strings)\n      '()\n      (if (string-contains\
    \ (car strings) substring)\n          (cons (car strings) (filter_by_substring\
    \ (cdr strings) substring))\n          (filter_by_substring (cdr strings) substring))))\n",
  "  (filter (lambda (s) (search substring s)) strings))\n", "  (filter (lambda (s)\
    \ (string-contains s substring)) strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
