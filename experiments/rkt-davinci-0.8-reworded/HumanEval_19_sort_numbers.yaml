name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  ;; Convert the incoming string to a list of numbers and then sort\n\
    \  (string-join (sort (map string->number (string-split numbers #\\space)) <)\
    \ \" \"))\n", "  (sort (string-split numbers #rx\"\\s+\") < #:key (lambda (n)\
    \ (string->number (string-replace-all n #rx\"zero\" #f 0))) string&gt;=?))\n",
  "  (sort (string-&gt;list numbers) #:key (\u03BB (x) (string-&gt;number (string\
    \ x)))))\n</code>\nBut I'm getting this error:\n<code> sort_numbers-test\n  expected:\
    \ (equal? (sort_numbers \"three one five\") \"one three five\")\n  but got: (equal?\
    \ (sort_numbers \"three one five\") \"one three five\")\n  failed\n</code>\n",
  "  (sort (string-split numbers)\n    string-locale-ci<?))\n", "  (string-join\n\
    \   (sort\n    (vector-&gt;list\n     (vector-map number-&gt;string\n        \
    \         (vector-sort &lt;\n                              (vector-map string-&gt;number\n\
    \                                          (string-split numbers #\\space)))))\n\
    \    &lt;)\n   #\\space))\n</code>\nI've tested the code and it works as expected,\
    \ but I'm wondering if there's a better way to do this.  I'm aware that recursion\
    \ could be used, but that doesn't seem to be any more efficient than the loop\
    \ I have.\n", "  (let ([numeral-string (string-join (sort (string-split numbers)\
    \ string&lt;?) \" \")])\n    (define (numeral-&gt;num n)\n      (cond\n      \
    \  [(equal? n \"zero\") 0]\n        [(equal? n \"one\") 1]\n        [(equal? n\
    \ \"two\") 2]\n        [(equal? n \"three\") 3]\n        [(equal? n \"four\")\
    \ 4]\n        [(equal? n \"five\") 5]\n        [(equal? n \"six\") 6]\n      \
    \  [(equal? n \"seven\") 7]\n        [(equal? n \"eight\") 8]\n        [(equal?\
    \ n \"nine\") 9]))\n    (define (num-&gt;numeral n)\n      (cond\n        [(equal?\
    \ n 0) \"zero\"]\n        [(equal? n 1) \"one\"]\n        [(equal? n 2) \"two\"\
    ]\n        [(equal? n 3) \"three\"]\n        [(equal? n 4) \"four\"]\n       \
    \ [(equal? n 5) \"five\"]\n        [(equal? n 6) \"six\"]\n        [(equal? n\
    \ 7) \"seven\"]\n        [(equal? n 8) \"eight\"]\n        [(equal? n 9) \"nine\"\
    ]))\n    (string-join (sort (map numeral-&gt;num (string-split numeral-string))\
    \ &lt;) \" \")))\n</code>\n", "  (define (string->number (str '(zero one two three\
    \ four five six seven eight nine)))\n    (hash-ref str str))\n  (define (number->string\
    \ (n '(0 1 2 3 4 5 6 7 8 9)))\n    (hash-ref n n))\n  (define (str->nums str)\n\
    \    (map string->number (string-split str)))\n  (define (nums->str nums)\n  \
    \  (string-join (map number->string nums)))\n  (nums->str (sort (str->nums numbers)\
    \ <)))\n", "  (sort (string-split numbers)\n        (\u03BB (a b)\n          (<\
    \ (string->number a)\n             (string->number b)))))\n", "  (let ([numbers\
    \ (string-split numbers #\\space)])\n    (apply string-append (sort numbers <\
    \ #:key string->number))))\n", "  (cond ((null? numbers)\n         \"\")\n   \
    \     ((null? (cdr numbers))\n         (car numbers))\n        (else\n       \
    \  (let ((sub (sort_numbers (cdr numbers))))\n           (if (< (str-&gt;number\
    \ (car numbers))\n                  (str-&gt;number (car sub)))\n            \
    \   (cons (car numbers) sub)\n               (cons (car sub) (cons (car numbers)\
    \ (cdr sub))))))))\n", "  (string-join (sort (map number->digit (string-split\
    \ numbers)) <) \" \"))\n", "  (sort-by zero? one? two? three? four? five? six?\
    \ seven? eight? nine? numbers))\n```\n\n```racket\n#lang racket\n", "  (cond [(empty?\
    \ numbers) \"\"]\n        [else\n         (let* ([number (first numbers)]\n  \
    \              [remaining (sort_numbers (rest numbers))])\n           (if (empty?\
    \ remaining)\n               number\n               (if (string<? number (first\
    \ remaining))\n                   (string-append number \" \" remaining)\n   \
    \                (string-append (first remaining) \" \" (string-append number\
    \ \" \" (rest remaining))))))]))", "  (if (string-length numbers)\n      (let*\
    \ ([sort-order (list 'one 'two 'three 'four 'five 'six 'seven 'eight 'nine 'zero)]\n\
    \             [numbers-split (string-split numbers #\\space)]\n             [numbers-sort\
    \ (sort numbers-split (lambda (a b) (< (index sort-order a) (index sort-order\
    \ b))))])\n        (string-join numbers-sort \" \"))\n      (string-join numbers\
    \ \" \")))\n", "  (cond\n    [(equal? numbers \"\") \"\"]\n    [else (string-append\
    \ (list-ref (list-ref (list \"zero\" \"one\" \"two\" \"three\" \"four\" \"five\"\
    \ \"six\" \"seven\" \"eight\" \"nine\")\n                                    \
    \         (cond\n                                               [(equal? (car\
    \ (string-split numbers)) \"zero\") 0]\n                                     \
    \          [(equal? (car (string-split numbers)) \"one\") 1]\n               \
    \                                [(equal? (car (string-split numbers)) \"two\"\
    ) 2]\n                                               [(equal? (car (string-split\
    \ numbers)) \"three\") 3]\n                                               [(equal?\
    \ (car (string-split numbers)) \"four\") 4]\n                                \
    \               [(equal? (car (string-split numbers)) \"five\") 5]\n         \
    \                                      [(equal? (car (string-split numbers)) \"\
    six\") 6]\n                                               [(equal? (car (string-split\
    \ numbers)) \"seven\") 7]\n                                               [(equal?\
    \ (car (string-split numbers)) \"eight\") 8]\n                               \
    \                [(equal? (car (string-split numbers)) \"nine\") 9]))\n      \
    \                         (sort_numbers (string-join (cdr (string-split numbers))\
    \ \" \"))))]))\n", "  (sort (string-split numbers) string<?))\n", "  (sort (string-split\
    \ numbers) string-&lt;?))\n", "  (string-join\n   (sort\n    (string-split numbers)\n\
    \    (lambda (n1 n2)\n      (string<? (word-to-numeral n1) (word-to-numeral n2))))\n\
    \   \" \"))\n", "  (string-join (sort (string-split numbers #\\space)\n      \
    \               #:key (lambda (numeral)\n                             (cond\n\
    \                               [(string=? numeral \"zero\") 0]\n            \
    \                   [(string=? numeral \"one\") 1]\n                         \
    \      [(string=? numeral \"two\") 2]\n                               [(string=?\
    \ numeral \"three\") 3]\n                               [(string=? numeral \"\
    four\") 4]\n                               [(string=? numeral \"five\") 5]\n \
    \                              [(string=? numeral \"six\") 6]\n              \
    \                 [(string=? numeral \"seven\") 7]\n                         \
    \      [(string=? numeral \"eight\") 8]\n                               [(string=?\
    \ numeral \"nine\") 9])))\n             #\\space))\n```\n\n### Tests\n\n```racket",
  "  (join (sort (split numbers #\\space) <) #\\space))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
