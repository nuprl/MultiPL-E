name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define roman-numerals '((1000 \"m\") (900 \"cm\") (500 \"d\") (400\
    \ \"cd\") (100 \"c\") (90 \"xc\") (50 \"l\") (40 \"xl\") (10 \"x\") (9 \"ix\"\
    ) (5 \"v\") (4 \"iv\") (1 \"i\")))\n  (define (convert-digit remainder)\n    (if\
    \ (zero? remainder)\n      \"\"\n      (let ((roman-pair (find-roman-pair number)))\n\
    \        (cons (cadr roman-pair) (convert-digit (- remainder (car roman-pair)))))))\n\
    \  (convert-digit number))\n", "  (cond\n    ((equal? number 1) \"i\")\n    ((equal?\
    \ number 2) \"ii\")\n    ((equal? number 3) \"iii\")\n    ((equal? number 4) \"\
    iv\")\n    ((equal? number 5) \"v\")\n    ((equal? number 6) \"vi\")\n    ((equal?\
    \ number 7) \"vii\")\n    ((equal? number 8) \"viii\")\n    ((equal? number 9)\
    \ \"ix\")\n    ((equal? number 10) \"x\")\n    ((equal? number 11) \"xi\")\n \
    \   ((equal? number 12) \"xii\")\n    ((equal? number 13) \"xiii\")\n    ((equal?\
    \ number 14) \"xiv\")\n    ((equal? number 15) \"xv\")\n    ((equal? number 16)\
    \ \"xvi\")\n    ((equal? number 17) \"xvii\")\n    ((equal? number 18) \"xviii\"\
    )\n    ((equal? number 19) \"xix\")\n    ((equal? number 20) \"xx\")\n    ((equal?\
    \ number 30) \"xxx\")\n    ((equal? number 40) \"xl\")\n    ((equal? number 50)\
    \ \"l\")\n    ((equal? number 60) \"lx\")\n    ((equal? number 70) \"lxx\")\n\
    \    ((equal? number 80) \"lxxx\")\n    ((equal? number 90) \"xc\")\n    ((equal?\
    \ number 100) \"c\")\n    ((equal? number 200) \"cc\")\n    ((equal? number 300)\
    \ \"ccc\")\n    ((equal? number 400) \"cd\")\n    ((equal? number 500) \"d\")\n\
    \    ((equal? number 600) \"dc\")\n    ((equal? number 700) \"dcc\")\n    ((equal?\
    \ number 800) \"dccc\")\n    ((equal? number 900) \"cm\")\n    ((equal? number\
    \ 1000) \"m\")\n    (else (send (int_to_mini_roman (/ number 10)) append\n   \
    \             (int_to_mini_roman (modulo number 10))))))\n", "  (define (mapping)\n\
    \    (list\n     (list 1    \"i\")\n     (list 5    \"v\")\n     (list 10   \"\
    x\")\n     (list 50   \"l\")\n     (list 100  \"c\")\n     (list 500  \"d\")\n\
    \     (list 1000 \"m\")))\n  (define (digit-to-symbol-str number mapping)\n  \
    \  (cond\n      ((< number 4) (string-append (list-ref (mapping 1) 1) (make-string\
    \ number #\\i)))\n      ((= number 4) (string-append (list-ref (mapping 1) 1)\
    \ (list-ref (mapping 5) 1)))\n      ((< number 9) (string-append (list-ref (mapping\
    \ 5) 1) (make-string (- number 5) #\\i)))\n      ((= number 9) (string-append\
    \ (list-ref (mapping 1) 1) (list-ref (mapping 10) 1)))))\n  (define (ten-digit-to-symbol-str\
    \ number mapping)\n    (cond\n      ((< number 40) (string-append (list-ref (mapping\
    \ 10) 1) (make-string (/ number 10) #\\x)))\n      ((= number 40) (string-append\
    \ (list-ref (mapping 10) 1) (list-ref (mapping 50) 1)))\n      ((< number 90)\
    \ (string-append (list-ref (mapping 50) 1) (make-string (/ (- number 50) 10) #\\\
    x)))\n      ((= number 90) (string-append (list-ref (mapping 10) 1) (list-ref\
    \ (mapping 100) 1)))))\n  (define (hundred-digit-to-symbol-str number mapping)\n\
    \    (cond\n      ((< number 400) (string-append (list-ref (mapping 100) 1) (make-string\
    \ (/ number 100) #\\c)))\n      ((= number 400) (string-append (list-ref (mapping\
    \ 100) 1) (list-ref (mapping 500) 1)))\n      ((< number 900) (string-append (list-ref\
    \ (mapping 500) 1) (make-string (/ (- number 500) 100) #\\", "  (define (int_to_mini_roman-helper\
    \ number result)\n    (if (zero? number)\n        result\n        (if (> number\
    \ 1000)\n            (int_to_mini_roman-helper (sub1 number) (string-append result\
    \ \"m\"))\n            (cond ((>= number 900)\n                   (int_to_mini_roman-helper\
    \ (- number 900) (string-append result \"cm\")))\n                  ((>= number\
    \ 500)\n                   (int_to_mini_roman-helper (- number 500) (string-append\
    \ result \"d\")))\n                  ((>= number 400)\n                   (int_to_mini_roman-helper\
    \ (- number 400) (string-append result \"cd\")))\n                  ((>= number\
    \ 100)\n                   (int_to_mini_roman-helper (- number 100) (string-append\
    \ result \"c\")))\n                  ((>= number 90)\n                   (int_to_mini_roman-helper\
    \ (- number 90) (string-append result \"xc\")))\n                  ((>= number\
    \ 50)\n                   (int_to_mini_roman-helper (- number 50) (string-append\
    \ result \"l\")))\n                  ((>= number 40)\n                   (int_to_mini_roman-helper\
    \ (- number 40) (string-append result \"xl\")))\n                  ((>= number\
    \ 10)\n                   (int_to_mini_roman-helper (- number 10) (string-append\
    \ result \"x\")))\n                  ((>= number 9)\n                   (int_to_mini_roman-helper\
    \ (- number 9) (string-append result \"ix\")))\n                  ((>= number\
    \ 5)\n                   (int_to_mini_roman-helper (- number 5) (string-append\
    \ result \"v\")))\n                  ((>= number 4)\n                   (int_to_mini_roman-helper\
    \ (- number 4) (string-append result \"iv\")))\n                  ((>= number\
    \ 1)\n                   (int_to_mini_roman-helper (- number 1) (string-append\
    \ result \"i\")))))))\n  (if (<= number 1000)\n      (int_to_mini_roman-helper\
    \ number \"\")\n      \"\"))\n", "  (define (int_to_mini_roman-helper n)\n   \
    \ (cond ((= n 0) \"\")\n          ((< n 4) (string-append (string (* 'i' n)) (int_to_mini_roman-helper\
    \ (- n n))))\n          ((= n 4) \"iv\")\n          ((< n 9) (string-append \"\
    v\" (int_to_mini_roman-helper (- n 5))))\n          ((= n 9) \"ix\")\n       \
    \   ((< n 40) (string-append (string (* 'x' (/ n 10))) (int_to_mini_roman-helper\
    \ (- n (* 10 (/ n 10))))))\n          ((< n 50) (string-append \"xl\" (int_to_mini_roman-helper\
    \ (- n 40))))\n          ((< n 90) (string-append \"l\" (int_to_mini_roman-helper\
    \ (- n 50))))\n          ((< n 100) (string-append \"xc\" (int_to_mini_roman-helper\
    \ (- n 90))))\n          ((< n 400) (string-append (string (* 'c' (/ n 100)))\
    \ (int_to_mini_roman-helper (- n (* 100 (/ n 100))))))\n          ((< n 500) (string-append\
    \ \"cd\" (int_to_mini_roman-helper (- n 400))))\n          ((< n 900) (string-append\
    \ \"d\" (int_to_mini_roman-helper (- n 500))))\n          ((< n 1000) (string-append\
    \ \"cm\" (int_to_mini_roman-helper (- n 900))))\n          ((= n 1000) \"m\")))\n\
    \  (int_to_mini_roman-helper number))\n", "  (cond\n    [(= number 1000)\n   \
    \  \"m\"]\n    [(= number 900)\n     \"cm\"]\n    [(= number 500)\n     \"d\"\
    ]\n    [(= number 400)\n     \"cd\"]\n    [(= number 100)\n     \"c\"]\n    [(=\
    \ number 90)\n     \"xc\"]\n    [(= number 50)\n     \"l\"]\n    [(= number 40)\n\
    \     \"xl\"]\n    [(= number 10)\n     \"x\"]\n    [(= number 9)\n     \"ix\"\
    ]\n    [(= number 5)\n     \"v\"]\n    [(= number 4)\n     \"iv\"]\n    [(= number\
    \ 1)\n     \"i\"]\n    [else\n     (string-append (int_to_mini_roman (quotient\
    \ number 10)) (int_to_mini_roman (remainder number 10)))]))\n", "  (string-join\n\
    \   (map symbol->string\n        (reverse\n         (let loop ((number number)\n\
    \                    (accum (list)))\n           (cond\n             ((= 0 number)\
    \ accum)\n             ((= 1000 number) (cons 'm accum))\n             ((= 900\
    \ number) (cons 'm (cons 'c accum)))\n             ((= 500 number) (cons 'd accum))\n\
    \             ((= 400 number) (cons 'd (cons 'c accum)))\n             ((= 100\
    \ number) (cons 'c accum))\n             ((= 90 number) (cons 'x (cons 'c accum)))\n\
    \             ((= 50 number) (cons 'l accum))\n             ((= 40 number) (cons\
    \ 'x (cons 'l accum)))\n             ((= 10 number) (cons 'x accum))\n       \
    \      ((= 9 number) (cons 'i (cons 'x accum)))\n             ((= 5 number) (cons\
    \ 'v accum))\n             ((= 4 number) (cons 'i (cons 'v accum)))\n        \
    \     ((= 1 number) (cons 'i accum))\n             (else (loop (remainder number\
    \ 100)\n                         (cons 'c accum))))))))))\n```\n\n```scheme\n\
    #lang racket\n", "    (define (digits n)\n        (if (<= n 0) empty\n       \
    \     (cons (modulo n 10) (digits (quotient n 10)))))\n    (define (ones n)\n\
    \        (define to_char\n            (cond [(= n 0) #\\_]\n                 \
    \ [(= n 1) #\\i]\n                  [(= n 2) #\\ii]\n                  [(= n 3)\
    \ #\\iii]\n                  [(= n 4) #\\iv]\n                  [(= n 5) #\\v]\n\
    \                  [(= n 6) #\\vi]\n                  [(= n 7) #\\vii]\n     \
    \             [(= n 8) #\\viii]\n                  [(= n 9) #\\ix]))\n       \
    \ (string->list (string to_char)))\n    (define (tens n)\n        (define to_char\n\
    \            (cond [(= n 0) #\\_]\n                  [(= n 1) #\\x]\n        \
    \          [(= n 2) #\\xx]\n                  [(= n 3) #\\xxx]\n             \
    \     [(= n 4) #\\xl]\n                  [(= n 5) #\\l]\n                  [(=\
    \ n 6) #\\lx]\n                  [(= n 7) #\\lxx]\n                  [(= n 8)\
    \ #\\lxxx]\n                  [(= n 9) #\\xc]))\n        (string->list (string\
    \ to_char)))\n    (define (hundreds n)\n        (define to_char\n            (cond\
    \ [(= n 0) #\\_]\n                  [(= n 1) #\\c]\n                  [(= n 2)\
    \ #\\cc]\n                  [(= n 3) #\\ccc]\n                  [(= n 4) #\\cd]\n\
    \                  [(= n 5) #\\d]\n                  [(= n 6) #\\dc]\n       \
    \           [(= n 7) #\\dcc]\n                  [(= n 8) #\\dccc]\n          \
    \        [(= n 9) #\\cm]))\n        (string->list (string to_char)))\n    (define\
    \ (thousands n)\n        (define to_char\n            (cond [(= n 0) #\\_]\n \
    \                 [(= n 1) #\\m]", "  (begin\n    (define (int_to_mini_roman_helper\
    \ num n_m n_c n_x n_i)\n      (if (= num 1000)\n          \"m\"\n          (if\
    \ (= num 100)\n              (if (zero? n_c)\n                  \"c\"\n      \
    \            (string-append \"c\" (int_to_mini_roman_helper 0 (- n_c 1) n_x n_i)))\n\
    \              (if (= num 10)\n                  (if (zero? n_x)\n           \
    \           \"x\"\n                      (string-append \"x\" (int_to_mini_roman_helper\
    \ 0 n_m (- n_x 1) n_i)))\n                  (if (= num 1)\n                  \
    \    (if (zero? n_i)\n                          \"i\"\n                      \
    \    (string-append \"i\" (int_to_mini_roman_helper 0 n_m n_c (- n_i 1))))\n \
    \                     (if (< num 10)\n                          (if (= num 9)\n\
    \                              (string-append \"i\" \"x\")\n                 \
    \             (if (= num 5)\n                                  \"v\"\n       \
    \                           (if (= num 4)\n                                  \
    \    (string-append \"i\" \"v\")\n                                      (string-append\
    \ (int_to_mini_roman_helper (+ num 5) n_m n_c n_x) \"v\"))))\n               \
    \           (if (< num 100)\n                              (if (= num 90)\n  \
    \                                (string-append \"x\" \"c\")\n               \
    \                   (if (= num 50)\n                                      \"l\"\
    \n                                      (if (= num 40)\n                     \
    \                     (string-append \"x\" \"l\")\n                          \
    \                (string-append (int_to_mini_roman_helper (+ num 50) n_m n_c n_x)\
    \ \"l\"))))\n                              (if (< num 1000)\n                \
    \                  (if (= num 900)\n                                      (string-append\
    \ \"c\" \"m\")\n                                      (if (= num 500)\n      \
    \                                    \"d\"\n                                 \
    \         (if (= num 400)\n                                              (string-append\
    \ \"c\" \"d\")\n                                              (string-append (int_",
  "  (let loop ((number number)\n             (converted \"\"))\n    (cond\n     \
    \ ((>= number 1000) (loop (- number 1000) (string-append converted \"m\")))\n\
    \      ((>= number 900) (loop (- number 900) (string-append converted \"cm\")))\n\
    \      ((>= number 500) (loop (- number 500) (string-append converted \"d\")))\n\
    \      ((>= number 400) (loop (- number 400) (string-append converted \"cd\")))\n\
    \      ((>= number 100) (loop (- number 100) (string-append converted \"c\")))\n\
    \      ((>= number 90) (loop (- number 90) (string-append converted \"xc\")))\n\
    \      ((>= number 50) (loop (- number 50) (string-append converted \"l\")))\n\
    \      ((>= number 40) (loop (- number 40) (string-append converted \"xl\")))\n\
    \      ((>= number 10) (loop (- number 10) (string-append converted \"x\")))\n\
    \      ((>= number 9) (loop (- number 9) (string-append converted \"ix\")))\n\
    \      ((>= number 5) (loop (- number 5) (string-append converted \"v\")))\n \
    \     ((>= number 4) (loop (- number 4) (string-append converted \"iv\")))\n \
    \     ((>= number 1) (loop (- number 1) (string-append converted \"i\")))\n  \
    \    (else (string-downcase converted)))))", "  (cond ((= number 1000) \"m\")\n\
    \        ((<= number 0) \"\")\n        ((and (>= number 900) (<= number 999))\n\
    \         (string-append \"cm\" (int_to_mini_roman (- number 900))))\n       \
    \ ((and (>= number 500) (<= number 899))\n         (string-append \"d\" (int_to_mini_roman\
    \ (- number 500))))\n        ((and (>= number 400) (<= number 499))\n        \
    \ (string-append \"cd\" (int_to_mini_roman (- number 400))))\n        ((and (>=\
    \ number 100) (<= number 399))\n         (string-append \"c\" (int_to_mini_roman\
    \ (- number 100))))\n        ((and (>= number 90) (<= number 99))\n         (string-append\
    \ \"xc\" (int_to_mini_roman (- number 90))))\n        ((and (>= number 50) (<=\
    \ number 89))\n         (string-append \"l\" (int_to_mini_roman (- number 50))))\n\
    \        ((and (>= number 40) (<= number 49))\n         (string-append \"xl\"\
    \ (int_to_mini_roman (- number 40))))\n        ((and (>= number 10) (<= number\
    \ 39))\n         (string-append \"x\" (int_to_mini_roman (- number 10))))\n  \
    \      ((= number 9) \"ix\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 7) \"vii\")\n        ((= number 6) \"vi\")\n        ((= number 5) \"v\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 2) \"ii\")\n        ((= number 1) \"i\")))\n```", "  (let* ([rnums '((\"0\"\
    \ . \"0\")\n                  (\"1\" . \"i\")\n                  (\"2\" . \"ii\"\
    )\n                  (\"3\" . \"iii\")\n                  (\"4\" . \"iv\")\n \
    \                 (\"5\" . \"v\")\n                  (\"6\" . \"vi\")\n      \
    \            (\"7\" . \"vii\")\n                  (\"8\" . \"viii\")\n       \
    \           (\"9\" . \"ix\"))]\n         [rnums-1000 '((\"0\" . \"0\")\n     \
    \                  (\"1\" . \"x\")\n                       (\"2\" . \"xx\")\n\
    \                       (\"3\" . \"xxx\")\n                       (\"4\" . \"\
    xl\")\n                       (\"5\" . \"l\")\n                       (\"6\" .\
    \ \"lx\")\n                       (\"7\" . \"lxx\")\n                       (\"\
    8\" . \"lxxx\")\n                       (\"9\" . \"xc\"))]\n         [rnums-100\
    \ '((\"0\" . \"0\")\n                      (\"1\" . \"c\")\n                 \
    \     (\"2\" . \"cc\")\n                      (\"3\" . \"ccc\")\n            \
    \          (\"4\" . \"cd\")\n                      (\"5\" . \"d\")\n         \
    \             (\"6\" . \"dc\")\n                      (\"7\" . \"dcc\")\n    \
    \                  (\"8\" . \"dccc\")\n                      (\"9\" . \"cm\"))]\n\
    \         [rnums-10 '((\"0\" . \"0\")\n                     (\"1\" . \"m\")\n\
    \                     (\"2\" . \"mm\")\n                     (\"3\" . \"mmm\"\
    ))]\n         [number-string (number->string number)]\n         [number-reverse\
    \ (string-reverse number-string)]\n         [number-char-list (string->list number-reverse)]\n\
    \         [number-char-length (length number-char-list)]\n         [number-split\
    \ (split-string number-string \"\" #rx\"[.]\")]\n         [ones (list-ref number-split\
    \ 0)]\n         [tens (list-ref number-split 1)]\n         [hundreds (list-ref\
    \ number-split 2)]\n         [thousands (list-ref number-split 3)])\n    (cond\
    \ [(string=? thousands \"0\")\n           (cond [(string=? hundreds \"0\")\n \
    \                 (cond [(string=? tens", "  (cond\n    [(<= number 0) \"\"]\n\
    \    [(<= number 1000) (string-append (int_to_mini_roman (quotient number 1000))\
    \ (generate-roman (/ number 1000) \"M\"))]\n    [(<= number 900) (string-append\
    \ (int_to_mini_roman (quotient number 100)) (generate-roman (/ number 100) \"\
    C\"))]\n    [(<= number 500) (string-append (int_to_mini_roman (quotient number\
    \ 100)) (generate-roman (/ number 100) \"D\"))]\n    [(<= number 400) (string-append\
    \ (int_to_mini_roman (quotient number 100)) (generate-roman (/ number 100) \"\
    C\"))]\n    [(<= number 100) (string-append (int_to_mini_roman (quotient number\
    \ 100)) (generate-roman (/ number 100) \"C\"))]\n    [(<= number 90) (string-append\
    \ (int_to_mini_roman (quotient number 10)) (generate-roman (/ number 10) \"X\"\
    ))]\n    [(<= number 50) (string-append (int_to_mini_roman (quotient number 10))\
    \ (generate-roman (/ number 10) \"L\"))]\n    [(<= number 40) (string-append (int_to_mini_roman\
    \ (quotient number 10)) (generate-roman (/ number 10) \"X\"))]\n    [(<= number\
    \ 10) (string-append (int_to_mini_roman (quotient number 10)) (generate-roman\
    \ (/ number 10) \"X\"))]\n    [(<= number 9) (string-append (int_to_mini_roman\
    \ (quotient number 1)) (generate-roman (/ number 1) \"I\"))]\n    [(<= number\
    \ 5) (string-append (int_to_mini_roman (quotient number 1)) (generate-roman (/\
    \ number 1) \"V\"))]\n    [(<= number 4) (string-append (int_to_mini_roman (quotient\
    \ number 1)) (generate-roman (/ number 1) \"I\"))]\n    [(<= number 1) (string-append\
    \ (int_to_mini", "  (cond\n    [(< number 1) (error \"Input must be a positive\
    \ integer.\")])\n  (cond\n    [(= number 1000) \"m\"]\n    [(>= number 500) (append\
    \ (int_to_mini_roman (- number 500)) \"d\")]\n    [(>= number 100) (append (int_to_mini_roman\
    \ (- number 100)) \"c\")]\n    [(>= number 50) (append (int_to_mini_roman (- number\
    \ 50)) \"l\")]\n    [(>= number 10) (append (int_to_mini_roman (- number 10))\
    \ \"x\")]\n    [(>= number 5) (append (int_to_mini_roman (- number 5)) \"v\")]\n\
    \    [(>= number 1) (append (int_to_mini_roman (- number 1)) \"i\")]))\n", " \
    \ (define (auxiliar numeral m d c)\n    (cond\n      [(= numeral 0) \"\"]\n  \
    \    [(= numeral 1) (string-append m (auxiliar (- numeral 1) m d c))]\n      [(=\
    \ numeral 2) (string-append m (string-append m (auxiliar (- numeral 2) m d c)))]\n\
    \      [(= numeral 3) (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 3) m d c))))]\n      [(= numeral 4) (string-append m (string-append\
    \ d (auxiliar (- numeral 4) m d c)))]\n      [(= numeral 5) (string-append d (auxiliar\
    \ (- numeral 5) m d c))]\n      [(= numeral 6) (string-append d (string-append\
    \ m (auxiliar (- numeral 6) m d c)))]\n      [(= numeral 7) (string-append d (string-append\
    \ m (string-append m (auxiliar (- numeral 7) m d c))))]\n      [(= numeral 8)\
    \ (string-append d (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 8) m d c)))))]\n      [(= numeral 9) (string-append m (string-append\
    \ c (auxiliar (- numeral 9) m d c)))]\n      [(= numeral 10) (string-append c\
    \ (auxiliar (- numeral 10) m d c))]\n      [(= numeral 11) (string-append c (string-append\
    \ m (auxiliar (- numeral 11) m d c)))]\n      [(= numeral 12) (string-append c\
    \ (string-append m (string-append m (auxiliar (- numeral 12) m d c))))]\n    \
    \  [(= numeral 13) (string-append c (string-append m (string-append m (string-append\
    \ m (auxiliar (- numeral 13) m d c)))))]\n      [(= numeral 14) (string-append\
    \ c (string-append m (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 14) m d c))))))]\n      [(= numeral 15) (string-append c (string",
  "  ; YOUR CODE HERE\n  )\n\n```\n\n```racket\n#lang racket\n", "  (cond\n    [(=\
    \ number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n  \
    \  [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n\
    \    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"\
    ix\"]\n    [(= number 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number 30)\
    \ \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number\
    \ 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n   \
    \ [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"\
    ]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500)\
    \ \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number\
    \ 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n \
    \   [else (\n      (cond\n        [(> number 1000) (error \"Number too large\"\
    )]\n        [(< number 1) (error \"Number too small\")])\n      (define (splitter\
    \ number)\n        (cond\n          [(< number 1000) (list (/ number 100) (* 10\
    \ (- number (* 100 (/ number 100)))) (/ number 10) (- number (* (/ number 10)\
    \ 10)))]\n          [(< number 100) (list (/ number 10) (- number (* (/ number\
    \ 10) 10)) (/ number 1) (- number (* (/ number 1) 1)))]\n          [(< number\
    \ 10) (list (/ number 1) (- number (* (/ number 1) 1)))]))\n      (define (romans\
    \ group)\n        (cond\n          [(= group 0) \"\"]\n          [(= group 1)\
    \ \"c\"]\n          [(= group 2) \"cc\"]\n          [(= group 3) \"ccc\"]\n  \
    \        [(= group 4) \"cd\"]\n          [(= group 5", "  (cond\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(=\
    \ number 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(= number 90) \"xc\"]\n\
    \    [(= number 50) \"l\"]\n    [(= number 40) \"xl\"]\n    [(= number 10) \"\
    x\"]\n    [(= number 9) \"ix\"]\n    [(= number 5) \"v\"]\n    [(= number 4) \"\
    iv\"]\n    [(= number 1) \"i\"]\n    [else (string-append (int_to_mini_roman (/\
    \ number 10)) (int_to_mini_roman (remainder number 10)))]))\n", "  (define (int_to_mini_roman-iter\
    \ number numeral)\n    (cond ((< number 4) (string-append (string-join (build-list\
    \ number \"i\") \"\") numeral))\n          ((< number 5) (string-append \"iv\"\
    \ numeral))\n          ((< number 9) (string-append (string-join (build-list (-\
    \ number 5) \"i\") \"\") \"v\" numeral))\n          ((< number 10) (string-append\
    \ \"ix\" numeral))\n          ((< number 40) (int_to_mini_roman-iter (- number\
    \ 10) (string-append \"x\" numeral)))\n          ((< number 50) (string-append\
    \ \"xl\" numeral))\n          ((< number 90) (int_to_mini_roman-iter (- number\
    \ 50) (string-append \"l\" numeral)))\n          ((< number 100) (string-append\
    \ \"xc\" numeral))\n          ((< number 400) (int_to_mini_roman-iter (- number\
    \ 100) (string-append \"c\" numeral)))\n          ((< number 500) (string-append\
    \ \"cd\" numeral))\n          ((< number 900) (int_to_mini_roman-iter (- number\
    \ 500) (string-append \"d\" numeral)))\n          ((< number 1000) (string-append\
    \ \"cm\" numeral))\n          (else (error \"number must be <= 1000\"))))\n  (int_to_mini_roman-iter\
    \ number \"\"))\n", "  \"See http://mathworld.wolfram.com/RomanNumerals.html\"\
    \n  (define (int_to_mini_roman-iter number digits)\n    (cond [(>= number 1000)\
    \ (cons 'm (int_to_mini_roman-iter (- number 1000) digits))]\n          [(>= number\
    \ 500) (cons 'd (int_to_mini_roman-iter (- number 500) digits))]\n          [(>=\
    \ number 100) (cons 'c (int_to_mini_roman-iter (- number 100) digits))]\n    \
    \      [(>= number 50) (cons 'l (int_to_mini_roman-iter (- number 50) digits))]\n\
    \          [(>= number 10) (cons 'x (int_to_mini_roman-iter (- number 10) digits))]\n\
    \          [(>= number 5) (cons 'v (int_to_mini_roman-iter (- number 5) digits))]\n\
    \          [(>= number 1) (cons 'i (int_to_mini_roman-iter (- number 1) digits))]\n\
    \          [else digits]))\n  (list->string (int_to_mini_roman-iter number '())))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
