name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define roman-numerals '((1000 \"m\") (900 \"cm\") (500 \"d\") (400\
    \ \"cd\") (100 \"c\") (90 \"xc\") (50 \"l\") (40 \"xl\") (10 \"x\") (9 \"ix\"\
    ) (5 \"v\") (4 \"iv\") (1 \"i\")))\n  (define (convert-digit remainder)\n    (if\
    \ (zero? remainder)\n      \"\"\n      (let ((roman-pair (find-roman-pair number)))\n\
    \        (cons (cadr roman-pair) (convert-digit (- remainder (car roman-pair)))))))\n\
    \  (convert-digit number))\n", "  (cond\n    ((equal? number 1) \"i\")\n    ((equal?\
    \ number 2) \"ii\")\n    ((equal? number 3) \"iii\")\n    ((equal? number 4) \"\
    iv\")\n    ((equal? number 5) \"v\")\n    ((equal? number 6) \"vi\")\n    ((equal?\
    \ number 7) \"vii\")\n    ((equal? number 8) \"viii\")\n    ((equal? number 9)\
    \ \"ix\")\n    ((equal? number 10) \"x\")\n    ((equal? number 11) \"xi\")\n \
    \   ((equal? number 12) \"xii\")\n    ((equal? number 13) \"xiii\")\n    ((equal?\
    \ number 14) \"xiv\")\n    ((equal? number 15) \"xv\")\n    ((equal? number 16)\
    \ \"xvi\")\n    ((equal? number 17) \"xvii\")\n    ((equal? number 18) \"xviii\"\
    )\n    ((equal? number 19) \"xix\")\n    ((equal? number 20) \"xx\")\n    ((equal?\
    \ number 30) \"xxx\")\n    ((equal? number 40) \"xl\")\n    ((equal? number 50)\
    \ \"l\")\n    ((equal? number 60) \"lx\")\n    ((equal? number 70) \"lxx\")\n\
    \    ((equal? number 80) \"lxxx\")\n    ((equal? number 90) \"xc\")\n    ((equal?\
    \ number 100) \"c\")\n    ((equal? number 200) \"cc\")\n    ((equal? number 300)\
    \ \"ccc\")\n    ((equal? number 400) \"cd\")\n    ((equal? number 500) \"d\")\n\
    \    ((equal? number 600) \"dc\")\n    ((equal? number 700) \"dcc\")\n    ((equal?\
    \ number 800) \"dccc\")\n    ((equal? number 900) \"cm\")\n    ((equal? number\
    \ 1000) \"m\")\n    (else (send (int_to_mini_roman (/ number 10)) append\n   \
    \             (int_to_mini_roman (modulo number 10))))))\n", "  (define (mapping)\n\
    \    (list\n     (list 1    \"i\")\n     (list 5    \"v\")\n     (list 10   \"\
    x\")\n     (list 50   \"l\")\n     (list 100  \"c\")\n     (list 500  \"d\")\n\
    \     (list 1000 \"m\")))\n  (define (digit-to-symbol-str number mapping)\n  \
    \  (cond\n      ((< number 4) (string-append (list-ref (mapping 1) 1) (make-string\
    \ number #\\i)))\n      ((= number 4) (string-append (list-ref (mapping 1) 1)\
    \ (list-ref (mapping 5) 1)))\n      ((< number 9) (string-append (list-ref (mapping\
    \ 5) 1) (make-string (- number 5) #\\i)))\n      ((= number 9) (string-append\
    \ (list-ref (mapping 1) 1) (list-ref (mapping 10) 1)))))\n  (define (ten-digit-to-symbol-str\
    \ number mapping)\n    (cond\n      ((< number 40) (string-append (list-ref (mapping\
    \ 10) 1) (make-string (/ number 10) #\\x)))\n      ((= number 40) (string-append\
    \ (list-ref (mapping 10) 1) (list-ref (mapping 50) 1)))\n      ((< number 90)\
    \ (string-append (list-ref (mapping 50) 1) (make-string (/ (- number 50) 10) #\\\
    x)))\n      ((= number 90) (string-append (list-ref (mapping 10) 1) (list-ref\
    \ (mapping 100) 1)))))\n  (define (hundred-digit-to-symbol-str number mapping)\n\
    \    (cond\n      ((< number 400) (string-append (list-ref (mapping 100) 1) (make-string\
    \ (/ number 100) #\\c)))\n      ((= number 400) (string-append (list-ref (mapping\
    \ 100) 1) (list-ref (mapping 500) 1)))\n      ((< number 900) (string-append (list-ref\
    \ (mapping 500) 1) (make-string (/ (- number 500) 100) #\\", "  (define (int_to_mini_roman-helper\
    \ number result)\n    (if (zero? number)\n        result\n        (if (> number\
    \ 1000)\n            (int_to_mini_roman-helper (sub1 number) (string-append result\
    \ \"m\"))\n            (cond ((>= number 900)\n                   (int_to_mini_roman-helper\
    \ (- number 900) (string-append result \"cm\")))\n                  ((>= number\
    \ 500)\n                   (int_to_mini_roman-helper (- number 500) (string-append\
    \ result \"d\")))\n                  ((>= number 400)\n                   (int_to_mini_roman-helper\
    \ (- number 400) (string-append result \"cd\")))\n                  ((>= number\
    \ 100)\n                   (int_to_mini_roman-helper (- number 100) (string-append\
    \ result \"c\")))\n                  ((>= number 90)\n                   (int_to_mini_roman-helper\
    \ (- number 90) (string-append result \"xc\")))\n                  ((>= number\
    \ 50)\n                   (int_to_mini_roman-helper (- number 50) (string-append\
    \ result \"l\")))\n                  ((>= number 40)\n                   (int_to_mini_roman-helper\
    \ (- number 40) (string-append result \"xl\")))\n                  ((>= number\
    \ 10)\n                   (int_to_mini_roman-helper (- number 10) (string-append\
    \ result \"x\")))\n                  ((>= number 9)\n                   (int_to_mini_roman-helper\
    \ (- number 9) (string-append result \"ix\")))\n                  ((>= number\
    \ 5)\n                   (int_to_mini_roman-helper (- number 5) (string-append\
    \ result \"v\")))\n                  ((>= number 4)\n                   (int_to_mini_roman-helper\
    \ (- number 4) (string-append result \"iv\")))\n                  ((>= number\
    \ 1)\n                   (int_to_mini_roman-helper (- number 1) (string-append\
    \ result \"i\")))))))\n  (if (<= number 1000)\n      (int_to_mini_roman-helper\
    \ number \"\")\n      \"\"))\n", "  (define (int_to_mini_roman-helper n)\n   \
    \ (cond ((= n 0) \"\")\n          ((< n 4) (string-append (string (* 'i' n)) (int_to_mini_roman-helper\
    \ (- n n))))\n          ((= n 4) \"iv\")\n          ((< n 9) (string-append \"\
    v\" (int_to_mini_roman-helper (- n 5))))\n          ((= n 9) \"ix\")\n       \
    \   ((< n 40) (string-append (string (* 'x' (/ n 10))) (int_to_mini_roman-helper\
    \ (- n (* 10 (/ n 10))))))\n          ((< n 50) (string-append \"xl\" (int_to_mini_roman-helper\
    \ (- n 40))))\n          ((< n 90) (string-append \"l\" (int_to_mini_roman-helper\
    \ (- n 50))))\n          ((< n 100) (string-append \"xc\" (int_to_mini_roman-helper\
    \ (- n 90))))\n          ((< n 400) (string-append (string (* 'c' (/ n 100)))\
    \ (int_to_mini_roman-helper (- n (* 100 (/ n 100))))))\n          ((< n 500) (string-append\
    \ \"cd\" (int_to_mini_roman-helper (- n 400))))\n          ((< n 900) (string-append\
    \ \"d\" (int_to_mini_roman-helper (- n 500))))\n          ((< n 1000) (string-append\
    \ \"cm\" (int_to_mini_roman-helper (- n 900))))\n          ((= n 1000) \"m\")))\n\
    \  (int_to_mini_roman-helper number))\n", "  (cond\n    [(= number 1000)\n   \
    \  \"m\"]\n    [(= number 900)\n     \"cm\"]\n    [(= number 500)\n     \"d\"\
    ]\n    [(= number 400)\n     \"cd\"]\n    [(= number 100)\n     \"c\"]\n    [(=\
    \ number 90)\n     \"xc\"]\n    [(= number 50)\n     \"l\"]\n    [(= number 40)\n\
    \     \"xl\"]\n    [(= number 10)\n     \"x\"]\n    [(= number 9)\n     \"ix\"\
    ]\n    [(= number 5)\n     \"v\"]\n    [(= number 4)\n     \"iv\"]\n    [(= number\
    \ 1)\n     \"i\"]\n    [else\n     (string-append (int_to_mini_roman (quotient\
    \ number 10)) (int_to_mini_roman (remainder number 10)))]))\n", "  (string-join\n\
    \   (map symbol->string\n        (reverse\n         (let loop ((number number)\n\
    \                    (accum (list)))\n           (cond\n             ((= 0 number)\
    \ accum)\n             ((= 1000 number) (cons 'm accum))\n             ((= 900\
    \ number) (cons 'm (cons 'c accum)))\n             ((= 500 number) (cons 'd accum))\n\
    \             ((= 400 number) (cons 'd (cons 'c accum)))\n             ((= 100\
    \ number) (cons 'c accum))\n             ((= 90 number) (cons 'x (cons 'c accum)))\n\
    \             ((= 50 number) (cons 'l accum))\n             ((= 40 number) (cons\
    \ 'x (cons 'l accum)))\n             ((= 10 number) (cons 'x accum))\n       \
    \      ((= 9 number) (cons 'i (cons 'x accum)))\n             ((= 5 number) (cons\
    \ 'v accum))\n             ((= 4 number) (cons 'i (cons 'v accum)))\n        \
    \     ((= 1 number) (cons 'i accum))\n             (else (loop (remainder number\
    \ 100)\n                         (cons 'c accum))))))))))\n```\n\n```scheme\n\
    #lang racket\n", "    (define (digits n)\n        (if (<= n 0) empty\n       \
    \     (cons (modulo n 10) (digits (quotient n 10)))))\n    (define (ones n)\n\
    \        (define to_char\n            (cond [(= n 0) #\\_]\n                 \
    \ [(= n 1) #\\i]\n                  [(= n 2) #\\ii]\n                  [(= n 3)\
    \ #\\iii]\n                  [(= n 4) #\\iv]\n                  [(= n 5) #\\v]\n\
    \                  [(= n 6) #\\vi]\n                  [(= n 7) #\\vii]\n     \
    \             [(= n 8) #\\viii]\n                  [(= n 9) #\\ix]))\n       \
    \ (string->list (string to_char)))\n    (define (tens n)\n        (define to_char\n\
    \            (cond [(= n 0) #\\_]\n                  [(= n 1) #\\x]\n        \
    \          [(= n 2) #\\xx]\n                  [(= n 3) #\\xxx]\n             \
    \     [(= n 4) #\\xl]\n                  [(= n 5) #\\l]\n                  [(=\
    \ n 6) #\\lx]\n                  [(= n 7) #\\lxx]\n                  [(= n 8)\
    \ #\\lxxx]\n                  [(= n 9) #\\xc]))\n        (string->list (string\
    \ to_char)))\n    (define (hundreds n)\n        (define to_char\n            (cond\
    \ [(= n 0) #\\_]\n                  [(= n 1) #\\c]\n                  [(= n 2)\
    \ #\\cc]\n                  [(= n 3) #\\ccc]\n                  [(= n 4) #\\cd]\n\
    \                  [(= n 5) #\\d]\n                  [(= n 6) #\\dc]\n       \
    \           [(= n 7) #\\dcc]\n                  [(= n 8) #\\dccc]\n          \
    \        [(= n 9) #\\cm]))\n        (string->list (string to_char)))\n    (define\
    \ (thousands n)\n        (define to_char\n            (cond [(= n 0) #\\_]\n \
    \                 [(= n 1) #\\m]", "  (begin\n    (define (int_to_mini_roman_helper\
    \ num n_m n_c n_x n_i)\n      (if (= num 1000)\n          \"m\"\n          (if\
    \ (= num 100)\n              (if (zero? n_c)\n                  \"c\"\n      \
    \            (string-append \"c\" (int_to_mini_roman_helper 0 (- n_c 1) n_x n_i)))\n\
    \              (if (= num 10)\n                  (if (zero? n_x)\n           \
    \           \"x\"\n                      (string-append \"x\" (int_to_mini_roman_helper\
    \ 0 n_m (- n_x 1) n_i)))\n                  (if (= num 1)\n                  \
    \    (if (zero? n_i)\n                          \"i\"\n                      \
    \    (string-append \"i\" (int_to_mini_roman_helper 0 n_m n_c (- n_i 1))))\n \
    \                     (if (< num 10)\n                          (if (= num 9)\n\
    \                              (string-append \"i\" \"x\")\n                 \
    \             (if (= num 5)\n                                  \"v\"\n       \
    \                           (if (= num 4)\n                                  \
    \    (string-append \"i\" \"v\")\n                                      (string-append\
    \ (int_to_mini_roman_helper (+ num 5) n_m n_c n_x) \"v\"))))\n               \
    \           (if (< num 100)\n                              (if (= num 90)\n  \
    \                                (string-append \"x\" \"c\")\n               \
    \                   (if (= num 50)\n                                      \"l\"\
    \n                                      (if (= num 40)\n                     \
    \                     (string-append \"x\" \"l\")\n                          \
    \                (string-append (int_to_mini_roman_helper (+ num 50) n_m n_c n_x)\
    \ \"l\"))))\n                              (if (< num 1000)\n                \
    \                  (if (= num 900)\n                                      (string-append\
    \ \"c\" \"m\")\n                                      (if (= num 500)\n      \
    \                                    \"d\"\n                                 \
    \         (if (= num 400)\n                                              (string-append\
    \ \"c\" \"d\")\n                                              (string-append (int_",
  "  (let loop ((number number)\n             (converted \"\"))\n    (cond\n     \
    \ ((>= number 1000) (loop (- number 1000) (string-append converted \"m\")))\n\
    \      ((>= number 900) (loop (- number 900) (string-append converted \"cm\")))\n\
    \      ((>= number 500) (loop (- number 500) (string-append converted \"d\")))\n\
    \      ((>= number 400) (loop (- number 400) (string-append converted \"cd\")))\n\
    \      ((>= number 100) (loop (- number 100) (string-append converted \"c\")))\n\
    \      ((>= number 90) (loop (- number 90) (string-append converted \"xc\")))\n\
    \      ((>= number 50) (loop (- number 50) (string-append converted \"l\")))\n\
    \      ((>= number 40) (loop (- number 40) (string-append converted \"xl\")))\n\
    \      ((>= number 10) (loop (- number 10) (string-append converted \"x\")))\n\
    \      ((>= number 9) (loop (- number 9) (string-append converted \"ix\")))\n\
    \      ((>= number 5) (loop (- number 5) (string-append converted \"v\")))\n \
    \     ((>= number 4) (loop (- number 4) (string-append converted \"iv\")))\n \
    \     ((>= number 1) (loop (- number 1) (string-append converted \"i\")))\n  \
    \    (else (string-downcase converted)))))", "  (cond ((= number 1000) \"m\")\n\
    \        ((<= number 0) \"\")\n        ((and (>= number 900) (<= number 999))\n\
    \         (string-append \"cm\" (int_to_mini_roman (- number 900))))\n       \
    \ ((and (>= number 500) (<= number 899))\n         (string-append \"d\" (int_to_mini_roman\
    \ (- number 500))))\n        ((and (>= number 400) (<= number 499))\n        \
    \ (string-append \"cd\" (int_to_mini_roman (- number 400))))\n        ((and (>=\
    \ number 100) (<= number 399))\n         (string-append \"c\" (int_to_mini_roman\
    \ (- number 100))))\n        ((and (>= number 90) (<= number 99))\n         (string-append\
    \ \"xc\" (int_to_mini_roman (- number 90))))\n        ((and (>= number 50) (<=\
    \ number 89))\n         (string-append \"l\" (int_to_mini_roman (- number 50))))\n\
    \        ((and (>= number 40) (<= number 49))\n         (string-append \"xl\"\
    \ (int_to_mini_roman (- number 40))))\n        ((and (>= number 10) (<= number\
    \ 39))\n         (string-append \"x\" (int_to_mini_roman (- number 10))))\n  \
    \      ((= number 9) \"ix\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 7) \"vii\")\n        ((= number 6) \"vi\")\n        ((= number 5) \"v\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 2) \"ii\")\n        ((= number 1) \"i\")))\n```", "  (let* ([rnums '((\"0\"\
    \ . \"0\")\n                  (\"1\" . \"i\")\n                  (\"2\" . \"ii\"\
    )\n                  (\"3\" . \"iii\")\n                  (\"4\" . \"iv\")\n \
    \                 (\"5\" . \"v\")\n                  (\"6\" . \"vi\")\n      \
    \            (\"7\" . \"vii\")\n                  (\"8\" . \"viii\")\n       \
    \           (\"9\" . \"ix\"))]\n         [rnums-1000 '((\"0\" . \"0\")\n     \
    \                  (\"1\" . \"x\")\n                       (\"2\" . \"xx\")\n\
    \                       (\"3\" . \"xxx\")\n                       (\"4\" . \"\
    xl\")\n                       (\"5\" . \"l\")\n                       (\"6\" .\
    \ \"lx\")\n                       (\"7\" . \"lxx\")\n                       (\"\
    8\" . \"lxxx\")\n                       (\"9\" . \"xc\"))]\n         [rnums-100\
    \ '((\"0\" . \"0\")\n                      (\"1\" . \"c\")\n                 \
    \     (\"2\" . \"cc\")\n                      (\"3\" . \"ccc\")\n            \
    \          (\"4\" . \"cd\")\n                      (\"5\" . \"d\")\n         \
    \             (\"6\" . \"dc\")\n                      (\"7\" . \"dcc\")\n    \
    \                  (\"8\" . \"dccc\")\n                      (\"9\" . \"cm\"))]\n\
    \         [rnums-10 '((\"0\" . \"0\")\n                     (\"1\" . \"m\")\n\
    \                     (\"2\" . \"mm\")\n                     (\"3\" . \"mmm\"\
    ))]\n         [number-string (number->string number)]\n         [number-reverse\
    \ (string-reverse number-string)]\n         [number-char-list (string->list number-reverse)]\n\
    \         [number-char-length (length number-char-list)]\n         [number-split\
    \ (split-string number-string \"\" #rx\"[.]\")]\n         [ones (list-ref number-split\
    \ 0)]\n         [tens (list-ref number-split 1)]\n         [hundreds (list-ref\
    \ number-split 2)]\n         [thousands (list-ref number-split 3)])\n    (cond\
    \ [(string=? thousands \"0\")\n           (cond [(string=? hundreds \"0\")\n \
    \                 (cond [(string=? tens", "  (cond\n    [(<= number 0) \"\"]\n\
    \    [(<= number 1000) (string-append (int_to_mini_roman (quotient number 1000))\
    \ (generate-roman (/ number 1000) \"M\"))]\n    [(<= number 900) (string-append\
    \ (int_to_mini_roman (quotient number 100)) (generate-roman (/ number 100) \"\
    C\"))]\n    [(<= number 500) (string-append (int_to_mini_roman (quotient number\
    \ 100)) (generate-roman (/ number 100) \"D\"))]\n    [(<= number 400) (string-append\
    \ (int_to_mini_roman (quotient number 100)) (generate-roman (/ number 100) \"\
    C\"))]\n    [(<= number 100) (string-append (int_to_mini_roman (quotient number\
    \ 100)) (generate-roman (/ number 100) \"C\"))]\n    [(<= number 90) (string-append\
    \ (int_to_mini_roman (quotient number 10)) (generate-roman (/ number 10) \"X\"\
    ))]\n    [(<= number 50) (string-append (int_to_mini_roman (quotient number 10))\
    \ (generate-roman (/ number 10) \"L\"))]\n    [(<= number 40) (string-append (int_to_mini_roman\
    \ (quotient number 10)) (generate-roman (/ number 10) \"X\"))]\n    [(<= number\
    \ 10) (string-append (int_to_mini_roman (quotient number 10)) (generate-roman\
    \ (/ number 10) \"X\"))]\n    [(<= number 9) (string-append (int_to_mini_roman\
    \ (quotient number 1)) (generate-roman (/ number 1) \"I\"))]\n    [(<= number\
    \ 5) (string-append (int_to_mini_roman (quotient number 1)) (generate-roman (/\
    \ number 1) \"V\"))]\n    [(<= number 4) (string-append (int_to_mini_roman (quotient\
    \ number 1)) (generate-roman (/ number 1) \"I\"))]\n    [(<= number 1) (string-append\
    \ (int_to_mini", "  (cond\n    [(< number 1) (error \"Input must be a positive\
    \ integer.\")])\n  (cond\n    [(= number 1000) \"m\"]\n    [(>= number 500) (append\
    \ (int_to_mini_roman (- number 500)) \"d\")]\n    [(>= number 100) (append (int_to_mini_roman\
    \ (- number 100)) \"c\")]\n    [(>= number 50) (append (int_to_mini_roman (- number\
    \ 50)) \"l\")]\n    [(>= number 10) (append (int_to_mini_roman (- number 10))\
    \ \"x\")]\n    [(>= number 5) (append (int_to_mini_roman (- number 5)) \"v\")]\n\
    \    [(>= number 1) (append (int_to_mini_roman (- number 1)) \"i\")]))\n", " \
    \ (define (auxiliar numeral m d c)\n    (cond\n      [(= numeral 0) \"\"]\n  \
    \    [(= numeral 1) (string-append m (auxiliar (- numeral 1) m d c))]\n      [(=\
    \ numeral 2) (string-append m (string-append m (auxiliar (- numeral 2) m d c)))]\n\
    \      [(= numeral 3) (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 3) m d c))))]\n      [(= numeral 4) (string-append m (string-append\
    \ d (auxiliar (- numeral 4) m d c)))]\n      [(= numeral 5) (string-append d (auxiliar\
    \ (- numeral 5) m d c))]\n      [(= numeral 6) (string-append d (string-append\
    \ m (auxiliar (- numeral 6) m d c)))]\n      [(= numeral 7) (string-append d (string-append\
    \ m (string-append m (auxiliar (- numeral 7) m d c))))]\n      [(= numeral 8)\
    \ (string-append d (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 8) m d c)))))]\n      [(= numeral 9) (string-append m (string-append\
    \ c (auxiliar (- numeral 9) m d c)))]\n      [(= numeral 10) (string-append c\
    \ (auxiliar (- numeral 10) m d c))]\n      [(= numeral 11) (string-append c (string-append\
    \ m (auxiliar (- numeral 11) m d c)))]\n      [(= numeral 12) (string-append c\
    \ (string-append m (string-append m (auxiliar (- numeral 12) m d c))))]\n    \
    \  [(= numeral 13) (string-append c (string-append m (string-append m (string-append\
    \ m (auxiliar (- numeral 13) m d c)))))]\n      [(= numeral 14) (string-append\
    \ c (string-append m (string-append m (string-append m (string-append m (auxiliar\
    \ (- numeral 14) m d c))))))]\n      [(= numeral 15) (string-append c (string",
  "  ; YOUR CODE HERE\n  )\n\n```\n\n```racket\n#lang racket\n", "  (cond\n    [(=\
    \ number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n  \
    \  [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n\
    \    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"\
    ix\"]\n    [(= number 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number 30)\
    \ \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number\
    \ 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n   \
    \ [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"\
    ]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500)\
    \ \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number\
    \ 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n \
    \   [else (\n      (cond\n        [(> number 1000) (error \"Number too large\"\
    )]\n        [(< number 1) (error \"Number too small\")])\n      (define (splitter\
    \ number)\n        (cond\n          [(< number 1000) (list (/ number 100) (* 10\
    \ (- number (* 100 (/ number 100)))) (/ number 10) (- number (* (/ number 10)\
    \ 10)))]\n          [(< number 100) (list (/ number 10) (- number (* (/ number\
    \ 10) 10)) (/ number 1) (- number (* (/ number 1) 1)))]\n          [(< number\
    \ 10) (list (/ number 1) (- number (* (/ number 1) 1)))]))\n      (define (romans\
    \ group)\n        (cond\n          [(= group 0) \"\"]\n          [(= group 1)\
    \ \"c\"]\n          [(= group 2) \"cc\"]\n          [(= group 3) \"ccc\"]\n  \
    \        [(= group 4) \"cd\"]\n          [(= group 5", "  (cond\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(=\
    \ number 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(= number 90) \"xc\"]\n\
    \    [(= number 50) \"l\"]\n    [(= number 40) \"xl\"]\n    [(= number 10) \"\
    x\"]\n    [(= number 9) \"ix\"]\n    [(= number 5) \"v\"]\n    [(= number 4) \"\
    iv\"]\n    [(= number 1) \"i\"]\n    [else (string-append (int_to_mini_roman (/\
    \ number 10)) (int_to_mini_roman (remainder number 10)))]))\n", "  (define (int_to_mini_roman-iter\
    \ number numeral)\n    (cond ((< number 4) (string-append (string-join (build-list\
    \ number \"i\") \"\") numeral))\n          ((< number 5) (string-append \"iv\"\
    \ numeral))\n          ((< number 9) (string-append (string-join (build-list (-\
    \ number 5) \"i\") \"\") \"v\" numeral))\n          ((< number 10) (string-append\
    \ \"ix\" numeral))\n          ((< number 40) (int_to_mini_roman-iter (- number\
    \ 10) (string-append \"x\" numeral)))\n          ((< number 50) (string-append\
    \ \"xl\" numeral))\n          ((< number 90) (int_to_mini_roman-iter (- number\
    \ 50) (string-append \"l\" numeral)))\n          ((< number 100) (string-append\
    \ \"xc\" numeral))\n          ((< number 400) (int_to_mini_roman-iter (- number\
    \ 100) (string-append \"c\" numeral)))\n          ((< number 500) (string-append\
    \ \"cd\" numeral))\n          ((< number 900) (int_to_mini_roman-iter (- number\
    \ 500) (string-append \"d\" numeral)))\n          ((< number 1000) (string-append\
    \ \"cm\" numeral))\n          (else (error \"number must be <= 1000\"))))\n  (int_to_mini_roman-iter\
    \ number \"\"))\n", "  \"See http://mathworld.wolfram.com/RomanNumerals.html\"\
    \n  (define (int_to_mini_roman-iter number digits)\n    (cond [(>= number 1000)\
    \ (cons 'm (int_to_mini_roman-iter (- number 1000) digits))]\n          [(>= number\
    \ 500) (cons 'd (int_to_mini_roman-iter (- number 500) digits))]\n          [(>=\
    \ number 100) (cons 'c (int_to_mini_roman-iter (- number 100) digits))]\n    \
    \      [(>= number 50) (cons 'l (int_to_mini_roman-iter (- number 50) digits))]\n\
    \          [(>= number 10) (cons 'x (int_to_mini_roman-iter (- number 10) digits))]\n\
    \          [(>= number 5) (cons 'v (int_to_mini_roman-iter (- number 5) digits))]\n\
    \          [(>= number 1) (cons 'i (int_to_mini_roman-iter (- number 1) digits))]\n\
    \          [else digits]))\n  (list->string (int_to_mini_roman-iter number '())))\n",
  "  (define (rec number)\n    (cond ((>= number 1000) (string-append \"m\" (rec (-\
    \ number 1000))))\n          ((>= number 900) (string-append \"cm\" (rec (- number\
    \ 900))))\n          ((>= number 500) (string-append \"d\" (rec (- number 500))))\n\
    \          ((>= number 400) (string-append \"cd\" (rec (- number 400))))\n   \
    \       ((>= number 100) (string-append \"c\" (rec (- number 100))))\n       \
    \   ((>= number 90) (string-append \"xc\" (rec (- number 90))))\n          ((>=\
    \ number 50) (string-append \"l\" (rec (- number 50))))\n          ((>= number\
    \ 40) (string-append \"xl\" (rec (- number 40))))\n          ((>= number 10) (string-append\
    \ \"x\" (rec (- number 10))))\n          ((>= number 9) (string-append \"ix\"\
    \ (rec (- number 9))))\n          ((>= number 5) (string-append \"v\" (rec (-\
    \ number 5))))\n          ((>= number 4) (string-append \"iv\" (rec (- number\
    \ 4))))\n          ((>= number 1) (string-append \"i\" (rec (- number 1))))\n\
    \          (else \"\")))\n  (rec number))\n", "  (let*\n      ;; Converts a given\
    \ number to its Roman numeral string representation.\n      ;; Restrictions: 1\
    \ <= number <= 1000\n      ;; Examples:\n      ;; >>> (convert_num 19)\n     \
    \ ;; \"XIX\"\n      ;; >>> (convert_num 152)\n      ;; \"CLII\"\n      ;; >>>\
    \ (convert_num 426)\n      ;; \"CDXXVI\"\n      ([convert_num (lambda (number)\n\
    \                      (cond\n                        [(<= number 0) \"\"]\n \
    \                       [(<= 1 number) (string-append (convert_thousands_place\
    \ number)\n                                                      (convert_hundreds_place\
    \ (- number (* 1000 (convert_thousands_place number))))\n                    \
    \                                  (convert_tens_place (- number (* 100 (convert_hundreds_place\
    \ (- number (* 1000 (convert_thousands_place number))))))\n                  \
    \                                                         (- number (* 10 (convert_tens_place\
    \ (- number (* 100 (convert_hundreds_place (- number (* 1000 (convert_thousands_place\
    \ number)))))))))))])))\n       ;; Converts a given number to its Roman numeral\
    \ string representation.\n       ;; Restrictions: 0 <= number <= 9\n       ;;\
    \ Examples:\n       ;; >>> (convert_thousands_place 1234)\n       ;; \"M\"\n \
    \      ;; >>> (convert_thousands_place 2987)\n       ;; \"MM\"\n       ;; >>>\
    \ (convert_thousands_place 6752)\n       ;; \"MMM\"\n       (convert_thousands_place\
    \ (lambda (number)\n                                  (cond\n                \
    \                    [(>= number 0) (cond\n                                  \
    \                   [(= number 0) \"\"]\n                                    \
    \                 [(<= number 3) (make-string number #\\M)]\n                \
    \                                     [(<= number 4) (string-append \"MM\" (make-string\
    \ (- number 4) #\\M))]\n                                                     [(<=\
    \ number 8) (string-append \"M\" (make-string (- number 5) #\\M))]\n         \
    \                                            [(<= number 9) (string-append \"\
    MMM\" (make-string (- number 9) #\\M))])])))\n       ;; Converts a given number\
    \ to", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(=\
    \ number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n  \
    \  [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"\
    ]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"\
    xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number\
    \ 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(=\
    \ number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"\
    ]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40)\
    \ \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number\
    \ 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n   \
    \ [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"\
    ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number\
    \ 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n\
    \    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000)\
    \ \"mm\"]\n    [(= number 3000) \"mmm\"]\n    [else (cons (int_to_mini_roman (quotient\
    \ number 1000))\n                 (int_to_mini_roman (remainder number 1000)))]))\n",
  "  (letrec ([th (remainder number 1000)]\n           [hu (remainder th 100)]\n \
    \          [te (remainder hu 10)]\n           [on (remainder te 10)])\n    (begin\n\
    \      (display \"th \")\n      (display th)\n      (display \"\\n\")\n      (display\
    \ \"hu \")\n      (display hu)\n      (display \"\\n\")\n      (display \"te \"\
    )\n      (display te)\n      (display \"\\n\")\n      (display \"on \")\n    \
    \  (display on)\n      (display \"\\n\")\n      )))\n", "  (define (internal number)\n\
    \    (cond ((= number 1000) \"m\")\n          ((= number 500) \"d\")\n       \
    \   ((= number 100) \"c\")\n          ((= number 50) \"l\")\n          ((= number\
    \ 10) \"x\")\n          ((= number 5) \"v\")\n          ((= number 1) \"i\")\n\
    \          (else\n           (let* ([remainder (% number (if (>= number 100) 100\n\
    \                                          (if (>= number 10) 10\n           \
    \                                   1)))]\n                  [char (internal (/\
    \ number (if (>= number 100) 100\n                                           \
    \    (if (>= number 10) 10\n                                                 \
    \  1))))])\n             (cond ((= remainder 9) (string-append char (internal\
    \ 1)))\n                   ((= remainder 4) (string-append char (internal 5)))\n\
    \                   ((>= remainder 5) (string-append (internal 5) (make-string\
    \ (floor (/ remainder 5)) char)))\n                   (else (make-string remainder\
    \ char)))))))\n  (string-append \"(\" (internal number) \")\"))\n", "  (define\
    \ (int_to_mini_roman_h number)\n    (cond\n      [(= number 0) \"\"]\n      [(>=\
    \ number 1000) \"m\" (int_to_mini_roman_h (- number 1000))]\n      [(>= number\
    \ 900) \"cm\" (int_to_mini_roman_h (- number 900))]\n      [(>= number 500) \"\
    d\" (int_to_mini_roman_h (- number 500))]\n      [(>= number 400) \"cd\" (int_to_mini_roman_h\
    \ (- number 400))]\n      [(>= number 100) \"c\" (int_to_mini_roman_h (- number\
    \ 100))]\n      [(>= number 90) \"xc\" (int_to_mini_roman_h (- number 90))]\n\
    \      [(>= number 50) \"l\" (int_to_mini_roman_h (- number 50))]\n      [(>=\
    \ number 40) \"xl\" (int_to_mini_roman_h (- number 40))]\n      [(>= number 10)\
    \ \"x\" (int_to_mini_roman_h (- number 10))]\n      [(>= number 9) \"ix\" (int_to_mini_roman_h\
    \ (- number 9))]\n      [(>= number 5) \"v\" (int_to_mini_roman_h (- number 5))]\n\
    \      [(>= number 4) \"iv\" (int_to_mini_roman_h (- number 4))]\n      [(>= number\
    \ 1) \"i\" (int_to_mini_roman_h (- number 1))]))\n  (string-downcase (int_to_mini_roman_h\
    \ number)))", "  (define (convert number)\n    (cond ((= number 1) \"i\")\n  \
    \        ((= number 2) \"ii\")\n          ((= number 3) \"iii\")\n          ((=\
    \ number 4) \"iv\")\n          ((= number 5) \"v\")\n          ((= number 6) \"\
    vi\")\n          ((= number 7) \"vii\")\n          ((= number 8) \"viii\")\n \
    \         ((= number 9) \"ix\")\n          ((= number 10) \"x\")\n          ((=\
    \ number 20) \"xx\")\n          ((= number 30) \"xxx\")\n          ((= number\
    \ 40) \"xl\")\n          ((= number 50) \"l\")\n          ((= number 60) \"lx\"\
    )\n          ((= number 70) \"lxx\")\n          ((= number 80) \"lxxx\")\n   \
    \       ((= number 90) \"xc\")\n          ((= number 100) \"c\")\n          ((=\
    \ number 200) \"cc\")\n          ((= number 300) \"ccc\")\n          ((= number\
    \ 400) \"cd\")\n          ((= number 500) \"d\")\n          ((= number 600) \"\
    dc\")\n          ((= number 700) \"dcc\")\n          ((= number 800) \"dccc\"\
    )\n          ((= number 900) \"cm\")\n          ((= number 1000) \"m\")\n    \
    \      (else \"nope\")))\n  (if (<= number 1000)\n      (convert number)\n   \
    \   \"Number must be between 1 and 1000\"))\n", "  (define (int_to_roman number)\n\
    \    (define roman-numerals '((1000 . \"M\") (900 . \"CM\") (500 . \"D\") (400\
    \ . \"CD\")\n                             (100 . \"C\") (90 . \"XC\") (50 . \"\
    L\") (40 . \"XL\")\n                             (10 . \"X\") (9 . \"IX\") (5\
    \ . \"V\") (4 . \"IV\") (1 . \"I\")))\n    (define (convert number roman-numerals)\n\
    \      (cond ((<= number 0) \"\")\n            ((<= (car (car roman-numerals))\
    \ number)\n             (string-append (cdr (car roman-numerals))\n          \
    \                  (convert (- number (car (car roman-numerals)))\n          \
    \                           roman-numerals)))\n            (else (convert number\
    \ (cdr roman-numerals)))))\n    (convert number roman-numerals))\n  (string-downcase\
    \ (int_to_roman number)))\n", "  (define (convert-to-roman-numeral-string numeral\
    \ number roman-numeral-string)\n    (cond\n      [(= number 0) roman-numeral-string]\n\
    \      [(= number 1) (string-append roman-numeral-string numeral)]\n      [(>\
    \ number 1) (convert-to-roman-numeral-string numeral (- number 1) (string-append\
    \ roman-numeral-string numeral))]))\n  (define (get-roman-numeral-string number)\n\
    \    (cond\n      [(= number 0) \"\"]\n      [(= number 1) \"i\"]\n      [(= number\
    \ 2) \"ii\"]\n      [(= number 3) \"iii\"]\n      [(= number 4) \"iv\"]\n    \
    \  [(= number 5) \"v\"]\n      [(= number 6) \"vi\"]\n      [(= number 7) \"vii\"\
    ]\n      [(= number 8) \"viii\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 20) \"xx\"]\n      [(= number 30) \"xxx\"]\n  \
    \    [(= number 40) \"xl\"]\n      [(= number 50) \"l\"]\n      [(= number 60)\
    \ \"lx\"]\n      [(= number 70) \"lxx\"]\n      [(= number 80) \"lxxx\"]\n   \
    \   [(= number 90) \"xc\"]\n      [(= number 100) \"c\"]\n      [(= number 200)\
    \ \"cc\"]\n      [(= number 300) \"ccc\"]\n      [(= number 400) \"cd\"]\n   \
    \   [(= number 500) \"d\"]\n      [(= number 600) \"dc\"]\n      [(= number 700)\
    \ \"dcc\"]\n      [(= number 800) \"dccc\"]\n      [(= number 900) \"cm\"]\n \
    \     [(= number 1000) \"m\"]))\n  (define (get-string-of-roman-numerals-for-number\
    \ number)\n    (cond\n      [(= number 0) \"\"]\n      [(= number 1) \"i\"]\n\
    \      [(= number 2) \"ii\"]\n      [(= number 3) \"iii\"]\n      [(= number 4)\
    \ \"iv\"]\n      [(= number 5) \"v\"]", "  (define romans '((\"m\" . 1000)\n \
    \                  (\"cm\" . 900)\n                   (\"d\" . 500)\n        \
    \           (\"cd\" . 400)\n                   (\"c\" . 100)\n               \
    \    (\"xc\" . 90)\n                   (\"l\" . 50)\n                   (\"xl\"\
    \ . 40)\n                   (\"x\" . 10)\n                   (\"ix\" . 9)\n  \
    \                 (\"v\" . 5)\n                   (\"iv\" . 4)\n             \
    \      (\"i\" . 1)))\n  (if (= 0 number)\n      \"\"\n      (let loop ((number\
    \ number)\n                 (result \"\"))\n        (cond ((= 0 number) result)\n\
    \              ((>= number (caar romans))\n               (loop (- number (caar\
    \ romans))\n                     (string-append result (cdar romans))))\n    \
    \          (else (loop number\n                          (string-append result\
    \ (cdar (cdr romans)))))))))\n", "  ;; write code here\n  )\n\n```\n\n## Output\n\
    \n```\n#lang racket\n", "  (define (mini-roman-help number result)\n    (cond\
    \ ((< number 10) (cond ((= number 1) (append result \"i\"))\n                \
    \               ((= number 2) (append result \"ii\"))\n                      \
    \         ((= number 3) (append result \"iii\"))\n                           \
    \    ((= number 4) (append result \"iv\"))\n                               ((=\
    \ number 5) (append result \"v\"))\n                               ((= number\
    \ 6) (append result \"vi\"))\n                               ((= number 7) (append\
    \ result \"vii\"))\n                               ((= number 8) (append result\
    \ \"viii\"))\n                               ((= number 9) (append result \"ix\"\
    ))))\n          ((< number 100) (cond ((= number 10) (append result \"x\"))\n\
    \                                ((= number 20) (append result \"xx\"))\n    \
    \                            ((= number 30) (append result \"xxx\"))\n       \
    \                         ((= number 40) (append result \"xl\"))\n           \
    \                     ((= number 50) (append result \"l\"))\n                \
    \                ((= number 60) (append result \"lx\"))\n                    \
    \            ((= number 70) (append result \"lxx\"))\n                       \
    \         ((= number 80) (append result \"lxxx\"))\n                         \
    \       ((= number 90) (append result \"xc\"))))\n          ((< number 1000) (cond\
    \ ((= number 100) (append result \"c\"))\n                                 ((=\
    \ number 200) (append result \"cc\"))\n                                 ((= number\
    \ 300) (append result \"ccc\"))\n                                 ((= number 400)\
    \ (append result \"cd\"))\n                                 ((= number 500) (append\
    \ result \"d\"))\n                                 ((= number 600) (append result\
    \ \"dc\"))\n                                 ((= number 700) (append result \"\
    dcc\"))\n                                 ((= number 800) (append result \"dccc\"\
    ))\n                                 ((= number 900) (append result \"cm\"))))\n\
    \          ((< number 2000) (append result \"m\"))\n          (else (mini-roman-help\
    \ (- number 1000) (append result \"m\")))))\n  (mini-roman-help number \"\"))\n",
  "  (if (not (and (integer? number)\n                (<= 1 number 1000)))\n     \
    \ (error \"Roman numerals are restricted to the range 1 to 1000\"))\n  (define\
    \ (num-to-char num)\n    (cond ((= num 0) 'I)\n          ((= num 1) 'V)\n    \
    \      ((= num 2) 'X)\n          ((= num 3) 'L)\n          ((= num 4) 'C)\n  \
    \        ((= num 5) 'D)\n          ((= num 6) 'M)))\n  (define (subtract-shift-append\
    \ s n)\n    (string-append s (make-string n #\\-) (string (num-to-char (+ 3 n)))))\n\
    \  (define (base-convert n base)\n    (if (= n 0)\n        \"\"\n        (base-convert\
    \ (quotient n base) base)\n        (subtract-shift-append (string (num-to-char\
    \ (remainder n base)))\n                               (quotient n base))))\n\
    \  (string-downcase (base-convert number 5)))\n", "  (define (int_to_mini_roman_iter\
    \ number str)\n    (match number\n      [(or 0 1 2 3 4 5 6 7 8 9) (string-append\
    \ str (cond [(= number 1) \"i\"]\n                                           \
    \             [(= number 2) \"ii\"]\n                                        \
    \                [(= number 3) \"iii\"]\n                                    \
    \                    [(= number 4) \"iv\"]\n                                 \
    \                       [(= number 5) \"v\"]\n                               \
    \                         [(= number 6) \"vi\"]\n                            \
    \                            [(= number 7) \"vii\"]\n                        \
    \                                [(= number 8) \"viii\"]\n                   \
    \                                     [(= number 9) \"ix\"]))]\n      [(or 10\
    \ 20 30 40 50 60 70 80 90) (string-append str (cond [(= number 10) \"x\"]\n  \
    \                                                             [(= number 20) \"\
    xx\"]\n                                                               [(= number\
    \ 30) \"xxx\"]\n                                                             \
    \  [(= number 40) \"xl\"]\n                                                  \
    \             [(= number 50) \"l\"]\n                                        \
    \                       [(= number 60) \"lx\"]\n                             \
    \                                  [(= number 70) \"lxx\"]\n                 \
    \                                              [(= number 80) \"lxxx\"]\n    \
    \                                                           [(= number 90) \"\
    xc\"]))]\n      [(or 100 200 300 400 500 600 700 800 900) (string-append str (cond\
    \ [(= number 100) \"c\"]\n                                                   \
    \                     [(= number 200) \"cc\"]\n                              \
    \                                          [(= number 300) \"ccc\"]\n        \
    \                                                                [(= number 400)\
    \ \"cd\"]\n                                                                  \
    \      [(= number 500) \"d\"]\n                                              \
    \                          [(= number 600) \"dc\"]\n                         \
    \                                               [(= number 700) \"dcc\"]\n   \
    \                                                                     [(= number\
    \ 800) \"dccc\"]\n                                                           \
    \             [(= number 900) \"cm\"]))]\n      [(or 1000 2000 3000) (string-append\
    \ str (cond [(= number 1000) \"m\"]\n                                        \
    \            [(= number 2000) \"mm\"]\n                                      \
    \              [(= number 3000) \"mmm\"]))]\n      [_ (int_to_mini_roman_iter\
    \ (- number (modulo number 10)) (int_to_mini_roman_iter (", "  (define (int_to_mini_roman-helper\
    \ number numeral-pair)\n    (if (= number 0)\n        \"\"\n        (let ([number-length\
    \ (number->string number)]\n              [quotient (quotient number (car numeral-pair))]\n\
    \              [remainder (remainder number (car numeral-pair))])\n          (string-append\n\
    \           (make-string quotient (cdr numeral-pair))\n           (int_to_mini_roman-helper\
    \ remainder (cdr numeral-pair))))))\n  (cond [(and (<= 1 number) (<= number 1000))\n\
    \         (string-downcase (int_to_mini_roman-helper number '(1000 \"m\")))\n\
    \         ]\n        [else \"error\"]))\n```\n\n## LISP\n\n[here](http://rosettacode.org/wiki/Roman_numerals/Encode#Lisp)\n\
    \n```lisp", "  (define digits\n    (list (list 1 \"i\")\n          (list 5 \"\
    v\")\n          (list 10 \"x\")\n          (list 50 \"l\")\n          (list 100\
    \ \"c\")\n          (list 500 \"d\")\n          (list 1000 \"m\")))\n  (let sub\
    \ ((number number) (result '()))\n    (if (zero? number)\n        (list->string\
    \ (reverse result))\n        (let ((digit (find-lowest-digit number digits)))\n\
    \          (sub (- number (car digit))\n               (cons (cadr digit) result))))))\n",
  "  (define (int_to_mini_roman_rec number roman)\n    (if (= number 0)\n        roman\n\
    \        (cond ((>= number 1000)\n               (int_to_mini_roman_rec (- number\
    \ 1000) (string-append roman \"m\")))\n              ((>= number 900)\n      \
    \         (int_to_mini_roman_rec (- number 900) (string-append roman \"cm\")))\n\
    \              ((>= number 500)\n               (int_to_mini_roman_rec (- number\
    \ 500) (string-append roman \"d\")))\n              ((>= number 400)\n       \
    \        (int_to_mini_roman_rec (- number 400) (string-append roman \"cd\")))\n\
    \              ((>= number 100)\n               (int_to_mini_roman_rec (- number\
    \ 100) (string-append roman \"c\")))\n              ((>= number 90)\n        \
    \       (int_to_mini_roman_rec (- number 90) (string-append roman \"xc\")))\n\
    \              ((>= number 50)\n               (int_to_mini_roman_rec (- number\
    \ 50) (string-append roman \"l\")))\n              ((>= number 40)\n         \
    \      (int_to_mini_roman_rec (- number 40) (string-append roman \"xl\")))\n \
    \             ((>= number 10)\n               (int_to_mini_roman_rec (- number\
    \ 10) (string-append roman \"x\")))\n              ((>= number 9)\n          \
    \     (int_to_mini_roman_rec (- number 9) (string-append roman \"ix\")))\n   \
    \           ((>= number 5)\n               (int_to_mini_roman_rec (- number 5)\
    \ (string-append roman \"v\")))\n              ((>= number 4)\n              \
    \ (int_to_mini_roman_rec (- number 4) (string-append roman \"iv\")))\n       \
    \       ((>= number 1)\n               (int_to_mini_roman_rec (- number 1) (string-append\
    \ roman \"i\"))))))\n  (string-downcase (int_to_mini_roman_rec number \"\")))\n",
  "  \"Given a positive integer, obtain its roman numeral equivalent as a string\"\
    \n  (define (int_to_mini_roman-aux number roman-list)\n    (cond\n      [(<= number\
    \ 0) (apply string-append (reverse roman-list))]\n      [(<= number 4)\n     \
    \  (int_to_mini_roman-aux\n        (- number 1)\n        (cons \"i\" roman-list))]\n\
    \      [(<= number 9)\n       (int_to_mini_roman-aux\n        (- number 5)\n \
    \       (cons \"v\" roman-list))]\n      [(<= number 40)\n       (int_to_mini_roman-aux\n\
    \        (- number 10)\n        (cons \"x\" roman-list))]\n      [(<= number 90)\n\
    \       (int_to_mini_roman-aux\n        (- number 50)\n        (cons \"l\" roman-list))]\n\
    \      [(<= number 400)\n       (int_to_mini_roman-aux\n        (- number 100)\n\
    \        (cons \"c\" roman-list))]\n      [(<= number 900)\n       (int_to_mini_roman-aux\n\
    \        (- number 500)\n        (cons \"d\" roman-list))]\n      [(<= number\
    \ 1000)\n       (int_to_mini_roman-aux\n        (- number 1000)\n        (cons\
    \ \"m\" roman-list))]))\n  (int_to_mini_roman-aux number '()))", "  (cond\n  \
    \  [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number\
    \ 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n  \
    \  [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"\
    xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(=\
    \ number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n\
    \    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100)\
    \ \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number\
    \ 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(=\
    \ number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"\
    cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number\
    \ 3000) \"mmm\"]\n    [(= number 4000) \"mv\u0305\"]\n    [(= number 5000) \"\
    v\u0305\"]\n    [(= number 6000) \"v\u0305m\"]\n    [(= number 7000) \"v\u0305\
    mm\"]\n    [(= number 8000) \"v\u0305mmm\"]\n    [(= number 9000) \"m\u0305x\"\
    ]\n    [(= number 10000) \"x\u0305\"]\n    [(= number 20000) \"", "  (cond\n \
    \   [(= number 1000) \"m\"]\n    [(= number 500) \"d\"]\n    [(= number 100) \"\
    c\"]\n    [(= number 50) \"l\"]\n    [(= number 10) \"x\"]\n    [(= number 5)\
    \ \"v\"]\n    [(= number 1) \"i\"]\n    [(< number 1) \"\"]\n    [else\n     (let\
    \ ([left number])\n       (define (divide n)\n         (cond\n           [(= left\
    \ (* n 1000)) \"m\"]\n           [(= left (* n 500)) \"d\"]\n           [(= left\
    \ (* n 100)) \"c\"]\n           [(= left (* n 50)) \"l\"]\n           [(= left\
    \ (* n 10)) \"x\"]\n           [(= left (* n 5)) \"v\"]\n           [(= left (*\
    \ n 1)) \"i\"]\n           [else\n            (begin\n              (set! left\
    \ (- left (* n 1000)))\n              (string-append (divide 1000) (divide n)))]))\n\
    \       (define (integer-log n)\n         (cond\n           [(= n 1000) 3]\n \
    \          [(= n 500) 2]\n           [(= n 100) 1]\n           [(= n 50) 1]\n\
    \           [(= n 10) 0]\n           [(= n 5) 0]\n           [(= n 1) 0]))\n \
    \      (let loop ([n number])\n         (cond\n           [(integer-log n) (begin\n\
    \                              (set! left (- left (* n (expt 10 (- 3 (integer-log\
    \ n))))))\n                              (loop (expt 10 (- 3 (integer-log n)))))]\n\
    \           [else (divide n)])))))]))", "  (cond\n    [(= number 1) \"i\"]\n \
    \   [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"\
    ]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number\
    \ 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n   \
    \ [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"\
    xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"]\n\
    \    [(= number 4000) \"mmmm\"]\n    [(= number 5000) \"mmmmmm\"]\n    [(= number\
    \ 6000) \"mmmmmmm\"]\n    [(= number 7000) \"mmmmmmmm\"]\n    [(= number 8000)\
    \ \"mmmmmmmmm\"]\n    [(= number 9000) \"mmmmmmmmmm\"]\n    [(= number 10000)\
    \ \"mmmmm\"]\n    [(= number 20000) \"mmmmmm\"]\n    [(= number 30000)", "  (cond\n\
    \    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number\
    \ 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n  \
    \  [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"\
    xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"xxii\"]\n   \
    \ [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(= number 25)\
    \ \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"]\n    [(=\
    \ number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n    [(= number 30) \"\
    xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n    [(= number\
    \ 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"\
    ]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37) \"xxxvii\"]\n    [(= number\
    \ 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 41) \"xli\"]\n    [(= number 42) \"xlii\"]\n    [(= number 43)\
    \ \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(=\
    \ number 46) \"xlvi\"]\n    [(=", "  (define (int_to_roman number base symb-5\
    \ symb-1)\n    (cond\n      [(= number 1)\n       (string-append symb-1)]\n  \
    \    [(< number 5)\n       (string-append (make-string (- number 1) symb-1))]\n\
    \      [(= number 5)\n       (string-append symb-5)]\n      [(< number 9)\n  \
    \     (string-append symb-5 (make-string (- number 5) symb-1))]\n      [(= number\
    \ 9)\n       (string-append symb-1 (int_to_roman 1 base symb-5 symb-1))]\n   \
    \   [(> number 0)\n       (string-append (int_to_roman (/ number 10) (* base 10)\n\
    \                                    (string-append symb-1 symb-5)\n         \
    \                           (string-append symb-1 symb-1))\n                 \
    \     (int_to_roman (% number 10) base symb-5 symb-1))]))\n  (cond\n    [(= number\
    \ 1)\n     \"i\"]\n    [(= number 5)\n     \"v\"]\n    [(= number 10)\n     \"\
    x\"]\n    [(= number 50)\n     \"l\"]\n    [(= number 100)\n     \"c\"]\n    [(=\
    \ number 500)\n     \"d\"]\n    [(= number 1000)\n     \"m\"]\n    [else\n   \
    \  (int_to_roman number 1 \"v\" \"i\")]))\n", "  (cond\n    ((= number 1000) \"\
    m\")\n    ((<= number 999) (string-append \"m\" (int_to_mini_roman (- number 1000))))\n\
    \    ((= number 900) \"cm\")\n    ((<= number 899) (string-append \"c\" (int_to_mini_roman\
    \ (- number 900))))\n    ((= number 500) \"d\")\n    ((<= number 499) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500))))\n    ((= number 400) \"cd\")\n  \
    \  ((<= number 399) (string-append \"c\" (int_to_mini_roman (- number 400))))\n\
    \    ((= number 100) \"c\")\n    ((<= number 99) (string-append \"c\" (int_to_mini_roman\
    \ (- number 100))))\n    ((= number 90) \"xc\")\n    ((<= number 89) (string-append\
    \ \"x\" (int_to_mini_roman (- number 90))))\n    ((= number 50) \"l\")\n    ((<=\
    \ number 49) (string-append \"l\" (int_to_mini_roman (- number 50))))\n    ((=\
    \ number 40) \"xl\")\n    ((<= number 39) (string-append \"x\" (int_to_mini_roman\
    \ (- number 40))))\n    ((= number 10) \"x\")\n    ((<= number 9) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10))))\n    ((= number 9) \"ix\")\n    ((<=\
    \ number 8) (string-append \"i\" (int_to_mini_roman (- number 9))))\n    ((= number\
    \ 5) \"v\")\n    ((<= number 4) (string-append \"v\" (int_to_mini_roman (- number\
    \ 5))))\n    ((= number 4) \"iv\")\n    ((<= number 3) (string-append \"i\" (int_to_mini_roman\
    \ (- number 4))))\n    ((= number 3) \"iii\")\n    ((<= number 2) (string-append\
    \ \"i\" (int_to_mini_roman (- number 3))))\n    ((= number 2) \"ii\")\n    ((<=\
    \ number 1) (string-append \"i\"", "  (let ([roman-numerals '((1 . \"i\") (5 .\
    \ \"v\") (10 . \"x\") (50 . \"l\") (100 . \"c\") (500 . \"d\") (1000 . \"m\"))])\n\
    \    (let loop ([acc \"\"] [n number])\n      (let ([m (lcm (denominator n) (denominator\
    \ (round n)))])\n        (let ([n (exact->inexact (/ m n))])\n          (if (<\
    \ n 1)\n              acc\n              (let* ([key (round (log n))]\n      \
    \               [value (lookup roman-numerals key)]\n                     [rep\
    \ (map (lambda (x) (string-append (map (lambda (i) value) (range 1 x))\n     \
    \                                                     (if (or (= x 1) (= x 5))\
    \ \"\"\n                                                              (if (and\
    \ (> x 5) (< x 9))\n                                                         \
    \         (list (lookup roman-numerals (- key 1)))\n                         \
    \                                         (list (lookup roman-numerals (- key\
    \ 2)))))\n                                                          ))\n     \
    \                           (if (and (> n 1) (< n 5)) (list (- n 1))\n       \
    \                             (if (> n 5) (list (- n 5))\n                   \
    \                     (list n)))))])\n                (loop (string-append acc\
    \ (apply string-append rep)) (- n (* key m)))))))))))\n", "  (cond ((= number\
    \ 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number\
    \ 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n\
    \        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 11) \"xi\")\n        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\"\
    )\n        ((= number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((=\
    \ number 16) \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18)\
    \ \"xviii\")\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n\
    \        ((= number 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((=\
    \ number 50) \"l\")\n        ((= number 60) \"lx\")\n        ((= number 70) \"\
    lxx\")\n        ((= number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n   \
    \     ((= number 100) \"c\")\n        ((= number 200) \"cc\")\n        ((= number\
    \ 300) \"ccc\")\n        ((= number 400) \"cd\")\n        ((= number 500) \"d\"\
    )\n        ((= number 600) \"dc\")\n        ((= number 700) \"dcc\")\n       \
    \ ((= number 800) \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number\
    \ 1000) \"m\")\n        (else (int_to_mini_roman (remainder number 1000))\n  \
    \            (int_to_mini_roman (/ number 1000)))))", "  (define (convert-digit\
    \ digit-value roman-letter)\n    (string-append (make-string (quotient digit-value\
    \ 10)\n                                (string-upcase roman-letter))\n       \
    \            (make-string (remainder digit-value 10)\n                       \
    \         (string-downcase roman-letter))))\n  (string-join\n   (list (convert-digit\
    \ (quotient number 1000) \"M\")\n         (convert-digit (quotient (remainder\
    \ number 1000) 100) \"C\")\n         (convert-digit (quotient (remainder number\
    \ 100) 10) \"X\")\n         (convert-digit (remainder number 10) \"I\"))\n   \"\
    \"))\n```\n\n## Day 4: Roman Numerals Decoder\n\nCode for this day may be found\
    \ [here](https://github.com/bdesham/code-katas/blob/master/ruby/mini-katas/roman-numerals-decoder.rb).\n\
    \n* My solution to the kata on CodeWars:\n\n```ruby\n#!/usr/bin/env ruby\n\n#\
    \ Given a roman numeral as input, write a function that converts the roman\n#\
    \ numeral to a number and outputs it.\n# Example:\n# >>> solution(\"XXI\")\n#\
    \ 21\n# >>> solution(\"I\")\n# 1\n\ndef solution(roman)\n  values = { \"M\" =>\
    \ 1000, \"D\" => 500, \"C\" => 100, \"L\" => 50, \"X\" => 10,\n             \"\
    V\" => 5, \"I\" => 1 }\n  roman.split(\"\").map do |letter|\n    values[letter]\n\
    \  end.each_with_index.inject(0) do |sum, (value, index)|\n    next_value = values[roman[index\
    \ + 1]]\n    if next_value && value < next_value\n      sum - value\n    else\n\
    \      sum + value\n    end\n  end\nend\n```\n\n## Day 5: Find the odd int\n\n\
    Code for this day may be found [here](https://github.com/bdesham/code-katas/blob/master/ruby/mini-kat",
  "  (define (int_to_mini_roman_helper n number-string)\n    (cond ((= n 0) number-string)\n\
    \          ((= n 1000) (string-append \"m\" (int_to_mini_roman_helper (- n 1000)\
    \ number-string)))\n          ((= n 500) (string-append \"d\" (int_to_mini_roman_helper\
    \ (- n 500) number-string)))\n          ((= n 100) (string-append \"c\" (int_to_mini_roman_helper\
    \ (- n 100) number-string)))\n          ((= n 50) (string-append \"l\" (int_to_mini_roman_helper\
    \ (- n 50) number-string)))\n          ((= n 10) (string-append \"x\" (int_to_mini_roman_helper\
    \ (- n 10) number-string)))\n          ((= n 5) (string-append \"v\" (int_to_mini_roman_helper\
    \ (- n 5) number-string)))\n          ((= n 1) (string-append \"i\" (int_to_mini_roman_helper\
    \ (- n 1) number-string)))))\n  (int_to_mini_roman_helper number \"\"))\n", " \
    \ (int_to_mini_roman_helper number '(1000 500 100 50 10 5 1) '()))\n", "  (define\
    \ (int_to_mini_roman-core number result)\n    (match number\n      [0 result]\n\
    \      [(cons-if-have-1000) (int_to_mini_roman-core (cons-if-have-1000) (append-m\
    \ result))]\n      [(cons-if-have-500) (int_to_mini_roman-core (cons-if-have-500)\
    \ (append-d result))]\n      [(cons-if-have-100) (int_to_mini_roman-core (cons-if-have-100)\
    \ (append-c result))]\n      [(cons-if-have-50) (int_to_mini_roman-core (cons-if-have-50)\
    \ (append-l result))]\n      [(cons-if-have-10) (int_to_mini_roman-core (cons-if-have-10)\
    \ (append-x result))]\n      [(cons-if-have-5) (int_to_mini_roman-core (cons-if-have-5)\
    \ (append-v result))]\n      [(cons-if-have-1) (int_to_mini_roman-core (cons-if-have-1)\
    \ (append-i result))]))\n  (int_to_mini_roman-core number (list)))\n", "  (define\
    \ symbol-pairs\n    '(\n      (1000 . \"m\")\n      (900 . \"cm\")\n      (500\
    \ . \"d\")\n      (400 . \"cd\")\n      (100 . \"c\")\n      (90 . \"xc\")\n \
    \     (50 . \"l\")\n      (40 . \"xl\")\n      (10 . \"x\")\n      (9 . \"ix\"\
    )\n      (5 . \"v\")\n      (4 . \"iv\")\n      (1 . \"i\")\n    ))\n  (define\
    \ (convert-symbol n symbol roman)\n    (if (>= n (car symbol))\n        (convert-symbol\
    \ (- n (car symbol)) symbol (string-append roman (cdr symbol)))\n        roman))\n\
    \  (define (convert n)\n    (cond ((= n 0) \"\")\n          ((<= n 1000) (convert-symbol\
    \ n (car symbol-pairs) \"\"))\n          (else (convert-symbol n (cadr symbol-pairs)\
    \ \"\"))))\n  (convert number))", "  (letrec\n    ((int_to_mini_roman (lambda\
    \ (n)\n       (cond\n         [(<= n 0) \"\"]\n         [(= n 1000) \"m\"]\n \
    \        [(= n 900) \"cm\"]\n         [(= n 500) \"d\"]\n         [(= n 400) \"\
    cd\"]\n         [(= n 100) \"c\"]\n         [(= n 90) \"xc\"]\n         [(= n\
    \ 50) \"l\"]\n         [(= n 40) \"xl\"]\n         [(= n 10) \"x\"]\n        \
    \ [(= n 9) \"ix\"]\n         [(= n 5) \"v\"]\n         [(= n 4) \"iv\"]\n    \
    \     [(= n 1) \"i\"]\n         [else (let ([num (quotient n 10)])\n         \
    \         (string-append\n                    (int_to_mini_roman num)\n      \
    \              (int_to_mini_roman (modulo n 10))))]))))\n    (string-downcase\
    \ (int_to_mini_roman number))))", "  (cond\n    [(<= number 1000) (int_to_mini_roman_1000\
    \ number)]\n    [(<= number 500) (int_to_mini_roman_500 number)]\n    [(<= number\
    \ 100) (int_to_mini_roman_100 number)]\n    [(<= number 50) (int_to_mini_roman_50\
    \ number)]\n    [(<= number 10) (int_to_mini_roman_10 number)]\n    [(<= number\
    \ 5) (int_to_mini_roman_5 number)]\n    [(<= number 1) (int_to_mini_roman_1 number)]))",
  "  (if (< number 1)\n      \"?\"\n      (if (= number 1)\n          \"i\"\n    \
    \      (if (= number 5)\n              \"v\"\n              (if (= number 10)\n\
    \                  \"x\"\n                  (if (= number 50)\n              \
    \        \"l\"\n                      (if (= number 100)\n                   \
    \       \"c\"\n                          (if (= number 500)\n                \
    \              \"d\"\n                              (if (= number 1000)\n    \
    \                              \"m\"\n                                  (if (<\
    \ number 4)\n                                      (string-append (int_to_mini_roman\
    \ 1) (int_to_mini_roman (- number 1)))\n                                     \
    \ (if (< number 9)\n                                          (string-append (int_to_mini_roman\
    \ 1) (int_to_mini_roman (- number 5)))\n                                     \
    \     (if (< number 40)\n                                              (string-append\
    \ (int_to_mini_roman 10) (int_to_mini_roman (- number 10)))\n                \
    \                              (if (< number 90)\n                           \
    \                       (string-append (int_to_mini_roman 10) (int_to_mini_roman\
    \ (- number 50)))\n                                                  (if (< number\
    \ 400)\n                                                      (string-append (int_to_mini_roman\
    \ 100) (int_to_mini_roman (- number 100)))\n                                 \
    \                     (if (< number 900)\n                                   \
    \                       (string-append (int_to_mini_roman 100) (int_to_mini_roman\
    \ (- number 500)))\n                                                         \
    \ (if (< number 4000)\n                                                      \
    \        (string-append (int_to_mini_roman 1000) (int_to_mini_roman (- number\
    \ 1000)))\n                                                              (string-append\
    \ (int_to_mini_roman 1000) (int_to_mini_roman (- number 5000)))\n            \
    \                                                  ))))))))))))))))\n  )\n", " \
    \ (int_to_roman number #f))\n", "  (cond ((= number 1) \"i\")\n        ((= number\
    \ 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n\
    \        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number\
    \ 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n\
    \        ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number\
    \ 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\"\
    )\n        ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((=\
    \ number 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number\
    \ 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\"\
    )\n        ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((=\
    \ number 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80)\
    \ \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n\
    \        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((=\
    \ number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((= number 600)\
    \ \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800) \"dccc\"\
    )\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n        ;;\
    \ Calculate the number of each digit.\n        ((< number 2000) (string-append\
    \ (int_to_mini_roman (/ number 1000))\n                                      \
    \  (int_to_mini_roman (- number (* (/ number 1000) 1000)))))\n        ((< number\
    \ 3000) (string-append (int_to_mini_roman (/ number 1000))\n                 \
    \                       (int_to_mini_roman (- number (* (/ number 1000) 1000)))))\n\
    \        ((< number 4000) (string-append (int_to_mini_roman (/ number", "  (define\
    \ (rec-int-to-mini-roman number result)\n    (cond\n      ((= number 0) result)\n\
    \      ((= number 1) (string-append result \"i\"))\n      ((= number 2) (string-append\
    \ result \"ii\"))\n      ((= number 3) (string-append result \"iii\"))\n     \
    \ ((= number 4) (string-append result \"iv\"))\n      ((= number 5) (string-append\
    \ result \"v\"))\n      ((= number 6) (string-append result \"vi\"))\n      ((=\
    \ number 7) (string-append result \"vii\"))\n      ((= number 8) (string-append\
    \ result \"viii\"))\n      ((= number 9) (string-append result \"ix\"))\n    \
    \  ((= number 10) (string-append result \"x\"))\n      ((= number 11) (string-append\
    \ result \"xi\"))\n      ((= number 12) (string-append result \"xii\"))\n    \
    \  ((= number 13) (string-append result \"xiii\"))\n      ((= number 14) (string-append\
    \ result \"xiv\"))\n      ((= number 15) (string-append result \"xv\"))\n    \
    \  ((= number 16) (string-append result \"xvi\"))\n      ((= number 17) (string-append\
    \ result \"xvii\"))\n      ((= number 18) (string-append result \"xviii\"))\n\
    \      ((= number 19) (string-append result \"xix\"))\n      ((= number 20) (string-append\
    \ result \"xx\"))\n      ((= number 30) (string-append result \"xxx\"))\n    \
    \  ((= number 40) (string-append result \"xl\"))\n      ((= number 50) (string-append\
    \ result \"l\"))\n      ((= number 60) (string-append result \"lx\"))\n      ((=\
    \ number 70) (string-append result \"lxx\"))\n      ((= number 80) (string-append\
    \ result \"lxxx\"))\n      ((= number 90) (string-append result \"xc\"))\n   \
    \   ((= number 100) (string-append result \"c\"))\n      ((= number 200) (string-append\
    \ result \"cc\"))\n      ((= number 300) (string-append result \"ccc\"))\n   \
    \   ((= number 400) (string-append result \"cd\"))", "  (define mini-roman-dict\n\
    \    '((1000 . \"m\") (900 . \"cm\") (500 . \"d\") (400 . \"cd\") (100 . \"c\"\
    ) (90 . \"xc\")\n      (50 . \"l\") (40 . \"xl\") (10 . \"x\") (9 . \"ix\") (5\
    \ . \"v\") (4 . \"iv\") (1 . \"i\")))\n  (define (convert-to-roman number)\n \
    \   (let loop ((remaining number) (roman-num-str \"\"))\n      (cond ((= remaining\
    \ 0) roman-num-str)\n            (else\n             (let* ((possible-numbers\
    \ (filter (lambda (x) (>= (car x) remaining)) mini-roman-dict))\n            \
    \        (biggest-number (car (car possible-numbers))))\n               (loop\
    \ (- remaining biggest-number)\n                     (string-append roman-num-str\
    \ (cdr (assoc biggest-number mini-roman-dict)))))))))\n  (convert-to-roman number))\n",
  "  (define (int_to_mini_roman number)\n    (cond ((= number 1000) \"m\")\n     \
    \     ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n          ((=\
    \ number 400) \"cd\")\n          ((= number 100) \"c\")\n          ((= number\
    \ 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number 40) \"xl\"\
    )\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n        \
    \  ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((= number\
    \ 1) \"i\")\n          (else \"\")))\n  (string-downcase (int_to_mini_roman number)))\n",
  "  (define (int_to_mini_roman_aux number)\n    (define (converter number)\n    \
    \  (if (equal? number 0)\n          \"\"\n          (let* ([table '(1000 900 500\
    \ 400 100 90 50 40 10 9 5 4 1)]\n                 [remainder (modulo number (car\
    \ table))]\n                 [quotient (quotient number (car table))])\n     \
    \       (string-append (make-string quotient (cadr table))\n                 \
    \          (converter remainder)))))\n    (string-downcase (converter number)))\n\
    \  (cond ((and (<= 1 number) (<= number 1000))\n         (int_to_mini_roman_aux\
    \ number))\n        (else \"error\")))\n", "  (let ([conversion '((\"x\" \"i\"\
    \ \"v\") (\"c\" \"x\" \"l\") (\"m\" \"c\" \"d\"))])\n    (define (to-roman number\
    \ base)\n      (cond [(< number 4)\n             (make-string number (list-ref\
    \ (list-ref conversion base) 1))]\n            [(= number 4)\n             (string-append\
    \ (list-ref (list-ref conversion base) 1)\n                            (list-ref\
    \ (list-ref conversion base) 2))]\n            [(< number 9)\n             (string-append\
    \ (list-ref (list-ref conversion base) 2)\n                            (make-string\
    \ (- number 5)\n                                         (list-ref (list-ref conversion\
    \ base) 1)))]\n            [(= number 9)\n             (string-append (list-ref\
    \ (list-ref conversion base) 1)\n                            (list-ref (list-ref\
    \ conversion (add1 base)) 0))]))\n    (define (order number)\n      (cond [(<\
    \ number 10)\n             0]\n            [(< number 100)\n             1]\n\
    \            [else\n             2]))\n    (define (int-to-mini-roman number)\n\
    \      (cond [(= number 0)\n             \"\"]\n            [else\n          \
    \   (string-append (to-roman (modulo number (expt 10 (order number)))\n      \
    \                                (order number))\n                           \
    \ (int-to-mini-roman (quotient number (expt 10 (order number)))))]))\n    (int-to-mini-roman\
    \ number)))\n", "  ; your code here\n  )\n", "  (cond [(= number 1000) \"m\"]\n\
    \        [(<= number 999)\n         (string-append (int_to_mini_roman (/ number\
    \ 10))\n                        (cond [(= (modulo number 10) 0) \"c\"]\n     \
    \                         [(<= (modulo number 10) 3) \"x\"]\n                \
    \              [(<= (modulo number 10) 8) \"l\"]\n                           \
    \   [else \"m\"]))]\n        [(<= number 899)\n         (string-append (int_to_mini_roman\
    \ (/ number 10))\n                        (cond [(= (modulo number 10) 0) \"c\"\
    ]\n                              [(<= (modulo number 10) 3) \"l\"]\n         \
    \                     [(<= (modulo number 10) 8) \"d\"]\n                    \
    \          [else \"m\"]))]\n        [(<= number 499)\n         (string-append\
    \ (int_to_mini_roman (/ number 10))\n                        (cond [(= (modulo\
    \ number 10) 0) \"x\"]\n                              [(<= (modulo number 10)\
    \ 3) \"c\"]\n                              [(<= (modulo number 10) 8) \"d\"]\n\
    \                              [else \"m\"]))]\n        [(<= number 399)\n   \
    \      (string-append (int_to_mini_roman (/ number 10))\n                    \
    \    (cond [(= (modulo number 10) 0) \"x\"]\n                              [(<=\
    \ (modulo number 10) 3) \"c\"]\n                              [(<= (modulo number\
    \ 10) 8) \"l\"]\n                              [else \"c\"]))]\n        [(<= number\
    \ 99)\n         (string-append (int_to_mini_roman (/ number 10))\n           \
    \             (cond [(= (modulo number 10) 0) \"x\"]\n                       \
    \       [(<= (modulo number 10) 3) \"l\"]\n                              [(<=\
    \ (modulo number 10) 8) \"d\"]\n                              [else \"c\"]))]\n\
    \        [(<= number 89)\n         (string-append (int_to_mini_roman (/ number\
    \ 10))\n                        (cond [(= (modulo number 10) 0) \"x\"]\n     \
    \                         [(<= (modulo number 10) 3) \"l\"]\n                \
    \              [(", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 999)\
    \ \"im\"]\n    [(= number 998) \"iim\"]\n    [(= number 997) \"iiim\"]\n    [(=\
    \ number 996) \"ivm\"]\n    [(= number 995) \"vm\"]\n    [(= number 994) \"ivmiv\"\
    ]\n    [(= number 993) \"ivmiiv\"]\n    [(= number 992) \"ivmiiiv\"]\n    [(=\
    \ number 991) \"ivmiviv\"]\n    [(= number 990) \"vmiv\"]\n    [(= number 989)\
    \ \"imiv\"]\n    [(= number 988) \"iimiv\"]\n    [(= number 987) \"iiimiv\"]\n\
    \    [(= number 986) \"ivmiv\"]\n    [(= number 985) \"vmiv\"]\n    [(= number\
    \ 984) \"ivmiviv\"]\n    [(= number 983) \"ivmiiviv\"]\n    [(= number 982) \"\
    ivmiiiviv\"]\n    [(= number 981) \"ivmiviviv\"]\n    [(= number 980) \"vmiviv\"\
    ]\n    [(= number 979) \"imiviv\"]\n    [(= number 978) \"iimiviv\"]\n    [(=\
    \ number 977) \"iiimiviv\"]\n    [(= number 976) \"ivmiviv\"]\n    [(= number\
    \ 975) \"vmiviv\"]\n    [(= number 974) \"ivmiviviv\"]\n    [(= number 973) \"\
    ivmiiviviv\"]\n    [(= number 972) \"ivmiiiviviv\"]\n    [(= number 971) \"ivmiviviviv\"\
    ]\n    [(= number 970) \"vmiviviv\"]\n    [(= number 969) \"imiviviv\"]\n    [(=\
    \ number 968) \"iimiviviv\"]\n    [(= number 967) \"iiimiviviv\"]\n    [(= number\
    \ 966) \"ivmiviviv\"]\n    [(= number 965) \"vmiviviv\"]\n    [(= number 964)\
    \ \"ivmiviviviv\"]\n    [(= number 963) \"ivmi", "  (let ([base [\"\" \"i\" \"\
    ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\" \"viii\" \"ix\"]]\n        [tens [\"\"\
    \ \"x\" \"xx\" \"xxx\" \"xl\" \"l\" \"lx\" \"lxx\" \"lxxx\" \"xc\"]]\n       \
    \ [hund [\"\" \"c\" \"cc\" \"ccc\" \"cd\" \"d\" \"dc\" \"dcc\" \"dccc\" \"cm\"\
    ]]\n        [thou [\"\" \"m\" \"mm\" \"mmm\"]])\n    (string-join (list (vector-ref\
    \ thou (/ number 1000))\n                       (vector-ref hund (/ (% number\
    \ 1000) 100))\n                       (vector-ref tens (/ (% number 100) 10))\n\
    \                       (vector-ref base (% number 10)))\n                 \"\"\
    )))\n", "  (let ([I \"i\"]\n        [V \"v\"]\n        [X \"x\"]\n        [L \"\
    l\"]\n        [C \"c\"]\n        [D \"d\"]\n        [M \"m\"])\n    (cond [(=\
    \ number 1000) (string-append M)]\n          [(= number 900) (string-append C\
    \ M)]\n          [(= number 500) (string-append D)]\n          [(= number 400)\
    \ (string-append C D)]\n          [(= number 100) (string-append C)]\n       \
    \   [(= number 90) (string-append X C)]\n          [(= number 50) (string-append\
    \ L)]\n          [(= number 40) (string-append X L)]\n          [(= number 10)\
    \ (string-append X)]\n          [(= number 9) (string-append I X)]\n         \
    \ [(= number 5) (string-append V)]\n          [(= number 4) (string-append I V)]\n\
    \          [(= number 1) (string-append I)]\n          [else (string-append \"\
    Num not a valid input\")])))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number\
    \ 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"\
    lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n   \
    \ [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600) \"\
    dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number\
    \ 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else (append (int_to_mini_roman\
    \ (- number (modulo number 10)))\n                  (int_to_mini_roman (modulo\
    \ number 10)))]))\n", "  (let ((str-result \"\"))\n    (set! str-result (number-&gt;string\
    \ number))\n    (cond\n      [(equal? (substring str-result 0 1) \"1\")\n    \
    \   (set! str-result (string-append \"x\" str-result))]\n      [(equal? (substring\
    \ str-result 0 1) \"2\")\n       (set! str-result (string-append \"xx\" str-result))]\n\
    \      [(equal? (substring str-result 0 1) \"3\")\n       (set! str-result (string-append\
    \ \"xxx\" str-result))]\n      [(equal? (substring str-result 0 1) \"4\")\n  \
    \     (set! str-result (string-append \"xl\" str-result))]\n      [(equal? (substring\
    \ str-result 0 1) \"5\")\n       (set! str-result (string-append \"l\" str-result))]\n\
    \      [(equal? (substring str-result 0 1) \"6\")\n       (set! str-result (string-append\
    \ \"lx\" str-result))]\n      [(equal? (substring str-result 0 1) \"7\")\n   \
    \    (set! str-result (string-append \"lxx\" str-result))]\n      [(equal? (substring\
    \ str-result 0 1) \"8\")\n       (set! str-result (string-append \"lxxx\" str-result))]\n\
    \      [(equal? (substring str-result 0 1) \"9\")\n       (set! str-result (string-append\
    \ \"xc\" str-result))])\n    (if (&gt; (string-length str-result) 1)\n       \
    \ (begin\n          (set! str-result (substring str-result 1 (string-length str-result)))\n\
    \          (set! str-result (string-append (int_to_mini_roman (string-&gt;number\
    \ str-result)) str-result))\n          (set! str-result (string-append (substring\
    \ str-result 0 (string-length str-result)) str-result)))\n        (string-downcase\
    \ str-result))))\n</code>\n", "  (define (append-list strings)\n    (if (null?\
    \ strings)\n        \"\"\n        (string-append (car strings) (append-list (cdr\
    \ strings)))))\n  (define (integer-to-roman integer-in)\n    (let* ((numerals\
    \ '((\"M\" 1000) (\"CM\" 900) (\"D\" 500) (\"CD\" 400) (\"C\" 100) (\"XC\" 90)\
    \ (\"L\" 50) (\"XL\" 40) (\"X\" 10) (\"IX\" 9) (\"V\" 5) (\"IV\" 4) (\"I\" 1)))\n\
    \           (base-numerals (lambda (numerals-in)\n                           \
    \ (cond ((= integer-in 0) '())\n                                  ((<= (cadr (car\
    \ numerals-in)) integer-in)\n                                   (cons (car (car\
    \ numerals-in)) (base-numerals numerals-in)))\n                              \
    \    (else (base-numerals (cdr numerals-in)))))))\n      (append-list (base-numerals\
    \ numerals))))\n  (integer-to-roman number))\n", "  (define (int_to_mini_roman_helper\
    \ number acc)\n    (cond\n      [(= number 0) (reverse acc)]\n      [(= number\
    \ 1000) (append (list \"m\") (int_to_mini_roman_helper (- number 1000) acc))]\n\
    \      [(= number 900) (append (list \"cm\") (int_to_mini_roman_helper (- number\
    \ 900) acc))]\n      [(= number 500) (append (list \"d\") (int_to_mini_roman_helper\
    \ (- number 500) acc))]\n      [(= number 400) (append (list \"cd\") (int_to_mini_roman_helper\
    \ (- number 400) acc))]\n      [(= number 100) (append (list \"c\") (int_to_mini_roman_helper\
    \ (- number 100) acc))]\n      [(= number 90) (append (list \"xc\") (int_to_mini_roman_helper\
    \ (- number 90) acc))]\n      [(= number 50) (append (list \"l\") (int_to_mini_roman_helper\
    \ (- number 50) acc))]\n      [(= number 40) (append (list \"xl\") (int_to_mini_roman_helper\
    \ (- number 40) acc))]\n      [(= number 10) (append (list \"x\") (int_to_mini_roman_helper\
    \ (- number 10) acc))]\n      [(= number 9) (append (list \"ix\") (int_to_mini_roman_helper\
    \ (- number 9) acc))]\n      [(= number 5) (append (list \"v\") (int_to_mini_roman_helper\
    \ (- number 5) acc))]\n      [(= number 4) (append (list \"iv\") (int_to_mini_roman_helper\
    \ (- number 4) acc))]\n      [(= number 1) (append (list \"i\") (int_to_mini_roman_helper\
    \ (- number 1) acc))]\n      [else (error \"Number should be in 1..1000 range\"\
    )]))\n  (string-join (int_to_mini_roman_helper number '()) \"\"))", "  (define\
    \ digits `(,(modulo number 1000)\n                   ,(modulo (quotient number\
    \ 1000) 100)\n                   ,(modulo (quotient number 100) 10)\n        \
    \           ,(quotient number 10)))\n  (string-join\n   (for/list ([n (in-list\
    \ digits)])\n     (cond\n       [(equal? n 0) \"\"]\n       [(equal? n 1) \"i\"\
    ]\n       [(equal? n 2) \"ii\"]\n       [(equal? n 3) \"iii\"]\n       [(equal?\
    \ n 4) \"iv\"]\n       [(equal? n 5) \"v\"]\n       [(equal? n 6) \"vi\"]\n  \
    \     [(equal? n 7) \"vii\"]\n       [(equal? n 8) \"viii\"]\n       [(equal?\
    \ n 9) \"ix\"]\n       [(equal? n 10) \"x\"]\n       [(equal? n 20) \"xx\"]\n\
    \       [(equal? n 30) \"xxx\"]\n       [(equal? n 40) \"xl\"]\n       [(equal?\
    \ n 50) \"l\"]\n       [(equal? n 60) \"lx\"]\n       [(equal? n 70) \"lxx\"]\n\
    \       [(equal? n 80) \"lxxx\"]\n       [(equal? n 90) \"xc\"]\n       [(equal?\
    \ n 100) \"c\"]\n       [(equal? n 200) \"cc\"]\n       [(equal? n 300) \"ccc\"\
    ]\n       [(equal? n 400) \"cd\"]\n       [(equal? n 500) \"d\"]\n       [(equal?\
    \ n 600) \"dc\"]\n       [(equal? n 700) \"dcc\"]\n       [(equal? n 800) \"dccc\"\
    ]\n       [(equal? n 900) \"cm\"]\n       [(equal? n 1000) \"m\"]))\n   \"\"))",
  "  (define (convert number)\n    (cond ((= number 1) 'i)\n          ((= number 2)\
    \ 'ii)\n          ((= number 3) 'iii)\n          ((= number 4) 'iv)\n        \
    \  ((= number 5) 'v)\n          ((= number 6) 'vi)\n          ((= number 7) 'vii)\n\
    \          ((= number 8) 'viii)\n          ((= number 9) 'ix)\n          ((= number\
    \ 10) 'x)\n          ((= number 20) 'xx)\n          ((= number 30) 'xxx)\n   \
    \       ((= number 40) 'xl)\n          ((= number 50) 'l)\n          ((= number\
    \ 60) 'lx)\n          ((= number 70) 'lxx)\n          ((= number 80) 'lxxx)\n\
    \          ((= number 90) 'xc)\n          ((= number 100) 'c)\n          ((= number\
    \ 200) 'cc)\n          ((= number 300) 'ccc)\n          ((= number 400) 'cd)\n\
    \          ((= number 500) 'd)\n          ((= number 600) 'dc)\n          ((=\
    \ number 700) 'dcc)\n          ((= number 800) 'dccc)\n          ((= number 900)\
    \ 'cm)\n          ((= number 1000) 'm)\n          (else (error \"invalid input:\
    \ \" number))))\n  (string-join (map convert (map (* 10 (reverse (remainder-and-quotient\
    \ number 10))) (reverse (remainder-and-quotient number 10)))) \"\"))\n", "  (define\
    \ (repeat roman n)\n    (if (= n 0) \"\"\n        (string-append roman (repeat\
    \ roman (- n 1)))))\n  (define (numeral-1-3 n)\n    (cond ((= n 0) \"\")\n   \
    \       ((= n 1) \"i\")\n          ((= n 2) \"ii\")\n          ((= n 3) \"iii\"\
    )))\n  (define (numeral-4 n)\n    (cond ((= n 4) \"iv\")\n          ((= n 5) \"\
    v\")\n          ((= n 6) \"vi\")\n          ((= n 7) \"vii\")\n          ((= n\
    \ 8) \"viii\")))\n  (define (numeral-9 n)\n    (cond ((= n 9) \"ix\")\n      \
    \    ((= n 10) \"x\")\n          ((= n 20) \"xx\")\n          ((= n 30) \"xxx\"\
    )))\n  (define (numeral-40 n)\n    (cond ((= n 40) \"xl\")\n          ((= n 50)\
    \ \"l\")\n          ((= n 60) \"lx\")\n          ((= n 70) \"lxx\")\n        \
    \  ((= n 80) \"lxxx\")))\n  (define (numeral-90 n)\n    (cond ((= n 90) \"xc\"\
    )\n          ((= n 100) \"c\")\n          ((= n 200) \"cc\")\n          ((= n\
    \ 300) \"ccc\")))\n  (define (numeral-400 n)\n    (cond ((= n 400) \"cd\")\n \
    \         ((= n 500) \"d\")\n          ((= n 600) \"dc\")\n          ((= n 700)\
    \ \"dcc\")\n          ((= n 800) \"dccc\")))\n  (define (numeral-900 n)\n    (cond\
    \ ((= n 900) \"cm\")\n          ((= n 1000) \"m\")\n          ((= n 2000) \"mm\"\
    )\n          ((= n 3000) \"mmm\")))\n  (define (numeral-10000 n)\n    (cond ((=\
    \ n 10000) \"mmmm\")\n          ((= n 20000) \"mmmmmmmm\")\n          ((= n 30000)\
    \ \"mmmmmmmmmmmm\")))\n  (define (numeral-", "  (cond ((= number 1) \"i\")\n \
    \       ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n  \
    \      ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n\
    \        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((=\
    \ number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number 16)\
    \ \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((= number 50)\
    \ \"l\")\n        ((= number 60) \"lx\")\n        ((= number 70) \"lxx\")\n  \
    \      ((= number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number\
    \ 100) \"c\")\n        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\"\
    )\n        ((= number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((=\
    \ number 600) \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800)\
    \ \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n\
    \        (else (string-append (int_to_mini_roman (/ number 10))\n            \
    \                 (int_to_mini_roman (modulo number 10))))))\n", "  (map (lambda\
    \ (x)\n         (cond\n           [(string=? \"1\" x) \"i\"]\n           [(string=?\
    \ \"5\" x) \"v\"]\n           [(string=? \"10\" x) \"x\"]\n           [(string=?\
    \ \"50\" x) \"l\"]\n           [(string=? \"100\" x) \"c\"]\n           [(string=?\
    \ \"500\" x) \"d\"]\n           [(string=? \"1000\" x) \"m\"]))\n       (number->string\
    \ number)))\n```\n\n```scheme\n#lang racket\n", "  (let ([romans '()])\n    (while\
    \ (> number 0)\n      (if (>= number 1000)\n          (begin\n            (set!\
    \ romans (cons 'm romans))\n            (set! number (- number 1000))))\n    \
    \  (if (>= number 900)\n          (begin\n            (set! romans (cons 'c romans))\n\
    \            (set! romans (cons 'm romans))\n            (set! number (- number\
    \ 900))))\n      (if (>= number 500)\n          (begin\n            (set! romans\
    \ (cons 'd romans))\n            (set! number (- number 500))))\n      (if (>=\
    \ number 400)\n          (begin\n            (set! romans (cons 'c romans))\n\
    \            (set! romans (cons 'd romans))\n            (set! number (- number\
    \ 400))))\n      (if (>= number 100)\n          (begin\n            (set! romans\
    \ (cons 'c romans))\n            (set! number (- number 100))))\n      (if (>=\
    \ number 90)\n          (begin\n            (set! romans (cons 'x romans))\n \
    \           (set! romans (cons 'c romans))\n            (set! number (- number\
    \ 90))))\n      (if (>= number 50)\n          (begin\n            (set! romans\
    \ (cons 'l romans))\n            (set! number (- number 50))))\n      (if (>=\
    \ number 40)\n          (begin\n            (set! romans (cons 'x romans))\n \
    \           (set! romans (cons 'l romans))\n            (set! number (- number\
    \ 40))))\n      (if (>= number 10)\n          (begin\n            (set! romans\
    \ (cons 'x romans))\n            (set! number (- number 10))))\n      (if (>=\
    \ number 9)\n          (begin\n            (set! romans (cons 'i romans))\n  \
    \          (set! romans (cons 'x romans))\n            (set! number (- number\
    \ 9))))\n      (if (>= number 5)\n          (begin\n            (set! romans (cons\
    \ 'v romans))\n            (set! number (- number 5))))\n      (if (>= number\
    \ 4)\n          (begin\n            (set", "  (cond [(= number 1) \"i\"]\n   \
    \     [(= number 2) \"ii\"]\n        [(= number 3) \"iii\"]\n        [(= number\
    \ 4) \"iv\"]\n        [(= number 5) \"v\"]\n        [(= number 6) \"vi\"]\n  \
    \      [(= number 7) \"vii\"]\n        [(= number 8) \"viii\"]\n        [(= number\
    \ 9) \"ix\"]\n        [(= number 10) \"x\"]\n        [(= number 11) \"xi\"]\n\
    \        [(= number 12) \"xii\"]\n        [(= number 13) \"xiii\"]\n        [(=\
    \ number 14) \"xiv\"]\n        [(= number 15) \"xv\"]\n        [(= number 16)\
    \ \"xvi\"]\n        [(= number 17) \"xvii\"]\n        [(= number 18) \"xviii\"\
    ]\n        [(= number 19) \"xix\"]\n        [(= number 20) \"xx\"]\n        [(=\
    \ number 30) \"xxx\"]\n        [(= number 40) \"xl\"]\n        [(= number 50)\
    \ \"l\"]\n        [(= number 60) \"lx\"]\n        [(= number 70) \"lxx\"]\n  \
    \      [(= number 80) \"lxxx\"]\n        [(= number 90) \"xc\"]\n        [(= number\
    \ 100) \"c\"]\n        [(= number 200) \"cc\"]\n        [(= number 300) \"ccc\"\
    ]\n        [(= number 400) \"cd\"]\n        [(= number 500) \"d\"]\n        [(=\
    \ number 600) \"dc\"]\n        [(= number 700) \"dcc\"]\n        [(= number 800)\
    \ \"dccc\"]\n        [(= number 900) \"cm\"]\n        [(= number 1000) \"m\"]\n\
    \        [else (let ([digit1 (remainder number 10)]\n                     [digit2\
    \ (remainder (quotient number 10) 10)]\n                     [digit3 (remainder\
    \ (quotient number 100) 10)]\n                     [digit4 (remainder (quotient\
    \ number 1000) 10)])\n                 (string-append\n                  (case\
    \ digit4\n                    [0 \"\"]\n                    [1 \"m\"]\n      \
    \              [2 \"mm\"]\n                    [3 \"mmm\"])\n                \
    \  (case digit3\n                    [", "  (cond\n    ((<= number 0) \"\")\n\
    \    ((<= number 3) (list-&gt;string (make-list number #\\i)))\n    ((<= number\
    \ 4) \"iv\")\n    ((<= number 8) (string-append \"v\" (int_to_mini_roman (- number\
    \ 5))))\n    ((<= number 9) \"ix\")\n    ((<= number 40) (string-append \"x\"\
    \ (int_to_mini_roman (- number 10))))\n    ((<= number 50) \"xl\")\n    ((<= number\
    \ 90) (string-append \"l\" (int_to_mini_roman (- number 50))))\n    ((<= number\
    \ 100) \"xc\")\n    ((<= number 400) (string-append \"c\" (int_to_mini_roman (-\
    \ number 100))))\n    ((<= number 500) \"cd\")\n    ((<= number 900) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500))))\n    ((<= number 1000) \"cm\")\n\
    \    ((> number 1000) (int_to_mini_roman 1000))))\n</code>\n", "  (define (int_to_mini_roman_it\
    \ number acc)\n    (cond ((= number 0) acc)\n          ((= number 1) (string-append\
    \ acc \"i\"))\n          ((= number 2) (string-append acc \"ii\"))\n         \
    \ ((= number 3) (string-append acc \"iii\"))\n          ((= number 4) (string-append\
    \ acc \"iv\"))\n          ((= number 5) (string-append acc \"v\"))\n         \
    \ ((= number 6) (string-append acc \"vi\"))\n          ((= number 7) (string-append\
    \ acc \"vii\"))\n          ((= number 8) (string-append acc \"viii\"))\n     \
    \     ((= number 9) (string-append acc \"ix\"))\n          ((= number 10) (string-append\
    \ acc \"x\"))\n          ((= number 20) (string-append acc \"xx\"))\n        \
    \  ((= number 30) (string-append acc \"xxx\"))\n          ((= number 40) (string-append\
    \ acc \"xl\"))\n          ((= number 50) (string-append acc \"l\"))\n        \
    \  ((= number 60) (string-append acc \"lx\"))\n          ((= number 70) (string-append\
    \ acc \"lxx\"))\n          ((= number 80) (string-append acc \"lxxx\"))\n    \
    \      ((= number 90) (string-append acc \"xc\"))\n          ((= number 100) (string-append\
    \ acc \"c\"))\n          ((= number 200) (string-append acc \"cc\"))\n       \
    \   ((= number 300) (string-append acc \"ccc\"))\n          ((= number 400) (string-append\
    \ acc \"cd\"))\n          ((= number 500) (string-append acc \"d\"))\n       \
    \   ((= number 600) (string-append acc \"dc\"))\n          ((= number 700) (string-append\
    \ acc \"dcc\"))\n          ((= number 800) (string-append acc \"dccc\"))\n   \
    \       ((= number 900) (string-append acc \"cm\"))\n          ((= number 1000)\
    \ (string-append acc \"m\"))\n          ((> number 1000) \"too big\")\n      \
    \    (else\n           (cond ((>= number 900) (int_to_mini_roman_it (- number\
    \ 900) \"cm\"))\n                 ((>= number 800) (int_to", "    (cond\n    \
    \    [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n        [(= number 3)\
    \ \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5) \"v\"]\n    \
    \    [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n        [(= number\
    \ 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number 10) \"x\"]\n\
    \        [(= number 50) \"l\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 500) \"d\"]\n        [(= number 1000) \"m\"]\n        [(< number 20) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10)))]\n        [(< number 30) (string-append\
    \ \"xx\" (int_to_mini_roman (- number 20)))]\n        [(< number 40) (string-append\
    \ \"xxx\" (int_to_mini_roman (- number 30)))]\n        [(< number 60) (string-append\
    \ \"l\" (int_to_mini_roman (- number 50)))]\n        [(< number 150) (string-append\
    \ \"c\" (int_to_mini_roman (- number 100)))]\n        [(< number 400) (string-append\
    \ \"cc\" (int_to_mini_roman (- number 200)))]\n        [(< number 600) (string-append\
    \ \"ccc\" (int_to_mini_roman (- number 300)))]\n        [(< number 900) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500)))]\n        [(< number 1500) (string-append\
    \ \"m\" (int_to_mini_roman (- number 1000)))]\n        [(< number 2000) (string-append\
    \ \"mm\" (int_to_mini_roman (- number 1500)))]\n        [(< number 3000) (string-append\
    \ \"mmm\" (int_to_mini_roman (- number 2000)))]\n        [else \"\"]\n    )\n\
    )\n", "    (define digits\n        '((0 . \"\") (1 . \"i\") (2 . \"ii\") (3 .\
    \ \"iii\") (4 . \"iv\") (5 . \"v\") (6 . \"vi\") (7 . \"vii\") (8 . \"viii\")\
    \ (9 . \"ix\")))\n    (define (int_to_mini_roman-helper num)\n        (cond ((=\
    \ num 0) \"\")\n              ((and (< 0 num) (< num 10)) (cdr (assoc num digits)))\n\
    \              ((and (< 10 num) (< num 100)) (cdr (assoc (/ num 10) digits)) (int_to_mini_roman-helper\
    \ (% num 10)))\n              ((and (< 100 num) (< num 1000)) (cdr (assoc (/ num\
    \ 100) digits)) (int_to_mini_roman-helper (% num 100)))\n              ((and (<\
    \ 1000 num) (< num 10000)) (cdr (assoc (/ num 1000) digits)) (int_to_mini_roman-helper\
    \ (% num 1000)))))\n    (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (let ([roman '(\"m\" \"cm\" \"d\" \"cd\" \"c\" \"xc\" \"l\" \"xl\" \"x\" \"ix\"\
    \ \"v\" \"iv\" \"i\")]\n        [values '(1000 900 500 400 100 90 50 40 10 9 5\
    \ 4 1)])\n    (let loop ([number number] [output \"\"])\n      (if (= number 0)\n\
    \          output\n          (let ([i (position (first (filter (\u03BB (x) (>=\
    \ x number)) values)) values)])\n            (loop (- number (list-ref values\
    \ i))\n                  (string-append output (list-ref roman i))))))))\n", " \
    \ (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number\
    \ 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n \
    \       ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number\
    \ 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n\
    \        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n        ((=\
    \ number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((= number 15)\
    \ \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17) \"xvii\")\n\
    \        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\")\n        ((=\
    \ number 20) \"xx\")\n        ((= number 21) \"xxi\")\n        ((= number 22)\
    \ \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((= number 24) \"xxiv\"\
    )\n        ((= number 25) \"xxv\")\n        ((= number 26) \"xxvi\")\n       \
    \ ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\")\n        ((= number\
    \ 29) \"xxix\")\n        ((= number 30) \"xxx\")\n        ((= number 31) \"xxxi\"\
    )\n        ((= number 32) \"xxxii\")\n        ((= number 33) \"xxxiii\")\n   \
    \     ((= number 34) \"xxxiv\")\n        ((= number 35) \"xxxv\")\n        ((=\
    \ number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\")\n        ((= number\
    \ 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n        ((= number 40)\
    \ \"xl\")\n        ((= number 41) \"xli\")\n        ((= number 42) \"xlii\")\n\
    \        ((= number 43) \"xliii\")\n        ((= number 44) \"xliv\")\n       \
    \ ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n        ((= number\
    \ 47", "  (local ((define (char-of x)\n            (cond ((= x 0) \"\")\n    \
    \              ((= x 1) \"i\")\n                  ((= x 2) \"ii\")\n         \
    \         ((= x 3) \"iii\")\n                  ((= x 4) \"iv\")\n            \
    \      ((= x 5) \"v\")\n                  ((= x 6) \"vi\")\n                 \
    \ ((= x 7) \"vii\")\n                  ((= x 8) \"viii\")\n                  ((=\
    \ x 9) \"ix\"))))\n    (cond ((= number 0) \"\")\n          ((= number 1000) \"\
    m\")\n          ((= number 999) (string-append \"im\" (char-of 0)))\n        \
    \  ((= number 998) (string-append \"im\" (char-of 1)))\n          ((= number 997)\
    \ (string-append \"im\" (char-of 2)))\n          ((= number 996) (string-append\
    \ \"im\" (char-of 3)))\n          ((= number 995) (string-append \"im\" (char-of\
    \ 4)))\n          ((= number 994) (string-append \"im\" (char-of 5)))\n      \
    \    ((= number 993) (string-append \"im\" (char-of 6)))\n          ((= number\
    \ 992) (string-append \"im\" (char-of 7)))\n          ((= number 991) (string-append\
    \ \"im\" (char-of 8)))\n          ((= number 990) (string-append \"im\" (char-of\
    \ 9)))\n          ((= number 989) (string-append \"ix\" (char-of 0)))\n      \
    \    ((= number 988) (string-append \"ix\" (char-of 1)))\n          ((= number\
    \ 987) (string-append \"ix\" (char-of 2)))\n          ((= number 986) (string-append\
    \ \"ix\" (char-of 3)))\n          ((= number 985) (string-append \"ix\" (char-of\
    \ 4)))\n          ((= number 984) (string-append \"ix\" (char-of 5)))\n      \
    \    ((= number 983) (string-append \"ix\" (char-of 6)))\n          ((= number\
    \ 982) (string-append \"ix\" (char-of", "  (if (= number 0)\n      \"\"\n    \
    \  (let* ([numbers [0 1 2 3 4 5 6 7 8 9 10 50 100 500 1000]]\n             [symbols\
    \ [\"\" \"i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\" \"viii\" \"ix\" \"x\"\
    \ \"l\" \"c\" \"d\" \"m\"]]\n             [idx (binsearch number numbers)])\n\
    \        (string-append (list-ref symbols idx)\n                       (int_to_mini_roman\
    \ (- number (list-ref numbers idx)))))))\n", "  (cond ((= number 1) \"i\")\n \
    \       ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n  \
    \      ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n\
    \        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((=\
    \ number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number 16)\
    \ \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((= number 50)\
    \ \"l\")\n        ((= number 60) \"lx\")\n        ((= number 70) \"lxx\")\n  \
    \      ((= number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number\
    \ 100) \"c\")\n        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\"\
    )\n        ((= number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((=\
    \ number 600) \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800)\
    \ \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n\
    \        (else \"unknown\")))\n", "  (local ((define (one-to-nine number)\n  \
    \          (cond ((= number 0) \"\")\n                  ((= number 1) \"i\")\n\
    \                  ((= number 2) \"ii\")\n                  ((= number 3) \"iii\"\
    )\n                  ((= number 4) \"iv\")\n                  ((= number 5) \"\
    v\")\n                  ((= number 6) \"vi\")\n                  ((= number 7)\
    \ \"vii\")\n                  ((= number 8) \"viii\")\n                  ((= number\
    \ 9) \"ix\")))\n          (define (ten-to-ninety number)\n            (cond ((=\
    \ number 0) \"\")\n                  ((= number 1) \"x\")\n                  ((=\
    \ number 2) \"xx\")\n                  ((= number 3) \"xxx\")\n              \
    \    ((= number 4) \"xl\")\n                  ((= number 5) \"l\")\n         \
    \         ((= number 6) \"lx\")\n                  ((= number 7) \"lxx\")\n  \
    \                ((= number 8) \"lxxx\")\n                  ((= number 9) \"xc\"\
    )))\n          (define (hundred-to-nine-hundred number)\n            (cond ((=\
    \ number 0) \"\")\n                  ((= number 1) \"c\")\n                  ((=\
    \ number 2) \"cc\")\n                  ((= number 3) \"ccc\")\n              \
    \    ((= number 4) \"cd\")\n                  ((= number 5) \"d\")\n         \
    \         ((= number 6) \"dc\")\n                  ((= number 7) \"dcc\")\n  \
    \                ((= number 8) \"dccc\")\n                  ((= number 9) \"cm\"\
    )))\n          (define (thousand-to-nine-thousand number)\n            (cond ((=\
    \ number 0) \"\")\n                  ((= number 1) \"m\")\n                  ((=\
    \ number 2) \"mm\")\n                  ((= number 3) \"mmm\")\n              \
    \    ((= number 4) \"mmmm\")\n                  ((= number 5) \"mmmmm\")\n   \
    \               ((= number 6) \"mmmmmm\")\n                  ((= number 7) \"\
    mmmmmmm\")\n                  ((= number 8) \"mmmmmmmm\")\n                  ((=\
    \ number 9) \"mmmmmmmmm\"))))\n    (cond ((< number 10) (one-to-nine number))\n\
    \          ((< number 100) (string-append (", "  \"Convert a positive integer\
    \ to a roman numeral, in lowercase.\"\n  (if (not (number? number))\n      (error\
    \ \"number required\"))\n  (if (not (and (<= 1 number) (<= number 1000)))\n  \
    \    (error \"number must be within 1 to 1000\"))\n  (define (int_to_mini_roman-aux\
    \ n)\n    (cond\n      ((= n 0) \"\")\n      ((= n 1) \"i\")\n      ((= n 2) \"\
    ii\")\n      ((= n 3) \"iii\")\n      ((= n 4) \"iv\")\n      ((= n 5) \"v\")\n\
    \      ((= n 6) \"vi\")\n      ((= n 7) \"vii\")\n      ((= n 8) \"viii\")\n \
    \     ((= n 9) \"ix\")\n      ((= n 10) \"x\")\n      ((= n 20) \"xx\")\n    \
    \  ((= n 30) \"xxx\")\n      ((= n 40) \"xl\")\n      ((= n 50) \"l\")\n     \
    \ ((= n 60) \"lx\")\n      ((= n 70) \"lxx\")\n      ((= n 80) \"lxxx\")\n   \
    \   ((= n 90) \"xc\")\n      ((= n 100) \"c\")\n      ((= n 200) \"cc\")\n   \
    \   ((= n 300) \"ccc\")\n      ((= n 400) \"cd\")\n      ((= n 500) \"d\")\n \
    \     ((= n 600) \"dc\")\n      ((= n 700) \"dcc\")\n      ((= n 800) \"dccc\"\
    )\n      ((= n 900) \"cm\")\n      ((= n 1000) \"m\")\n      (else (error \"internal\
    \ error\"))))\n  (string-downcase (int_to_mini_roman-aux number)))\n", "  (regexp-replace*\
    \ #rx\"I+\"\n\t\t   (regexp-replace* #rx\"X+\"\n\t\t\t\t    (regexp-replace* #rx\"\
    C+\"\n\t\t\t\t\t\t     (regexp-replace* #rx\"M+\"\n\t\t\t\t\t\t\t\t      (string-append\
    \ (make-string (/ number 1000) #\\M)\n\t\t\t\t\t\t\t\t\t\t     (make-string (/\
    \ (modulo number 1000) 100) #\\C)\n\t\t\t\t\t\t\t\t\t\t     (make-string (/ (modulo\
    \ number 100) 10) #\\X)\n\t\t\t\t\t\t\t\t\t\t     (make-string (modulo number\
    \ 10) #\\I))\n\t\t\t\t\t\t\t\t      #\"MMMM\" \"M\")\n\t\t\t\t\t\t     #\"CCCC\"\
    \ \"C\")\n\t\t\t\t    #\"XXXX\" \"X\")\n\t\t   #\"IIII\" \"I\"))\n```\n\n```racket\n\
    #lang racket\n", "  (if (zero? number)\n      \"\"\n      (let ([(quotient remainder)\
    \ (quotient/remainder number 10)])\n        (append (int_to_mini_roman quotient)\n\
    \                (string-append\n                 (cond [(zero? remainder) \"\"\
    ]\n                       [(= remainder 1) \"i\"]\n                       [(=\
    \ remainder 2) \"ii\"]\n                       [(= remainder 3) \"iii\"]\n   \
    \                    [(= remainder 4) \"iv\"]\n                       [(= remainder\
    \ 5) \"v\"]\n                       [(= remainder 6) \"vi\"]\n               \
    \        [(= remainder 7) \"vii\"]\n                       [(= remainder 8) \"\
    viii\"]\n                       [(= remainder 9) \"ix\"]\n                   \
    \    [else \"\"])\n                 \"\")))))\n", "  (define (int_to_mini_roman-iter\
    \ number)\n    (cond ((< number 4) (build-string number \"i\"))\n          ((<\
    \ number 9) (string-append \"v\" (build-string (- number 5) \"i\")))\n       \
    \   ((< number 40) (string-append (build-string (/ number 10) \"x\") (int_to_mini_roman-iter\
    \ (modulo number 10))))\n          ((< number 50) (string-append \"xl\" (int_to_mini_roman-iter\
    \ (- number 40))))\n          ((< number 90) (string-append \"l\" (int_to_mini_roman-iter\
    \ (- number 50))))\n          ((< number 100) (string-append (build-string (/\
    \ number 10) \"c\") (int_to_mini_roman-iter (modulo number 10))))\n          ((<\
    \ number 400) (string-append (build-string (/ number 100) \"c\") (int_to_mini_roman-iter\
    \ (modulo number 100))))\n          ((< number 500) (string-append \"cd\" (int_to_mini_roman-iter\
    \ (- number 400))))\n          ((< number 900) (string-append \"d\" (int_to_mini_roman-iter\
    \ (- number 500))))\n          ((< number 1000) (string-append (build-string (/\
    \ number 100) \"m\") (int_to_mini_roman-iter (modulo number 100))))\n        \
    \  (else \"m\")))\n  (int_to_mini_roman-iter number))\n", "  (cond\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number 500) \"d\"]\n    [(=\
    \ number 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(= number 90) \"xc\"]\n\
    \    [(= number 50) \"l\"]\n    [(= number 40) \"xl\"]\n    [(= number 10) \"\
    x\"]\n    [(= number 9) \"ix\"]\n    [(= number 5) \"v\"]\n    [(= number 4) \"\
    iv\"]\n    [(= number 1) \"i\"]\n    [else (cond\n            [(> number 1000)\
    \ (string-append \"m\" (int_to_mini_roman (- number 1000)))]\n            [(>\
    \ number 500) (string-append \"d\" (int_to_mini_roman (- number 500)))]\n    \
    \        [(> number 100) (string-append \"c\" (int_to_mini_roman (- number 100)))]\n\
    \            [(> number 50) (string-append \"l\" (int_to_mini_roman (- number\
    \ 50)))]\n            [(> number 10) (string-append \"x\" (int_to_mini_roman (-\
    \ number 10)))]\n            [(> number 5) (string-append \"v\" (int_to_mini_roman\
    \ (- number 5)))]\n            [else (string-append \"i\" (int_to_mini_roman (-\
    \ number 1)))])]))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"\
    ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5)\
    \ \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"\
    ]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16)\
    \ \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(=\
    \ number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"\
    ]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"\
    lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number\
    \ 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(=\
    \ number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"\
    ]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800)\
    \ \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(=\
    \ number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"\
    mmmiv\"]\n    [(= number 5000) \"v\"]\n    [(= number 6000) \"vm\"]\n    [(= number\
    \ 7000) \"vmm\"]\n    [(= number 8000) \"vmmm\"]\n    [(= number 9000) \"mx\"\
    ]\n    [else \"\"]))\n", "  (define (int_to_roman number)\n    (cond [(= number\
    \ 1) \"I\"]\n          [(= number 5) \"V\"]\n          [(= number 10) \"X\"]\n\
    \          [(= number 50) \"L\"]\n          [(= number 100) \"C\"]\n         \
    \ [(= number 500) \"D\"]\n          [(= number 1000) \"M\"]\n          [(< number\
    \ 4) (string-append (int_to_roman 1) (int_to_roman (- number 1)))]\n         \
    \ [(< number 9) (string-append (int_to_roman 5) (int_to_roman (- number 5)))]\n\
    \          [(< number 40) (string-append (int_to_roman 10) (int_to_roman (- number\
    \ 10)))]\n          [(< number 90) (string-append (int_to_roman 50) (int_to_roman\
    \ (- number 50)))]\n          [(< number 400) (string-append (int_to_roman 100)\
    \ (int_to_roman (- number 100)))]\n          [(< number 900) (string-append (int_to_roman\
    \ 500) (int_to_roman (- number 500)))]\n          [(>= number 400) (string-append\
    \ (int_to_roman 1) (int_to_roman 1000) (int_to_roman (- number 900)))]\n     \
    \     [(>= number 90) (string-append (int_to_roman 10) (int_to_roman 100) (int_to_roman\
    \ (- number 90)))]\n          [(>= number 40) (string-append (int_to_roman 1)\
    \ (int_to_roman 50) (int_to_roman (- number 40)))]\n          [(>= number 9) (string-append\
    \ (int_to_roman 1) (int_to_roman 10) (int_to_roman (- number 9)))]\n         \
    \ [(>= number 4) (string-append (int_to_roman 1) (int_to_roman 5) (int_to_roman\
    \ (- number 4)))]))\n  (string-upper->lower (int_to_roman number)))\n", "  (define\
    \ (number-string number length)\n    (cond ((and (= number 0) (> length 0))\n\
    \           \"\")\n          ((and (= number 0) (= length 0))\n           (make-string\
    \ 1 #\\0))\n          (else\n           (let* ((digit (modulo number 10))\n  \
    \                (rest (quotient number 10)))\n             (string-append (number-string\
    \ rest (- length 1))\n                            (make-string digit #\\i))))))\n\
    \  (define (int-to-digits number length)\n    (number-string number length))\n\
    \  (define (convert number)\n    (cond ((< number 10) (string-append (int-to-digits\
    \ number 1) \"\"))\n          ((< number 100) (string-append (int-to-digits number\
    \ 2) \"\"))\n          ((< number 1000) (string-append (int-to-digits number 3)\
    \ \"\"))\n          (else (string-append (int-to-digits number 4) \"\"))))\n \
    \ (define (build-roman string)\n    (cond ((string=? string \"iiii\") \"iv\")\n\
    \          ((string=? string \"iiiii\") \"v\")\n          ((string=? string \"\
    viiii\") \"ix\")\n          ((string=? string \"viiiii\") \"x\")\n          ((string=?\
    \ string \"xiiii\") \"il\")\n          ((string=? string \"xiiiii\") \"l\")\n\
    \          ((string=? string \"liiii\") \"ic\")\n          ((string=? string \"\
    liiiii\") \"c\")\n          ((string=? string \"ciiii\") \"id\")\n          ((string=?\
    \ string \"ciiiii\") \"d\")\n          ((string=? string \"diiii\") \"im\")\n\
    \          ((string=? string \"diiiii\") \"m\")\n          ((string=? string \"\
    mi\") \"m\")\n          ((string=? string \"mii\") \"mm\")\n          ((string=?\
    \ string \"miii\") \"mmm\")\n          ((string=? string \"miiii\") \"mmmm\")\n\
    \          ((string=? string \"miiiii\") \"mmmmm\")\n          ((string=? string\
    \ \"miiv\") \"miv\")\n          ((string=", "    (define (recur num result)\n\
    \        (match num\n            [(0) result]\n            [(1) (recur (- num\
    \ 1) (string-append result \"i\"))]\n            [(2) (recur (- num 2) (string-append\
    \ result \"ii\"))]\n            [(3) (recur (- num 3) (string-append result \"\
    iii\"))]\n            [(4) (recur (- num 4) (string-append result \"iv\"))]\n\
    \            [(5) (recur (- num 5) (string-append result \"v\"))]\n          \
    \  [(6) (recur (- num 6) (string-append result \"vi\"))]\n            [(7) (recur\
    \ (- num 7) (string-append result \"vii\"))]\n            [(8) (recur (- num 8)\
    \ (string-append result \"viii\"))]\n            [(9) (recur (- num 9) (string-append\
    \ result \"ix\"))]\n            [(10) (recur (- num 10) (string-append result\
    \ \"x\"))]\n            [(20) (recur (- num 20) (string-append result \"xx\"))]\n\
    \            [(30) (recur (- num 30) (string-append result \"xxx\"))]\n      \
    \      [(40) (recur (- num 40) (string-append result \"xl\"))]\n            [(50)\
    \ (recur (- num 50) (string-append result \"l\"))]\n            [(60) (recur (-\
    \ num 60) (string-append result \"lx\"))]\n            [(70) (recur (- num 70)\
    \ (string-append result \"lxx\"))]\n            [(80) (recur (- num 80) (string-append\
    \ result \"lxxx\"))]\n            [(90) (recur (- num 90) (string-append result\
    \ \"xc\"))]\n            [(100) (recur (- num 100) (string-append result \"c\"\
    ))]\n            [(200) (recur (- num 200) (string-append result \"cc\"))]\n \
    \           [(300) (recur (- num 300) (string-append result \"ccc\"))]\n     \
    \       [(400) (recur (- num 400) (string-append result \"cd\"))]\n          \
    \  [(500) (recur (- num 500) (string-append result \"d\"))]", "  (define (int_to_mini_roman-helper\
    \ number roman-result)\n    (cond\n      [(= number 0) roman-result]\n      [(>=\
    \ number 1000) (int_to_mini_roman-helper (- number 1000) (string-append roman-result\
    \ \"m\"))]\n      [(>= number 900) (int_to_mini_roman-helper (- number 900) (string-append\
    \ roman-result \"cm\"))]\n      [(>= number 500) (int_to_mini_roman-helper (-\
    \ number 500) (string-append roman-result \"d\"))]\n      [(>= number 400) (int_to_mini_roman-helper\
    \ (- number 400) (string-append roman-result \"cd\"))]\n      [(>= number 100)\
    \ (int_to_mini_roman-helper (- number 100) (string-append roman-result \"c\"))]\n\
    \      [(>= number 90) (int_to_mini_roman-helper (- number 90) (string-append\
    \ roman-result \"xc\"))]\n      [(>= number 50) (int_to_mini_roman-helper (- number\
    \ 50) (string-append roman-result \"l\"))]\n      [(>= number 40) (int_to_mini_roman-helper\
    \ (- number 40) (string-append roman-result \"xl\"))]\n      [(>= number 10) (int_to_mini_roman-helper\
    \ (- number 10) (string-append roman-result \"x\"))]\n      [(>= number 9) (int_to_mini_roman-helper\
    \ (- number 9) (string-append roman-result \"ix\"))]\n      [(>= number 5) (int_to_mini_roman-helper\
    \ (- number 5) (string-append roman-result \"v\"))]\n      [(>= number 4) (int_to_mini_roman-helper\
    \ (- number 4) (string-append roman-result \"iv\"))]\n      [(>= number 1) (int_to_mini_roman-helper\
    \ (- number 1) (string-append roman-result \"i\"))]))\n  (int_to_mini_roman-helper\
    \ number \"\"))\n\n", "  ;; extract the digits from the input number and put them\
    \ into a list\n  (define digits\n    (map string->number\n      (string-split\
    \ (number->string number) \"\" #:pad-with \"0\")))\n  ;; 1. check the input, if\
    \ the input is not within range return false\n  (if (> number 1000)\n    #f\n\
    \    ;; if the input is within range, convert the number to a mini roman string\
    \ and return it\n    (displayln\n      (string-join\n        (reverse\n      \
    \    (map mini-roman-digit->string digits))\n        \"\"))))\n", "  (int_to_mini_roman_helper\
    \ (list number)))\n", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 900)\
    \ \"cm\"]\n    [(= number 500) \"d\"]\n    [(= number 400) \"cd\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 90) \"xc\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 40) \"xl\"]\n    [(= number 10) \"x\"]\n    [(= number 9) \"ix\"]\n \
    \   [(= number 5) \"v\"]\n    [(= number 4) \"iv\"]\n    [(= number 1) \"i\"]\n\
    \    [else (string-append (int_to_mini_roman (quotient number 10))\n         \
    \                (int_to_mini_roman (remainder number 10)))]))\n", "  (define\
    \ (convert-to-roman-string number roman-letters)\n    (if (= number 0)\n     \
    \   \"\"\n        (string-append (list-ref roman-letters (- number 1))\n     \
    \                  (convert-to-roman-string (- number 1) roman-letters))))\n \
    \ (string-downcase (convert-to-roman-string number\n                         \
    \                   (list \"I\" \"V\" \"X\" \"L\" \"C\" \"D\" \"M\"))))\n", " \
    \ (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 50) \"l\"]\n    [(= number 100) \"\
    c\"]\n    [(= number 500) \"d\"]\n    [(= number 1000) \"m\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(=\
    \ number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"\
    xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(=\
    \ number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"\
    xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(= number 20) \"xx\"]\n    [(=\
    \ number 20", '  (define (process-quotient num denom ', "  (cond [(< number 1)\
    \ \"\"]\n        [(= number 1) \"i\"]\n        [(= number 2) \"ii\"]\n       \
    \ [(= number 3) \"iii\"]\n        [(= number 4) \"iv\"]\n        [(= number 5)\
    \ \"v\"]\n        [(= number 6) \"vi\"]\n        [(= number 7) \"vii\"]\n    \
    \    [(= number 8) \"viii\"]\n        [(= number 9) \"ix\"]\n        [(= number\
    \ 10) \"x\"]\n        [(= number 11) \"xi\"]\n        [(= number 12) \"xii\"]\n\
    \        [(= number 13) \"xiii\"]\n        [(= number 14) \"xiv\"]\n        [(=\
    \ number 15) \"xv\"]\n        [(= number 16) \"xvi\"]\n        [(= number 17)\
    \ \"xvii\"]\n        [(= number 18) \"xviii\"]\n        [(= number 19) \"xix\"\
    ]\n        [(= number 20) \"xx\"]\n        [(= number 30) \"xxx\"]\n        [(=\
    \ number 40) \"xl\"]\n        [(= number 50) \"l\"]\n        [(= number 60) \"\
    lx\"]\n        [(= number 70) \"lxx\"]\n        [(= number 80) \"lxxx\"]\n   \
    \     [(= number 90) \"xc\"]\n        [(= number 100) \"c\"]\n        [(= number\
    \ 200) \"cc\"]\n        [(= number 300) \"ccc\"]\n        [(= number 400) \"cd\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 600) \"dc\"]\n        [(=\
    \ number 700) \"dcc\"]\n        [(= number 800) \"dccc\"]\n        [(= number\
    \ 900) \"cm\"]\n        [(= number 1000) \"m\"]\n        [else (string-append\
    \ (int_to_mini_roman (/ number 10))\n                             (int_to_mini_roman\
    \ (modulo number 10)))]))\n", "  (error \"TODO: Implement int_to_mini_roman!\"\
    ))\n", "  ;; TODO: implement me!\n  (let ([map (hash \"M\" 1000\n            \
    \      \"CM\" 900\n                  \"D\" 500\n                  \"CD\" 400\n\
    \                  \"C\" 100\n                  \"XC\" 90\n                  \"\
    L\" 50\n                  \"XL\" 40\n                  \"X\" 10\n            \
    \      \"IX\" 9\n                  \"V\" 5\n                  \"IV\" 4\n     \
    \             \"I\" 1)])\n    (letrec ([_to-mini-roman (lambda (number romans)\n\
    \                               (cond [(<= number 0) romans]\n               \
    \                      [else (let ([roman (first romans)])\n                 \
    \                            (if (>= number (hash-ref map roman))\n          \
    \                                       (_to-mini-roman (- number (hash-ref map\
    \ roman)) (string-append romans roman))\n                                    \
    \             (_to-mini-roman number (rest romans))))]))])\n      (_to-mini-roman\
    \ number (list)))))\n```\n\n### Problem 2.2\n\n#### Requirements\n\nGiven an integer\
    \ n and a binary string, return the result of n-times repeating\nthe binary string.\n\
    \nExamples:\n\n```\n>>> (bin_str_multiply 4 \"11\")\n\"1111\"\n>>> (bin_str_multiply\
    \ 3 \"111\")\n\"111111\"\n>>> (bin_str_multiply 5 \"100\")\n\"100100100100100\"\
    \n```\n\n#### Implementation\n\n```racket\n#lang racket\n", "  (cond ((= number\
    \ 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n \
    \       ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number\
    \ 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n\
    \        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 20) \"xx\")\n        ((= number 30) \"xxx\")\n        ((= number 40) \"xl\"\
    )\n        ((= number 50) \"l\")\n        ((= number 60) \"lx\")\n        ((=\
    \ number 70) \"lxx\")\n        ((= number 80) \"lxxx\")\n        ((= number 90)\
    \ \"xc\")\n        ((= number 100) \"c\")\n        ((= number 200) \"cc\")\n \
    \       ((= number 300) \"ccc\")\n        ((= number 400) \"cd\")\n        ((=\
    \ number 500) \"d\")\n        ((= number 600) \"dc\")\n        ((= number 700)\
    \ \"dcc\")\n        ((= number 800) \"dccc\")\n        ((= number 900) \"cm\"\
    )\n        ((= number 1000) \"m\")\n        ((= number 0) \"\")\n        (else\
    \ (string-append\n               (int_to_mini_roman (/ number 10))\n         \
    \      (int_to_mini_roman (modulo number 10))))))\n", "  (cond ((or (= number\
    \ 1) (= number 2) (= number 3)) (string-append (make-string number #\\i) \"\"\
    ))\n        ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n        ((or\
    \ (= number 6) (= number 7) (= number 8)) (string-append \"v\" (make-string (-\
    \ number 5) #\\i)))\n        ((= number 9) \"ix\")\n        ((= number 10) \"\
    x\")\n        ((or (= number 20) (= number 30) (= number 40) (= number 50) (=\
    \ number 60) (= number 70) (= number 80) (= number 90)) (string-append (make-string\
    \ (/ number 10) #\\x) \"\"))\n        ((= number 100) \"c\")\n        ((= number\
    \ 500) \"d\")\n        ((= number 1000) \"m\")\n        ((or (= number 11) (=\
    \ number 12) (= number 13) (= number 14) (= number 15) (= number 16) (= number\
    \ 17) (= number 18) (= number 19)) (string-append \"x\" (int_to_mini_roman (-\
    \ number 10))))\n        ((or (= number 21) (= number 22) (= number 23) (= number\
    \ 24) (= number 25) (= number 26) (= number 27) (= number 28) (= number 29)) (string-append\
    \ \"xx\" (int_to_mini_roman (- number 20))))\n        ((or (= number 31) (= number\
    \ 32) (= number 33) (= number 34) (= number 35) (= number 36) (= number 37) (=\
    \ number 38) (= number 39)) (string-append \"xxx\" (int_to_mini_roman (- number\
    \ 30))))\n        ((or (= number 41) (= number 42) (= number 43) (= number 44)\
    \ (= number 45) (= number 46) (= number 47) (= number 48) (= number 49)) (string-append\
    \ \"xl\" (int_to_mini_roman (- number 40))))\n        ((or (= number 51) (= number\
    \ 52) (= number 53) (= number 54) (= number 55) (= number 56) (= number 57) (=\
    \ number 58) (= number 59)) (string-append \"lv\" (int_to_mini_roman (- number\
    \ 50))))\n        ((or (= number 61) (= number 62) (= number 63) (= number 64)\
    \ (= number 65)", "  (define (int_to_mini_roman_iter s number)\n    (cond\n  \
    \    ((= number 0) s)\n      ((= number 1) (string-append s \"i\"))\n      ((=\
    \ number 2) (string-append s \"ii\"))\n      ((= number 3) (string-append s \"\
    iii\"))\n      ((= number 4) (string-append s \"iv\"))\n      ((= number 5) (string-append\
    \ s \"v\"))\n      ((= number 6) (string-append s \"vi\"))\n      ((= number 7)\
    \ (string-append s \"vii\"))\n      ((= number 8) (string-append s \"viii\"))\n\
    \      ((= number 9) (string-append s \"ix\"))\n      ((= number 10) (string-append\
    \ s \"x\"))\n      ((= number 40) (string-append s \"xl\"))\n      ((= number\
    \ 50) (string-append s \"l\"))\n      ((= number 90) (string-append s \"xc\"))\n\
    \      ((= number 100) (string-append s \"c\"))\n      ((= number 400) (string-append\
    \ s \"cd\"))\n      ((= number 500) (string-append s \"d\"))\n      ((= number\
    \ 900) (string-append s \"cm\"))\n      ((= number 1000) (string-append s \"m\"\
    ))\n      ((< number 10) (int_to_mini_roman_iter s (- number 1)))\n      ((< number\
    \ 40) (int_to_mini_roman_iter s (- number 10)))\n      ((< number 50) (int_to_mini_roman_iter\
    \ s (- number 40)))\n      ((< number 90) (int_to_mini_roman_iter s (- number\
    \ 50)))\n      ((< number 100) (int_to_mini_roman_iter s (- number 90)))\n   \
    \   ((< number 400) (int_to_mini_roman_iter s (- number 100)))\n      ((< number\
    \ 500) (int_to_mini_roman_iter s (- number 400)))\n      ((< number 900) (int_to_mini_roman_iter\
    \ s (- number 500)))\n      ((< number 1000) (int_to_mini_roman_iter s (- number\
    \ 900)))\n      ((> number 1000) (int_to", "  (cond\n    [(<= number 0) \"0\"\
    ]\n    [(<= number 1000) (convert number 1000 \"m\" \"\")]\n    [else \"error\"\
    ]))\n", "  (define (get_numeral number)\n    (cond ((>= number 1000) (cons \"\
    m\" (- number 1000)))\n          ((>= number 500) (cons \"d\" (- number 500)))\n\
    \          ((>= number 100) (cons \"c\" (- number 100)))\n          ((>= number\
    \ 50) (cons \"l\" (- number 50)))\n          ((>= number 10) (cons \"x\" (- number\
    \ 10)))\n          ((>= number 5) (cons \"v\" (- number 5)))\n          ((>= number\
    \ 1) (cons \"i\" (- number 1)))))\n  (cond ((= number 0) \"\")\n        ((= number\
    \ 1) \"i\")\n        ((= number 5) \"v\")\n        ((= number 10) \"x\")\n   \
    \     ((= number 50) \"l\")\n        ((= number 100) \"c\")\n        ((= number\
    \ 500) \"d\")\n        ((= number 1000) \"m\")\n        (else (let ((num (get_numeral\
    \ number)))\n                (let ((n (car num))\n                      (dec (cdr\
    \ num)))\n                  (cond ((> dec 0) (string-append n (int_to_mini_roman\
    \ dec)))\n                        (else n)))))))", "  (define (int_to_mini_roman-helper\
    \ k m c d u)\n    (cond ((= k 0) \"\")\n          ((< k 5) (string-append (make-string\
    \ k u)\n                                  (int_to_mini_roman-helper 0 m c d u)))\n\
    \          ((= k 5) (string-append m\n                                  (int_to_mini_roman-helper\
    \ 0 m c d u)))\n          ((< k 9) (string-append m\n                        \
    \          (make-string (- k 5) u)\n                                  (int_to_mini_roman-helper\
    \ 0 m c d u)))\n          ((= k 9) (string-append c\n                        \
    \          (int_to_mini_roman-helper 0 m c d u)))))\n  (define (thousands-to-mini-roman\
    \ k)\n    (string-append (make-string k \"m\")\n                   (int_to_mini-roman-helper\
    \ 0 \"m\" \"m\" \"m\" \"m\")))\n  (define (hundreds-to-mini-roman k)\n    (int_to_mini-roman-helper\
    \ k \"c\" \"m\" \"d\" \"c\"))\n  (define (tens-to-mini-roman k)\n    (int_to_mini-roman-helper\
    \ k \"x\" \"c\" \"l\" \"x\"))\n  (define (ones-to-mini-roman k)\n    (int_to_mini-roman-helper\
    \ k \"i\" \"x\" \"v\" \"i\"))\n  (string-append (thousands-to-mini-roman (/ number\
    \ 1000))\n                 (hundreds-to-mini-roman (/ (% number 1000) 100))\n\
    \                 (tens-to-mini-roman (/ (% number 100) 10))\n               \
    \  (ones-to-mini-roman (% number 10))))\n```\n\nIn the week3 exercises directory,\
    \ run:\n\n```racket\nraco test week3-test.rkt\n```\n\nYou should get\n\n```\n\
    Welcome to DrRacket, version 6.1.1 [3m].\nLanguage: racket, with debugging; memory\
    \ limit: 256 MB.\nraco test: (submod \"week3", "  (define (int_to_mini_roman_iterative\
    \ n)\n    (define (get_roman_digit digit roman)\n      (cond\n        [(equal?\
    \ digit 0) \"\"]\n        [(equal? digit 1) (string-append roman \"i\")]\n   \
    \     [(equal? digit 2) (string-append roman \"ii\")]\n        [(equal? digit\
    \ 3) (string-append roman \"iii\")]\n        [(equal? digit 4) (string-append\
    \ roman \"iv\")]\n        [(equal? digit 5) (string-append roman \"v\")]\n   \
    \     [(equal? digit 6) (string-append roman \"vi\")]\n        [(equal? digit\
    \ 7) (string-append roman \"vii\")]\n        [(equal? digit 8) (string-append\
    \ roman \"viii\")]\n        [(equal? digit 9) (string-append roman \"ix\")]))\n\
    \    (cond\n      [(equal? n 0) \"\"]\n      [(< n 10) (get_roman_digit n \"\"\
    )]\n      [(< n 100) (get_roman_digit (modulo n 10)\n                        \
    \          (get_roman_digit (quotient n 10) \"x\"))]\n      [(< n 1000) (get_roman_digit\
    \ (modulo n 10)\n                                   (get_roman_digit (modulo (quotient\
    \ n 10) 10)\n                                                    (get_roman_digit\
    \ (quotient n 100) \"c\")))]\n      [(>= n 1000) (get_roman_digit (modulo n 10)\n\
    \                                    (get_roman_digit (modulo (quotient n 10)\
    \ 10)\n                                                     (get_roman_digit (modulo\
    \ (quotient n 100) 10)\n                                                     \
    \                 (get_roman_digit (quotient n 1000) \"m\"))))]))\n  (string-downcase\
    \ (int_to_mini_roman_iterative number)))\n", "  (string-downcase (int_to_roman\
    \ number)))\n", "  (define (power i)\n    (let loop ([n number] [power 1])\n \
    \     (cond [(= n (* power i)) i]\n            [(< n (* power i)) (loop n (* power\
    \ i))]\n            [else (loop (- n (* power i)) (* power i))])))\n  (define\
    \ (char_of i)\n    (cond [(= i 1) 'i]\n          [(= i 5) 'v]\n          [(= i\
    \ 10) 'x]\n          [(= i 50) 'l]\n          [(= i 100) 'c]\n          [(= i\
    \ 500) 'd]\n          [(= i 1000) 'm]))\n  (define (helper i)\n    (let ([char\
    \ (char_of i)])\n      (cond [(= i 1) (string char)]\n            [(= i 10) (string\
    \ char)]\n            [(= i 100) (string char)]\n            [(= i 1000) (string\
    \ char)]\n            [(< number (* 5 i)) (string (char_of (* 5 i)) char)]\n \
    \           [(< number (* 10 i)) (string char (char_of (* 10 i)))]\n         \
    \   [else (string (char_of (* 10 i)) char)])))\n  (string-join (map helper (reverse\
    \ (map power (range 0 4))))))", "  (match number\n    [(and (? between 1 1000)\
    \ (guard (not (between? number 100 1000)))) (concat-with-interpose (map (cut int_to_mini_roman\
    \ <>) (integer->list number)) \"\")]\n    [(and (? between 1 1000) (guard (between?\
    \ number 100 1000))) (concat-with-interpose (map (cut int_to_mini_roman <>) (integer->list\
    \ number)) \"\")]\n    [1 \"i\"]\n    [2 \"ii\"]\n    [3 \"iii\"]\n    [4 \"iv\"\
    ]\n    [5 \"v\"]\n    [6 \"vi\"]\n    [7 \"vii\"]\n    [8 \"viii\"]\n    [9 \"\
    ix\"]\n    [10 \"x\"]\n    [20 \"xx\"]\n    [30 \"xxx\"]\n    [40 \"xl\"]\n  \
    \  [50 \"l\"]\n    [60 \"lx\"]\n    [70 \"lxx\"]\n    [80 \"lxxx\"]\n    [90 \"\
    xc\"]\n    [100 \"c\"]\n    [200 \"cc\"]\n    [300 \"ccc\"]\n    [400 \"cd\"]\n\
    \    [500 \"d\"]\n    [600 \"dc\"]\n    [700 \"dcc\"]\n    [800 \"dccc\"]\n  \
    \  [900 \"cm\"]\n    [1000 \"m\"]))\n", "  (define (int_to_mini_roman_iter number\
    \ acc)\n    (cond ((= number 0) (reverse acc))\n          ((>= number 1000) (int_to_mini_roman_iter\
    \ (- number 1000) (cons \"m\" acc)))\n          ((>= number 900) (int_to_mini_roman_iter\
    \ (- number 900) (cons \"cm\" acc)))\n          ((>= number 500) (int_to_mini_roman_iter\
    \ (- number 500) (cons \"d\" acc)))\n          ((>= number 400) (int_to_mini_roman_iter\
    \ (- number 400) (cons \"cd\" acc)))\n          ((>= number 100) (int_to_mini_roman_iter\
    \ (- number 100) (cons \"c\" acc)))\n          ((>= number 90) (int_to_mini_roman_iter\
    \ (- number 90) (cons \"xc\" acc)))\n          ((>= number 50) (int_to_mini_roman_iter\
    \ (- number 50) (cons \"l\" acc)))\n          ((>= number 40) (int_to_mini_roman_iter\
    \ (- number 40) (cons \"xl\" acc)))\n          ((>= number 10) (int_to_mini_roman_iter\
    \ (- number 10) (cons \"x\" acc)))\n          ((>= number 9) (int_to_mini_roman_iter\
    \ (- number 9) (cons \"ix\" acc)))\n          ((>= number 5) (int_to_mini_roman_iter\
    \ (- number 5) (cons \"v\" acc)))\n          ((>= number 4) (int_to_mini_roman_iter\
    \ (- number 4) (cons \"iv\" acc)))\n          ((>= number 1) (int_to_mini_roman_iter\
    \ (- number 1) (cons \"i\" acc)))))\n  (int_to_mini_roman_iter number '()))",
  "  (cond ((= number 1000) \"m\")\n        ((= number 900) \"cm\")\n        ((= number\
    \ 500) \"d\")\n        ((= number 400) \"cd\")\n        ((= number 100) \"c\"\
    )\n        ((= number 90) \"xc\")\n        ((= number 50) \"l\")\n        ((=\
    \ number 40) \"xl\")\n        ((= number 10) \"x\")\n        ((= number 9) \"\
    ix\")\n        ((= number 5) \"v\")\n        ((= number 4) \"iv\")\n        ((=\
    \ number 1) \"i\")\n        ((<= 1 number 1000)\n         (string-append\n   \
    \       (int_to_mini_roman (quotient number 10))\n          (int_to_mini_roman\
    \ (remainder number 10))))))\n", "  (cond\n    [(<= number 0) \"\"]\n    [(<=\
    \ number 1000)\n     (cond\n       [(>= number 900)\n        (append \"cm\" (int_to_mini_roman\
    \ (- number 900)))]\n       [(>= number 500)\n        (append \"d\" (int_to_mini_roman\
    \ (- number 500)))]\n       [(>= number 400)\n        (append \"cd\" (int_to_mini_roman\
    \ (- number 400)))]\n       [(>= number 100)\n        (append \"c\" (int_to_mini_roman\
    \ (- number 100)))]\n       [(>= number 90)\n        (append \"xc\" (int_to_mini_roman\
    \ (- number 90)))]\n       [(>= number 50)\n        (append \"l\" (int_to_mini_roman\
    \ (- number 50)))]\n       [(>= number 40)\n        (append \"xl\" (int_to_mini_roman\
    \ (- number 40)))]\n       [(>= number 10)\n        (append \"x\" (int_to_mini_roman\
    \ (- number 10)))]\n       [(>= number 9)\n        (append \"ix\" (int_to_mini_roman\
    \ (- number 9)))]\n       [(>= number 5)\n        (append \"v\" (int_to_mini_roman\
    \ (- number 5)))]\n       [(>= number 4)\n        (append \"iv\" (int_to_mini_roman\
    \ (- number 4)))]\n       [(>= number 1)\n        (append \"i\" (int_to_mini_roman\
    \ (- number 1)))]\n       [else \"\"])]\n    [else \"\"]))\n", "  \"Documentation\"\
    \n  (if (< number 1)\n      (error \"Restriction: 1 <= num <= 1000\"))\n  (if\
    \ (> number 1000)\n      (error \"Restriction: 1 <= num <= 1000\"))\n  (define\
    \ (convert_digit number symbol)\n    (cond ((= number 0) \"\")\n          ((=\
    \ number 1) symbol)\n          ((= number 2) (string-append symbol symbol))\n\
    \          ((= number 3) (string-append symbol symbol symbol))\n          ((=\
    \ number 4) (string-append symbol \"v\"))\n          ((= number 5) \"v\")\n  \
    \        ((= number 6) (string-append \"v\" symbol))\n          ((= number 7)\
    \ (string-append \"v\" symbol symbol))\n          ((= number 8) (string-append\
    \ \"v\" symbol symbol symbol))\n          ((= number 9) (string-append symbol\
    \ \"x\"))))\n  (cond ((= number 0) \"\")\n        ((= number 1) \"i\")\n     \
    \   ((= number 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number\
    \ 4) \"iv\")\n        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n  \
    \      ((= number 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number\
    \ 9) \"ix\")\n        ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n\
    \        ((= number 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((=\
    \ number 14) \"xiv\")\n        ((= number 15) \"xv\")\n        ((= number 16)\
    \ \"xvi\")\n        ((= number 17) \"xvii\")\n        ((= number 18) \"xviii\"\
    )\n        ((= number 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((=\
    \ number 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((= number 50)\
    \ \"l\")\n        ((= number 60) \"lx\")\n        ((= number 70) \"lxx\")\n  \
    \      ((= number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number\
    \ 100) \"c\")\n       ", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2)\
    \ \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number\
    \ 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"\
    ]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16)\
    \ \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(=\
    \ number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"\
    ]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"\
    lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number\
    \ 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(=\
    \ number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"\
    ]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800)\
    \ \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(>\
    \ number 1000) (error \"Invalid number\")]\n    [else (string-append\n       \
    \    (int_to_mini_roman (/ number 10))\n           (int_to_mini_roman (modulo\
    \ number 10)))\n    ]))\n", "  (match number\n    [0 \"\"]\n    [1 \"i\"]\n  \
    \  [2 \"ii\"]\n    [3 \"iii\"]\n    [4 \"iv\"]\n    [5 \"v\"]\n    [6 \"vi\"]\n\
    \    [7 \"vii\"]\n    [8 \"viii\"]\n    [9 \"ix\"]\n    [10 \"x\"]\n    [11 \"\
    xi\"]\n    [12 \"xii\"]\n    [13 \"xiii\"]\n    [14 \"xiv\"]\n    [15 \"xv\"]\n\
    \    [16 \"xvi\"]\n    [17 \"xvii\"]\n    [18 \"xviii\"]\n    [19 \"xix\"]\n \
    \   [20 \"xx\"]\n    [21 \"xxi\"]\n    [22 \"xxii\"]\n    [23 \"xxiii\"]\n   \
    \ [24 \"xxiv\"]\n    [25 \"xxv\"]\n    [26 \"xxvi\"]\n    [27 \"xxvii\"]\n   \
    \ [28 \"xxviii\"]\n    [29 \"xxix\"]\n    [30 \"xxx\"]\n    [31 \"xxxi\"]\n  \
    \  [32 \"xxxii\"]\n    [33 \"xxxiii\"]\n    [34 \"xxxiv\"]\n    [35 \"xxxv\"]\n\
    \    [36 \"xxxvi\"]\n    [37 \"xxxvii\"]\n    [38 \"xxxviii\"]\n    [39 \"xxxix\"\
    ]\n    [40 \"xl\"]\n    [41 \"xli\"]\n    [42 \"xlii\"]\n    [43 \"xliii\"]\n\
    \    [44 \"xliv\"]\n    [45 \"xlv\"]\n    [46 \"xlvi\"]\n    [47 \"xlvii\"]\n\
    \    [48 \"xlviii\"]\n    [49 \"xlix\"]\n    [50 \"l\"]\n    [51 \"li\"]\n   \
    \ [52 \"lii\"]\n    [53 \"liii\"]\n    [54 \"liv\"]\n    [55 \"lv\"]\n    [56\
    \ \"lvi\"]\n    [57 \"lvii\"]\n    [58 \"lviii\"]\n    [59 \"lix\"]\n    [60 \"\
    lx\"]\n    [61 \"lxi\"]\n    [62 \"lxii\"]\n    [63 \"lx", "  (match number [1\
    \ (string-append \"i\")]\n               [2 (string-append \"ii\")]\n        \
    \       [3 (string-append \"iii\")]\n               [4 (string-append \"iv\")]\n\
    \               [5 (string-append \"v\")]\n               [6 (string-append \"\
    vi\")]\n               [7 (string-append \"vii\")]\n               [8 (string-append\
    \ \"viii\")]\n               [9 (string-append \"ix\")]\n               [10 (string-append\
    \ \"x\")]\n               [11 (string-append \"xi\")]\n               [12 (string-append\
    \ \"xii\")]\n               [13 (string-append \"xiii\")]\n               [14\
    \ (string-append \"xiv\")]\n               [15 (string-append \"xv\")]\n     \
    \          [16 (string-append \"xvi\")]\n               [17 (string-append \"\
    xvii\")]\n               [18 (string-append \"xviii\")]\n               [19 (string-append\
    \ \"xix\")]\n               [20 (string-append \"xx\")]\n               [21 (string-append\
    \ \"xxi\")]\n               [22 (string-append \"xxii\")]\n               [23\
    \ (string-append \"xxiii\")]\n               [24 (string-append \"xxiv\")]\n \
    \              [25 (string-append \"xxv\")]\n               [26 (string-append\
    \ \"xxvi\")]\n               [27 (string-append \"xxvii\")]\n               [28\
    \ (string-append \"xxviii\")]\n               [29 (string-append \"xxix\")]\n\
    \               [30 (string-append \"xxx\")]\n               [31 (string-append\
    \ \"xxxi\")]\n               [32 (string-append \"xxxii\")]\n               [33\
    \ (string-append \"xxxiii\")]\n               [34 (string-append \"xxxiv\")]\n\
    \               [35 (string-append \"xxxv\")]\n               [36 (string-append\
    \ \"xxxvi\")]\n               [37 (string-append \"xxxvii\")]\n              \
    \ [38 (string-append \"xxxviii\")]\n               [39 (string-append \"xxxix\"\
    )]\n               [40 (string-", "  (define (int_to_mini_roman-iter number roman-string)\n\
    \    (cond ((= number 0) roman-string)\n          ((= number 1) (string-append\
    \ roman-string \"i\"))\n          ((= number 2) (string-append roman-string \"\
    ii\"))\n          ((= number 3) (string-append roman-string \"iii\"))\n      \
    \    ((= number 4) (string-append roman-string \"iv\"))\n          ((= number\
    \ 5) (string-append roman-string \"v\"))\n          ((= number 6) (string-append\
    \ roman-string \"vi\"))\n          ((= number 7) (string-append roman-string \"\
    vii\"))\n          ((= number 8) (string-append roman-string \"viii\"))\n    \
    \      ((= number 9) (string-append roman-string \"ix\"))\n          ((= number\
    \ 10) (string-append roman-string \"x\"))\n          ((= number 20) (string-append\
    \ roman-string \"xx\"))\n          ((= number 30) (string-append roman-string\
    \ \"xxx\"))\n          ((= number 40) (string-append roman-string \"xl\"))\n \
    \         ((= number 50) (string-append roman-string \"l\"))\n          ((= number\
    \ 60) (string-append roman-string \"lx\"))\n          ((= number 70) (string-append\
    \ roman-string \"lxx\"))\n          ((= number 80) (string-append roman-string\
    \ \"lxxx\"))\n          ((= number 90) (string-append roman-string \"xc\"))\n\
    \          ((= number 100) (string-append roman-string \"c\"))\n          ((=\
    \ number 200) (string-append roman-string \"cc\"))\n          ((= number 300)\
    \ (string-append roman-string \"ccc\"))\n          ((= number 400) (string-append\
    \ roman-string \"cd\"))\n          ((= number 500) (string-append roman-string\
    \ \"d\"))\n          ((= number 600) (string-append roman-string \"dc\"))\n  \
    \        ((= number 700) (string-append roman-string \"dcc\"))\n          ((=\
    \ number 800) (string-append roman-string \"dccc\"))", "    (define (int_to_mini_roman_with-accumulator\
    \ number accumulator)\n      (cond\n        [(> number 1000) (int_to_mini_roman_with-accumulator\
    \ (- number 1000) (string-append accumulator \"m\"))]\n        [(> number 900)\
    \ (int_to_mini_roman_with-accumulator (- number 900) (string-append accumulator\
    \ \"cm\"))]\n        [(> number 500) (int_to_mini_roman_with-accumulator (- number\
    \ 500) (string-append accumulator \"d\"))]\n        [(> number 400) (int_to_mini_roman_with-accumulator\
    \ (- number 400) (string-append accumulator \"cd\"))]\n        [(> number 100)\
    \ (int_to_mini_roman_with-accumulator (- number 100) (string-append accumulator\
    \ \"c\"))]\n        [(> number 90) (int_to_mini_roman_with-accumulator (- number\
    \ 90) (string-append accumulator \"xc\"))]\n        [(> number 50) (int_to_mini_roman_with-accumulator\
    \ (- number 50) (string-append accumulator \"l\"))]\n        [(> number 40) (int_to_mini_roman_with-accumulator\
    \ (- number 40) (string-append accumulator \"xl\"))]\n        [(> number 10) (int_to_mini_roman_with-accumulator\
    \ (- number 10) (string-append accumulator \"x\"))]\n        [(> number 9) (int_to_mini_roman_with-accumulator\
    \ (- number 9) (string-append accumulator \"ix\"))]\n        [(> number 5) (int_to_mini_roman_with-accumulator\
    \ (- number 5) (string-append accumulator \"v\"))]\n        [(> number 4) (int_to_mini_roman_with-accumulator\
    \ (- number 4) (string-append accumulator \"iv\"))]\n        [(> number 1) (int_to_mini_roman_with-accumulator\
    \ (- number 1) (string-append accumulator \"i\"))]\n        [else accumulator]))\n\
    \    (string-downcase (int_to_mini_roman_with-accumulator number", "  (let ([int-to-roman-map\n\
    \         (make-vector 1001 \"\")])\n    (define (make-romans n map)\n      (when\
    \ (not (eq? n 0))\n        (if (< n 4)\n            (vector-set! map n (string-append\
    \ \"i\" (vector-ref map (- n 1))))\n          (if (< n 5)\n              (vector-set!\
    \ map n \"iv\")\n            (if (< n 9)\n                (vector-set! map n (string-append\
    \ \"v\" (vector-ref map (- n 5))))\n              (if (< n 10)\n             \
    \     (vector-set! map n \"ix\")\n                  (if (< n 40)\n           \
    \           (vector-set! map n (string-append \"x\" (vector-ref map (- n 10))))\n\
    \                      (if (< n 50)\n                          (vector-set! map\
    \ n \"xl\")\n                          (if (< n 90)\n                        \
    \      (vector-set! map n (string-append \"l\" (vector-ref map (- n 50))))\n \
    \                             (if (< n 100)\n                                \
    \  (vector-set! map n \"xc\")\n                                  (if (< n 400)\n\
    \                                      (vector-set! map n (string-append \"c\"\
    \ (vector-ref map (- n 100))))\n                                      (if (< n\
    \ 500)\n                                          (vector-set! map n \"cd\")\n\
    \                                          (if (< n 900)\n                   \
    \                           (vector-set! map n (string-append \"d\" (vector-ref\
    \ map (- n 500))))\n                                              (if (< n 1000)\n\
    \                                                  (vector-set! map n \"cm\")\n\
    \                                                  (vector-set! map n (string-append\
    \ \"m\" (vector-ref map (- n 1000))))))))))))))))))\n      (make-romans n map))\n\
    \    (make-romans 1000 int-to-roman-map)\n    (string-downcase (vector-ref int-to-roman-map\
    \ number))))\n```\n\n```java\npackage com.galvanize;\n\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\n\npublic class NumberUtils\
    \ {", "  (mini-string-reverse (int-to-mini-roman-aux number)))\n", "  (cond\n\
    \    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number\
    \ 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n  \
    \  [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"\
    xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number\
    \ 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"xxii\"]\n   \
    \ [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(= number 25)\
    \ \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"]\n    [(=\
    \ number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n    [(= number 30) \"\
    xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n    [(= number\
    \ 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"\
    ]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37) \"xxxvii\"]\n    [(= number\
    \ 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 41) \"xli\"]\n    [(= number 42) \"xlii\"]\n    [(= number 43)\
    \ \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(=\
    \ number 46) \"xlvi\"]\n    [(=", "  (define (helper num)\n    (cond ((= num 1000)\
    \ (string-append \"m\" (helper (- num 1000))))\n          ((= num 900) (string-append\
    \ \"cm\" (helper (- num 900))))\n          ((= num 500) (string-append \"d\" (helper\
    \ (- num 500))))\n          ((= num 400) (string-append \"cd\" (helper (- num\
    \ 400))))\n          ((= num 100) (string-append \"c\" (helper (- num 100))))\n\
    \          ((= num 90) (string-append \"xc\" (helper (- num 90))))\n         \
    \ ((= num 50) (string-append \"l\" (helper (- num 50))))\n          ((= num 40)\
    \ (string-append \"xl\" (helper (- num 40))))\n          ((= num 10) (string-append\
    \ \"x\" (helper (- num 10))))\n          ((= num 9) (string-append \"ix\" (helper\
    \ (- num 9))))\n          ((= num 5) (string-append \"v\" (helper (- num 5))))\n\
    \          ((= num 4) (string-append \"iv\" (helper (- num 4))))\n          ((=\
    \ num 1) (string-append \"i\" (helper (- num 1))))\n          (else \"\")))\n\
    \  (string-downcase (helper number)))\n", "  (local [(define (int_to_string numeral)\n\
    \            (string-downcase (int->roman numeral)))\n          (define (int_to_mini_roman-iter\
    \ n string-list)\n            (if (zero? n)\n                (apply string-append\
    \ (reverse string-list))\n                (local [(define (key-cons key)\n   \
    \                       (cons key (lookup (symbol->string key) MAPPING)))\n  \
    \                      (define (mapping-set key)\n                          (set!\
    \ MAPPING (alist-set (key-cons key) (key-cons key) MAPPING)))\n              \
    \          (define (possible-reductions val)\n                          (reverse\
    \ (filter (\u03BB (x) (and (not (zero? (remainder n x)))\n                   \
    \                                     (or (zero? (remainder n (sub1 x)))\n   \
    \                                                         (zero? (remainder n\
    \ (sub1 (sub1 x)))))))\n                                           (map (\u03BB\
    \ (x) (string->number (int_to_string x))) (map car (reverse MAPPING))))))\n  \
    \                      (define (best-reduction val)\n                        \
    \  (if (null? val)\n                              (car (lookup (symbol->string\
    \ (car (reverse MAPPING))) MAPPING))\n                              (car (lookup\
    \ (symbol->string (car val)) MAPPING))))]\n                  (int_to_mini_roman-iter\
    \ (remainder n (best-reduction (possible-reductions n)))\n                   \
    \                       (cons (int_to_string (best-reduction (possible-reductions\
    \ n))) string-list)))))])\n    (int_to_mini_roman-iter number '()))\n```\n\n###\
    \ Code for Problem #4\n\n```\n#lang racket\n", "  (define (decompose n r)\n  \
    \  (if (zero? n)\n        r\n        (if (zero? (modulo n 10))\n            (decompose\
    \ (quotient n 10) r)\n            (decompose (quotient n 10) (cons (modulo n 10)\
    \ r)))))\n  (define (convert_to_mini_roman n)\n    (define (lookup digit)\n  \
    \    (cond\n        [(equal? digit 1) 'i]\n        [(equal? digit 2) 'ii]\n  \
    \      [(equal? digit 3) 'iii]\n        [(equal? digit 4) 'iv]\n        [(equal?\
    \ digit 5) 'v]\n        [(equal? digit 6) 'vi]\n        [(equal? digit 7) 'vii]\n\
    \        [(equal? digit 8) 'viii]\n        [(equal? digit 9) 'ix]\n        [(equal?\
    \ digit 10) 'x]))\n    (map lookup n))\n  (define (concat_symbols l)\n    (if\
    \ (null? l)\n        \"\"\n        (string-append (car l) (concat_symbols (cdr\
    \ l)))))\n  (concat_symbols (convert_to_mini_roman (decompose number '()))))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"\
    xxii\"]\n    [(= number 23) \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(=\
    \ number 25) \"xxv\"]\n    [(= number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"\
    ]\n    [(= number 28) \"xxviii\"]\n    [(= number 29) \"xxix\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 31) \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n\
    \    [(= number 33) \"xxxiii\"]\n    [(= number 34) \"xxxiv\"]\n    [(= number\
    \ 35) \"xxxv\"]\n    [(= number 36) \"xxxvi\"]\n    [(= number 37) \"xxxvii\"\
    ]\n    [(= number 38) \"xxxviii\"]\n    [(= number 39) \"xxxix\"]\n    [(= number\
    \ 40) \"xl\"]\n    [(= number 41) \"xli\"]\n    [(= number 42) \"xlii\"]\n   \
    \ [(= number 43) \"xliii\"]\n    [(= number 44) \"xliv\"]\n    [(= number 45)\
    \ \"xlv\"]\n    [(= number 46) \"xlvi\"]\n    [(=", "  (define (helper number\
    \ n to_char)\n    (if (> number n)\n        (string-append (helper (- number n)\
    \ n to_char)\n                       (helper number (- n 1) to_char))\n      \
    \  (if (= number n)\n            (string-append to_char (helper number (- n 1)\
    \ to_char))\n            \"\")))\n  (helper number 1000 \"m\")\n  )\n```\n\n###\
    \ Golang\n\n```go\npackage roman\n\nimport (\n\t\"strings\"\n)\n\n// Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n// and return it\
    \ in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> (int_to_mini_roman\
    \ 19)\n// \"xix\"\n// >>> (int_to_mini_roman 152)\n// \"clii\"\n// >>> (int_to_mini_roman\
    \ 426)\n// \"cdxxvi\"\nfunc IntToMiniRoman(number int) string {\n\tvar left int\n\
    \tvar result string\n\tfor left = number; left > 0; {\n\t\tvar roman string\n\t\
    \tvar current int\n\t\tswitch {\n\t\tcase left >= 1000:\n\t\t\troman = \"m\"\n\
    \t\t\tcurrent = 1000\n\t\tcase left >= 500:\n\t\t\troman = \"d\"\n\t\t\tcurrent\
    \ = 500\n\t\tcase left >= 100:\n\t\t\troman = \"c\"\n\t\t\tcurrent = 100\n\t\t\
    case left >= 50:\n\t\t\troman = \"l\"\n\t\t\tcurrent = 50\n\t\tcase left >= 10:\n\
    \t\t\troman = \"x\"\n\t\t\tcurrent = 10\n\t\tcase left >= 5:\n\t\t\troman = \"\
    v\"\n\t\t\tcurrent = 5\n\t\tcase left >= 1:\n\t\t\troman = \"i\"\n\t\t\tcurrent\
    \ = 1\n\t\t}\n\t\ttimes := left / current\n\t\tresult += strings.Repeat(roman,\
    \ times)\n\t\tleft = left % current\n\t}\n\treturn result\n}\n```\n\n### Bash\n\
    \n```bash\n# Given a positive integer, obtain its roman", "  (define (int_to_mini_roman_helper\
    \ number-to-convert result-string)\n    (cond\n      [(= number-to-convert 1000)\
    \ (string-append result-string \"m\")]\n      [(>= number-to-convert 900) (int_to_mini_roman_helper\
    \ (- number-to-convert 900) (string-append result-string \"cm\"))]\n      [(>=\
    \ number-to-convert 500) (int_to_mini_roman_helper (- number-to-convert 500) (string-append\
    \ result-string \"d\"))]\n      [(>= number-to-convert 400) (int_to_mini_roman_helper\
    \ (- number-to-convert 400) (string-append result-string \"cd\"))]\n      [(>=\
    \ number-to-convert 100) (int_to_mini_roman_helper (- number-to-convert 100) (string-append\
    \ result-string \"c\"))]\n      [(>= number-to-convert 90) (int_to_mini_roman_helper\
    \ (- number-to-convert 90) (string-append result-string \"xc\"))]\n      [(>=\
    \ number-to-convert 50) (int_to_mini_roman_helper (- number-to-convert 50) (string-append\
    \ result-string \"l\"))]\n      [(>= number-to-convert 40) (int_to_mini_roman_helper\
    \ (- number-to-convert 40) (string-append result-string \"xl\"))]\n      [(>=\
    \ number-to-convert 10) (int_to_mini_roman_helper (- number-to-convert 10) (string-append\
    \ result-string \"x\"))]\n      [(>= number-to-convert 9) (int_to_mini_roman_helper\
    \ (- number-to-convert 9) (string-append result-string \"ix\"))]\n      [(>= number-to-convert\
    \ 5) (int_to_mini_roman_helper (- number-to-convert 5) (string-append result-string\
    \ \"v\"))]\n      [(>= number-to-convert 4) (int_to_mini", "  (local [(define\
    \ (int_to_mini_roman_helper number)\n           (cond [(= number 1000) '(\"m\"\
    )]\n                 [(<= 900 number) '(\"cm\")]\n                 [(<= 500 number)\
    \ '(\"d\")]\n                 [(<= 400 number) '(\"cd\")]\n                 [(<=\
    \ 100 number) '(\"c\")]\n                 [(<= 90 number) '(\"xc\")]\n       \
    \          [(<= 50 number) '(\"l\")]\n                 [(<= 40 number) '(\"xl\"\
    )]\n                 [(<= 10 number) '(\"x\")]\n                 [(<= 9 number)\
    \ '(\"ix\")]\n                 [(<= 5 number) '(\"v\")]\n                 [(<=\
    \ 4 number) '(\"iv\")]\n                 [(<= 1 number) '(\"i\")]))]\n    (for/fold\
    \ ([roman '()]) ([i (in-range 1 (number->string number) length)])\n      (append\
    \ roman (int_to_mini_roman_helper (string->number (substring (number->string number)\
    \ i (+ i 1))))))))\n", "  (define romans\n    '((1000 . \"m\")\n      (900 . \"\
    cm\")\n      (500 . \"d\")\n      (400 . \"cd\")\n      (100 . \"c\")\n      (90\
    \ . \"xc\")\n      (50 . \"l\")\n      (40 . \"xl\")\n      (10 . \"x\")\n   \
    \   (9 . \"ix\")\n      (5 . \"v\")\n      (4 . \"iv\")\n      (1 . \"i\")))\n\
    \  (define (make-list n r)\n    (if (zero? n)\n        '()\n        (cons r (make-list\
    \ (- n 1) r))))\n  (define (build-roman remaining romans)\n    (if (null? romans)\n\
    \        \"\"\n        (let* ((pair (car romans))\n               (value (car\
    \ pair))\n               (roman (cdr pair))\n               (num (floor (/ remaining\
    \ value))))\n          (string-append (apply string-append (make-list num roman))\n\
    \                         (build-roman (- remaining (* num value)) (cdr romans))))))\n\
    \  (define (to-lower str)\n    (string-append\n     (string-downcase (substring\
    \ str 0 1))\n     (substring str 1)))\n  (to-lower (build-roman number romans)))\n\
    ```\n\nA quick check reveals that it seems to work.\n\n```racket\n>>> (int_to_mini_roman\
    \ 19)\n\"xix\"\n>>> (int_to_mini_roman 152)\n\"clii\"\n>>> (int_to_mini_roman\
    \ 426)\n\"cdxxvi\"\n```\n\n### [mini-roman-to-int](http://www.mathblog.dk/project-euler-89-roman-numerals/)\n\
    \nReturn the int given a string roman numeral.\n\n```racket\n#lang racket\n",
  "  (define (convert-digit digit roman-digit roman-digit-5 roman-digit-10)\n    (cond\n\
    \      ((= digit 0) \"\")\n      ((= digit 1) roman-digit)\n      ((= digit 2)\
    \ (string-append roman-digit roman-digit))\n      ((= digit 3) (string-append\
    \ roman-digit roman-digit roman-digit))\n      ((= digit 4) (string-append roman-digit\
    \ roman-digit-5))\n      ((= digit 5) roman-digit-5)\n      ((= digit 6) (string-append\
    \ roman-digit-5 roman-digit))\n      ((= digit 7) (string-append roman-digit-5\
    \ roman-digit roman-digit))\n      ((= digit 8) (string-append roman-digit-5 roman-digit\
    \ roman-digit roman-digit))\n      ((= digit 9) (string-append roman-digit roman-digit-10))))\n\
    \  (define (convert-roman-part number roman-digit roman-digit-5 roman-digit-10)\n\
    \    (string-append\n      (convert-digit (/ number 10) roman-digit roman-digit-5\
    \ roman-digit-10)\n      (convert-digit (modulo number 10) roman-digit roman-digit-5\
    \ roman-digit-10)))\n  (cond\n    ((<= number 0) (error \"Number should be greater\
    \ than 0\"))\n    ((<= number 1000)\n      (string-append\n        (convert-roman-part\
    \ (/ number 100) \"c\" \"d\" \"m\")\n        (convert-roman-part (modulo number\
    \ 100) \"x\" \"l\" \"c\")\n        (convert-roman-part (modulo number 10) \"i\"\
    \ \"v\" \"x\")))))\n", "  (cond\n    [(<= number 1000) (convert number)]\n   \
    \ [else \"\"]))\n", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"\
    ]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"\
    v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8)\
    \ \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number\
    \ 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n   \
    \ [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"\
    ]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number\
    \ 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(=\
    \ number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n\
    \    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90)\
    \ \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number\
    \ 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n   \
    \ [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"\
    dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [else\n\
    \      (string-append\n        (if (and (>= number 10) (not (zero? (modulo number\
    \ 10))))\n            (string-append (int_to_mini_roman (/ number 10)) \"0\"))\n\
    \        (int_to_mini_roman (modulo number 10)))\n    ]))\n", "  (cond ((= number\
    \ 1000) \"m\")\n        ((= number 999) \"im\")\n        ((= number 998) \"iim\"\
    )\n        ((= number 997) \"iiim\")\n        ((= number 996) \"ivm\")\n     \
    \   ((= number 995) \"vm\")\n        ((= number 994) \"vvm\")\n        ((= number\
    \ 993) \"vvvm\")\n        ((= number 992) \"ixm\")\n        ((= number 991) \"\
    xm\")\n        ((= number 990) \"xcm\")\n        ((= number 989) \"xcim\")\n \
    \       ((= number 988) \"xciim\")\n        ((= number 987) \"xciim\")\n     \
    \   ((= number 986) \"xcivm\")\n        ((= number 985) \"xcvm\")\n        ((=\
    \ number 984) \"xcvvm\")\n        ((= number 983) \"xcvvvm\")\n        ((= number\
    \ 982) \"xcixm\")\n        ((= number 981) \"xcxm\")\n        ((= number 980)\
    \ \"xcxcm\")\n        ((= number 979) \"xcxcim\")\n        ((= number 978) \"\
    xcxciim\")\n        ((= number 977) \"xcxciim\")\n        ((= number 976) \"xcxcivm\"\
    )\n        ((= number 975) \"xcxcvm\")\n        ((= number 974) \"xcxcvvm\")\n\
    \        ((= number 973) \"xcxcvvvm\")\n        ((= number 972) \"xcxcixm\")\n\
    \        ((= number 971) \"xcxcxm\")\n        ((= number 970) \"xcxcxcm\")\n \
    \       ((= number 969) \"xcxcxcim\")\n        ((= number 968) \"xcxcxciim\")\n\
    \        ((= number 967) \"xcxcxciim\")\n        ((= number 966) \"xcxcxcivm\"\
    )\n        ((= number 965) \"xcxcxcvm\")\n        ((= number 964) \"xcxcxcvvm\"\
    )\n        ((= number 963) \"xcxcxcvvvm\")\n        ((= number 962) \"xcxcxcixm\"\
    )\n       ", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n  \
    \      ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number\
    \ 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n \
    \       ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number\
    \ 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"xii\")\n\
    \        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n        ((=\
    \ number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number 17)\
    \ \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"xix\"\
    )\n        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\")\n        ((=\
    \ number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((= number 60) \"\
    lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80) \"lxxx\")\n   \
    \     ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n        ((= number\
    \ 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((= number 400) \"cd\"\
    )\n        ((= number 500) \"d\")\n        ((= number 600) \"dc\")\n        ((=\
    \ number 700) \"dcc\")\n        ((= number 800) \"dccc\")\n        ((= number\
    \ 900) \"cm\")\n        ((= number 1000) \"m\")\n        (else\n         (string-append\n\
    \          (int_to_mini_roman (/ number 1000))\n          (int_to_mini_roman (modulo\
    \ number 1000))))))", "  (define symbols '((1 \"i\") (5 \"v\") (10 \"x\") (50\
    \ \"l\") (100 \"c\") (500 \"d\") (1000 \"m\")))\n  (define (int_to_mini_roman-helper\
    \ number result)\n    (define (find-next-symbol n)\n      (let ((next-symbol 1))\n\
    \        (for ([s symbols])\n          (if (< (first s) n)\n              (set!\
    \ next-symbol (first s))))\n        next-symbol))\n    (cond\n      [(= number\
    \ 0) result]\n      [(< number 5) (int_to_mini-roman-helper (- number 1) (string-append\
    \ result (second (assoc 1 symbols))))]\n      [(>= number 5) (int_to_mini-roman-helper\
    \ (- number 5) (string-append result (second (assoc 5 symbols))))]\n      [(>=\
    \ number 10) (int_to_mini-roman-helper (- number 10) (string-append result (second\
    \ (assoc 10 symbols))))]\n      [(>= number 50) (int_to_mini-roman-helper (- number\
    \ 50) (string-append result (second (assoc 50 symbols))))]\n      [(>= number\
    \ 100) (int_to_mini-roman-helper (- number 100) (string-append result (second\
    \ (assoc 100 symbols))))]\n      [(>= number 500) (int_to_mini-roman-helper (-\
    \ number 500) (string-append result (second (assoc 500 symbols))))]\n      [(>=\
    \ number 1000) (int_to_mini-roman-helper (- number 1000) (string-append result\
    \ (second (assoc 1000 symbols))))]))\n  (string-downcase (int_to_mini_roman-helper\
    \ number \"\")))", "  (define (digit-to-numeral base place)\n    (cond\n     \
    \ [(= place 1) (cond\n                     [(= base 1) \"i\"]\n              \
    \       [(= base 2) \"ii\"]\n                     [(= base 3) \"iii\"]\n     \
    \                [(= base 4) \"iv\"]\n                     [(= base 5) \"v\"]\n\
    \                     [(= base 6) \"vi\"]\n                     [(= base 7) \"\
    vii\"]\n                     [(= base 8) \"viii\"]\n                     [(= base\
    \ 9) \"ix\"])]\n      [(= place 2) (cond\n                     [(= base 1) \"\
    x\"]\n                     [(= base 2) \"xx\"]\n                     [(= base\
    \ 3) \"xxx\"]\n                     [(= base 4) \"xl\"]\n                    \
    \ [(= base 5) \"l\"]\n                     [(= base 6) \"lx\"]\n             \
    \        [(= base 7) \"lxx\"]\n                     [(= base 8) \"lxxx\"]\n  \
    \                   [(= base 9) \"xc\"])]\n      [(= place 3) (cond\n        \
    \             [(= base 1) \"c\"]\n                     [(= base 2) \"cc\"]\n \
    \                    [(= base 3) \"ccc\"]\n                     [(= base 4) \"\
    cd\"]\n                     [(= base 5) \"d\"]\n                     [(= base\
    \ 6) \"dc\"]\n                     [(= base 7) \"dcc\"]\n                    \
    \ [(= base 8) \"dccc\"]\n                     [(= base 9) \"cm\"])]\n      [(=\
    \ place 4) (cond\n                     [(= base 1) \"m\"]\n                  \
    \   [(= base 2) \"mm\"]\n                     [(= base 3) \"mmm\"]\n         \
    \            [(= base 4) \"mv\"]\n                     [(= base 5) \"v\"]\n  \
    \                   [(= base 6) \"vm\"]\n                     [(= base 7) \"vmm\"\
    ]\n                     [(= base 8) \"vmmm\"]\n                     [(= base 9)\
    \ \"mx\"])])\n    )\n  (define (div n d)\n    (truncate (/ n d)))\n  (define (count-digits\
    \ n)\n    (cond\n      [(< n 10) 1]\n      [else (+ 1 (count-digits (div n 10)))]))\n\
    \  (define (get-nth-digit n place)\n   ", "  (define (concat! str1 str2)\n   \
    \ (string-append str1 str2))\n  (define (number-digit n digit)\n    (if (>= n\
    \ digit)\n        (string-append\n         (number-digit (/ n digit) digit)\n\
    \         (cond\n           [(= digit 1000) \"m\"]\n           [(= digit 500)\
    \ \"d\"]\n           [(= digit 100) \"c\"]\n           [(= digit 50) \"l\"]\n\
    \           [(= digit 10) \"x\"]\n           [(= digit 5) \"v\"]\n           [(=\
    \ digit 1) \"i\"]\n           [else \"\"]))\n        \"\"))\n  (define (change-form\
    \ number-str)\n    (let* ([lst (string->list number-str)]\n           [four? (and\
    \ (equal? (list-ref lst 0) (list-ref lst 1))\n                       (equal? (list-ref\
    \ lst 1) (list-ref lst 2))\n                       (equal? (list-ref lst 2) (list-ref\
    \ lst 3)))]\n           [nine? (and (equal? (list-ref lst 0) (list-ref lst 1))\n\
    \                       (equal? (list-ref lst 1) (list-ref lst 2))\n         \
    \              (not (equal? (list-ref lst 2) (list-ref lst 3))))])\n      (cond\n\
    \        [four? (concat! (list-ref lst 0) \"d\")]\n        [nine? (concat! (list-ref\
    \ lst 0) \"m\")]\n        [else (string-join (reverse lst) \"\")])))\n  (let*\
    \ ([m (number-digit number 1000)]\n         [d (number-digit number 500)]\n  \
    \       [c (number-digit number 100)]\n         [l (number-digit number 50)]\n\
    \         [x (number-digit number 10)]\n         [v (number-digit number 5)]\n\
    \         [i (number-digit number 1)])\n    (change-form (concat! i v x l c d\
    \ m))))\n```\n\n## Thinking\n\n\u9996\u5148\uFF0C\u7F57\u9A6C\u6570\u5B57\u662F\
    \u4E2A\u4E71\u5E8F\u7684", "  (let* ((romans (list (list 'M 1000)\n          \
    \             (list 'D 500)\n                       (list 'C 100)\n          \
    \             (list 'L 50)\n                       (list 'X 10)\n            \
    \           (list 'V 5)\n                       (list 'I 1)))\n         (str (cond\n\
    \               [(>= number 1000) (list->string (list 'M))]\n               [(>=\
    \ number 500)  (list->string (list 'D))]\n               [(>= number 100)  (list->string\
    \ (list 'C))]\n               [(>= number 50)   (list->string (list 'L))]\n  \
    \             [(>= number 10)   (list->string (list 'X))]\n               [(>=\
    \ number 5)    (list->string (list 'V))]\n               [(>= number 1)    (list->string\
    \ (list 'I))]\n               [else             (list->string (list 'I))]))\n\
    \         (subtract (cond\n                    [(>= number 1000) 1000]\n     \
    \               [(>= number 500)  500]\n                    [(>= number 100) \
    \ 100]\n                    [(>= number 50)   50]\n                    [(>= number\
    \ 10)   10]\n                    [(>= number 5)    5]\n                    [(>=\
    \ number 1)    1]\n                    [else             1])))\n    (if (= number\
    \ 0)\n        (list->string (list 'I))\n        (append-map string->list\n   \
    \                 (list (cond\n                           [(= number 1) \"i\"\
    ]\n                           [(= number 2) \"ii\"]\n                        \
    \   [(= number 3) \"iii\"]\n                           [(= number 4) \"iv\"]\n\
    \                           [(= number 5) \"v\"]\n                           [(=\
    \ number 6) \"vi\"]\n                           [(= number 7) \"vii\"]\n     \
    \                      [(= number 8) \"viii\"]\n                           [(=\
    \ number 9) \"ix\"]\n                           [else (int_to_mini_roman number)])\n\
    \                          (cond\n                           [(> number 0) (list->string\
    \ (list str))]\n                           [else        (list->string (list 'I))]))))\n\
    \           (cond\n            [(> number 0) (", "  (define ones    '(\"\" \"\
    i\" \"ii\" \"iii\" \"iv\" \"v\" \"vi\" \"vii\" \"viii\" \"ix\"))\n  (define tens\
    \    '(\"\" \"x\" \"xx\" \"xxx\" \"xl\" \"l\" \"lx\" \"lxx\" \"lxxx\" \"xc\"))\n\
    \  (define hundreds '(\"\" \"c\" \"cc\" \"ccc\" \"cd\" \"d\" \"dc\" \"dcc\" \"\
    dccc\" \"cm\"))\n  (string-join\n   (list\n    (vector-ref hundreds (quotient\
    \ number 100))\n    (vector-ref tens (quotient (remainder number 100) 10))\n \
    \   (vector-ref ones (remainder number 10)))\n   \"\"))\n```\n\n### Problem 10:\
    \ Odds and Evens\n\n##### Level: Easy\n\n##### Instructions:\n\nDefine a function\
    \ that takes a list of numbers.\nReturn 2 lists: one containing the even numbers,\n\
    and the other containing the odd numbers.\n\nRestrictions: You can only use **`<`,\
    \ `>`, `=`, and `/=`** to compare numbers.\n\nExample:\n\n```racket\n>>> (odds_and_evens\
    \ '(1 3 4 9 2 6 5 10 8 7))\n'((4 2 6 10 8) (1 3 9 5 7))\n```\n\n##### Solutions:\n\
    \n```racket", "  (cond ((= number 1000) \"m\")\n        ((>= number 900) (string-append\
    \ \"cm\" (int_to_mini_roman (- number 900))))\n        ((>= number 500) (string-append\
    \ \"d\" (int_to_mini_roman (- number 500))))\n        ((>= number 400) (string-append\
    \ \"cd\" (int_to_mini_roman (- number 400))))\n        ((>= number 100) (string-append\
    \ \"c\" (int_to_mini_roman (- number 100))))\n        ((>= number 90) (string-append\
    \ \"xc\" (int_to_mini_roman (- number 90))))\n        ((>= number 50) (string-append\
    \ \"l\" (int_to_mini_roman (- number 50))))\n        ((>= number 40) (string-append\
    \ \"xl\" (int_to_mini_roman (- number 40))))\n        ((>= number 10) (string-append\
    \ \"x\" (int_to_mini_roman (- number 10))))\n        ((>= number 9) (string-append\
    \ \"ix\" (int_to_mini_roman (- number 9))))\n        ((>= number 5) (string-append\
    \ \"v\" (int_to_mini_roman (- number 5))))\n        ((>= number 4) (string-append\
    \ \"iv\" (int_to_mini_roman (- number 4))))\n        ((>= number 1) (string-append\
    \ \"i\" (int_to_mini_roman (- number 1))))\n        (else \"\")))\n", "  (string-downcase\n\
    \   (int-&gt;roman number)))\n", "  (cond ((= number 1) \"i\")\n        ((= number\
    \ 2) \"ii\")\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n\
    \        ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number\
    \ 7) \"vii\")\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n\
    \        ((= number 10) \"x\")\n        ((= number 20) \"xx\")\n        ((= number\
    \ 30) \"xxx\")\n        ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n\
    \        ((= number 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((=\
    \ number 80) \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number 100)\
    \ \"c\")\n        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\")\n\
    \        ((= number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((=\
    \ number 600) \"dc\")\n        ((= number 700) \"dcc\")\n        ((= number 800)\
    \ \"dccc\")\n        ((= number 900) \"cm\")\n        ((= number 1000) \"m\")\n\
    \        ((= number 2000) \"mm\")\n        ((= number 3000) \"mmm\")\n       \
    \ (else (string-append (int_to_mini_roman (quotient number 1000))\n          \
    \                   (int_to_mini_roman (* 1000 (remainder number 1000)))))))\n",
  "  (define (int_to_mini_roman number)\n  (cond\n    [(= number 1000) \"m\"]\n  \
    \  [(= number 999) \"im\"]\n    [(= number 998) \"ixm\"]\n    [(= number 997)\
    \ \"vimm\"]\n    [(= number 996) \"ximm\"]\n    [(= number 995) \"xvimm\"]\n \
    \   [(= number 994) \"ixvimm\"]\n    [(= number 993) \"ixximm\"]\n    [(= number\
    \ 992) \"ixxixm\"]\n    [(= number 991) \"ixxvimm\"]\n    [(= number 990) \"cimm\"\
    ]\n    [(= number 989) \"icimm\"]\n    [(= number 988) \"ixcimm\"]\n    [(= number\
    \ 987) \"vxcimm\"]\n    [(= number 986) \"xcimm\"]\n    [(= number 985) \"xvcimm\"\
    ]\n    [(= number 984) \"ixvcimm\"]\n    [(= number 983) \"ixxcimm\"]\n    [(=\
    \ number 982) \"ixxxcimm\"]\n    [(= number 981) \"ixxxvcimm\"]\n    [(= number\
    \ 980) \"lxximm\"]\n    [(= number 979) \"ilxximm\"]\n    [(= number 978) \"ixlxximm\"\
    ]\n    [(= number 977) \"vlxximm\"]\n    [(= number 976) \"lxximm\"]\n    [(=\
    \ number 975) \"lxxvimm\"]\n    [(= number 974) \"ilxxvimm\"]\n    [(= number\
    \ 973) \"ilxxlxximm\"]\n    [(= number 972) \"ilxxlxxlxximm\"]\n    [(= number\
    \ 971) \"ilxxlxxlxxvimm\"]\n    [(= number 970) \"clxximm\"]\n    [(= number 969)\
    \ \"iclxximm\"]\n    [(= number 968) \"ixclxximm\"]\n    [(= number 967) \"vclxximm\"\
    ]\n    [(= number 966) \"clxximm\"]\n    [(= number 965) \"clxxvimm\"]\n    [(=\
    \ number 964) \"iclxxvimm\"]\n    [(=", "  (define (int_to_mini_roman-aux number)\n\
    \    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n   \
    \   [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100)\
    \ \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(=\
    \ number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"\
    ]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1)\
    \ \"i\"]\n      [else\n       (let ([d (quotient number (if (member (modulo number\
    \ 10) '(0 4 9)) 5 10))])\n         (string-append (make-string d (if (member (modulo\
    \ number 10) '(0 5)) ?v ?i))\n                        (int_to_mini_roman-aux (modulo\
    \ number 10))))]))\n    (cond\n      [(= number 0) \"\"]\n      [else (int_to_mini_roman-aux\
    \ number)]))\n  (string-downcase (int_to_mini_roman-aux number)))\n", "  (cond\
    \ ((<= number 0) \"\")\n        ((<= number 3) (build-string number \"i\"))\n\
    \        ((<= number 5) (string-append (build-string (- 5 number) \"i\") \"v\"\
    ))\n        ((<= number 8) (string-append \"v\" (build-string (- number 5) \"\
    i\")))\n        ((<= number 10) (build-string (- number 8) \"x\"))\n        ((<=\
    \ number 40) (build-string (/ (- number 10) 10) \"x\"))\n        ((<= number 50)\
    \ (string-append (build-string (- (/ (- number 10) 10) 5) \"x\") \"l\"))\n   \
    \     ((<= number 80) (string-append \"l\" (build-string (- (/ (- number 10) 10)\
    \ 5) \"x\")))\n        ((<= number 100) (build-string (- (/ (- number 10) 10)\
    \ 8) \"c\"))\n        ((<= number 400) (build-string (/ (- (/ (- number 10) 10)\
    \ 8) 10) \"c\"))\n        ((<= number 500) (string-append (build-string (- (/\
    \ (- (/ (- number 10) 10) 8) 10) 5) \"c\") \"d\"))\n        ((<= number 800) (string-append\
    \ \"d\" (build-string (- (/ (- (/ (- number 10) 10) 8) 10) 5) \"c\")))\n     \
    \   ((<= number 1000) (build-string (- (/ (- (/ (- number 10) 10) 8) 10) 8) \"\
    m\"))\n        ((> number 1000) \"\")\n        ))\n", "  (define mini-roman-numerals\n\
    \    '((1000 . \"m\")\n      (900 . \"cm\")\n      (500 . \"d\")\n      (400 .\
    \ \"cd\")\n      (100 . \"c\")\n      (90 . \"xc\")\n      (50 . \"l\")\n    \
    \  (40 . \"xl\")\n      (10 . \"x\")\n      (9 . \"ix\")\n      (5 . \"v\")\n\
    \      (4 . \"iv\")\n      (1 . \"i\")))\n  (define (is-integer? num)\n    (integer?\
    \ (sqrt num)))\n  (define (int-to-mini-roman-iter num roman-numerals mini-roman-numerals)\n\
    \    (cond ((= num 0) \"\")\n          ((< num 1) \"\")\n          ((<= (car (car\
    \ roman-numerals)) num)\n           (let ((highest-mini-roman (car (car mini-roman-numerals))))\n\
    \             (cons (cdr highest-mini-roman)\n                   (int-to-mini-roman-iter\
    \ (- num (car highest-mini-roman))\n                                         \
    \  roman-numerals\n                                           mini-roman-numerals))))\n\
    \          (else (int-to-mini-roman-iter num\n                               \
    \         (cdr roman-numerals)\n                                        mini-roman-numerals))))\n\
    \  (cond ((not (is-integer? number)) #f)\n        ((< number 1) #f)\n        ((>\
    \ number 1000) #f)\n        (else (int-to-mini-roman-iter number mini-roman-numerals\
    \ mini-roman-numerals))))\n", "  (define (m n)\n    (cond ((eq? n 0) \"\")\n \
    \         ((eq? n 1) \"i\")\n          ((eq? n 2) \"ii\")\n          ((eq? n 3)\
    \ \"iii\")\n          ((eq? n 4) \"iv\")\n          ((eq? n 5) \"v\")\n      \
    \    ((eq? n 6) \"vi\")\n          ((eq? n 7) \"vii\")\n          ((eq? n 8) \"\
    viii\")\n          ((eq? n 9) \"ix\")))\n  (define (d n)\n    (cond ((eq? n 0)\
    \ \"\")\n          ((eq? n 1) \"x\")\n          ((eq? n 2) \"xx\")\n         \
    \ ((eq? n 3) \"xxx\")\n          ((eq? n 4) \"xl\")\n          ((eq? n 5) \"l\"\
    )\n          ((eq? n 6) \"lx\")\n          ((eq? n 7) \"lxx\")\n          ((eq?\
    \ n 8) \"lxxx\")\n          ((eq? n 9) \"xc\")))\n  (define (c n)\n    (cond ((eq?\
    \ n 0) \"\")\n          ((eq? n 1) \"c\")\n          ((eq? n 2) \"cc\")\n    \
    \      ((eq? n 3) \"ccc\")\n          ((eq? n 4) \"cd\")\n          ((eq? n 5)\
    \ \"d\")\n          ((eq? n 6) \"dc\")\n          ((eq? n 7) \"dcc\")\n      \
    \    ((eq? n 8) \"dccc\")\n          ((eq? n 9) \"cm\")))\n  (define (h n)\n \
    \   (cond ((eq? n 0) \"\")\n          ((eq? n 1) \"m\")\n          ((eq? n 2)\
    \ \"mm\")\n          ((eq? n 3) \"mmm\")))\n  (define (miniroman n)\n    (string-append\
    \ (h (quotient n 1000))\n                   (c (quotient (remainder n 1000) 100))\n\
    \                   (d (quotient (remainder n 100) 10))\n                   (m\
    \ (remainder n 10))))\n  (string-downcase (miniroman number)))\n\n```\n", "  (let*\
    \ ([mappings (list (list \"M\" 1000)\n                         (list \"CM\" 900)\n\
    \                         (list \"D\" 500)\n                         (list \"\
    CD\" 400)\n                         (list \"C\" 100)\n                       \
    \  (list \"XC\" 90)\n                         (list \"L\" 50)\n              \
    \           (list \"XL\" 40)\n                         (list \"X\" 10)\n     \
    \                    (list \"IX\" 9)\n                         (list \"V\" 5)\n\
    \                         (list \"IV\" 4)\n                         (list \"I\"\
    \ 1))]\n         [remaining number]\n         [solution \"\"])\n    (for-each\
    \ (lambda (roman-value)\n                (let* ([roman (first roman-value)]\n\
    \                       [value (second roman-value)])\n                  (when\
    \ (<= value remaining)\n                    (begin (set! solution (string-append\
    \ solution roman))\n                           (set! remaining (- remaining value))))))\n\
    \              mappings)\n    (string-downcase solution)))\n", "  (define (divisible?\
    \ d)\n    (= (modulo number d) 0))\n  (define (divisible-by n d)\n    (quotient\
    \ n d))\n  (define (m n s)\n    (string-append (make-string (divisible-by number\
    \ n) (string-downcase s))\n                  (int_to_mini_roman (- number (* n\
    \ (divisible-by number n))))))\n  (cond ((divisible? 1000) (m 1000 \"M\"))\n \
    \       ((divisible? 500) (m 500 \"D\"))\n        ((divisible? 100) (m 100 \"\
    C\"))\n        ((divisible? 50) (m 50 \"L\"))\n        ((divisible? 10) (m 10\
    \ \"X\"))\n        ((divisible? 5) (m 5 \"V\"))\n        ((divisible? 1) (m 1\
    \ \"I\"))\n        (else \"\")))\n", "  (define (roman-recursive number)\n   \
    \ (if (= number 0)\n        \"\"\n        (let ([divisor (find-divisor number)])\n\
    \          (if (number? divisor)\n              (cond [(= 1 divisor) (string-append\
    \ \"i\" (roman-recursive (- number 1)))]\n                    [(= 5 divisor) (string-append\
    \ \"v\" (roman-recursive (- number 5)))]\n                    [(= 10 divisor)\
    \ (string-append \"x\" (roman-recursive (- number 10)))]\n                   \
    \ [(= 50 divisor) (string-append \"l\" (roman-recursive (- number 50)))]\n   \
    \                 [(= 100 divisor) (string-append \"c\" (roman-recursive (- number\
    \ 100)))]\n                    [(= 500 divisor) (string-append \"d\" (roman-recursive\
    \ (- number 500)))]\n                    [(= 1000 divisor) (string-append \"m\"\
    \ (roman-recursive (- number 1000)))])\n              (let ([delta (- number divisor)])\n\
    \                (cond [(= delta 0) (string-append \"i\" (roman-recursive (- number\
    \ 1)))]\n                      [(= delta 1) (string-append \"iv\" (roman-recursive\
    \ (- number 4)))]\n                      [(= delta 4) (string-append \"ix\" (roman-recursive\
    \ (- number 9)))]\n                      [(= delta 5) (string-append \"il\" (roman-recursive\
    \ (- number 50)))]\n                      [(= delta 9) (string-append \"ic\" (roman-recursive\
    \ (- number 99)))]\n                      [(= delta 10) (string-append \"id\"\
    \ (roman-recursive (- number 499)))]\n                      [(= delta 49) (string-append\
    \ \"im\" (roman-recursive (- number 999)))]\n                      [else (string-append\
    \ \"i\" (roman-recursive (- number 1)))])))))\n    )\n  (string-downcase (roman-recursive\
    \ number)))\n", "  (cond [(= number 1000) \"m\"]\n        [(= number 900) \"cm\"\
    ]\n        [(= number 500) \"d\"]\n        [(= number 400) \"cd\"]\n        [(=\
    \ number 100) \"c\"]\n        [(= number 90) \"xc\"]\n        [(= number 50) \"\
    l\"]\n        [(= number 40) \"xl\"]\n        [(= number 10) \"x\"]\n        [(=\
    \ number 9) \"ix\"]\n        [(= number 5) \"v\"]\n        [(= number 4) \"iv\"\
    ]\n        [(= number 1) \"i\"]\n        [else (string-append\n              \
    \ (int_to_mini_roman (quotient number (if (< number 40) 10 5)))\n            \
    \   (int_to_mini_roman (remainder number (if (< number 40) 10 5))))]))\n```\n\n\
    ### [**Problem 15.**](https://projecteuler.net/problem=15) Lattice paths\nStarting\
    \ in the top left corner of a 2\xD72 grid, and only being able to move to the\
    \ right and down, there are exactly 6 routes to the bottom right corner. How many\
    \ such routes are there through a 20\xD720 grid?\n\n#### Racket Solution\n```racket\n\
    #lang racket\n", "  (define (int_to_mini_roman-helper n)\n    (letrec ([thousand-digit\
    \ (/ n 1000)]\n             [hundred-digit (/ (- n (* thousand-digit 1000)) 100)]\n\
    \             [ten-digit (/ (- n (* thousand-digit 1000) (* hundred-digit 100))\
    \ 10)]\n             [one-digit (- n (* thousand-digit 1000) (* hundred-digit\
    \ 100) (* ten-digit 10))])\n      (cond [(= number 0) \"\"]\n            [(= thousand-digit\
    \ 0)\n             (string-append (int_to_mini_roman-helper (* hundred-digit 100))\n\
    \                            (int_to_mini_roman-helper (* ten-digit 10))\n   \
    \                         (int_to_mini_roman-helper one-digit))]\n           \
    \ [(= hundred-digit 0)\n             (string-append (int_to_mini_roman-helper\
    \ (* thousand-digit 1000))\n                            (int_to_mini_roman-helper\
    \ (* ten-digit 10))\n                            (int_to_mini_roman-helper one-digit))]\n\
    \            [(= ten-digit 0)\n             (string-append (int_to_mini_roman-helper\
    \ (* thousand-digit 1000))\n                            (int_to_mini_roman-helper\
    \ (* hundred-digit 100))\n                            (int_to_mini_roman-helper\
    \ one-digit))]\n            [(= one-digit 0)\n             (string-append (int_to_mini_roman-helper\
    \ (* thousand-digit 1000))\n                            (int_to_mini_roman-helper\
    \ (* hundred-digit 100))\n                            (int_to_mini_roman-helper\
    \ (* ten-digit 10)))]\n            [(= thousand-digit 1) \"m\"]\n            [(=\
    \ thousand-digit 2) \"mm\"]\n            [(= thousand-digit 3) \"mmm\"]\n    \
    \        [(= thousand-digit 4) \"mm\"]\n            [(= thousand-digit 5) \"m\"\
    ]\n            [(= thousand-digit 6) \"mm\"]\n            [(= thousand-digit 7)\
    \ \"mmm\"]\n            [(= thousand-digit 8) \"mm\"]\n            [(= thousand-",
  "  (define roman-numerals\n    '(\n      (1000 . \"m\")\n      (900 . \"cm\")\n\
    \      (500 . \"d\")\n      (400 . \"cd\")\n      (100 . \"c\")\n      (90 . \"\
    xc\")\n      (50 . \"l\")\n      (40 . \"xl\")\n      (10 . \"x\")\n      (9 .\
    \ \"ix\")\n      (5 . \"v\")\n      (4 . \"iv\")\n      (1 . \"i\")\n      ))\n\
    \  (define (get-numerals-at-number number)\n    (cond ((= number 0) \"\")\n  \
    \        ((&lt; number (car (first roman-numerals))) (get-numerals-at-number (-\
    \ number (car (second roman-numerals)))))\n          (else (cons (car (first roman-numerals))\
    \ (get-numerals-at-number (- number (car (first roman-numerals))))))))\n  (string-join\
    \ (get-numerals-at-number number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n     \
    \     ((= number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((=\
    \ number 50) \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10)\
    \ \"x\")\n          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n  \
    \        ((= number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((<=\
    \ number 0) \"\")\n        ((<= 1000 number)\n         (string-append (int_to_mini_roman-helper\
    \ 1000)\n                        (int_to_mini_roman (- number 1000))))\n     \
    \   ((<= 900 number)\n         (string-append (int_to_mini_roman-helper 900)\n\
    \                        (int_to_mini_roman (- number 900))))\n        ((<= 500\
    \ number)\n         (string-append (int_to_mini_roman-helper 500)\n          \
    \              (int_to_mini_roman (- number 500))))\n        ((<= 400 number)\n\
    \         (string-append (int_to_mini_roman-helper 400)\n                    \
    \    (int_to_mini_roman (- number 400))))\n        ((<= 100 number)\n        \
    \ (string-append (int_to_mini_roman-helper 100)\n                        (int_to_mini_roman\
    \ (- number 100))))\n        ((<= 90 number)\n         (string-append (int_to_mini_roman-helper\
    \ 90)\n                        (int_to_mini_roman (- number 90))))\n        ((<=\
    \ 50 number)\n         (string-append (int_to_mini_roman-helper 50)\n        \
    \                (int_to_mini_roman (- number 50))))\n        ((<= 40 number)\n\
    \         (string-append (int_to_mini_roman-helper 40)\n                     \
    \   (int_to_mini_roman (- number 40))))\n        ((<= 10 number)\n         (string-append\
    \ (int_to_mini_", "  (define (roman-aux r number)\n    (cond ((= number 0) \"\"\
    )\n          ((= number 1) (string-append r \"i\"))\n          ((= number 2) (string-append\
    \ r \"ii\"))\n          ((= number 3) (string-append r \"iii\"))\n          ((=\
    \ number 4) (string-append r \"iv\"))\n          ((= number 5) (string-append\
    \ r \"v\"))\n          ((= number 6) (string-append r \"vi\"))\n          ((=\
    \ number 7) (string-append r \"vii\"))\n          ((= number 8) (string-append\
    \ r \"viii\"))\n          ((= number 9) (string-append r \"ix\"))\n          ((<\
    \ number 10) \"\")\n          ((= number 10) (string-append r \"x\"))\n      \
    \    ((= number 20) (string-append r \"xx\"))\n          ((= number 30) (string-append\
    \ r \"xxx\"))\n          ((= number 40) (string-append r \"xl\"))\n          ((=\
    \ number 50) (string-append r \"l\"))\n          ((= number 60) (string-append\
    \ r \"lx\"))\n          ((= number 70) (string-append r \"lxx\"))\n          ((=\
    \ number 80) (string-append r \"lxxx\"))\n          ((= number 90) (string-append\
    \ r \"xc\"))\n          ((< number 100) \"\")\n          ((= number 100) (string-append\
    \ r \"c\"))\n          ((= number 200) (string-append r \"cc\"))\n          ((=\
    \ number 300) (string-append r \"ccc\"))\n          ((= number 400) (string-append\
    \ r \"cd\"))\n          ((= number 500) (string-append r \"d\"))\n          ((=\
    \ number 600) (string-append r \"dc\"))\n          ((= number 700) (string-append\
    \ r \"dcc\"))\n          ((= number 800) (string-append r \"dccc\"))\n       \
    \   ((= number 900) (string-append r \"cm\"))\n          ((< number 1000) \"\"\
    )\n          ((= number 1000) (string-append r \"m\"))\n          ((= number 2000)\
    \ (string-append r \"mm\"))\n          ((= number 3000) (string-append r \"mmm\"\
    ))\n          (", "  (define (int_to_mini_roman-helper digits s)\n    (cond\n\
    \      ((empty? digits) (string-join (reverse s)))\n      ((= 0 (car digits))\
    \ (int_to_mini_roman-helper (cdr digits) s))\n      ((= 1 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"i\" s)))\n      ((= 2 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"ii\" s)))\n      ((= 3 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"iii\" s)))\n      ((= 4 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"iv\" s)))\n      ((= 5 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"v\" s)))\n      ((= 6 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"vi\" s)))\n      ((= 7 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"vii\" s)))\n      ((= 8 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"viii\" s)))\n      ((= 9 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"ix\" s)))\n      ((= 10 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"x\" s)))\n      ((= 20 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"xx\" s)))\n      ((= 30 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"xxx\" s)))\n      ((= 40 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"xl\" s)))\n      ((= 50 (car digits)) (int_to_mini_roman-helper\
    \ (cdr digits) (cons \"l", "  ; replace \"pass\" with \"return\" and your code!\n\
    \  (cond\n    [(= number 1) (string-append \"i\")]\n    [(= number 2) (string-append\
    \ \"ii\")]\n    [(= number 3) (string-append \"iii\")]\n    [(= number 4) (string-append\
    \ \"iv\")]\n    [(= number 5) (string-append \"v\")]\n    [(= number 6) (string-append\
    \ \"vi\")]\n    [(= number 7) (string-append \"vii\")]\n    [(= number 8) (string-append\
    \ \"viii\")]\n    [(= number 9) (string-append \"ix\")]\n    [(= number 10) (string-append\
    \ \"x\")]\n    [(= number 11) (string-append \"xi\")]\n    [(= number 12) (string-append\
    \ \"xii\")]\n    [(= number 13) (string-append \"xiii\")]\n    [(= number 14)\
    \ (string-append \"xiv\")]\n    [(= number 15) (string-append \"xv\")]\n    [(=\
    \ number 16) (string-append \"xvi\")]\n    [(= number 17) (string-append \"xvii\"\
    )]\n    [(= number 18) (string-append \"xviii\")]\n    [(= number 19) (string-append\
    \ \"xix\")]\n    [(= number 20) (string-append \"xx\")]\n    [(= number 21) (string-append\
    \ \"xxi\")]\n    [(= number 22) (string-append \"xxii\")]\n    [(= number 23)\
    \ (string-append \"xxiii\")]\n    [(= number 24) (string-append \"xxiv\")]\n \
    \   [(= number 25) (string-append \"xxv\")]\n    [(= number 26) (string-append\
    \ \"xxvi\")]\n    [(= number 27) (string-append \"xxvii\")]\n    [(= number 28)\
    \ (string-append \"xxviii\")]\n    [(= number 29) (string-append \"xxix\")]\n\
    \    [(= number 30) (string-append \"xxx\")]\n    [(= number 31) (string-append\
    \ \"xxxi\")]\n    [(=", "  (define roman-numerals\n    (list (list 'm 'cd 'd 'cm\
    \ 'c 'xc 'l 'xl 'x 'ix 'v 'iv 'i)\n          (list '1000  '900 '500 '400 '100\
    \ '90  '50  '40  '10  '9   '5   '4   '1)))\n  (let loop ((number number) (result\
    \ \"\"))\n    (if (zero? number)\n        result\n        (let* ((numeral (list-ref\
    \ (car roman-numerals)\n                                  (list-position (cadr\
    \ roman-numerals)\n                                                 number)))\n\
    \               (times   (quotient number numeral)))\n          (loop (- number\
    \ (* times numeral))\n                (string-append result (make-string times\
    \ (symbol->string numeral))))))))\n", "  (string-join (map int_to_roman_char (integer->list\
    \ number)) \"\"))\n", "  (define (digit-to-digit-symbol digit)\n    (cond\n  \
    \    [(= 1 digit) \"i\"]\n      [(= 5 digit) \"v\"]\n      [(= 10 digit) \"x\"\
    ]\n      [(= 50 digit) \"l\"]\n      [(= 100 digit) \"c\"]\n      [(= 500 digit)\
    \ \"d\"]\n      [(= 1000 digit) \"m\"]))\n  (define (min-num-digits number)\n\
    \    (cond\n      [(< number 5) 1]\n      [(< number 10) 5]\n      [(< number\
    \ 50) 10]\n      [(< number 100) 50]\n      [(< number 500) 100]\n      [(< number\
    \ 1000) 500]\n      [(= number 1000) 1000]))\n  (define (max-num-digits number)\n\
    \    (cond\n      [(< number 5) 1]\n      [(< number 10) 5]\n      [(< number\
    \ 50) 10]\n      [(< number 100) 50]\n      [(< number 500) 100]\n      [(< number\
    \ 1000) 500]\n      [(= number 1000) 1000]))\n  (define (get-digit-equivalent\
    \ number)\n    (cond\n      [(< number 10) (- number (min-num-digits number))]\n\
    \      [(< number 100) (- (number-to-string number)\n                        \
    \ (number-to-string (min-num-digits number)))\n        (if (string-empty? (number-to-string\
    \ (min-num-digits number)))\n            (string-append (make-string (string-length\
    \ (number-to-string number)) #\\0))\n            (make-string (- (string-length\
    \ (number-to-string number))\n                            (string-length (number-to-string\
    \ (min-num-digits number)))) #\\0))]\n      [(< number 1000) (- (number-to-string\
    \ number)\n                          (number-to-string (min-num-digits number)))\n\
    \        (if (string-empty? (number-to-string (min-num-digits number)))\n    \
    \        (string-append (make-string (string-length (number-to-string number))\
    \ #\\0))\n            (make-string (- (string-length", "  (cond\n    [(= number\
    \ 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n\
    \    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15)\
    \ \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(=\
    \ number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"\
    ]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50)\
    \ \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number\
    \ 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(=\
    \ number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"\
    ]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700)\
    \ \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(=\
    \ number 1000) \"m\"]\n    [(> number 1000) \"\"]))\n", "  (define (int_to_mini_roman_helper\
    \ number roman_string)\n    (cond [(> number 0)\n           (cond [(>= number\
    \ 1000)\n                  (int_to_mini_roman_helper (- number 1000) (string-append\
    \ roman_string \"m\"))]\n                 [(>= number 900)\n                 \
    \ (int_to_mini_roman_helper (- number 900) (string-append roman_string \"cm\"\
    ))]\n                 [(>= number 500)\n                  (int_to_mini_roman_helper\
    \ (- number 500) (string-append roman_string \"d\"))]\n                 [(>= number\
    \ 400)\n                  (int_to_mini_roman_helper (- number 400) (string-append\
    \ roman_string \"cd\"))]\n                 [(>= number 100)\n                \
    \  (int_to_mini_roman_helper (- number 100) (string-append roman_string \"c\"\
    ))]\n                 [(>= number 90)\n                  (int_to_mini_roman_helper\
    \ (- number 90) (string-append roman_string \"xc\"))]\n                 [(>= number\
    \ 50)\n                  (int_to_mini_roman_helper (- number 50) (string-append\
    \ roman_string \"l\"))]\n                 [(>= number 40)\n                  (int_to_mini_roman_helper\
    \ (- number 40) (string-append roman_string \"xl\"))]\n                 [(>= number\
    \ 10)\n                  (int_to_mini_roman_helper (- number 10) (string-append\
    \ roman_string \"x\"))]\n                 [(>= number 9)\n                  (int_to_mini_roman_helper\
    \ (- number 9) (string-append roman_string \"ix\"))]\n                 [(>= number\
    \ 5)\n                  (int_to_mini_roman_helper (- number 5) (string-append\
    \ roman_string \"v\"))]\n                 [(>= number 4)\n                  (int_to_mini_roman_helper\
    \ (- number 4) (string-append roman_string \"iv\"))]\n                 [(>= number\
    \ 1)\n                  (int_to_mini_roman_helper (- number 1) (string-append\
    \ roman_string \"i", "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"\
    ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5)\
    \ \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number\
    \ 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(=\
    \ number 50) \"l\"]\n    [(= number 100) \"c\"]\n    [(= number 500) \"d\"]\n\
    \    [(= number 1000) \"m\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"\
    xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number\
    \ 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n   \
    \ [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"\
    xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number\
    \ 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"]\n   \
    \ [(= number 90) \"xc\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"\
    ccc\"]\n    [(= number 400) \"cd\"]\n    [(= number 600) \"dc\"]\n    [(= number\
    \ 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n\
    \    [(= number 1100) \"mc\"]\n    [(= number 1200) \"mcc\"]\n    [(= number 1300)\
    \ \"mccc\"]\n    [(= number 1400) \"mcd\"]\n    [(= number 1500) \"md\"]\n   \
    \ [(= number 1600) \"mdc\"]\n    [(= number 1700) \"mdcc\"]\n    [(= number 1800)\
    \ \"mdccc\"]\n    [(= number 1900) \"mcmx\"]\n    [(= number 2000) \"mm\"]\n \
    \   [(= number 2100) \"mm", "  ;; to be implemented\n  )\n```\n\n## Usage\n\n\
    ### Setup\n\n1. [Install Racket][install]\n\n### To run tests\n\nIn a terminal:\n\
    \n```bash\n$ raco test .\n```\n\n### To run a specific test file\n\nIn a terminal:\n\
    \n```bash\n$ raco test path/to/test/file.rkt\n```\n\n[install]: https://download.racket-lang.org/",
  "  (define roman-numerals '((1 . \"i\") (4 . \"iv\") (5 . \"v\") (9 . \"ix\")\n\t\
    \t\t   (10 . \"x\") (40 . \"xl\") (50 . \"l\") (90 . \"xc\")\n\t\t\t   (100 .\
    \ \"c\") (400 . \"cd\") (500 . \"d\") (900 . \"cm\")\n\t\t\t   (1000 . \"m\")))\n\
    \  (define (compute-mini-roman num)\n    (cond ((= num 0) \"\")\n\t  ((= num 1)\
    \ \"i\")\n\t  ((= num 2) \"ii\")\n\t  ((= num 3) \"iii\")\n\t  ((= num 4) \"iv\"\
    )\n\t  ((= num 5) \"v\")\n\t  ((= num 6) \"vi\")\n\t  ((= num 7) \"vii\")\n\t\
    \  ((= num 8) \"viii\")\n\t  ((= num 9) \"ix\")\n\t  ((= num 10) \"x\")\n\t  ((=\
    \ num 20) \"xx\")\n\t  ((= num 30) \"xxx\")\n\t  ((= num 40) \"xl\")\n\t  ((=\
    \ num 50) \"l\")\n\t  ((= num 60) \"lx\")\n\t  ((= num 70) \"lxx\")\n\t  ((= num\
    \ 80) \"lxxx\")\n\t  ((= num 90) \"xc\")\n\t  ((= num 100) \"c\")\n\t  ((= num\
    \ 200) \"cc\")\n\t  ((= num 300) \"ccc\")\n\t  ((= num 400) \"cd\")\n\t  ((= num\
    \ 500) \"d\")\n\t  ((= num 600) \"dc\")\n\t  ((= num 700) \"dcc\")\n\t  ((= num\
    \ 800) \"dccc\")\n\t  ((= num 900) \"cm\")\n\t  ((= num 1000) \"m\")\n\t  ((=\
    \ num 2000) \"mm\")\n\t  ((= num 3000) \"mmm\")\n\t  ((= num 4000) \"mmmmm\")\n\
    \t  ((= num 5000) \"mmmmmm\")\n\t  ((= num 6000) \"mmmmmmm\")\n\t  ((= num", " \
    \ (local\n   ((define (to-mini-char n)\n      (case n\n        [(1) \"i\"]\n \
    \       [(2) \"ii\"]\n        [(3) \"iii\"]\n        [(4) \"iv\"]\n        [(5)\
    \ \"v\"]\n        [(6) \"vi\"]\n        [(7) \"vii\"]\n        [(8) \"viii\"]\n\
    \        [(9) \"ix\"]\n        [else (error 'to-mini-char \"invalid argument:\
    \ \" n)]))\n    (define (to-char n)\n      (case n\n        [(1) \"I\"]\n    \
    \    [(2) \"II\"]\n        [(3) \"III\"]\n        [(4) \"IV\"]\n        [(5) \"\
    V\"]\n        [(6) \"VI\"]\n        [(7) \"VII\"]\n        [(8) \"VIII\"]\n  \
    \      [(9) \"IX\"]\n        [else (error 'to-char \"invalid argument: \" n)])))\n\
    \   (define (convert n)\n     (cond\n       [(<= n 0) (error 'convert \"invalid\
    \ argument: \" n)]\n       [(<= n 9) (to-mini-char n)]\n       [(<= n 99) (string-append\
    \ (to-char (/ n 10)) (convert (modulo n 10)))]\n       [(<= n 999) (string-append\
    \ (to-char (/ n 100)) (convert (modulo n 100)))]\n       [(<= n 1000) (string-append\
    \ (to-char (/ n 1000)) (convert (modulo n 1000)))]\n       [else (error 'convert\
    \ \"invalid argument: \" n)])))\n   (convert number)))\n", "  (define (int_to_mini_roman_acc\
    \ number acc)\n    (cond ((= number 0) acc)\n          ((= number 1000) (string-append\
    \ \"m\" acc))\n          ((= number 500) (string-append \"d\" acc))\n        \
    \  ((= number 100) (string-append \"c\" acc))\n          ((= number 50) (string-append\
    \ \"l\" acc))\n          ((= number 10) (string-append \"x\" acc))\n         \
    \ ((= number 5) (string-append \"v\" acc))\n          ((= number 1) (string-append\
    \ \"i\" acc))\n          ((> number 1000) (int_to_mini_roman_acc (- number 1000)\
    \ (string-append \"m\" acc)))\n          ((> number 500) (int_to_mini_roman_acc\
    \ (- number 500) (string-append \"d\" acc)))\n          ((> number 100) (int_to_mini_roman_acc\
    \ (- number 100) (string-append \"c\" acc)))\n          ((> number 50) (int_to_mini_roman_acc\
    \ (- number 50) (string-append \"l\" acc)))\n          ((> number 10) (int_to_mini_roman_acc\
    \ (- number 10) (string-append \"x\" acc)))\n          ((> number 5) (int_to_mini_roman_acc\
    \ (- number 5) (string-append \"v\" acc)))\n          ((> number 1) (int_to_mini_roman_acc\
    \ (- number 1) (string-append \"i\" acc)))\n          ((< number 0) \"\")\n  \
    \        (else \"I don't know what I'm doing.\")))\n  (string-downcase (int_to_mini_roman_acc\
    \ number \"\")))\n", "  (define (int_to_mini_roman-1 number)\n    (cond ((= number\
    \ 0) '())\n          ((< number 0) (int_to_mini_roman-1 (+ number 1000)))\n  \
    \        ((> number 1000) (int_to_mini_roman-1 (- number 1000)))\n          ((>=\
    \ number 900) (cons 'c (int_to_mini_roman-1 (- number 900))))\n          ((>=\
    \ number 500) (cons 'd (int_to_mini_roman-1 (- number 500))))\n          ((>=\
    \ number 400) (cons 'c (int_to_mini_roman-1 (- number 400))))\n          ((>=\
    \ number 100) (cons 'c (int_to_mini_roman-1 (- number 100))))\n          ((>=\
    \ number 90) (cons 'x (int_to_mini_roman-1 (- number 90))))\n          ((>= number\
    \ 50) (cons 'l (int_to_mini_roman-1 (- number 50))))\n          ((>= number 40)\
    \ (cons 'x (int_to_mini_roman-1 (- number 40))))\n          ((>= number 10) (cons\
    \ 'x (int_to_mini_roman-1 (- number 10))))\n          ((>= number 9) (cons 'i\
    \ (int_to_mini_roman-1 (- number 9))))\n          ((>= number 5) (cons 'v (int_to_mini_roman-1\
    \ (- number 5))))\n          ((>= number 4) (cons 'i (int_to_mini_roman-1 (- number\
    \ 4))))\n          ((>= number 1) (cons 'i (int_to_mini_roman-1 (- number 1))))))\n\
    \  (string-join (int_to_mini_roman-1 number) \"\"))", "  (define (int_to_mini_roman-accumulator\
    \ number, result)\n    (cond [(> number 0)\n           (int_to_mini_roman-accumulator\
    \ (integer-quotient number 10)\n                                          (string-append\
    \ (int_to_mini_roman-by-digit number)\n                                      \
    \                   result))]\n          [else result]))\n  (int_to_mini_roman-accumulator\
    \ number \"\"))\n", "  (cond ((= number 1) \"i\")\n        ((= number 2) \"ii\"\
    )\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((=\
    \ number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"vii\"\
    )\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((=\
    \ number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number 12) \"\
    xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\")\n  \
    \      ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((= number\
    \ 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number 19) \"\
    xix\")\n        ((= number 20) \"xx\")\n        ((= number 21) \"xxi\")\n    \
    \    ((= number 22) \"xxii\")\n        ((= number 23) \"xxiii\")\n        ((=\
    \ number 24) \"xxiv\")\n        ((= number 25) \"xxv\")\n        ((= number 26)\
    \ \"xxvi\")\n        ((= number 27) \"xxvii\")\n        ((= number 28) \"xxviii\"\
    )\n        ((= number 29) \"xxix\")\n        ((= number 30) \"xxx\")\n       \
    \ ((= number 31) \"xxxi\")\n        ((= number 32) \"xxxii\")\n        ((= number\
    \ 33) \"xxxiii\")\n        ((= number 34) \"xxxiv\")\n        ((= number 35) \"\
    xxxv\")\n        ((= number 36) \"xxxvi\")\n        ((= number 37) \"xxxvii\"\
    )\n        ((= number 38) \"xxxviii\")\n        ((= number 39) \"xxxix\")\n  \
    \      ((= number 40) \"xl\")\n        ((= number 41) \"xli\")\n        ((= number\
    \ 42) \"xlii\")\n        ((= number 43) \"xliii\")\n        ((= number 44) \"\
    xliv\")\n        ((= number 45) \"xlv\")\n        ((= number 46) \"xlvi\")\n \
    \       ((= number 47", "    (local [(define (int_to_mini_roman_helper str n)\n\
    \                (cond [(zero? n) str]\n                      [(< n 4) (int_to_mini_roman_helper\
    \ (string-append str \"i\") (- n 1))]\n                      [(= n 4) (int_to_mini_roman_helper\
    \ (string-append str \"iv\") 0)]\n                      [(< n 9) (int_to_mini_roman_helper\
    \ (string-append str \"v\") (- n 5))]\n                      [(= n 9) (int_to_mini_roman_helper\
    \ (string-append str \"ix\") 0)]\n                      [(< n 40) (int_to_mini_roman_helper\
    \ (string-append str \"x\") (- n 10))]\n                      [(< n 50) (int_to_mini_roman_helper\
    \ (string-append str \"xl\") (- n 40))]\n                      [(< n 90) (int_to_mini_roman_helper\
    \ (string-append str \"l\") (- n 50))]\n                      [(< n 100) (int_to_mini_roman_helper\
    \ (string-append str \"xc\") (- n 90))]\n                      [(< n 400) (int_to_mini_roman_helper\
    \ (string-append str \"c\") (- n 100))]\n                      [(< n 500) (int_to_mini_roman_helper\
    \ (string-append str \"cd\") (- n 400))]\n                      [(< n 900) (int_to_mini_roman_helper\
    \ (string-append str \"d\") (- n 500))]\n                      [(< n 1000) (int_to_mini_roman_helper\
    \ (string-append str \"cm\") (- n 900))]\n                      [(< n 4000) (int_to_mini_roman_helper\
    \ (string-append str \"m\") (- n 1000))]\n                      [(= n 4000) (int_to_mini_roman_helper\
    \ (string-append str \"iv\") 0)]\n                      [(< n 5000) (int_to_mini_roman_helper\
    \ (string-append str \"ivm\") (- n 4000))]\n                      [(< n 9000)\
    \ (int_to_mini_roman_helper (string-append str", "  ; convert to our representation\n\
    \  (define rep\n    (cond\n      [(<= number 0) \"\"]\n      [(= number 1) \"\
    i\"]\n      [(= number 2) \"ii\"]\n      [(= number 3) \"iii\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 5) \"v\"]\n      [(= number 6) \"vi\"]\n      [(=\
    \ number 7) \"vii\"]\n      [(= number 8) \"viii\"]\n      [(= number 9) \"ix\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 11) \"xi\"]\n      [(= number\
    \ 12) \"xii\"]\n      [(= number 13) \"xiii\"]\n      [(= number 14) \"xiv\"]\n\
    \      [(= number 15) \"xv\"]\n      [(= number 16) \"xvi\"]\n      [(= number\
    \ 17) \"xvii\"]\n      [(= number 18) \"xviii\"]\n      [(= number 19) \"xix\"\
    ]\n      [(= number 20) \"xx\"]\n      [(= number 30) \"xxx\"]\n      [(= number\
    \ 40) \"xl\"]\n      [(= number 50) \"l\"]\n      [(= number 60) \"lx\"]\n   \
    \   [(= number 70) \"lxx\"]\n      [(= number 80) \"lxxx\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 100) \"c\"]\n      [(= number 200) \"cc\"]\n \
    \     [(= number 300) \"ccc\"]\n      [(= number 400) \"cd\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 600) \"dc\"]\n      [(= number 700) \"dcc\"]\n\
    \      [(= number 800) \"dccc\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 1000) \"m\"]\n      [else (append (int_to_mini_roman (quotient number 1000))\n\
    \                     (int_to_mini_roman (remainder number 1000)))]))\n  ; convert\
    \ to lowercase\n  (string-downcase rep))\n", "  (define (int_to_mini_roman-helper\
    \ number result)\n    (cond\n      [(= number 0) result]\n      [(and (<= number\
    \ 3) (> number 0))\n       (int_to_mini_roman-helper (- number 1) (string-append\
    \ result \"i\"))]\n      [(= number 4) (string-append result \"iv\")]\n      [(and\
    \ (<= number 8) (> number 4))\n       (int_to_mini_roman-helper (- number 5) (string-append\
    \ result \"v\"))]\n      [(= number 9) (string-append result \"ix\")]\n      [(and\
    \ (<= number 39) (> number 9))\n       (int_to_mini_roman-helper (- number 10)\
    \ (string-append result \"x\"))]\n      [(and (<= number 40) (> number 39))\n\
    \       (int_to_mini_roman-helper (- number 40) (string-append result \"xl\"))]\n\
    \      [(and (<= number 49) (> number 40))\n       (int_to_mini_roman-helper (-\
    \ number 10) (string-append result \"xl\"))]\n      [(= number 50) (string-append\
    \ result \"l\")]\n      [(and (<= number 90) (> number 50))\n       (int_to_mini_roman-helper\
    \ (- number 50) (string-append result \"l\"))]\n      [(and (<= number 100) (>\
    \ number 90))\n       (int_to_mini_roman-helper (- number 100) (string-append\
    \ result \"xc\"))]\n      [(and (<= number 399) (> number 100))\n       (int_to_mini_roman-helper\
    \ (- number 100) (string-append result \"c\"))]\n      [(and (<= number 400) (>\
    \ number 399))\n       (int_to_mini_roman-helper (- number 400) (string-append\
    \ result \"cd\"))]\n      [(and (<= number 499) (> number 400))\n       (int_to_mini_roman-helper\
    \ (- number 100) (string-append result \"cd\"))]\n      [(= number 500) (string-append\
    \ result \"d\")]\n      [(and (<= number 900) (> number 500))\n       (int_to_mini_roman-hel",
  "  (define (helper n place-value)\n    (if (= n 1)\n        \"i\"\n        (let*\
    \ ([digit (modulo n place-value)]\n               [previous-digit (modulo (- n\
    \ digit) place-value)]\n               [next-digit (modulo (+ digit digit) place-value)])\n\
    \          (cond [(= digit previous-digit) \n                 (string-append \"\
    i\" (helper next-digit (* place-value 10)))]\n                [(= digit 1)\n \
    \                (string-append \"i\" \n                                (helper\
    \ (+ next-digit digit) (* place-value 10)))]\n                [(= digit 5)\n \
    \                (string-append \"v\" \n                                (helper\
    \ (+ next-digit digit) (* place-value 10)))]\n                [(= digit 9)\n \
    \                (string-append \"x\" \n                                (helper\
    \ (+ next-digit digit) (* place-value 10)))]\n                [(> digit 5)\n \
    \                (string-append \"v\" \n                                (string-append\
    \ (make-string (- digit 5) #\\i)\n                                           \
    \    (helper (+ next-digit digit) \n                                         \
    \              (* place-value 10))))]\n                [else\n               \
    \  (string-append (make-string digit #\\i)\n                                (helper\
    \ (+ next-digit digit) (* place-value 10)))]))))\n  (let ([roman-numeral (helper\
    \ number 10)])\n    (string-downcase roman-numeral)))", "  (letrec ([dict (list\
    \ '((1000 . \"m\") (900 . \"cm\") (500 . \"d\") (400 . \"cd\") (100 . \"c\") (90\
    \ . \"xc\") (50 . \"l\") (40 . \"xl\") (10 . \"x\") (9 . \"ix\") (5 . \"v\") (4\
    \ . \"iv\") (1 . \"i\")))]\n    (cond ((= number 0) \"\")\n          (else (let*\
    \ ([remainder (modulo number 1000)]\n                       [quotient (quotient\
    \ number 1000)])\n                  (string-append (string-join (map (\u03BB (x)\
    \ (string-join (build-list quotient (lambda (i) (cdr x))))) dict) \"\")\n    \
    \                             (int_to_mini_roman remainder)))))))\n", "  (if (<\
    \ number 1)\n      \"Number less than 1\"\n      (if (> number 1000)\n       \
    \   \"Number greater than 1000\"\n          (let* ([d (modulo number 10)]\n  \
    \               [c (modulo (quotient number 10) 10)]\n                 [b (modulo\
    \ (quotient number 100) 10)]\n                 [a (quotient number 1000)])\n \
    \           (string-append\n             (cond [(= a 0) \"\"]\n              \
    \     [(= a 1) \"m\"]\n                   [(= a 2) \"mm\"]\n                 \
    \  [(= a 3) \"mmm\"]\n                   [(= a 4) \"mmmm\"]\n                \
    \   [(= a 5) \"mmmmm\"]\n                   [(= a 6) \"mmmmmm\"]\n           \
    \        [(= a 7) \"mmmmmmm\"]\n                   [(= a 8) \"mmmmmmmm\"]\n  \
    \                 [(= a 9) \"mmmmmmmmm\"])\n             (cond [(= b 0) \"\"]\n\
    \                   [(= b 1) \"c\"]\n                   [(= b 2) \"cc\"]\n   \
    \                [(= b 3) \"ccc\"]\n                   [(= b 4) \"cd\"]\n    \
    \               [(= b 5) \"d\"]\n                   [(= b 6) \"dc\"]\n       \
    \            [(= b 7) \"dcc\"]\n                   [(= b 8) \"dccc\"]\n      \
    \             [(= b 9) \"cm\"])\n             (cond [(= c 0) \"\"]\n         \
    \          [(= c 1) \"x\"]\n                   [(= c 2) \"xx\"]\n            \
    \       [(= c 3) \"xxx\"]\n                   [(= c 4) \"xl\"]\n             \
    \      [(= c 5) \"l\"]\n                   [(= c 6) \"lx\"]\n                \
    \   [(= c 7) \"lxx\"]\n                   [(= c 8) \"lxxx\"]\n               \
    \    [(= c 9) \"xc\"])\n             (cond [(= d 0) \"\"]\n                  \
    \ [(= d 1) \"i\"]\n                   [(= d 2) \"ii\"]\n                   [(=\
    \ d 3) \"iii\"]\n                   [(= d 4) \"iv\"]\n                   [(= d\
    \ 5) \"v\"]\n                   [(= d 6) \"vi\"]\n                   [(= d 7)\
    \ \"vii\"]\n                   [(= d 8) \"viii\"]\n                   [(=", " \
    \ (cond\n    [(<= number 1000) (int_to_mini_roman_helper number)]\n    [else (error\
    \ \"Restriction failed: 1 <= num <= 1000.\")]))\n", "  (define (int_to_mini_roman-helper\
    \ number res)\n    (match number\n      [(zero?) res]\n      [(define quotient\
    \ (quotient number 1000)) (int_to_mini_roman-helper quotient (string-append res\
    \ \"m\"))]\n      [(define quotient (quotient number 500)) (int_to_mini_roman-helper\
    \ quotient (string-append res \"d\"))]\n      [(define quotient (quotient number\
    \ 100)) (int_to_mini_roman-helper quotient (string-append res \"c\"))]\n     \
    \ [(define quotient (quotient number 50)) (int_to_mini_roman-helper quotient (string-append\
    \ res \"l\"))]\n      [(define quotient (quotient number 10)) (int_to_mini_roman-helper\
    \ quotient (string-append res \"x\"))]\n      [(define quotient (quotient number\
    \ 5)) (int_to_mini_roman-helper quotient (string-append res \"v\"))]\n      [(define\
    \ quotient (quotient number 1)) (int_to_mini_roman-helper quotient (string-append\
    \ res \"i\"))]))\n  (int_to_mini_roman-helper number \"\"))\n", "  (cond ((= number\
    \ 1000) \"m\")\n        ((= number 999) \"im\")\n        ((= number 990) \"xm\"\
    )\n        ((= number 900) \"cm\")\n        ((= number 500) \"d\")\n        ((=\
    \ number 400) \"cd\")\n        ((= number 100) \"c\")\n        ((= number 99)\
    \ \"ic\")\n        ((= number 90) \"xc\")\n        ((= number 50) \"l\")\n   \
    \     ((= number 40) \"xl\")\n        ((= number 10) \"x\")\n        ((= number\
    \ 9) \"ix\")\n        ((= number 5) \"v\")\n        ((= number 4) \"iv\")\n  \
    \      ((= number 1) \"i\")\n        (else (string-append (int_to_mini_roman (quotient\
    \ number 1000))\n                             (int_to_mini_roman (modulo number\
    \ 1000))))))", "  (let loop ((number number)\n             (result (list)))\n\
    \    (if (= number 0)\n        (apply string-append (reverse result))\n      \
    \  (match number\n          [1 (loop (- number 1) (cons 'i result))]\n       \
    \   [5 (loop (- number 5) (cons 'v result))]\n          [9 (loop (- number 9)\
    \ (cons 'x result))]\n          [10 (loop (- number 10) (cons 'x result))]\n \
    \         [50 (loop (- number 50) (cons 'l result))]\n          [90 (loop (- number\
    \ 90) (cons 'c result))]\n          [100 (loop (- number 100) (cons 'c result))]\n\
    \          [500 (loop (- number 500) (cons 'd result))]\n          [900 (loop\
    \ (- number 900) (cons 'm result))]\n          [1000 (loop (- number 1000) (cons\
    \ 'm result))]\n          [_ (loop (- number 1000) (cons 'm result))]\n      \
    \    [else (error 'loop \"Invalid number: ~a\" number)]))))\n", "  (define (int_to_mini_roman-iter\
    \ n numeral-list)\n    (if (= n 1)\n        (cons 'i numeral-list)\n        (if\
    \ (> n 10)\n            (if (= (modulo n 10) 5)\n                (int_to_mini_roman-iter\
    \ (truncate (/ n 10)) (cons 'v numeral-list))\n                (if (< (modulo\
    \ n 10) 5)\n                    (int_to_mini_roman-iter (truncate (/ n 10)) (append\
    \ (make-list (truncate (/ n 10)) 'x) numeral-list))\n                    (int_to_mini_roman-iter\
    \ (truncate (/ n 10)) (append (make-list (truncate (/ n 10)) 'x) (cons 'v numeral-list)))))\n\
    \            (if (= n 10)\n                (cons 'x numeral-list)\n          \
    \      (if (= n 5)\n                    (cons 'v numeral-list)\n             \
    \       (if (< n 5)\n                        (int_to_mini_roman-iter (- n 1) (cons\
    \ 'i numeral-list))\n                        (if (= n 5)\n                   \
    \         (cons 'v numeral-list)\n                            (int_to_mini_roman-iter\
    \ (- n 5) (cons 'v numeral-list)))))))))\n  (apply string (reverse (int_to_mini_roman-iter\
    \ number '()))))", "  (define (int_to_mini_roman-helper number)\n    (if (zero?\
    \ number)\n        \"\"\n        (if (>= number 1000)\n            (string-append\
    \ \"m\" (int_to_mini_roman-helper (- number 1000)))\n            (if (>= number\
    \ 900)\n                (string-append \"cm\" (int_to_mini_roman-helper (- number\
    \ 900)))\n                (if (>= number 500)\n                    (string-append\
    \ \"d\" (int_to_mini_roman-helper (- number 500)))\n                    (if (>=\
    \ number 400)\n                        (string-append \"cd\" (int_to_mini_roman-helper\
    \ (- number 400)))\n                        (if (>= number 100)\n            \
    \                (string-append \"c\" (int_to_mini_roman-helper (- number 100)))\n\
    \                            (if (>= number 90)\n                            \
    \    (string-append \"xc\" (int_to_mini_roman-helper (- number 90)))\n       \
    \                         (if (>= number 50)\n                               \
    \     (string-append \"l\" (int_to_mini_roman-helper (- number 50)))\n       \
    \                             (if (>= number 40)\n                           \
    \             (string-append \"xl\" (int_to_mini_roman-helper (- number 40)))\n\
    \                                        (if (>= number 10)\n                \
    \                            (string-append \"x\" (int_to_mini_roman-helper (-\
    \ number 10)))\n                                            (if (>= number 9)\n\
    \                                                (string-append \"ix\" (int_to_mini_roman-helper\
    \ (- number 9)))\n                                                (if (>= number\
    \ 5)\n                                                    (string-append \"v\"\
    \ (int_to_mini_roman-helper (- number 5)))\n                                 \
    \                   (if (>= number 4)\n                                      \
    \                  (string-append \"iv\" (int_to_mini_roman-helper (- number 4)))\n\
    \                                                        (if (>= number 1)\n \
    \                                                           (string-append \"\
    i\" (int_to_mini_roman-helper (- number 1)))\n                               \
    \                             \"ERROR, cannot be less than 1.\")))))))))))))))))\n\
    \  (string-downcase", "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 900)\
    \ \"cm\"]\n    [(= number 500) \"d\"]\n    [(= number 400) \"cd\"]\n    [(= number\
    \ 100) \"c\"]\n    [(= number 90) \"xc\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 40) \"xl\"]\n    [(= number 10) \"x\"]\n    [(= number 9) \"ix\"]\n \
    \   [(= number 5) \"v\"]\n    [(= number 4) \"iv\"]\n    [(= number 1) \"i\"]\n\
    \    [(= number 0) \"\"]\n    [else (define q (quotient number 10))\n        \
    \  (define r (remainder number 10))\n          (string-append (int_to_mini_roman\
    \ (* q 10))\n                         (int_to_mini_roman r))]))\n", "  (cond ((<=\
    \ number 1000) (mini_roman_str number))\n        (else (printf \"Out of range:\
    \ 1 <= num <= 1000\\n\")\n              \"\")))\n", "  (cond\n    [(= number 1)\
    \ \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n\
    \    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15)\
    \ \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(=\
    \ number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"\
    ]\n    [(= number 21) \"xxi\"]\n    [(= number 22) \"xxii\"]\n    [(= number 23)\
    \ \"xxiii\"]\n    [(= number 24) \"xxiv\"]\n    [(= number 25) \"xxv\"]\n    [(=\
    \ number 26) \"xxvi\"]\n    [(= number 27) \"xxvii\"]\n    [(= number 28) \"xxviii\"\
    ]\n    [(= number 29) \"xxix\"]\n    [(= number 30) \"xxx\"]\n    [(= number 31)\
    \ \"xxxi\"]\n    [(= number 32) \"xxxii\"]\n    [(= number 33) \"xxxiii\"]\n \
    \   [(= number 34) \"xxxiv\"]\n    [(= number 35) \"xxxv\"]\n    [(= number 36)\
    \ \"xxxvi\"]\n    [(= number 37) \"xxxvii\"]\n    [(= number 38) \"xxxviii\"]\n\
    \    [(= number 39) \"xxxix\"]\n    [(= number 40) \"xl\"]\n    [(= number 41)\
    \ \"xli\"]\n    [(= number 42) \"xlii\"]\n    [(= number 43) \"xliii\"]\n    [(=\
    \ number 44) \"xliv\"]\n    [(= number 45) \"xlv\"]\n    [(= number 46) \"xlvi\"\
    ]\n    [(=", "  (string-append\n   (my-append (map (lambda (num) (get-numeral\
    \ num))\n                   (reverse (first-factors number))))))\n", "  (cond\n\
    \    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"\
    ]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9)\
    \ \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [else \"\"]))\n", "  (define (numeral-string n s1 s5 s10)\n\
    \    (cond ((= n 1) s1)\n          ((= n 2) (string-append s1 s1))\n         \
    \ ((= n 3) (string-append s1 s1 s1))\n          ((= n 4) (string-append s1 s5))\n\
    \          ((= n 5) s5)\n          ((= n 6) (string-append s5 s1))\n         \
    \ ((= n 7) (string-append s5 s1 s1))\n          ((= n 8) (string-append s5 s1\
    \ s1 s1))\n          ((= n 9) (string-append s1 s10))\n          (else (string-append\
    \ s10 (numeral-string (- n 10) s1 s5 s10)))))\n  (cond ((= number 0) \"\")\n \
    \       ((= number 1) \"i\")\n        ((= number 2) \"ii\")\n        ((= number\
    \ 3) \"iii\")\n        ((= number 4) \"iv\")\n        ((= number 5) \"v\")\n \
    \       ((= number 6) \"vi\")\n        ((= number 7) \"vii\")\n        ((= number\
    \ 8) \"viii\")\n        ((= number 9) \"ix\")\n        ((= number 10) \"x\")\n\
    \        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\")\n        ((=\
    \ number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((= number 60) \"\
    lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80) \"lxxx\")\n   \
    \     ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n        ((= number\
    \ 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((= number 400) \"cd\"\
    )\n        ((= number 500) \"d\")\n        ((= number 600) \"dc\")\n        ((=\
    \ number 700) \"dcc\")\n        ((= number 800) \"dccc\")\n        ((= number\
    \ 900) \"cm\")\n        ((= number 1000) \"m\")\n        (else (numeral-string\
    \ number \"i\" \"v\" \"x\"))))\n```\n\n", "  (int_to_roman number #:case 'lowercase\
    \ #:full_width? #f))\n", "  (define (int_to_mini_roman-work number result)\n \
    \   (cond [(= number 0) result]\n          [(< number 10) (int_to_mini_roman-work\
    \ (- number 1) (string-append result \"i\"))]\n          [(< number 50) (int_to_mini_roman-work\
    \ (- number 10) (string-append result \"x\"))]\n          [(< number 100) (int_to_mini_roman-work\
    \ (- number 50) (string-append result \"l\"))]\n          [(< number 500) (int_to_mini_roman-work\
    \ (- number 100) (string-append result \"c\"))]\n          [(< number 1000) (int_to_mini_roman-work\
    \ (- number 500) (string-append result \"d\"))]\n          [else (int_to_mini_roman-work\
    \ (- number 1000) (string-append result \"m\"))]))\n  (int_to_mini_roman-work\
    \ number \"\"))\n", "  (define roman-keys '((\"m\" . 1000) (\"cm\" . 900) (\"\
    d\" . 500) (\"cd\" . 400)\n                       (\"c\" . 100) (\"xc\" . 90)\
    \ (\"l\" . 50) (\"xl\" . 40)\n                       (\"x\" . 10) (\"ix\" . 9)\
    \ (\"v\" . 5) (\"iv\" . 4) (\"i\" . 1)))\n  (define (iter n r)\n    (if (equal?\
    \ n 0)\n        r\n        (let* ((current-pair (find-pair n roman-keys))\n  \
    \             (current-letter (car current-pair))\n               (current-value\
    \ (cdr current-pair)))\n          (iter (- n current-value) (concat r current-letter)))))\n\
    \  (iter number \"\"))", "  (local [(define (do-int-to-mini-roman number)\n  \
    \          (cond [(= number 1000) \"m\"]\n                  [(= number 900) \"\
    cm\"]\n                  [(= number 500) \"d\"]\n                  [(= number\
    \ 400) \"cd\"]\n                  [(= number 100) \"c\"]\n                  [(=\
    \ number 90) \"xc\"]\n                  [(= number 50) \"l\"]\n              \
    \    [(= number 40) \"xl\"]\n                  [(= number 10) \"x\"]\n       \
    \           [(= number 9) \"ix\"]\n                  [(= number 5) \"v\"]\n  \
    \                [(= number 4) \"iv\"]\n                  [(= number 1) \"i\"\
    ]\n                  [else (cons (do-int-to-mini-roman (quotient number 10))\n\
    \                              (do-int-to-mini-roman (remainder number 10)))]))]\n\
    \           (do-int-to-mini-roman number)))\n", "  (let ((number (number->string\
    \ number)))\n    (cond\n      ((> (string-length number) 3) \"\")\n      ((= (string-length\
    \ number) 3) (substring (int_to_mini_roman (string->number (substring number 0\
    \ 1))) 0 1))\n      ((= (string-length number) 2) (substring (int_to_mini_roman\
    \ (string->number (substring number 0 1))) 0 1))\n      ((= (string-length number)\
    \ 1) (substring (int_to_mini_roman (string->number (substring number 0 1))) 0\
    \ 1)))))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
