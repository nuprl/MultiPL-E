name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
  \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (number->string\n   (string->number\n    (string-append \"db\"\n\
    \                   (number->string (exact->inexact\n                        \
    \            (integer->exact (log2 (string->number decimal)))))\n            \
    \       \"db\"))))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (define (helper decimal)\n    (if (= decimal 0)\n        (list)\n\
    \        (append (helper (quotient decimal 2)) (list (modulo decimal 2)))))\n\
    \  (string-append \"db\" (number->string (reverse (helper decimal))) \"db\"))\n",
  "  \"Given a decimal number, return a string with each character representing a\
    \ binary number.\"\n  (let loop ((decimal decimal)\n             (string \"db\"\
    ))\n    (if (zero? decimal)\n        (string-append string \"db\")\n        (loop\
    \ (quotient decimal 2)\n              (string-append string (number->string (remainder\
    \ decimal 2)))))))\n```\n\nOutput:\n\n```\n> (decimal_to_binary 100)\n\"db1100100db\"\
    \n> (decimal_to_binary 15)\n\"db1111db\"\n> (decimal_to_binary 32)\n\"db100000db\"\
    \n```\n\nHere is a test suite:\n\n```racket\n#lang racket\n", "  (string-append\
    \ \"db\"\n                 (cond\n                   [(zero? decimal) \"\"]\n\
    \                   [else (string-append (decimal_to_binary (quotient decimal\
    \ 2))\n                                        (number->string (remainder decimal\
    \ 2)))])\n                 \"db\"))", '  (number->string (string->number (number->string
    decimal) 2)))', "  (string-append \"db\"\n                 (number->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\"\n\t\t (number->string (integer->decimal-string\
    \ decimal 2))\n\t\t \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (define (decimal_to_binary-aux number acc)\n    (if (= number 0)\n        (string-append\
    \ \"db\" acc \"db\")\n        (decimal_to_binary-aux (/ number 2) (string-append\
    \ (number->string (remainder number 2)) acc))))\n  (decimal_to_binary-aux decimal\
    \ \"\"))\n", "  (string-append \"db\"\n                 (integer->string decimal\
    \ 2)\n                 \"db\"))\n", "  (string-append \"db\"\n               \
    \  (if (= decimal 0)\n                     \"0\"\n                     (let loop\
    \ ((decimal decimal)\n                                (binary \"\"))\n       \
    \                (if (= decimal 0)\n                           binary\n      \
    \                     (loop (quotient decimal 2)\n                           \
    \      (string-append (number->string (remainder decimal 2))\n               \
    \                                 binary))))))\n                 \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\"\n  \
    \               (integer->string (integer->binary decimal))\n                \
    \ \"db\"))\n```\n\n## Solution\n\n```racket\n#lang racket\n", "  (number->string\
    \ (number->string (integer->char (string->number (string-append \"0b\" (int-&gt;bits\
    \ decimal)) 2)) 16)))\n", "  (define (int-&gt;string n)\n    (if (= n 0)\n   \
    \     \"\"\n        (int-&gt;string (- n 1))\n        (number-&gt;string n)))\n\
    \  (string-append \"db\" (int-&gt;string decimal) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
