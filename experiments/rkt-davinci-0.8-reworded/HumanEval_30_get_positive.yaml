name: HumanEval_30_get_positive
language: rkt
prompt: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
  \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3 3\
  \ 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_positive))\n\
  \    (check-equal? (candidate (list -1 -2 4 5 6)) (list 4 5 6))\n    (check-equal?\
  \ (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list 5 3 2 3 3 9 123 1))\n    (check-equal?\
  \ (candidate (list -1 -2)) (list ))\n    (check-equal? (candidate (list )) (list\
  \ ))\n))\n\n(test-humaneval)"
completions: ["  (filter positive? l))\n", "  (cond\n    [(empty? l) empty]\n    [(>\
    \ (first l) 0) (cons (first l) (get_positive (rest l)))]\n    [else (get_positive\
    \ (rest l))]))\n", "  (filter positive? l))\n", "  (cond\n    [(empty? l) empty]\n\
    \    [(> (first l) 0) (cons (first l) (get_positive (rest l)))]\n    [else (get_positive\
    \ (rest l))]))\n```\n\n```racket\n#lang racket\n", "  (for/list ([i l]\n     \
    \       #:when (> i 0))\n    i))\n", "  (cond [(empty? l) empty]\n        [(positive?\
    \ (first l)) (cons (first l) (get_positive (rest l)))]\n        [else (get_positive\
    \ (rest l))]))\n", "  (filter positive? l))\n", "  (filter (\u03BB (x) (> x 0))\
    \ l))\n", "  (cond [(empty? l) empty]\n        [(positive? (first l)) (cons (first\
    \ l) (get_positive (rest l)))]\n        [else (get_positive (rest l))]))\n", " \
    \ (filter positive? l))\n", "  (if (null? l)\n      '()\n      (let ((first (car\
    \ l))\n            (rest (cdr l)))\n        (if (< first 0)\n            (get_positive\
    \ rest)\n            (cons first (get_positive rest))))))\n", "  (cond ((null?\
    \ l) '())\n        ((> (car l) 0) (cons (car l) (get_positive (cdr l))))\n   \
    \     (else (get_positive (cdr l)))))\n", "  (filter positive? l))\n", "  (if\
    \ (null? l)\n      '()\n      (if (&gt; (car l) 0)\n          (cons (car l) (get_positive\
    \ (cdr l)))\n          (get_positive (cdr l)))))\n", "  (filter positive? l))\n",
  "  (filter positive? l))\n", "  (filter positive? l))\n", "  (filter positive? l))\n",
  "  (filter positive? l))\n", "  (filter positive? l))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
