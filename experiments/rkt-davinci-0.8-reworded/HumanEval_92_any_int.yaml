name: HumanEval_92_any_int
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns true\
  \ if one of the numbers is equal to the sum of the other two, and all numbers are\
  \ integers.\n;; Returns false in any other cases.\n;; Examples\n;; >>> (any_int\
  \ 5 2 7)\n;; #t\n;; >>> (any_int 3 2 2)\n;; #f\n;; >>> (any_int 3 -2 1)\n;; #t\n\
  ;; >>> (any_int 3.6 -2.2 2)\n;; #f\n(define (any_int x y z)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate any_int))\n\
  \    (check-equal? (candidate 2 3 1) #t)\n    (check-equal? (candidate 2.5 2 3)\
  \ #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal? (candidate\
  \ 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal? (candidate\
  \ 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
  \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
  \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond [(and (integer? x) (integer? y) (integer? z))\n         (or\
    \ (and (= x (+ y z)) (= x y z))\n             (and (= y (+ x z)) (= x y z))\n\
    \             (and (= z (+ x y)) (= x y z)))]\n        [else #f]))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)))\n", "  (cond\n    [(and (integer? x)\
    \ (integer? y) (integer? z)) #t]\n    [else #f]))\n</code>\nHowever, I am having\
    \ trouble with the sum of two numbers equaling the third number part. I know to\
    \ use <code>+</code> to add. I also know I need to compare the <code>+</code>-ed\
    \ numbers with the third number, but I do not know how to do that.\nI have tried\
    \ to look it up, but have not found anything that can help.\n\n\nA:\n\nI think\
    \ you are over complicating it. This can be achieved using the following conditions.\n\
    <code>(define (any_int x y z)\n  (cond\n    [(and (integer? x) (integer? y) (integer?\
    \ z)) \n     (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))]\n    [else #f]))\n\
    </code>\n", "  (cond ((and (integer? x) (integer? y) (integer? z))\n         (or\
    \ (= x (+ y z)) (= y (+ x z)) (= z (+ x y))))\n        (else\n         #f)))\n",
  "  (and\n   (and (integer? x) (integer? y) (integer? z))\n   (or (= (+ x y) z) (=\
    \ (+ x z) y) (= (+ y z) x))))\n</code>\nI'm not sure if this is a bug, but whatever\
    \ the reason, it's very annoying.\n\n\nA:\n\nI think you might have an old version\
    \ of DrRacket installed. The <code>any_int</code> example you have in your code\
    \ works just fine, here's what happens in my computer:\n<code>Welcome to DrRacket,\
    \ version 6.2 [3m].\nLanguage: racket [custom]; memory limit: 128 MB.\n-&gt; (any_int\
    \ 5 2 7)\n#t\n-&gt; (any_int 3 2 2)\n#f\n-&gt; (any_int 3 -2 1)\n#t\n-&gt; (any_int\
    \ 3.6 -2.2 2)\n#f\n</code>\nIn any case, you can use the <code>and</code> predicate\
    \ to make sure that the input values are both integers, like this:\n<code>(define\
    \ (any_int x y z)\n  (and (integer? x) (integer? y) (integer? z)\n       (or (=\
    \ (+ x y) z) (= (+ x z) y) (= (+ y z) x))))\n</code>\nThis should give you the\
    \ desired results.\n", "  (and (integer? x) (integer? y) (integer? z)\n      \
    \ (or (and (= x (+ y z)) (= x y))\n           (and (= x (+ y z)) (= x z))\n  \
    \         (and (= y (+ x z)) (= y x))\n           (and (= y (+ x z)) (= y z))\n\
    \           (and (= z (+ x y)) (= z x))\n           (and (= z (+ x y)) (= z y)))))\n",
  "  (cond ((and (integer? x) (integer? y) (integer? z))\n         (or (= x (+ y z))\
    \ (= y (+ x z)) (= z (+ x y))))\n        (else #f)))\n", "  (integer? x)\n  (integer?\
    \ y)\n  (integer? z)\n  (or (= (+ x y) z)\n      (= (+ x z) y)\n      (= (+ y\
    \ z) x)))\n```\n\n```\n#lang racket\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (and (= x (+ y z)) (= x (+ y z)))\n           (and (= y (+ x\
    \ z)) (= y (+ x z)))\n           (and (= z (+ x y)) (= z (+ x y))))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z)) (= z\
    \ (+ x y)))))\n</code>\nI tried the following:\n<code>#lang racket\n", "  (define\
    \ sum (- x y z))\n  (and (= x (round x)) (= y (round y)) (= z (round z))\n   \
    \    (or (= sum x) (= sum y) (= sum z))))\n", "  (and (integer? x) (integer? y)\
    \ (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", " \
    \ (and\n   (integer? x)\n   (integer? y)\n   (integer? z)\n   (or\n    (= x (+\
    \ y z))\n    (= y (+ x z))\n    (= z (+ x y)))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n\n", "  (and (integer? x) (integer? y) (integer? z)))\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       (or (and (= (+ x y) z) (=\
    \ (+ x z) y) (= (+ y z) x))\n           (and (= (+ x y) (- z)) (= (+ x (- z))\
    \ y) (= (+ y (- z)) x))\n           (and (= (+ x (- y)) z) (= (+ x z) (- y)) (=\
    \ (+ (- y) z) x))\n           (and (= (+ x (- y)) (- z)) (= (+ x (- z)) (- y))\
    \ (= (+ (- y) (- z)) x))\n           (and (= (- x y) z) (= (- x z) y) (= (- y\
    \ z) x))\n           (and (= (- x y) (- z)) (= (- x (- z)) y) (= (- y (- z)) x))\n\
    \           (and (= (- x (- y)) z) (= (- x z) (- y)) (= (- (- y) z) x))\n    \
    \       (and (= (- x (- y)) (- z)) (= (- x (- z)) (- y)) (= (- (- y) (- z)) x)))))\n",
  "  (cond [(integer? x)\n          (if (or (and (integer? y) (integer? z) (= y (+\
    \ z x)))\n                  (and (integer? y) (integer? z) (= x (+ y z)))\n  \
    \                (and (integer? y) (integer? z) (= z (+ y x))))\n            \
    \  #t\n              #f)]\n        [(integer? y)\n          (if (or (and (integer?\
    \ x) (integer? z) (= x (+ y z)))\n                  (and (integer? x) (integer?\
    \ z) (= y (+ x z)))\n                  (and (integer? x) (integer? z) (= z (+\
    \ x y))))\n              #t\n              #f)]\n        [(integer? z)\n     \
    \     (if (or (and (integer? x) (integer? y) (= x (+ y z)))\n                \
    \  (and (integer? x) (integer? y) (= y (+ x z)))\n                  (and (integer?\
    \ x) (integer? y) (= z (+ x y))))\n              #t\n              #f)]\n    \
    \    [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      (if (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n\
    \          #t\n          #f)\n      #f))", "  (cond\n    [(integer? x) (if (or\
    \ (= x (+ y z)) (= x (+ z y))) #t #f)]\n    [(integer? y) (if (or (= y (+ x z))\
    \ (= y (+ z x))) #t #f)]\n    [(integer? z) (if (or (= z (+ x y)) (= z (+ y x)))\
    \ #t #f)]\n    [else (or (= x y) (= x z) (= y z))]))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (if (integer? x)\n     \
    \ (if (integer? y)\n          (if (integer? z)\n              (if (= x (+ y z))\n\
    \                  #t\n                  (if (= y (+ x z))\n                 \
    \     #t\n                      (if (= z (+ x y))\n                          #t\n\
    \                          #f)))))))\n", "  (if\n    (and (integer? x) (integer?\
    \ y) (integer? z))\n    (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))\n    #f\n\
    \  )\n)", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (= (+ x y) z)\n           (= (+ x z)\
    \ y)\n           (= (+ y z) x))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (= x\
    \ (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))\n", "  (if (and (integer?\
    \ x) (integer? y) (integer? z))\n      (or (and (= x (+ y z)) #t)\n          (and\
    \ (= y (+ x z)) #t)\n          (and (= z (+ x y)) #t))\n      #f))\n", "  (cond\
    \ ((and (integer? x) (integer? y) (integer? z))\n         (or (= x (+ y z)) (=\
    \ y (+ x z)) (= z (+ x y))))\n        (else #f)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (integer? x)\n  (integer? y)\n  (integer? z)\n  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n   \
    \   #f))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (and (=\
    \ x (+ y z)) #t)\n           (and (= y (+ x z)) #t)\n           (and (= z (+ x\
    \ y)) #t))))\n", "  (and\n   (integer? x)\n   (integer? y)\n   (integer? z)\n\
    \   (or\n    (= x (+ y z))\n    (= y (+ x z))\n    (= z (+ x y)))\n   )\n  )\n",
  "  (and (number? x) (number? y) (number? z)\n       (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z)\
    \ x))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+\
    \ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z)\
    \ x))))\n", "  (or (and (integer? x) (integer? y) (integer? z) (= (+ x y) z))\n\
    \      (and (integer? x) (integer? y) (integer? z) (= (+ x z) y))\n      (and\
    \ (integer? x) (integer? y) (integer? z) (= (+ y z) x))))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+\
    \ x y)))))", "  (or (= x (+ y z))\n      (= y (+ x z))\n      (= z (+ x y))))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", '  (and (integer? x) (integer?
    y) (integer? z)))', "  (cond ((and (integer? x) (integer? y) (integer? z))\n \
    \        (cond ((and (= x (+ y z)) (= x (+ z y)))\n                #t)\n     \
    \          ((and (= y (+ x z)) (= y (+ z x)))\n                #t)\n         \
    \      ((and (= z (+ x y)) (= z (+ y x)))\n                #t)\n             \
    \  (else\n                #f)))\n        (else\n         #f)))\n", "  (if (and\
    \ (integer? x) (integer? y) (integer? z))\n      (or (and (= x (+ y z)) (= (-\
    \ x y) z))\n          (and (= y (+ x z)) (= (- y x) z))\n          (and (= z (+\
    \ x y)) (= (- z x) y)))\n      #f))\n</code>\nThe review\n\nYou can use <code>integer?</code>\
    \ to check if a number is an integer (or not).\n<code>(integer? x)\n</code>\n\
    To check if the sum of two numbers is equal to a third number, you can use the\
    \ following snippet.\n<code>(and (= sum (+ a b)) (= (- sum a) b))\n</code>\nTo\
    \ check for any permutation of this, you can use the <code>or</code> predicate.\n\
    <code>(or (and (= sum (+ a b)) (= (- sum a) b))\n    (and (= sum (+ a c)) (= (-\
    \ sum a) c))\n    (and (= sum (+ b c)) (= (- sum b) c)))\n</code>\nFinally, you\
    \ can use the <code>and</code> predicate to check if all three numbers are integers.\n\
    <code>(and (integer? a) (integer? b) (integer? c))\n</code>\n\nPutting this all\
    \ together results in the following solution.\n<code>#lang racket\n", "  (cond\
    \ ((and (integer? x) (integer? y) (integer? z)) (or (and (= x (+ y z)) #t) (and\
    \ (= y (+ x z)) #t) (and (= z (+ x y)) #t)))\n        (else #f)))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z) \n       (or (= x (+ y z)) (= y (+ x\
    \ z)) (= z (+ x y)))))\n</code>\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z)\
    \ x))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+\
    \ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (integer? x)\n  (integer? y)\n \
    \ (integer? z)\n  (or\n   (and\n    (= x (+ y z))\n    #t)\n   (and\n    (= y\
    \ (+ x z))\n    #t)\n   (and\n    (= z (+ x y))\n    #t)\n   #f))", "  (let*\n\
    \      ;; first case\n      [(any1 (= x (+ y z)))\n\n       ;; second case\n \
    \      (any2 (= y (+ x z)))\n\n       ;; third case\n       (any3 (= z (+ x y)))]\n\
    \    (or any1 any2 any3)))\n", '  (and (integer? x) (integer? y) (integer? z)
    (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))', "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (cond ((and (integer? x) (integer? y) (integer? z))\n         (or (equal? x (+\
    \ y z))\n             (equal? y (+ x z))\n             (equal? z (+ x y))))\n\
    \        (else #f)))\n", "  (define (sum x y)\n    (+ x y))\n  (define (any-int?\
    \ x)\n    (integer? x))\n  (and (any-int? x) (any-int? y) (any-int? z)\n     \
    \  (or (= x (sum y z))\n           (= y (sum x z))\n           (= z (sum x y)))))\n",
  "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (= x (+ y z)) (=\
    \ y (+ x z)) (= z (+ x y)))\n      #f))\n", "  (define (positive_integers? x y\
    \ z)\n    (and (integer? x)\n         (integer? y)\n         (integer? z)))\n\
    \  (cond ((and (positive_integers? x y z)\n              (= x (+ y z)))\n    \
    \     #t)\n        ((and (positive_integers? x y z)\n              (= y (+ x z)))\n\
    \         #t)\n        ((and (positive_integers? x y z)\n              (= z (+\
    \ x y)))\n         #t)\n        (else #f)))", "  (and (integer? x) (integer? y)\
    \ (integer? z)\n       (or (= x (+ y z))\n           (= y (+ x z))\n         \
    \  (= z (+ x y)))))", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (and (= x (+ y z)) #t)\n           (and (= y (+ x z)) #t)\n           (and (=\
    \ z (+ x y)) #t))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n</code>\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (and\n   (integer? x)\n   (integer? y)\n   (integer? z)\n   (or\n    (= x (+\
    \ y z))\n    (= y (+ x z))\n    (= z (+ x y)))))\n", "  (if (and (integer? x)\
    \ (integer? y) (integer? z))\n      (or (= (+ x y) z) (= (+ x z) y) (= (+ y z)\
    \ x))\n      #f))", "  (cond\n    [(and (integer? x) (integer? y) (integer? z))\n\
    \      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n    [else #f]))\n</code>\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+\
    \ x z)) (= z (+ x y)))))\n</code>\nI used https://repl.it/languages/racket as\
    \ a tester.\nWhat I need to do to make my code more readable or more efficient?\n",
  "  (or (and (integer? x) (= x (+ y z)))\n      (and (integer? y) (= y (+ x z)))\n\
    \      (and (integer? z) (= z (+ x y)))))\n", "  (cond\n    ((and (integer? x)\
    \ (integer? y) (integer? z))\n      (or (and (= (+ x y) z) (integer? z))\n   \
    \       (and (= (+ x z) y) (integer? y))\n          (and (= (+ y z) x) (integer?\
    \ x))))\n    (else #f)))\n", "  (integer? x)\n  (integer? y)\n  (integer? z)\n\
    \  (or (and (= x (+ y z))\n           (or (and (= x (+ y z))\n               \
    \     (or (and (= x (+ y z))\n                             (or (and (= x (+ y\
    \ z))\n                                      (or (and (= x (+ y z))\n        \
    \                                       (or (and (= x (+ y z))\n             \
    \                                           (or (and (= x (+ y z))\n         \
    \                                                        (or (and (= x (+ y z))\n\
    \                                                                          (or\
    \ (and (= x (+ y z))\n                                                       \
    \                            (or (and (= x (+ y z))\n                        \
    \                                                                    (or (and\
    \ (= x (+ y z))\n                                                            \
    \                                         (or (and (= x (+ y z))\n           \
    \                                                                            \
    \                       (or (and (= x (+ y z))\n                             \
    \                                                                            \
    \              (or (and (= x (+ y z))\n                                      \
    \                                                                            \
    \              (or (and (= x (+ y z))\n                                      \
    \                                                                            \
    \                       (or (and (= x (+ y z))\n                             \
    \                                                                            \
    \                                         (or (and (= x (+ y z))\n           \
    \                                                                            \
    \                                                                    (or (and\
    \ (= x (+ y z))\n                                                            \
    \                                                                            \
    \                            (or (and (= x (+ y z))\n                        \
    \                                                                            \
    \                                                                         (or\
    \ (and (= x (+ y z))\n                                                       \
    \                                                                            \
    \                                                   (or (and (= x (+ y z))\n \
    \                                                                            \
    \                                                                            \
    \                                      (or (and (= x (+ y z))\n              \
    \                                                                            \
    \                                                                            \
    \                                  (or (and (= x (+ y z))\n                  \
    \                                                                            \
    \                                                                            \
    \                                       (or (and (= x (+ y z))\n             \
    \                                                                            \
    \                                                                            \
    \                                                     (or (and (= x (+ y z))\n\
    \                                                                            \
    \                                                                            \
    \                                                                           (or\
    \ (and (= x (+ y z))\n                                                       \
    \                                                                            \
    \                                                                            \
    \                             (or (and", "  (cond [(and (integer? x) (integer?\
    \ y) (integer? z)) (= x (+ y z))]\n        [else #f]))", "  (and (and (integer?\
    \ x) (integer? y) (integer? z))\n       (or (and (= x (+ y z)) (= (- y z) x))\n\
    \           (and (= y (+ x z)) (= (- x z) y))\n           (and (= z (+ x y)) (=\
    \ (- x y) z)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (integer? x)\n  (integer?\
    \ y)\n  (integer? z)\n  (and (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n\
    \       (integer? x)\n       (integer? y)\n       (integer? z)))\n", "  (if (and\
    \ (integer? x) (integer? y) (integer? z))\n      (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))\n      #f))\n", "  (cond\n    [(and (exact? x) (exact? y) (exact?\
    \ z))\n     (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n    [else #f]))\n",
  "  (or (and (integer? x) (integer? y) (integer? z) (= x (+ y z)))\n      (and (integer?\
    \ x) (integer? y) (integer? z) (= y (+ x z)))\n      (and (integer? x) (integer?\
    \ y) (integer? z) (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (= x (+ y z))\n           (= y (+ x\
    \ z))\n           (= z (+ x y)))))\n", "  ;; Check that the x + y + z are integers\n\
    \  (if (and (integer? x) (integer? y) (integer? z))\n      ;; Check if one of\
    \ the numbers is equal to the sum of the other two\n      (or (= x (+ y z)) (=\
    \ y (+ x z)) (= z (+ x y)))\n      ;; return false if not\n      #f))\n```\n\n\
    ### Problem #19\n\n```racket\n#lang racket\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (and (= x (+ y z)) #t)\n           (and (= y (+\
    \ x z)) #t)\n           (and (= z (+ x y)) #t))))", "  (define (same_as_sum a\
    \ b c)\n    (or (= a (+ b c))\n        (= b (+ a c))\n        (= c (+ a b))))\n\
    \  (and (integer? x)\n       (integer? y)\n       (integer? z)\n       (same_as_sum\
    \ x y z)))\n", "  (and (integer? x) (integer? y) (integer? z) (or (= (+ x y) z)\
    \ (= (+ x z) y) (= (+ y z) x))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (equal? x (+ y z))\n           (equal? y (+ x z))\n         \
    \  (equal? z (+ x y)))))\n", "  (and (and (integer? x) (integer? y) (integer?\
    \ z))\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y\
    \ z) x))))", "  (cond\n    [(integer? x)\n     (integer? y)\n     (integer? z)\n\
    \     (and (= x (+ y z))\n          #t)]\n    [else\n     #f]))", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n</code>\nThis example is from exercism.io. \n\
    I am only to solve question #1 \nCreate a function that takes 3 numbers.\nReturns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n\n\nA:\n\nYour code is on the right track, but you need to do\
    \ some more work.\nYou need to write a function that checks if a single number,\
    \ <code>x</code>, is equal to the sum of <code>y</code> and <code>z</code>.\n\
    You can call this function <code>sum-equal?</code>.\nThen you need to write a\
    \ function that calls <code>sum-equal?</code> three times, once for each possible\
    \ order of your three numbers, and returns <code>#t</code> if any of those three\
    \ calls returns <code>#t</code>.\n<code>(define (any-int x y z)\n  (or (sum-equal?\
    \ x y z)\n      (sum-equal? y x z)\n      (sum-equal? z x y)))\n</code>\nFinally,\
    \ you can write <code>sum-equal?</code> as a one-liner:\n<code>(define (sum-equal?\
    \ x y z)\n  (= x (+ y z)))\n</code>\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (and\
    \ (integer? x) (integer? y) (integer? z))\n       (or (= x (+ y z))\n        \
    \   (= y (+ x z))\n           (= z (+ x y)))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))", " \
    \ (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+\
    \ x z)) (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer? z) (or\
    \ (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (if (and (= (truncate x)\
    \ x) (= (truncate y) y) (= (truncate z) z))\n      (or (= (+ x y) z) (= (+ x z)\
    \ y) (= (+ y z) x))\n      #f))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (cond\n    [(and (integer? x) (integer? y) (integer? z))\n     (and\
    \ (= x (+ y z))\n          (or (= x y) (= x z) (= y z)))]\n    [else\n     #f]))\n",
  "  (cond\n    [(and (integer? x) (integer? y) (integer? z))\n     (or (= (+ x y)\
    \ z) (= (+ x z) y) (= (+ y z) x))]\n    [else #f]))", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  ;; Returns true if a number is an integer.\n  (define (is_int n)\n    (= (round\
    \ n) n))\n  ;; Returns true if a number is equal to the sum of two other numbers.\n\
    \  (define (equal_to_sum n x y)\n    (= n (+ x y)))\n  ;; Return true if any of\
    \ the three numbers is an integer\n  ;; and one of the numbers is equal to the\
    \ sum of the other two.\n  (and (is_int x) (is_int y) (is_int z)\n       (or (equal_to_sum\
    \ x y z)\n           (equal_to_sum y x z)\n           (equal_to_sum z x y))))\n\
    ```\n\n```racket\n#lang racket\n", "  (cond\n    [(and (integer? x) (integer?\
    \ y) (integer? z)) (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n    [else\
    \ #f]))", "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (= (+\
    \ x y) z) (= (+ x z) y) (= (+ y z) x))\n      #f))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z) \n       (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  ;; turn x into a string\n  (define xstring (number->string x))\n  ;; turn y into\
    \ a string\n  (define ystring (number->string y))\n  ;; turn z into a string\n\
    \  (define zstring (number->string z))\n  ;; if either of the strings don't contain\
    \ a \".\"\n  (if (and (not (string-contains xstring \".\"))\n           (not (string-contains\
    \ ystring \".\"))\n           (not (string-contains zstring \".\")))\n      ;;\
    \ and if any of the strings contain a \"-\"\n      (if (or (string-contains xstring\
    \ \"-\")\n              (string-contains ystring \"-\")\n              (string-contains\
    \ zstring \"-\"))\n          ;; and if any of the numbers is equal to the sum\
    \ of the other two,\n          (if (or (= x (+ y z))\n                  (= y (+\
    \ x z))\n                  (= z (+ x y)))\n              ;; then return true.\n\
    \              #t\n              ;; else return false.\n              #f)\n  \
    \        ;; else return false.\n          #f)\n      ;; else return false.\n \
    \     #f))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x\
    \ (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n</code>\nThis is what I have so far\
    \ but it is not working. I have tried all I can think of and have not been able\
    \ to solve it. I need to use racket to figure this out\n\n\nA:\n\nThink about\
    \ how you would calculate the sum of two numbers.  How would you incorporate that\
    \ into a <code>or</code> expression?\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (and (=\
    \ x (+ y z)) (< x z))\n           (and (= x (+ y z)) (< x y))\n           (and\
    \ (= y (+ x z)) (< y z))\n           (and (= y (+ x z)) (< y x))\n           (and\
    \ (= z (+ x y)) (< z y))\n           (and (= z (+ x y)) (< z x)))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z))\n         \
    \  (= y (+ x z))\n           (= z (+ x y)))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z))\n           (= y (+ x z))\n      \
    \     (= z (+ x y)))))\n", "  (integer? x)\n  (integer? y)\n  (integer? z)\n \
    \ (if (= x (+ y z))\n      #t\n      (if (= y (+ x z))\n          #t\n       \
    \   (if (= z (+ x y))\n              #t\n              #f))))", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (= (+ x y) z)\n           (= (+ x z)\
    \ y)\n           (= (+ y z) x))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (and (= x (+ y z)) #t)\n           (and (= y (+ x z)) #t)\n \
    \          (and (= z (+ x y)) #t))))\n", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z)\n  (or (= x (+ y z))\n      (= y (+ x z))\n      (= z (+ x y))))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z))\n         \
    \  (= y (+ x z))\n           (= z (+ x y)))))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      (or (equal? x (+ y z))\n          (equal? y (+ x z))\n\
    \          (equal? z (+ x y)))\n      #f))\n", "  (if (and (integer? x) (integer?\
    \ y) (integer? z))\n      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n   \
    \   (display \"Not Integer\")))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (if (= (+\
    \ x y) z) #t\n      (if (= (+ x z) y) #t\n          (if (= (+ y z) x) #t\n   \
    \           #f))))", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (and (= x (+ y z))\n\t\t(not (= z y)))\n\t   (and (= y (+ x z))\n\t\t(not (=\
    \ z x)))\n\t   (and (= z (+ x y))\n\t\t(not (= x y))))))", "  (cond ((= (+ x y)\
    \ z)\n         #t)\n        ((= (+ x z) y)\n         #t)\n        ((= (+ y z)\
    \ x)\n         #t)\n        (else\n         #f)))\n</code>\nThis is the error\
    \ I'm getting:\n<code>racket@racket:~/Documents/Racket/Functions$ racket raketa.rkt\n\
    racket@racket:~/Documents/Racket/Functions$ \nracket@racket:~/Documents/Racket/Functions$\
    \ racket\nWelcome to Racket v6.12.\n&gt; ,enter raketa.rkt\n&gt; (any_int 3 -2\
    \ 1)\n&gt; \n&gt; ,enter raketa.rkt\n&gt; (any_int 3.6 -2.2 2)\n&gt; \n&gt; ,enter\
    \ raketa.rkt\n&gt; (any_int 5 2 7)\n&gt; \n&gt; ,enter raketa.rkt\n&gt; (any_int\
    \ 3 2 2)\n&gt; \n</code>\nI tried to run it on repl.it and it worked fine.\nWhat\
    \ can be the problem? How can I fix it? \n\n\nA:\n\nYou need to call the function\
    \ using the <code>enter</code> command, because you defined the function inside\
    \ the file, so it won't be available in the REPL. Or you can use the <code>-l</code>\
    \ flag when running the command:\n<code>racket -l raketa.rkt\n</code>\nAnd then\
    \ it'll be available, as shown below:\n<code>Welcome to Racket v6.12.\n&gt; (any_int\
    \ 3 -2 1)\n'#t\n&gt; (any_int 3.6 -2.2 2)\n'#f\n&gt; (any_int 5 2 7)\n'#t\n&gt;\
    \ (any_int 3 2 2)\n'#f\n</code>\n", '  (and (integer? x) (integer? y) (integer?
    z)))', "  (let ([sum (+ x y)])\n    (and (integer? x)\n         (integer? y)\n\
    \         (integer? z)\n         (or (= x (+ y z))\n             (= y (+ x z))\n\
    \             (= z (+ x y))))))\n", "  (and\n   (=\n    (remainder\n     (int\
    \ x)\n     1)\n    0)\n   (=\n    (remainder\n     (int y)\n     1)\n    0)\n\
    \   (=\n    (remainder\n     (int z)\n     1)\n    0)\n   (or\n    (=\n     (+\
    \ y z)\n     x)\n    (=\n     (+ x z)\n     y)\n    (=\n     (+ x y)\n     z))))\n",
  "  (or (and (integer? x) (integer? y) (integer? z) (= x (+ y z)))\n      (and (integer?\
    \ x) (integer? y) (integer? z) (= y (+ x z)))\n      (and (integer? x) (integer?\
    \ y) (integer? z) (= z (+ x y)))))", "  (cond\n    [(and (integer? x) (integer?\
    \ y) (integer? z))\n     (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n   \
    \ [else #f]))\n", "  (or\n   (and (= x (+ y z)) (integer? x) (integer? y) (integer?\
    \ z))\n   (and (= y (+ x z)) (integer? x) (integer? y) (integer? z))\n   (and\
    \ (= z (+ x y)) (integer? x) (integer? y) (integer? z))))\n", "  (cond\n    [(integer?\
    \ x) (any_int (- x y) x z)]\n    [(integer? y) (any_int x (- y z) y)]\n    [(integer?\
    \ z) (any_int x y (- z x))]\n    [else #f]))\n</code>\nI would like to know if\
    \ my solution is really functional and if there is a better solution.\nI can't\
    \ use <code>and</code> and <code>or</code>.\nThanks.\n\n\nA:\n\nYour solution\
    \ isn't very functional, because you're breaking the rule of not mutating the\
    \ arguments. In order to do subtraction, you need to create a new number, and\
    \ that's not allowed in functional programming.\nUse this instead:\n<code>(define\
    \ (any_int x y z)\n  (or (and (integer? x) (integer? y) (= x (+ y z)))\n     \
    \ (and (integer? x) (integer? z) (= x (+ z y)))\n      (and (integer? y) (integer?\
    \ z) (= y (+ z x)))))\n</code>\n", "  (if (and (integer? x) (integer? y) (integer?\
    \ z))\n      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))\n", " \
    \ (and (integer? x) (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n      \
    \ (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and\n   (integer? x)\n\
    \   (integer? y)\n   (integer? z)\n   (or\n    (= x (+ y z))\n    (= y (+ x z))\n\
    \    (= z (+ x y)))))\n", "  (if (and (integer? x) (integer? y) (integer? z))\n\
    \      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))\n</code>\nI'm\
    \ not sure why but the only one that doesn't work is the last test case\n<code>(any_int\
    \ 3.6 -2.2 2)\n#f\n</code>\nI'm using DrRacket, maybe I'm missing something?\n\
    \n\nA:\n\nRacket has two types of numbers, integers and reals (which are represented\
    \ as IEEE 754 floating point numbers).\n<code>integer?</code> and <code>real?</code>\
    \ are two separate type predicates, with the obvious meanings.\nIf you are trying\
    \ to check whether a number is an integer, then you want <code>integer?</code>.\n\
    However, if you want to check whether a number is a real number, then you want\
    \ <code>real?</code>.", "  (if (and (integer? x) (integer? y) (integer? z))\n\
    \      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))\n", "  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (and (= x (+ y z)) (= (-\
    \ x y) z))\n           (and (= x (+ z y)) (= (- x z) y))\n           (and (= y\
    \ (+ x z)) (= (- y x) z))\n           (and (= y (+ z x)) (= (- y z) x))\n    \
    \       (and (= z (+ x y)) (= (- z x) y))\n           (and (= z (+ y x)) (= (-\
    \ z y) x)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (=\
    \ x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (cond ((= x (+ y z)) #t)\n\
    \        ((= y (+ x z)) #t)\n        ((= z (+ x y)) #t)\n        (else #f)))\n",
  "  (and (and (integer? x) (integer? y) (integer? z))\n       (or (= x (+ y z))\n\
    \           (= y (+ x z))\n           (= z (+ x y)))))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x\
    \ y)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (and (=\
    \ x (+ y z)) true)\n           (and (= y (+ x z)) true)\n           (and (= z\
    \ (+ x y)) true))))\n", "  (and (integer? x) (integer? y) (integer? z)\n     \
    \  (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (and (= x (+ y z)) (not (= x y)))\n           (and\
    \ (= x (+ z y)) (not (= x z)))\n           (and (= y (+ x z)) (not (= y x)))\n\
    \           (and (= y (+ z x)) (not (= y z)))\n           (and (= z (+ x y)) (not\
    \ (= z x)))\n           (and (= z (+ y x)) (not (= z y))))))\n", "  (and (and\
    \ (integer? x) (integer? y) (integer? z)) (or (= x (+ y z)) (= y (+ x z)) (= z\
    \ (+ x y)))))\n", "  (cond\n    [(integer? x) (integer? y) (integer? z) (= y (+\
    \ x z))]\n    [(integer? x) (integer? y) (integer? z) (= z (+ x y))]\n    [(integer?\
    \ x) (integer? y) (integer? z) (= x (+ y z))]\n    [else #f]))", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (and (= x (+ y z)) x)\n           (and\
    \ (= y (+ x z)) y)\n           (and (= z (+ x y)) z))))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)))\n", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z)\n  (and (or (= x (+ y z))\n           (= y (+ x z))\n           (= z (+ x\
    \ y)))\n       (and (integer? x)\n            (integer? y)\n            (integer?\
    \ z))))\n", "  (cond ((and (integer? x) (integer? y) (integer? z)) (or (and (=\
    \ x (+ y z)) (= y (+ x z)))\n                                                \
    \         (and (= x (+ y z)) (= z (+ x y)))\n                                \
    \                         (and (= y (+ x z)) (= z (+ x y)))))\n        (else #f)))\n",
  "  (cond\n    [(integer? x) (integer? y) (integer? z) (= (+ x y) z)]\n    [(integer?\
    \ x) (integer? y) (integer? z) (= (+ x z) y)]\n    [(integer? x) (integer? y)\
    \ (integer? z) (= (+ y z) x)]\n    [else #f]))", "  (integer? x)\n  (integer?\
    \ y)\n  (integer? z)\n  (and\n   (or (= x (+ y z))\n       (= y (+ x z))\n   \
    \    (= z (+ x y)))\n   (or (integer? x)\n       (integer? y)\n       (integer?\
    \ z))))\n```\n\n```racket\n#lang racket\n", "  (cond\n    [(and (integer? x) (integer?\
    \ y) (integer? z))\n     (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n   \
    \ [else\n     #f]))\n</code>\nUpdate:\nI have also tried this (notice the <code>integer?</code>\
    \ test in the first line):\n<code>;; Create a function that takes 3 numbers.",
  "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+\
    \ x z)) (= z (+ x y)))))\n", "  (integer? x)\n  (integer? y)\n  (integer? z)\n\
    \  (or (= (+ x y) z)\n      (= (+ x z) y)\n      (= (+ y z) x)))\n```\n\n``` #lang\
    \ racket\n", "  (or (= x (+ y z))\n      (= y (+ x z))\n      (= z (+ x y))))\n",
  "  (and (integer? x) (integer? y) (integer? z)))\n</code>\nThe following error messages\
    \ appear when I try to run it:\n<code>&gt; (any_int 5 2 7)\n. Call to undefined\
    \ identifier:\n  any_int\n  in: any_int\n</code>\nWhat do I need to do differently?\
    \ I'm trying to program this in a DrRacket window, if that matters.\n\n\nA:\n\n\
    The problem is that your definition of <code>any_int</code> is not a proper Racket\
    \ definition form. According to the Racket Documentation on definitions, a definition\
    \ should be of the form <code>(define identifier expression)</code> - in other\
    \ words, the expression needs to be evaluated and the result associated with the\
    \ identifier.\nYou could fix this by associating the function created by <code>(lambda\
    \ (x y z) ...)</code> with the identifier <code>any_int</code> in the final line\
    \ of your code:\n<code>(define any_int (lambda (x y z)\n  (and (integer? x) (integer?\
    \ y) (integer? z))))\n</code>\n", '  (and (integer? x) (integer? y) (integer?
    z) (or (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))))', "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (= x (+ y z)) (=\
    \ y (+ x z)) (= z (+ x y)))\n      #f))", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (and (= x (+ y z)) (= x y))\n           (and (= x (+ y z)) (=\
    \ x z))\n           (and (= y (+ x z)) (= y x))\n           (and (= y (+ x z))\
    \ (= y z))\n           (and (= z (+ x y)) (= z x))\n           (and (= z (+ x\
    \ y)) (= z y)))))\n", "  (integer? x)\n  (integer? y)\n  (integer? z)\n  (or (and\
    \ (= x (+ y z)) (> x 0))\n      (and (= y (+ x z)) (> y 0))\n      (and (= z (+\
    \ x y)) (> z 0))))\n", "  (and\n   (and (integer? x) (integer? y) (integer? z))\n\
    \   (or\n    (and (= x (+ y z)) (/= x 0))\n    (and (= y (+ x z)) (/= y 0))\n\
    \    (and (= z (+ x y)) (/= z 0)))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z)\
    \ x))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or (= (+ x\
    \ y) z)\n           (= (+ x z) y)\n           (= (+ y z) x))))", "  (if (and (integer?\
    \ x) (integer? y) (integer? z))\n      (or (and (= x (+ y z)) (= z (- x y)))\n\
    \          (and (= y (+ x z)) (= z (- y x)))\n          (and (= z (+ x y)) (=\
    \ y (- z x))))\n      #f))\n", "  (integer? x)\n  (integer? y)\n  (integer? z)\n\
    \  (if (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y))) #t #f))\n", "  (integer?\
    \ x y z)\n  (if (and (= (+ x y) z)\n           (= (+ y z) x)\n           (= (+\
    \ x z) y))\n      #t\n      #f))\n", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z)\n  (if (and (= (+ x y) z) (= (+ x z) y) (= (+ y z) x))\n      #t\n      #f))",
  "  (and (and (integer? x) (integer? y) (integer? z)) (or (= x (+ y z)) (= y (+ x\
    \ z)) (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n  \
    \     (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (define (any_int?\
    \ a b c)\n    (and (= (truncate a) a) (= (truncate b) b) (= (truncate c) c)))\n\
    \  (and (any_int? x y z)\n       (or (and (= x (+ y z)) #t)\n           (and (=\
    \ y (+ x z)) #t)\n           (and (= z (+ x y)) #t))))\n", "  (or (and (integer?\
    \ x) (integer? y) (integer? z) (= x (+ y z)))\n      (and (integer? x) (integer?\
    \ y) (integer? z) (= y (+ x z)))\n      (and (integer? x) (integer? y) (integer?\
    \ z) (= z (+ x y)))))\n", "  (and (and (integer? x) (integer? y) (integer? z))\n\
    \       (or (= x (+ y z))\n           (= y (+ x z))\n           (= z (+ x y)))))\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+\
    \ x z)) (= z (+ x y)))))", "  (if (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n\
    \      #t\n      #f))\n</code>\nHowever, when running this code:\n<code>&gt; (any_int\
    \ 3.6 -2.2 2)\n#t\n</code>\nIt returns <code>#t</code>, even though the last number,\
    \ <code>2</code>, is not an integer.\nAm I doing something wrong?\n\n\nA:\n\n\
    The <code>=</code> operator is quite permissive. According to the documentation,\
    \ it returns true if the two arguments are numerically equal, meaning that if\
    \ you compare two numbers of different type they'll be converted to the same type\
    \ and then compared. This is why this code:\n<code>(= 1 1.0)\n</code>\nreturns\
    \ <code>#t</code>, because when you compare an integer with a floating point number\
    \ both numbers are converted to floating point. The solution is to use <code>integer?</code>,\
    \ which will return <code>#t</code> only if the argument is an integer:\n<code>(any_int\
    \ 3.6 -2.2 2)\n=&gt; #f\n</code>\n", "  (if (and (integer? x) (integer? y) (integer?\
    \ z))\n      (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n      #f))", "  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= (+ x y) z)\n         \
    \  (= (+ x z) y)\n           (= (+ y z) x))))", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (and (integer? x) (integer? y) (integer? z)\n       (or (= (+ x y) z)\n     \
    \      (= (+ x z) y)\n           (= (+ y z) x))))\n", "  (cond\n    [(and (integer?\
    \ x) (integer? y) (integer? z)) (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))]\n\
    \    [else #f]))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))", "  (and (integer? x) (integer?\
    \ y) (integer? z)\n       (or (and (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))\n\
    \           (and (= x (+ y z)) (= y (+ x z)))\n           (and (= x (+ y z)) (=\
    \ z (+ x y)))\n           (and (= y (+ x z)) (= z (+ x y))))))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+\
    \ x y)))))", "  (and (integer? x) (integer? y) (integer? z) (or (= x (+ y z))\
    \ (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= (+ x y) z)\n           (= (+ x z) y)\n           (= (+ y z)\
    \ x))))\n</code>\nThe link to the problem is below. I am really confused as to\
    \ why my solution is not working properly. \nhttp://www.practicepython.org/exercise/2014/05/28/16-password-generator.html\n\
    \n\nA:\n\nYour code is very close! The problem is that you use <code>=</code>\
    \ to compare numbers instead of <code>equal?</code>. <code>=</code> is for comparing\
    \ if two numbers are \u201Cequal\u201D mathematically, but <code>equal?</code>\
    \ takes into account if two numbers represent the same value. You can see some\
    \ examples in the docs:\n<code>&gt; (= 1 1.0)\n#t\n&gt; (equal? 1 1.0)\n#f\n&gt;\
    \ (= 1.0 1.0)\n#t\n&gt; (equal? 1.0 1.0)\n#t\n</code>\nYou can read more about\
    \ equality in Racket in the docs.\n", "  (and (integer? x) (integer? y) (integer?\
    \ z)\n       (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))", "  (and (integer?\
    \ x) (integer? y) (integer? z)\n       (or (and (= x (+ y z)) (= z (- x y)))\n\
    \           (and (= y (+ x z)) (= z (- y x)))\n           (and (= z (+ x y)) (=\
    \ y (- z x))))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and\n\
    \   (integer? x)\n   (integer? y)\n   (integer? z)\n   (or (= x (+ y z))\n   \
    \    (= y (+ x z))\n       (= z (+ x y)))))", "  (and (integer? x) (integer? y)\
    \ (integer? z)))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (= x (+ y z))\n           (= y (+ x z))\n           (= z (+ x y)))))\n", " \
    \ (or (and (integer? x) (integer? y) (integer? z) (= x (+ y z)))\n      (and (integer?\
    \ x) (integer? y) (integer? z) (= y (+ x z)))\n      (and (integer? x) (integer?\
    \ y) (integer? z) (= z (+ x y)))))", "  (integer? x)\n  (integer? y)\n  (integer?\
    \ z)\n  (cond\n    ((= (+ x y) z) #t)\n    ((= (+ x z) y) #t)\n    ((= (+ y z)\
    \ x) #t)\n    (else #f)))\n</code>\nIt's working, but in output I have also <code>#t</code>\
    \ and <code>#f</code> from <code>(integer? x)</code> and <code>(integer? y)</code>\
    \ and <code>(integer? z)</code>.\nHow to fix it?\n\n\nA:\n\nBy putting the conditions\
    \ <code>(integer? x)</code> at the beginning of the function you're returning\
    \ their evaluation as the result of the function. They're useful for checking\
    \ the arguments, but if you want to return a boolean you should move them inside\
    \ the <code>cond</code>, like this:\n<code>(define (any_int x y z)\n  (cond\n\
    \    ((and (integer? x) (integer? y) (integer? z) (= (+ x y) z)) #t)\n    ((and\
    \ (integer? x) (integer? y) (integer? z) (= (+ x z) y)) #t)\n    ((and (integer?\
    \ x) (integer? y) (integer? z) (= (+ y z) x)) #t)\n    (else #f)))\n</code>\n",
  "  (if (and (integer? x) (integer? y) (integer? z))\n      (or (= x (+ y z)) (=\
    \ y (+ x z)) (= z (+ x y)))\n      #f))\n", "  (or (and (exact? x) (exact? y)\
    \ (exact? z) (equal? x (+ y z)))\n      (and (exact? x) (exact? y) (exact? z)\
    \ (equal? y (+ x z)))\n      (and (exact? x) (exact? y) (exact? z) (equal? z (+\
    \ x y)))))\n", "  (and (integer? x) (integer? y) (integer? z)))\n", "  (and (integer?\
    \ x) (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n",
  "  (and (integer? x) (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z)) (=\
    \ z (+ x y)))))\n", "  (and (integer? x) (integer? y) (integer? z)\n       (or\
    \ (and (= x (+ y z)) (= x (- y z)))\n           (and (= y (+ x z)) (= y (- x z)))\n\
    \           (and (= z (+ x y)) (= z (- x y))))))\n", "  (and (integer? x) (integer?\
    \ y) (integer? z)))\n", "  (and\n   (and (integer? x) (integer? y) (integer? z))\n\
    \   (or (= x (+ y z)) (= y (+ x z)) (= z (+ x y)))))\n", "  (and (integer? x)\
    \ (integer? y) (integer? z)\n       (or (= x (+ y z))\n           (= y (+ x z))\n\
    \           (= z (+ x y)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
