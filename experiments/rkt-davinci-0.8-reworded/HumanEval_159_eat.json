{
  "name": "HumanEval_159_eat",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; You're a hungry rabbit, and you already have eaten a certain number of carrots,\n;; but now you need to eat more carrots to complete the day's meals.\n;; you should return a list of [ total number of eaten carrots after your meals,\n;; the number of carrots left after your meals ]\n;; if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n;; Example:\n;; >>> (eat 5 6 10)\n;; (list 11 4)\n;; >>> (eat 4 8 9)\n;; (list 12 1)\n;; >>> (eat 1 10 10)\n;; (list 11 0)\n;; >>> (eat 2 11 5)\n;; (list 7 0)\n;; Variables:\n;; @number : integer\n;; the number of carrots that you have eaten.\n;; @need : integer\n;; the number of carrots that you need to eat.\n;; @remaining : integer\n;; the number of remaining carrots thet exist in stock\n;; Constrain:\n;; * 0 <= number <= 1000\n;; * 0 <= need <= 1000\n;; * 0 <= remaining <= 1000\n;; Have fun :)\n(define (eat number need remaining)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate eat))\n    (check-equal? (candidate 5 6 10) (list 11 4))\n    (check-equal? (candidate 4 8 9) (list 12 1))\n    (check-equal? (candidate 1 10 10) (list 11 0))\n    (check-equal? (candidate 2 11 5) (list 7 0))\n    (check-equal? (candidate 4 5 7) (list 9 2))\n    (check-equal? (candidate 4 5 1) (list 5 0))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ([target (+ number need)]\n        [result (cons target (- remaining target))])\n    (if (<= (car result) remaining)\n        result\n        (cons (+ number remaining) 0))))",
    "  (if (and (= 0 need) (not (= 0 remaining)))\n      (list (+ number remaining) 0)\n      (if (and (= 0 remaining) (not (= 0 need)))\n          (list (+ number remaining) 0)\n          (if (and (= 0 need) (= 0 remaining))\n              (list number 0)\n              (list (+ number need) (- remaining need))))))\n",
    "  (if (&lt;= (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n\n</code>\n",
    "  (let ([total (+ number need)]\n        [remaining (- remaining need)])\n    (if (< number 0) (error \"number is not positive\")\n        (if (< need 0) (error \"need is not positive\")\n            (if (< remaining 0) (error \"remaining is not positive\")\n                (if (< total remaining) (list total remaining)\n                    (list remaining 0)))))))",
    "  (define (aux eaten needed)\n    (cond [(zero? needed) (list eaten remaining)]\n          [(zero? remaining) (list (+ eaten remaining) 0)]\n          [else (aux (+ eaten 1) (- needed 1))]))\n  (aux number need))\n",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (define (eat-help number need remaining)\n    (if (> need remaining)\n        (list (+ number remaining) 0)\n        (list (+ number need) (- remaining need))))\n  (eat-help number need remaining))\n```\n\n### C++ solution\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <deque>\n#include <list>\n#include <set>\n#include <bitset>\n#include <map>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <string>\n\nusing namespace std;\n\nvector<int> eat(int number, int need, int remaining) {\n    vector<int> result;\n    if (need > remaining) {\n        result.push_back(number + remaining);\n        result.push_back(0);\n    } else {\n        result.push_back(number + need);\n        result.push_back(remaining - need);\n    }\n    return result;\n}\n\nint main() {\n    for (auto i : eat(5, 6, 10)) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    for (auto i : eat(4, 8, 9)) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    for (auto i : eat(1, 10, 10)) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    for (auto i : eat(2, 11, 5)) {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n```\n\n### Java solution\n\n```java\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class Program {\n    public static ArrayList<Integer> eat(int number, int need, int remaining) {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (need > remaining) {\n            result.add(number + remaining);\n            result.add(0);\n",
    "  (list (+ number need) (- remaining need)))",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining (+ number need)))))\n\n```\n\n```racket\n#lang racket\n",
    "  (list (- remaining (+ number need)) (if (>= need remaining) 0 (- remaining need))))\n",
    "  (cons (+ number need) (- remaining need)))\n```\n\n#### Tests\n```Racket",
    "  (cond\n    [(> need (+ number remaining))\n     (list (+ number remaining) 0)]\n    [else\n     (list (+ number need) (- remaining need))]))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (if (and (integer? number)\n           (integer? need)\n           (integer? remaining)\n           (and (<= 0 number 1000)\n                (<= 0 need 1000)\n                (<= 0 remaining 1000)))\n      (if (< (+ number need) remaining)\n          (list (+ number need) (- remaining (+ number need)))\n          (list (+ number remaining) 0))\n      (list 0 0)))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (if (not (and (integer? number)\n                (integer? need)\n                (integer? remaining)))\n      (error \"wrong type\")\n      (cond ((< number 0) (error \"number cannot be negative\"))\n            ((< need 0) (error \"need cannot be negative\"))\n            ((< remaining 0) (error \"remaining cannot be negative\"))\n            ((> number 1000) (error \"number cannot be more than 1000\"))\n            ((> need 1000) (error \"need cannot be more than 1000\"))\n            ((> remaining 1000) (error \"remaining cannot be more than 1000\"))\n            (else\n             (if (> remaining need)\n                 (list (+ number need) (- remaining need))\n                 (list (+ number remaining) 0))))))\n",
    "  (list\n   (+ number need)\n   (if (> remaining need)\n       (- remaining need)\n       0)))\n```\n\n## Level 8:\n\n```racket\n#lang racket\n",
    "  (if (>= (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n```\n\n## Blockly \n\n```xml\n<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables>\n    <variable id=\"m9mH2|NCZCCYw~2%/S)/\">number</variable>\n    <variable id=\"Cn;p4N/szs8nYWd{K[xK\">need</variable>\n    <variable id=\"%iP-9tt@a)%I`|8Z#Qw0\">remaining</variable>\n  </variables>\n  <block type=\"functional_compute\" inline=\"false\" x=\"125\" y=\"25\">\n    <functional_input name=\"ARG1\">\n      <block type=\"lists_create_with\" inline=\"true\">\n        <mutation items=\"2\"></mutation>\n        <value name=\"ADD0\">\n          <block type=\"functional_plus\" inline=\"true\">\n            <functional_input name=\"ARG1\">\n              <block type=\"variables_get\" inline=\"false\">\n                <field name=\"VAR\">number</field>\n              </block>\n            </functional_input>\n            <functional_input name=\"ARG2\">\n              <block type=\"variables_get\" inline=\"false\">\n                <field name=\"VAR\">need</field>\n              </block>\n            </functional_input>\n          </block>\n        </value>\n        <value name=\"ADD1\">\n          <block type=\"variables_get\" inline=\"false\">\n            <field name=\"VAR\">remaining</field>\n          </block>\n        </value>\n      </block>\n    </functional_input>\n    <functional_input name=\"ARG2\">\n      <block type=\"functional_greater_or_equal\" inline=\"true\">\n        <functional_input name=\"ARG1\">\n          <block type=\"functional_plus\" inline=\"true\">\n            <functional_input name=\"ARG1\">\n              <block type=\"variables_get\" inline=\"",
    "  (list\n   (+ number need)\n   (if (>= need remaining) 0 (- remaining need))))\n```\n\n```javascript\nfunction eat(number, need, remaining) {\n  return [\n    number + need,\n    need >= remaining ? 0 : remaining - need\n  ];\n}\n```\n\n## 11. What is the sum of the digits of 2^1000?\n\n```racket\n#lang racket\n",
    "  (cond [(>= (+ number need) remaining) (list (+ number remaining) 0)]\n        [else (list (+ number need) (- remaining (+ number need)))]))\n```\n\n## Practicing FP\n\n```racket\n#lang racket\n",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need) (- remaining need)))\n",
    "  '(0 0))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(> need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
    "  (cond\n    [(<= remaining 0) (list (+ number remaining) 0)]\n    [(<= need 0) (list number remaining)]\n    [else (eat (+ number 1) (- need 1) (- remaining 1))]))\n",
    "  (if (&lt;= (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n",
    "  (if (> number 0) (cons number (cons need (cons remaining ())))\n      (cons (+ number (min need remaining)) (cons (- need (min need remaining)) ()))))",
    "  (if (< need (+ number remaining))\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
    "  (list (if (> (+ number need) remaining)\n            (+ number remaining)\n            (+ number need))\n        (if (> (+ number need) remaining)\n            0\n            (- remaining (+ number need)))))",
    "  (list (+ number need)\n        (- remaining need)))",
    "  \n  (list (+ number (min need (- remaining number)))\n        (- remaining (min need (- remaining number)))))\n",
    "\t(let ((need (- need number))\n\t\t(remaining (- remaining number)))\n\t\t(list (+ number need) remaining)))\n",
    "  (if (and (integer? number)\n           (integer? need)\n           (integer? remaining)\n           (and (>= number 0) (<= number 1000))\n           (and (>= need 0) (<= need 1000))\n           (and (>= remaining 0) (<= remaining 1000)))\n      (let ([total (+ number need)]\n            [left (- total remaining)])\n        (if (>= remaining need)\n            (list total (- need left))\n            (list total 0)))\n      '()))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(= number need) (list (+ need remaining) 0)]\n    [(<= number (+ remaining need)) (list (+ number remaining) (- (- need number) remaining))]\n    [else (list (+ number remaining) 0)]))",
    "  ;;; Your code here\n  )\n",
    "  (if (<= remaining need)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (let*\n    ([total (+ number need)]\n     [exceed (if (> total remaining) (- total remaining) 0)]\n     [carrots (if (> total remaining) remaining total)])\n    (list carrots exceed)))\n\n```",
    "  (if (< (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  '(11 4))\n\n```\n\n</details>\n\n<details>\n  <summary>Click to see function usage</summary>\n\n```Racket\n#lang racket\n",
    "  (cond\n    [(> (+ number need) remaining) (list remaining (+ (- (+ number need) remaining) need))]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n",
    "  (list (+ number need) (- remaining need)))\n```\n\n```\n@test \"should eat what you need\" {\n  $result = eat(5, 6, 10);\n  is($result[0], 11);\n  is($result[1], 4);\n}\n\n@test \"should eat the remaining carrots\" {\n  $result = eat(4, 8, 9);\n  is($result[0], 12);\n  is($result[1], 1);\n}\n\n@test \"should eat what you need and the remaining carrots\" {\n  $result = eat(1, 10, 10);\n  is($result[0], 11);\n  is($result[1], 0);\n}\n\n@test \"should eat only what remains\" {\n  $result = eat(2, 11, 5);\n  is($result[0], 7);\n  is($result[1], 0);\n}\n```\n\n## R\n\n```\n#lang racket\n",
    "  (cond [(> need (+ number remaining))\n         (list (+ number remaining) 0)]\n        [else\n         (list (+ number need) (- remaining need))]))\n",
    "  (if (<= number need)\n      (list (+ number remaining) (- remaining number))\n      (list (+ number remaining) 0)))\n",
    "  (list\n    (if (> (+ number need) remaining) (+ number remaining) (+ number need))\n    (if (> (+ number need) remaining) 0 (- remaining need))))",
    "  (let loop ([eaten number] [needneed need] [remrem remaining])\n    (if (= needneed 0)\n        (list eaten remrem)\n        (if (< needneed remrem)\n            (loop (+ eaten needneed) 0 (- remrem needneed))\n            (loop (+ eaten remrem) (- needneed remrem) 0)))))\n",
    "  (cond [(> (+ number need) remaining) (list (+ number remaining) 0)]\n        [else (list (+ number need) (- remaining need))]))",
    "  (let ([total (+ number need)]\n        [available (+ remaining number)]\n        [left (modulo (- available total) need)])\n    (list (- available left) left)))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (if (< number need)\n      (if (< need (+ number remaining))\n          (list (+ number need) (- (+ number remaining) need))\n          (list (+ number remaining) 0))\n      (list number remaining)))",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond\n    [(>= need (+ number remaining)) (list (+ number remaining) 0)]\n    [else (list (+ number remaining) (- (- number need) remaining))]))\n</code>\nI want to know is my code wrong? Or is there any better way to implement this function?\n\n\nA:\n\nYou've got a couple of things wrong.\n\nYour <code>cond</code> form is backward.\nYou should first check for the case where there's enough carrots for the rabbit, and then for the case where there's not enough carrots for the rabbit. \nThe parentheses around the arguments in your <code>list</code> expressions are unnecessary.\nThe <code>-</code> in your <code>list</code> expression is unnecessary.\nYou could simply use <code>+</code> instead of <code>-</code>. \n\nBelow is a corrected version of your code. \n<code>(define (eat number need remaining)\n  (cond\n    [(&gt;= (+ number remaining) need) (list (+ number remaining) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n</code>\n",
    "  (cons\n   (+ number need)\n   (if (>= remaining need)\n       (- remaining need)\n       0)))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(> (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))",
    "  (list (+ number need) (- remaining need)))\n```\n\n- \u5c0f\u5b66\n```racket\n#lang racket\n",
    "  (cond\n    [(<= number 0) (list 0 (if (< need remaining) need remaining))]\n    [(<= need 0) (list number remaining)]\n    [(>= (add1 number) remaining) (list (+ number remaining) 0)]\n    [else (eat (+ number 1) (- need 1) (- remaining 1))]))\n",
    "  ;; YOUR CODE HERE\n  (cons (+ number need) (- remaining need)))",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need) (- remaining need)))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (if (< (+ number need) (add1 remaining))\n      (list (+ number need) (- remaining need))\n      (list (+ remaining number) 0)))\n",
    "  (list (min (+ number need) (+ number remaining))\n        (max 0 (- remaining need))))\n",
    "  (list (- (+ number need) remaining) (- remaining need)))\n```\n\n### Sample input\n\n> 5 6 10\n\n### Sample output\n\n> (list 11 4)\n\n### Explanation\n\n- 5 carrots eaten at the beginning\n- you need to eat 6 more carrots\n- there are 10 remaining carrots\n- so you will eat all remaining carrots and have 11 carrots eaten, and then there will be 4 carrots left.",
    "  (if (and (number-between number 0 1000)\n           (number-between need 0 1000)\n           (number-between remaining 0 1000))\n      (if (> (+ number need) remaining)\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining need)))\n      (list \"error\" \"error\")))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (local ((define total (+ number need))\n          (define carrots-left (if (> remaining total)\n                                   (- remaining total)\n                                   0)))\n    (list total carrots-left)))",
    "  (list (+ number need)\n        (- remaining need)))",
    "  (define eaten (+ number need))\n  (define left (- remaining eaten))\n  (if (positive? left)\n      (list eaten left)\n      (list eaten 0)))",
    "  'list)\n ",
    "  (list (+ number need) (- remaining need)))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  ;; make sure that the function returns a list of integer\n  (list (if (<= (+ number need) remaining) (+ number need) remaining)\n        (if (<= (+ number need) remaining) (- remaining (+ number need)) 0)))\n",
    "  (list (+ number need) (- remaining need)))\n```\n\n## Results\n\n```text\n\nclojure-kata-4-leftpad$ lein test kata.core-test\n\nlein test kata.core-test\n\nlein test :only kata.core-test/test_eat\n\nRan 1 tests containing 1 assertions.\n0 failures, 0 errors.\n\nRan 1 tests containing 1 assertions.\n0 failures, 0 errors.\n\nlein test :only kata.core-test/test_eat_with_not_enough_carrots\n\nRan 1 tests containing 1 assertions.\n0 failures, 0 errors.\n\nRan 1 tests containing 1 assertions.\n0 failures, 0 errors.\n\nRan 2 tests containing 2 assertions.\n0 failures, 0 errors.\n\nRan 2 tests containing 2 assertions.\n0 failures, 0 errors.\n\nlein test :only kata.core-test/test_eat_with_two_examples\n\nRan 1 tests containing 2 assertions.\n0 failures, 0 errors.\n\nRan 1 tests containing 2 assertions.\n0 failures, 0 errors.\n\nRan 3 tests containing 3 assertions.\n0 failures, 0 errors.\n\nRan 3 tests containing 3 assertions.\n0 failures, 0 errors.\n\nlein test :only kata.core-test/test_eat_with_two_examples_and_not_enough_carrots\n\nRan 1 tests containing 2 assertions.\n0 failures, 0 errors.\n\nRan 1 tests containing 2 assertions.\n0 failures, 0 errors.\n\nRan 4 tests containing 4 assertions.\n0 failures, 0 errors.\n\nRan 4 tests containing 4 assertions.\n0 failures, 0 errors.\n\nRan 5 tests containing 5 assertions.\n0 failures, 0 errors.\n\nRan 5 tests containing 5 assertions.\n0 failures, 0 errors.\n\nclojure-kata-4-leftpad$\n\n```",
    "  (cond\n    [(> (+ number need) remaining)\n     (list (+ number remaining) 0)]\n    [else\n     (list (+ number need) (- remaining need))]))\n",
    "  (cond [(> (+ number need) remaining)\n         (list (+ number remaining) 0)]\n        [else\n         (list (+ number need) (- remaining need))]))\n",
    "  (if (< need (+ number remaining))\n      (list (+ number need) (- (- (+ number remaining) need) number))\n      (list (+ number remaining) 0)))\n",
    "  (let* ((remaining (- remaining need))\n         (result (if (< remaining 0)\n                     (list (+ number remaining) 0)\n                     (list (+ number need) remaining))))\n    result))\n",
    "  (define total (+ number need))\n  (if (> total remaining)\n      (list remaining (- total remaining))\n      (list total (- remaining need))))\n\n```",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need) (- remaining need)))",
    "  (if (<= (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n",
    "  (cons (+ number need) (- remaining need)))\n",
    "  (if (< need remaining)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
    "  (list (if (< (+ number need) remaining)\n            (+ number need)\n            (+ number remaining))\n        (if (< (+ number need) remaining)\n            (- remaining (+ number need))\n            0)))\n",
    "  (define (remain_from_total total remain)\n    (cond [(<= total remain) (list total remain)]\n          [else (list total (- remain total))]))\n  (remain_from_total (+ number need) remaining))\n",
    "  (let ([eaten (+ number need)]\n        [r (- remaining need)])\n    (cond\n      [(> eaten remaining) (list remaining 0)]\n      [(= eaten remaining) (list remaining 0)]\n      [else (list eaten r)])))\n",
    "  (define final-result 0)\n  (define final-remaining 0)\n  (if (> (+ number need) remaining)\n      (begin\n        (set! final-result (+ number remaining))\n        (set! final-remaining 0))\n      (begin\n        (set! final-result (+ number need))\n        (set! final-remaining (- remaining need))))\n  (list final-result final-remaining))",
    "  (list (+ number need) (- remaining need)))\n```\n\n### \u5012\u8ba1\u65f6\n\n\u5047\u8bbe\u6211\u4eec\u7684\u8ba1\u65f6\u5668\u7684\u521d\u59cb\u65f6\u95f4\u662f `seconds`\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u770b\u5230\u7684\u65f6\u95f4\u5c31\u5e94\u8be5\u662f `seconds` \u51cf\u53bb\u8fc7\u53bb\u7684\u79d2\u6570\uff0c\u6211\u4eec\u60f3\u6bcf\u79d2\u90fd\u5f97\u5230\u4e00\u4e2a\u5012\u8ba1\u65f6\u7684\u6570\u5b57\uff0c\u76f4\u5230\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `for/list` \u548c `sleep` \u51fd\u6570\u5b9e\u73b0\uff1a\n\n```racket\n#lang racket\n",
    "  (list (if (> (+ number need) remaining)\n            (+ number remaining)\n            (+ number need))\n        (if (> (+ number need) remaining)\n            0\n            (- remaining (+ number need)))))\n```\n\n```scheme\n#lang racket\n",
    "  (if (< (- (+ number need) remaining) 0)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  '#(0 0))\n```\n\n### \ubaa9\ud45c\n\n\ub77c\ucf13 \uc5b8\uc5b4\ub97c \uc774\uc6a9\ud558\uc5ec `eat`\uc774\ub77c\ub294 \ud568\uc218\ub97c \uad6c\ud604\ud574\ubcf4\uc790.\n\n### \uc81c\uc57d \uc870\uac74\n\n* `number`\ub294 0 \uc774\uc0c1 1000 \uc774\ud558\uc758 \uc815\uc218\uc5ec\uc57c \ud55c\ub2e4.\n* `need`\ub294 0 \uc774\uc0c1 1000 \uc774\ud558\uc758 \uc815\uc218\uc5ec\uc57c \ud55c\ub2e4.\n* `remaining`\uc740 0 \uc774\uc0c1 1000 \uc774\ud558\uc758 \uc815\uc218\uc5ec\uc57c \ud55c\ub2e4.\n\n### \uc785\ub825\uacfc \ucd9c\ub825\n\n\uc785\ub825: \uc815\uc218 3\uac1c\n\ucd9c\ub825: \ub9ac\uc2a4\ud2b8 (\ub9ac\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ub9ac\uc2a4\ud2b8\ub85c \uac10\uc2f8\uc11c \ubc18\ud658\ud558\ub77c.)\n\n### \uc608\uc81c\n\n```clojure",
    "  (cond\n    [(>= remaining need) (list (+ number need) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  ; your code goes here\n  )\n```\n\n## Task 2: Counting to N\n\n```\n#lang racket\n",
    "  'CALLING-EAT)\n\n```\n\n## The Code\n\n```racket\n#lang racket",
    "  (cond\n    [(>= number need) (list (+ number remaining) 0)]\n    [(>= remaining need) (list (+ number remaining) (- remaining need))]\n    [else (list (+ number remaining) 0)]))\n```\n\n## \u0627\u0644\u062c\u0632\u0621 \u0627\u0644\u062b\u0627\u0646\u064a\n\n### \u0642\u0627\u0626\u0645\u0629 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u0643\u0631\u0631\u0629\n\n\u0644\u0643\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0645\u0646 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u060c \u0639\u0627\u062f\u0629\u064b \u060c \u064a\u062a\u0645 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062a\u0631\u062a\u064a\u0628 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0644\u062a\u0645\u062b\u064a\u0644 \u0645\u062c\u0645\u0648\u0639\u0629 \u0639\u0646\u0627\u0635\u0631 \u0645\u062d\u062f\u062f\u0629 \u060c \u0644\u0643\u0646\u0647 \u064a\u0645\u0643\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0637\u0631\u064a\u0642\u0629 \u0645\u062e\u062a\u0644\u0641\u0629 \u0644\u062a\u0645\u062b\u064a\u0644 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629. \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u062a\u0645\u0631\u064a\u0646 \u060c \u0646\u062d\u0646 \u0646\u0639\u062a\u0645\u062f \u0639\u0644\u0649 \u0627\u0644\u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u0623\u062e\u064a\u0631\u0629 \u0644\u062a\u0645\u062b\u064a\u0644 \u0627\u0644\u0645\u062c\u0645\u0648\u0639\u0629 \u060c \u0639\u0646\u062f\u0647\u0627 \u062a\u0643\u0648\u0646 \u062c\u0645\u064a\u0639 \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0645\u0648\u062c\u0648\u062f\u0629 \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0628\u062f\u0648\u0646 \u0623\u064a \u062a\u0631\u062a\u064a\u0628 \u060c \u0648\u0644\u0643\u0646 \u0642\u062f \u062a\u0643\u0648\u0646 \u0647\u0646\u0627\u0643 \u0639\u0646\u0627\u0635\u0631 \u0645\u0643\u0631\u0631\u0629 \u0641\u064a \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u060c \u0648\u0644\u0643\u0646 \u0639\u0646\u062f\u0645\u0627 \u0646\u0637\u0644\u0628 \u0623\u0646 \u0646\u0639\u0631\u0641 \u0639\u062f\u062f \u0627\u0644\u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u062e\u062a\u0644\u0641\u0629 \u0627\u0644\u062a\u064a \u062a\u0645\u062b\u0644\u0647\u0627 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u060c \u0646\u062d\u062a\u0627\u062c \u0623\u0646 \u0646\u0632\u064a\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u062a\u0643\u0631\u0627\u0631\u0627\u062a.\n\n\u0639\u0644\u0649 \u0633",
    "  (cond ((= number 0) (list (remaining need) (- remaining need)))\n        ((< number need) (list (+ need number) (- remaining (- need number))))\n        ((< need number) (list (+ need remaining) 0))\n        ((= need number) (list number 0))))",
    "  (list (+ number need) (- remaining need)))\n",
    "  (define (eaten eaten-till-now remaining)\n    (cond ((= eaten-till-now need) eaten-till-now)\n          ((= remaining 0) eaten-till-now)\n          (else (eaten (+ eaten-till-now 1) (- remaining 1)))))\n  (cons (eaten number remaining) (- remaining (eaten number remaining))))",
    "  (list (+ number need) (- remaining need)))\n",
    "  (list (if (> (+ number need) remaining) (+ number remaining) (+ number need))\n        (if (> (+ number need) remaining) 0 (- remaining need))))",
    "  (cond ((<= remaining need) (list (+ number remaining) 0))\n        (else (list (+ number need) (- remaining need)))))\n\n```\n\n```racket\n#lang racket\n",
    "  (define (remaining-carrots-amount)\n    (- remaining need))\n  (define (eaten-carrots-amount)\n    (+ number need))\n  (define (remaining-carrots-with-starvation)\n    (if (> remaining need)\n        0\n        (- remaining need)))\n  (if (> remaining need)\n      (list (eaten-carrots-amount) (remaining-carrots-amount))\n      (list (eaten-carrots-amount) (remaining-carrots-with-starvation))))\n```\n\n## Tests\n\n```racket",
    "\t(if (>= (+ number need) remaining)\n\t\t(list (+ number remaining) 0)\n\t\t(list (+ number need) (- remaining need))))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (if (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))",
    "  (local [(define (total-eaten)\n            (+ number need))\n          (define (total-left)\n            (- remaining need))]\n    (cond [(< remaining need)\n           (list (total-eaten) 0)]\n          [else\n           (list (total-eaten) (total-left))])))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond\n    [(< number 0) (list 0 0)]\n    [(< need 0) (list number remaining)]\n    [(< remaining 0) (list number 0)]\n    [else\n     (cond\n       [(>= (+ number need) (+ remaining)) (list (+ number remaining) 0)]\n       [else (list (+ number need) (- remaining need))])]))",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (define total (+ number need))\n  (cond\n    [(> total remaining)\n     (list remaining (- total remaining))]\n    [else\n     (list total (- remaining total))]))\n",
    "  (list (+ number need) (- remaining need)))\n```",
    "  (if (&lt; (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(or (= number 0) (= need 0))\n     (list 0 need)]\n    [(>= remaining (+ number need))\n     (list (+ number need) (- remaining (+ number need)))]\n    [else\n     (list (+ number remaining) 0)]))\n```\n\n```racket\n#lang racket\n",
    "   (list (+ number need) (- remaining need)))",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond [(= need (- number remaining))\n          (list (+ number remaining) 0)]\n        [(>= number remaining)\n          (list (- (+ number remaining) 1) 0)]\n        [else\n          (list (+ number remaining) (- need remaining))]))\n```\n\n## 4. Two Sum\n\n### 4.1. Problem\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n### 4.2. Solution\n\n```racket\n#lang racket\n",
    "  (cond\n    [(= number 1000) (list number 0)]\n    [(> (+ number need) 1000) (list 1000 0)]\n    [(> (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n```\n\n```\n#lang racket\n",
    "  (let ((remaining (- remaining number)))\n    (if (> remaining need)\n        (list (+ number need) (- remaining need))\n        (list (+ number remaining) 0))))",
    "  (list (+ number need) (- remaining need)))\n",
    "  ;;;\n  ;;;)\n  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(> need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (define (need-to-eat) (- need number))\n  (define (left-to-eat) (- remaining (need-to-eat)))\n  (define (total-eaten) (+ number (need-to-eat)))\n  (if (positive? (left-to-eat))\n      (list total-eaten (left-to-eat))\n      (list total-eaten 0)))\n```\n\n## \u4e2d\u6587\u7ffb\u8bd1\uff1a\n```\n\u4f60\u662f\u4e00\u53ea\u9965\u997f\u7684\u5154\u5b50\uff0c\u4f60\u5df2\u7ecf\u5403\u4e86\u4e00\u5b9a\u6570\u91cf\u7684\u80e1\u841d\u535c\uff0c\n\u4f46\u662f\u73b0\u5728\u4f60\u9700\u8981\u5403\u66f4\u591a\u7684\u80e1\u841d\u535c\u6765\u5b8c\u6210\u4e00\u5929\u7684\u996d\u3002\n\u4f60\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u5217\u8868 [ \u5403\u5b8c\u996d\u540e\u5403\u7684\u80e1\u841d\u535c\u603b\u6570\uff0c\n\u4f60\u5403\u996d\u540e\u5269\u4e0b\u7684\u80e1\u841d\u535c\u6570\u91cf ]\n\u5982\u679c\u5269\u4e0b\u7684\u80e1\u841d\u535c\u4e0d\u591f\uff0c\u4f60\u5c06\u5403\u6389\u6240\u6709\u5269\u4f59\u7684\u80e1\u841d\u535c\uff0c\u4f46\u4ecd\u7136\u4f1a\u997f\u3002\n\u4f8b\u5982\uff1a\n>>> (eat 5 6 10)",
    "  (if (> remaining need)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n",
    "  (list\n    (if (> (+ number need) remaining)\n      (+ number remaining)\n      (+ number need))\n    (if (> (+ number need) remaining)\n      0\n      (- remaining need))))\n\n```\n\n## Answer 9\n```racket\n#lang racket\n",
    "  (cond [(<= (+ number need) remaining) (list (+ number need) (- remaining (+ number need)))]\n        [else (list (+ number remaining) 0)]))",
    "  (let ([total-eaten (+ number need)]\n        [left (- total-eaten remaining)])\n    (if (<= left 0)\n        (list total-eaten remaining)\n        (list total-eaten 0))))\n```\n\n```haskell\n-- You're a hungry rabbit, and you already have eaten a certain number of carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n-- you should return a list of [ total number of eaten carrots after your meals,\n-- the number of carrots left after your meals ]\n-- if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n-- >>> eat 5 6 10\n-- [11,4]\n-- >>> eat 4 8 9\n-- [12,1]\n-- >>> eat 1 10 10\n-- [11,0]\n-- >>> eat 2 11 5\n-- [7,0]\n-- Variables:\n-- @number : integer\n-- the number of carrots that you have eaten.\n-- @need : integer\n-- the number of carrots that you need to eat.\n-- @remaining : integer\n-- the number of remaining carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n-- * 0 <= need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\neat :: Int -> Int -> Int -> [Int]\neat number need remaining = let totalEaten = number + need\n                                left = totalEaten - remaining\n                            in if left <= 0\n                               then [totalEaten, remaining]\n                               else [totalEaten, 0]\n```\n\n```swift\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11,4]\n// >>> eat(4, 8, 9)\n// [12,1]\n// >>> eat",
    "  (list (+ number need) (- remaining need)))\n",
    "  (list \n   (+ number need)\n   (- remaining need)))\n",
    "  (if (> number 0) (cons (cons number remaining) (eat 0 need (add1 remaining)))\n      (cond [(> need remaining) (cons (cons remaining 0) (eat 0 0 (add1 remaining)))]\n            [(<= need remaining) (cons (cons need (sub1 remaining)) (eat 0 0 (add1 remaining)))])))\n",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (if (and (integer? number) (integer? need) (integer? remaining))\n      (let ([total (+ number need)]\n            [remaining (- remaining need)])\n        (if (< remaining 0)\n            (list total 0)\n            (list total remaining)))\n      (error \"invalid input\")))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond\n    [(>= need (+ number remaining)) (list (+ number remaining) 0)]\n    [else (list (+ number remaining) (- need number remaining))]))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond\n    [(> (+ number need) remaining) (list remaining 0)]\n    [else (list (+ number need) (- remaining (+ number need)))]))\n",
    "  (list (+ number need)\n    (- remaining need)))\n",
    "  (cond\n    [(>= number 1000) (error \"number is bigger than 1000\")]\n    [(>= need 1000) (error \"need is bigger than 1000\")]\n    [(>= remaining 1000) (error \"remaining is bigger than 1000\")]\n    [(< number 0) (error \"number is lower than 0\")]\n    [(< need 0) (error \"need is lower than 0\")]\n    [(< remaining 0) (error \"remaining is lower than 0\")]\n    [else\n     (if (> (+ number need) remaining)\n         (list (+ remaining number) 0)\n         (list (+ number need) (- remaining (+ number need))))]))",
    "  (list (cond [(> (+ number need) remaining) (+ number remaining)]\n              [else (+ number need)])\n        (cond [(> (+ number need) remaining) 0]\n              [else (- remaining need)])))\n\n```\n\n```\n#lang racket\n",
    "  (cond [(= number need) (list number 0)]\n        [(= remaining 0) (list number 0)]\n        [(>= (+ number remaining) need) (list (+ number remaining) (- (+ number remaining) need))]\n        [else (list (+ number remaining) 0)]))\n",
    "  (if (> need remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (if (> number remaining)\n      '(0 0)\n      (if (> (+ number need) remaining)\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining need)))))\n```\n\n```racket\n#lang racket\n",
    "  (if (>= (+ number need) 1000)\n      (list 1000 0)\n      (if (>= (+ number need) remaining)\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining (+ number need))))))\n",
    "  (if (> (+ number need) remaining)\n      (list remaining (+ (- (+ number need) remaining)))\n      (list (+ number need) (- remaining need))))\n```\n\n* Category: math\n* Level: easy\n* Tags:\n\n### Solution\n\n```racket\n#lang racket\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(> (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))",
    "  (if (>= number 1000)\n      (cons 1000 0)\n      (if (>= need 1000)\n          (cons (add1 remaining) 0)\n          (if (>= remaining 1000)\n              (cons (add1 number) 0)\n              (if (< need remaining)\n                  (cons (+ need number) (sub1 remaining))\n                  (cons (add1 remaining) 0))))))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (if (&lt; number need)\n      (if (&lt; remaining (+ need number))\n          (list (+ number remaining) 0)\n          (list (+ number remaining) (- need (- number remaining))))\n      (list (+ number remaining) (- need (- number remaining)))))\n</code>\nI hope this is what you wanted.\n",
    "  (if (>= (+ number need) remaining)\n      (list remaining (- need (- number remaining)))\n      (list (+ number need) (- remaining (+ number need)))))",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n```\n\n```racket\n#lang racket",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (cond\n    [(= need remaining) (list (+ number need) 0)]\n    [(> need remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
    "  (if (> (+ number need) remaining)\n      (list remaining (- need (- remaining number)))\n      (list (+ number need) (- remaining (+ number need)))))",
    "  (if (< number need)\n      (if (< remaining (+ number need))\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining need)))\n      (if (< remaining need)\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining need)))))\n",
    "  (if (and (>= number 0) (>= need 0) (>= remaining 0))\n      (if (>= (+ number need) remaining)\n          (list (+ number remaining) 0)\n          (list (+ number need) (- remaining need)))\n      (display \"invalid params\")\n      (list)))\n```",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(<= need remaining)\n     (list (+ number need) (- remaining need))]\n    [else\n     (list (+ number remaining) 0)]))\n",
    "  (cond ((< need remaining) (list (+ number need) (- remaining need)))\n        ((> need remaining) (list (+ number remaining) 0))\n        (else (list (+ number need) 0))))\n",
    "  (if (< (+ number need) remaining)\n      (list (+ number need) (- remaining (+ number need)))\n      (list (+ number remaining) 0)))\n",
    "  (list (+ number need)\n        (- remaining need)))\n",
    "  (if (>= (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (list (+ number need) (- remaining need)))\n",
    "  (cond\n    [(> (+ number need) remaining)\n     (list (+ number remaining) 0)]\n    [else\n     (list (+ number need) (- remaining (+ number need)))]))\n",
    "  (if (<= need remaining)\n      (list (+ number need) (- remaining need))\n      (list (+ number remaining) 0)))\n\n```",
    "  (cond ((>= need (+ number remaining))\n         (list (+ number remaining) 0))\n        (else (list (+ number remaining)\n                    (- need (- number remaining))))))",
    "  (if (> need (+ number remaining))\n    (list (+ number remaining) 0)\n    (list (+ number need) (- remaining need))))",
    "  (list (+ number need) (- remaining need)))\n",
    "  ;; FILL IN HERE\n  (list (+ number need) (- remaining need)))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (if (> (+ number need) remaining)\n      (list (+ number remaining) 0)\n      (list (+ number need) (- remaining need))))\n",
    "  (if (<= number 0)\n      (list 0 need)\n      (list (+ number need) (- remaining need))))\n",
    "  (list (+ number need) (- remaining need)))\n```\n\n__Find the lost element__\n\n```#lang racket\n",
    "  (if (or (equal? number 1000) (equal? need 1000) (equal? remaining 1000))\n      (list 1000 0)\n      (if (equal? (+ number need) (+ remaining need))\n          (list (+ number need) 0)\n          (if (> (+ number need) (+ remaining need))\n              (list (+ remaining need) 0)\n              (list (+ number need) (- remaining (+ number need)))))))\n",
    "  (list (+ number need) (- remaining need)))",
    "  (list (+ number need) (- remaining need)))\n```\n\n```Racket\n#lang racket\n",
    "  (let ([eaten (+ number need)]\n        [left (- remaining need)])\n    (if (< eaten remaining)\n        (list eaten left)\n        (list remaining 0))))\n",
    "  (list (+ number need) (- remaining need)))",
    "  ;;; your code\n  )\n```\n\n#### Test Cases\n\n```racket",
    "  (let ((result (add1 (add number need))))\n    (if (> result remaining)\n        (list remaining 0)\n        (list result (sub1 (sub remaining result))))))",
    "  (let ([num (+ number need)]\n        [all-carrots (+ number remaining)])\n    (if (> all-carrots num)\n        (list num (- all-carrots num))\n        (list num 0))))",
    "  (list (+ number need) (- remaining need)))\n```\n\n### 4 - Find the power of a number\n\n```racket\n#lang racket\n",
    "  (list (+ number need)\n        (- remaining need)))",
    "  (if (< number need)\n      (if (< remaining (+ number (- need number)))\n          (list (+ number remaining) 0)\n          (list (+ number (- need number)) (- remaining (- need number))))\n      (if (< remaining number)\n          (list (+ number remaining) 0)\n          (list (+ number number) (- remaining number)))))\n",
    "  (list (+ number need)\n        (- remaining need)))\n\n```\n[See the solution](https://github.com/benpierc/Racket/blob/master/snippets/recursion/recursion-eat-carrots.rkt)\n\n### Recursion : Greatest Common Divisor\n\n```racket\n#lang racket\n",
    "  (if (> need remaining)\n    (list (+ number remaining) 0)\n    (list (+ number need) (- remaining need))\n  )\n)",
    "  (cond\n    [(>= (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))",
    "  (list (+ number need) (- remaining need)))",
    "  (cond\n    [(> (+ number need) remaining) (list (+ number remaining) 0)]\n    [else (list (+ number need) (- remaining need))]))\n",
    "  '())\n```\n\n### Mocha-Test\n```javascript\ndescribe('eat', function() {\n  it('should return a list contains two integers', function() {\n    eat(5, 6, 10).should.be.an.Array;\n    eat(5, 6, 10).should.have.length(2);\n    eat(5, 6, 10)[0].should.be.a.Number;\n    eat(5, 6, 10)[1].should.be.a.Number;\n  });\n  it('should return the number of eaten carrots after your meals and the number of carrots left after your meals', function() {\n    eat(5, 6, 10).should.eql([11, 4]);\n    eat(4, 8, 9).should.eql([12, 1]);\n    eat(1, 10, 10).should.eql([11, 0]);\n    eat(2, 11, 5).should.eql([7, 0]);\n  });\n});\n```\n\n### Solver\n```racket\n#lang racket\n",
    "  (cond\n    [(>= (+ number need) (add1 remaining))\n      (list (+ number remaining) 0)]\n    [else\n      (list (+ number need) (- remaining need))]))\n",
    "  ; number : integer\n  ; need : integer\n  ; remaining : integer\n  ;\n  ; output: (list total-number-of-eaten-carrots remaining-carrots)\n  (if (and (integer? number)\n           (integer? need)\n           (integer? remaining))\n      (list (+ number need)\n            (if (< need remaining)\n                (- remaining need)\n                0))\n      (error \"type error\")))\n```\n\n## second\n\n``` #lang racket",
    "  'Your solution here\n  )"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}