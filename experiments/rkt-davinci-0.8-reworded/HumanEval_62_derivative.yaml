name: HumanEval_62_derivative
language: rkt
prompt: "#lang racket\n\n;; xs represent coefficients of a polynomial.\n;; xs[0] +\
  \ xs[1] * x + xs[2] * x^2 + ....\n;; Return derivative of this polynomial in the\
  \ same form.\n;; >>> (derivative (list 3 1 2 4 5))\n;; (list 1 4 12 20)\n;; >>>\
  \ (derivative (list 1 2 3))\n;; (list 2 6)\n(define (derivative xs)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate derivative))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) (list 1 4 12 20))\n    (check-equal?\
  \ (candidate (list 1 2 3)) (list 2 6))\n    (check-equal? (candidate (list 3 2 1))\
  \ (list 2 2))\n    (check-equal? (candidate (list 3 2 1 0 4)) (list 2 2 0 16))\n\
  \    (check-equal? (candidate (list 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (let loop ([xs xs] [acc '()] [n 0])\n    (if (null? xs)\n       \
    \ acc\n        (loop (cdr xs) (cons (* n (car xs)) acc) (+ n 1)))))\n", "  (map\
    \ (\u03BB (x) (* x (add1 (length xs)))) (cdr xs)))\n", "  (if (null? xs)\n   \
    \   xs\n      (cons (* (car xs) (length xs))\n\t    (derivative (cdr xs)))))\n",
  "  (cons 0 (for/list ([i (in-range 1 (length xs))]\n                     [x (in-range\
    \ xs)])\n                     (* x (expt i 1)))))\n", "  (if (null? xs)\n    \
    \  '()\n      (cons (car xs)\n            (derivative (map * (cdr xs) (range 1\
    \ (length xs)))))))\n", "  (define (derivative-1 xs)\n    (if (null? xs)\n   \
    \     '()\n        (cons (* (car xs) (add1 (length xs)))\n              (derivative-1\
    \ (cdr xs)))))\n  (derivative-1 (cdr xs)))\n", "  (if (empty? xs)\n      '()\n\
    \      (cons (* (first xs) 1)\n            (derivative (rest xs)))))\n", "  (map\
    \ (\u03BB (i x) (* x i)) (range 1) xs))\n```\n\n```scheme\n#lang racket\n", " \
    \ (if (empty? xs)\n      empty\n      (cons (- (first xs) (first (rest xs)))\n\
    \            (derivative (rest xs)))))\n", "  (for/list ([(x i) (in-indexed xs)])\n\
    \    (* x (-&gt;&gt; (in-range (add1 i))\n               (map (lambda (k) (vector-ref\
    \ xs k)))\n               (apply *)))))\n</code>\n", "  (define (go n xs)\n  \
    \  (if (null? xs)\n        '()\n        (cons (* n (car xs)) (go (+ n 1) (cdr\
    \ xs)))))\n  (go 1 xs))\n", "  (cond [(null? xs) empty]\n        [(null? (cdr\
    \ xs)) empty]\n        [else (cons (car xs)\n                    (derivative (map\
    \ * (range 2 (length xs))\n                                       (cdr xs))))]))\n",
  "  (map (lambda (x i)\n         (* x i))\n       xs\n       (range (length xs))))\n",
  "  (define (d (xs i acc))\n    (if (= i 0)\n        acc\n        (d (cdr xs) (-\
    \ i 1) (cons (* i (car xs)) acc))))\n  (reverse (d xs (- (length xs) 1) (list))))\n",
  "  (if (empty? xs)\n      empty\n      (rest xs)))\n", "  (cond\n    [(empty? xs)\
    \ empty]\n    [(empty? (rest xs)) empty]\n    [else (cons (* (first xs) (add1\
    \ (index-of xs)))\n                (derivative (rest xs)))]))\n", "    (letrec\
    \ ([n (length xs)]\n             [dxs (cond [(< n 2)\n                       \
    \  (list)]\n                        [else\n                         (map (\u03BB\
    \ (x) (* x (- n 1)))\n                              (letrec ([derivs (derivative\
    \ (rest xs))])\n                                  (if (empty? derivs)\n      \
    \                                (list)\n                                    \
    \  (cons (+ (* (- n 1) (first xs))\n                                         \
    \      (first derivs))\n                                            derivs))))])])\n\
    \        dxs))\n", "  (match xs\n    [(list _) \n     ;; ???\n     ]\n    [_ \n\
    \     (error \"derivative expectes a list\")]))\n\n", "  (cond [(empty? xs) empty]\n\
    \        [(= (length xs) 1) empty]\n        [else\n         (append (list (* (second\
    \ xs) 1))\n                 (derivative (rest (rest xs))))]))\n", "  (cond\n \
    \   [(empty? xs) empty]\n    [(empty? (rest xs)) empty]\n    [else (cons (* (first\
    \ xs) (add1 (count xs)))\n                (derivative (rest xs)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
