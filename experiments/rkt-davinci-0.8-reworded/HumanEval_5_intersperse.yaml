name: HumanEval_5_intersperse
language: rkt
prompt: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
  \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
  ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse numbers\
  \ delimeter)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n\
  \    (check-equal? (candidate (list ) 7) (list ))\n    (check-equal? (candidate\
  \ (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2))\n    (check-equal? (candidate (list 2\
  \ 2 2) 2) (list 2 2 2 2 2))\n))\n\n(test-humaneval)"
completions: ["  (if (null? numbers)\n      (list)\n      (cond ((null? (cdr numbers))\
    \ numbers)\n            (else (cons (car numbers) (cons delimeter (intersperse\
    \ (cdr numbers) delimeter)))))))\n", "  (cond [(empty? numbers) '()]\n       \
    \ [(empty? (rest numbers)) (list (first numbers))]\n        [else (list (first\
    \ numbers) delimeter (intersperse (rest numbers) delimeter))]))\n", "  (cond [(empty?\
    \ numbers) empty]\n        [(equal? (second numbers) empty) (list (first numbers))]\n\
    \        [else (cons (first numbers) (cons delimeter (intersperse (rest numbers)\
    \ delimeter)))]))\n", "  (cond [(empty? numbers) empty]\n        [(empty? (rest\
    \ numbers)) numbers]\n        [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n```\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else\
    \ (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (if (null? numbers)\n      '()\n      (append (list (car numbers))\n        \
    \      (list delimeter)\n              (intersperse (cdr numbers) delimeter))))\n",
  "  (cond\n    [(empty? numbers) (list)]\n    [(rest numbers)\n     (cons (first\
    \ numbers)\n           (cons delimeter\n                 (intersperse (rest numbers)\
    \ delimeter)))]\n    [else numbers]))", "  (cond\n    [(null? numbers) (list)]\n\
    \    [(empty? (rest numbers)) numbers]\n    [else (cons (first numbers) (cons\
    \ delimeter (intersperse (rest numbers) delimeter)))]))\n", "  (if (null? numbers)\n\
    \      numbers\n      (list (car numbers)\n            delimeter\n           \
    \ (intersperse (cdr numbers) delimeter))))\n", "  (cond [(empty? numbers) (list)]\n\
    \        [(empty? (rest numbers)) (list (first numbers))]\n        [else (cons\
    \ (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(null? numbers)\n     (list)]\n    [(null? (cdr numbers))\n     numbers]\n\
    \    [else\n     (append (list (car numbers) delimeter) (intersperse (cdr numbers)\
    \ delimeter))]))\n", "  (let loop ((numbers numbers) (acc '()))\n    (if (null?\
    \ numbers)\n        (reverse acc)\n        (let ((next (cdr numbers)))\n     \
    \     (if (null? next)\n              (reverse (cons (car numbers) acc))\n   \
    \           (loop next (cons (car numbers) (cons delimeter acc))))))))\n", " \
    \ (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else (cons (first numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n",
  "  (cond\n    [(null? numbers)\n     (list)]\n    [(null? (cdr numbers))\n     numbers]\n\
    \    [else\n     (cons (car numbers)\n           (cons delimeter\n           \
    \      (intersperse (cdr numbers) delimeter)))]))\n", "  (define (insert-numbers-delimeter\
    \ lst)\n    (if (null? lst)\n        lst\n        (append (list (car lst)) (list\
    \ delimeter) (insert-numbers-delimeter (cdr lst)))))\n  (define (condense numbers-with-delimeters)\n\
    \    (if (null? numbers-with-delimeters)\n        (list)\n        (if (equal?\
    \ (car numbers-with-delimeters) delimeter)\n            (condense (cdr numbers-with-delimeters))\n\
    \            (cons (car numbers-with-delimeters) (condense (cdr numbers-with-delimeters))))))\n\
    \  (condense (insert-numbers-delimeter numbers)))\n", "  (if (null? numbers)\n\
    \      numbers\n      (list-append (list (car numbers))\n                   (list\
    \ delimeter)\n                   (intersperse (cdr numbers) delimeter))))\n",
  "  (match numbers\n    [(list) (list)]\n    [(list (? number? next) ...)\n     (match\
    \ (intersperse (list next ...) delimeter)\n       [(list) (list next)]\n     \
    \  [(list n ...) (list next delimeter n ...)])]))\n", "  (if (null? numbers)\n\
    \      '()\n      (append (list (car numbers))\n              (list delimeter)\n\
    \              (intersperse (cdr numbers) delimeter))))\n", "  (cond\n    [(empty?\
    \ numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else (cons (first\
    \ numbers) (cons delimeter (intersperse (rest numbers) delimeter)))]))\n", " \
    \ (cond [(empty? numbers) empty]\n        [(rest numbers) (cons (first numbers)\
    \ (cons delimeter (intersperse (rest numbers) delimeter)))]\n        [else numbers]))\n\
    \n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
