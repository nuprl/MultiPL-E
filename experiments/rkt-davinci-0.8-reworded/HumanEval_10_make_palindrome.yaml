name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome\
  \ \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome\
  \ \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (string-append\n   string\n   (string-reverse\n    (string-drop\n\
    \     string\n     (string-length\n      (for/first ([suffix (in-list (in-permutations\
    \ (string-&gt;list string)))])\n        (if (is_palindrome suffix)\n         \
    \   suffix)))))))\n", "  (let* ([length (string-length string)]\n         [lps\
    \ (longest-postfix-palindrome string)])\n    (string-append (substring string\
    \ 0 (- length lps)) (reverse (substring string 0 lps)))))\n", "  (if (empty? string)\n\
    \      \"\"\n      (string-append string (string-reverse (substring string 0 (longest-palindromic-suffix\
    \ string))))))\n", "  (define (find-palindrome-suffix [string string] [suffix\
    \ \"\"])\n    (cond [(empty? string) (reverse suffix)]\n          [(and (char=?\
    \ (first string) (first suffix))\n                (find-palindrome-suffix (rest\
    \ string) (rest suffix)))\n           (first string)]\n          [else\n     \
    \      (find-palindrome-suffix (rest string) (first string) suffix)]))\n  (define\
    \ (suffix-to-prefix string suffix)\n    (if (empty? suffix)\n        string\n\
    \        (suffix-to-prefix (cons (first suffix) string) (rest suffix))))\n  (suffix-to-prefix\
    \ string (find-palindrome-suffix string)))\n```\n\n### Next Letters\n\n```racket\n\
    #lang racket\n", "  (define (longest-palindrome-suffix str)\n    (if (string=?\
    \ (string-take str 1) (string-drop str (sub1 (string-length str))))\n        (string-append\
    \ (string-take str 1) (longest-palindrome-suffix (string-drop str 1)))\n     \
    \   (string-take str 1)))\n  (string-append string (string-reverse (string-drop\
    \ string (string-length (longest-palindrome-suffix string))))))", "  (define (palindrome?\
    \ string)\n    (define (reverse-string string)\n      (define (reverse-helper\
    \ acc string)\n        (if (null? string)\n            acc\n            (reverse-helper\
    \ (cons (car string) acc) (cdr string))))\n      (reverse-helper empty string))\n\
    \    (string=? string (reverse-string string)))\n  (define (postfix? string suffix)\n\
    \    (if (null? suffix)\n        #t\n        (if (equal? (car suffix) (car string))\n\
    \            (postfix? (cdr string) (cdr suffix))\n            #f)))\n  (define\
    \ (longest-palindromic-suffix string suffix)\n    (if (null? string)\n       \
    \ empty\n        (if (palindrome? string)\n            string\n            (if\
    \ (palindrome? suffix)\n                suffix\n                (longest-palindromic-suffix\
    \ (cdr string) (cons (car string) suffix))))))\n  (define (postfix-of? string\
    \ suffix)\n    (if (null? suffix)\n        #t\n        (if (equal? (car suffix)\
    \ (car string))\n            (postfix-of? (cdr string) (cdr suffix))\n       \
    \     #f)))\n  (define (reverse-string string)\n    (define (reverse-helper acc\
    \ string)\n      (if (null? string)\n          acc\n          (reverse-helper\
    \ (cons (car string) acc) (cdr string))))\n    (reverse-helper empty string))\n\
    \  (define (string-append string1 string2)\n    (if (null? string1)\n        string2\n\
    \        (cons (car string1) (string-append (cdr string1) string2))))\n  (let\
    \ ((suffix (longest-palindromic-suffix string empty)))\n    (string-append string\
    \ (reverse-string (if (postfix-of? string suffix)\n                          \
    \                    empty\n                                              (cdr\
    \ suffix))))))\n", "  (define s-reversed (reverse string))\n  (define (s-pref-end-index\
    \ p)\n    (- (string-length string) p))\n  (define (s-sub x y)\n    (substring\
    \ string x y))\n  (define (s-sub-reversed x y)\n    (substring s-reversed x y))\n\
    \  (define (is-palindrome-sub x y)\n    (equal? (s-sub x y) (s-sub-reversed (s-pref-end-index\
    \ y) (s-pref-end-index x))))\n  (define (find-longest-palindrome-sub)\n    (for/fold\
    \ ([curr-longest-palindrome 0]) ([i (in-range 1 (add1 (string-length string)))])\n\
    \      (if (is-palindrome-sub 0 i)\n          i\n          curr-longest-palindrome)))\n\
    \  (define longest-palindrome-sub (find-longest-palindrome-sub))\n  (string-append\
    \ string (s-sub-reversed 0 (s-pref-end-index longest-palindrome-sub))))\n", " \
    \ (define (longest-palindrome-suffix string)\n    (let ([suffix (reverse string)])\n\
    \      (for/first ([i (in-range (length string))])\n        (let ([preffix (substring\
    \ string 0 i)])\n          (when (equal? suffix preffix)\n            suffix)))))\n\
    \  (let ([suffix (longest-palindrome-suffix string)])\n    (let ([preffix (reverse\
    \ (substring string 0 (- (length string) (length suffix))))])\n      (string-append\
    \ preffix string suffix))))\n", "  (if (string=? string \"\")\n      \"\"\n  \
    \    (let ([len (string-length string)])\n        (let* ([upper (quotient (+ len\
    \ 1) 2)]\n               [lower (- upper (- len 1))])\n          (let ([lower-str\
    \ (substring string lower len)])\n            (let ([reverse-str (string-reverse\
    \ lower-str)])\n              (if (string=? (substring string 0 lower) reverse-str)\n\
    \                  string\n                  (string-append string reverse-str))))))))\n",
  "  (if (null? string)\n      string\n      (let ((suffix (find-longest-palindromic-suffix\
    \ string)))\n        (string-append string (reverse (string-take string (sub1\
    \ (string-length suffix))))))))\n", "  (define (make_palindrome-helper string\
    \ suffix)\n    (if (string=? (string-reverse string) string)\n        string\n\
    \        (make_palindrome-helper (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length suffix)))))\n            \
    \                    (string-append (string-take string (- (string-length string)\
    \ (string-length suffix))) suffix))))\n  (make_palindrome-helper string \"\"))\n",
  "  (let ((str_len (string-length string)))\n    (let ((suffix_len (find_palindrome_suffix\
    \ string str_len)))\n      (if (= suffix_len 0)\n          (string-append string\
    \ (reverse string))\n          (let ((next_suffix_len (find_palindrome_suffix\
    \ string (sub1 suffix_len))))\n            (string-append string (substring (reverse\
    \ string) next_suffix_len str_len) (substring string 0 next_suffix_len)))))))\n",
  "  (append string (reverse (substring string 0 (palindrome_end string)))))\n", " \
    \ (let ((reversed (string-reverse string)))\n    (define (search start end)\n\
    \      (if (> end (string-length string))\n          string\n          (if (string=?\
    \ (substring string start end) (substring reversed 0 (sub1 (- end start))))\n\
    \              (search start (add1 end))\n              (string-append string\
    \ (substring reversed (sub1 (- end start)))))))\n    (search 0 1)))\n", "  (match\
    \ string\n    ('() \"\")\n    ([hd] (string hd))\n    ([hd1 hd2 tl ...]\n    \
    \ (let* ([rev-prefix (reverse (cons hd1 (cons hd2 tl)))])\n       (define (is-palindrome\
    \ list)\n         (cond\n           [(empty? list) true]\n           [(empty?\
    \ (cdr list)) true]\n           [(eq? (car list) (car (last list))) (is-palindrome\
    \ (butlast list))]\n           [else false]))\n       (if (is-palindrome string)\n\
    \           string\n           (string-append string rev-prefix))))))\n", "  (define\
    \ (helper str1 str2)\n    (if (equal? str1 \"\")\n        str2\n        (helper\
    \ (substring str1 0 (- (string-length str1) 1))\n                (string-append\
    \ str2 (string-append (substring str1 -1) (string-append (reverse str1) \"\"))))))\n\
    \  (helper string \"\"))\n", "  (define (is_palindrome string)\n    (and (not\
    \ (empty? string))\n         (or (string=? string (reverse string))\n        \
    \     (and (not (empty? (rest string)))\n                  (is_palindrome (rest\
    \ string))))))\n  (define (longest_palindrome suffix)\n    (if (is_palindrome\
    \ suffix)\n        suffix\n        (longest_palindrome (rest suffix))))\n  (append\
    \ string (reverse (rest (string-before-last string (longest_palindrome string))))))\n",
  "  (define (find-palindrome string low high)\n    (if (>= low high)\n        (string-join\
    \ (list->vector string))\n        (if (string=? (substring string low (add1 low))\
    \ (substring string high (add1 high)))\n            (find-palindrome string (add1\
    \ low) (sub1 high))\n            (find-palindrome string (add1 low) high))))\n\
    \  (string-append string (string-reverse (substring (find-palindrome string 0\
    \ (sub1 (string-length string))) 0))))\n", "  (if (equal? string \"\")\n     \
    \ \"\"\n      (string-append string (substring (reverse string) (find-longest-palindromic-postfix\
    \ string)))))\n", "  (define (palindrome? str)\n    (and (equal? str (reverse\
    \ str))\n         (not (equal? str \"\"))))\n  (define (make_palindrome-helper\
    \ string)\n    (let ((prefix (reverse string)))\n      (define (make-palindrome-helper-2\
    \ postfix)\n        (define (find-palindrome-prefix postfix)\n          (if (palindrome?\
    \ postfix)\n              postfix\n              (find-palindrome-prefix (rest\
    \ postfix))))\n        (append postfix (find-palindrome-prefix prefix))))\n  \
    \  (make-palindrome-helper-2 string))\n  (make_palindrome-helper string))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
