name: HumanEval_10_make_palindrome
language: rkt
prompt: "#lang racket\n\n;; Find the shortest palindrome that begins with a supplied\
  \ string.\n;; Algorithm idea is simple:\n;; - Find the longest postfix of supplied\
  \ string that is a palindrome.\n;; - Append to the end of the string reverse of\
  \ a string prefix that comes before the palindromic suffix.\n;; >>> (make_palindrome\
  \ \"\")\n;; \"\"\n;; >>> (make_palindrome \"cat\")\n;; \"catac\"\n;; >>> (make_palindrome\
  \ \"cata\")\n;; \"catac\"\n(define (make_palindrome string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_palindrome))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"x\") \"\
  x\")\n    (check-equal? (candidate \"xyz\") \"xyzyx\")\n    (check-equal? (candidate\
  \ \"xyx\") \"xyx\")\n    (check-equal? (candidate \"jerry\") \"jerryrrej\")\n))\n\
  \n(test-humaneval)"
completions: ["  (string-append\n   string\n   (string-reverse\n    (string-drop\n\
    \     string\n     (string-length\n      (for/first ([suffix (in-list (in-permutations\
    \ (string-&gt;list string)))])\n        (if (is_palindrome suffix)\n         \
    \   suffix)))))))\n", "  (let* ([length (string-length string)]\n         [lps\
    \ (longest-postfix-palindrome string)])\n    (string-append (substring string\
    \ 0 (- length lps)) (reverse (substring string 0 lps)))))\n", "  (if (empty? string)\n\
    \      \"\"\n      (string-append string (string-reverse (substring string 0 (longest-palindromic-suffix\
    \ string))))))\n", "  (define (find-palindrome-suffix [string string] [suffix\
    \ \"\"])\n    (cond [(empty? string) (reverse suffix)]\n          [(and (char=?\
    \ (first string) (first suffix))\n                (find-palindrome-suffix (rest\
    \ string) (rest suffix)))\n           (first string)]\n          [else\n     \
    \      (find-palindrome-suffix (rest string) (first string) suffix)]))\n  (define\
    \ (suffix-to-prefix string suffix)\n    (if (empty? suffix)\n        string\n\
    \        (suffix-to-prefix (cons (first suffix) string) (rest suffix))))\n  (suffix-to-prefix\
    \ string (find-palindrome-suffix string)))\n```\n\n### Next Letters\n\n```racket\n\
    #lang racket\n", "  (define (longest-palindrome-suffix str)\n    (if (string=?\
    \ (string-take str 1) (string-drop str (sub1 (string-length str))))\n        (string-append\
    \ (string-take str 1) (longest-palindrome-suffix (string-drop str 1)))\n     \
    \   (string-take str 1)))\n  (string-append string (string-reverse (string-drop\
    \ string (string-length (longest-palindrome-suffix string))))))", "  (define (palindrome?\
    \ string)\n    (define (reverse-string string)\n      (define (reverse-helper\
    \ acc string)\n        (if (null? string)\n            acc\n            (reverse-helper\
    \ (cons (car string) acc) (cdr string))))\n      (reverse-helper empty string))\n\
    \    (string=? string (reverse-string string)))\n  (define (postfix? string suffix)\n\
    \    (if (null? suffix)\n        #t\n        (if (equal? (car suffix) (car string))\n\
    \            (postfix? (cdr string) (cdr suffix))\n            #f)))\n  (define\
    \ (longest-palindromic-suffix string suffix)\n    (if (null? string)\n       \
    \ empty\n        (if (palindrome? string)\n            string\n            (if\
    \ (palindrome? suffix)\n                suffix\n                (longest-palindromic-suffix\
    \ (cdr string) (cons (car string) suffix))))))\n  (define (postfix-of? string\
    \ suffix)\n    (if (null? suffix)\n        #t\n        (if (equal? (car suffix)\
    \ (car string))\n            (postfix-of? (cdr string) (cdr suffix))\n       \
    \     #f)))\n  (define (reverse-string string)\n    (define (reverse-helper acc\
    \ string)\n      (if (null? string)\n          acc\n          (reverse-helper\
    \ (cons (car string) acc) (cdr string))))\n    (reverse-helper empty string))\n\
    \  (define (string-append string1 string2)\n    (if (null? string1)\n        string2\n\
    \        (cons (car string1) (string-append (cdr string1) string2))))\n  (let\
    \ ((suffix (longest-palindromic-suffix string empty)))\n    (string-append string\
    \ (reverse-string (if (postfix-of? string suffix)\n                          \
    \                    empty\n                                              (cdr\
    \ suffix))))))\n", "  (define s-reversed (reverse string))\n  (define (s-pref-end-index\
    \ p)\n    (- (string-length string) p))\n  (define (s-sub x y)\n    (substring\
    \ string x y))\n  (define (s-sub-reversed x y)\n    (substring s-reversed x y))\n\
    \  (define (is-palindrome-sub x y)\n    (equal? (s-sub x y) (s-sub-reversed (s-pref-end-index\
    \ y) (s-pref-end-index x))))\n  (define (find-longest-palindrome-sub)\n    (for/fold\
    \ ([curr-longest-palindrome 0]) ([i (in-range 1 (add1 (string-length string)))])\n\
    \      (if (is-palindrome-sub 0 i)\n          i\n          curr-longest-palindrome)))\n\
    \  (define longest-palindrome-sub (find-longest-palindrome-sub))\n  (string-append\
    \ string (s-sub-reversed 0 (s-pref-end-index longest-palindrome-sub))))\n", " \
    \ (define (longest-palindrome-suffix string)\n    (let ([suffix (reverse string)])\n\
    \      (for/first ([i (in-range (length string))])\n        (let ([preffix (substring\
    \ string 0 i)])\n          (when (equal? suffix preffix)\n            suffix)))))\n\
    \  (let ([suffix (longest-palindrome-suffix string)])\n    (let ([preffix (reverse\
    \ (substring string 0 (- (length string) (length suffix))))])\n      (string-append\
    \ preffix string suffix))))\n", "  (if (string=? string \"\")\n      \"\"\n  \
    \    (let ([len (string-length string)])\n        (let* ([upper (quotient (+ len\
    \ 1) 2)]\n               [lower (- upper (- len 1))])\n          (let ([lower-str\
    \ (substring string lower len)])\n            (let ([reverse-str (string-reverse\
    \ lower-str)])\n              (if (string=? (substring string 0 lower) reverse-str)\n\
    \                  string\n                  (string-append string reverse-str))))))))\n",
  "  (if (null? string)\n      string\n      (let ((suffix (find-longest-palindromic-suffix\
    \ string)))\n        (string-append string (reverse (string-take string (sub1\
    \ (string-length suffix))))))))\n", "  (define (make_palindrome-helper string\
    \ suffix)\n    (if (string=? (string-reverse string) string)\n        string\n\
    \        (make_palindrome-helper (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length suffix)))))\n            \
    \                    (string-append (string-take string (- (string-length string)\
    \ (string-length suffix))) suffix))))\n  (make_palindrome-helper string \"\"))\n",
  "  (let ((str_len (string-length string)))\n    (let ((suffix_len (find_palindrome_suffix\
    \ string str_len)))\n      (if (= suffix_len 0)\n          (string-append string\
    \ (reverse string))\n          (let ((next_suffix_len (find_palindrome_suffix\
    \ string (sub1 suffix_len))))\n            (string-append string (substring (reverse\
    \ string) next_suffix_len str_len) (substring string 0 next_suffix_len)))))))\n",
  "  (append string (reverse (substring string 0 (palindrome_end string)))))\n", " \
    \ (let ((reversed (string-reverse string)))\n    (define (search start end)\n\
    \      (if (> end (string-length string))\n          string\n          (if (string=?\
    \ (substring string start end) (substring reversed 0 (sub1 (- end start))))\n\
    \              (search start (add1 end))\n              (string-append string\
    \ (substring reversed (sub1 (- end start)))))))\n    (search 0 1)))\n", "  (match\
    \ string\n    ('() \"\")\n    ([hd] (string hd))\n    ([hd1 hd2 tl ...]\n    \
    \ (let* ([rev-prefix (reverse (cons hd1 (cons hd2 tl)))])\n       (define (is-palindrome\
    \ list)\n         (cond\n           [(empty? list) true]\n           [(empty?\
    \ (cdr list)) true]\n           [(eq? (car list) (car (last list))) (is-palindrome\
    \ (butlast list))]\n           [else false]))\n       (if (is-palindrome string)\n\
    \           string\n           (string-append string rev-prefix))))))\n", "  (define\
    \ (helper str1 str2)\n    (if (equal? str1 \"\")\n        str2\n        (helper\
    \ (substring str1 0 (- (string-length str1) 1))\n                (string-append\
    \ str2 (string-append (substring str1 -1) (string-append (reverse str1) \"\"))))))\n\
    \  (helper string \"\"))\n", "  (define (is_palindrome string)\n    (and (not\
    \ (empty? string))\n         (or (string=? string (reverse string))\n        \
    \     (and (not (empty? (rest string)))\n                  (is_palindrome (rest\
    \ string))))))\n  (define (longest_palindrome suffix)\n    (if (is_palindrome\
    \ suffix)\n        suffix\n        (longest_palindrome (rest suffix))))\n  (append\
    \ string (reverse (rest (string-before-last string (longest_palindrome string))))))\n",
  "  (define (find-palindrome string low high)\n    (if (>= low high)\n        (string-join\
    \ (list->vector string))\n        (if (string=? (substring string low (add1 low))\
    \ (substring string high (add1 high)))\n            (find-palindrome string (add1\
    \ low) (sub1 high))\n            (find-palindrome string (add1 low) high))))\n\
    \  (string-append string (string-reverse (substring (find-palindrome string 0\
    \ (sub1 (string-length string))) 0))))\n", "  (if (equal? string \"\")\n     \
    \ \"\"\n      (string-append string (substring (reverse string) (find-longest-palindromic-postfix\
    \ string)))))\n", "  (define (palindrome? str)\n    (and (equal? str (reverse\
    \ str))\n         (not (equal? str \"\"))))\n  (define (make_palindrome-helper\
    \ string)\n    (let ((prefix (reverse string)))\n      (define (make-palindrome-helper-2\
    \ postfix)\n        (define (find-palindrome-prefix postfix)\n          (if (palindrome?\
    \ postfix)\n              postfix\n              (find-palindrome-prefix (rest\
    \ postfix))))\n        (append postfix (find-palindrome-prefix prefix))))\n  \
    \  (make-palindrome-helper-2 string))\n  (make_palindrome-helper string))\n",
  "  (define (is_palindrome string)\n    (define (iter l r)\n      (and (< l r)\n\
    \           (and (char=? (string-ref string l) (string-ref string r))\n      \
    \          (iter (+ l 1) (- r 1)))))\n    (iter 0 (- (string-length string) 1)))\n\
    \  (define (find_longest_palindrome string)\n    (define (iter string prefix)\n\
    \      (if (is_palindrome string)\n          string\n          (iter (substring\
    \ string 1) (string-append prefix (substring string 0 1)))))\n    (iter string\
    \ \"\"))\n  (string-append string (substring (string-reverse (find_longest_palindrome\
    \ string)) 0 -1)))\n", "  (define (find-palindrome-postfix string)\n    (for/fold\
    \ ([max-len 0]\n               [max-pos 0])\n        ([ch (in-string string)])\n\
    \      (for/fold ([len 0]\n                 [pos (sub1 (string-length string))])\n\
    \          ([i (in-range (add1 max-len))])\n        (if (char=? (string-ref string\
    \ (- pos i)) ch)\n            (values (add1 len) pos)\n            (values 0 (sub1\
    \ pos))))))\n  (define (find-palindrome-prefix string)\n    (for/fold ([max-len\
    \ 0]\n               [max-pos 0])\n        ([ch (in-string string)])\n      (for/fold\
    \ ([len 0]\n                 [pos 0])\n          ([i (in-range (add1 max-len))])\n\
    \        (if (char=? (string-ref string (+ pos i)) ch)\n            (values (add1\
    \ len) pos)\n            (values 0 (add1 pos))))))\n  (let* ([len (string-length\
    \ string)]\n         [palindrome-postfix (find-palindrome-postfix string)]\n \
    \        [palindrome-prefix (find-palindrome-prefix string)])\n    (string-append\
    \ string\n                   (substring (reverse string)\n                   \
    \           (sub1 len)\n                              (- len (second palindrome-postfix)))\n\
    \                   (substring string\n                              (first palindrome-prefix)\n\
    \                              (add1 (first palindrome-prefix))))))\n", "  (define\
    \ (shortest_p string)\n    (let ((string-length (string-length string)))\n   \
    \   (cond ((&lt;= string-length 1) string)\n            ((string=? (substring\
    \ string 0 1) (substring string (- string-length 1) string-length))\n        \
    \     (shortest_p (substring string 1 (- string-length 1))))\n            (else\
    \ string))))\n  (string-append string (string-reverse (substring string 0 (- (string-length\
    \ string) (string-length (shortest_p string)))))))\n", "  (make-string\n   (string-length\
    \ string)\n   (string-append\n    string\n    (reverse (substring string 0 (-\
    \ (string-length string)\n                                    (palindrome-len\
    \ string)))))))\n", "  (define (make_palindrome-helper str acc)\n    (cond\n \
    \     [(string=? str \"\") str]\n      [(string=? (car str) (cdr str))\n     \
    \  (make_palindrome-helper (substring str 1 -1) (string-append acc (car str)))]\n\
    \      [else (string-append str (reverse acc))]))\n  (make_palindrome-helper string\
    \ \"\"))\n", "  (let ([left-part (substring string 0 (longest-suffix-palindrome\
    \ string))]\n        [right-part (reverse left-part)])\n    (string-append string\
    \ right-part)))\n", "  (if (not (equal? string \"\"))\n      (let* ((string-length\
    \ (string-length string))\n             (palindrome-prefix\n              (string-append\n\
    \               (substring string 0 (- string-length (find-longest-palindrome-suffix\
    \ string)))\n               (reverse\n                (substring string (- string-length\
    \ (find-longest-palindrome-suffix string)))))))\n        (string-append palindrome-prefix\
    \ string))\n      string))\n", "  (define (is_palindrome string)\n    (define\
    \ (iter s)\n      (if (string=? (string-take s 1) (string-take s (- (string-length\
    \ s) 1)))\n          (if (string-length s)\n              (iter (string-drop s\
    \ 1))\n              #t)\n          #f))\n    (iter string))\n  (if (string=?\
    \ string \"\")\n      \"\"\n      (if (is_palindrome string)\n          string\n\
    \          (make_palindrome (string-append string (string-reverse (string-drop\
    \ string (string-length (string-take-right string 1)))))))))", "  (define (make_palindrome_iter\
    \ string part-result)\n    (if (= string \"\")\n        part-result\n        (let\
    \ ([length (string-length string)])\n          (let ([postfix (substring string\
    \ 0 (find-longest-palindrome-suffix string))])\n            (let ([postfix-length\
    \ (string-length postfix)])\n              (let ([prefix (reverse (substring string\
    \ postfix-length length))])\n                (make_palindrome_iter prefix (string-append\
    \ part-result prefix))\n                )\n              )\n            )\n  \
    \        )\n        )\n    )\n  (make_palindrome_iter string \"\")\n  )\n", " \
    \ (define (reverse string)\n    (if (null? string)\n        '()\n        (append\
    \ (reverse (cdr string)) (list (car string)))))\n  (define (longest_palindrome_suffix\
    \ string)\n    (define (suffixes string)\n      (if (null? string)\n         \
    \ (list (cons '() string))\n          (cons (list (car string)) (suffixes (cdr\
    \ string)))))\n    (if (null? string)\n        string\n        (let ([suffixes\
    \ (suffixes string)])\n          (if (member? (reverse (car suffixes)) (cdr suffixes))\n\
    \              (car suffixes)\n              (longest_palindrome_suffix (cdr string))))))\n\
    \  (append string (reverse (car (split-at (length (longest_palindrome_suffix string))\
    \ string)))))", "  (let ([length (string-length string)])\n    (let loop ([start\
    \ 0] [end length])\n      (if (= end start)\n          string\n          (let\
    \ ([substring (substring string start end)])\n            (if (is_palindrome substring)\n\
    \                (append string (reverse substring))\n                (loop (+\
    \ start 1) (- end 1))))))))\n", "  (define (is_palindrome str)\n    (and (equal?\
    \ (string-length str) 1)\n         (equal? (string-ref str 0) (string-ref str\
    \ (sub1 (string-length str))))))\n  (define (palindrome_suffix str)\n    (define\
    \ (suffix string)\n      (if (= (string-length string) 0)\n          \"\"\n  \
    \        (string-append (suffix (substring string 1)) (substring string 0 1))))\n\
    \    (define (suffix_loop string len)\n      (if (= len 1)\n          \"\"\n \
    \         (if (equal? (substring string 0 (- len 1)) (suffix (substring string\
    \ (- len 1))))\n              (substring string 0 (- len 1))\n              (suffix_loop\
    \ string (- len 1)))))\n    (suffix_loop str (string-length str)))\n  (string-append\
    \ string (suffix (string-reverse string))))\n", "  (define (is_palindrome? string)\n\
    \    (define (reverse_string string)\n      (cond\n        [(null? string) '()]\n\
    \        [else (append (reverse_string (cdr string)) (list (car string)))]))\n\
    \    (equal? string (reverse_string string)))\n  (define (extend-palindrome-postfix\
    \ string length)\n    (cond\n      [(= length 0) string]\n      [(is_palindrome?\
    \ (substring string 0 length)) (extend-palindrome-postfix string (+ length 1))]\n\
    \      [else (substring string 0 (- length 1))]))\n  (define (extend-palindrome-prefix\
    \ string length)\n    (reverse (substring string length)))\n  (string-append string\
    \ (extend-palindrome-prefix string (string-length (extend-palindrome-postfix string\
    \ 0)))))\n", "  (let* ([n (string-length string)]\n         [suffix (longest-prefix-palindrome\
    \ string (substring string 1 n))])\n    (string-append string (reverse (substring\
    \ string (- n (string-length suffix)))))))\n", "  (let* ([suffix (find-suffix-palindrome\
    \ string)]\n         [prefix (reverse (take string (length suffix)))]\n      \
    \   [palindrome (string-append prefix suffix)])\n    palindrome))\n", "  (cond\n\
    \    [(= (string-length string) 0) string]\n    [else\n     (string-append string\
    \ (string-reverse (string-suffix string (get-palindrome-suffix-length string))))]))\n",
  "  (let ([prefix (take string)])\n    (string-append prefix (reverse (string-suffix\
    \ string)))))\n", "  (define (reverse-string str)\n    (if (string=? str \"\"\
    ) str\n        (string-append (substring str 1) (string (string-ref str 0)))))\n\
    \  (define (postfix? str1 str2)\n    (string=? (substring str1 (- (string-length\
    \ str1) (string-length str2))) str2))\n  (define (is-palindrome? str)\n    (postfix?\
    \ str (reverse-string str)))\n  (define (longest-palindrome-suffix str)\n    (cond\
    \ ((= (string-length str) 1) str)\n          ((is-palindrome? str) str)\n    \
    \      (else (longest-palindrome-suffix (substring str 1)))))\n  (define (find-palindrome-prefix\
    \ str)\n    (let* ((len (string-length str))\n           (palindrome-suffix (longest-palindrome-suffix\
    \ str))\n           (suffix-len (string-length palindrome-suffix)))\n      (substring\
    \ str 0 (- len suffix-len))))\n  (let* ((palindrome-prefix (find-palindrome-prefix\
    \ string))\n         (reversed-prefix (reverse-string palindrome-prefix)))\n \
    \   (string-append string reversed-prefix)))\n", "  (define (reverse str)\n  \
    \  (define (reverse-rec rev rem)\n      (if (empty? rem)\n          rev\n    \
    \      (reverse-rec (append (list (first rem)) rev) (rest rem))))\n    (reverse-rec\
    \ empty rem:string))\n  (define (substring start end str)\n    (define (substring-rec\
    \ rev rem start end)\n      (if (= start end)\n          rev\n          (substring-rec\
    \ (append (list (first rem)) rev) (rest rem) (+ start 1) end)))\n    (substring-rec\
    \ empty rem:str start end))\n  (define (append-rev pre-str post-str)\n    (append\
    \ pre-str (reverse post-str)))\n  (let ((max-pal-suffix-len 0)\n        (str-len\
    \ (string-length string)))\n    (for ((k (in-range str-len)) #:when (equal? (substring\
    \ (- str-len k) str-len string) (reverse (substring (- str-len k) str-len string))))\n\
    \      (set! max-pal-suffix-len k))\n    (append-rev (substring 0 (- str-len max-pal-suffix-len)\
    \ string) (reverse (substring 0 (- str-len max-pal-suffix-len) string)))))\n```\n\
    \n### Problem 5: Rotate matrix\n\n```racket\n#lang racket\n", "  (define string-length\
    \ (string-length string))\n  (define (reverse-string string)\n    (if (empty?\
    \ string)\n        string\n        (string-append (reverse-string (substring string\
    \ 1 (string-length string))) (substring string 0 1))))\n  (define (find-palindrome-end-start-index\
    \ string-length end-start-index)\n    (define remainder (modulo string-length\
    \ end-start-index))\n    (if (eq? 0 remainder)\n        end-start-index\n    \
    \    (find-palindrome-end-start-index string-length (+ end-start-index 1))))\n\
    \  (define end-start-index (find-palindrome-end-start-index string-length 1))\n\
    \  (define postfix (substring string (- string-length end-start-index) string-length))\n\
    \  (define postfix-reverse (reverse-string postfix))\n  (string-append string\
    \ postfix-reverse))\n", "  (let* ([reversed-string (reverse string)]\n       \
    \  [longest-postfix (find-longest-postfix string reversed-string)]\n         [prefix\
    \ (take (sub1 (string-length string)) string)])\n    (string-append prefix longest-postfix)))\n",
  "  (if (string=? string \"\") \"\"\n      (let* ([str_len (string-length string)]\n\
    \             [max_suffix_len (suffix_len string)])\n        (make_palindrome_step\
    \ string str_len max_suffix_len))))\n", "  (let loop ([string string]\n      \
    \       [suffix null])\n    (cond [(and (not (string=? string \"\"))\n       \
    \         (string=? (string-append (string-reverse (suffix)) suffix) string))\n\
    \           (string-append string (suffix))]\n          [else\n           (loop\
    \ (string-drop-right string 1)\n                 (string-append (string-take string\
    \ 1) suffix))])))\n", "  (define (find-palindrome string (i -1))\n    (if (zero?\
    \ (modulo i 2))\n        (eq? (string-ref string (/ i 2)) (string-ref string (/\
    \ (+ i 1) 2)))\n        (eq? (string-ref string (/ i 2)) (string-ref string (+\
    \ (/ i 2) 1)))))\n  (define (find-palindrome-end string i)\n    (if (or (= i (string-length\
    \ string)) (not (find-palindrome string i)))\n        i\n        (find-palindrome-end\
    \ string (+ i 1))))\n  (let* ((palindrome-end (find-palindrome-end string 0))\n\
    \         (palindrome-start (- palindrome-end 1)))\n    (string-append string\
    \ (substring (reverse string) 0 (- palindrome-start)))))\n", "  (define (is_palindrome?\
    \ string index1 index2)\n    (cond\n      [(> index1 index2) true]\n      [(char=?\
    \ (string-ref string index1) (string-ref string index2)) (is_palindrome? string\
    \ (add1 index1) (sub1 index2))]\n      [else false]))\n  (define (find_longest_palindrome\
    \ start end)\n    (cond\n      [(> start end) start]\n      [(is_palindrome? string\
    \ start end) (find_longest_palindrome start (sub1 end))]\n      [else (find_longest_palindrome\
    \ (add1 start) end)]))\n  (string-append string (substring (reverse string) 0\
    \ (sub1 (find_longest_palindrome 0 (sub1 (string-length string)))))))\n", "  (define\
    \ (make_palindrome-helper str prefix)\n    (if (= (string-length str) 1)\n   \
    \     (string-append prefix str (string-reverse prefix))\n        (if (string=?\
    \ (substring str 0 2) (string-reverse (substring str 1 2)))\n            (make_palindrome-helper\
    \ (substring str 1) (string-append prefix (substring str 0 1)))\n            (make_palindrome-helper\
    \ (substring str 1) (string-append prefix (substring str 0 1))))))\n  (make_palindrome-helper\
    \ string \"\"))\n", "  (if (null? string)\n      string\n      (let* ([prefix\
    \ (substring string 0 (find-longest-postfix-palindrome string))]\n           \
    \  [suffix (substring string (find-longest-postfix-palindrome string))])\n   \
    \     (string-append prefix (reverse prefix) suffix))))\n", "  (define (is_palindrome\
    \ str)\n    (if (= (string-length str) 0)\n        #t\n        (and (char=? (string-ref\
    \ str 0) (string-ref str (- (string-length str) 1)))\n             (is_palindrome\
    \ (substring str 1 (- (string-length str) 1))))))\n  (define (make_palindrome-internal\
    \ str)\n    (define str-len (string-length str))\n    (define (make_palindrome-internal-iter\
    \ str start-index)\n      (if (= start-index 0)\n          str\n          (let\
    \ ((index (+ start-index (string-length (string-append str (reverse (substring\
    \ str 0 start-index)))))))\n            (if (and (< index str-len) (is_palindrome\
    \ (substring str start-index index)))\n                (make_palindrome-internal-iter\
    \ str (inc start-index))\n                (string-append str (reverse (substring\
    \ str 0 start-index)))))))\n    (make_palindrome-internal-iter str 0))\n  (make_palindrome-internal\
    \ string))\n```\n\n### Question 4\n```\n#lang racket\n", "  (define p (largest_palindrome_suffix\
    \ string))\n  (if (empty? p)\n      \"\"\n      (append string (string-reverse\
    \ (substring string 0 (- (string-length string) (string-length p)))))))\n", " \
    \ (define (reverse-substring s start end)\n    (define (substring-helper string\
    \ start end output)\n      (if (= start end)\n          output\n          (substring-helper\
    \ string (+ start 1) end (string-append (substring string start (+ start 1)) output))))\n\
    \    (substring-helper s start end \"\"))\n  (define (find-longest-palindrome\
    \ str)\n    (define (substr-helper string start end output)\n      (cond ((= start\
    \ end) output)\n            ((= (substring string start (+ start 1)) (reverse-substring\
    \ string (- (string-length string) end) (- (string-length string) start)))\n \
    \            (substr-helper string start (+ end 1) (substring string start (+\
    \ start 1))))\n            (else (substr-helper string (+ start 1) (+ end 1) output))))\n\
    \    (substr-helper str 0 0 \"\"))\n  (if (string=? string \"\") \"\"\n      (string-append\
    \ string (reverse-substring string 0 (string-length (find-longest-palindrome string))))))",
  "  (define (postfix-is-palindrome string)\n    (define (loop s reversed)\n     \
    \ (if (empty? s)\n          #t\n          (if (equal? (first s) (first reversed))\n\
    \              (loop (rest s) (rest reversed))\n              #f)))\n    (loop\
    \ string (reverse string)))\n  (define (loop word)\n    (if (postfix-is-palindrome\
    \ word)\n        word\n        (loop (append word (reverse (rest word))))))\n\
    \  (loop string))\n```\n\n#### Test code\n\n```racket\n#lang racket\n", "  (define\
    \ (reverse string)\n    (let* ([len (string-length string)]\n           [rev (make-string\
    \ len)])\n      (let loop ([i 0])\n        (when (< i len)\n          (string-set!\
    \ rev (- len i 1) (string-ref string i))\n          (loop (+ i 1))))\n      rev))\n\
    \  (define (find-palindrome-suffix string)\n    (define (find-palindrome-suffix-helper\
    \ prefix current suffix)\n      (if (and (< 0 (string-length current)) (equal?\
    \ prefix current))\n          suffix\n          (let* ([new-prefix (string-append\
    \ prefix (string-append (string-take current 1) (string-take current 0 1)))]\n\
    \                 [new-current (string-append (string-drop current 1) (string-drop\
    \ current 0 1))])\n            (find-palindrome-suffix-helper new-prefix new-current\
    \ (string-append current suffix)))))\n    (find-palindrome-suffix-helper \"\"\
    \ \"\" \"\"))\n  (define (palindrome-prefix string)\n    (string-take string (-\
    \ (string-length string) (string-length (find-palindrome-suffix string)))))\n\
    \  (string-append string (reverse (palindrome-prefix string))))", "  (define (longest-palindrome-postfix\
    \ string)\n    (define (palindrome? string)\n      (if (equal? string \"\")\n\
    \          #t\n          (and (equal? (first string) (last string))\n        \
    \       (palindrome? (rest (butlast string))))))\n    (cond ((palindrome? string)\
    \ string)\n          (else (longest-palindrome-postfix (rest string)))))\n  (string-append\
    \ string (reverse (substring string 0 (- (string-length string) (string-length\
    \ (longest-palindrome-postfix string)))))))", "  (define suffix_length\n    (define\
    \ (suffixes string)\n      (if (empty? string)\n          (list 0)\n         \
    \ (append (suffixes (rest string))\n                  (list (add1 (length string))))))\n\
    \    (define (longest_palindrome string length)\n      (if (= length 0)\n    \
    \      0\n          (let ((suffix (substring string 0 length)))\n            (if\
    \ (equal? suffix (reverse suffix))\n                length\n                (longest_palindrome\
    \ string (sub1 length))))))\n    (longest_palindrome string (length string)))\n\
    \  (append string (reverse (substring string 0 (sub1 suffix_length)))))\n", " \
    \ (let loop ((string string) (suffix (string-&gt;list string)))\n    (if (null?\
    \ suffix)\n        string\n        (if (equal? (list-&gt;string suffix) (list-&gt;string\
    \ (reverse suffix)))\n            (list-&gt;string suffix)\n            (loop\
    \ (substring string 0 (- (string-length string) 1)) (cdr suffix))))))\n</code>\n\
    For future reference: Another implementation of the same algorithm (1st implementation\
    \ misses the base case).\n<code>#lang racket\n", "  (define (make_palindrome-helper\
    \ string palindrome)\n    (if (string=? string \"\")\n        (string-append palindrome\
    \ (reverse palindrome))\n        (make_palindrome-helper (substring string 1)\
    \ (string-append palindrome (string-append (substring string 0 1) \"\")))))\n\
    \  (make_palindrome-helper string \"\"))\n", "  (let* ([suffix (find-longest-palindromic-suffix\
    \ string)]\n         [prefix (reverse (substring string 0 (- (string-length string)\
    \ (string-length suffix))))])\n    (string-append prefix suffix prefix)))\n",
  "  (define (make_palindrome-helper string palindrome-length)\n    (if (>= palindrome-length\
    \ (string-length string))\n        string\n        (begin\n          (define palindrome\
    \ (make-string (* 2 palindrome-length) #\\_))\n          (define string-first-part\
    \ (substring string 0 palindrome-length))\n          (define palindrome-first-part\
    \ (substring palindrome 0 palindrome-length))\n          (define palindrome-last-part\
    \ (substring palindrome palindrome-length palindrome-length))\n          (define\
    \ string-second-part (substring string palindrome-length palindrome-length))\n\
    \          (string-set! palindrome-first-part 0 string-first-part)\n         \
    \ (string-set! palindrome-last-part 0 (string-reverse string-second-part))\n \
    \         (make_palindrome-helper string (+ palindrome-length 1)))))\n  (make_palindrome-helper\
    \ string 0))\n", "  (let ([len (string-length string)])\n    (define (reverse\
    \ index count)\n      (if (>= index len)\n          (substring string count len)\n\
    \          (reverse (+ index 1) (+ count 1)) (substring string index count))))\n\
    \    (define (longest index)\n      (if (>= index len)\n          \"\"\n     \
    \     (let* ([x (substring string index len)]\n                 [y (reverse (+\
    \ index 1) 0)])\n            (if (string=? x y)\n                x\n         \
    \       (longest (+ index 1))))))\n    (string-append string (reverse 0 0))))\n",
  "  (define (is_palindrome string)\n    (equal? (reverse string) string))\n  (define\
    \ (find_longest_palindrome_suffix string)\n    (if (is_palindrome string)\n  \
    \      string\n        (find_longest_palindrome_suffix (substring string 1))))\n\
    \  (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length (find_longest_palindrome_suffix string)))))))\n", "  (define\
    \ (palindrome? string)\n    (let loop ([s string] [r (string-reverse string)])\n\
    \      (cond\n        [(string=? s r) #t]\n        [(string=? (substring s 1)\
    \ (substring r 1)) #t]\n        [(string=? (substring s 0 (- (string-length s)\
    \ 1)) (substring r 0 (- (string-length r) 1))) #t]\n        [else #f])))\n  (define\
    \ (max-postfix-palindrome string)\n    (let loop ([s string] [i (string-length\
    \ string)])\n      (cond\n        [(palindrome? s) s]\n        [else (loop (substring\
    \ s 0 (- i 1)) (- i 1))])))\n  (string-append string (string-reverse (substring\
    \ string 0 (- (string-length string) (string-length (max-postfix-palindrome string)))))))",
  "  (define (reverse-string str)\n    (let loop ((i (- (string-length str) 1)) (result\
    \ \"\"))\n      (if (< i 0)\n          result\n          (loop (- i 1) (string-append\
    \ (substring str i (add1 i)) result)))))\n  (define (is-palindrome? str)\n   \
    \ (string=? str (reverse-string str)))\n  (define (longest-palindrome-suffix str)\n\
    \    (let loop ((i 0) (suffix str))\n      (if (< i (string-length str))\n   \
    \       (if (is-palindrome? suffix)\n              suffix\n              (loop\
    \ (+ i 1) (substring str (+ i 1) (string-length str))))\n          \"\")))\n \
    \ (define (shortest-palindrome-prefix str)\n    (let loop ((i 0) (prefix str))\n\
    \      (if (< i (string-length str))\n          (if (is-palindrome? prefix)\n\
    \              prefix\n              (loop (+ i 1) (substring str 0 (- (string-length\
    \ str) i))))\n          \"\")))\n  (string-append string (reverse-string (shortest-palindrome-prefix\
    \ (longest-palindrome-suffix string)))))\n", "  (define (get-palindromic-suffix\
    \ string)\n    (define (extend-palindrome-suffix candidate tail)\n      (if (null?\
    \ tail)\n          candidate\n          (let ([remaining (reverse candidate)])\n\
    \            (if (equal? candidate remaining)\n                (let ([extended\
    \ (append candidate (list (car tail)))])\n                  (extend-palindrome-suffix\
    \ extended (cdr tail)))\n                (extend-palindrome-suffix '() tail)))))\n\
    \    (extend-palindrome-suffix '() string))\n  (append string (reverse (get-palindromic-suffix\
    \ string))))\n```\n\n### Running tests\n\n```racket\n#lang racket\n", "  (define\
    \ (reverse string)\n    (define (helper acc i)\n      (if (zero? i)\n        \
    \  acc\n          (helper (string-append (string (string-ref string i)) acc) (-\
    \ i 1))))\n    (helper \"\" (- (string-length string) 1)))\n  (define (is_palindrome\
    \ string)\n    (define (helper i j)\n      (if (or (equal? (string-ref string\
    \ i) (string-ref string j))\n              (equal? i j))\n          #t\n     \
    \     (helper (+ i 1) (- j 1))))\n    (helper 0 (- (string-length string) 1)))\n\
    \  (define (find_longest_palindrome string)\n    (define (helper longest_palindrome\
    \ i)\n      (if (not (is_palindrome (substring string 0 i)))\n          longest_palindrome\n\
    \          (helper (substring string 0 i) (+ i 1))))\n    (helper \"\" 0))\n \
    \ (string-append string (reverse (substring string 0 (- (string-length string)\
    \ (string-length (find_longest_palindrome string)))))))\n", "  (define (reverse\
    \ string)\n    (apply string (build-list (string-length string) (lambda (x) (sub1\
    \ (string-length string))))))\n  (define (is_palindrome string)\n    (if (string=\
    \ string (reverse string))\n        #t\n        #f))\n  (define (is_palindrome_postfix\
    \ string n)\n    (if (is_palindrome (substring string n (string-length string)))\n\
    \        (string-length string)\n        (is_palindrome_postfix string (add1 n))))\n\
    \  (define (make_palindrome_helper string n)\n    (string-append string (reverse\
    \ (substring string 0 n))))\n  (make_palindrome_helper string (is_palindrome_postfix\
    \ string 0)))\n```\n\n```\n#lang racket\n", "  (define (reverse string)\n    (foldl\
    \ (lambda (x acc) (string-append (string x) acc)) \"\" string))\n  (define (fix-end\
    \ string i)\n    (if (< i 0) string\n        (let ((prefix (substring string 0\
    \ i))\n              (suffix (substring string i)))\n          (if (string=? prefix\
    \ (reverse suffix))\n              (string-append string (reverse prefix))\n \
    \             (fix-end string (- i 1))))))\n  (fix-end string (- (string-length\
    \ string) 1)))", "  (define (palindrome? string)\n    (letrec ([reverse_suffix\
    \ (lambda (string suffix)\n                                (match string\n   \
    \                               [() suffix]\n                                \
    \  [(cons (rest-string . first-char) rest) (reverse_suffix rest (cons first-char\
    \ suffix))]))])\n      (match (reverse_suffix string '())\n        [(pair suffix\
    \ (pair prefix . rest))\n         (if (equal? suffix prefix)\n             (append\
    \ string (reverse prefix))\n             (make_palindrome (string-append string\
    \ (reverse (cdr prefix)))))])))\n  (palindrome? string))\n", "  (if (equal? string\
    \ \"\")\n      \"\"\n      (let ((longest_palindrome (get_longest_palindrome string))\n\
    \            (string_len (string-length string)))\n        (append (string-append\
    \ string (substring (reverse string) 0 (- string_len (string-length longest_palindrome))))\n\
    \                longest_palindrome))))\n", "  (let ([max_palindrome_length (max-palindrome-length\
    \ string)])\n    (string-append string (substring (reverse string) max_palindrome_length))))\n",
  "  (string-append string (string-reverse (string-take string (find-longest-suffix-that-is-palindrome\
    \ string)))))\n", "  (define (longest-suffix-palindrome string)\n    (let ((suffix\
    \ (string-suffix? string string)))\n      (if suffix\n          (let ((suffix-len\
    \ (string-length suffix)))\n            (if (string=? (substring string 0 suffix-len)\
    \ suffix)\n                suffix\n                (string-prefix (string-suffix?\
    \ string (substring string 0 (- suffix-len 1))) 1)))\n          \"\")))\n  (define\
    \ (longest-suffix-palindrome-prefix string)\n    (let ((suffix (longest-suffix-palindrome\
    \ string)))\n      (if (string=? suffix \"\")\n          \"\"\n          (string-prefix\
    \ string (- (string-length string) (string-length suffix))))))\n  (define (string-suffix?\
    \ string suffix)\n    (let* ((string-len (string-length string))\n           (suffix-len\
    \ (string-length suffix)))\n      (if (< suffix-len string-len)\n          (if\
    \ (string=? (substring string (- string-len suffix-len)) suffix)\n           \
    \   suffix\n              (string-suffix? string (substring suffix 1)))\n    \
    \      \"\")))\n  (define (make-palindrome string)\n    (let ((prefix (longest-suffix-palindrome-prefix\
    \ string)))\n      (string-append string (string-reverse prefix))))\n  (make-palindrome\
    \ string))\n```\n\n## Day 5. Hamming Distance\n\nTwo DNA strings are provided.\
    \ Find the number of positions where they differ.\n\n```racket\n#lang racket\n",
  "  (string-append string (reverse (string-prefix string (find-palindrome-postfix\
    \ string)))))\n", "  (if (or (string=? string \"\")\n          (string=? string\
    \ (string-reverse string)))\n      string\n      (append string (reverse (substring\
    \ string 0 (postfix-pos string))))))\n", "  (let* ([n (string-length string)]\n\
    \         [i (- n 1)])\n    (define (contains-palindrome suffix)\n      (and (>=\
    \ (string-length suffix) 2)\n           (string= (string-take suffix 1) (string-take\
    \ (string-reverse suffix) 1))))\n    (while (not (contains-palindrome (string-take\
    \ string i)))\n      (set! i (- i 1)))\n    (string-append string (string-reverse\
    \ (string-take string (- i n))))))\n", "  (if (empty? string) \"\"\n      (let\
    \ loop ([postfix 0])\n        (if (equal? (substring string 0 (add1 postfix))\n\
    \                    (substring string (- (string-length string) postfix)\n  \
    \                              (string-length string)))\n            (string-append\
    \ string (substring string 0 (- (string-length string) postfix)))\n          \
    \  (loop (add1 postfix))))))\n", "  (define (is_palindrome? str)\n    (string=?\
    \ str (string-reverse str)))\n  (define (find-largest-palindrome str)\n    (if\
    \ (is_palindrome? str)\n        str\n        (find-largest-palindrome (substring\
    \ str 0 (- (string-length str) 1)))))\n  (define (append-reversed-prefix str)\n\
    \    (string-append str (string-reverse (substring str 0 (- (string-length (find-largest-palindrome\
    \ str)) 1)))))\n  (append-reversed-prefix string))\n", "  (let* ((s-len (string-length\
    \ string))\n         (s-len-1 (- s-len 1))\n         (is-palindrome? (lambda (s)\n\
    \                           (and (equal? s \"\")\n                           \
    \     (equal? (string-length s) 1)))))\n    (define (find-longest-postfix-palindrome\
    \ str-len)\n      (define (find-postfix str-len)\n        (if (= str-len 0)\n\
    \            \"\"\n            (substring string 0 str-len)))\n      (if (is-palindrome?\
    \ (find-postfix str-len))\n          (find-postfix str-len)\n          (find-longest-postfix-palindrome\
    \ (- str-len 1))))\n    (define (find-prefix str-len)\n      (substring string\
    \ str-len s-len))\n    (let* ((postfix (find-longest-postfix-palindrome s-len-1))\n\
    \           (postfix-len (string-length postfix))\n           (prefix (find-prefix\
    \ postfix-len)))\n      (string-append string (string-reverse prefix)))))\n",
  "  (define (palindrome? str)\n    (if (string=? str (string-reverse str))\n    \
    \    true\n        false))\n  (let* ([str (string-reverse string)]\n         [len\
    \ (string-length string)]\n         [lengths (for/list ([i (in-range len)])\n\
    \                      (for/fold ([j 0]) ([k (in-range i len)])\n            \
    \            (if (char=? (string-ref string i) (string-ref str k))\n         \
    \                   (add1 j)\n                            j)))])\n    (let ([postfix-len\
    \ (max-list lengths)])\n      (string-append string (substring str postfix-len)))))\n",
  "  (define prefix (substring string 0 (find-palindrome-end string)))\n  (string-append\
    \ string (reverse prefix)))\n", "  (let ([length (string-length string)])\n  \
    \  (cond\n      [(= length 0) string]\n      [(= length 1) (string-append string\
    \ (string-reverse string))]\n      [else\n       (string-append string\n     \
    \                 (substring (string-reverse string)\n                       \
    \          0\n                                 (- length (palindrome-suffix-length\
    \ string))))])))\n", "  (let ((string-length (string-length string)))\n    (define\
    \ (helper lower upper)\n      (if (= lower upper)\n          (string-copy string)\n\
    \          (if (char=? (string-ref string lower) (string-ref string upper))\n\
    \              (helper (+ lower 1) (- upper 1))\n              (string-append\
    \ string (string-reverse (substring string 0 lower))))))\n    (helper 0 (- string-length\
    \ 1))))\n", "  (if (string=? string \"\")\n      \"\"\n      (define (helper string\
    \ suffix-len)\n        (if (= suffix-len (string-length string))\n           \
    \ string\n            (if (string=? (substring string 0 suffix-len) (substring\
    \ string (string-length string) (- (string-length string) suffix-len)))\n    \
    \            (string-append string (substring string 0 (- (string-length string)\
    \ suffix-len)))\n                (helper string (+ suffix-len 1)))))\n      (helper\
    \ string 1)))\n```\n\n```Racket\n#lang racket\n", "  (let ([len (string-length\
    \ string)])\n    (let loop ([suffix-len 1])\n      (cond\n        [(= suffix-len\
    \ len) string]\n        [(palindrome? (substring string (- len suffix-len) len))\n\
    \         (string-append string (substring string 0 (- len suffix-len)))]\n  \
    \      [else (loop (+ suffix-len 1))]))))\n", "  (let* ([prefix (reverse string)]\n\
    \         [suffix (flatten (filter (\u03BB (s) (equal? s (reverse s))) (prefixes\
    \ (string-split string #\\space))))]\n         [palindrome (append (list (list->string\
    \ (reverse suffix))) suffix)])\n    (string-append prefix palindrome)))\n", " \
    \ (if (empty? string)\n      string\n      (let ((suffix (find-palindromic-suffix\
    \ string)))\n        (string-append string (string-reverse (substring string 0\
    \ (sub1 (string-length suffix))))))))\n", "  (cond\n    ((null? string) \"\")\n\
    \    ((= (string-length string) 1) string)\n    (else\n      (string-append string\
    \ (reverse (string-take string (string-length string)))))))\n", "  (define (is_palindrome?\
    \ string)\n    ;; Recursive implementation of palindrome predicate\n    (define\
    \ (p? string pos len)\n      (if (or (= pos len) (= pos (- len 1)))\n        \
    \  #t\n          (if (char=? (string-ref string pos) (string-ref string (- len\
    \ 1 pos)))\n              (p? string (+ pos 1) len)\n              #f)))\n   \
    \ (p? string 0 (string-length string)))\n  (define (palindrome_suffix string)\n\
    \    ;; Find the longest palindromic suffix of a string\n    (define (p_s? string\
    \ pos len)\n      (cond ((or (= pos len) (= pos (- len 1)))\n             string)\n\
    \            ((char=? (string-ref string pos) (string-ref string (- len 1 pos)))\n\
    \             (p_s? string (+ pos 1) len))\n            (else\n             (substring\
    \ string 0 pos))))\n    (p_s? string 0 (string-length string)))\n  (define (append_rev\
    \ string)\n    ;; Append the reverse of the string prefix to the string\n    (string-append\
    \ string (string-reverse (substring string 0 (- (string-length string) (string-length\
    \ (palindrome_suffix string)))))))\n  (if (is_palindrome? string)\n      string\n\
    \      (append_rev string)))", "  (if (null? string)\n      string\n      (let\
    \ ([suffix (max-postfix string)]\n            [prefix (substring string 0 (- (string-length\
    \ string) (string-length suffix)))])\n        (string-append string (reverse prefix)))))\n",
  "  (string-append string (string-reverse (string-take string (- (string-length string)\
    \ (palindrome_length string)))))\n)\n", "  (define tail\n    (lambda (s)\n   \
    \   (substring s 1)))\n  (define (iter init)\n    (cond\n      [(string=? \"\"\
    \ init) string]\n      [(string=? (reverse string) init) (append string (reverse\
    \ (tail string)))]\n      [else (iter (tail init))]))\n  (iter string))\n", " \
    \ (define (append-prefix-to-suffix string prefix-length)\n    (string-append string\
    \ (reverse (substring string 0 prefix-length))))\n  (let ([s (string-&gt;list\
    \ string)])\n    (append-prefix-to-suffix string (- (length s) (find-palindrome-suffix\
    \ s)))))\n", "  (define (reverse-string str)\n    (cond\n      [(equal? str \"\
    \") str]\n      [else (append (reverse-string (rest str)) (list (first str)))]))\n\
    \  (define (find-longest-palindrome-postfix prefix)\n    (cond\n      [(empty?\
    \ prefix) string]\n      [(palindrome? (append string (reverse-string prefix)))\
    \ (find-longest-palindrome-postfix (rest prefix))]\n      [else prefix]))\n  (append\
    \ string (reverse-string (find-longest-palindrome-postfix (prefixes string)))))\n",
  "  (define (make_palindrome_helper string left_pos suffix_len)\n    (define suffix\
    \ (substring string left_pos (add1 suffix_len)))\n    (define prefix (substring\
    \ string 0 left_pos))\n    (define prefix_reversed (reverse-string prefix))\n\
    \    (if (and (>= left_pos 0) (palindrome? suffix))\n        (string-append prefix\
    \ prefix_reversed)\n        (make_palindrome_helper string (sub1 left_pos) (add1\
    \ suffix_len))))\n  (make_palindrome_helper string (sub1 (string-length string))\
    \ 0))\n", "  (define (reverse str)\n    (if (empty? str)\n        str\n      \
    \  (string-append (reverse (substring str 1)) (string (string-ref str 0)))))\n\
    \  (define (make-palindrome-acc string acc)\n    (if (empty? string)\n       \
    \ (string-append (reverse acc) string)\n        (if (palindrome? string)\n   \
    \         (string-append (reverse acc) string)\n            (make-palindrome-acc\
    \ (substring string 0 (- (string-length string) 1)) (string-append (string (string-ref\
    \ string (- (string-length string) 1))) acc)))))\n  (make-palindrome-acc string\
    \ \"\"))\n", "  (if (string=? string \"\")\n      \"\"\n      (let ([reverse-prefix\
    \ (string-reverse (substring string 0 (find-palindrome-suffix string)))]\n   \
    \         [palindrome-suffix (find-palindrome-suffix string)])\n        (string-append\
    \ string reverse-prefix))))\n", "  (if (string=? string \"\")\n      \"\"\n  \
    \    (let ([prefix (substring string 0 (find-longest-postfix-palindrome string))])\n\
    \        (string-append string (string-reverse prefix)))))\n", "  (define (is_palindrome\
    \ str)\n    (cond ((null? str) '())\n          ((null? (cdr str)) str)\n     \
    \     ((equal? (car str) (cadr str)) (is_palindrome (cdr str)))\n          (else\
    \ '())))\n  (define (longest_palindrome str)\n    (cond ((null? str) '())\n  \
    \        ((null? (cdr str)) str)\n          ((equal? (car str) (cadr str)) (longest_palindrome\
    \ (cdr str)))\n          (else (is_palindrome str))))\n  (append string (reverse\
    \ (append string (reverse (longest_palindrome string))))))\n", "  (let ((n (string-length\
    \ string)))\n    (if (not (positive? n))\n        string\n        (let ((longest-palindrome-suffix\
    \ (postfix-palindrome string n)))\n          (string-append string (string-reverse\
    \ (substring string 0 (- n longest-palindrome-suffix))))))))\n", "  (let ((n (string-length\
    \ string)))\n    (cond\n      ((= n 0) \"\")\n      ((= n 1) string)\n      ((string=?\
    \ string (string-reverse string)) string)\n      (else\n        (let* ((n (string-length\
    \ string))\n               (half (quotient n 2))\n               (pref (substring\
    \ string 0 half))\n               (postf (string-reverse (substring string half))))\n\
    \          (make_palindrome (string-append postf pref)))))))\n", "  (define (reverse\
    \ string)\n    (if (string=? string \"\")\n        \"\"\n        (string-append\
    \ (substring string (sub1 (string-length string))) (reverse (substring string\
    \ 0 (sub1 (string-length string)))))))\n  (define (find-longest-postfix string)\n\
    \    (if (string=? string \"\")\n        \"\"\n        (if (and (> (string-length\
    \ string) 1) (string=? (substring string 0 1) (substring string (sub1 (string-length\
    \ string)))))\n            (find-longest-postfix (substring string 0 (sub1 (string-length\
    \ string))))\n            string)))\n  (string-append string (reverse (substring\
    \ string 0 (sub1 (string-length (find-longest-postfix string)))))))\n", "  (if\
    \ (equal? string \"\")\n      \"\"\n      (string-append string (reverse (string-take\
    \ string (longest-palindromic-suffix string))))))\n", "  (define (palindrome-suffix?\
    \ string start end)\n    (if (= end start)\n        #t\n        (if (char=? (string-ref\
    \ string start) (string-ref string end))\n            (palindrome-suffix? string\
    \ (+ start 1) (- end 1))\n            #f)))\n  (define (palindrome-suffix-length\
    \ string)\n    (let loop ((start 0) (end (string-length string)))\n      (if (=\
    \ start end)\n          (- end start)\n          (if (palindrome-suffix? string\
    \ start end)\n              (- end start)\n              (loop (+ start 1) (-\
    \ end 1))))))\n  (define (reverse-string string)\n    (let loop ((string string)\
    \ (accum \"\"))\n      (if (string=? string \"\")\n          accum\n         \
    \ (loop (substring string 1 (string-length string)) (string-append (substring\
    \ string 0 1) accum)))))\n  (string-append string (reverse-string (substring string\
    \ 0 (- (string-length string) (palindrome-suffix-length string))))))", "  (let\
    \ ([postfix (make-postfix string)])\n    (string-append string (reverse postfix))))\n",
  "  (define (reverse-string string)\n    (apply string (build-list (string-length\
    \ string) (lambda (i) (- (string-length string) i)))))\n  (define (find-palindrome\
    \ string start end)\n    (if (> start end)\n        #f\n        (let ((candidate\
    \ (substring string start end)))\n          (if (and (equal? candidate (reverse-string\
    \ candidate)) (< start end))\n              (find-palindrome string start (- end\
    \ 1))\n              candidate))))\n  (string-append string (reverse-string (find-palindrome\
    \ string (- (string-length string) 1) (string-length string)))))\n", "  (let ([revstring\
    \ (reverse string)])\n    (let ([revsuf (reverse (longest_suffix revstring string))])\n\
    \      (string-append string revsuf))))\n", "  (define (get-longest-palindrome-suffix\
    \ string)\n    (match string\n          ((\"\") \"\")\n          ((cons s _)\n\
    \           (if (equal? s (car (reverse string)))\n               string\n   \
    \            (get-longest-palindrome-suffix (rest string))))))\n  (append string\
    \ (reverse (get-longest-palindrome-suffix string))))\n```", "  (let* ([len (string-length\
    \ string)]\n         [suffix-palindrome (find-longest-suffix-palindrome string)]\n\
    \         [prefix-palindrome (reverse (substring string 0 (- len suffix-palindrome)))])\n\
    \    (string-append string prefix-palindrome)))\n", "  (define (is_palindrome\
    \ string)\n    (if (null? string) #t\n        (or (char=? (car string) (last string))\n\
    \            (is_palindrome (cdr (reverse (reverse (cdr string))))))))\n  (define\
    \ (longest_postfix_palindrome string)\n    (if (is_palindrome string) string\n\
    \        (longest_postfix_palindrome (cdr string))))\n  (define (palindrome_prefix\
    \ string)\n    (reverse (cdr (reverse string))))\n  (append (longest_postfix_palindrome\
    \ string)\n          (palindrome_prefix string)))\n```\n\n## Imperative Palindrome\
    \ Checker\n\n``` #lang racket\n", "  (let ([length (string-length string)])\n\
    \    (let loop ([start 0] [end length])\n      (if (&lt;= start end)\n       \
    \   (let ([palindrome (substring string start end)])\n            (if (equal?\
    \ palindrome (reverse palindrome))\n                (string-append string (reverse\
    \ (substring string 0 start)))\n                (loop (+ start 1) (- end 1))))\n\
    \          (error \"Failed to find a palindrome suffix\")))))\n</code>\nIf the\
    \ requirement is that the palindrome has to end with the initial string, then\
    \ the algorithm is a bit more complex:\n<code>#lang racket\n", "  (local\n   \
    \ ;; Reverse a string.\n    [(define (reverse string)\n       (apply string-append\
    \ (reverse (string->list string))))]\n    (define (make_palindrome/internal string)\n\
    \      (define (longest-palindrome-postfix string)\n        (cond\n          [(=\
    \ (string-length string) 1) string]\n          [(string=? string (reverse string))\
    \ string]\n          [else (longest-palindrome-postfix (substring string 0 (-\
    \ (string-length string) 1)))])\n      )\n      (define (palindrome-prefix string)\n\
    \        (substring string 0 (- (string-length (longest-palindrome-postfix string)))))\n\
    \      (string-append string (reverse (palindrome-prefix string))))\n    (make_palindrome/internal\
    \ string)))", "  (define (reverse str)\n    (cond\n      [(empty? str) str]\n\
    \      [else (append (reverse (rest str)) (list (first str)))]))\n  (let* ([postfix\
    \ (longest_palindromic_postfix string)]\n         [reversed-prefix (reverse (substring\
    \ string 0 (- (string-length string) (string-length postfix))))])\n    (string-append\
    \ string reversed-prefix)))\n", "  (define (reverse-prefix string)\n    (reverse\
    \ (string-take string (string-index string #\\.))))\n  (define (prefix string)\n\
    \    (string-drop string (string-index string #\\.)))\n  (define (longest-palindrome\
    \ string)\n    (if (string-index string #\\.)\n        (longest-palindrome (prefix\
    \ string))\n        string))\n  (define (shortest-palindrome string)\n    (let\
    \ ((palindrome (longest-palindrome string)))\n      (string-append string (reverse-prefix\
    \ palindrome))))\n  (if (string-empty? string)\n      \"\"\n      (shortest-palindrome\
    \ (string-append string \".\" (reverse string)))))", "  (define (reverse string)\n\
    \    (cond ((null? string) (string))\n          (else (string-append (reverse\
    \ (string-tail string)) (string-head string)))))\n  (define (palindrome? string)\n\
    \    (let ((strlen (string-length string)))\n      (and (> strlen 0)\n       \
    \    (equal? (string-ref string 0) (string-ref string (- strlen 1)))\n       \
    \    (palindrome? (substring string 1 (- strlen 1))))))\n  (define (find-palindrome-postfix\
    \ string)\n    (let ((n (string-length string)))\n      (cond ((= n 0) \"\")\n\
    \            ((palindrome? string) string)\n            (else (find-palindrome-postfix\
    \ (substring string 0 (- n 1)))))))\n  (string-append string (reverse (substring\
    \ string 0 (- (string-length string) (string-length (find-palindrome-postfix string)))))))\n",
  "  (define (insert_reverse string)\n    (string-append string (reverse string)))\n\
    \  (define (is_palindrome? string)\n    (string=? string (reverse string)))\n\
    \  (define (find_longest_suffix_palindrome string)\n    (cond ((is_palindrome?\
    \ string) string)\n          (else (find_longest_suffix_palindrome (substring\
    \ string 1)))))\n  (insert_reverse (substring string 0 (- (string-length string)\
    \ (string-length (find_longest_suffix_palindrome string))))))", "  (define (is_palindrome?\
    \ string i j)\n    (cond ((>= i j) #t)\n          ((char=? (string-ref string\
    \ i) (string-ref string j))\n           (is_palindrome? string (+ i 1) (- j 1)))\n\
    \          (else #f)))\n  (define (find_palindrome-postfix-length s)\n    (define\
    \ (find-palindrome-postfix-length-iter s len)\n      (cond ((is_palindrome? s\
    \ 0 (- (string-length s) len)) len)\n            (else (find-palindrome-postfix-length-iter\
    \ s (+ len 1)))))\n    (find-palindrome-postfix-length-iter s 0))\n  (let ((palindrome-postfix-length\
    \ (find_palindrome-postfix-length string)))\n    (string-append string (string-reverse\
    \ (substring string 0 (- (string-length string) palindrome-postfix-length))))))\n",
  "  (define (reverse_but_first s)\n    (if (string-empty? s)\n        s\n       \
    \ (string-append (substring s 1) (substring s 0 1))))\n  (string-append string\
    \ (reverse_but_first (make-string (sub1 (string-length string)) #\\x))))", " \
    \ (define (reverse s)\n    (define (reverse_iter iter_string result)\n      (if\
    \ (string=? iter_string \"\")\n          result\n          (reverse_iter (substring\
    \ iter_string 1) (string-append (substring iter_string 0 1) result))))\n    (reverse_iter\
    \ s \"\"))\n  (define (is_palindrome? s)\n    (define (palindrome_iter iter_string)\n\
    \      (if (string=? iter_string \"\")\n          #t\n          (if (string=?\
    \ (substring iter_string 0 1) (substring iter_string (- (string-length iter_string)\
    \ 1)))\n              (palindrome_iter (substring iter_string 1 (- (string-length\
    \ iter_string) 1)))\n              #f)))\n    (palindrome_iter s))\n  (define\
    \ (find_longest_palindrome string)\n    (define (longest_palindrome_iter string\
    \ iter_string result)\n      (if (string=? iter_string \"\")\n          result\n\
    \          (if (is_palindrome? (string-append string iter_string))\n         \
    \     (longest_palindrome_iter string (substring iter_string 1) (string-append\
    \ string iter_string))\n              (longest_palindrome_iter string (substring\
    \ iter_string 1) result))))\n    (longest_palindrome_iter string (reverse string)\
    \ \"\"))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (find_longest_palindrome string)))))))\n", "  (define\
    \ (prefix? string pos)\n    (equal? (substring string 0 (add1 pos))\n        \
    \    (substring string (sub1 (string-length string)) (sub1 pos))))\n  (define\
    \ (palindrome? string pos)\n    (and (prefix? string pos)\n         (palindrome?\
    \ string (sub1 pos))))\n  (define (suffix-of-palindrome? string)\n    (palindrome?\
    \ string (sub1 (string-length string))))\n  (cond ((null? string) \"\")\n    \
    \    ((suffix-of-palindrome? string) string)\n        (else (string-append string\
    \ (substring (reverse string) 1)))))\n", "  (if (equal? string \"\")\n      \"\
    \"\n      (append string (reverse (substring string 0 (palindrome_length string))))))\n",
  "  (let ((palindrome-end-position (longest-palindrome-postfix string 0)))\n    (if\
    \ (equal? palindrome-end-position -1)\n        string\n        (append string\
    \ (reverse (substring string 0 palindrome-end-position))))))\n", "  (define (make_palindrome-iter\
    \ string palindrome)\n    (if (string=? string \"\")\n        palindrome\n   \
    \     (make_palindrome-iter (substring string 1)\n                           \
    \   (string-append string\n                                             (reverse\
    \ (string-join (list (substring string 0 1)) \"\"))))))\n  (make_palindrome-iter\
    \ string \"\"))\n", "  (if (empty? string)\n      \"\"\n      (if (palindrome?\
    \ string)\n          string\n          (append string (reverse (take (substring\
    \ string 0 (palindrome-prefix-length string)) (length string)))))))\n", "  (let\
    \ ([len (string-length string)])\n    (let ([i (get-longest-palindrome-suffix\
    \ string (dec len))])\n      (let ([pref (substring string 0 i)])\n        (string-append\
    \ string (string-reverse pref))))))\n", "  (define (is_palindrome? string)\n \
    \   (or (string=? string \"\") (string=? (string-reverse string) string)))\n \
    \ (define (find-longest-palindrome-suffix string)\n    (if (is_palindrome? string)\n\
    \        string\n        (find-longest-palindrome-suffix (substring string 1))))\n\
    \  (string-append string (string-reverse (substring string 0 (- (string-length\
    \ string) (string-length (find-longest-palindrome-suffix string)))))))\n", " \
    \ (define (find-first-palindrome-length s)\n    (cond ((null? s) 0)\n        \
    \  ((equal? (first s) (last s)) (+ 1 (find-first-palindrome-length (rest (butlast\
    \ s)))))\n          (else 0)))\n  (define (find-first-palindrome s)\n    (take\
    \ s (find-first-palindrome-length s)))\n  (append string (reverse (drop string\
    \ (find-first-palindrome-length string)))))", "  (if (empty? string)\n      string\n\
    \      (string-append string (reverse (string-prefix string (find-longest-palindromic-postfix\
    \ string))))))\n", '  (string-append string (reverse (string-prefix string (string-length
    string)))))', "  (define (is_palindrome string)\n    (if (<= (string-length string)\
    \ 1)\n        #t\n        (and (char=? (string-ref string 0) (string-ref string\
    \ (- (string-length string) 1)))\n             (is_palindrome (substring string\
    \ 1 (- (string-length string) 1))))))\n  (define (is_prefix string suffix)\n \
    \   (if (= (string-length string) (string-length suffix))\n        (and (equal?\
    \ (string-append string \"\") (string-append suffix \"\"))\n             (is_palindrome\
    \ string))\n        (and (equal? (string-append string \"\") (string-append (substring\
    \ suffix 0 (+ (string-length string) 1)) \"\"))\n             (is_palindrome string))))\n\
    \  (define (find_postfix string)\n    (if (is_palindrome string)\n        (substring\
    \ string 0 (string-length string))\n        (find_postfix (substring string 0\
    \ (- (string-length string) 1)))))\n  (define (find_prefix string postfix)\n \
    \   (if (is_prefix string postfix)\n        (substring string 0 (string-length\
    \ string))\n        (find_prefix (substring string 1 (string-length string)) postfix)))\n\
    \  (define (reverse_string string)\n    (string-append (substring string (- (string-length\
    \ string) 1) (string-length string))\n                   (if (= (string-length\
    \ string) 1)\n                       \"\"\n                       (reverse_string\
    \ (substring string 0 (- (string-length string) 1))))))\n  (string-append string\
    \ (reverse_string (find_prefix string (find_postfix string)))))", "  (string-append\
    \ string (substring (reverse string) (find-longest-palindrome-postfix string))))\n",
  "  (let loop ([chars (string->list string)]\n             [rchars (reverse chars)])\n\
    \    (if (equal? chars rchars)\n        string\n        (loop (remove-suffix (reverse\
    \ rchars) chars)\n              (remove-suffix (reverse chars) rchars)))))\n",
  "  (let ([len (string-length string)])\n    (if (= len 0)\n        \"\"\n      \
    \  (if (= (substring string 0 1) (substring string (- len 1) len))\n         \
    \   (make_palindrome (substring string 1 (- len 1)))\n            (string-append\
    \ string (reverse (substring string 0 (- len (palindrome_length string)))))))))\n",
  "  (let* ([length (string-length string)]\n         [begin (substring string 0 (-\
    \ length (longest_palindromic_postfix string)))]\n         [end (substring string\
    \ (longest_palindromic_postfix string))])\n    (string-append begin (reverse end))))\n",
  "  (define (find-longest-palindrome-suffix string)\n    (cond\n      ((empty? string)\
    \ string)\n      ((palindrome? string) string)\n      (else (find-longest-palindrome-suffix\
    \ (rest string)))))\n  (append string (reverse (drop (find-longest-palindrome-suffix\
    \ string) string))))\n", "  (define (reverse string)\n    (if (string=? string\
    \ \"\")\n        \"\"\n        (string-append (substring string 1) (string (string-ref\
    \ string 0)))))\n  (define (largest_palindrome_suffix string)\n    (if (string=?\
    \ string \"\")\n        \"\"\n        (if (string=? (reverse (substring string\
    \ 0 1)) (substring string 0 1))\n            (let ((x (largest_palindrome_suffix\
    \ (substring string 1))))\n              (if (string=? x \"\")\n             \
    \     (substring string 0 1)\n                  (string-append (substring string\
    \ 0 1) x)))\n            (largest_palindrome_suffix (substring string 1)))))\n\
    \  (define (largest_palindrome_prefix string)\n    (if (string=? string \"\")\n\
    \        \"\"\n        (if (string=? (reverse (substring string -1)) (substring\
    \ string -1))\n            (let ((x (largest_palindrome_prefix (substring string\
    \ 0 -1))))\n              (if (string=? x \"\")\n                  (substring\
    \ string -1)\n                  (string-append x (substring string -1))))\n  \
    \          (largest_palindrome_prefix (substring string 0 -1)))))\n  (define palindrome_suffix\
    \ (largest_palindrome_suffix string))\n  (define palindrome_prefix (largest_palindrome_prefix\
    \ string))\n  (if (string=? palindrome_suffix \"\")\n      (string-append string\
    \ (reverse string))\n      (string-append string (reverse palindrome_prefix) palindrome_suffix)))\n\
    </code>\nTo check that it works, just make sure that the string is palindromic:\n\
    <code>(define (is_palindrome? string)\n  (string=? string (reverse string)))",
  "  (if (equal? string \"\")\n      \"\"\n      (append string (string-reverse (substring\
    \ string 0 (- (string-length string) (find_palindrome_suffix string)))))))\n",
  "  (define (is_palindrome string)\n    (equal? (reverse string) string))\n  (cond\
    \ [(empty? string) \"\"]\n        [(is_palindrome string) string]\n        [else\
    \ (append string (reverse (substring string 0 (find_palindrome string))))]))\n",
  "  (define (is_palindrome? string)\n    (define (helper left right)\n      (cond\n\
    \        [(empty? right) true]\n        [(and (not (empty? left))\n          \
    \    (equal? (first left) (first right)))\n         (helper (rest left) (rest\
    \ right))]\n        [else false]))\n    (helper (in-range (sub1 (string-length\
    \ string)) (sub1 (string-length string)) -1)\n            (rest (string->list\
    \ string))))\n  (define (get_longest_palindrome_suffix string)\n    (define (helper\
    \ len)\n      (if (or (= len 0) (is_palindrome? (substring string len (string-length\
    \ string))))\n          (substring string len (string-length string))\n      \
    \    (helper (sub1 len))))\n    (helper (sub1 (string-length string))))\n  (define\
    \ (get_prefix string)\n    (substring string 0 (sub1 (string-length (get_longest_palindrome_suffix\
    \ string)))))\n  (string-append string (reverse (get_prefix string))))", "  (define\
    \ (reverse string)\n    (if (string=? string \"\")\n        \"\"\n        (string-append\
    \ (reverse (substring string 1)) (substring string 0 1))))\n  (define (is_palindrome\
    \ string)\n    (string=? string (reverse string)))\n  (define (find_longest_palindrome\
    \ string)\n    (if (is_palindrome string)\n        string\n        (find_longest_palindrome\
    \ (substring string 0 (- (string-length string) 1)))))\n  (define (find_palindrome_suffix\
    \ string)\n    (if (is_palindrome string)\n        string\n        (find_palindrome_suffix\
    \ (string-append string (substring string 0 1)))))\n  (define (find_string_before_palindrome\
    \ string)\n    (substring string 0 (- (string-length string) (string-length (find_palindrome_suffix\
    \ string)))))\n  (if (string=? string \"\")\n      \"\"\n      (string-append\
    \ string (reverse (find_string_before_palindrome string)))))", "  (define (make_palindrome-helper\
    \ str rev len)\n    (cond\n      [(<= len 1) (string-append str rev)]\n      [(equal?\
    \ (substring str 0 len) (substring rev 0 len)) (make_palindrome-helper str rev\
    \ (- len 1))]\n      [else (make_palindrome-helper str rev (+ len 1))]))\n  (make_palindrome-helper\
    \ string (reverse string) 0))\n", "  (define (is_palindrome string)\n    (and\
    \ (not (empty? string))\n         (or (equal? (first string) (last string))\n\
    \             (is_palindrome (butlast (rest string))))))\n  (define (reverse_prefix\
    \ prefix)\n    (list->string (reverse (string->list prefix))))\n  (define (longest_suffix\
    \ string)\n    (if (is_palindrome string)\n        string\n        (longest_suffix\
    \ (rest string))))\n  (define (is_empty? string)\n    (and (not (empty? string))\n\
    \         (not (equal? (first string) #\\x))))\n  (define (remove_prefix string)\n\
    \    (if (is_empty? string)\n        string\n        (remove_prefix (rest string))))\n\
    \  (if (empty? string)\n      string\n      (append (remove_prefix string)\n \
    \             (reverse_prefix (longest_suffix string)))))", "  (if (= (string-length\
    \ string) 0)\n      string\n      (let* ((rev-string (string-reverse string))\n\
    \             (len (string-length string))\n             (min-len (/ len 2))\n\
    \             (palindrome-len (palindrome-length rev-string string min-len)))\n\
    \        (string-append string (substring rev-string palindrome-len len)))))\n",
  "  (define (is_palindrome string)\n    (and (string=? string (string-reverse string))\
    \ (not (empty? string))))\n  (define (append_reverse string n)\n    (string-append\
    \ string (string-reverse (substring string 0 n))))\n  (define (find_longest_palindrome-postfix\
    \ string)\n    (if (is_palindrome string) (string-length string)\n        (find_longest_palindrome-postfix\
    \ (substring string 0 (- (string-length string) 1)))))\n  (define (make_palindrome_acc\
    \ string current-len n)\n    (if (is_palindrome string) string\n        (make_palindrome_acc\
    \ (append_reverse string n)\n                             (string-length string)\n\
    \                             (+ 1 n))))\n  (make_palindrome_acc string (string-length\
    \ string)\n                       (- (string-length string) (find_longest_palindrome-postfix\
    \ string))))\n", "  (define (longest-palindrome-postfix string idx)\n    (cond\n\
    \      [(<= idx 0)\n       string]\n      [(char=? (string-ref string idx) (string-ref\
    \ string (- idx 1)))\n       (longest-palindrome-postfix string (- idx 1))]\n\
    \      [else\n       (substring string idx)]))\n  (string-append string (string-reverse\
    \ (substring string 0 (- (string-length string) (string-length (longest-palindrome-postfix\
    \ string (- (string-length string) 1))))))))\n", "  (define (is_palindrome string)\n\
    \    (equal? string (string-reverse string)))\n  (define (first-longest-palindrome-suffix\
    \ string)\n    (cond\n      [(is_palindrome string) string]\n      [else (first-longest-palindrome-suffix\
    \ (substring string 1))]))\n  (define (previous-prefix string)\n    (substring\
    \ string 0 (- (string-length string) (string-length (first-longest-palindrome-suffix\
    \ string)))))\n  (string-append string (string-reverse (previous-prefix string))))\n",
  "  (match string\n    ['() '()]\n    [(cons x xs)\n     (let* ([len (length string)]\n\
    \            [plen (palindrome_length string)]\n            [prefix (slice string\
    \ 0 (- len plen))])\n       (append string (reverse prefix)))]))\n", "  (define\
    \ (reverse_of str)\n    (for/list ([c (in-string str)])\n      (string-ref str\
    \ (- (string-length str) (add1 (position c str))))))\n  (let ([longest_palindrome_suffix\
    \ (longest_palindrome_suffix string)])\n    (if (string=? longest_palindrome_suffix\
    \ \"\")\n        \"\"\n        (append*\n         (list string (reverse_of (substring\
    \ string 0 (- (string-length string) (string-length longest_palindrome_suffix)))))))))\n",
  "  (define (find-longest-palindrome substring)\n    (let ((len (string-length substring)))\n\
    \      (if (or (= 0 len) (= 1 len))\n          substring\n          (if (string=?\
    \ (substring substring 0 1) (substring substring (- len 1) len))\n           \
    \   (find-longest-palindrome (substring substring 1 (- len 1)))\n            \
    \  substring))))\n  (string-append string (string-reverse (substring string 0\
    \ (- (string-length string) (string-length (find-longest-palindrome string)))))))",
  "  (define (make_palindrome-rec left-beg right-beg string)\n    (if (= left-beg\
    \ right-beg)\n        string\n        (if (string=? (substring string left-beg\
    \ right-beg) (substring string right-beg (+ right-beg (- right-beg left-beg))))\n\
    \            (make_palindrome-rec left-beg (+ right-beg 1) string)\n         \
    \   (make_palindrome-rec (+ left-beg 1) left-beg string))))\n  (make_palindrome-rec\
    \ 0 1 string))", "  (let* ((n (string-length string))\n         (longest-palindrome\
    \ (longest-suffix-palindrome string n))\n         (longest-palindrome-length (string-length\
    \ longest-palindrome)))\n    (if (= n longest-palindrome-length)\n        string\n\
    \        (append longest-palindrome (reverse (substring string 0 (- n longest-palindrome-length)))))))\n",
  "  (define (find-palidromic-suffix string)\n    (let loop ([i 0])\n      (if (eq?\
    \ i (sub1 (string-length string)))\n          (substring string (sub1 i))\n  \
    \        (if (string=? (substring string (- i 1)) (substring string i))\n    \
    \          (loop (add1 i))\n              (substring string i)))))\n  (let ([palindromic-suffix\
    \ (find-palidromic-suffix string)])\n    (string-append string (substring string\
    \ 0 (sub1 (string-length palindromic-suffix))) (string-reverse palindromic-suffix))))\n",
  "  (let* ([length (string-length string)]\n         [reverse-string (string-reverse\
    \ string)]\n         [index-to-append (index-of-longest-palindrome-suffix string\
    \ reverse-string)])\n    (if (not index-to-append)\n        string\n        (string-append\
    \ string (substring reverse-string index-to-append length)))))\n", "  (let* ([n\
    \ (string-length string)]\n         [palindrome-length (longest-palindrome-suffix\
    \ string)])\n    (string-append string (reverse (substring string 0 (- n palindrome-length))))))\n",
  "  (if (empty? string)\n      \"\"\n      (append string (reverse (substring string\
    \ 0 (palindrome_length string))))))\n", "  (let* ((size (string-length string))\n\
    \         (prefix (substring string 0 (find-longest-palindrome-suffix string size)))\n\
    \         (suffix (substring string (find-longest-palindrome-suffix string size)\
    \ size)))\n    (build-palindrome prefix suffix)))\n", "  (define (find-palindrome-suffix\
    \ string)\n    (define (palindrome? string n)\n      (cond ((= n 0) #t)\n    \
    \        ((equal? (string-ref string 0) (string-ref string (- n 1)))\n       \
    \      (palindrome? (substring string 1 (- n 1)) (- n 2)))\n            (else\
    \ #f)))\n    (cond ((<= (string-length string) 1) string)\n          ((palindrome?\
    \ string (string-length string)) string)\n          (else (find-palindrome-suffix\
    \ (substring string 1)))))\n  (string-append string (reverse (substring string\
    \ 0 (- (string-length string) (string-length (find-palindrome-suffix string)))))))",
  "  (define (rev s)\n    (define (rev-helper s res)\n      (if (null? s)\n      \
    \    res\n          (rev-helper (cdr s) (cons (car s) res))))\n    (rev-helper\
    \ s '()))\n  (define (check-palindrome s)\n    (define (check-palindrome-helper\
    \ s)\n      (if (null? s)\n          #t\n          (and (equal? (car s) (car (last\
    \ s)))\n               (check-palindrome-helper (cdr (butlast s))))))\n    (check-palindrome-helper\
    \ s))\n  (define (search-palindrome-postfix s)\n    (define (search-palindrome-postfix-helper\
    \ s result)\n      (if (check-palindrome s)\n          s\n          (search-palindrome-postfix-helper\
    \ (cdr s) (cons (car s) result))))\n    (search-palindrome-postfix-helper s '()))\n\
    \  (if (check-palindrome string)\n      string\n      (string-append string (rev\
    \ (search-palindrome-postfix string)))))\n", "  (define (reverse-string string)\n\
    \    (define (helper string new_string)\n      (if (string=? string \"\")\n  \
    \        new_string\n          (helper (substring string 1 (string-length string))\n\
    \                  (string-append (substring string 0 1) new_string))))\n    (helper\
    \ string \"\"))\n  (define (make-shortest-palindrome string)\n    (define (helper\
    \ str reversed_string prefix_len)\n      (if (string=? (substring str prefix_len\
    \ (string-length str))\n                    (substring reversed_string 0 prefix_len))\n\
    \          (substring reversed_string prefix_len (string-length reversed_string))\n\
    \          (helper str reversed_string (- prefix_len 1))))\n    (string-append\
    \ string (helper string (reverse-string string) (- (string-length string) 1))))\n\
    \  (make-shortest-palindrome string))\n", "  (define (find-palindrome-suffix string)\n\
    \    (if (equal? string \"\")\n        \"\"\n        (let* ([last (substring string\
    \ (sub1 (string-length string)))]\n               [first (substring string 0 1)])\n\
    \          (if (equal? last first)\n              (string-append first (find-palindrome-suffix\
    \ (substring string 1 (sub1 (string-length string)))))\n              (find-palindrome-suffix\
    \ (substring string 1))))))\n  (string-append string (reverse (substring string\
    \ 0 (sub1 (string-length (find-palindrome-suffix string)))))))\n", "  (define\
    \ reversed_string (string-reverse string))\n  (define prefix (for/fold ([palindrome\
    \ \"\"]) ([s reversed_string])\n                   (if (and (> (string-length\
    \ s) 0)\n                            (string=? (string-append palindrome (string-take\
    \ s 1))\n                                      (string-reverse (string-append\
    \ palindrome (string-take s 1)))))\n                       (string-append palindrome\
    \ (string-take s 1))\n                       \"\")))\n  (string-append string\
    \ (string-reverse (string-drop prefix 1))))", "  (define (reverse s)\n    (cond\n\
    \      [(= (string-length s) 0) \"\" ]\n      [else (string-append (substring\
    \ s 1) (string (string-ref s 0)))]))\n  (define (is_palindrome s)\n    (if (<\
    \ (string-length s) 2)\n        #t\n        (let ([tail (substring s 1)])\n  \
    \        (and (char=? (string-ref s 0) (string-ref tail (- (string-length tail)\
    \ 1)))\n               (is_palindrome tail)))))\n  (define (find_palindrome_suffix\
    \ s)\n    (if (is_palindrome s)\n        s\n        (find_palindrome_suffix (substring\
    \ s 1))))\n  (define (append_reversed_prefix s)\n    (let ([tail_length (string-length\
    \ s)])\n      (string-append (substring string 0 (- (string-length string) tail_length))\
    \ s)))\n  (define (palindrome_suffix_of_prefix s)\n    (find_palindrome_suffix\
    \ (reverse s)))\n  (append_reversed_prefix (palindrome_suffix_of_prefix string)))",
  "  (define (get-longest-palindrome string)\n    (if (string=? string (reverse string))\n\
    \        string\n        (get-longest-palindrome (substring string 0 (- (string-length\
    \ string) 1)))))\n  (string-append string (reverse (substring string 0 (- (string-length\
    \ string) (string-length (get-longest-palindrome string)))))))\n```\n\n#### Circular\
    \ primes\n\n##### Description\n\nThe number, 197, is called a circular prime because\
    \ all rotations of the digits: 197, 971, and 719, are themselves prime.\n\nThere\
    \ are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73,\
    \ 79, and 97.\n\nHow many circular primes are there below one million?\n\n#####\
    \ Solution\n\n```scheme\n#lang racket\n", "  (define (find-longest-palindrome-postfix\
    \ string)\n    (define (is-palindrome? string)\n      (string=? string (string-reverse\
    \ string)))\n    (cond\n      [(is-palindrome? string) string]\n      [else (find-longest-palindrome-postfix\
    \ (substring string 0 (- (string-length string) 1))) ]))\n  (string-append string\
    \ (string-reverse (substring string 0 (- (string-length string) (string-length\
    \ (find-longest-palindrome-postfix string)))))))", "  (define (make_palindrome-iter\
    \ string suffix)\n    (if (= string \"\")\n        suffix\n        (let ([char\
    \ (string-ref string 0)])\n          (let ([new-suffix (string-append char suffix)])\n\
    \            (if (string=? string new-suffix)\n                new-suffix\n  \
    \              (make_palindrome-iter (substring string 1) new-suffix))))))\n \
    \ (string-append string (reverse (make_palindrome-iter string \"\"))))\n", " \
    \ (let ([len (string-length string)])\n    (for ([i (in-range 0 (add1 len))])\n\
    \      (let ([prefix (substring string 0 i)])\n        (when (equal? prefix (string-reverse\
    \ prefix))\n          (return (string-append string (string-reverse (substring\
    \ string 0 (sub1 i)))))))))\n  )\n```\n\n## Problem 7\n\n```racket\n#lang racket\n",
  "  (if (string=? \"\" string)\n      \"\"\n      (let ([string-length (string-length\
    \ string)])\n        (let ([longest-palindrome (find-longest-palindrome-suffix\
    \ string string-length)])\n          (append-reverse string (substring string\
    \ 0 (- string-length longest-palindrome)))))))\n", "  (define (reverse s)\n  \
    \  (if (null? s)\n        '()\n        (append (reverse (cdr s)) (list (car s)))))\n\
    \  (define (append-reverse-prefix string)\n    (define (string-prefix s)\n   \
    \   (if (null? s)\n          '()\n          (cons (car s) (string-prefix (cdr\
    \ s)))))\n    (append string (reverse (string-prefix string))))\n  (define (find-palindromic-suffix\
    \ string)\n    (define (suffixes s)\n      (if (null? s)\n          (list '())\n\
    \          (append (suffixes (cdr s)) (list s))))\n    (define (is-palindrome\
    \ s)\n      (if (or (null? s) (null? (cdr s)))\n          #t\n          (and (equal?\
    \ (car s) (car (reverse s))) (is-palindrome (cdr (reverse s))))))\n    (filter\
    \ is-palindrome (suffixes string)))\n  (define (find-longest-suffix lst)\n   \
    \ (define (length s)\n      (if (null? s)\n          0\n          (+ 1 (length\
    \ (cdr s)))))\n    (foldr (lambda (s1 s2)\n             (if (> (length s1) (length\
    \ s2))\n                 s1\n                 s2))\n           '()\n         \
    \  lst))\n  (define (fix-suffix string suffix)\n    (append-reverse-prefix (append\
    \ (append string (reverse suffix)) suffix)))\n  (fix-suffix string (find-longest-suffix\
    \ (find-palindromic-suffix string))))\n", "  (define (reverse-string string)\n\
    \    (string-concatenate (reverse (string->list string))))\n  (let loop ((p (string-length\
    \ string))\n             (s (string-length string)))\n    (cond\n      [(= 0 p)\
    \ (string-append string (reverse-string string))]\n      [(string=? (substring\
    \ string 0 p) (reverse-string (substring string s)))\n       (string-append (substring\
    \ string 0 p) (reverse-string (substring string p s)))]\n      [else (loop (-\
    \ p 1) s)])))\n", "  (make-string (length string)\n               (lambda (i)\n\
    \                 (string-ref string\n                             (if (even?\
    \ i)\n                                 i\n                                 (sub1\
    \ (- (length string) i)))))))\n", "  (let ([pos (string-position string (string-reverse\
    \ string))])\n    (append string (string-reverse (substring string 0 pos)))))\n",
  "  (if (string=? string \"\")\n      \"\"\n      (let* ([len (string-length string)]\n\
    \             [start 0]\n             [end (- len 1)]\n             [stop (+ len\
    \ 2)])\n        (let loop ([start start] [end end])\n          (cond\n       \
    \     [(= start stop) string]\n            [(= (string-ref string start) (string-ref\
    \ string end))\n             (loop (+ start 1) (- end 1))]\n            [else\n\
    \             (string-append string (string-reverse (substring string 0 start)))])))))\n\
    ```\n\n```racket\n#lang racket\n", "  (string-append string (string-reverse (make-string-prefix\
    \ string))))\n", "  (define (longest-palindrome prefix)\n    (define (is-palindrome?\
    \ str)\n      (define (is-palindrome-iter? str a b)\n        (cond\n         \
    \ [(or (&gt; a b) (equal? (string-ref str a) (string-ref str b)))\n          \
    \ #t]\n          [else\n           (is-palindrome-iter? str (+ a 1) (- b 1))]))\n\
    \    (is-palindrome-iter? str 0 (- (string-length str) 1)))\n  (define (longest-palindrome-iter\
    \ prefix rest longest)\n    (cond\n      [(null? rest)\n       longest]\n    \
    \  [(is-palindrome? (string-append prefix (list (car rest))))\n       (longest-palindrome-iter\
    \ (string-append prefix (list (car rest))) (cdr rest) (string-append prefix (list\
    \ (car rest))))]\n      [else\n       (longest-palindrome-iter (string-append\
    \ prefix (list (car rest))) (cdr rest) longest)]))\n  (define (reverse str)\n\
    \    (define (reverse-iter str acc)\n      (cond\n        [(null? str)\n     \
    \    acc]\n        [else\n         (reverse-iter (cdr str) (cons (car str) acc))]))\n\
    \    (reverse-iter str '()))\n  (cond\n    [(is-palindrome? string)\n     string]\n\
    \    [else\n     (string-append string (reverse (substring (longest-palindrome-iter\
    \ \"\" string \"\") 0 (- (string-length string) 1))))]))\n</code>\nMore solutions\
    \ in Python and C++ on codesays.com.\n\n\nA:\n\nVery nice use of string-append/reverse/substring,\
    \ to form the palindrome.\nFor <code>longest-palindrome-iter</code>, the only\
    \ suggestion I would make is that you can use <code>string-&gt;list</code> for\
    \ the second argument, and then <code>list-&gt;string</code> for the result. \
    \ With <code>string-append</code>, you don't really need to think about the string\
    \ as a list of", "  (define (reverse-substring start end string)\n    (string-append\
    \ (substring string start end) (substring string 0 start)))\n  (define (append-reverse-substring\
    \ prefix string)\n    (string-append prefix (reverse-substring 0 (string-length\
    \ prefix) string)))\n  (define (longest-palindromic-substring string)\n    (let\
    \ loop ((substring string) (max-substring string))\n      (cond ((<= (string-length\
    \ substring) 1) max-substring)\n            ((string=? substring (reverse-substring\
    \ 0 (string-length substring) string))\n             (loop (substring substring\
    \ 0 (- (string-length substring) 1)) substring))\n            (else (loop (substring\
    \ substring 0 (- (string-length substring) 1)) max-substring)))))\n  (append-reverse-substring\
    \ (longest-palindromic-substring string) string))", "  (cond\n    [(string=? string\
    \ \"\") string]\n    [(string=? string (string-reverse string)) string]\n    [else\n\
    \     (let ([len (string-length string)])\n       (for/or ([i (in-range len -1\
    \ -1)])\n         (let ([suffix (substring string i len)])\n           (when (string=?\
    \ suffix (string-reverse suffix))\n             (string-append string (string-reverse\
    \ (substring string 0 i)))))))]))", "  (define (palin? string)\n    (equal? string\
    \ (reverse string)))\n  (cond [(empty? string) string]\n        [(palin? string)\
    \ string]\n        [else\n         (define (find-palindrome string)\n        \
    \   (cond [(empty? string) string]\n                 [(palin? string) string]\n\
    \                 [else (find-palindrome (rest string))]))\n         (append string\
    \ (reverse (find-palindrome (butlast string))))]))\n", "  (define (r_make_palindrome\
    \ string)\n    (cond\n      [(empty? string) empty]\n      [(palindrome? string)\
    \ string]\n      [else (r_make_palindrome (rest string))]))\n  (string-append\
    \ string (reverse (substring string 0 (sub1 (string-length (r_make_palindrome\
    \ string)))))))\n", "  (define (match string end)\n    (define (match-iter string\
    \ end suffix)\n      (if (= end (- (string-length string) 1))\n          ;; see\
    \ if there is a match\n          (if (string=? (substring string end) (substring\
    \ string 0 (string-length suffix)))\n              suffix\n              #f)\n\
    \          (match-iter string (add1 end) (substring string 0 (add1 end)))))\n\
    \    (match-iter string end \"\"))\n  (define (palindrome-from-suffix string)\n\
    \    (define (iter string end)\n      (define suffix (match string end))\n   \
    \   (if suffix\n          (string-append string (substring (reverse string) (string-length\
    \ suffix)))\n          (iter string (add1 end))))\n    (iter string 0))\n  (palindrome-from-suffix\
    \ string))", "  (string-append string (string-reverse (find-palindromic-prefix\
    \ string))))\n", "  (define (make_palindrome-helper string len)\n    (cond [(=\
    \ len 0) string]\n          [(palindrome? (substring string 0 len)) (string-append\
    \ string (reverse (substring string 0 (- len 1))))]\n          [else (make_palindrome-helper\
    \ string (- len 1))]))\n  (make_palindrome-helper string (string-length string)))\n",
  "  (define (make_palindrome-iter string result)\n    (if (string=? string \"\")\n\
    \        result\n        (make_palindrome-iter (string-tail string)\n        \
    \                      (string-append (string-reverse (string-take string (string-length\
    \ result)))\n                                             result))))\n  (make_palindrome-iter\
    \ string \"\"))\n```\n\n__Hands on:__ Implement [the algorithm](https://github.com/tourdedave/the-reactivity-proto-pattern/blob/master/02-chopping-up-the-problem.md#hands-on-solving-the-palindrome-problem)\
    \ in Clojure.", "  (if (string=? string \"\")\n      \"\"\n      (let* ([string-length\
    \ (string-length string)]\n             [longest-palindrome-suffix (find-longest-palindrome-suffix\
    \ string)]\n             [string-length-longest-palindrome-suffix (string-length\
    \ longest-palindrome-suffix)]\n             [string-prefix (substring string 0\
    \ (- string-length string-length-longest-palindrome-suffix))]\n             [string-prefix-reversed\
    \ (reverse-string string-prefix)])\n        (string-append string-prefix-reversed\
    \ longest-palindrome-suffix))))\n", "  (define (reverse string)\n    (if (string=?\
    \ string \"\") string\n        (string-append (substring string 1) (string (string-ref\
    \ string 0)))))\n  (if (string=? string \"\") string\n      (string-append string\
    \ (reverse (substring string 0 (palindrome_length string))))))\n", "  (if (empty?\
    \ string)\n      \"\"\n      (let ([beg (string-&gt;list string)])\n        (append\
    \ beg (reverse (drop-right (reverse beg) (length (find-palindrome beg))))))))\n",
  "  (string-append string (string-reverse (string-prefix string (palindrome-length\
    \ string)))))\n", "  (define (find-palindrome-suffix str)\n    (if (string=? (string-take\
    \ str 1) (string-take str (- (string-length str) 1)))\n        (find-palindrome-suffix\
    \ (string-drop str 1))\n        (string-drop str 1)))\n  (string-append\n   string\n\
    \   (string-reverse (string-drop string (string-length (find-palindrome-suffix\
    \ string))))))\n", "  (let ((len (string-length string)))\n    (define (is_palindrome\
    \ start-position end-position)\n      (and (<= start-position end-position)\n\
    \           (or (= start-position end-position)\n               (and (char=? (string-ref\
    \ string start-position) (string-ref string end-position))\n                 \
    \   (is_palindrome (+ start-position 1) (- end-position 1))))))\n    (define (find-palindrome-end-position\
    \ start-position)\n      (if (is_palindrome start-position (- len 1))\n      \
    \    (- len 1)\n          (find-palindrome-end-position (+ start-position 1))))\n\
    \    (if (equal? (substring string 0 1) (substring string (- len 1) len))\n  \
    \      string\n        (string-append string (substring string 0 (- (find-palindrome-end-position\
    \ 0) len))\n                              (substring string (- (find-palindrome-end-position\
    \ 0) len) len)))))\n", "  (let ((rev-string (string-reverse string)))\n    (define\
    \ (length-of-longest-palindromic-substring n)\n      (let loop ((i 0) (l 0))\n\
    \        (if (>= i n)\n            l\n            (if (string=? (substring string\
    \ i (+ i l)) (substring rev-string (- n i) (- n i l)))\n                (loop\
    \ (+ i 1) (+ l 1))\n                (loop (+ i 1) l)))))\n    (let ((palindrome-length\
    \ (length-of-longest-palindromic-substring (string-length string))))\n      (string-append\
    \ string (substring rev-string 0 (- (string-length string) palindrome-length))))))\n\
    ```\n\n## Problems\n\n### Compute min, max, mean and standard deviation of a list\
    \ of values\n\n**Input**: A list of values.\n\n**Output**: Min, max, mean and\
    \ standard deviation (written to standard output).\n\n**Implementation**: Racket.\n\
    \n[Solution](../src/min-max-mean-standard-deviation.rkt)\n\n```racket\n#lang racket\n",
  "  (let* ([slen (string-length string)]\n         [mid (quotient slen 2)]\n    \
    \     [low (sub1 mid)]\n         [high mid])\n    (let loop ([low low] [high high])\n\
    \      (cond\n        [(and (>= low 0)\n              (< high slen)\n        \
    \      (char=? (string-ref string low) (string-ref string high)))\n         (loop\
    \ (sub1 low) (add1 high))]\n        [else\n         (let* ([prefix (substring\
    \ string 0 (add1 low))]\n                [suffix (substring string high)])\n \
    \          (string-append prefix (reverse suffix)))]))))\n", "  (define s-length\
    \ (string-length string))\n  (let ([longest-postfix (find-longest-palindromic-postfix\
    \ string)])\n    (cond\n      [(= longest-postfix 0) string]\n      [else (string-append\
    \ (substring string 0 (- s-length longest-postfix))\n                        \
    \   (substring string longest-postfix s-length)\n                           (substring\
    \ string 0 (- s-length longest-postfix)))])))\n", "  (define (helper i string\
    \ rev)\n    (cond\n      [(> i (sub1 (string-length string))) (string-append string\
    \ rev)]\n      [(string=? string rev) string]\n      [else (helper (add1 i) string\
    \ (string-append (substring string i (add1 i)) rev))]))\n  (helper 0 string \"\
    \"))\n", "  (define (reverse string)\n    (if (string=? string \"\")\n       \
    \ \"\"\n        (string-append (reverse (substring string 1 (string-length string)))\
    \ (substring string 0 1))))\n  (define (longest_palindrome_postfix string)\n \
    \   (define (longest_palindrome_postfix/recur string_start string_end)\n     \
    \ (if (or (= string_start 0) (= string_end (string-length string)))\n        \
    \  (substring string string_start string_end)\n          (if (string=? (substring\
    \ string string_start string_end) (reverse (substring string string_start string_end)))\n\
    \              (substring string string_start string_end)\n              (longest_palindrome_postfix/recur\
    \ (+ string_start 1) (- string_end 1)))))\n    (longest_palindrome_postfix/recur\
    \ 0 (string-length string)))\n  (define (longest_prefix string)\n    (substring\
    \ string 0 (- (string-length string) (string-length (longest_palindrome_postfix\
    \ string)))))\n  (string-append string (reverse (longest_prefix string))))\n",
  "  (cond [(empty? string) \"\"]\n        [(palindrome? string) string]\n       \
    \ [else\n         (append string (reverse (take (suffix-palindrome string) string)))]))\n",
  "  (define (make_palindrome_rec string substring-len)\n    (if (> substring-len\
    \ (string-length string))\n        string\n        (if (string=? string (reverse\
    \ string))\n            string\n            (make_palindrome_rec string (+ substring-len\
    \ 1)))))\n  (make_palindrome_rec string 1))", "  (if (string=? string \"\")\n\
    \      \"\"\n      (append string (string-reverse (string-take string (find-longest-palindromic-postfix\
    \ string))))))\n", "  (if (string=? \"\" string)\n      \"\"\n      (string-append\
    \ string (reverse (string-prefix (reverse string) (string-length string) (find-longest-palindromic-postfix\
    \ string))))))\n", "  (define prefix (substring string 0 (find-palindrome-end\
    \ string)))\n  (define suffix (substring string (find-palindrome-end string)))\n\
    \  (string-append string (string-reverse prefix)))\n", "  (define (reverse-string\
    \ string)\n    (let loop ((string string)\n               (rev-string \"\"))\n\
    \      (if (equal? string \"\")\n          rev-string\n          (loop (substring\
    \ string 1)\n                (string-append (substring string 0 1) rev-string)))))\n\
    \  (define (longest-palindrome-substring string)\n    (let loop ((length (string-length\
    \ string))\n               (substring string))\n      (if (equal? (substring substring\
    \ 0 length)\n                  (reverse-string (substring substring (- length))))\n\
    \          substring\n          (loop (- length 1) substring))))\n  (string-append\
    \ string\n                  (reverse-string (substring string 0 (- (string-length\
    \ string) (string-length (longest-palindrome-substring string)))))))", "  (let*\
    \ ([string-length (string-length string)]\n         [prefix-end (make-palindrome-prefix-end\
    \ string)])\n    (string-append string (substring (reverse string) prefix-end\
    \ string-length))))\n", "  (define (make_palindrome-prefix-helper string partial-palindrome)\n\
    \    (if (= (length string) 0)\n        (string-append string (reverse partial-palindrome))\n\
    \        (make_palindrome-prefix-helper (substring string 1) (string-append (string-append\
    \ partial-palindrome (string-ref string 0)) \"\"))))\n  (make_palindrome-prefix-helper\
    \ string \"\"))\n```\n\n[return to problem](#problem)\n\n<a name=\"example-solution\"\
    ></a>\n### Example solution\n\n```racket\n#lang racket\n", "  (define (is_palindrome\
    \ string)\n    (let* ([length (string-length string)]\n           [mid (quotient\
    \ length 2)])\n      (if (= length 0)\n          #t\n          (if (= length 1)\n\
    \              #t\n              (if (equal? (string-ref string 0) (string-ref\
    \ string (- length 1)))\n                  (is_palindrome (substring string 1\
    \ (- length 1)))\n                  #f)))))\n  (define (reverse-string string)\n\
    \    (if (string=? string \"\")\n        \"\"\n        (string-append (reverse-string\
    \ (substring string 1)) (string-ref string 0))))\n  (define (find-longest-palindrome-suffix\
    \ string)\n    (let* ([length (string-length string)]\n           [mid (quotient\
    \ length 2)])\n      (if (= length 0)\n          \"\"\n          (if (= length\
    \ 1)\n              string\n              (if (is_palindrome string)\n       \
    \           string\n                  (find-longest-palindrome-suffix (substring\
    \ string 0 (- length 1))))))))\n  (let* ([length (string-length string)]\n   \
    \      [mid (quotient length 2)])\n    (if (= length 0)\n        \"\"\n      \
    \  (if (= length 1)\n            string\n            (string-append string (reverse-string\
    \ (substring string 0 (- length 1))))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
