name: HumanEval_100_make_a_pile
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, you have to make a pile of\
  \ n levels of stones.\n;; The first level has n stones.\n;; The number of stones\
  \ in the next level is:\n;; - the next odd number if n is odd.\n;; - the next even\
  \ number if n is even.\n;; Return the number of stones in each level in a list,\
  \ where element at index\n;; i represents the number of stones in the level (i+1).\n\
  ;; Examples:\n;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n\
  \    (check-equal? (candidate 3) (list 3 5 7))\n    (check-equal? (candidate 4)\
  \ (list 4 6 8 10))\n    (check-equal? (candidate 5) (list 5 7 9 11 13))\n    (check-equal?\
  \ (candidate 6) (list 6 8 10 12 14 16))\n    (check-equal? (candidate 8) (list 8\
  \ 10 12 14 16 18 20 22))\n))\n\n(test-humaneval)"
completions: ["  (define (recurse n level)\n    (cond\n      [(zero? n) (reverse level)]\n\
    \      [(even? n) (recurse (- n 1) (cons (+ n 1) level))]\n      [else (recurse\
    \ (- n 1) (cons (- n 1) level))]))\n  (recurse n (list n)))\n", "  (define (pile-aux\
    \ n acc)\n    (if (zero? n)\n        acc\n        (pile-aux (- n 1) (cons (if\
    \ (odd? n) (odd n) (even n)) acc))))\n  (pile-aux n '()))\n", "  (for/list ([i\
    \ (in-range n)])\n    (if (odd? i) (+ i 2) (+ i 1))))\n", "  (define level n)\n\
    \  (cond\n    [(= n 0)\n     '()]\n    [(= n 1)\n     (list 1)]\n    [else\n \
    \    (if (odd? n)\n         (cons level (make_a_pile (+ n 2)))\n         (cons\
    \ level (make_a_pile (+ n 1))))]))\n", "  (if (= n 1)\n      (list 1)\n      (cons\
    \ n (make_a_pile (- n (if (odd? n) 1 2))))))\n</code>\n", "  (if (odd? n)\n  \
    \    (list n (+ n 2) (+ n 4))\n      (list n (+ n 1) (+ n 3))))\n", "  (match\
    \ (list n odd?)\n    [((list n-i o-i) ...)\n     (cond\n       [(odd? n-i) (append\
    \ (list n-i) (make_a_pile (+ n-i 2)))]\n       [(even? n-i) (append (list n-i)\
    \ (make_a_pile (+ n-i 2)))]\n       [else (error 'Error \"Last case\")])]))\n",
  "  (for/list ([x (in-range n 1 0)]\n             #:when (if (odd? x)\n         \
    \               (odd? (+ x 1))\n                        (even? (+ x 1))))\n  \
    \  (expt 2 x)))\n", "  (local ((define (inner n acc)\n             (if (= n 0)\n\
    \                 acc\n                 (inner (- n 1) (cons (+ n 1) acc)))))\n\
    \    (inner n '())))\n", "  (define (level-size i n)\n    (cond [(= n 1) (list\
    \ 1)]\n          [(= i n) '()]\n          [else (cons (if (odd? n) (+ n 2) (+\
    \ n 1))\n                      (level-size (+ i 1) (- n 1)))]))\n  (level-size\
    \ 1 n))\n", "  (define (make_a_pile_helper n acc)\n    (cond\n      [(zero? n)\
    \ acc]\n      [(odd? n) (make_a_pile_helper (- n 1) (cons (+ (car acc) 2) acc))]\n\
    \      [else (make_a_pile_helper (- n 1) (cons (+ (car acc) 1) acc))]))\n  (make_a_pile_helper\
    \ n (list n)))\n", "  (cond [(= n 1) (list 1)]\n        [else (cons n (make_a_pile\
    \ (- n (if (odd? n) 2 1))))]))\n", "  (cond [(= n 1) (list 1)]\n        [else\
    \ (cons n (make_a_pile (if (odd? n) (+ n 2) (+ n 1))))]))\n", "  (if (= n 1)\n\
    \      (list 1)\n      (let* ([top-level-stones (add1 n)]\n             [upper-levels\
    \ (make_a_pile (- n 1))])\n        (cons top-level-stones upper-levels))))\n",
  "  (build-list n (lambda (x) (if (odd? x) (+ 2 x) (+ 1 x)))))\n", "  (if (zero?\
    \ n)\n      empty\n      (cons (add1 n) (make_a_pile (if (odd? n) (sub1 n) (sub1\
    \ n))))))\n", "  (for/list ([i (in-range n)])\n    (cond\n      [(odd? i) (+ i\
    \ 1)]\n      [(even? i) (+ i 2)])))\n", "  (make-a-pile-iter n 1))\n", "  (if\
    \ (= n 1)\n      (list 1)\n      (append (make_a_pile (- n 1))\n             \
    \ (list (add1 (+ n 1))))))\n", "  (define (make_pile n m)\n    (if (= n 0)\n \
    \       (reverse m)\n        (make_pile (- n 1) (cons (+ n 1) m))))\n  (define\
    \ (next_even n)\n    (if (even? n)\n        (+ n 2)\n        (+ n 1)))\n  (define\
    \ (next_odd n)\n    (if (odd? n)\n        (+ n 2)\n        (+ n 1)))\n  (if (even?\
    \ n)\n      (make_pile n (list (next_even n)))\n      (make_pile n (list (next_odd\
    \ n)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
