name: HumanEval_97_multiply
language: rkt
prompt: "#lang racket\n\n;; Complete the function that takes two integers and returns\
  \ \n;; the product of their unit digits.\n;; Assume the input is always valid.\n\
  ;; Examples:\n;; >>> (multiply 148 412)\n;; 16\n;; >>> (multiply 19 28)\n;; 72\n\
  ;; >>> (multiply 2020 1851)\n;; 0\n;; >>> (multiply 14 -15)\n;; 20\n(define (multiply\
  \ a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate multiply))\n\
  \    (check-equal? (candidate 148 412) 16)\n    (check-equal? (candidate 19 28)\
  \ 72)\n    (check-equal? (candidate 2020 1851) 0)\n    (check-equal? (candidate\
  \ 14 -15) 20)\n    (check-equal? (candidate 76 67) 42)\n    (check-equal? (candidate\
  \ 17 27) 49)\n    (check-equal? (candidate 0 1) 0)\n    (check-equal? (candidate\
  \ 0 0) 0)\n))\n\n(test-humaneval)"
completions: ["  (modulo (* (modulo a 10) (modulo b 10)) 10))\n</code>\n", "  (modulo\
    \ (modulo a 10) (modulo b 10)))\n", "  (displayln (exact->inexact (modulo (remainder\
    \ a 10) (remainder b 10))))\n  (remainder (remainder a 10) (remainder b 10)))\n",
  "  (define (get-last-digit x)\n    (remainder x 10))\n  (define (abs x)\n    (if\
    \ (negative? x) (- x) x))\n  (get-last-digit (abs (* a b))))\n</code>\nThis was\
    \ my first attempt which worked and scored 10/10. But then I saw the line of code\
    \ <code>(get-last-digit (abs (* a b)))</code> and thought <code>abs</code> shouldn't\
    \ be there. So I tried this one:\n<code>#lang racket\n", "  (modulo (* (remainder\
    \ a 10) (remainder b 10)) 10))\n</code>\nThis runs in about 0.3 seconds and returns\
    \ \n<code>16\n72\n0\n20\n</code>\nI see that my answer uses <code>remainder</code>\
    \ and <code>modulo</code> which are listed as the simpler functions on the site;\
    \ I just wish I knew how to set the inputs, I don't see how to do that in racket.\n",
  "  (let ([a (number->string a)][b (number->string b)])\n    (string->number\n  \
    \   (number->string\n      (*\n       (string->number (string-ref a (sub1 (string-length\
    \ a))))\n       (string->number (string-ref b (sub1 (string-length b)))))))))",
  "  (define (product x y)\n    (define (aux a b)\n      (cond [(= b 0) a]\n     \
    \       [else (+ (aux a (- b 1)) x)]))\n    (aux 0 y))\n  (define (division x\
    \ y)\n    (define (aux a b)\n      (cond [(>= a b) (+ (aux (- a b) b) 1)]\n  \
    \          [else 0]))\n    (aux x y))\n  (define (modulo x y)\n    (- x (* y (division\
    \ x y))))\n  (define (abs x)\n    (cond [(< x 0) (- x)]\n          [else x]))\n\
    \  (define (unit x)\n    (modulo (abs x) 10))\n  (product (unit a) (unit b)))",
  "  (remainder (abs a) 10) * (remainder (abs b) 10))\n", "  (modulo (modulo a 10)\
    \ (modulo b 10)))\n", "  (define (dig a)\n    (modulo a 10))\n  (dig (* (dig a)\
    \ (dig b))))\n", "  (remainder (* a b) 10))\n", '  (remainder (abs a) 10) * (remainder
    (abs b) 10))', "  (define (unit-digit d) (- (modulo d 10) 0))\n  (* (unit-digit\
    \ a) (unit-digit b)))", '  (modulo (* (modulo a 10) (modulo b 10)) 10))', "  (modulo\
    \ (* (modulo a 10) (modulo b 10)) 10))\n", "  (abs (modulo (modulo a 10) (modulo\
    \ b 10))))\n</code>\nMy code works in the Racket REPL, but is failing the tests.\
    \ I assume it's because it's not returning an integer. How do I modify my code\
    \ to return an integer?\n\n\nA:\n\nThe problem is that you're doing an absolute\
    \ value with <code>abs</code>, which gives you a <code>real</code> (and not an\
    \ <code>integer</code>). <code>modulo</code> also returns a <code>real</code>\
    \ when given two <code>integer</code> arguments.\nSo, use <code>integer-&gt;char</code>\
    \ to convert to a <code>char</code>, then <code>char-&gt;integer</code> to convert\
    \ back to an <code>integer</code>.\n<code>(define (multiply a b)\n  (char-&gt;integer\
    \ (integer-&gt;char (abs (modulo (modulo a 10) (modulo b 10))))))\n</code>\n",
  "  (string-&gt;number (string-append (number-&gt;string (remainder a 10))\n    \
    \                              (number-&gt;string (remainder b 10)))))\n</code>\n\
    The problem is that in the first test case, I expect to get 16, but I get 8 instead.\n\
    What am I doing wrong?\nThanks!\n\n\nA:\n\nAs a matter of fact, your code works\
    \ perfectly fine:\n<code>(multiply 148 412)", "  (* (% a 10) (% b 10)))\n", " \
    \ (remainder (abs a) 10)\n  (remainder (abs b) 10)\n  (* (remainder (abs a) 10)\
    \ (remainder (abs b) 10)))\n", '  (modulo (* (modulo a 10) (modulo b 10)) 10))']
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
