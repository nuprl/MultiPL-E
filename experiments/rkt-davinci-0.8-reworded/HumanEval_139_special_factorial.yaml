name: HumanEval_139_special_factorial
language: rkt
prompt: "#lang racket\n\n;; The Brazilian factorial is defined as:\n;; brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n;; where n > 0\n;; For example:\n;; >>> (special_factorial\
  \ 4)\n;; 288\n;; The function will receive an integer as input and should return\
  \ the special\n;; factorial of this integer.\n(define (special_factorial n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n\
  \    (check-equal? (candidate 4) 288)\n    (check-equal? (candidate 5) 34560)\n\
  \    (check-equal? (candidate 7) 125411328000)\n    (check-equal? (candidate 1)\
  \ 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((= n 0) 1)\n    ((= n 1) 1)\n    (else (* n (special_factorial\
    \ (- n 1))))))\n", "  (if (or (= n 0) (= n 1))\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond\
    \ ((= n 0) 1)\n        ((= n 1) 1)\n        (else (* n (special_factorial (- n\
    \ 1))))))\n", "  (cond\n    [(= n 0) 1]\n    [else (* n (special_factorial (-\
    \ n 1)))]))\n", "  (if (zero? n)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact\
    \ (- n 1)))))\n  (define (special_fact n)\n    (if (= n 1)\n        1\n      \
    \  (* (fact n) (special_fact (- n 1)))))\n  (special_fact n))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))", "  (define (special_factorial_aux\
    \ fact counter)\n    (if (= counter n)\n        fact\n        (special_factorial_aux\
    \ (* fact counter) (+ counter 1))))\n  (special_factorial_aux 1 1))\n", "  (if\
    \ (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (cond\n \
    \   [(= n 0) 1]\n    [else (* n (special_factorial (- n 1)))]))\n", "  (* n (factorial\
    \ n)))\n", "  (factorial_helper n 1))\n", "  (if (= n 1)\n      1\n      (* n\
    \ (special_factorial (- n 1)))))", "  (define brazilian_factorial\n    (lambda\
    \ (n)\n      (define (bf n)\n        (cond ((= n 0) 1)\n              ((= n 1)\
    \ 1)\n              (else (* n (bf (- n 1))))))\n      (if (= n 0)\n         \
    \ 1\n          (* (bf n) (brazilian_factorial (- n 1))))))\n  (brazilian_factorial\
    \ n))", "  (factorial n) * (factorial (- n 1)) * (factorial (- n 2)) * (factorial\
    \ (- n 3)) * (factorial (- n 4)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
