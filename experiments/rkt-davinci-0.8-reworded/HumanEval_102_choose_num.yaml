name: HumanEval_102_choose_num
language: rkt
prompt: "#lang racket\n\n;; This function takes two positive numbers x and y and returns\
  \ the\n;; biggest even integer number that is in the range [x, y] inclusive. If\
  \ \n;; there's no such number, then the function should return -1.\n;; For example:\n\
  ;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num\
  \ x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n\
  \    (check-equal? (candidate 12 15) 14)\n    (check-equal? (candidate 13 12) -1)\n\
  \    (check-equal? (candidate 33 12354) 12354)\n    (check-equal? (candidate 5234\
  \ 5233) -1)\n    (check-equal? (candidate 6 29) 28)\n    (check-equal? (candidate\
  \ 27 10) -1)\n    (check-equal? (candidate 7 7) -1)\n    (check-equal? (candidate\
  \ 546 546) 546)\n))\n\n(test-humaneval)"
completions: ["  (cond [(> x y) -1]\n        [(even? x) x]\n        [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (< x y)\n    \
    \      y\n          x)\n      (if (even? x)\n          x\n          (if (even?\
    \ y)\n              y\n              -1))))\n\n", "  (cond ((< x y) (choose_num2\
    \ x y))\n        ((= x y) (choose_num2 x y))\n        ((> x y) -1)))", "  (define\
    \ (even? n) (= (remainder n 2) 0))\n  (cond ((and (even? x) (even? y))\n     \
    \    (cond ((<= x y) x)\n               (else y)))\n        ((and (even? x) (not\
    \ (even? y))) x)\n        ((and (not (even? x)) (even? y)) y)\n        (else -1)))\n",
  "  ;; @TODO: Implement this!\n  )\n", "  (if (= x y)\n      (if (even? x)\n    \
    \      x\n          -1)\n      (if (even? x)\n          (if (even? y)\n      \
    \        (max x y)\n              (choose_num (add1 x) y))\n          (choose_num\
    \ (add1 x) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even?\
    \ x) (choose_num (add1 x) y)]\n    [else (choose_num (add1 x) y)]))\n", "  (if\
    \ (even? x)\n      (if (= x y)\n          x\n          (if (even? (+ x 1))\n \
    \             (choose_num (+ x 1) y)\n              (choose_num (+ x 2) y)))\n\
    \      (if (even? (+ x 1))\n          (choose_num (+ x 1) y)\n          (choose_num\
    \ (+ x 2) y))))\n", "  (cond ((and (even? x) (even? y)) (if (> x y) x y))\n  \
    \      ((and (even? x) (odd? y)) y)\n        ((and (odd? x) (even? y)) y)\n  \
    \      ((and (odd? x) (odd? y)) -1)))", "  (cond\n    [(even? x) x]\n    [(even?\
    \ y) y]\n    [else -1]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n\
    \          -1)\n      (if (even? x)\n          (choose_num (+ x 1) y)\n      \
    \    (choose_num (+ x 1) y))))\n", "  (if (> x y)\n      -1\n      (if (even?\
    \ x)\n          x\n          (choose_num (+ x 1) y))))\n", "  (cond\n    [(equal?\
    \ (modulo x 2) 0) x]\n    [(< x y) (choose_num (+ x 1) y)]\n    [else -1]))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if\
    \ (= x y)\n              x\n              (if (= x (- y 1))\n                \
    \  -1\n                  y)))\n      (if (even? x)\n          (if (= x (- y 1))\n\
    \              -1\n              y)\n          (if (even? y)\n              x\n\
    \              -1))))\n", "  (if (= x y)\n      (if (even? x)\n          x\n \
    \         -1)\n      (if (even? x)\n          (if (even? y)\n              (max\
    \ x y)\n              (if (even? (- y 1))\n                  (- y 1)\n       \
    \           (choose_num x (- y 1))))\n          (if (even? (+ x 1))\n        \
    \      (+ x 1)\n              (choose_num (+ x 1) y)))))\n", "  (if (= x y)\n\
    \      (if (even? x)\n          x\n          -1)\n      (if (even? x)\n      \
    \    (if (even? y)\n              (max x y)\n              (choose_num (+ x 1)\
    \ y))\n          (choose_num (+ x 1) y))))\n", "  (cond [(= x y) x]\n        [(and\
    \ (<= x y)\n              (even? y)) (choose_num x (- y 1))]\n        [(and (<=\
    \ x y)\n              (odd? y)) (choose_num x (- y 2))]\n        [else -1]))\n\
    </code>\nAnd here's my test script.\n<code>#lang racket\n", "  (cond [(> x y)\
    \ -1]\n        [(and (even? x) (even? y)) (if (> x y) x y)]\n        [(even? x)\
    \ x]\n        [(even? y) y]\n        [else -1]))\n```\n\n```racket\n#lang racket\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? y) y]\n    [else (choose_num\
    \ x (- y 1))]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? x)\n          (if (even? y)\n              (if (> x\
    \ y)\n                  x\n                  y)\n              (choose_num (+\
    \ x 1) y))\n          (choose_num (+ x 1) y))))\n", "  ;; YOUR CODE HERE!\n  )\n\
    ```\n\nThe easiest way to run your program is to click the green \"run\" button\
    \ in DrRacket to test it.\nIf all of your test cases pass, then you will see the\
    \ message below.\n\n```\nYour code (choose_num) produced the following output:\n",
  "  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define (iter n)\n    (cond\n\
    \      [(= n (- y 1)) (if (is_even? y) y -1)]\n      [(is_even? n) n]\n      [else\
    \ (iter (+ n 1))]))\n  (iter x))\n", "  (cond\n    [(= x y)\n     (if (even? x)\
    \ x -1)]\n    [(even? x)\n     (max x (choose_num (+ x 1) y))]\n    [else\n  \
    \   (choose_num (+ x 1) y)]))\n", "  (if (= x y)\n      (if (even? x)\n      \
    \    x\n          -1)\n      (if (even? x)\n          (cond ((even? y)\n     \
    \            (if (> x y)\n                     x\n                     y))\n \
    \               ((> x (+ y 1))\n                 x)\n                (else\n \
    \                (- y 1)))\n          (cond ((even? y)\n                 y)\n\
    \                ((> x (+ y 1))\n                 (- x 1))\n                (else\n\
    \                 (- y 1))))))\n", "  (if (= x y)\n      (if (even? x)\n     \
    \     x\n          -1)\n      (if (even? x)\n          (max x (choose_num (+ x\
    \ 1) y))\n          (choose_num (+ x 1) y))))\n</code>\nAnother way to write it\
    \ that doesn't require the use of <code>max</code> and is not recursive is this.\
    \ However, it does have the limitation that it will only work for positive numbers\
    \ (as opposed to the solution above which only requires that the numbers are greater\
    \ than or equal to zero):\n<code>#lang racket\n", "  (cond ((and (even? x) (even?\
    \ y)) (max x y))\n        ((even? x) (max x (- y 1)))\n        ((even? y) (max\
    \ y (- x 1)))\n        (else -1)))\n", "  (cond\n    [(= x y) (even? x)]\n   \
    \ [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n",
  "  (define (even_number? num)\n    (zero? (modulo num 2)))\n  (define (iter current_num)\n\
    \    (cond ((and (even_number? current_num)\n                (<= x current_num)\n\
    \                (<= current_num y))\n           current_num)\n          ((< current_num\
    \ y)\n           (iter (+ current_num 1)))\n          (else\n           -1)))\n\
    \  (iter x))", "  (cond\n    [(and (&lt;= x y) (= (remainder x 2) 0)) x]\n   \
    \ [(and (&lt;= x y) (= (remainder x 2) 1)) (- x 1)]\n    [else -1]))\n</code>\n\
    If I run it, I get the following:\n<code>Welcome to DrRacket, version 6.5 [3m].\n\
    Language: racket; memory limit: 128 MB.\n&gt; (choose_num 15 1)\n-1\n&gt; (choose_num\
    \ 1 15)\n-1\n&gt; (choose_num 12 15)\n14\n&gt; (choose_num 13 12)\n-1\n&gt; (choose_num\
    \ 15 17)\n16\n&gt; (choose_num 18 17)\n-1\n&gt; (choose_num 13 13)\n-1\n&gt; (choose_num\
    \ 12 12)\n12\n&gt; (choose_num 1 1)\n-1\n&gt; (choose_num 0 2)\n-1\n&gt; (choose_num\
    \ 0 1)\n-1\n&gt; (choose_num 0 0)\n-1\n&gt; (choose_num 1 0)\n-1\n&gt; (choose_num\
    \ -1 1)\n-1\n&gt; (choose_num 1 -1)\n-1\n&gt; (choose_num -2 -1)\n-1\n&gt; (choose_num\
    \ 2 1)\n-1\n&gt; (choose_num 1 2)\n-1\n&gt; (choose_num 2 2)\n-1\n&gt; (choose_num\
    \ 2 3)\n2\n&gt; (choose_num 2 4)\n2\n&gt; (choose_num 2 5)\n2\n&gt; (choose_num\
    \ 2 6)\n2\n&gt; (choose_num 2 7)\n2\n&gt; (choose_num 2 8)\n2\n&gt; (choose_num\
    \ 2 9)\n2\n&gt; (choose_num 2 10)\n2\n&gt; (choose_num 2", "  (cond [(and (even?\
    \ x) (even? y)) (if (> x y) x y)]\n        [(even? x) x]\n        [(even? y) y]\n\
    \        [else -1]))\n</code>\nI think my solution is pretty good, but I have\
    \ one question:\nIs it bad practice to nest <code>if</code> statements? If so,\
    \ is there a better way to accomplish the same thing?\nThank you!\n\n\nA:\n\n\
    There's nothing wrong with using <code>if</code> inside of a <code>cond</code>\
    \ statement, but there's a better and more elegant way to do this.\n<code>(define\
    \ (choose_num x y)\n  (if (&gt;= y x)\n      (if (odd? x) y x)\n      -1))\n</code>\n\
    You could also define a helper function <code>largest-even-between</code> that\
    \ returns -1 if no even number exists between <code>x</code> and <code>y</code>.\n\
    <code>(define (largest-even-between x y)\n  (if (&gt; x y)\n      -1\n      (if\
    \ (even? x)\n          (largest-even-between x (- y 1))\n          (largest-even-between\
    \ (+ x 1) y))))\n</code>\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n   \
    \ [(even? x) (max x (choose_num (add1 x) y))]\n    [else (choose_num (add1 x)\
    \ y)]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n    [else (choose_num\
    \ (sub1 x) y)]))\n", "  (cond [(= x y) x]\n        [(even? x) (choose_num (+ x\
    \ 2) y)]\n        [else (choose_num (+ x 1) y)]))\n", "  (if (or (even? x) (even?\
    \ y))\n      (if (even? x)\n          (if (even? y)\n              (if (< x y)\
    \ y x)\n              x)\n          (if (even? y)\n              y\n         \
    \     -1))\n      -1))\n", "  (if (and (even? x) (even? y))\n      (if (< x y)\
    \ x y)\n      (if (even? x) x (if (even? y) y -1))))\n\n", "  (cond\n    [(and\
    \ (even? x) (even? y)) (if (> x y) x y)]\n    [(and (even? x) (odd? y)) (if (>\
    \ x (sub1 y)) x (sub1 y))]\n    [(and (odd? x) (even? y)) (if (> (add1 x) y) (add1\
    \ x) y)]\n    [(and (odd? x) (odd? y)) -1]))\n", "  (if (and (number? x) (number?\
    \ y) (even? x) (even? y))\n      (if (&gt; x y)\n          (if (even? y)\n   \
    \           y\n              -1)\n          (if (even? x)\n              x\n \
    \             -1))\n      -1))\n</code>\nThe example you give returns <code>-1</code>\
    \ because <code>choose_num</code> always returns <code>-1</code> for the example\
    \ you give.\nThe first <code>if</code> checks for two conditions.  The first condition,\
    \ that <code>x</code> and <code>y</code> are numbers, is not relevant here.  The\
    \ second condition, that <code>x</code> and <code>y</code> are even, will be false\
    \ for your example because <code>x</code> and <code>y</code> are odd.  So the\
    \ first <code>if</code> will return <code>-1</code>.\nThere is a bigger problem\
    \ with this code that I didn't notice until just now:  The third condition in\
    \ the first <code>if</code> will always be true.  That's because the second condition\
    \ was that <code>x</code> and <code>y</code> are even.  Because <code>x</code>\
    \ and <code>y</code> are even, <code>x</code> and <code>y</code> are numbers.\
    \  So the first <code>if</code> will always return <code>-1</code>.\nIf you want\
    \ the function to work properly, you need to fix the implementation.  Here's a\
    \ cleaner implementation:\n<code>#lang racket\n", "  (cond\n    [(even? x) x]\n\
    \    [(even? y) y]\n    [else -1]))\n", "  (cond\n    [(even? x)\n     (if (=\
    \ x y)\n         x\n         (choose_num (+ x 2) y))]\n    [(even? y)\n     (if\
    \ (= y x)\n         y\n         (choose_num (+ y 2) x))]\n    [else -1]))\n```\n\
    \n**My solution**\n\n```racket\n#lang racket\n", "  (define (x-even? x)\n    (if\
    \ (= (remainder x 2) 0)\n        #t\n        #f))\n  (if (or (not (positive? x))\n\
    \          (not (positive? y)))\n      (error \"Inputs should be positive\")\n\
    \      (if (or (not (integer? x))\n              (not (integer? y)))\n       \
    \   (error \"Inputs should be integers\")\n          (if (> x y)\n           \
    \   (error \"The first number should be smaller than the second\")\n         \
    \     (if (x-even? x)\n                  (if (= x y)\n                      x\n\
    \                      (choose_num (+ x 2) y))\n                  (if (= x y)\n\
    \                      -1\n                      (choose_num (+ x 1) y)))))))\n",
  "  (cond\n    [(= x y) x]\n    [(> x y) -1]\n    [(even? x) (choose_num (+ x 1)\
    \ y)]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(>= x y) -1]\n \
    \   [(even? x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(even?\
    \ x) x]\n    [(even? (- x 1)) (- x 1)]\n    [(= x y) -1]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(even? x) x]\n    [(even? (- x 1)) (- x 1)]\n\
    \    [(>= x y) -1]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(=\
    \ x y) y]\n    [(and (= (remainder x 2) 0) (= (remainder y 2) 0))\n     (if (<=\
    \ x y) y x)]\n    [(and (= (remainder x 2) 1) (= (remainder y 2) 1))\n     (if\
    \ (<= x y) (- y 1) (- x 1))]\n    [(and (= (remainder x 2) 0) (= (remainder y\
    \ 2) 1))\n     (if (<= x y) (- y 1) x)]\n    [(and (= (remainder x 2) 1) (= (remainder\
    \ y 2) 0))\n     (if (<= x y) y (- x 1))]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y) y x)\n      (if (and (even? x) (not (even? y))) x\n       \
    \   (if (and (not (even? x)) (even? y)) y\n              -1))))\n", "  (if (=\
    \ x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even? x)\n\
    \          (choose_num (+ x 1) y)\n          (choose_num (+ x 1) y))))\n", " \
    \ (cond\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", "  (cond\n\
    \    [(< x y) \n     (let loop ((num x))\n       (if (and (even? num) (<= num\
    \ y))\n         num\n         (loop (+ num 1))))]\n    [else -1]))\n", "  (if\
    \ (and (&lt;= x y) (even? x))\n      x\n      (if (even? y)\n          y\n   \
    \       -1)))\n</code>\n", "  (cond ((even? x) (if (even? y) y x))\n        ((even?\
    \ (+ x 1)) (+ x 1))\n        ((even? (+ x 2)) (+ x 2))\n        (else -1)))\n",
  "  (cond ((even? x) x)\n        ((even? y) y)\n        (else -1)))", "  (cond\n\
    \    [(or (even? x) (not (even? y))) (choose_num (add1 x) y)]\n    [(even? y)\
    \ y]\n    [else -1]))\n", "  (cond ((and (= x y) (even? x)) x)\n        ((= x\
    \ y) -1)\n        ((even? y) y)\n        (else (choose_num x (- y 1)))))\n", " \
    \ ;; Check for the edge case where x and y are the same. If so, \n  ;; then there\
    \ is no range, so it's impossible to find the number\n  ;; required.\n  (if (=\
    \ x y)\n      -1\n      ;; If x and y are the same, then just check if they are\
    \ even.\n      ;; Otherwise, let's check the next even number between x and y\n\
    \      ;; and recurse.\n      (if (= x y)\n          (if (even? x)\n         \
    \     x\n              -1)\n          (if (even? (+ x 1))\n              (choose_num\
    \ (+ x 1) y)\n              (choose_num (+ x 2) y)))))\n", "  (cond\n    [(> x\
    \ y) -1]\n    [(even? x) x]\n    [else (choose_num (add1 x) y)]))\n", "  (cond\
    \ [(<= x y)\n\t (if (even? x) x (choose_num (+ x 1) y))]\n\t[else\n\t -1]))\n",
  "  (cond\n    [(= x y) x]\n    [(even? x) (if (even? y) (choose_num (+ x 2) y) (choose_num\
    \ x (- y 2)))]\n    [(even? y) (choose_num (+ x 1) y)]\n    [else (choose_num\
    \ (+ x 1) (- y 1))]))", "    (define (is_even? x)\n        (if (= (% x 2) 0)\n\
    \            true\n            false))\n    (if (and (is_even? x) (is_even? y))\n\
    \        (if (> x y)\n            y\n            x)\n        (if (is_even? x)\n\
    \            x\n            (if (is_even? y)\n                y\n            \
    \    -1))))\n\n\n", "  (if (> x y)\n      -1\n      (if (even? x)\n          x\n\
    \          (choose_num (+ x 1) y))))\n", "  (if (and (even? x) (even? y))\n  \
    \    (if (> x y) x y)\n      (if (even? x) x\n          (if (even? y) y -1))))\n",
  "    (cond\n        [(even? x) x]\n        [(even? y) y]\n        [else -1]))\n\
    </code>\nI am a beginner to racket and I am wondering what I am missing in my\
    \ code for it to return a number as described in the comment above. I don't know\
    \ what I'm doing wrong but it's either returning 14 (when I use x = 12 and y =\
    \ 15) or -1 (when I use x = 13 and y = 12).\nThis is my output:\n<code>Welcome\
    \ to DrRacket, version 6.7 [3m].\nLanguage: racket, with debugging; memory limit:\
    \ 128 MB.\n\n&gt; (choose_num 13 12)\n-1\n&gt; (choose_num 12 15)\n14\n&gt; (choose_num\
    \ 12 12)\n12\n&gt; (choose_num 15 13)\n14\n&gt; (choose_num 14 14)\n14\n&gt; \n\
    </code>", "  (cond\n    [(<= x y) (if (even? x) x (-1))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(> x y) -1]\n    [(< x y) \n     (cond\n  \
    \     [(= (modulo y 2) 0) y]\n       [else (choose_num x (- y 1))])]\n    [else\
    \ (cond\n            [(= (modulo x 2) 0) x]\n            [else -1])]))\n", " \
    \ (if (not (even? x)) (set! x (+ x 1)))\n  (if (even? y) y (- y 1)))\n", "  (if\
    \ (even? x)\n      (if (even? y)\n          (if (>= x y) x y)\n          (if (>\
    \ (+ x 1) y) -1 (+ x 1)))\n      (if (even? y)\n          (if (> (+ y 1) x) (+\
    \ y 1) -1)\n          (if (> (+ x 1) y) -1 (+ x 1)))))\n\n", "  (cond\n    [(=\
    \ x y) (if (even? x) x -1)]\n    [(> x y) -1]\n    [else (max (choose_num x (-\
    \ y 1)) (choose_num (+ x 1) y))]))\n</code>\n", "  (cond [(or (= x y) (= x (+\
    \ y 1))) (if (even? x) x -1)]\n        [(> x y) -1]\n        [else (choose_num\
    \ x (+ y 1))]))\n", "    (if (= x y)\n        (if (even? x)\n            x\n \
    \           -1)\n        (if (< y x)\n            -1\n            (if (even? x)\n\
    \                (if (even? y)\n                    (if (= x y)\n            \
    \            x\n                        (if (> x y)\n                        \
    \    (choose_num y x)\n                            (choose_num (+ x 1) y)))\n\
    \                    (choose_num (+ x 1) y))\n                (choose_num (+ x\
    \ 1) y)))))\n", "  (cond [(= x y) x]\n        [(and (even? x) (even? y)) (if (>\
    \ x y) x y)]\n        [(even? x) x]\n        [(even? y) y]\n        [else -1]))\n\
    </code>\nWhat do you think?\n\n\nA:\n\nI would write it this way:\n<code>(define\
    \ (choose-num x y)\n  (cond\n    [(= x y) x]\n    [(not (even? x)) (choose-num\
    \ (add1 x) y)]\n    [(not (even? y)) (choose-num x (sub1 y))]\n    [(&gt; x y)\
    \ x]\n    [else y]))\n</code>\nThen we get:\n<code>(choose-num 12 15)\n=&gt; 14",
  "  (cond\n    [(or (= x y) (even? x)) x]\n    [else (choose_num (sub1 x) y)]))\n",
  "  (define (helper x y)\n    (if (>= x y) -1\n        (if (even? x) x\n        \
    \    (helper (+ x 1) y))))\n  (helper x y))\n", "    (if (= x y)\n        (if\
    \ (even? x) x -1)\n        (if (even? x)\n            (if (even? y)\n        \
    \        (if (< x y) y x)\n                (choose_num (+ x 1) y))\n         \
    \   (choose_num (+ x 1) y))))\n", "  (cond\n    [(even? x) x]\n    [(even? y)\
    \ y]\n    [else -1]))\n", "  (if (&lt;= x y)\n      (if (= 0 (remainder y 2))\n\
    \          y\n          (choose_num x (- y 1)))\n      -1))\n</code>\nThis is\
    \ what I have so far, but I'm getting an error for the <code>if</code> statement\
    \ and I don't know what I need to do in order to fix it. \n\n\nA:\n\nYour code,\
    \ as written, is working fine.\nPerhaps there is another problem (with your test\
    \ cases) that is causing the error.\nI added an <code>#| |#</code> comment to\
    \ block out <code>racket/gui</code>, then ran your program under DrRacket.\n<code>#lang\
    \ racket\n", "  (cond [(= x y) x]\n        [(even? x) (choose_num (+ x 2) y)]\n\
    \        [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(> x y) -1]\n    [(even?\
    \ x) x]\n    [else (choose_num (+ x 1) y)]))", "  (cond [(odd? x) (choose_num\
    \ (+ x 1) y)]\n        [(> x y) -1]\n        [else x]))\n", "\t(cond\n\t\t[(<\
    \ x 0) -1]\n\t\t[(< y 0) -1]\n\t\t[(= x y) (if (even? x) x -1)]\n\t\t[(> x y)\
    \ (choose_num y x)]\n\t\t[else\n\t\t\t(let ([bigger (choose_num (- x 1) y)])\n\
    \t\t\t\t(if (and (= bigger (- x 1)) (not (even? x))) -1 x))]))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y) y x)\n      (if (and (odd? x) (odd?\
    \ y)) -1\n          (if (and (even? x) (odd? y)) (if (> x y) x -1)\n         \
    \     (if (and (odd? x) (even? y)) (if (> x y) y -1))))))", "  (cond\n    [(=\
    \ x y)\n     (if (even? x) x -1)]\n    [(even? x)\n     (cond\n       [(= (choose_num\
    \ (+ x 1) y) -1) x]\n       [else (choose_num (+ x 1) y)])]\n    [else (choose_num\
    \ (+ x 1) y)]))", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? x)\n          (if (even? y)\n              (if (< x\
    \ y)\n                  y\n                  x)\n              (if (even? (add1\
    \ y))\n                  (add1 y)\n                  x))\n          (if (even?\
    \ (add1 x))\n              (choose_num (add1 x) y)\n              -1))))\n", " \
    \ (if (and (even? x) (even? y)) \n      (if (> x y) y x) \n      (if (even? x)\
    \ x\n          (if (even? y) y -1))))\n", "  (cond\n    [(= x y) (if (even? x)\
    \ x -1)]\n    [(even? x) (choose_num (+ x 1) y)]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n\
    \      (if (even? x)\n          (choose_num (add1 x) y)\n          (choose_num\
    \ (add1 x) y))))", "  (cond\n    [(> x y) -1]\n    [(= x y) x]\n    [(and (even?\
    \ x) (not (even? y))) x]\n    [(and (even? y) (not (even? x))) y]\n    [(even?\
    \ x) (choose_num (+ x 2) y)]\n    [(even? y) (choose_num x (- y 2))]\n    [else\
    \ -1]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) (cond\n               \
    \  [(even? y) y]\n                 [else x])]\n    [else (choose_num (+ x 1) y)]))\n",
  "  ;; YOUR CODE HERE\n  )\n", "  (cond\n    [(< x y) (even (max x y))]\n    [(=\
    \ x y) (even x)]\n    [else -1]))\n", "  (cond\n    [(and (even? x) (even? y))\
    \ (if (> x y) x y)]\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n",
  "  (cond [(even? x) x]\n        [(= x y) -1]\n        [else (choose_num (+ x 1)\
    \ y)]))\n\n", "  (cond [(= x y) (if (even? x) x -1)]\n        [(even? x) (max\
    \ x (choose_num (+ x 1) y))]\n        [else (choose_num (+ x 1) y)]))\n", "  (if\
    \ (and (&lt;= x y) (even? x))\n      x\n      (if (&lt;= y x)\n          -1\n\
    \          (choose_num (add1 x) y))))\n</code>\nWhat I need to do in my own code\
    \ is to check if there's no such number. I tried to do it with and and if, but\
    \ I didn't succeed, so I've copied the answer from here.\nThe idea of my own solution\
    \ was to check if the first number (x) is bigger than the second (y) and if it's\
    \ even. So if there's no such number I should get -1.\nThis is my code:\n<code>#lang\
    \ racket\n", "  (cond\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(< x y) (if (even? x) (max x (choose_num\
    \ (+ x 1) y)) (choose_num (+ x 1) y))]\n    [(> x y) (if (even? y) (max y (choose_num\
    \ x (- y 1))) (choose_num x (- y 1)))]))\n", "  (if (and (even? x) (even? y))\n\
    \      ;; if both x and y are even, return the bigger one:\n      (if (> x y)\
    \ x y)\n      ;; if either x or y are odd, return the even one:\n      (if (even?\
    \ x) x\n        (if (even? y) y\n          ;; if both x and y are odd, return\
    \ -1:\n          -1))))\n", "  (cond\n    ((= x y) x)\n    ((even? x) (max x (choose_num\
    \ (add1 x) y)))\n    (else (choose_num (add1 x) y))))\n", "  (cond [(even? x)\
    \ x]\n        [(= x (+ y 1)) -1]\n        [else (choose_num (+ x 1) y)]))\n\n",
  "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (if (even? y)\n              (max x y)\n              (choose_num\
    \ (add1 x) y))\n          (choose_num (add1 x) y))))\n", "  (define (iter i)\n\
    \    (cond ((and (<= x i) (<= i y)) (if (even? i) i (iter (- i 1))))\n       \
    \   (else -1)))\n  (iter y))\n", "  (cond ((> x y) -1)\n        ((even? x) x)\n\
    \        (else\n         (choose_num (+ x 1) y))))\n", "  (define (choose-num-iter\
    \ x y s)\n    (cond [(> x y) s]\n          [(even? x) (choose-num-iter (+ x 1)\
    \ y x)]\n          [else (choose-num-iter (+ x 1) y s)]))\n  (choose-num-iter\
    \ x y -1))\n", "  ;; What should you do if x is not less than y?\n  (if (&lt;\
    \ x y)\n      ;; Choose the biggest even number in the range [x, y]\n      (if\
    \ (even? y) y (choose_num x (- y 1)))\n    ;; else\n    (-1)))\n</code>\n", " \
    \ ;; your code here\n  )\n\n```\n\n2. Define a function ` (find_duplicates L)\
    \ ` that takes a list of numbers ` L ` and returns a list of all the numbers from\
    \ ` L ` that occur more than once. For example:\n\n```racket\n#lang racket\n",
  "  (cond ((>= x y) -1)\n        ((= (remainder x 2) 0) x)\n        (else (choose_num\
    \ (+ x 1) y))))\n", "  ;; ...\n  (if (even? x)\n      x\n      (choose_num (+\
    \ x 1) y)))\n", "  (if (> x y)\n      -1\n      (if (even? x)\n          x\n \
    \         (choose_num (+ x 1) y))))\n", "  (cond ((= x y) (if (even? x) x -1))\n\
    \        ((even? x) (choose_num (+ x 1) y))\n        (else (choose_num (+ x 1)\
    \ y))))\n", "  (cond ((= x y) (if (even? x) x -1))\n        ((< x y) (choose_num\
    \ (+ x 1) y))))\n", "  ;; You need to write this function.\n  )\n", "  (cond\n\
    \    [(even? x) (if (and (<= x y) (even? y)) y (-1))]\n    [(even? y) (if (and\
    \ (<= x y) (even? x)) x (-1))]\n    [else (-1)]))\n", "  (if (&lt;= x y)\n   \
    \   (if (even? x)\n          (if (even? y)\n              (if (&gt; x y)\n   \
    \               y\n                  x)\n              (choose_num x (- y 1)))\n\
    \          (choose_num (+ x 1) y))\n      -1))\n</code>\nIs there a better way\
    \ to do this without using so many nested <code>if</code> expressions?\n\n\nA:\n\
    \nYou can use <code>let*</code> to define intermediate variables, this will make\
    \ it more readable:\n<code>(define (choose-num x y)\n  (if (&lt;= x y)\n     \
    \ (let* ((is-even-x? (even? x))\n             (is-even-y? (even? y))\n       \
    \      (x-is-bigger? (&gt; x y)))\n        (if (and is-even-x? is-even-y?)\n \
    \           (if x-is-bigger? y x)\n            (choose-num x (- y 1))))\n    \
    \  -1))\n</code>\nNext, see if you can extract a <code>biggest-even-number</code>\
    \ function from <code>choose-num</code> - this function will take 2 even numbers\
    \ and return the bigger one, if they are equal it will return any of them. If\
    \ this is possible it will make the code even more readable.\nLastly, instead\
    \ of testing for <code>even</code> numbers and <code>&gt;</code> in separate <code>if</code>\
    \ statements you can combine these conditions, for example:\n<code>(if (and is-even-x?\
    \ is-even-y?)\n</code>\nYou can combine the <code>even?</code>s into a single\
    \ <code>even?</code>, like this:\n<code>(if (even? x y)\n</code>\nBut this will\
    \ work only if you switch the arguments, because <code>even?</code> is a function\
    \ that takes a single number, and I believe it returns the original number if\
    \ it's even, this is just a guess, you should check the documentation for the\
    \ actual behavior of <code>even?</code>.\nIn the same way you can replace", " \
    \ ;; Your code goes here\n  )\n```\n\n*Again, this function should work for any\
    \ input numbers, not just the ones in the example.*\n\n### Part 2: The Function\n\
    \nWrite a function that takes a positive integer as an argument and\nreturns a\
    \ new integer that is the sum of all the odd digits of the\nargument.  For example:\n\
    \n```", "  (if (zero? (remainder y 2))\n      y\n      (choose_num x (- y 1))))\n",
  "  (if (not (even? x)) (choose_num (+ x 1) y)\n      (if (>= x y) x\n          (choose_num\
    \ (+ x 2) y))))\n", "  (if (&lt;= x y)\n      (if (even? x)\n          (if (even?\
    \ y)\n              x\n              (choose_num (+ x 1) y))\n          (choose_num\
    \ (+ x 1) y))\n      -1))\n</code>\nThe if statement is supposed to check if x\
    \ is bigger than y, if it is then it checks to see if x is even, if not it adds\
    \ 1 to x and runs the function again with the new values. If x is even then it\
    \ checks to see if y is even as well, if not then it adds 1 to x and runs the\
    \ function again with the new values. \nI am aware that I could have replaced\
    \ the if statements with cond statements for better readability, but I want to\
    \ know if there's any better way of doing this recursively.\n\n\nA:\n\nI think\
    \ you misunderstood how the <code>if</code> function works in Racket:\n<code>(if\
    \ test\n    then\n    else)\n</code>\nExpands to <code>(if test then else)</code>,\
    \ and if <code>test</code> is true then <code>then</code> is evaluated and its\
    \ result is returned, otherwise <code>else</code> is evaluated and its result\
    \ is returned. So, assuming <code>x</code> is less than or equal to <code>y</code>,\
    \ you could write your function as:\n<code>(define (choose-num x y)\n  (if (even?\
    \ x)\n      (if (even? y)\n          x\n          (choose-num (+ x 1) y))\n  \
    \    (choose-num (+ x 1) y)))\n</code>\nBut that's not very clear and it's hard\
    \ to follow. The same functionality can be expressed in a much more readable way,\
    \ I'd say, using a <code>cond</code> expression, like this:\n<code>(define (choose-num\
    \ x y)\n  (cond\n    [(&gt; x y) -1]\n    [(even? x) x]\n    [(even? y) y]\n \
    \   [else (choose-num (+ x 1) y)]))\n</code>\nThat's a bit less nested and the\
    \ intentions are clearer - if <code>x</code> is", "  (cond\n    [(> x y) -1]\n\
    \    [(even? x) x]\n    [else (choose_num (+ x 1) y)]))\n\n", "  (if (= x y) (if\
    \ (even? x) x -1)\n      (cond ((even? x) (max x (choose_num (+ x 1) y)))\n  \
    \          ((odd? x) (choose_num (+ x 1) y)))))\n", "  (cond ((&lt; x y) (if (even?\
    \ y) y (choose_num x (- y 1))))\n        ((= x y) (if (even? x) x -1))\n     \
    \   (else (if (even? x) x (choose_num x (- x 1))))))\n</code>\nI am trying to\
    \ rewrite it as a tail recursive version. Here is what I got so far:\n<code>#lang\
    \ racket\n", "  (if (= x y)\n      x\n      (if (odd? x)\n          (choose_num\
    \ (+ x 1) y)\n          (choose_num (+ x 2) y))))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (choose_num (+ x 1) y)]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? y)\n          (choose_num x (- y 1))\n          (choose_num\
    \ x (- y 2)))))\n", "  (cond\n    [(<= x y) (cond [(even? x) x]\n            \
    \        [(even? y) y]\n                    [else -1])]\n    [else -1]))\n", " \
    \ (cond\n    [(<= x y)\n     (if (even? x) x (choose_num (+ x 1) y))]\n    [else\
    \ -1]))\n", "  (if (even? x)\n      (if (= x y) x\n\t  (choose_num (+ x 2) y))\n\
    \      (if (= x y) -1\n\t  (choose_num (+ x 1) y))))\n", "  (define (choose_helper\
    \ n)\n    (if (and (<= x n) (<= n y)) \n        (if (even? n) n (choose_helper\
    \ (- n 1)))\n        -1))\n  (choose_helper y))\n", "  (if (> x y)\n      -1\n\
    \      (if (even? x)\n          x\n          (choose_num (add1 x) y))))\n", " \
    \ ;; your code here\n  )\n\n```\n---\n### Problem 2", "    (cond ((>= x y) -1)\n\
    \          ((= (modulo x 2) 0) x)\n          (else (choose_num (+ x 1) y))))\n",
  "  (cond [(even? x) x]\n        [(odd? x) (choose_num (+ x 1) y)]\n        [(= x\
    \ y) -1]))\n", "  (cond\n    [(even? y) y]\n    [(even? x) x]\n    [else -1]))\n",
  "  (if (and (even? x) (<= x y))\n      x\n      (if (and (even? y) (<= x y))\n \
    \         y\n          -1)))\n", "  (let loop ([x x] [y y])\n    (cond\n     \
    \ [(= x y) (if (even? x) x -1)]\n      [(even? x) x]\n      [else (loop (add1\
    \ x) y)])))\n", "  (if (and (even? x) (even? y))\n      (max x y)\n      (if (even?\
    \ x)\n          x\n          (if (even? y)\n              y\n              -1))))\n",
  "  (cond\n    [(= x y) x]\n    [(even? x) (choose_num (+ x 2) y)]\n    [(even? y)\
    \ (choose_num x (- y 2))]\n    [else -1]))\n", "  (cond ((and (even? x) (even?\
    \ y)) (if (< x y) x y))\n        ((even? x) x)\n        ((even? y) y)\n      \
    \  (else -1)))\n```\n\n```racket\n#lang racket\n", "  (if (not (and (integer?\
    \ x) (integer? y) (>= x 0) (>= y 0)))\n      (error \"Expected two positive integers:\
    \ choose_num\")\n      (if (= x y)\n          (if (even? x) x -1)\n          (if\
    \ (< x y) (choose_num (+ x 1) y) (choose_num y x)))))\n", "  (cond [(= x y) \n\
    \         (- y 1)]\n        [(= (remainder x 2) 0)\n         (cond [(<= x y)\n\
    \                x]\n               [else\n                (choose_num (- x 1)\
    \ y)])]\n        [else\n         (choose_num (- x 1) y)]))\n", "  (cond\n    [(even?\
    \ x) x]\n    [(even? (+ x 1)) (+ x 1)]\n    [(even? y) y]\n    [(even? (- y 1))\
    \ (- y 1)]\n    [else -1]))\n```\n\n```scheme\n#lang racket\n", "  (cond\n   \
    \ [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n```", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          -1\n          (if (= x y)\n    \
    \          x\n              (choose_num (+ x 2) y)))\n      (if (or (even? x)\
    \ (even? y))\n          (if (even? x)\n              (choose_num x (- y 1))\n\
    \              (choose_num (- x 1) y))\n          (if (= x y)\n              -1\n\
    \              (choose_num (+ x 1) (- y 1))))))\n", "  (cond\n    ((= x y) x)\n\
    \    ((even? x) (max x (choose_num (+ x 1) y)))\n    (else (choose_num (+ x 1)\
    \ y))))\n", "  (define (choose_aux counter)\n    (if (&gt; counter y)\n      \
    \  -1\n        (if (even? counter)\n            counter\n            (choose_aux\
    \ (+ counter 1)))))\n  (choose_aux x))\n</code>\n\nAfter running this in DrRacket,\
    \ it gives me this error: \n<code>module: undefined;\n cannot reference an identifier\
    \ before its definition\n  in module: top-level\n   at: 51.0(/Users/steven/Downloads/W1D2.rkt#51:0)\n\
    </code>\nAfter I changed it to this:\n<code>#lang racket\n", "  (cond [(= x y)\
    \ x]\n        [(even? x) (max x (choose_num (+ x 1) y))]\n        [else (choose_num\
    \ (+ x 1) y)]))\n", "  (let ((even? (lambda (n) (= (remainder n 2) 0))))\n   \
    \ (cond\n      ((and (<= x y) (even? x)) x)\n      ((and (<= x y) (not (even?\
    \ x))) (choose_num (+ x 1) y))\n      (else -1))))\n```\n\n```racket\n#lang racket\n",
  "  (cond\n    [(zero? (even? x)) (choose_num (add1 x) y)]\n    [(= x y) x]\n   \
    \ [else (- x 1)]))\n", "  ;; Enter your code here\n  )\n```\n\n#### Exercise 3.2\n\
    \nWrite a function that takes three positive numbers a, b, and c, and\nreturns\
    \ the biggest number in the range [a, b] that is divisible by c.\nIf there's no\
    \ such number, then the function should return -1.\n\n#### Exercise 3.3\n\nWrite\
    \ a function that takes a string and a character, and returns the\ncharacter's\
    \ position in the string. For example:\n\n```racket", "  (cond [(= x y) \n   \
    \      (cond [(even? x) x] \n               [else -1])]\n        [(even? x) \n\
    \         (cond [(< x y) x] \n               [else -1])]\n        [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(and (even? x) (even? y)) (if (> x y) x y)]\n\
    \    [(and (even? x) (odd? y)) x]\n    [(and (odd? x) (even? y)) y]\n    [(and\
    \ (odd? x) (odd? y)) -1]))\n```\n\n``` #lang racket\n", "  (if (and (positive?\
    \ x) (positive? y))\n      (if (< x y) \n          (choose_num y x))\n      (-1)))\n",
  "  ;; TODO: implement this function\n  )\n", "  (cond\n    [(= x y)\n     (if (even?\
    \ x) x -1)]\n    [(even? y)\n     (choose_num x (- y 1))]\n    [else (choose_num\
    \ x (- y 1))]))\n", "  (if (odd? x)\n      (if (> x y)\n          -1\n       \
    \   (choose_num (+ x 1) y))\n      (if (= x y)\n          x\n          (choose_num\
    \ (+ x 1) y))))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? y)\n          (choose_num x (- y 1))\n          (choose_num\
    \ x (- y 2)))))\n", "  (cond [(= x y)\n         (if (even? x) x -1)]\n       \
    \ [(> x y)\n         -1]\n        [else\n         (if (even? x)\n            \
    \ (if (even? y)\n                 (max x y)\n                 (choose_num (+ x\
    \ 1) y))\n             (choose_num (+ x 1) y))]))\n", "    (if (or (= x y) (=\
    \ x (- y 1)))\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (if (even? y)\n              (if (< x y)\n                  y\n\
    \                  x)\n              (choose_num x (- y 1)))\n          (choose_num\
    \ (+ x 1) y))))\n", "  (cond\n    ((<= y x) -1)\n    ((= (remainder y 2) 0) y)\n\
    \    (else (choose_num x (- y 1)))))\n", "  (cond [(and (and (positive? x) (positive?\
    \ y))\n            (even? x)\n            (even? y)) x]\n        [(and (and (positive?\
    \ x) (positive? y))\n            (even? x)\n            (not (even? y))) (choose_num\
    \ x (- y 1))]\n        [(and (and (positive? x) (positive? y))\n            (not\
    \ (even? x))\n            (even? y)) (choose_num (+ x 1) y)]\n        [(and (and\
    \ (positive? x) (positive? y))\n            (not (even? x))\n            (not\
    \ (even? y))) (choose_num (+ x 1) (- y 1))]\n        [else -1]))\n", "  (cond\n\
    \    [(= x y) x]\n    [(odd? x) (choose_num (+ x 1) y)]\n    [else (max x (choose_num\
    \ (+ x 1) y))]))\n\n", "  (if (and (even? x) (even? y))\n      (if (< x y)\n \
    \         (choose_num (add1 x) y)\n          x)\n      (if (and (odd? x) (odd?\
    \ y))\n          (if (< x y)\n              (choose_num (add1 x) y)\n        \
    \      x)\n          (if (and (even? x) (odd? y))\n              (if (< x y)\n\
    \                  (choose_num (add1 x) y)\n                  x)\n           \
    \   (if (and (odd? x) (even? y))\n                  (if (< x y)\n            \
    \          (choose_num (add1 x) y)\n                      x)\n               \
    \   -1)))))\n", "  (cond ((= x y) x)\n        ((and (even? x) (> y x)) x)\n  \
    \      ((and (even? y) (> y x)) y)\n        ((and (even? x) (< y x)) y)\n    \
    \    ((and (even? y) (< y x)) x)\n        (else -1)))\n", "  (if (and (even? x)\n\
    \           (even? y))\n      (if (> x y)\n          y\n          x)\n      (if\
    \ (even? x)\n          x\n          (if (even? y)\n              y\n         \
    \     -1))))\n", "  (if (and (integer? x) (integer? y) (<= x y) (> x 0) (> y 0))\n\
    \      (if (even? x)\n          (if (even? y)\n              (if (= x y)\n   \
    \               x\n                  (choose_num x (- y 1)))\n              (choose_num\
    \ (+ x 1) y))\n          (choose_num (+ x 1) y))\n      -1))\n", "  (cond ((<\
    \ x y) (choose_num x (+ y 1)))\n        ((and (even? x) (<= x y)) x)\n       \
    \ (else -1)))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n      \
    \    (- x 2)\n          y)\n      (if (even? x)\n          x\n          (if (even?\
    \ y)\n              y\n              -1))))\n", "  (let* ([temp (if (= y 0) 0\
    \ (- y 1))]\n         [temp (- temp x)]\n         [temp (/ temp 2)])\n    (if\
    \ (= temp 0) (- y 1) (* temp 2))))\n</code>\nIs there a way to shorten this code?\n\
    \n\nA:\n\nYou can simplify the code a bit by making use of the <code>max</code>\
    \ procedure:\n<code>(define (choose_num x y)\n  (let ((x (max x 0)))\n    (if\
    \ (even? x)\n        x\n        (if (zero? y)\n            -1\n            (max\
    \ x (- y 1))))))\n</code>\n", "  (if (or (= x y) (= (- y x) 1))\n      -1\n  \
    \    (if (even? y) y (choose_num x (- y 1)))))", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          -1\n          (if (even? y)\n            \
    \  y\n              (choose_num x (- y 1))))\n      (if (even? y)\n          y\n\
    \          (choose_num x (- y 1)))))\n", "  (cond\n    [(> x y) -1]\n    [(even?\
    \ x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y)\n    \
    \ (if (even? x) x -1)]\n    [(even? x)\n     (max x (choose_num (add1 x) y))]\n\
    \    [else\n     (choose_num (add1 x) y)]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y) y x)\n      (cond\n       [(even? x) x]\n       [(even? y)\
    \ y]\n       [else -1])))\n", "  (if (= x y)\n      x\n      (if (= (remainder\
    \ x 2) 0)\n          (if (or (or (= x y) (= x (+ y 1))) (= x (- y 1)))\n     \
    \         x\n              (choose_num (- x 1) y))\n          (choose_num (- x\
    \ 1) y))))\n", "  (cond [(even? x) x]\n        [(even? (+ x 1)) (+ x 1)]\n   \
    \     [(even? (+ x 2)) (+ x 2)]\n        [else -1]))\n", "  (cond\n    [(zero?\
    \ x) -1]\n    [(even? x) (if (> x y) y x)]\n    [else (choose_num (- x 1) y)]))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          y\n          x)\n\
    \      (if (or (even? x) (even? y))\n          (if (even? x)\n              x\n\
    \              y)\n          -1)))\n", "  (if (and (<= x y) (even? x))\n     \
    \ x\n      (if (> x y)\n          -1\n          (choose_num (+ x 1) y))))\n",
  "  (cond ((&lt; x y)\n     (choose_num x (+ y 1)))\n    ((= x y)\n     (cond ((even?\
    \ x)\n        x)\n       (else\n        -1)))\n    (else\n     -1)))\n</code>\n\
    Obviously when I run this it gives me an error of\nchoose_num: too many arguments\
    \ in: (choose_num x (+ y 1))\nI think this is because a cond statement doesn't\
    \ implicitly create a closure. Is there any way that I can work around this? \n\
    \n\nA:\n\nWhat you have is not a tail-recursive function, because the continuation\
    \ of the recursive call is not the return value of the function. It's <code>&lt;</code>\
    \ that goes into the <code>cond</code>. This means that you will never be able\
    \ to do this without a helper function, e.g.\n<code>(define (choose-num x y)\n\
    \  (define (rec x y)\n    (cond ((&lt; x y)\n           (rec x (+ y 1)))\n   \
    \       ((= x y)\n           (cond ((even? x)\n                  x)\n        \
    \         (else\n                  -1)))\n          (else\n           -1)))\n\
    \  (rec x y))\n</code>\n", "  (if (even? x)\n      (if (<= x y)\n          x\n\
    \          -1)\n      (if (even? (+ x 1))\n          (if (<= (+ x 1) y)\n    \
    \          (+ x 1)\n              -1)\n          (if (even? (+ x 2))\n       \
    \       (if (<= (+ x 2) y)\n                  (+ x 2)\n                  -1)\n\
    \              -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          -1\n          (choose_num (add1 x) y))\n      (if (and (even? x) (odd?\
    \ y))\n          (if (> x y)\n              -1\n              (choose_num (add1\
    \ x) y))\n          (if (and (odd? x) (even? y))\n              (if (> x y)\n\
    \                  -1\n                  (choose_num (add1 x) y))\n          \
    \    (if (and (odd? x) (odd? y))\n                  (if (> x y)\n            \
    \          -1\n                      (choose_num (add1 x) y)))))))\n", "  (cond\
    \ [(or (odd? x) (odd? y)) -1]\n        [(> x y) -1]\n        [(even? x) x]\n \
    \       [else (choose_num (- x 1) y)]))\n", "  (cond ((and (even? x) (even? y))\
    \ (if (> x y) x y))\n        ((and (even? x) (odd? y)) x)\n        ((and (odd?\
    \ x) (even? y)) y)\n        (else -1)))\n", "  (cond\n    [(> x y) -1]\n    [(even?\
    \ x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (define (helper i)\n    (if\
    \ (= i x)\n        -1\n        (if (even? i)\n            i\n            (helper\
    \ (- i 1)))))\n  (helper y))\n", "  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (helper n)\n    (cond ((< n x) -1)\n          ((and (>= n\
    \ x) (<= n y) (is_even? n)) n)\n          (else (helper (- n 1)))))\n  (helper\
    \ y))", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n\
    \          (if (< x y)\n              (- y 2)\n              x))\n      (if (and\
    \ (odd? x) (odd? y))\n          (if (> x y)\n              (- x 3)\n         \
    \     (if (< x y)\n                  (- y 3)\n                  -1))\n       \
    \   (if (odd? x)\n              (if (> x y)\n                  (- x 2)\n     \
    \             (if (< x y)\n                      (- y 3)\n                   \
    \   y))\n              (if (> x y)\n                  (- x 3)\n              \
    \    (if (< x y)\n                      (- y 2)\n                      -1))))))\n",
  "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (choose_num (+ x 1) y)\n          (choose_num (+ x 1) y))))\n\n",
  "  (cond\n    [(< x y) (choose_num y x)]\n    [(even? x) x]\n    [(even? y) y]\n\
    \    [else -1]))\n", "  (cond\n    [(even? y) y]\n    [(even? x) x]\n    [else\
    \ -1]))\n```\n\n## Exercise 16.5:\n\nThe following function should return true\
    \ if x is an even number,\notherwise it should return false. This function uses\
    \ tail-recursion.\n```\n#lang racket\n", "  (if (>= x y) -1\n      (if (even?\
    \ x) x (choose_num (+ x 1) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(= y (+ x 1)) (if (even? x) x (if (even? y) y -1))]\n    [(= x 1) (if (even?\
    \ y) y -1)]\n    [else (max (choose_num (- x 1) y) (choose_num x (- y 1)))]))\n",
  "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (choose_num\
    \ (if (even? x)\n                      x\n                      (+ x 1))\n   \
    \               y)))\n", "  (if (= x y)\n      (if (even? x)\n          x\n  \
    \        -1)\n      (if (even? x)\n          (if (even? y)\n              (max\
    \ x y)\n              (if (even? (- y 1))\n                  y\n             \
    \     (choose_num x (- y 1))))\n          (if (even? y)\n              (if (even?\
    \ (+ x 1))\n                  x\n                  (choose_num (+ x 1) y))\n \
    \             (choose_num (+ x 1) (- y 1))))))\n", "  (if (= x y)\n      (if (even?\
    \ x)\n          x\n          -1)\n      (if (even? x)\n          (max x (choose_num\
    \ (+ x 1) y))\n          (choose_num (+ x 1) y))))\n", "  (if (= x y) \n     \
    \ (if (even? x)\n          x\n          -1)\n      (if (even? x)\n          (max\
    \ x (choose_num (+ x 1) y))\n          (choose_num (+ x 1) y))))\n", "  (if (=\
    \ x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even? y)\n\
    \          (choose_num x (- y 1))\n          (choose_num x (- y 2)))))\n</code>\n\
    As you can see, I'm using recursion, but it seems to me that this is a quite ineffective\
    \ way. Could you please help me to get a more effective version of my function?\n\
    \n\nA:\n\nI think the 'trick' here is to find the largest even number within the\
    \ range, then work back from there, if it's out of the range, if it's not out\
    \ of the range, return it.\n<code>(define (choose-num x y)\n  (if (&lt; x y)\n\
    \      (let* ([n (ceiling (/ (+ x y) 2))]\n             [d (- n (modulo n 2))])\n\
    \        (if (&lt; d x)\n            -1\n            d))\n      -1))\n</code>\n",
  "  (cond ((= x y) (if (even? x) x -1))\n        ((even? y) y)\n        (else (choose_num\
    \ x (- y 1)))))\n", "  (cond [(and (even? x) (even? y)) (max x y)]\n        [(even?\
    \ x) x]\n        [(even? y) y]\n        [else -1]))\n\n\n", "  (if (> x y) -1\n\
    \      (if (even? y) y\n          (choose_num x (- y 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
