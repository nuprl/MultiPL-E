name: HumanEval_102_choose_num
language: rkt
prompt: "#lang racket\n\n;; This function takes two positive numbers x and y and returns\
  \ the\n;; biggest even integer number that is in the range [x, y] inclusive. If\
  \ \n;; there's no such number, then the function should return -1.\n;; For example:\n\
  ;; >>> (choose_num 12 15)\n;; 14\n;; >>> (choose_num 13 12)\n;; -1\n(define (choose_num\
  \ x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n\
  \    (check-equal? (candidate 12 15) 14)\n    (check-equal? (candidate 13 12) -1)\n\
  \    (check-equal? (candidate 33 12354) 12354)\n    (check-equal? (candidate 5234\
  \ 5233) -1)\n    (check-equal? (candidate 6 29) 28)\n    (check-equal? (candidate\
  \ 27 10) -1)\n    (check-equal? (candidate 7 7) -1)\n    (check-equal? (candidate\
  \ 546 546) 546)\n))\n\n(test-humaneval)"
completions: ["  (cond [(> x y) -1]\n        [(even? x) x]\n        [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (< x y)\n    \
    \      y\n          x)\n      (if (even? x)\n          x\n          (if (even?\
    \ y)\n              y\n              -1))))\n\n", "  (cond ((< x y) (choose_num2\
    \ x y))\n        ((= x y) (choose_num2 x y))\n        ((> x y) -1)))", "  (define\
    \ (even? n) (= (remainder n 2) 0))\n  (cond ((and (even? x) (even? y))\n     \
    \    (cond ((<= x y) x)\n               (else y)))\n        ((and (even? x) (not\
    \ (even? y))) x)\n        ((and (not (even? x)) (even? y)) y)\n        (else -1)))\n",
  "  ;; @TODO: Implement this!\n  )\n", "  (if (= x y)\n      (if (even? x)\n    \
    \      x\n          -1)\n      (if (even? x)\n          (if (even? y)\n      \
    \        (max x y)\n              (choose_num (add1 x) y))\n          (choose_num\
    \ (add1 x) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even?\
    \ x) (choose_num (add1 x) y)]\n    [else (choose_num (add1 x) y)]))\n", "  (if\
    \ (even? x)\n      (if (= x y)\n          x\n          (if (even? (+ x 1))\n \
    \             (choose_num (+ x 1) y)\n              (choose_num (+ x 2) y)))\n\
    \      (if (even? (+ x 1))\n          (choose_num (+ x 1) y)\n          (choose_num\
    \ (+ x 2) y))))\n", "  (cond ((and (even? x) (even? y)) (if (> x y) x y))\n  \
    \      ((and (even? x) (odd? y)) y)\n        ((and (odd? x) (even? y)) y)\n  \
    \      ((and (odd? x) (odd? y)) -1)))", "  (cond\n    [(even? x) x]\n    [(even?\
    \ y) y]\n    [else -1]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n\
    \          -1)\n      (if (even? x)\n          (choose_num (+ x 1) y)\n      \
    \    (choose_num (+ x 1) y))))\n", "  (if (> x y)\n      -1\n      (if (even?\
    \ x)\n          x\n          (choose_num (+ x 1) y))))\n", "  (cond\n    [(equal?\
    \ (modulo x 2) 0) x]\n    [(< x y) (choose_num (+ x 1) y)]\n    [else -1]))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if\
    \ (= x y)\n              x\n              (if (= x (- y 1))\n                \
    \  -1\n                  y)))\n      (if (even? x)\n          (if (= x (- y 1))\n\
    \              -1\n              y)\n          (if (even? y)\n              x\n\
    \              -1))))\n", "  (if (= x y)\n      (if (even? x)\n          x\n \
    \         -1)\n      (if (even? x)\n          (if (even? y)\n              (max\
    \ x y)\n              (if (even? (- y 1))\n                  (- y 1)\n       \
    \           (choose_num x (- y 1))))\n          (if (even? (+ x 1))\n        \
    \      (+ x 1)\n              (choose_num (+ x 1) y)))))\n", "  (if (= x y)\n\
    \      (if (even? x)\n          x\n          -1)\n      (if (even? x)\n      \
    \    (if (even? y)\n              (max x y)\n              (choose_num (+ x 1)\
    \ y))\n          (choose_num (+ x 1) y))))\n", "  (cond [(= x y) x]\n        [(and\
    \ (<= x y)\n              (even? y)) (choose_num x (- y 1))]\n        [(and (<=\
    \ x y)\n              (odd? y)) (choose_num x (- y 2))]\n        [else -1]))\n\
    </code>\nAnd here's my test script.\n<code>#lang racket\n", "  (cond [(> x y)\
    \ -1]\n        [(and (even? x) (even? y)) (if (> x y) x y)]\n        [(even? x)\
    \ x]\n        [(even? y) y]\n        [else -1]))\n```\n\n```racket\n#lang racket\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? y) y]\n    [else (choose_num\
    \ x (- y 1))]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? x)\n          (if (even? y)\n              (if (> x\
    \ y)\n                  x\n                  y)\n              (choose_num (+\
    \ x 1) y))\n          (choose_num (+ x 1) y))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
