name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n\
  ;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime\
  \ 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) #f]\n    [(= n 2) #t]\n    [(even? n) #f]\n \
    \   [else (for/and ([factor (in-range 3 (+ 1 (sqrt n)) 2)])\n                (not\
    \ (= 0 (modulo n factor))))]))\n", "  (or (= n 2) (= n 3)\n      (and (< n 2)\
    \ (= n 1)\n           (and (> n 3) (= (% n 2) 1)\n                (and (> n 5)\
    \ (= (% n 3) 1)\n                     (and (> n 7) (= (% n 5) 1)\n           \
    \               (and (> n 11) (= (% n 7) 1)\n                               (and\
    \ (> n 13) (= (% n 11) 1)\n                                    (and (> n 17) (=\
    \ (% n 13) 1)\n                                         (and (> n 19) (= (% n\
    \ 17) 1)\n                                              (and (> n 23) (= (% n\
    \ 19) 1)\n                                                   (and (> n 29) (=\
    \ (% n 23) 1)\n                                                        (and (>\
    \ n 31) (= (% n 29) 1)\n                                                     \
    \        (and (> n 37) (= (% n 31) 1)\n                                      \
    \                            (and (> n 41) (= (% n 37) 1)\n                  \
    \                                                     (and (> n 43) (= (% n 41)\
    \ 1)\n                                                                       \
    \     (and (> n 47) (= (% n 43) 1)\n                                         \
    \                                        (and (> n 53) (= (% n 47) 1)\n      \
    \                                                                            \
    \    (and (> n 59) (= (% n 53) 1)\n                                          \
    \                                                 (and (> n 61) (= (% n 59) 1)\n\
    \                                                                            \
    \                    (and (> n 67) (= (% n 61) 1)\n                          \
    \                                                                           (and\
    \ (> n 71) (= (% n 67) 1)\n                                                  \
    \                                                        (and (> n 73) (= (% n\
    \ 71) 1)\n                                                                   \
    \                                            (and (> n 79) (= (% n 73) 1)\n  \
    \                                                                            \
    \                                      (and (> n 83) (= (% n 79) 1)\n        \
    \                                                                            \
    \                                     (and (> n 89) (= (% n 83) 1)\n         \
    \                                                                            \
    \                                         (and (> n 97) (= (% n 89) 1)\n     \
    \                                                                            \
    \                                                  (and (> n 101) (= (% n 97)\
    \ 1)\n                                                                       \
    \                                                                 (and (> n 103)\
    \ (= (% n 101) 1)\n                                                          \
    \                                      ", "  (define (prime? n i)\n    (if (=\
    \ n i)\n        #t\n        (if (= 0 (modulo n i))\n            #f\n         \
    \   (prime? n (+ i 1)))))\n  (prime? n 2))\n", "  (and (> n 1)\n       (not (or\
    \ (= (remainder n 2) 0)\n                (= (remainder n 3) 0)\n             \
    \   (= (remainder n 5) 0)\n                (= (remainder n 7) 0)\n           \
    \     (= (remainder n 11) 0)\n                (= (remainder n 13) 0)\n       \
    \         (= (remainder n 17) 0)\n                (= (remainder n 19) 0)\n   \
    \             (= (remainder n 23) 0)\n                (= (remainder n 29) 0)\n\
    \                (= (remainder n 31) 0)\n                (= (remainder n 37) 0)\n\
    \                (= (remainder n 41) 0)\n                (= (remainder n 43) 0)\n\
    \                (= (remainder n 47) 0)\n                (= (remainder n 53) 0)\n\
    \                (= (remainder n 59) 0)\n                (= (remainder n 61) 0)\n\
    \                (= (remainder n 67) 0)\n                (= (remainder n 71) 0)\n\
    \                (= (remainder n 73) 0)\n                (= (remainder n 79) 0)\n\
    \                (= (remainder n 83) 0)\n                (= (remainder n 89) 0)\n\
    \                (= (remainder n 97) 0)\n                (= (remainder n 101)\
    \ 0)\n                (= (remainder n 103) 0)\n                (= (remainder n\
    \ 107) 0)\n                (= (remainder n 109) 0)\n                (= (remainder\
    \ n 113) 0)\n                (= (remainder n 127) 0)\n                (= (remainder\
    \ n 131) 0)\n                (= (remainder n 137) 0)\n                (= (remainder\
    \ n 139) 0)\n                (= (remainder n 149) 0)\n                (= (remainder\
    \ n 151) 0)\n                (= (remainder n 157) 0)\n                (= (remainder\
    \ n 163) 0)\n                (= (remainder n 167) 0)\n                (= (remainder\
    \ n 173) 0)\n                (= (remainder n 179) 0)\n                (= (remainder\
    \ n", "  (define (iter p)\n    (if (= p n)\n        #t\n        (if (= 0 (modulo\
    \ n p))\n            #f\n            (iter (+ p 1)))))\n  (iter 2))\n", "  (if\
    \ (= n 1)\n      #f\n      (if (= n 2)\n          #t\n          (if (even? n)\n\
    \              #f\n              (let loop ((i 3))\n                (if (= i (*\
    \ i i))\n                    #t\n                    (if (= (remainder n i) 0)\n\
    \                        #f\n                        (loop (+ i 2)))))))))\n",
  "  (define (prime? n i)\n    (if (> (* i i) n) #t\n        (if (zero? (modulo n\
    \ i)) #f\n            (prime? n (+ i 1)))))\n  (if (zero? n) #f\n      (prime?\
    \ n 2)))\n", "  (cond ((= n 1) #f)\n        ((= n 2) #t)\n        ((= (remainder\
    \ n 2) 0) #f)\n        (else\n         (let loop ((divisor 3))\n           (cond\
    \ ((= (remainder n divisor) 0) #f)\n                 ((= (remainder (+ divisor\
    \ 2) 6) 0) (loop (+ divisor 2)))\n                 ((= (remainder (- divisor 2)\
    \ 6) 0) (loop (- divisor 2)))\n                 (else #t))))))\n", "  (define\
    \ (helper i)\n    (if (= n i)\n        #t\n        (if (= (remainder n i) 0)\n\
    \            #f\n            (helper (+ i 1)))))\n  (if (<= n 1)\n      #f\n \
    \     (helper 2)))\n", "  (define (divides-by-rec i)\n    (if (= (modulo n i)\
    \ 0)\n        #t\n        (if (> i (/ n 2))\n            #f\n            (divides-by-rec\
    \ (+ i 1)))))\n  (if (= n 1)\n      #f\n      (if (= n 2)\n          #t\n    \
    \      (if (= n 3)\n              #t\n              (if (= n 5)\n            \
    \      #t\n                  (if (= n 7)\n                      #t\n         \
    \             (if (= n 11)\n                          #t\n                   \
    \       (if (= n 13)\n                              #t\n                     \
    \         (if (= n 17)\n                                  #t\n               \
    \                   (if (= n 19)\n                                      #t\n \
    \                                     (if (= n 23)\n                         \
    \                 #t\n                                          (if (= n 29)\n\
    \                                              #t\n                          \
    \                    (if (= n 31)\n                                          \
    \        #t\n                                                  (if (= n 37)\n\
    \                                                      #t\n                  \
    \                                    (if (= n 41)\n                          \
    \                                #t\n                                        \
    \                  (if (= n 43)\n                                            \
    \                  #t\n                                                      \
    \        (if (= n 47)\n                                                      \
    \            #t\n                                                            \
    \      (if (= n 53)\n                                                        \
    \              #t\n                                                          \
    \            (if (= n 59)\n                                                  \
    \                        #t\n                                                \
    \                          (if (= n 61)\n                                    \
    \                                          #t\n                              \
    \                                                (if (= n 67)\n              \
    \                                                                    #t\n    \
    \                                                                            \
    \  (if (= n 71)\n                                                            \
    \                          #t\n                                              \
    \                                        (if (= n 73)\n                      \
    \                                                                    #t\n    \
    \                                                                            \
    \          (if (= n 79)\n                                                    \
    \                                          #t\n                              \
    \                                                                (if (= n 83)\n\
    \                                                                            \
    \                      #t\n                                                  \
    \                                                (if (= n 89)\n              \
    \                                                                            \
    \            #t\n                                                            \
    \                                          (if (= n 97)\n                    \
    \                                                                            \
    \          #t\n                                                              \
    \                                            (if (= n 101)\n                ",
  "  (if (and (positive? n) (> n 1))\n      (is_prime-helper n 2)\n      #f))\n",
  "  (and (> n 1)\n       (not (null? (keep (lambda (x) (not (zero? (modulo n x))))\n\
    \                         (range 2 n))))))\n", "  (cond\n    [(zero? n) false]\n\
    \    [(zero? (remainder n 2)) false]\n    [else\n     (cond\n       [(zero? (remainder\
    \ n 3)) false]\n       [else\n        (let loop ((i 5))\n          (if (> (* i\
    \ i) n)\n              true\n              (if (or (zero? (remainder n i))\n \
    \                     (zero? (remainder n (+ i 2))))\n                  false\n\
    \                  (loop (+ i 6)))))])]))\n", "  (if (= n 1) #f \n      (is_prime_helper\
    \ n 2)))\n", "  (if (= n 1) #f\n      (not (any (curryr < n) (range 2 n)))))\n",
  "  (if (< n 2)\n      #f\n      (if (for/and ([x (in-range 2 n)])\n            \
    \    (not (= (remainder n x) 0)))\n          #t\n          #f)))\n", "  (cond\n\
    \    [(< n 2) #f]\n    [(= n 2) #t]\n    [(even? n) #f]\n    [else\n     (let\
    \ loop ([i 3])\n       (cond\n         [(>= i n) #t]\n         [(= (remainder\
    \ n i) 0) #f]\n         [else (loop (+ i 2))]))]))\n", "  (is_prime-helper n 2))\n",
  "  (if (= n 2)\n      #t\n      (if (even? n)\n          #f\n          (let loop\
    \ ((k 3))\n            (if (= n k)\n                #t\n                (if (integer?\
    \ (/ n k))\n                    #f\n                    (loop (+ k 2))))))))\n",
  "  (if (= n 1)\n      #f\n      (let ((upper-bound (quotient n 2)))\n        (let\
    \ loop ((i 2))\n          (if (<= i upper-bound)\n              (if (= (remainder\
    \ n i) 0)\n                  #f\n                  (loop (+ i 1)))\n         \
    \     #t)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
