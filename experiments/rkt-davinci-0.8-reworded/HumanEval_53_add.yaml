name: HumanEval_53_add
language: rkt
prompt: "#lang racket\n\n;; Add two numbers x and y\n;; >>> (add 2 3)\n;; 5\n;; >>>\
  \ (add 5 7)\n;; 12\n(define (add x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
  \    (check-equal? (candidate 0 1) 1)\n    (check-equal? (candidate 1 0) 1)\n  \
  \  (check-equal? (candidate 2 3) 5)\n    (check-equal? (candidate 5 7) 12)\n   \
  \ (check-equal? (candidate 7 5) 12)\n))\n\n(test-humaneval)"
completions: ["  (let ((sum (+ x y)))\n    sum))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n```\n\n```scheme\n#lang racket\n", "  (+ x y))\n",
  "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n```\n\nAnd here's how I test it, using\
    \ the \"test\" (i.e. Racket) module that comes with\nRacket:\n\n```racket\n#lang\
    \ racket\n", "  (+ x y))\n", "    (cond\n        [(and (number? x) (number? y))\
    \ (+ x y)]\n        [else (error 'add \"both inputs must be numbers\")]))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (* (+ x y) (+\
    \ x y)))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", " \
    \ (+ x y))\n```\n\n### Factorial\n\nReturns the factorial of a number x\n\n- Input:\
    \ A positive integer `x`\n- Output: The factorial of `x`\n\n```racket\n#lang racket\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n```\n\
    \n### Testing\n\n```racket\n#lang racket\n", "  (+ x y))\n", "    (+ x y))\n",
  "    (+ x y))\n", "  (+ x y))\n```\n##### 2.2.2\n\n```racket", "  (+ x y))\n", " \
    \ (+ x y))\n```\n\n```txt\n$ cat functions.scm\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (displayln (string-append \"x = \" (number->string x)))\n  (displayln\
    \ (string-append \"y = \" (number->string y)))\n  (+ x y))\n", "  (+ x y))\n",
  "    (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (define (add-iter\
    \ x y)\n    (if (= y 0)\n        x\n        (add-iter (+ x 1) (- y 1))))\n  (add-iter\
    \ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", " \
    \ (+ x y))\n", "   (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (if (= x 0)\n      y\n      (add (- x 1) (+ y 1))))\n", "  (+ x y))\n", "  (+\
    \ x y))\n", "    (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "   (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (... x y))\n\
    ```\n\n```\n#lang racket\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", " \
    \ (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n",
  "  (let ([x (+ x 2)]\n        [y (+ y 2)])\n    (+ x y)))\n", "  (+ x y))\n", " \
    \ (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  \n  )\n", "  (+ x y))\n", "    (+ x y))\n", " \
    \   (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n```\n\n```\n>>> (string-append \"foo\" \"bar\")\n\"foobar\"\n```\n\n\
    ```\n>>> (string-join '(\"foo\" \"bar\") \" \")\n\"foo bar\"\n```\n\n```\n>>>\
    \ (string-join '(\"foo\" \"bar\") \" \")\n\"foo bar\"\n```\n\n```\n>>> (string-split\
    \ \"foo bar baz\" \" \")\n'(\"foo\" \"bar\" \"baz\")\n```\n\n```\n>>> (string-split\
    \ \"foo bar baz\" \" \")\n'(\"foo\" \"bar\" \"baz\")\n```\n\n```\n>>> (string-join\
    \ (string-split \"foo bar baz\" \" \") \" \")\n\"foo bar baz\"\n```\n\n```\n>>>\
    \ (string-join (string-split \"foo bar baz\" \" \") \" \")\n\"foo bar baz\"\n\
    ```\n\n```\n>>> (string-length \"Hello World\")\n11\n```\n\n```\n>>> (string-length\
    \ \"Hello World\")\n11\n```\n\n```\n>>> (string-length \"Hello World\")\n11\n\
    ```\n\n```\n>>> (string-length \"Hello World\")\n11\n```\n\n```\n>>> (string-length\
    \ \"Hello World\")\n11\n```\n\n```\n>>> (string-length \"Hello World\")\n11\n\
    ```\n\n```\n>>> (string-length \"Hello World\")\n11\n```\n\n```\n>>> (string-length\
    \ \"Hello World\")\n11\n```\n\n```\n>>> (string-length \"Hello World\")\n11\n\
    ```\n\n```\n>>> (string-length \"Hello World\")\n11\n```\n\n```\n>>> (string-length\
    \ \"Hello World\")\n11\n```\n\n```\n>>> (string-length \"Hello World\")\n11\n\
    ```\n\n```\n>>> (string-length \"Hello World\")\n11\n```\n\n```\n>>> (string-length\
    \ \"Hello World\")\n11\n```\n\n```\n>>> (string-length \"Hello World\")\n11\n",
  "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (cond\n   \
    \ [(= x 0) y]\n    [else (add (- x 1) (+ y 1))]))\n", "  (+ x y))\n", "  (+ x\
    \ y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (list-ref (list x y) 1))\n", "  (+\
    \ x y))\n", "  (+ x y))\n", "    (+ x y))\n", "  (+ x y))\n```\n\n```python\n\
    #lang racket\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n```\n\n```scheme\n#lang racket\n",
  "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n```\n\n```racket\n\
    #lang racket\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n",
  "  (+ x y))\n", "   (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "    (+ x y))\n",
  "  (if (= x 0)\n      y\n      (add (- x 1) (+ y 1))))\n", "  (+ x y))\n", "  (+\
    \ x y))\n", "  (if (= y 0)\n      x\n      (add (+ x 1) (- y 1))))\n", "  (+ x\
    \ y))\n```\n\n```c\n#include <stdio.h>\n\n// Add two numbers x and y\n// >>> (add\
    \ 2 3)\n// 5\n// >>> (add 5 7)\n// 12\nint add(int x, int y) {\n  return x + y;\n\
    }\n```\n\n## run\n\n```\n$ atcoder-cli test -f test.cc -c test.c -r test.rkt\n\
    ```\n\n## contribute\n\nWelcome to contribute.", "  (add1 (+ x y)))\n", "  (+\
    \ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", "  (+ x y))\n", " \
    \ (+ x y))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
