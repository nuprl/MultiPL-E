name: HumanEval_51_remove_vowels
language: rkt
prompt: "#lang racket\n\n;; remove_vowels is a function that takes string and returns\
  \ string without vowels.\n;; >>> (remove_vowels \"\")\n;; \"\"\n;; >>> (remove_vowels\
  \ \"abcdef\")\n;; \"bcdf\"\n;; >>> (remove_vowels \"aaaaa\")\n;; \"\"\n;; >>> (remove_vowels\
  \ \"aaBAA\")\n;; \"B\"\n;; >>> (remove_vowels \"zbcd\")\n;; \"zbcd\"\n(define (remove_vowels\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"abcdef\n\
  ghijklm\") \"bcdf\nghjklm\")\n    (check-equal? (candidate \"fedcba\") \"fdcb\"\
  )\n    (check-equal? (candidate \"eeeee\") \"\")\n    (check-equal? (candidate \"\
  acBAA\") \"cB\")\n    (check-equal? (candidate \"EcBOO\") \"cB\")\n    (check-equal?\
  \ (candidate \"ybcd\") \"ybcd\")\n))\n\n(test-humaneval)"
completions: ["  (cond [(string=? text \"\")\n         \"\"]\n        [(string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0))\n         (remove_vowels (substring text\
    \ 1))]\n        [else\n         (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1)))]))\n", "  (cond\n    [(empty? text) text]\n    [(eq? #\\\
    a (car text)) (remove_vowels (cdr text))]\n    [(eq? #\\e (car text)) (remove_vowels\
    \ (cdr text))]\n    [(eq? #\\i (car text)) (remove_vowels (cdr text))]\n    [(eq?\
    \ #\\o (car text)) (remove_vowels (cdr text))]\n    [(eq? #\\u (car text)) (remove_vowels\
    \ (cdr text))]\n    [else (cons (car text) (remove_vowels (cdr text)))]))\n",
  "  (cond [(empty? text)\n         text]\n        [(char-vowel? (first text))\n \
    \        (remove_vowels (rest text))]\n        [else\n         (string-append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (if (empty? text)\n    \
    \  \"\"\n      (let ([letter (substring text 0 1)])\n        (if (vowel? letter)\n\
    \            (remove_vowels (substring text 1))\n            (string-append letter\
    \ (remove_vowels (substring text 1)))))))", "  (local [(define vowels '(a e i\
    \ o u A E I O U))]\n    (cond [(empty? text)\n           text]\n          [(member\
    \ (first text) vowels)\n           (remove_vowels (rest text))]\n          [else\n\
    \           (string-append (list (first text))\n                          (remove_vowels\
    \ (rest text)))])))\n", "  (string-join\n   (filter (\u03BB (c) (not (equal? c\
    \ #\\a)) (not (equal? c #\\e)) (not (equal? c #\\i)) (not (equal? c #\\o)) (not\
    \ (equal? c #\\u)))\n           (string->list text))\n   #\\))\n", "  (if (string=?\
    \ text \"\")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\" (string-upcase\
    \ (string-ref text 0)))\n          (remove_vowels (substring text 1))\n      \
    \    (string-append (string-ref text 0) (remove_vowels (substring text 1))))))\n",
  "  (define vowels \"aeiouAEIOU\")\n  (cond\n    ((equal? text \"\") \"\")\n    ((member\
    \ (string-ref text 0) vowels) (remove_vowels (substring text 1)))\n    (else (string-append\
    \ (string-ref text 0) (remove_vowels (substring text 1))))))\n", "  (cond\n  \
    \  [(string=? text \"\") \"\"]\n    [(regexp-match? #rx\"[aeiouAEIOU]\" text)\
    \ (remove_vowels (substring text 1))]\n    [else (string-append (substring text\
    \ 0 1) (remove_vowels (substring text 1)))]))\n", "  (define vowels (string-&gt;list\
    \ \"aeiouAEIOU\"))\n  (cond\n    [(string=? text \"\") text]\n    [(member (string-ref\
    \ text 0) vowels) (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (substring text 0 1) (remove_vowels (substring text 1)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(string-contains \"aeiou\" (first text)) (remove_vowels (rest text))]\n  \
    \  [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (define (is-vowel?\
    \ char)\n    (equal? (lower-case char)\n            (match (lower-case char)\n\
    \              ['a 'a]\n              ['e 'e]\n              ['i 'i]\n       \
    \       ['o 'o]\n              ['u 'u]\n              [_ #f])))\n  (define (iter\
    \ text)\n    (if (empty? text)\n        \"\"\n        (if (is-vowel? (first text))\n\
    \            (iter (rest text))\n            (string-append (first text) (iter\
    \ (rest text))))))\n  (iter text))\n", "  (cond [(string=? text \"\") \"\"]\n\
    \        [(char-ci=? (string-ref text 0) #\\a) (remove_vowels (substring text\
    \ 1))]\n        [(char-ci=? (string-ref text 0) #\\e) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\i) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\o) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\u) (remove_vowels (substring\
    \ text 1))]\n        [else (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1)))]))\n", "  (cond [(empty? text) \"\"]\n        [(member\
    \ (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n\
    \          (remove_vowels (rest text))]\n        [else (string-append (string\
    \ (first text)) (remove_vowels (rest text)))]))\n", "  (cond [(null? text) \"\"\
    ]\n        [(or (char=? (car text) #\\a)\n             (char=? (car text) #\\\
    e)\n             (char=? (car text) #\\i)\n             (char=? (car text) #\\\
    o)\n             (char=? (car text) #\\u))\n         (remove_vowels (cdr text))]\n\
    \        [else (string-append (string (car text)) (remove_vowels (cdr text)))]))\n",
  "  (let loop ((text text)\n             (result \"\"))\n    (cond ((null? text)\
    \ result)\n          ((eq? (string-upcase (substring text 0 1)) \"A\") (loop (substring\
    \ text 1) result))\n          ((eq? (string-upcase (substring text 0 1)) \"E\"\
    ) (loop (substring text 1) result))\n          ((eq? (string-upcase (substring\
    \ text 0 1)) \"I\") (loop (substring text 1) result))\n          ((eq? (string-upcase\
    \ (substring text 0 1)) \"O\") (loop (substring text 1) result))\n          ((eq?\
    \ (string-upcase (substring text 0 1)) \"U\") (loop (substring text 1) result))\n\
    \          (else (loop (substring text 1) (string-append result (substring text\
    \ 0 1)))))))\n", "  (cond\n    [(empty? text) '()]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (define (remove_vowels_iter current_text)\n    (if (empty?\
    \ current_text)\n        \"\"\n        (if (char-vowel? (first current_text))\n\
    \            (remove_vowels_iter (rest current_text))\n            (string-append\
    \ (string (first current_text)) (remove_vowels_iter (rest current_text))))))\n\
    \  (remove_vowels_iter text))\n", "  (cond\n    [(string=? text \"\") \"\" ]\n\
    \    [(string-contains \"aeiouAEIOU\" (string-ref text 0)) (remove_vowels (substring\
    \ text 1))]\n    [else (string-append (string-ref text 0) (remove_vowels (substring\
    \ text 1)))]))\n```\n\n```racket\n#lang racket\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
