name: HumanEval_51_remove_vowels
language: rkt
prompt: "#lang racket\n\n;; remove_vowels is a function that takes string and returns\
  \ string without vowels.\n;; >>> (remove_vowels \"\")\n;; \"\"\n;; >>> (remove_vowels\
  \ \"abcdef\")\n;; \"bcdf\"\n;; >>> (remove_vowels \"aaaaa\")\n;; \"\"\n;; >>> (remove_vowels\
  \ \"aaBAA\")\n;; \"B\"\n;; >>> (remove_vowels \"zbcd\")\n;; \"zbcd\"\n(define (remove_vowels\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"abcdef\n\
  ghijklm\") \"bcdf\nghjklm\")\n    (check-equal? (candidate \"fedcba\") \"fdcb\"\
  )\n    (check-equal? (candidate \"eeeee\") \"\")\n    (check-equal? (candidate \"\
  acBAA\") \"cB\")\n    (check-equal? (candidate \"EcBOO\") \"cB\")\n    (check-equal?\
  \ (candidate \"ybcd\") \"ybcd\")\n))\n\n(test-humaneval)"
completions: ["  (cond [(string=? text \"\")\n         \"\"]\n        [(string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0))\n         (remove_vowels (substring text\
    \ 1))]\n        [else\n         (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1)))]))\n", "  (cond\n    [(empty? text) text]\n    [(eq? #\\\
    a (car text)) (remove_vowels (cdr text))]\n    [(eq? #\\e (car text)) (remove_vowels\
    \ (cdr text))]\n    [(eq? #\\i (car text)) (remove_vowels (cdr text))]\n    [(eq?\
    \ #\\o (car text)) (remove_vowels (cdr text))]\n    [(eq? #\\u (car text)) (remove_vowels\
    \ (cdr text))]\n    [else (cons (car text) (remove_vowels (cdr text)))]))\n",
  "  (cond [(empty? text)\n         text]\n        [(char-vowel? (first text))\n \
    \        (remove_vowels (rest text))]\n        [else\n         (string-append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (if (empty? text)\n    \
    \  \"\"\n      (let ([letter (substring text 0 1)])\n        (if (vowel? letter)\n\
    \            (remove_vowels (substring text 1))\n            (string-append letter\
    \ (remove_vowels (substring text 1)))))))", "  (local [(define vowels '(a e i\
    \ o u A E I O U))]\n    (cond [(empty? text)\n           text]\n          [(member\
    \ (first text) vowels)\n           (remove_vowels (rest text))]\n          [else\n\
    \           (string-append (list (first text))\n                          (remove_vowels\
    \ (rest text)))])))\n", "  (string-join\n   (filter (\u03BB (c) (not (equal? c\
    \ #\\a)) (not (equal? c #\\e)) (not (equal? c #\\i)) (not (equal? c #\\o)) (not\
    \ (equal? c #\\u)))\n           (string->list text))\n   #\\))\n", "  (if (string=?\
    \ text \"\")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\" (string-upcase\
    \ (string-ref text 0)))\n          (remove_vowels (substring text 1))\n      \
    \    (string-append (string-ref text 0) (remove_vowels (substring text 1))))))\n",
  "  (define vowels \"aeiouAEIOU\")\n  (cond\n    ((equal? text \"\") \"\")\n    ((member\
    \ (string-ref text 0) vowels) (remove_vowels (substring text 1)))\n    (else (string-append\
    \ (string-ref text 0) (remove_vowels (substring text 1))))))\n", "  (cond\n  \
    \  [(string=? text \"\") \"\"]\n    [(regexp-match? #rx\"[aeiouAEIOU]\" text)\
    \ (remove_vowels (substring text 1))]\n    [else (string-append (substring text\
    \ 0 1) (remove_vowels (substring text 1)))]))\n", "  (define vowels (string-&gt;list\
    \ \"aeiouAEIOU\"))\n  (cond\n    [(string=? text \"\") text]\n    [(member (string-ref\
    \ text 0) vowels) (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (substring text 0 1) (remove_vowels (substring text 1)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(string-contains \"aeiou\" (first text)) (remove_vowels (rest text))]\n  \
    \  [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (define (is-vowel?\
    \ char)\n    (equal? (lower-case char)\n            (match (lower-case char)\n\
    \              ['a 'a]\n              ['e 'e]\n              ['i 'i]\n       \
    \       ['o 'o]\n              ['u 'u]\n              [_ #f])))\n  (define (iter\
    \ text)\n    (if (empty? text)\n        \"\"\n        (if (is-vowel? (first text))\n\
    \            (iter (rest text))\n            (string-append (first text) (iter\
    \ (rest text))))))\n  (iter text))\n", "  (cond [(string=? text \"\") \"\"]\n\
    \        [(char-ci=? (string-ref text 0) #\\a) (remove_vowels (substring text\
    \ 1))]\n        [(char-ci=? (string-ref text 0) #\\e) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\i) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\o) (remove_vowels (substring\
    \ text 1))]\n        [(char-ci=? (string-ref text 0) #\\u) (remove_vowels (substring\
    \ text 1))]\n        [else (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1)))]))\n", "  (cond [(empty? text) \"\"]\n        [(member\
    \ (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n\
    \          (remove_vowels (rest text))]\n        [else (string-append (string\
    \ (first text)) (remove_vowels (rest text)))]))\n", "  (cond [(null? text) \"\"\
    ]\n        [(or (char=? (car text) #\\a)\n             (char=? (car text) #\\\
    e)\n             (char=? (car text) #\\i)\n             (char=? (car text) #\\\
    o)\n             (char=? (car text) #\\u))\n         (remove_vowels (cdr text))]\n\
    \        [else (string-append (string (car text)) (remove_vowels (cdr text)))]))\n",
  "  (let loop ((text text)\n             (result \"\"))\n    (cond ((null? text)\
    \ result)\n          ((eq? (string-upcase (substring text 0 1)) \"A\") (loop (substring\
    \ text 1) result))\n          ((eq? (string-upcase (substring text 0 1)) \"E\"\
    ) (loop (substring text 1) result))\n          ((eq? (string-upcase (substring\
    \ text 0 1)) \"I\") (loop (substring text 1) result))\n          ((eq? (string-upcase\
    \ (substring text 0 1)) \"O\") (loop (substring text 1) result))\n          ((eq?\
    \ (string-upcase (substring text 0 1)) \"U\") (loop (substring text 1) result))\n\
    \          (else (loop (substring text 1) (string-append result (substring text\
    \ 0 1)))))))\n", "  (cond\n    [(empty? text) '()]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (define (remove_vowels_iter current_text)\n    (if (empty?\
    \ current_text)\n        \"\"\n        (if (char-vowel? (first current_text))\n\
    \            (remove_vowels_iter (rest current_text))\n            (string-append\
    \ (string (first current_text)) (remove_vowels_iter (rest current_text))))))\n\
    \  (remove_vowels_iter text))\n", "  (cond\n    [(string=? text \"\") \"\" ]\n\
    \    [(string-contains \"aeiouAEIOU\" (string-ref text 0)) (remove_vowels (substring\
    \ text 1))]\n    [else (string-append (string-ref text 0) (remove_vowels (substring\
    \ text 1)))]))\n```\n\n```racket\n#lang racket\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (apply string (filter (lambda (c) (not (vowel? c))) text)))\n",
  "  (if (string=? text \"\")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\"\
    \ (string-ref text 0))\n          (remove_vowels (substring text 1))\n       \
    \   (string-append (string-ref text 0) (remove_vowels (substring text 1))))))\n",
  "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (local [(define vowels \"AEIOUaeiou\")]\n    (define (helper in-text out-text)\n\
    \      (cond [(empty? in-text) (reverse out-text)]\n            [(string-member\
    \ (first in-text) vowels) (helper (rest in-text) out-text)]\n            [else\
    \ (helper (rest in-text) (cons (first in-text) out-text))]))\n    (helper text\
    \ '())))\n```\n\n```racket\n#lang racket\n", "  (cond ((empty? text) text)\n \
    \       ((char-vowel? (first text)) (remove_vowels (rest text)))\n        (else\
    \ (cons (first text) (remove_vowels (rest text))))))\n", "  (cond ((null? text)\
    \ \"\")\n        ((char-vowel? (car text)) (remove_vowels (cdr text)))\n     \
    \   (else (string-append (string (car text)) (remove_vowels (cdr text))))))\n",
  "  (define (char=? a b) (char=? (char-downcase a) (char-downcase b)))\n  (define\
    \ (vowel? ch)\n    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=?\
    \ ch #\\i)\n        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (cond\n      [(string=? text \"\") (string-append result \"\
    \")]\n      [(vowel? (string-ref text 0)) (remove_vowels_iter (substring text\
    \ 1) result)]\n      [else (remove_vowels_iter (substring text 1) (string-append\
    \ result (string (string-ref text 0))))]))\n  (remove_vowels_iter text \"\"))\n",
  "  (remove-every-even? (string->list text)))\n", "  (if (string=? text \"\")\n \
    \     \"\"\n      (if (member (string-upcase (string-ref text 0)) '(\"A\" \"E\"\
    \ \"I\" \"O\" \"U\"))\n          (remove_vowels (substring text 1))\n        \
    \  (string-append (string-ref text 0) (remove_vowels (substring text 1))))))\n",
  "  (define (remove_vowels_iter text)\n    (cond\n      [(empty? text) empty]\n \
    \     [(char-vowel? (first text)) (remove_vowels_iter (rest text))]\n      [else\
    \ (se (first text) (remove_vowels_iter (rest text)))]))\n  (remove_vowels_iter\
    \ text))\n", "  (define (remove text)\n    (cond\n      [(string=? \"\" text)\
    \ \"\" ]\n      [(char-ci=? (string-ref text 0) #\\a) (remove (substring text\
    \ 1))]\n      [(char-ci=? (string-ref text 0) #\\e) (remove (substring text 1))]\n\
    \      [(char-ci=? (string-ref text 0) #\\i) (remove (substring text 1))]\n  \
    \    [(char-ci=? (string-ref text 0) #\\o) (remove (substring text 1))]\n    \
    \  [(char-ci=? (string-ref text 0) #\\u) (remove (substring text 1))]\n      [else\n\
    \        (string-append (string (string-ref text 0)) (remove (substring text 1)))]))\n\
    \  (remove text))\n", "  (define (traverse index)\n    (if (= index (string-length\
    \ text))\n        \"\"\n        (let ([char (string-ref text index)])\n      \
    \    (if (or (char=? char #\\a)\n                  (char=? char #\\e)\n      \
    \            (char=? char #\\i)\n                  (char=? char #\\o)\n      \
    \            (char=? char #\\u))\n              (traverse (+ index 1))\n     \
    \         (string-append (string char) (traverse (+ index 1)))))))\n  (traverse\
    \ 0))\n```\n\n```racket\n#lang racket\n", "  (define vowel?\n    (lambda (c)\n\
    \      (or (equal? (string-downcase c) \"a\")\n          (equal? (string-downcase\
    \ c) \"e\")\n          (equal? (string-downcase c) \"i\")\n          (equal? (string-downcase\
    \ c) \"o\")\n          (equal? (string-downcase c) \"u\"))))\n  (let loop ([lst\
    \ (string->list text)]\n             [res '()])\n    (cond\n      [(empty? lst)\
    \ (list->string (reverse res))]\n      [(vowel? (car lst)) (loop (cdr lst) res)]\n\
    \      [else (loop (cdr lst) (cons (car lst) res))])))\n```\n\n## 5. Using foldr\n\
    \n```racket\n#lang racket\n", "  (cond\n    [(empty? text) \"\"]\n    [(char-vowel?\
    \ (string-ref text 0)) (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (string (string-ref text 0)) (remove_vowels (substring text 1)))]))\n", "  \
    \  (define (remove_vowels_inner result text)\n        (cond [(empty? text) result]\n\
    \              [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\"))\n               (remove_vowels_inner result (rest text))]\n\
    \              [else (remove_vowels_inner (string-append result (string (first\
    \ text))) (rest text))]))\n    (remove_vowels_inner \"\" text))\n", "    (string-join\n\
    \      (list-to-string\n        (filter (lambda (char)\n                  (not\
    \ (or (char=? char #\\a)\n                           (char=? char #\\e)\n    \
    \                       (char=? char #\\i)\n                           (char=?\
    \ char #\\o)\n                           (char=? char #\\u)\n                \
    \           (char=? char #\\A)\n                           (char=? char #\\E)\n\
    \                           (char=? char #\\I)\n                           (char=?\
    \ char #\\O)\n                           (char=? char #\\U))))\n             \
    \   (string->list text)))))\n", "  (define (looks-like-a-vowel char)\n    (regexp-match?\
    \ #rx\"[aouei]\" char))\n  (regexp-replace* #rx\".\" text (\u03BB (char) (if (looks-like-a-vowel\
    \ char) \"\" char))))\n", "  (define (is_vowel? char)\n    (member char '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (remove_vowels_helper\
    \ list)\n    (cond ((null? list) \"\")\n          ((is_vowel? (car list)) (remove_vowels_helper\
    \ (cdr list)))\n          (else (string-append (car list) (remove_vowels_helper\
    \ (cdr list))))))\n  (remove_vowels_helper (string->list text)))\n", "  (define\
    \ (is_vowel? ch)\n    (or (eq? ch #\\a) (eq? ch #\\e) (eq? ch #\\i) (eq? ch #\\\
    o) (eq? ch #\\u)))\n  (string-append (list->string (filter (lambda (char) (not\
    \ (is_vowel? char))) (string->list text)))))\n", "  (define (is_vowel? c)\n  \
    \  (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (filter (lambda (c) (not (is_vowel? c))) text))\n", "  (if (string=? text \"\
    \")\n      \"\"\n      (if (member (string-&gt;list (string-upcase text)) '(\"\
    A\" \"E\" \"I\" \"O\" \"U\"))\n          (remove_vowels (substring text 1))\n\
    \          (string-append (string-&gt;list (string-upcase text)) (remove_vowels\
    \ (substring text 1))))))\n</code>\nI don't know why but all of my tests return\
    \ error.\n<code>&gt; (remove_vowels \"\")\n. . string-upcase: expects argument\
    \ of type &lt;string&gt;; given \"\"\n&gt; (remove_vowels \"abcdef\")\n. . string-upcase:\
    \ expects argument of type &lt;string&gt;; given \"\"\n&gt; (remove_vowels \"\
    aaaaa\")\n. . string-upcase: expects argument of type &lt;string&gt;; given \"\
    \"\n&gt; (remove_vowels \"aaBAA\")\n. . string-upcase: expects argument of type\
    \ &lt;string&gt;; given \"\"\n&gt; (remove_vowels \"zbcd\")\n. . string-upcase:\
    \ expects argument of type &lt;string&gt;; given \"\"\n</code>\nHere is the updated\
    \ version with <code>string-upcase</code> fixed.\n<code>;; remove_vowels is a\
    \ function that takes string and returns string without vowels.", "  (cond\n \
    \   [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (foldl (lambda (char acc) (if (char-ci=?\
    \ char #\\a) acc (string-append acc (string char)))) \"\" text))\n", "  (local\
    \ [(define (helper vowels text)\n            (cond [(empty? text) empty]\n   \
    \               [(empty? vowels) text]\n                  [(member? (first text)\
    \ vowels) (helper vowels (rest text))]\n                  [else (cons (first text)\
    \ (helper vowels (rest text)))]))]\n    (helper '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\") text)))\n", "  (cond [(empty? text) empty]\n\
    \        [(char-vowel? (first text)) (remove_vowels (rest text))]\n        [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"\
    [aeiouAEIOU]\" text \"\"))\n", "  (local [(define (is_vowel? char)\n         \
    \   (or (char=? char #\\a)\n                (char=? char #\\e)\n             \
    \   (char=? char #\\i)\n                (char=? char #\\o)\n                (char=?\
    \ char #\\u)))\n          (define (remove-helper text-list)\n            (cond\
    \ [(or (empty? text-list) (string=? \"\" text-list)) '()]\n                  [(is_vowel?\
    \ (car text-list)) (remove-helper (cdr text-list))]\n                  [else (cons\
    \ (car text-list) (remove-helper (cdr text-list)))]))]\n    (apply string (remove-helper\
    \ (string->list text)))))\n", "  (cond\n    [(string=? text \"\")\n     text]\n\
    \    [(string-contains \"aeiouAEIOU\" (string-take text 1))\n     (remove_vowels\
    \ (string-drop text 1))]\n    [else\n     (string-append (string-take text 1)\
    \ (remove_vowels (string-drop text 1)))]))\n\n", "  (cond\n    [(null? text) \"\
    \"]\n    [(vowel? (car text)) (remove_vowels (cdr text))]\n    [else (string-append\
    \ (string (car text)) (remove_vowels (cdr text)))]))\n", "  (string-filter (\u03BB\
    \ (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) text))\n", "  (regexp-replace*\
    \ #rx\"a|e|i|o|u|A|E|I|O|U\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (string-member?\
    \ (string-upcase text) \"AEIOU\")\n          (remove_vowels (substring text 1))\n\
    \          (string-append (substring text 0 1) (remove_vowels (substring text\
    \ 1))))))\n", "  (string-append\n   (regexp-match* #rx\"[^aeiou]+\" text)))\n",
  "  (string-&gt;list (string-append text)))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(member (first text) '(\"a\" \"A\" \"e\" \"E\" \"i\" \"I\" \"o\" \"O\" \"\
    u\" \"U\"))\n     (remove_vowels (rest text))]\n    [else (append (list (first\
    \ text)) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"\" text))\n",
  "  (define (vowel? char)\n    (string-contains \"aeiouAEIOU\" char))\n  (string-filter\
    \ (lambda (char) (not (vowel? char))) text))\n", "  (define (is_vowel? ch)\n \
    \   (member ch '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (remove is_vowel? (string->list text)))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) \"\"]\n    [(char-alphabetic? (first\
    \ text))\n     (cond\n       [(char-ci=? (first text) #\\a) (remove_vowels (rest\
    \ text))]\n       [(char-ci=? (first text) #\\e) (remove_vowels (rest text))]\n\
    \       [(char-ci=? (first text) #\\i) (remove_vowels (rest text))]\n       [(char-ci=?\
    \ (first text) #\\o) (remove_vowels (rest text))]\n       [(char-ci=? (first text)\
    \ #\\u) (remove_vowels (rest text))]\n       [else (string-append (string (first\
    \ text)) (remove_vowels (rest text)))])]\n    [else (string-append (string (first\
    \ text)) (remove_vowels (rest text)))]))\n", "  (define (vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (answer text)\n    (cond\n      [(empty? text) empty]\n      [(vowel? (first\
    \ text)) (answer (rest text))]\n      [else (cons (first text) (answer (rest text)))]))\n\
    \  (answer text))\n", "  (define (helper text result)\n    (cond\n      [(empty?\
    \ text) result]\n      [(member (first text) '#(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")) (helper (rest text) result)]\n      [else (helper\
    \ (rest text) (string-append result (string (first text))))]))\n  (helper text\
    \ \"\"))\n", "  (filter (lambda (x) (not (equal? x #\\a)) (not (equal? x #\\e))\
    \ (not (equal? x #\\i)) (not (equal? x #\\o)) (not (equal? x #\\u))) text))\n",
  '  (regexp-replace* #rx"[aeiou]" text ""))', "  (string-append \n   (regexp-match*\
    \ #rx\"a\" text)\n   (regexp-match* #rx\"b\" text)\n   (regexp-match* #rx\"c\"\
    \ text)\n   (regexp-match* #rx\"d\" text)\n   (regexp-match* #rx\"e\" text)\n\
    \   (regexp-match* #rx\"f\" text)\n   (regexp-match* #rx\"g\" text)\n   (regexp-match*\
    \ #rx\"h\" text)\n   (regexp-match* #rx\"i\" text)\n   (regexp-match* #rx\"j\"\
    \ text)\n   (regexp-match* #rx\"k\" text)\n   (regexp-match* #rx\"l\" text)\n\
    \   (regexp-match* #rx\"m\" text)\n   (regexp-match* #rx\"n\" text)\n   (regexp-match*\
    \ #rx\"o\" text)\n   (regexp-match* #rx\"p\" text)\n   (regexp-match* #rx\"q\"\
    \ text)\n   (regexp-match* #rx\"r\" text)\n   (regexp-match* #rx\"s\" text)\n\
    \   (regexp-match* #rx\"t\" text)\n   (regexp-match* #rx\"u\" text)\n   (regexp-match*\
    \ #rx\"v\" text)\n   (regexp-match* #rx\"w\" text)\n   (regexp-match* #rx\"x\"\
    \ text)\n   (regexp-match* #rx\"y\" text)\n   (regexp-match* #rx\"z\" text)))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (remove_vowels-helper text acc)\n    (cond\
    \ ((string=? text \"\") acc)\n          ((is_vowel? (string-ref text 0)) (remove_vowels-helper\
    \ (substring text 1) acc))\n          (else (remove_vowels-helper (substring text\
    \ 1) (string-append acc (string-ref text 0))))))\n  (remove_vowels-helper text\
    \ \"\"))\n```\n\n#### \u0417\u0430\u0434\u0430\u0447\u0430 4.\n\u041D\u0430\u043F\
    \u0438\u0448\u0435\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044F `(prog-indent\
    \ ls)`, \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\u0435\u043C\u0430 \u0441\
    \u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0441\u0438\u043C\u0432\u043E\u043B\
    \u0438 \u0438 \u0432\u0440\u044A\u0449\u0430 \u0441\u043F\u0438\u0441\u044A\u043A\
    \ \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\u0438\u0441\u043B\u0430, \u043A\
    \u043E\u0438\u0442\u043E \u043F\u043E\u043A\u0430\u0437\u0432\u0430\u0442 \u043E\
    \u0442\u0441\u0442\u044A\u043F\u0430 \u043D\u0430 \u043F\u0440\u043E\u0433\u0440\
    \u0430\u043C\u043D\u0438\u044F \u0435\u0437\u0438\u043A, \u043A\u043E\u0439\u0442\
    \u043E \u0438\u0437\u043F\u043E\u043B\u0437\u0432\u0430 \u043E\u0442\u0441\u0442\
    \u044A\u043F\u0430 \u043F\u0440\u0438 \u0437\u0430\u043F\u0438\u0441 \u043D\u0430\
    \ \u0431\u043B\u043E\u043A\u043E\u0432\u0435 \u043A\u043E\u0434. \u0417\u0430\
    \ \u043E\u0442\u0441\u0442\u044A\u043F \u0435 \u0434\u043E\u0441\u0442\u0430\u0442\
    \u044A\u0447\u043D\u043E \u0434\u0430 \u0438\u043C\u0430 \u0435\u0434\u0438\u043D\
    \ \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B. \u0411\u043B\u043E\u043A\u043E\
    \u0432\u0435 \u043A\u043E\u0434 \u0441\u0435 \u043E\u0431\u0440\u0430\u0437\u0443\
    \u0432\u0430\u0442 \u043E\u0442 \u0441\u043A\u043E\u0431\u0438. \u0422\u043E\u0432\
    \u0430 \u0435 \u0438\u0437\u043F\u0438\u0441\u0430\u043D\u043E \u043A\u0430\u0442\
    \u043E `{...}`. \u0411\u043B\u043E\u043A\u044A\u0442 \u0432 \u0441\u043A\u043E\
    \u0431\u0438\u0442\u0435 \u043C", "  (define (remove_vowels_iter text iter)\n\
    \    (cond\n      [(empty? text) iter]\n      [(vowel? (first text)) (remove_vowels_iter\
    \ (rest text) iter)]\n      [else (remove_vowels_iter (rest text) (append (list\
    \ (first text)) iter))]))\n  (remove_vowels_iter text '()))\n", "  (remove_vowels_with-unvoiced\
    \ (string->list text)))\n", "  (remove-if (lambda (x) (vowel? x)) text))\n", " \
    \ (define vowels (list #\\a #\\e #\\i #\\o #\\u))\n  (define (remove-vowels-iter\
    \ original result)\n    (cond\n      [(empty? original) result]\n      [(char-set=?\
    \ (list (first original)) vowels) (remove-vowels-iter (rest original) result)]\n\
    \      [else (remove-vowels-iter (rest original) (append result (list (first original))))]))\n\
    \  (remove-vowels-iter text empty))\n", "  (string-map\n   (lambda (letter)\n\
    \     (if (vowel? letter)\n         #\\space\n         letter))\n   text))", " \
    \ (if (string=? text \"\")\n      \"\"\n      (if (string-contains-ci \"a\" text)\n\
    \          (remove_vowels (string-replace \"a\" \"\" text))\n          (if (string-contains-ci\
    \ \"e\" text)\n              (remove_vowels (string-replace \"e\" \"\" text))\n\
    \              (if (string-contains-ci \"i\" text)\n                  (remove_vowels\
    \ (string-replace \"i\" \"\" text))\n                  (if (string-contains-ci\
    \ \"o\" text)\n                      (remove_vowels (string-replace \"o\" \"\"\
    \ text))\n                      (if (string-contains-ci \"u\" text)\n        \
    \                  (remove_vowels (string-replace \"u\" \"\" text))\n        \
    \                  text)))))))\n", "  (string-join\n   (for/list ([char (in-string\
    \ text)])\n     (if (not (string-contains \"aeiouAEIOU\" char))\n         char\n\
    \         \"\"))))\n", "  (define (is_vowel ch)\n    (or (string=? ch \"a\")\n\
    \        (string=? ch \"e\")\n        (string=? ch \"i\")\n        (string=? ch\
    \ \"o\")\n        (string=? ch \"u\")))\n  (define (is_consonant ch)\n    (not\
    \ (is_vowel ch)))\n  (define (remove_vowels-iter text result)\n    (cond ((empty?\
    \ text) (reverse result))\n          ((is_vowel (first text)) (remove_vowels-iter\
    \ (rest text) result))\n          ((is_consonant (first text)) (remove_vowels-iter\
    \ (rest text) (cons (first text) result)))))\n  (remove_vowels-iter text empty))\n",
  "  (cond\n    [(string=? text \"\") \"\" ]\n    [(member (string-ref text 0) '(#\\\
    a #\\e #\\i #\\o #\\u)) (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (string (string-ref text 0)) (remove_vowels (substring text 1)))]))\n", "  (cond\n\
    \    [(string=? text \"\") \"\"]\n    [(vowel? (string-ref text 0)) (remove_vowels\
    \ (substring text 1))]\n    [else (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1)))]))\n", "    (cond [(empty? text) \"\"]\n          [(or\
    \ (char=? (first text) #\\a)\n               (char=? (first text) #\\e)\n    \
    \           (char=? (first text) #\\i)\n               (char=? (first text) #\\\
    o)\n               (char=? (first text) #\\u))\n           (remove_vowels (rest\
    \ text))]\n          [else (string-append (string (first text)) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (letrec ([chars (string->list text)]\n           [remove (lambda (lst)\n    \
    \                 (cond [(empty? lst) empty]\n                           [(member\
    \ (first lst) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n\
    \                            (remove (rest lst))]\n                          \
    \ [else (cons (first lst) (remove (rest lst)))]))])\n    (list->string (remove\
    \ chars))))\n", "  (define (is_vowel? letter)\n    (or (string=? letter \"a\"\
    )\n        (string=? letter \"e\")\n        (string=? letter \"i\")\n        (string=?\
    \ letter \"o\")\n        (string=? letter \"u\")))\n  (define (is_not_vowel? letter)\n\
    \    (not (is_vowel? letter)))\n  (define (remove_vowels_helper text)\n    (if\
    \ (null? text)\n        \"\"\n        (if (is_not_vowel? (string-ref text 0))\n\
    \            (string-append (string (string-ref text 0)) (remove_vowels_helper\
    \ (substring text 1)))\n            (remove_vowels_helper (substring text 1)))))\n\
    \  (remove_vowels_helper text))\n", "  (cond [(empty? text) \"\"]\n        [(member\
    \ (first text) '(#\\a #\\e #\\i #\\o #\\u))\n         (remove_vowels (rest text))]\n\
    \        [else (string-append (string (first text))\n                        \
    \     (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (if (string=? text \"\") text (remove_vowels_helper text)))\n",
  "  (cond\n    [(string=? text \"\") \"\"]\n    [(string-contains \"aeiou\" (string-ref\
    \ text 0)) (remove_vowels (substring text 1))]\n    [else (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1)))]))\n", "  (letrec ([remove_vowels_iter\
    \ (lambda (text result)\n                                 (if (empty? text)\n\
    \                                     result\n                               \
    \      (remove_vowels_iter (rest text)\n                                     \
    \                    (if (vowel? (first text))\n                             \
    \                                result\n                                    \
    \                         (append result (list (first text)))))))])\n    (remove_vowels_iter\
    \ text '())))\n", "  (cond\n    [(empty? text) \"\"]\n    [(eq? (string-upcase\
    \ (string-ref text 0)) (string-ref text 0))\n     (string-append (string (string-ref\
    \ text 0)) (remove_vowels (substring text 1)))]\n    [else (remove_vowels (substring\
    \ text 1))]))\n", "  (cond\n    [(empty? text) text]\n    [(member (first text)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n```\n\n```scheme\n#lang racket\n", " \
    \ (define (remove_vowels_iter text result)\n    (cond [(empty? text) result]\n\
    \          [(char-vowel? (first text)) (remove_vowels_iter (rest text) result)]\n\
    \          [else (remove_vowels_iter (rest text) (append result (list (first text))))]))\n\
    \  (remove_vowels_iter text \"\"))\n", "  (let ((vowels (string-&gt;list \"aeiouAEIOU\"\
    )))\n    (for/list ([c (in-list (string-&gt;list text))]\n               #:when\
    \ (not (member c vowels)))\n      (list-&gt;string c))))\n", "  (define (remove_vowels_iter\
    \ text acc)\n    (cond\n      [(empty? text) (reverse acc)]\n      [(or (char=?\
    \ (first text) #\\a)\n           (char=? (first text) #\\e)\n           (char=?\
    \ (first text) #\\i)\n           (char=? (first text) #\\o)\n           (char=?\
    \ (first text) #\\u))\n       (remove_vowels_iter (rest text) acc)]\n      [else\
    \ (remove_vowels_iter (rest text) (cons (first text) acc))]))\n  (remove_vowels_iter\
    \ text '()))\n", "  (define vowels \"aeiou\")\n  (cond\n    [(empty? text) empty]\n\
    \    [(string-contains vowels (first text)) (remove_vowels (rest text))]\n   \
    \ [else (string-append (first text) (remove_vowels (rest text)))]))\n", "  (define\
    \ (find-vowel? text i)\n    (cond ((empty? text) #f)\n          ((equal? (substring\
    \ text i (+ i 1)) \"a\") #t)\n          ((equal? (substring text i (+ i 1)) \"\
    e\") #t)\n          ((equal? (substring text i (+ i 1)) \"i\") #t)\n         \
    \ ((equal? (substring text i (+ i 1)) \"o\") #t)\n          ((equal? (substring\
    \ text i (+ i 1)) \"u\") #t)\n          ((equal? (substring text i (+ i 1)) \"\
    A\") #t)\n          ((equal? (substring text i (+ i 1)) \"E\") #t)\n         \
    \ ((equal? (substring text i (+ i 1)) \"I\") #t)\n          ((equal? (substring\
    \ text i (+ i 1)) \"O\") #t)\n          ((equal? (substring text i (+ i 1)) \"\
    U\") #t)\n          (else (find-vowel? text (+ i 1)))))\n  (define (remove-vowels\
    \ text i new-text)\n    (cond ((empty? text) new-text)\n          ((find-vowel?\
    \ text i) (remove-vowels text (+ i 1) new-text))\n          (else (remove-vowels\
    \ text (+ i 1) (string-append new-text (substring text i (+ i 1)))))))\n  (remove-vowels\
    \ text 0 \"\"))\n```\n\n### Problem 3.2.13\n\n```#lang racket\n", "  (define vowels\
    \ \"aeiouAEIOU\")\n  (define (remove_vowels-iter cur-text)\n    (cond [(empty?\
    \ cur-text) \"\"]\n          [(set-contains? vowels (first cur-text)) (remove_vowels-iter\
    \ (rest cur-text))]\n          [else (string-append (first cur-text) (remove_vowels-iter\
    \ (rest cur-text)))]))\n  (remove_vowels-iter text))\n", "  (cond\n    [(empty?\
    \ text) \"\"]\n    [(not(char-vowel? (first text))) (string-append (string (first\
    \ text)) (remove_vowels (rest text)))]\n    [else (remove_vowels (rest text))]))\n",
  "  (define (is-vowel char)\n    (or (char=? char #\\a)\n        (char=? char #\\\
    e)\n        (char=? char #\\i)\n        (char=? char #\\o)\n        (char=? char\
    \ #\\u)))\n  (define (remove-helper text result)\n    (if (null? text)\n     \
    \   result\n        (if (is-vowel (car text))\n            (remove-helper (cdr\
    \ text) result)\n            (remove-helper (cdr text) (string-append result (string\
    \ (car text)))))))\n  (remove-helper text \"\"))\n", "  (cond [(string=? text\
    \ \"\") text]\n        [(member? (string-ref text 0) (list #\\a #\\e #\\i #\\\
    o #\\u)) (remove_vowels (substring text 1))]\n        [else (string-append (string\
    \ (string-ref text 0)) (remove_vowels (substring text 1)))]))\n", "  (string-remove*\
    \ \"aeiou\" (string-downcase text)))\n", "  (local [(define (is-vowel? char)\n\
    \            (or (char=? char #\\a)\n                (char=? char #\\e)\n    \
    \            (char=? char #\\i)\n                (char=? char #\\o)\n        \
    \        (char=? char #\\u)))\n          (define (vowel-filter word)\n       \
    \     (cond [(empty? word)\n                   empty]\n                  [(is-vowel?\
    \ (first word))\n                   (vowel-filter (rest word))]\n            \
    \      [else\n                   (cons (first word)\n                        \
    \ (vowel-filter (rest word)))]))]\n    (string-&gt;list\n     (list-&gt;string\n\
    \      (vowel-filter (string-&gt;list text))))))\n</code>\n", "  (string-remove\
    \ (list \"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\") text))\n\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (define vowels '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))\n  (define (f text)\n    (if\
    \ (empty? text) '()\n      (if (member (first text) vowels) (f (rest text))\n\
    \        (cons (first text) (f (rest text))))))\n  (list->string (f (string->list\
    \ text))))\n", "  (cond\n    [(empty? text)\n     empty]\n    [(char-vowel? (first\
    \ text))\n     (remove_vowels (rest text))]\n    [else\n     (append (list (first\
    \ text))\n             (remove_vowels (rest text)))]))\n", "  (define vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u))\n  (define (remove-vowels text)\n    (cond ((null?\
    \ text) '())\n          ((member (car text) vowels) (remove-vowels (cdr text)))\n\
    \          (else (cons (car text) (remove-vowels (cdr text))))))\n  (list->string\
    \ (remove-vowels (string->list text))))\n", "  (string-join (filter (lambda (ch)\
    \ (not (is_vowel ch))) (string->list text))))\n", "  (string-normalize-spaces\
    \ (string-trim-both (regexp-replace* (regexp #rx\"[aeiou]\") text \"\"))))\n",
  "  (string-join (remove (lambda (x) (or (equal? x #\\a) (equal? x #\\e) (equal?\
    \ x #\\i) (equal? x #\\o) (equal? x #\\u))) (string->list text)) \"\"))\n", " \
    \ (filter (lambda (x) (not (vowel? x))) text))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (if (empty? text)\n      \"\"\n      (if (or (= (char-upcase\
    \ (string-ref text 0)) #\\A)\n              (= (char-upcase (string-ref text 0))\
    \ #\\E)\n              (= (char-upcase (string-ref text 0)) #\\I)\n          \
    \    (= (char-upcase (string-ref text 0)) #\\O)\n              (= (char-upcase\
    \ (string-ref text 0)) #\\U))\n          (remove_vowels (substring text 1))\n\
    \          (string-append (string (string-ref text 0))\n                     \
    \    (remove_vowels (substring text 1))))))\n", "  (local [(define (remove_vowels-helper\
    \ text vowels result)\n            (cond\n              [(empty? text) result]\n\
    \              [(member (first text) vowels) (remove_vowels-helper (rest text)\
    \ vowels result)]\n              [else (remove_vowels-helper (rest text) vowels\
    \ (string-append result (string (first text))))]))]\n    (remove_vowels-helper\
    \ text '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\") \"\")))\n",
  "  (cond\n    [(null? text) '()]\n    [(member (string-upcase (string-take text\
    \ 1)) '(\"A\" \"E\" \"I\" \"O\" \"U\")) (remove_vowels (string-drop text 1))]\n\
    \    [else (cons (string-take text 1) (remove_vowels (string-drop text 1)))]))\n",
  "  (cond\n    [(string=? text \"\") \"\"]\n    [(char-vowel? (string-ref text 0))\
    \ (remove_vowels (substring text 1))]\n    [else (string-append (substring text\
    \ 0 1) (remove_vowels (substring text 1)))]))\n", "  (string-filter (lambda (c)\
    \ (not (is-vowel c))) text))\n", "  (cond\n    [(empty? text) \"\"]\n    [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (string-append (string\
    \ (first text)) (remove_vowels (rest text)))]))\n", "  (cond\n    [(null? text)\
    \ '()]\n    [(vowel? (car text)) (remove_vowels (cdr text))]\n    [else (cons\
    \ (car text) (remove_vowels (cdr text)))]))", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(string=? text \"\")\n     text]\n    [(member\
    \ (string-ref text 0) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\"\
    \ \"U\"))\n     (remove_vowels (substring text 1))]\n    [else\n     (string-append\
    \ (string-ref text 0) (remove_vowels (substring text 1)))]))\n```\n\n## Question\
    \ 3\n```racket\n#lang racket\n", "  (string-join (remove (lambda (ch) (member\
    \ ch '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))) (string->list\
    \ text)) \"\"))\n", "  (string-&gt;list\n   (string-replace text \"a\" \"\")\n\
    \   (string-replace text \"e\" \"\")\n   (string-replace text \"i\" \"\")\n  \
    \ (string-replace text \"o\" \"\")\n   (string-replace text \"u\" \"\")\n   (string-replace\
    \ text \"A\" \"\")\n   (string-replace text \"E\" \"\")\n   (string-replace text\
    \ \"I\" \"\")\n   (string-replace text \"O\" \"\")\n   (string-replace text \"\
    U\" \"\")))\n</code>\nI'm trying to create a function that takes a string, and\
    \ returns a string with vowels removed. For example, \n<code>(remove_vowels \"\
    Hello\")\n</code>\nwould return \n<code>\"Hll\"\n</code>\nI've tried using (string-replace)\
    \ to find and replace, and convert the string to a list. But I think I'm using\
    \ it wrong. I'm very new to racket and programming in general, so I'm not very\
    \ familiar with more advanced functions, like(string-replace).\n\n\nA:\n\nIn your\
    \ code, there's no need to convert the string to a list because <code>string-replace</code>\
    \ already returns a string. A more idiomatic way to write your code would be:\n\
    <code>(define (remove-vowels str)\n  (string-replace* str\n                  \
    \ #rx\"[AEIOUaeiou]\"\n                   \"\"\n                   #:replace-all?\
    \ #t))\n</code>\n<code>#rx\"[AEIOUaeiou]\"</code> is a regular expression that\
    \ matches any character in the string. <code>#:replace-all? #t</code> indicates\
    \ that all matches should be replaced.\n", "  (cond\n    [(equal? \"\" text) \"\
    \" ]\n    [(member (string-head text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\"))\n     (remove_vowels (string-tail text))]\n    [else (string-append\
    \ (string-head text) (remove_vowels (string-tail text)))]))\n", "  (cond\n   \
    \ [(empty? text) empty]\n    [(find_vowel (first text)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n \
    \   [(empty? text) text]\n    [(char-vowel? (first text)) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (cond ((or (string=? \"\" text) (string=? \"aaaaa\" text)) \"\")\n        ((or\
    \ (string=? \"a\" (substring text 0 1)) (string=? \"e\" (substring text 0 1))\
    \ (string=? \"i\" (substring text 0 1)) (string=? \"o\" (substring text 0 1))\
    \ (string=? \"u\" (substring text 0 1))) (remove_vowels (substring text 1)))\n\
    \        (else (string-append (substring text 0 1) (remove_vowels (substring text\
    \ 1))))))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (if (empty?\
    \ text)\n      \"\"\n      (cond\n        [(or (char=? (first text) #\\a)\n  \
    \           (char=? (first text) #\\e)\n             (char=? (first text) #\\\
    i)\n             (char=? (first text) #\\o)\n             (char=? (first text)\
    \ #\\u))\n         (remove_vowels (rest text))]\n        [else\n         (string-append\
    \ (string (first text))\n                        (remove_vowels (rest text)))])))\n\
    </code>\n", "  (cond\n    [(empty? text) text]\n    [(member (first text) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n```\n\n### 11.4-4: Give a recursive algorithm\
    \ for reversing a singly linked list L by using no more than a constant amount\
    \ of additional space, besides that needed for the list itself.\n\nGiven a singly\
    \ linked list, call it L,\n\n```racket", "  (remove_substring (list #\\a #\\e\
    \ #\\i #\\o #\\u) text))\n", '  (regexp-replace* #rx"[aeiou]" text ""))', "  (define\
    \ vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (cond\n    [(string=? text \"\")\n  \
    \   \"\"]\n    [(memq (string-ref text 0) vowels)\n     (remove_vowels (substring\
    \ text 1))]\n    [else\n     (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1)))]))\n\n", "  (cond [(string=? text \"\") \"\"]\n       \
    \ [(string-contains? \"aeiouAEIOU\" (string-ref text 0)) (remove_vowels (substring\
    \ text 1))]\n        [else (string-append (string-ref text 0) (remove_vowels (substring\
    \ text 1)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", " \
    \ (if (empty? text)\n      \"\"\n      (if (member (first text) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n          (remove_vowels\
    \ (rest text))\n          (string-append (first text) (remove_vowels (rest text))))))\n",
  "  (define (remove-vowels-iter text acc index)\n    (if (>= index (string-length\
    \ text))\n        (string-append (reverse acc))\n        (let ((char (string-ref\
    \ text index)))\n          (if (member char '(\"a\" \"e\" \"i\" \"o\" \"u\" \"\
    A\" \"E\" \"I\" \"O\" \"U\"))\n              (remove-vowels-iter text acc (+ index\
    \ 1))\n              (remove-vowels-iter text (cons char acc) (+ index 1))))))\n\
    \  (remove-vowels-iter text '() 0))\n", "  (cond\n    [(empty? text) \"\"\n  \
    \  (or (equal? (first text) \"a\")\n        (equal? (first text) \"e\")\n    \
    \    (equal? (first text) \"i\")\n        (equal? (first text) \"o\")\n      \
    \  (equal? (first text) \"u\"))\n      (remove_vowels (rest text))]\n    [else\
    \ (string-append (first text) (remove_vowels (rest text)))]))\n", "  (cond [(empty?\
    \ text) \"\"]\n        [(or (string=? (substring text 0 1) \"a\")\n          \
    \   (string=? (substring text 0 1) \"e\")\n             (string=? (substring text\
    \ 0 1) \"i\")\n             (string=? (substring text 0 1) \"o\")\n          \
    \   (string=? (substring text 0 1) \"u\"))\n         (remove_vowels (substring\
    \ text 1))]\n        [else (string-append (substring text 0 1) (remove_vowels\
    \ (substring text 1)))]))", "    (cond [(equal? \"\" text) \"\" ]\n          [(string-contains\
    \ \"aeiouAEIOU\" (string-take text 1)) (remove_vowels (string-drop text 1))]\n\
    \          [else (string-append (string-take text 1) (remove_vowels (string-drop\
    \ text 1)))]))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (or (char-ci=?\
    \ (string-ref text 0) #\\a)\n              (char-ci=? (string-ref text 0) #\\\
    e)\n              (char-ci=? (string-ref text 0) #\\i)\n              (char-ci=?\
    \ (string-ref text 0) #\\o)\n              (char-ci=? (string-ref text 0) #\\\
    u))\n          (remove_vowels (substring text 1))\n          (string-append (string\
    \ (string-ref text 0))\n                         (remove_vowels (substring text\
    \ 1))))))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (is_vowel (string-ref\
    \ text 0))\n          (remove_vowels (substring text 1 (string-length text)))\n\
    \          (string-append (string-ref text 0)\n                         (remove_vowels\
    \ (substring text 1 (string-length text)))))))\n", "  (cond [(string=? text \"\
    \") \"\"]\n        [(char-set-contains? #\"aeiou\" (string-ref text 0)) (remove_vowels\
    \ (substring text 1))]\n        [else (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1)))]))\n```\n\n```\n#lang racket\n", "  (remove-vowels text\
    \ #f))\n", "  (cond\n    [(empty? text) (list)]\n    [(vowel? (first text)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (define (is_vowel? c)\n    (let ([c (string-upcase c)])\n      (member c '(\"\
    A\" \"E\" \"I\" \"O\" \"U\"))))\n  (define (fold_str str accum)\n    (if (empty?\
    \ str)\n        accum\n        (let ([c (first str)])\n          (if (is_vowel?\
    \ c)\n              (fold_str (rest str) accum)\n              (fold_str (rest\
    \ str) (string-append accum (string c)))))))\n  (fold_str text \"\"))\n", "  (string-filter\
    \ (lambda (ch) (not (member ch '(\"a\" \"e\" \"i\" \"o\" \"u\")))) text))\n",
  "  (define (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels'\
    \ text no-vowels)\n    (cond\n      [(empty? text) (reverse no-vowels)]\n    \
    \  [(vowel? (first text)) (remove_vowels' (rest text) no-vowels)]\n      [else\
    \ (remove_vowels' (rest text) (cons (first text) no-vowels))]))\n  (remove_vowels'\
    \ text null))\n", "  (define (recur text accum)\n    (cond\n      [(string=? text\
    \ \"\") (list->string (reverse accum))]\n      [(char-vowel? (string-ref text\
    \ 0)) (recur (substring text 1) accum)]\n      [else (recur (substring text 1)\
    \ (cons (string-ref text 0) accum))]))\n  (recur text '()))\n", "  (if (string=?\
    \ text \"\")\n      \"\"\n      (if (char-vowel? (string-ref text 0))\n      \
    \    (remove_vowels (substring text 1))\n          (string-append (string (string-ref\
    \ text 0))\n                         (remove_vowels (substring text 1))))))\n",
  "  (cond\n    [(empty? text) text]\n    [(char-vowel? (first text)) (remove_vowels\
    \ (rest text))]\n    [else (string-append (string (first text)) (remove_vowels\
    \ (rest text)))]))\n", "  (define (vowel? char)\n    (regexp-match? #rx\"[aeiou]\"\
    \ char))\n  (cond [(string=? text \"\")\n         text]\n        [(vowel? (string-ref\
    \ text 0))\n         (remove_vowels (substring text 1))]\n        [else\n    \
    \     (string-append (string-ref text 0)\n                        (remove_vowels\
    \ (substring text 1)))]))\n", "  (cond ((null? text) \"\")\n        ((member (car\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n    \
    \     (remove_vowels (cdr text)))\n        (else (string-append (string (car text))\
    \ (remove_vowels (cdr text))))))\n", "  (regexp-replace* #rx\"[aAeEiIoOuU]\" text\
    \ \"\"))\n", "  (cond ((string=? text \"\") \"\")\n        ((char-vowel? (string-ref\
    \ text 0)) (remove_vowels (substring text 1)))\n        (else (string-append (string\
    \ (string-ref text 0)) (remove_vowels (substring text 1))))))\n```\n\n```racket",
  "  (string-map\n   (lambda (c)\n     (if (member c '(\"a\" \"A\" \"e\" \"E\" \"\
    i\" \"I\" \"o\" \"O\" \"u\" \"U\"))\n         #\\space\n         c))\n   text))\n",
  "    (cond\n        [(empty? text) \"\" ]\n        [(vowel? (first text)) (remove_vowels\
    \ (rest text))]\n        [else (string-append (string (first text)) (remove_vowels\
    \ (rest text)))]))\n", "  (string-intersect\n   text\n   (string-append (string-filter\
    \ letter? (range #\\a #\\z))\n                  (string-filter letter? (range\
    \ #\\A #\\Z)))))\n", "  (cond ((empty? text) \"\")\n        ((char-vowel? (first\
    \ text)) (remove_vowels (rest text)))\n        (else (cons (first text) (remove_vowels\
    \ (rest text))))))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (define (f text accum)\n    (cond\n      [(= 0 (string-length text)) (list->string\
    \ (reverse accum))]\n      [(string-member (string-ref text 0) \"aeiouAEIOU\"\
    ) (f (substring text 1) accum)]\n      [else (f (substring text 1) (cons (string-ref\
    \ text 0) accum))]))\n  (f text '()))\n", "  (cond ((string=? text \"\") \"\"\
    )\n        ((member (string-ref text 0) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (substring text 1)))\n        (else (string-append (string (string-ref text\
    \ 0)) (remove_vowels (substring text 1))))))\n", "  (cond\n    [(string=? text\
    \ \"\")\n     \"\"]\n    [(member (string-ref text 0) \"aeiouAEIOU\")\n     (remove_vowels\
    \ (substring text 1))]\n    [else\n     (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1)))]))\n", "  (for/fold ([result \"\"]\n             ([t (in-string\
    \ text)]))\n    (if (char-in-set? (string->list \"aeiouAEIOU\") t)\n        result\n\
    \        (string-append result (string t)))))\n", "  (define (vowel? character)\n\
    \    (or (char=? character #\\a)\n        (char=? character #\\e)\n        (char=?\
    \ character #\\i)\n        (char=? character #\\o)\n        (char=? character\
    \ #\\u)))\n  (cond ((string=? text \"\") \"\")\n        ((vowel? (string-ref text\
    \ 0)) (remove_vowels (substring text 1)))\n        (else (string-append (substring\
    \ text 0 1) (remove_vowels (substring text 1))))))\n", "  (define (char_of_string\
    \ s)\n    (if (empty? s) s\n        (char (string->number (substring s 1)))))\n\
    \  (if (empty? text) \"\"\n      (if (or (= #\\a (char_of_string text))\n    \
    \          (= #\\e (char_of_string text))\n              (= #\\i (char_of_string\
    \ text))\n              (= #\\o (char_of_string text))\n              (= #\\u\
    \ (char_of_string text)))\n          (remove_vowels (substring text 1))\n    \
    \      (string-append (substring text 0 1)\n                         (remove_vowels\
    \ (substring text 1))))))", "    (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"\
    ))\n", "  (define (replace_vowels text ch)\n    (if (equal? text \"\")\n     \
    \   \"\"\n        (if (or (equal? (first text) \"a\")\n                (equal?\
    \ (first text) \"e\")\n                (equal? (first text) \"i\")\n         \
    \       (equal? (first text) \"o\")\n                (equal? (first text) \"u\"\
    ))\n            (cons ch (replace_vowels (rest text) ch))\n            (cons (first\
    \ text) (replace_vowels (rest text) ch)))))\n  (replace_vowels text \"\"))\n",
  "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (let ((vowels (string-append \"AEIOUaeiou\")))\n    (regexp-replace* #rx\"\"\
    \ (regexp-quote text)\n                     (lambda (text i _is-all)\n       \
    \                (if (string-contains vowels (substring text i (+ i 1)))\n   \
    \                        \"\"\n                           (substring text i (+\
    \ i 1)))))))\n", "  (cond ((empty? text) \"\")\n        ((or (eq? (first text)\
    \ #\\a)\n             (eq? (first text) #\\e)\n             (eq? (first text)\
    \ #\\i)\n             (eq? (first text) #\\o)\n             (eq? (first text)\
    \ #\\u))\n         (remove_vowels (rest text)))\n        (else (string-append\
    \ (first text) (remove_vowels (rest text))))))\n```\n\n```racket\n#lang racket\n",
  "  (cond ((string=? text \"\") \"\")\n        ((or (string=? (substring text 0 1)\
    \ \"a\")\n             (string=? (substring text 0 1) \"e\")\n             (string=?\
    \ (substring text 0 1) \"i\")\n             (string=? (substring text 0 1) \"\
    o\")\n             (string=? (substring text 0 1) \"u\"))\n         (remove_vowels\
    \ (substring text 1)))\n        (else (string-append (substring text 0 1)\n  \
    \                           (remove_vowels (substring text 1))))))\n", "  (if\
    \ (empty? text)\n      \"\"\n      (if (char-vowel? (first text))\n          (remove_vowels\
    \ (rest text))\n          (string-append (first text) (remove_vowels (rest text))))))\n",
  "  (let ((vowels (string-&gt;list \"aeiouAEIOU\")))\n    (string-join\n     (remove\n\
    \      (lambda (x) (member x vowels))\n      (string-&gt;list text)))))\n", " \
    \ (cond\n    [(equal? text \"\") \"\"]\n    [(or (equal? (string-ref text 0) #\\\
    a)\n         (equal? (string-ref text 0) #\\e)\n         (equal? (string-ref text\
    \ 0) #\\i)\n         (equal? (string-ref text 0) #\\o)\n         (equal? (string-ref\
    \ text 0) #\\u))\n     (remove_vowels (substring text 1))]\n    [else (string-append\
    \ (substring text 0 1) (remove_vowels (substring text 1)))]))\n", "  (string-join\
    \ (remove-vowels-lst text)))\n", "  (if (string=? text \"\")\n      \"\"\n   \
    \   (if (string-contains \"aeiouAEIOU\" (string-ref text 0))\n          (remove_vowels\
    \ (substring text 1))\n          (string-append (string-ref text 0) (remove_vowels\
    \ (substring text 1))))))\n", "  (string-join (list->set (regexp-match #rx\"[aeiouAEIOU]\"\
    \ text))))\n", "  (cond\n    [(string=? text \"\") \"\"]\n    [(member (string-ref\
    \ text 0) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n  \
    \   (remove_vowels (substring text 1))]\n    [else (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1)))]))\n", "  (cond [(empty? text) \"\
    \"]\n        [(memq (first text) '(#\\a #\\e #\\i #\\o #\\u))\n         (remove_vowels\
    \ (rest text))]\n        [else (string-append (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (define\
    \ (search_vowels text res)\n    (cond [(empty? text) res]\n          [(char-vowel?\
    \ (first text)) (search_vowels (rest text) res)]\n          [else (search_vowels\
    \ (rest text) (append res (list (first text))))]))\n  (search_vowels text '()))\n",
  "  (cond\n    [(null? text) \"\"]\n    [(is_vowel? (car text)) (remove_vowels (cdr\
    \ text))]\n    [else (cons (car text) (remove_vowels (cdr text)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiouyAEIOUY]\" text \"\"))\n", "  (foldl (lambda (x acc) (if (not (member\
    \ (char->string x) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n             (string-append acc (char->string x))\n             acc))\n\
    \         \"\" (string->list text)))\n", "  (define (remove_vowels_iter text res)\n\
    \    (cond\n      ((null? text) (reverse res))\n      ((vowel? (car text)) (remove_vowels_iter\
    \ (cdr text) res))\n      (else (remove_vowels_iter (cdr text) (cons (car text)\
    \ res)))))\n  (remove_vowels_iter text '()))\n", "  (define vowels '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))\n  (cond ((string=? text \"\") \"\"\
    )\n        ((member (string-ref text 0) vowels) (remove_vowels (substring text\
    \ 1)))\n        (else (string-append (string (string-ref text 0)) (remove_vowels\
    \ (substring text 1))))))\n", "  (if (empty? text)\n      \"\"\n      (if (or\
    \ (= (string-upcase (string-ref text 0)) #\\A)\n              (= (string-upcase\
    \ (string-ref text 0)) #\\E)\n              (= (string-upcase (string-ref text\
    \ 0)) #\\I)\n              (= (string-upcase (string-ref text 0)) #\\O)\n    \
    \          (= (string-upcase (string-ref text 0)) #\\U))\n          (remove_vowels\
    \ (string-tail text 1))\n          (string-append (string (string-ref text 0))\
    \ (remove_vowels (string-tail text 1))))))\n", "  (cond\n    [(string=? text \"\
    \") \"\"]\n    [(string-contains \"a\" text) (remove_vowels (string-replace text\
    \ \"a\" \"\"))]\n    [(string-contains \"e\" text) (remove_vowels (string-replace\
    \ text \"e\" \"\"))]\n    [(string-contains \"i\" text) (remove_vowels (string-replace\
    \ text \"i\" \"\"))]\n    [(string-contains \"o\" text) (remove_vowels (string-replace\
    \ text \"o\" \"\"))]\n    [(string-contains \"u\" text) (remove_vowels (string-replace\
    \ text \"u\" \"\"))]\n    [else text]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (define (remove_vowels_helper text index output)\n    (if\
    \ (= index (string-length text))\n        output\n        (let ((c (string-ref\
    \ text index)))\n          (if (or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o)\
    \ (= c #\\u))\n              (remove_vowels_helper text (+ index 1) output)\n\
    \              (remove_vowels_helper text (+ index 1) (string-append output (string\
    \ c)))))))\n  (remove_vowels_helper text 0 \"\"))\n```\n\n### Coding Questions\n\
    \n> **Question**: What is wrong with the following code?\n> ```\n> (define (append-reverse\
    \ first-list second-list)\n>   (if (null? first-list)\n>       second-list\n>\
    \       (append-reverse (cdr first-list) (cons (car first-list) second-list))))\n\
    > ```\n>\n> **Answer**: It is not tail-recursive. Can you fix it?\n\n```racket",
  "  (cond\n    [(string=? text \"\") \"\"]\n    [(string-member? (string-downcase\
    \ (string-ref text 0)) \"aeiou\") (remove_vowels (substring text 1))]\n    [else\
    \ (string-append (string-ref text 0) (remove_vowels (substring text 1)))]))\n\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"\
    [AEIOUaeiou]\" text \"\"))\n", "  (cond\n    [(string=? text \"\") text]\n   \
    \ [(is_vowel (string-ref text 0)) (remove_vowels (substring text 1))]\n    [else\
    \ (string-append (string-ref text 0) (remove_vowels (substring text 1)))]))\n",
  "  (define vowels \"aeiouAEIOU\")\n  (define (remove_vowels-iter text result)\n\
    \    (cond\n      [(empty? text) result]\n      [(member (first text) vowels)\
    \ (remove_vowels-iter (rest text) result)]\n      [else (remove_vowels-iter (rest\
    \ text) (string-append result (string (first text))))]))\n  (remove_vowels-iter\
    \ text \"\"))\n", "  (cond\n    [(empty? text) text]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (if (equal? text \"\")\n\
    \      \"\"\n      (remove_vowels-help (string->list text))))\n", "  (define vowels\
    \ \"aeiou\")\n  (define (remove-vowels-helper text result)\n    (if (string=?\
    \ text \"\")\n        result\n        (if (member (string-ref text 0) vowels)\n\
    \            (remove-vowels-helper (substring text 1) result)\n            (remove-vowels-helper\
    \ (substring text 1) (string-append result (string-ref text 0))))))\n  (remove-vowels-helper\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(eq? (char-upcase\
    \ (first text)) #\\A) (remove_vowels (rest text))]\n    [(eq? (char-upcase (first\
    \ text)) #\\E) (remove_vowels (rest text))]\n    [(eq? (char-upcase (first text))\
    \ #\\I) (remove_vowels (rest text))]\n    [(eq? (char-upcase (first text)) #\\\
    O) (remove_vowels (rest text))]\n    [(eq? (char-upcase (first text)) #\\U) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n\
    ```\n\n```racket\n#lang racket\n", "  (cond ((null? text) \"\")\n        ((equal?\
    \ (string-upcase (string-ref text 0)) (string-ref text 0)) (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1))))\n        ((vowel? (string-ref text\
    \ 0)) (remove_vowels (substring text 1)))\n        (else (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
