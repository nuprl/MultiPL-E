name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n;; >>> (strlen \"\")\n\
  ;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring\
    \ string 1)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen\
    \ (rest string)))]))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+\
    \ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\")\n      0\n  \
    \    (+ 1 (strlen (substring string 1)))))\n", "  (define (length string count)\n\
    \    (if (null? string)\n        count\n        (length (cdr string) (+ count\
    \ 1))))\n  (length string 0))\n", "  (cond\n    [(empty? string) 0]\n    [else\
    \ (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\")\n      0\n\
    \      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string-null? string)\n\
    \      0\n      (+ 1 (strlen (string-tail string)))))\n", "  (let loop ([k 0]\
    \ [s string])\n    (if (string-empty? s)\n        k\n        (loop (+ k 1) (substring\
    \ s 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (let loop ([rest (string-length string)] [total 0])\n \
    \   (if (= rest 0)\n        total\n        (loop (- rest 1) (+ total 1)))))\n",
  "  (if (eq? string \"\")\n      0\n      (+ 1 (strlen (string-tail string)))))\n\
    ```\n\n#### 15. Create a function that prints the contents of a directory\n\n\
    ```racket\n#lang racket\n", "  (if (string=? string \"\")\n      0\n      (+ 1\
    \ (strlen (substring string 1)))))\n", "  (cond ((null? string) 0)\n        (else\
    \ (+ 1 (strlen (cdr string))))))\n", "  (count string))\n", "  (cond [(string=?\
    \ string \"\") 0]\n        [else (+ 1 (strlen (substring string 1)))]))\n", " \
    \ (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
