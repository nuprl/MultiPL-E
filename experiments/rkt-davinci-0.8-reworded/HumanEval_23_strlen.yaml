name: HumanEval_23_strlen
language: rkt
prompt: "#lang racket\n\n;; Return length of given string\n;; >>> (strlen \"\")\n\
  ;; 0\n;; >>> (strlen \"abc\")\n;; 3\n(define (strlen string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strlen))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"x\") 1)\n\
  \    (check-equal? (candidate \"asdasnakj\") 9)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring\
    \ string 1)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen\
    \ (rest string)))]))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+\
    \ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\")\n      0\n  \
    \    (+ 1 (strlen (substring string 1)))))\n", "  (define (length string count)\n\
    \    (if (null? string)\n        count\n        (length (cdr string) (+ count\
    \ 1))))\n  (length string 0))\n", "  (cond\n    [(empty? string) 0]\n    [else\
    \ (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\")\n      0\n\
    \      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string-null? string)\n\
    \      0\n      (+ 1 (strlen (string-tail string)))))\n", "  (let loop ([k 0]\
    \ [s string])\n    (if (string-empty? s)\n        k\n        (loop (+ k 1) (substring\
    \ s 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (let loop ([rest (string-length string)] [total 0])\n \
    \   (if (= rest 0)\n        total\n        (loop (- rest 1) (+ total 1)))))\n",
  "  (if (eq? string \"\")\n      0\n      (+ 1 (strlen (string-tail string)))))\n\
    ```\n\n#### 15. Create a function that prints the contents of a directory\n\n\
    ```racket\n#lang racket\n", "  (if (string=? string \"\")\n      0\n      (+ 1\
    \ (strlen (substring string 1)))))\n", "  (cond ((null? string) 0)\n        (else\
    \ (+ 1 (strlen (cdr string))))))\n", "  (count string))\n", "  (cond [(string=?\
    \ string \"\") 0]\n        [else (+ 1 (strlen (substring string 1)))]))\n", " \
    \ (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(= (string-length string) 0) 0]\n    [else (+ 1 (strlen (substring\
    \ string 1)))]))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (add1 (string-length string)))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (+ 1 (strlen (rest string)))]))\n</code>\n\
    Since Racket doesn't have just one standard library, you should make sure you're\
    \ using the right one (which one you're using depends on which language you're\
    \ in).\nIn the <code>base</code> library, there's <code>string-length</code>,\
    \ but it's not exported by default.\nIn the <code>racket</code> library, there's\
    \ <code>string-length</code>, which is exported by default.\nIn the <code>racket/base</code>\
    \ library, there's <code>string-length</code>, which is exported by default.\n\
    To make sure you're using the right library, start the interaction environment\
    \ with <code>racket -i &lt;module&gt;</code>, where <code>&lt;module&gt;</code>\
    \ is one of <code>base</code>, <code>racket</code>, or <code>racket/base</code>.\n",
  "  (string-length string))\n", "  (define (strlen-iter cur i)\n    (if (not (equal?\
    \ (string-ref string i) #\\null))\n        (strlen-iter (+ cur 1) (+ i 1))\n \
    \       cur))\n  (strlen-iter 0 0))\n", "  (if (string=? string \"\")\n      0\n\
    \      (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string \"\"\
    )\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond [(empty?\
    \ string) 0]\n        [else (add1 (strlen (rest string)))]))\n", "  (string-length\
    \ string))\n", "  (if (string-empty? string)\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen\
    \ (rest string)))]))\n", "  (cond [(equal? string \"\") 0]\n        [else (+ 1\
    \ (strlen (substring string 1)))]))\n", "  (length string))\n", "  (cond ((equal?\
    \ string \"\") 0)\n        (else (+ 1 (strlen (substring string 1))))))\n", " \
    \ (define (iter count)\n    (if (null? string)\n        count\n        (iter (+\
    \ count 1))))\n  (iter 0))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n\n\n", "  (string-length string))\n", " \
    \ (cond ((equal? string \"\") 0)\n        (else (+ 1 (strlen (substring string\
    \ 1))))))\n", "  (length string))\n", "  (cond ((eq? string \"\") 0)\n       \
    \ (else (+ 1 (strlen (substring string 1))))))\n", "  (cond [(empty? string) 0]\n\
    \        [else (+ 1 (strlen (rest string)))]))\n</code>\nAnd another example with\
    \ a list:\n<code>#lang racket\n", "  (cond [(empty? string) 0]\n        [else\
    \ (add1 (strlen (rest string)))]))\n", "  (cond [(empty? string) 0]\n        [else\
    \ (+ 1 (strlen (rest string)))]))\n", "  (if (null? string)\n      0\n      (+\
    \ 1 (strlen (cdr string)))))\n", "  (cond\n    [(string=? string \"\") 0]\n  \
    \  [else (+ 1 (strlen (substring string 1)))]))\n", "  (cond ((null? string) 0)\n\
    \        (else (+ 1 (strlen (cdr string))))))\n", "  (define (strlen_iter count\
    \ string)\n    (if (string=? string \"\")\n        count\n        (strlen_iter\
    \ (+ count 1) (substring string 1 (string-length string)))))\n  (strlen_iter 0\
    \ string))\n", "  (if (eq? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (if (null? string)\n      0\n      (+ 1 (strlen (cdr string)))))\n",
  "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (define (iter counter string)\n    (if (string=? string \"\")\n        counter\n\
    \        (iter (+ counter 1) (substring string 1))))\n  (iter 0 string))\n", " \
    \ (string-length string))\n", "  (if (string-empty? string)\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (cond ((null? string) 0)\n       \
    \ (else (+ 1 (strlen (cdr string))))))\n", "  (if (equal? string \"\")\n     \
    \ 0\n      (+ 1 (strlen (rest string)))))\n", "  (string-length string))\n", " \
    \ (if (string-empty? string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond\n    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring string\
    \ 1)))]))\n", "  (if (null? string)\n      0\n      (+ 1 (strlen (substring string\
    \ 1)))))\n", "  (let ((str (string->list string)))\n    (let loop ((acc 0) (str\
    \ str))\n      (if (null? str)\n          acc\n          (loop (+ acc 1) (cdr\
    \ str))))))\n</code>\n", "  (if (string-empty? string)\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (count string))\n", "  (if (null?\
    \ string)\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (length\
    \ string))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen\
    \ (rest string)))]))\n", "  (cond ((null? string) 0)\n        (else (+ 1 (strlen\
    \ (cdr string))))))\n```\n\n#### Example: Reverse a string\n\n```racket\n#lang\
    \ racket\n", "  (let ((i 0))\n    (do ((string (string-length string)))\n    \
    \    ((= i string) i)\n      (set! i (+ i 1)))))\n", "  (if (equal? string \"\"\
    )\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (eq? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n\n", "  (cond\n\
    \    [(null? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (cond\n\
    \    [(string=? string \"\") 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n```\n\n```scheme\n\
    #lang racket\n", "  (cond [(empty? string) 0]\n        [else (+ 1 (strlen (rest\
    \ string)))]))\n</code>\nEdit:\nTo be clear, I know how to check if a character\
    \ is a number or not using this function:\n<code>;; Return true if given character\
    \ is a digit", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n```\n\n```racket\n#lang racket\n", "  (define (strlen-iter index)\n\
    \    (if (= index (string-length string))\n        0\n        (+ 1 (strlen-iter\
    \ (+ index 1)))))\n  (strlen-iter 0))\n", "  (if (string=? string \"\")\n    \
    \  0\n      (+ 1 (strlen (substring string 1)))))\n", "  (check-expect (strlen\
    \ \"\") 0)\n  (check-expect (strlen \"abc\") 3)\n  (cond [(empty? string) 0]\n\
    \        [else (add1 (strlen (rest string)))]))\n", "  (if (string=? string \"\
    \")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (string-length\
    \ string))\n", "  (define (length-helper string length)\n    (if (eq? (string-length\
    \ string) 0)\n        length\n        (length-helper (substring string 1) (+ length\
    \ 1))))\n  (length-helper string 0))\n", "  (if (empty? string)\n      0\n   \
    \   (+ 1 (strlen (rest string)))))\n", "  (define (len-iter string count)\n  \
    \  (if (eq? string '())\n        count\n        (len-iter (rest string) (+ count\
    \ 1))))\n  (len-iter string 0))\n", "  (if (string=? string \"\")\n      0\n \
    \     (+ 1 (strlen (substring string 1)))))\n", "  (length string))\n", "  (length\
    \ string))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen\
    \ (rest string)))]))\n", "  (define (strlen-iter cnt string)\n    (if (eq? (string-length\
    \ string) cnt)\n        cnt\n        (strlen-iter (+ cnt 1) string)))\n  (strlen-iter\
    \ 0 string))\n", "  (cond ((null? string) 0)\n        (else (add1 (strlen (cdr\
    \ string))))))\n", "  (length string))\n", "  (length string))\n", "  (define\
    \ (inner str len)\n    (if (string=? str \"\")\n        len\n        (inner (substring\
    \ str 1) (+ len 1))))\n  (inner string 0))\n", "  (if (string=? string \"\")\n\
    \      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (define (count\
    \ acc index)\n    (if (= index (string-length string))\n        acc\n        (count\
    \ (+ acc 1) (+ index 1))))\n  (count 0 0))\n", "  (if (empty? string)\n      0\n\
    \      (+ 1 (strlen (rest string)))))\n", "  (if (string-empty? string)\n    \
    \  0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n```\n\n``` #lang racket\n", " \
    \ (let loop ([remaining string]\n             [count 0])\n    (if (string-empty?\
    \ remaining)\n        count\n        (loop (substring remaining 1)\n         \
    \     (+ count 1)))))\n</code>\n", "  (if (eq? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (string-length string))\n", "  (if\
    \ (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond ((not (string? string)) 0)\n        ((equal? string \"\") 0)\n        (else\
    \ (add1 (strlen (substring string 1))))))\n", "  (cond\n    [(string=? string\
    \ \"\") 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n</code>\nI'm trying\
    \ to add a second clause to make it return -1 if given an invalid input, but i'm\
    \ not able to make it work.\nI'm also trying to make it output the character if\
    \ given a string like \"abc\" -- is this possible?\nThanks in advance!\n\n\nA:\n\
    \n<code>;; Return length of given string", "  (cond ((empty? string) 0)\n    \
    \    (else (+ 1 (strlen (rest string))))))\n", "  (cond [(empty? string) 0]\n\
    \        [else (add1 (strlen (rest string)))]))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (define (loop count)\n\
    \    (if (string-empty? string)\n        count\n        (loop (+ count 1))))\n\
    \  (loop 0))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (define (loop i len)\n    (if (string-ref string i)\n \
    \       (loop (+ i 1) (+ len 1))\n        len))\n  (loop 0 0))\n", "  (if (empty?\
    \ string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (cond\n    [(string=?\
    \ string \"\") 0]\n    [else (+ 1 (strlen (substring string 1)))]))\n", "  (if\
    \ (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (let loop ([chars (string->list string)]\n             [accum 0])\n    (if (null?\
    \ chars)\n        accum\n        (loop (cdr chars) (+ 1 accum)))))\n", "  (if\
    \ (empty? string)\n      0\n      (+ 1 (strlen (rest string)))))\n", "  (length\
    \ string))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1\
    \ (strlen (rest string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else\
    \ (+ 1 (strlen (rest string)))]))\n", "  (if (empty? string)\n      0\n      (+\
    \ 1 (strlen (rest string)))))\n", "  (cond ((null? string) 0)\n        (else (add1\
    \ (strlen (cdr string))))))\n", "  (define (strlen-rec string i)\n    (if (equal?\
    \ string '())\n        i\n        (strlen-rec (cdr string) (+ i 1))))\n  (strlen-rec\
    \ string 0))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen\
    \ (rest string)))]))\n", "  (if (string-empty? string)\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (foldl + 0 (map length (string-&gt;list\
    \ string))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (if (empty? string)\n      0\n      (+ 1 (strlen\
    \ (rest string)))))\n", "  (if (equal? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n```\n\n```racket\n#lang racket\n", "  (cond\n\
    \    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n", "  (cond\
    \ [(empty? string) 0]\n        [else (+ 1 (strlen (rest string)))]))\n", "  (if\
    \ (equal? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n",
  "  (cond ((null? string) 0)\n        (else (add1 (strlen (rest string))))))\n```\n\
    \n#### `null?`\n\nThe `null?` function checks if an object is \"nothing\" or empty.\
    \ If it is, it returns `#t` (which means true).  If not, it returns `#f` (which\
    \ means false).\n\n```racket", "  (cond\n    ((null? string) 0)\n    (else (add1\
    \ (strlen (cdr string))))))\n", "  (if (string=? string \"\")\n      0\n     \
    \ (+ 1 (strlen (substring string 1)))))\n", "  ;; Add your code here\n)\n", " \
    \ (cond\n    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n",
  "  (cond\n    ((eq? string \"\") 0)\n    (else (add1 (strlen (substring string 1))))))\n",
  "  (letrec ([len 0]\n           [index 0]\n           [loop (lambda ()\n       \
    \            (set! index (+ index 1))\n                   (set! len (+ len 1))\n\
    \                   (if (< index (string-length string))\n                   \
    \    (loop)))])\n    (loop)\n    len))\n", "  (cond\n    [(string=? string \"\"\
    ) 0]\n    [else (add1 (strlen (substring string 1)))]))\n```\n\n```racket\n#lang\
    \ racket\n", "  (if (eq? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+\
    \ 1 (strlen (rest string)))]))\n", "  (define (strlen-iter string i)\n    (if\
    \ (char=? (string-ref string i) #\\0)\n        i\n        (strlen-iter string\
    \ (+ i 1))))\n  (strlen-iter string 0))\n", "  (cond ((eq? string \"\") 0)\n \
    \       (else (+ 1 (strlen (substring string 1))))))\n", "  (if (eq? string \"\
    \")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (define (helper\
    \ string acc)\n    (if (string=? string \"\")\n        acc\n        (helper (substring\
    \ string 1) (+ acc 1))))\n  (helper string 0))\n", "  (if (string=? string \"\"\
    )\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  ;; TODO\n  )\n",
  "  ;; Write your code here\n  )\n", "  (if (string=? string \"\")\n      0\n   \
    \   (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string \"\")\n\
    \      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (let lp ((string\
    \ string) (len 0))\n    (if (string-null? string)\n        len\n        (lp (substring\
    \ string 1) (+ len 1)))))\n", "  (define (len string accum)\n    (if (string=?\
    \ string \"\")\n        accum\n        (len (substring string 1) (+ accum 1))))\n\
    \  (len string 0))\n", "  (cond ((string=? string \"\") 0)\n        (else (+ 1\
    \ (strlen (substring string 1))))))\n", "  (if (null? string)\n      0\n     \
    \ (+ 1 (strlen (rest string)))))\n", "  (define (strlen-helper string count)\n\
    \    (if (equal? (string-ref string count) #\\t)\n        count\n        (strlen-helper\
    \ string (+ count 1))))\n  (strlen-helper string 0))\n", "  (cond [(empty? string)\
    \ 0]\n        [else (add1 (strlen (rest string)))]))\n", "  (if (equal? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (cond\n \
    \   [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [else (add1 (strlen (rest string)))]))\n", "  (length\
    \ string))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (if (eq? (string-length string) 0)\n      0\n      (+ 1\
    \ (strlen (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n   \
    \ [else (add1 (strlen (rest string)))]))\n", "  (string-length string))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest string)))]))\n",
  "  (cond ((equal? string \"\") 0)\n        (else (+ 1 (strlen (substring string\
    \ 1))))))\n", "  (if (eq? string \"\")\n      0\n      (+ 1 (strlen (string-tail\
    \ string)))))\n", "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (strlen (rest\
    \ string)))]))\n", "  (apply + (map string-length (string-&gt;list string))))\n",
  "  (string-length string))\n", "  (if (empty? string)\n      0\n      (+ 1 (strlen\
    \ (rest string)))))\n", "  (define (strlen-iter string counter)\n    (if (empty?\
    \ string)\n        counter\n        (strlen-iter (rest string) (+ counter 1))))\n\
    \  (strlen-iter string 0))\n", "  (if (string=? string \"\")\n      0\n      (+\
    \ 1 (strlen (substring string 1)))))\n", "  (if (null? string)\n      0\n    \
    \  (+ 1 (strlen (cdr string)))))\n", "  (if (eq? string \"\")\n      0\n     \
    \ (+ 1 (strlen (substring string 1)))))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [else (+ 1 (strlen (rest string)))]))\n", "  (if (string=? string \"\")\n\
    \      0\n      (+ 1 (strlen (substring string 1)))))\n", "  (if (string=? string\
    \ \"\")\n      0\n      (+ 1 (strlen (substring string 1)))))\n```\n\n```scheme\n\
    #lang racket\n", "  (define (iter length string)\n    (if (string=? \"\" string)\n\
    \        length\n        (iter (+ length 1) (substring string 1))))\n  (iter 0\
    \ string))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen (substring\
    \ string 1)))))\n", "  (if (string=? string \"\")\n      0\n      (+ 1 (strlen\
    \ (substring string 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
