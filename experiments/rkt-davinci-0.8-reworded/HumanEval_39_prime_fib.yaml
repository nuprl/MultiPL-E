name: HumanEval_39_prime_fib
language: rkt
prompt: "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n\
  ;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n\
  ;; 89\n(define (prime_fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n\
  \    (check-equal? (candidate 1) 2)\n    (check-equal? (candidate 2) 3)\n    (check-equal?\
  \ (candidate 3) 5)\n    (check-equal? (candidate 4) 13)\n    (check-equal? (candidate\
  \ 5) 89)\n    (check-equal? (candidate 6) 233)\n    (check-equal? (candidate 7)\
  \ 1597)\n    (check-equal? (candidate 8) 28657)\n    (check-equal? (candidate 9)\
  \ 514229)\n    (check-equal? (candidate 10) 433494437)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 1)\n      2\n      (fib-prime (+ 1 (prime_fib (- n 1))))))\n",
  "  (let fib ([n n] [curr 0] [next 1])\n    (if (= n 0) curr\n        (if (and (prime?\
    \ curr) (= n 1)) curr\n            (fib (- n 1) next (+ curr next))))))\n", " \
    \ (define (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (-\
    \ n 2)))))\n  (define (fib-prime-mapper fib)\n    (if (prime? fib)\n        fib\n\
    \        (fib-prime-mapper (+ fib 1))))\n  (fib-prime-mapper (fib n)))\n", " \
    \ (let loop ((i 1) (j 2) (n n))\n    (cond\n      ((= n 0) i)\n      ((and (=\
    \ n 1) (prime? j)) j)\n      ((and (prime? j) (prime? (+ i j))) (loop j (+ i j)\
    \ (- n 1)))\n      (else (loop i (+ i j) n)))))\n", "  (fib (prime-fib-index n)))\n",
  "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n\
    \              5\n              (if (= n 4)\n                  13\n          \
    \        89)))))", "  (let loop ((n n) (i 1) (j 1) (k 0) (count 0))\n    (cond\
    \ ((= count n) k)\n          ((is_prime j) (loop n i (+ i j) j (+ count 1)))\n\
    \          (else (loop n i (+ i j) j count)))))\n", "  (define fibs (make-list\
    \ 10000 0))\n  (set! fibs (list 1 1))\n  (define (prime? x)\n    (if (< x 2)\n\
    \        #f\n        (define (prime? x acc)\n          (if (= acc (* acc acc))\n\
    \              (if (= x (* acc acc))\n                  #f\n                 \
    \ #t)\n              (if (= (% x acc) 0)\n                  #f\n             \
    \     (prime? x (+ acc 1)))))\n        (prime? x 2)))\n  (define (fibs x)\n  \
    \  (if (= (list-ref fibs x) 0)\n        (begin\n          (set! fibs (append fibs\
    \ (list (+ (list-ref fibs (- x 1)) (list-ref fibs (- x 2))))))\n          (fibs\
    \ x))\n        (list-ref fibs x)))\n  (define (prime_fib n acc x)\n    (if (=\
    \ n acc)\n        (list-ref fibs x)\n        (if (prime? (fibs x))\n         \
    \   (prime_fib n (+ acc 1) (+ x 1))\n            (prime_fib n acc (+ x 1)))))\n\
    \  (prime_fib n 0 1))\n", "  (define (fib n)\n    (if (< n 3) 1\n        (+ (fib\
    \ (- n 1)) (fib (- n 2)))))\n  (define (next-prime-fib n i)\n    (if (= n 0) (fib\
    \ i)\n        (if (is-prime? (fib i)) (next-prime-fib (- n 1) (+ i 1))\n     \
    \       (next-prime-fib n (+ i 1)))))\n  (next-prime-fib n 1))\n", "  (cond ((=\
    \ n 1) 2)\n        ((= n 2) 3)\n        (else\n         (nth n (filter is-prime\
    \ (fibonacci-sequence-generator))))))\n", "  (if (is_prime? n) n (prime_fib (+\
    \ n 1))))\n", "  (define fn (fibonacci n))\n  (if (prime? fn)\n      fn\n    \
    \  (prime_fib (+ n 1))))\n", "  (if (zero? n)\n      0\n      (if (= n 1)\n  \
    \        2\n          (if (= n 2)\n              3\n              (if (= n 3)\n\
    \                  5\n                  (if (= n 4)\n                      13\n\
    \                      (if (= n 5)\n                          89\n           \
    \               (fibonacci_and_prime (add1 n) 0 0))))))))\n", "  (let loop ((fibs\
    \ (list 2 3 5)))\n    (if (<= (length fibs) n)\n        (loop (cons (fib (length\
    \ fibs)) fibs))\n        (car (for/fold ([prime_fibs '()]) ([fib (in-list fibs)])\n\
    \                (if (prime? fib)\n                    (cons fib prime_fibs)\n\
    \                    prime_fibs)))\n        )))\n", "  (define (is_prime? n)\n\
    \    (let ((factors (filter (lambda (x) (= (remainder n x) 0)) (range 2 n))))\n\
    \      (= (length factors) 0)))\n  (define (prime_fib_helper n fib1 fib2 fib_index)\n\
    \    (if (= n fib_index)\n        fib1\n        (if (and (is_prime? fib2) (= (modulo\
    \ fib_index 2) 0))\n            (prime_fib_helper n fib2 (+ fib1 fib2) (+ fib_index\
    \ 1))\n            (prime_fib_helper n fib1 (+ fib1 fib2) (+ fib_index 1)))))\n\
    \  (if (= n 1)\n      2\n      (prime_fib_helper n 1 2 2)))\n", "  (prime_fib_iter\
    \ 1 2 3 n))\n", "  (define (helper k f1 f2)\n    (if (zero? n) f1\n        (if\
    \ (equal? k n) f2\n            (if (prime? f2) (helper (+ k 1) f2 (+ f1 f2))\n\
    \                (helper k f2 (+ f1 f2))))))\n  (helper 0 0 1))\n", "  (cond\n\
    \    [(= n 1)\n     2]\n    [(= n 2)\n     3]\n    [else\n     (let loop ([a 2]\
    \ [b 3] [x 3])\n       (if (= x n)\n           b\n           (loop b (+ a b) (+\
    \ x 1))))]))\n", "  (define (is-prime n)\n    (not (or\n          (= n 1)\n  \
    \        (or\n           (zero? (modulo n 2))\n           (or\n            (zero?\
    \ (modulo n 3))\n            (or\n             (zero? (modulo n 5))\n        \
    \     (or\n              (zero? (modulo n 7))\n              (or\n           \
    \    (zero? (modulo n 11))\n               (zero? (modulo n 13))))))))))\n  (define\
    \ (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n\
    \  (define (prime-fib n i)\n    (if (= n i)\n        0\n        (if (is-prime\
    \ (fib i))\n            (prime-fib n (add1 i))\n            (fib i))))\n  (prime-fib\
    \ n 1))\n", "  (cond ((= n 1) 2)\n        ((= n 2) 3)\n        (else (let loop\
    \ ([i 3] [counter 2] [cur_num 5] [cur_num_1 3] [cur_num_2 2])\n              \
    \  (cond ((= counter n) cur_num)\n                      ((or (zero? (modulo cur_num\
    \ 2)) (zero? (modulo cur_num 3)) (zero? (modulo cur_num 5))) (loop (+ i 1) counter\
    \ (+ cur_num cur_num_1) cur_num cur_num_1))\n                      (else (loop\
    \ (+ i 1) (+ counter 1) (+ cur_num cur_num_1) cur_num cur_num_1)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
