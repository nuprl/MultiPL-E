name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"\
  abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n     \
    \    (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first\
    \ s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else\
    \ (vowels_count (rest s))]))", "  (cond [(empty? s) 0]\n        [(or (equal? (first\
    \ s) #\\a)\n             (equal? (first s) #\\e)\n             (equal? (first\
    \ s) #\\i)\n             (equal? (first s) #\\o)\n             (equal? (first\
    \ s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(or (equal? (first\
    \ s) #\\A)\n             (equal? (first s) #\\E)\n             (equal? (first\
    \ s) #\\I)\n             (equal? (first s) #\\O)\n             (equal? (first\
    \ s) #\\U))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (equal? (first\
    \ s) #\\y)\n              (equal? (rest s) empty))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  (define (is_vowel\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (is_last s)\n\
    \    (not (string=? s \"\")))\n  (define (count-vowels s)\n    (if (is_last s)\n\
    \        (if (is_vowel (string-ref s 0))\n            1\n            0)\n    \
    \    (if (is_vowel (string-ref s 0))\n            (+ 1 (count-vowels (substring\
    \ s 1)))\n            (count-vowels (substring s 1)))))\n  (count-vowels s))\n",
  "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (cond [(empty? s) 0]\n       \
    \ [(member (first s) vowels) (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (let* ((vowels (list #\\a #\\e #\\i #\\o #\\u))\n      \
    \   (s (string-upcase s))\n         (n (string-length s))\n         (vowels-count\
    \ 0))\n    (let loop ((i 0))\n      (cond ((= i n) vowels-count)\n           \
    \ ((= i (- n 1)) (if (member (string-ref s i) vowels)\n                      \
    \         (+ vowels-count 1)\n                               vowels-count))\n\
    \            ((member (string-ref s i) vowels)\n             (loop (+ i 1)) (+\
    \ vowels-count 1))\n            (else (loop (+ i 1)) vowels-count)))))\n", " \
    \ (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=?\
    \ (first s) #\\e)\n             (char=? (first s) #\\i)\n             (char=?\
    \ (first s) #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [(char=? (first s) #\\y)\n         (cond [(empty? (rest\
    \ s)) 1]\n               [else (+ 1 (vowels_count (rest s)))])]\n        [else\
    \ (vowels_count (rest s))]))\n", "  (list-length (list-of-vowels s)))\n", "  (length\
    \ (filter\n           (lambda (c)\n             (regexp-match #rx\"[aeiouy]\"\
    \ (string c)))\n           (string->list s))))\n", "  (foldl (lambda (c n)\n \
    \          (cond\n             [(or (string=? \"a\" c)\n                  (string=?\
    \ \"e\" c)\n                  (string=? \"i\" c)\n                  (string=?\
    \ \"o\" c)\n                  (string=? \"u\" c))\n              (+ n 1)]\n  \
    \           [(and (string=? \"y\" c)\n                   (= (string-length s)\
    \ (+ 1 n)))\n              (+ n 1)]\n             [else n]))\n         0\n   \
    \      (string->list s)))\n</code>\nI use the following to test the code.\n<code>#lang\
    \ racket\n", "  (define (normalize-string s)\n    (if (string=? s \"\") #f (string-downcase\
    \ s)))\n  (define (vowels-count s)\n    (define (vowels-count-iter s n)\n    \
    \  (cond ((null? s) n)\n            ((char-set=? (string-&gt;list s) \"aeiouy\"\
    ) (vowels-count-iter (cdr s) (+ n 1)))\n            (else (vowels-count-iter (cdr\
    \ s) n))))\n    (vowels-count-iter s 0))\n  (vowels-count (normalize-string s)))\n",
  "  (define (char-is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n\
    \        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (vowels-in-word w)\n    (if (char-is-vowel? (string-ref w (- (string-length\
    \ w) 1)))\n        (if (string-empty? w)\n            0\n            (+ (if (char-is-vowel?\
    \ (string-ref w 0)) 1 0)\n               (vowels-in-word (substring w 1 (- (string-length\
    \ w) 1)))))\n        (if (string-empty? w)\n            0\n            (+ (if\
    \ (char-is-vowel? (string-ref w 0)) 1 0)\n               (vowels-in-word (substring\
    \ w 1))))))\n  (vowels-in-word s))\n", '  (length (filter vowel? (string->list
    s))))', "  (let loop ([i (string-length s)] [n 0])\n    (cond [(negative? i) n]\n\
    \          [(or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (char=? (string-ref s i) #\\y) (= i 0)))\n           (loop (-\
    \ i 1) (+ n 1))]\n          [else (loop (- i 1) n)])))\n", "  (define (check-vowel\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (let loop ((count 0)\n\
    \             (s s))\n    (cond ((string=? \"\" s) count)\n          ((string=?\
    \ \"y\" (substring s -1))\n           (loop (+ count 1) (substring s 0 -1)))\n\
    \          ((check-vowel (substring s 0 1))\n           (loop (+ count 1) (substring\
    \ s 1)))\n          (else (loop count (substring s 1))))))\n", "  (cond\n    [(string=?\
    \ s \"\") 0]\n    [(or (string=? (substring s 0 1) \"a\")\n         (string=?\
    \ (substring s 0 1) \"e\")\n         (string=? (substring s 0 1) \"i\")\n    \
    \     (string=? (substring s 0 1) \"o\")\n         (string=? (substring s 0 1)\
    \ \"u\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(and (string=? (substring\
    \ s 0 1) \"y\")\n          (string=? (substring s 1) \"\"))\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))", "  (cond\n\
    \    [(string=? s \"\") 0]\n    [(or (string=? (substring s -1) \"a\")\n     \
    \    (string=? (substring s -1) \"e\")\n         (string=? (substring s -1) \"\
    i\")\n         (string=? (substring s -1) \"o\")\n         (string=? (substring\
    \ s -1) \"u\")\n         (string=? (substring s -1) \"y\"))\n     (+ 1 (vowels_count\
    \ (substring s 0 -1)))]\n    [else (vowels_count (substring s 0 -1))]))\n", " \
    \ (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (valid-vowel? c)\n  \
    \  (member c vowels))\n  (define (last-vowel? s)\n    (and (char=? (string-ref\
    \ s (- (string-length s) 1)) #\\y)\n         (not (member (string-ref s (- (string-length\
    \ s) 2)) vowels))))\n  (define (cnt-vowels s)\n    (if (zero? (string-length s))\n\
    \        0\n        (+ (if (valid-vowel? (string-ref s 0)) 1 0)\n           (cnt-vowels\
    \ (substring s 1)))))\n  (if (last-vowel? s)\n      (+ (cnt-vowels (substring\
    \ s 0 (- (string-length s) 1))) 1)\n      (cnt-vowels s)))\n", "  (letrec ([f\
    \ (lambda (s)\n                (cond [(empty? s) 0]\n                      [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n                       (+ 1 (f (rest\
    \ s)))]\n                      [(member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n\
    \                       (+ 1 (f (rest s)))]\n                      [(and (member\
    \ (first s) '(#\\y #\\Y)) (empty? (rest s)))\n                       (+ 1 (f (rest\
    \ s)))]\n                      [else (f (rest s))]))])\n    (f s)))\n</code>\n",
  "  (cond [(string=? s \"\") 0]\n        [(string-contains-ci? \"aeiou\" (string-ref\
    \ s 0)) (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count (substring\
    \ s 1))]))\n```", "  (cond [(empty? s) 0]\n        [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count (rest s)))]\n       \
    \ [else (vowels_count (rest s))]))\n", "  (cond\n    [(string=? s \"\") 0]\n \
    \   [(member (string-ref s 0) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [(member (string-ref s 0) '(#\\A #\\E #\\I #\\O #\\\
    U))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(and (string=? (substring\
    \ s (- (string-length s) 1)) \"y\")\n          (member (string-ref s 0) '(#\\\
    a #\\e #\\i #\\o #\\u)))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(and\
    \ (string=? (substring s (- (string-length s) 1)) \"Y\")\n          (member (string-ref\
    \ s 0) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (vowels_count (substring s 1)))]\n\
    \    [else (vowels_count (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y)\n     (cond\n       [(empty? (rest s)) 1]\n \
    \      [else (vowels_count (rest s))])]\n    [else (vowels_count (rest s))]))",
  "  (foldl (lambda (c p)\n           (if (string-contains \"aeiouy\" c)\n       \
    \        (+ p 1)\n               p))\n         0\n         s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest\
    \ s)))]\n    [(char-ci=? (first s) #\\e) (add1 (vowels_count (rest s)))]\n   \
    \ [(char-ci=? (first s) #\\i) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\o) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    u) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\y)\n     (if\
    \ (equal? (rest s) '())\n         (add1 (vowels_count (rest s)))\n         (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n</code>\nThe problem with\
    \ this code is that it will return a wrong answer when the input is capitalized.\n\
    Example:\n<code>&gt; (vowels_count \"ACEDY\")\n3\n</code>\nThe expected answer\
    \ is 2.\nI've solved this problem by changing the <code>char-ci=?</code> calls\
    \ to <code>char=?</code> and the <code>empty?</code> call to <code>string-empty?</code>\
    \ calls, but I think that the problem is in the <code>char-ci=?</code> call and\
    \ the lowercase option won't work.\nAm I missing something, or is the implementation\
    \ of <code>char-ci=?</code> in Racket missing something?\nI'm using Racket 6.3.\n\
    \n\nA:\n\nIf you want to implement a case-insensitive <code>vowels_count</code>\
    \ procedure you can use <code>char-downcase</code> to \"lowercase\" the character\
    \ and then test for the vowels:\n<code>(define (vowels_count s)\n  (cond\n   \
    \ [(empty? s) 0]\n    [(member (char-downcase (first s", "  (define (helper s\
    \ c)\n    (cond ((null? s) c)\n          ((member (car s) '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\")) (helper (cdr s) (+ c 1)))\n          (else (helper (cdr s) c))))\n\
    \  (helper s 0))\n", "  (let ((count 0))\n    (for ([c (in-string s)])\n     \
    \ (cond\n        ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u))\n         (set! count (+ count 1)))\n        ((and\
    \ (char=? c #\\y) (char=? (string-ref s (- (string-length s) 1)) #\\y))\n    \
    \     (set! count (+ count 1)))))\n    count))\n", "  (let ([vowels '(\"a\" \"\
    e\" \"i\" \"o\" \"u\")])\n    (length (filter (\u03BB (x) (member x vowels)) (string->list\
    \ s)))))\n", "  (if (empty? s)\n      0\n      (if (char-ci=? (first s) #\\a)\n\
    \          (+ 1 (vowels_count (rest s)))\n          (if (char-ci=? (first s) #\\\
    e)\n              (+ 1 (vowels_count (rest s)))\n              (if (char-ci=?\
    \ (first s) #\\i)\n                  (+ 1 (vowels_count (rest s)))\n         \
    \         (if (char-ci=? (first s) #\\o)\n                      (+ 1 (vowels_count\
    \ (rest s)))\n                      (if (char-ci=? (first s) #\\u)\n         \
    \                 (+ 1 (vowels_count (rest s)))\n                          (if\
    \ (and (char-ci=? (first s) #\\y)\n                                   (empty?\
    \ (rest s)))\n                              (+ 1 (vowels_count (rest s)))\n  \
    \                            (vowels_count (rest s)))))))))))\n```\n\n```racket\n\
    #lang racket\n", "  (define (count i)\n    (cond\n      [(= i (string-length s))\
    \ 0]\n      [(or (= (string-ref s i) #\\a)\n           (= (string-ref s i) #\\\
    e)\n           (= (string-ref s i) #\\i)\n           (= (string-ref s i) #\\o)\n\
    \           (= (string-ref s i) #\\u)\n           (and (= (string-ref s i) #\\\
    y)\n                (= i (- (string-length s) 1)))) (+ 1 (count (+ i 1)))]\n \
    \     [else (count (+ i 1))]))\n  (count 0))", "  (define (vowels-count-iter s\
    \ i c)\n    (cond\n      [(>= i (string-length s)) c]\n      [(vowel? (string-ref\
    \ s i)) (vowels-count-iter s (+ i 1) (+ c 1))]\n      [else (vowels-count-iter\
    \ s (+ i 1) c)]))\n  (vowels-count-iter s 0 0))\n", "  (cond [(empty? s) 0]\n\
    \        [(char-vowel? (car s)) (add1 (vowels_count (cdr s)))]\n        [else\
    \ (vowels_count (cdr s))]))\n", "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n\
    \  (let loop ((s s) (n 0))\n    (cond ((null? s) n)\n          ((or (member (car\
    \ s) vowels)\n               (and (eq? (car s) #\\y) (null? (cdr s))))\n     \
    \      (loop (cdr s) (+ n 1)))\n          (else (loop (cdr s) n)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (local\n    [(define (vc s n)\n       (cond\n         [(empty?\
    \ s)\n          n]\n         [(or (char=? (first s) #\\a)\n              (char=?\
    \ (first s) #\\e)\n              (char=? (first s) #\\i)\n              (char=?\
    \ (first s) #\\o)\n              (char=? (first s) #\\u))\n          (vc (rest\
    \ s) (+ n 1))]\n         [(char=? (first s) #\\y)\n          (if (or (empty? (rest\
    \ s))\n                  (not (char=? (first (rest s)) #\\y)))\n             \
    \ (vc (rest s) (+ n 1))\n              (vc (rest s) n))]\n         [else\n   \
    \       (vc (rest s) n)]))]\n    (vc s 0)))\n", "  (define (vowels_count-iter\
    \ str n)\n    (if (string-empty? str)\n        n\n        (let ((curr (string-ref\
    \ str 0)))\n          (cond ((string=? curr \"a\") (vowels_count-iter (substring\
    \ str 1) (+ n 1)))\n                ((string=? curr \"e\") (vowels_count-iter\
    \ (substring str 1) (+ n 1)))\n                ((string=? curr \"i\") (vowels_count-iter\
    \ (substring str 1) (+ n 1)))\n                ((string=? curr \"o\") (vowels_count-iter\
    \ (substring str 1) (+ n 1)))\n                ((string=? curr \"u\") (vowels_count-iter\
    \ (substring str 1) (+ n 1)))\n                ((string=? curr \"y\") (if (string-empty?\
    \ (substring str 1))\n                                         (+ n 1)\n     \
    \                                    (vowels_count-iter (substring str 1) n)))\n\
    \                (else (vowels_count-iter (substring str 1) n))))))\n  (vowels_count-iter\
    \ s 0))\n", "  (define (is_vowel? ch)\n    (or (string=? ch \"a\")\n        (string=?\
    \ ch \"e\")\n        (string=? ch \"i\")\n        (string=? ch \"o\")\n      \
    \  (string=? ch \"u\")))\n  (length (filter is_vowel? (string->list s))))\n",
  "  (cond ((null? s) 0)\n        ((char-ci=? (car s) #\\a) (+ 1 (vowels_count (cdr\
    \ s))))\n        ((char-ci=? (car s) #\\e) (+ 1 (vowels_count (cdr s))))\n   \
    \     ((char-ci=? (car s) #\\i) (+ 1 (vowels_count (cdr s))))\n        ((char-ci=?\
    \ (car s) #\\o) (+ 1 (vowels_count (cdr s))))\n        ((char-ci=? (car s) #\\\
    u) (+ 1 (vowels_count (cdr s))))\n        ((char-ci=? (car s) #\\y) (+ 1 (vowels_count\
    \ (cdr s))))\n        (else (vowels_count (cdr s)))))\n", "  (define (is-vowel?\
    \ c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\\
    i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (let loop ([s s] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(is-vowel? (first s)) (loop\
    \ (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n", "  (define\
    \ (is-a-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-a-vowel-or-y?\
    \ c)\n    (or (is-a-vowel? c) (char=? c #\\y)))\n  (define (is-y-at-end? s)\n\
    \    (let ((c (string-ref s (- (string-length s) 1))))\n      (char=? c #\\y)))\n\
    \  (define (rec s)\n    (if (string-empty? s)\n        0\n        (cond ((is-a-vowel?\
    \ (string-ref s 0))\n               (+ 1 (rec (substring s 1))))\n           \
    \   ((is-y-at-end? s)\n               (+ 1 (rec (substring s 0 (- (string-length\
    \ s) 1)))))\n              (else (rec (substring s 1))))))\n  (rec s))\n", " \
    \ (cond [(empty? s) 0]\n        [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest\
    \ s))]))\n", "  (define (vowels s i)\n    (if (= i (string-length s))\n      \
    \  0\n        (if (or (= (string-ref s i) #\\a)\n                (= (string-ref\
    \ s i) #\\e)\n                (= (string-ref s i) #\\i)\n                (= (string-ref\
    \ s i) #\\o)\n                (= (string-ref s i) #\\u)\n                (and\
    \ (= (string-ref s i) #\\y)\n                     (= i (- (string-length s) 1))))\n\
    \            (+ 1 (vowels s (+ i 1)))\n            (vowels s (+ i 1)))))\n  (vowels\
    \ s 0))\n", "  (let ([vowels '(#\\a #\\e #\\i #\\o #\\u)])\n    (if (null? s)\n\
    \      0\n      (if (or (member (car s) vowels)\n              (and (equal? (car\
    \ s) #\\y)\n                   (null? (cdr s))))\n        (+ 1 (vowels_count (cdr\
    \ s)))\n        (vowels_count (cdr s))))))\n", "  (let ([n (length s)])\n    (if\
    \ (or (= n 0) (= n 1))\n        0\n        (let ([last-char (substring s (- n\
    \ 1) n)])\n          (if (or (string=? last-char \"a\")\n                  (string=?\
    \ last-char \"e\")\n                  (string=? last-char \"i\")\n           \
    \       (string=? last-char \"o\")\n                  (string=? last-char \"u\"\
    )\n                  (string=? last-char \"y\"))\n              (+ 1 (vowels_count\
    \ (substring s 0 (- n 1))))\n              (vowels_count (substring s 0 (- n 1))))))))\n",
  "  (let ([l (string->list s)])\n    (if (null? l)\n        0\n        (if (char-vowel?\
    \ (car l))\n            (+ 1 (vowels_count (list->string (cdr l))))\n        \
    \    (vowels_count (list->string (cdr l)))))))\n", "  (define (consonant? c)\n\
    \    (cond\n      ((= c #\\a) #f)\n      ((= c #\\e) #f)\n      ((= c #\\i) #f)\n\
    \      ((= c #\\o) #f)\n      ((= c #\\u) #f)\n      (else #t)))\n  (define (vowels-count-iter\
    \ s count)\n    (cond\n      ((empty? s) count)\n      ((and (consonant? (first\
    \ s))\n            (consonant? (second s)))\n       (vowels-count-iter (rest s)\
    \ count))\n      ((and (consonant? (first s))\n            (not (consonant? (second\
    \ s))))\n       (vowels-count-iter (rest s) (+ count 1)))\n      ((and (not (consonant?\
    \ (first s)))\n            (consonant? (second s)))\n       (vowels-count-iter\
    \ (rest s) (+ count 1)))\n      ((and (not (consonant? (first s)))\n         \
    \   (not (consonant? (second s))))\n       (vowels-count-iter (rest s) (+ count\
    \ 2)))\n      (else count)))\n  (vowels-count-iter s 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(string-contains-ci? (substring s 0 1) \"aeiou\")\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n```\n\n```racket\n\
    #lang racket\n", "  (cond [(empty? s) 0]\n        [(equal? (first s) 'a) (+ 1\
    \ (vowels_count (rest s)))]\n        [(equal? (first s) 'e) (+ 1 (vowels_count\
    \ (rest s)))]\n        [(equal? (first s) 'i) (+ 1 (vowels_count (rest s)))]\n\
    \        [(equal? (first s) 'o) (+ 1 (vowels_count (rest s)))]\n        [(equal?\
    \ (first s) 'u) (+ 1 (vowels_count (rest s)))]\n        [(equal? (first s) 'y)\
    \ (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n  (cond\n    [(string=? s \"\
    \") 0]\n    [(member? (string-downcase (substring s 0 1)) vowels)\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n```\n\n```\n\
    #lang racket\n", "  (letrec\n      ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n\
    \       [count (lambda (c)\n                (if (or (member c vowels)\n      \
    \                  (and (equal? (string-length s) (add1 (string-length (substring\
    \ s 1))))\n                             (equal? c #\\y)))\n                  \
    \  (add1 (count (substring s 1)))\n                    (count (substring s 1))))])\n\
    \    (count s)))\n", "  (define (is-vowel c)\n    (or (equal? c #\\a)\n      \
    \  (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n       \
    \ (equal? c #\\u)))\n  (define (is-last-char c)\n    (equal? c (string-ref s (-\
    \ (string-length s) 1))))\n  (for/sum ([c (in-string s)])\n    (cond\n      [(is-vowel\
    \ c) 1]\n      [(and (equal? c #\\y) (is-last-char c)) 1]\n      [else 0])))\n",
  "  (let ([vowels (string-&gt;list \"aeiou\")])\n    (regexp-count\n     (regexp\
    \ (format \"\\\\w*[~a ~e ~i ~o ~u]\\\\w*\\\\y\"))\n     s)))\n</code>\n", "  (define\
    \ (aux s n)\n    (cond ((empty? s) n)\n          ((and (not (= n 0)) (= (last\
    \ s) #\\y)) (+ n 1))\n          ((= (last s) #\\a) (aux (butlast s) (+ n 1)))\n\
    \          ((= (last s) #\\e) (aux (butlast s) (+ n 1)))\n          ((= (last\
    \ s) #\\i) (aux (butlast s) (+ n 1)))\n          ((= (last s) #\\o) (aux (butlast\
    \ s) (+ n 1)))\n          ((= (last s) #\\u) (aux (butlast s) (+ n 1)))\n    \
    \      (else (aux (butlast s) n))))\n  (aux s 0))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (vowels-in-string\
    \ acc x)\n    (if (empty? x)\n        acc\n        (if (is-vowel? (first x))\n\
    \            (vowels-in-string (+ acc 1) (rest x))\n            (vowels-in-string\
    \ acc (rest x)))))\n  (vowels-in-string 0 s))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(equal? (string-ref s 0) #\\a) (+ 1 (vowels_count (substring s 1)))]\n \
    \   [(equal? (string-ref s 0) #\\e) (+ 1 (vowels_count (substring s 1)))]\n  \
    \  [(equal? (string-ref s 0) #\\i) (+ 1 (vowels_count (substring s 1)))]\n   \
    \ [(equal? (string-ref s 0) #\\o) (+ 1 (vowels_count (substring s 1)))]\n    [(equal?\
    \ (string-ref s 0) #\\u) (+ 1 (vowels_count (substring s 1)))]\n    [(not (empty?\
    \ (substring s 1))) (vowels_count (substring s 1))]\n    [(equal? (string-ref\
    \ s 0) #\\y) (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count (substring\
    \ s 1))]))\n", "  (define (last-letter s)\n    (substring s (- (string-length\
    \ s) 1) (string-length s)))\n  (define (is-vowel? c)\n    (or (= c #\\a) (= c\
    \ #\\e) (= c #\\i) (= c #\\o) (= c #\\u)))\n  (define (is-at-end? s)\n    (and\
    \ (equal? s \"\")\n         (equal? (last-letter s) #\\y)))\n  (cond\n    ((=\
    \ (string-length s) 0) 0)\n    ((is-vowel? (string-ref s 0)) (+ 1 (vowels_count\
    \ (substring s 1 (string-length s)))))\n    ((is-at-end? s) (+ 1 (vowels_count\
    \ (substring s 1 (string-length s)))))\n    (else (vowels_count (substring s 1\
    \ (string-length s))))))\n", "  (cond ((or (empty? s) (null? s)) 0)\n        ((member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n         (+ 1 (vowels_count (rest s))))\n\
    \        ((and (member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n              (or\
    \ (null? (rest s))\n                  (not (member (rest s) '(#\\a #\\e #\\i #\\\
    o #\\u)))))\n         (+ 1 (vowels_count (rest s))))\n        (else (vowels_count\
    \ (rest s)))))\n", "  (length (filter (lambda (c) (member c '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\"))) (string-&gt;list s))))\n</code>\n", "  (let loop ([s s] [n 0])\n\
    \    (cond [(empty? s) n]\n          [(any [char=? (first s) #\\a\n          \
    \       char=? (first s) #\\e\n                 char=? (first s) #\\i\n      \
    \           char=? (first s) #\\o\n                 char=? (first s) #\\u\n  \
    \               char=? (first s) #\\y]\n                #t)\n           (loop\
    \ (rest s) (+ n 1))]\n          [else (loop (rest s) n)])))\n", "  (define (count_vowels\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n\
    \           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n    \
    \       (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (count_vowels\
    \ (rest s) (+ n 1))]\n      [(or (char=? (first s) #\\A)\n           (char=? (first\
    \ s) #\\E)\n           (char=? (first s) #\\I)\n           (char=? (first s) #\\\
    O)\n           (char=? (first s) #\\U))\n       (count_vowels (rest s) (+ n 1))]\n\
    \      [(and (or (char=? (first s) #\\y)\n                (char=? (first s) #\\\
    Y))\n            (empty? (rest s)))\n       (+ n 1)]\n      [else (count_vowels\
    \ (rest s) n)]))\n  (count_vowels s 0))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (not (member (first s) '(#\\a #\\e #\\i #\\o #\\u))) (empty?\
    \ (rest s))) 0]\n    [(and (not (member (first s) '(#\\a #\\e #\\i #\\o #\\u)))\
    \ (equal? (first s) #\\y)) 1]\n    [else (vowels_count (rest s))]))", "  (if (null?\
    \ s)\n      0\n      (if (not(char-alphabetic? (car s)))\n          (vowels_count\
    \ (cdr s))\n          (if (or (char=? (car s) #\\a)\n                  (char=?\
    \ (car s) #\\e)\n                  (char=? (car s) #\\i)\n                  (char=?\
    \ (car s) #\\o)\n                  (char=? (car s) #\\u)\n                  (and\
    \ (char=? (car s) #\\y)\n                       (null? (cdr s))))\n          \
    \    (+ 1 (vowels_count (cdr s)))\n              (vowels_count (cdr s))))))\n",
  "  (cond\n    [(string=? (string-upcase s) s)\n     (vowels_count (string-downcase\
    \ s))]\n    [(string=? \"\" s) 0]\n    [(string-contains-ci \"aeiouy\" (string-take\
    \ s 1))\n     (+ 1 (vowels_count (string-drop s 1)))]\n    [else (vowels_count\
    \ (string-drop s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (+ 1 (vowels_count (rest s)))]\n    [(member\
    \ (first s) '(\"y\")) (+ (if (empty? (rest s)) 1 0) (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (length (regexp-match #rx\"a|e|i|o|u|y\"\
    \ s)))\n", "  (cond [(string=? s \"\") 0]\n        [(string-ci=? (substring s\
    \ 0 1) \"a\") (+ 1 (vowels_count (substring s 1)))]\n        [(string-ci=? (substring\
    \ s 0 1) \"e\") (+ 1 (vowels_count (substring s 1)))]\n        [(string-ci=? (substring\
    \ s 0 1) \"i\") (+ 1 (vowels_count (substring s 1)))]\n        [(string-ci=? (substring\
    \ s 0 1) \"o\") (+ 1 (vowels_count (substring s 1)))]\n        [(string-ci=? (substring\
    \ s 0 1) \"u\") (+ 1 (vowels_count (substring s 1)))]\n        [(string-ci=? (substring\
    \ s 0 1) \"y\") (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count\
    \ (substring s 1))]))\n", "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (is-last-char-vowel l)\n    (is-vowel (car (reverse\
    \ l))))\n  (define (is-char-vowel l)\n    (and (is-vowel (car l))\n         (not\
    \ (is-last-char-vowel l))))\n  (define (is-y-vowel l)\n    (and (char=? (car l)\
    \ #\\y)\n         (is-last-char-vowel l)))\n  (define (vowels l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(is-char-vowel l) (+ 1 (vowels (rest l)))]\n   \
    \   [(is-y-vowel l) (+ 1 (vowels (rest l)))]\n      [else (vowels (rest l))]))\n\
    \  (vowels (string->list s)))\n", "  (cond\n    ((empty? s) 0)\n    ((member (first\
    \ s) '#(a e i o u y))\n     (+ 1 (vowels_count (rest s))))\n    (else (vowels_count\
    \ (rest s)))))", "  (define (helper s acc)\n    (cond [(or (string=? (substring\
    \ s 0 1) \"a\")\n               (string=? (substring s 0 1) \"e\")\n         \
    \      (string=? (substring s 0 1) \"i\")\n               (string=? (substring\
    \ s 0 1) \"o\")\n               (string=? (substring s 0 1) \"u\"))\n        \
    \   (helper (substring s 1) (+ acc 1))]\n          [(> (string-length s) 1)\n\
    \           (helper (substring s 1) acc)]\n          [(string=? (substring s 0\
    \ 1) \"y\")\n           (+ acc 1)]\n          [else acc]))\n  (helper s 0))\n",
  "  (define (is-a-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n \
    \ (define (count-preceeding-vowels s i)\n    (if (= i 0)\n        0\n        (if\
    \ (is-a-vowel? (string-ref s (- i 1)))\n            (+ 1 (count-preceeding-vowels\
    \ s (- i 1)))\n            (count-preceeding-vowels s (- i 1)))))\n  (define (count-vowels\
    \ i n)\n    (if (= i n)\n        0\n        (if (is-a-vowel? (string-ref s i))\n\
    \            (+ 1 (count-vowels (+ i 1) n))\n            (count-vowels (+ i 1)\
    \ n))))\n  (define (is-y-a-vowel? s)\n    (if (= (string-length s) 1)\n      \
    \  (is-a-vowel? (string-ref s 0))\n        (is-a-vowel? (string-ref s (- (string-length\
    \ s) 1)))))\n  (cond\n    [(= (string-length s) 0) 0]\n    [(is-y-a-vowel? s)\
    \ (+ 1 (count-preceeding-vowels s (- (string-length s) 1)))]\n    [else (count-vowels\
    \ 0 (string-length s))]))", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(equal? (first s) 'y)\n     (cond\n       [(empty? (rest s)) 1]\n      \
    \ [else (vowels_count (rest s))])]\n    [else (vowels_count (rest s))]))\n", " \
    \ (if (empty? s)\n      0\n      (add1 (vowels_count (rest s)))))\n", "  (define\
    \ (is_vowel c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (define (vowels_count_acc\
    \ s acc)\n    (cond ((empty? s) acc)\n          ((is_vowel (first s)) (vowels_count_acc\
    \ (rest s) (+ acc 1)))\n          (else (vowels_count_acc (rest s) acc))))\n \
    \ (vowels_count_acc s 0))", "  (define (count sofar s)\n    (cond\n      [(empty?\
    \ s) sofar]\n      [(string-ci=? (first s) \"a\") (count (+ sofar 1) (rest s))]\n\
    \      [(string-ci=? (first s) \"e\") (count (+ sofar 1) (rest s))]\n      [(string-ci=?\
    \ (first s) \"i\") (count (+ sofar 1) (rest s))]\n      [(string-ci=? (first s)\
    \ \"o\") (count (+ sofar 1) (rest s))]\n      [(string-ci=? (first s) \"u\") (count\
    \ (+ sofar 1) (rest s))]\n      [(string-ci=? (first s) \"y\") (count (+ sofar\
    \ 1) (rest s))]\n      [else (count sofar (rest s))]))\n  (count 0 s))\n", " \
    \ (define vowels\n    (list #\\a #\\e #\\i #\\o #\\u))\n  (define (vowels-count-inner\
    \ s acc)\n    (cond\n      [(empty? s)\n       acc]\n      [(member (first s)\
    \ vowels)\n       (vowels-count-inner (rest s) (+ acc 1))]\n      [else\n    \
    \   (vowels-count-inner (rest s) acc)]))\n  (vowels-count-inner s 0))\n", "  (local\
    \ ((define (consonant? c)\n            (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"y\")))))\n    (cond ((consonant? (substring s -1))\n           (vowels_count\
    \ (substring s 0 -1)))\n          ((consonant? (substring s 0 1))\n          \
    \ (vowels_count (substring s 1)))\n          (else (+ 1 (vowels_count (substring\
    \ s 1)))))))\n```\n\n```\n#lang racket\n", "  (letrec\n      ((is_vowel? (lambda\
    \ (c)\n                    (or (equal? c #\\a)\n                        (equal?\
    \ c #\\e)\n                        (equal? c #\\i)\n                        (equal?\
    \ c #\\o)\n                        (equal? c #\\u)\n                        (equal?\
    \ c #\\y))))\n       (vowels_count-inner (lambda (s n)\n                     \
    \        (if (empty? s)\n                                 n\n                \
    \                 (if (is_vowel? (first s))\n                                \
    \     (vowels_count-inner (rest s) (+ n 1))\n                                \
    \     (vowels_count-inner (rest s) n))))))\n    (vowels_count-inner s 0)))\n",
  "  (cond ((empty? s) 0)\n        ((symbol=? (first s) 'a)\n         (+ 1 (vowels_count\
    \ (rest s))))\n        ((symbol=? (first s) 'e)\n         (+ 1 (vowels_count (rest\
    \ s))))\n        ((symbol=? (first s) 'i)\n         (+ 1 (vowels_count (rest s))))\n\
    \        ((symbol=? (first s) 'o)\n         (+ 1 (vowels_count (rest s))))\n \
    \       ((symbol=? (first s) 'u)\n         (+ 1 (vowels_count (rest s))))\n  \
    \      ((symbol=? (first s) 'y)\n         (+ 1 (vowels_count (rest s))))\n   \
    \     (else (vowels_count (rest s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(string-contains\
    \ \"aeiouy\" (string-ref s (sub1 (string-length s))))\n     (+ 1 (vowels_count\
    \ (string-take s (sub1 (string-length s)))))]\n    [else (vowels_count (string-take\
    \ s (sub1 (string-length s))))]))\n", "  (cond [(equal? s \"\") 0]\n        [(member\
    \ (string-upper-case (string-ref s 0)) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n   \
    \      (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count (substring\
    \ s 1))]))\n```\n\n``` #lang racket\n", "  (define cnt 0)\n  (define (next i)\n\
    \    (if (= i (string-length s))\n        cnt\n        (if (or (= (string-ref\
    \ s i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (and (= (string-ref s i) #\\y)\n               \
    \      (= i (- (string-length s) 1))))\n            (begin\n              (set!\
    \ cnt (+ cnt 1))\n              (next (+ i 1)))\n            (next (+ i 1)))))\n\
    \  (next 0))\n", "  (length (filter (lambda (ch)\n                    (member\
    \ ch '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n                  (string->list s))))\n",
  "  (list-length (filter (lambda (c) (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\
    \ (string->list s))))\n", "  (if (empty? s)\n      0\n      (if (member (first\
    \ s) '(a e i o u))\n          (+ 1 (vowels_count (rest s)))\n          (if (equal?\
    \ (rest s) '())\n              0\n              (vowels_count (rest s))))))\n",
  "  (define (is_vowel c)\n    (or (= (char-downcase c) #\\a)\n        (= (char-downcase\
    \ c) #\\e)\n        (= (char-downcase c) #\\i)\n        (= (char-downcase c) #\\\
    o)\n        (= (char-downcase c) #\\u)))\n  (define (for_vowels cnt str)\n   \
    \ (cond ((null? str) cnt)\n          ((is_vowel (car str)) (for_vowels (+ cnt\
    \ 1) (cdr str)))\n          (else (for_vowels cnt (cdr str)))))\n  (for_vowels\
    \ 0 s))\n", "  (define (search-vowels s)\n    (cond\n      ((eq? (string-length\
    \ s) 0) '())\n      ((eq? (string-ref s 0) #\\a)\n       (cons (string-ref s 0)\
    \ (search-vowels (substring s 1))))\n      ((eq? (string-ref s 0) #\\e)\n    \
    \   (cons (string-ref s 0) (search-vowels (substring s 1))))\n      ((eq? (string-ref\
    \ s 0) #\\i)\n       (cons (string-ref s 0) (search-vowels (substring s 1))))\n\
    \      ((eq? (string-ref s 0) #\\o)\n       (cons (string-ref s 0) (search-vowels\
    \ (substring s 1))))\n      ((eq? (string-ref s 0) #\\u)\n       (cons (string-ref\
    \ s 0) (search-vowels (substring s 1))))\n      ((eq? (string-ref s 0) #\\y)\n\
    \       (cond\n         ((eq? (string-length s) 1)\n          (cons (string-ref\
    \ s 0) (search-vowels (substring s 1))))\n         (else (search-vowels (substring\
    \ s 1)))))\n      (else (search-vowels (substring s 1)))))\n  (length (search-vowels\
    \ s)))\n", "  (cond ((null? s) 0)\n        ((member (car s) '(#\\a #\\e #\\i #\\\
    o #\\u))\n         (+ 1 (vowels_count (cdr s))))\n        ((and (char=? (car s)\
    \ #\\y) (null? (cdr s)))\n         1)\n        (else (vowels_count (cdr s)))))\n",
  "  (list-length (filter (lambda (x) (or (equal? x #\\a) (equal? x #\\e) (equal?\
    \ x #\\i) (equal? x #\\o) (equal? x #\\u))) (string->list s))))\n", "  (cond\n\
    \    [(and\n      (string-contains s \"y\")\n      (string-contains s \"Y\")\n\
    \      (eq? (substring s (- (string-length s) 1)) \"y\")\n      (eq? (substring\
    \ s (- (string-length s) 1)) \"Y\"))\n     (+ (vowels_count (substring s 0 (-\
    \ (string-length s) 1))) 1)]\n    [(and\n      (string-contains s \"y\")\n   \
    \   (string-contains s \"Y\")\n      (eq? (substring s (- (string-length s) 1))\
    \ \"y\")\n      (eq? (substring s (- (string-length s) 1)) \"Y\"))\n     (+ (vowels_count\
    \ (substring s 0 (- (string-length s) 1))) 1)]\n    [(or\n      (string-contains\
    \ s \"a\")\n      (string-contains s \"e\")\n      (string-contains s \"i\")\n\
    \      (string-contains s \"o\")\n      (string-contains s \"u\")\n      (string-contains\
    \ s \"A\")\n      (string-contains s \"E\")\n      (string-contains s \"I\")\n\
    \      (string-contains s \"O\")\n      (string-contains s \"U\"))\n     (+ (vowels_count\
    \ (substring s 0 (- (string-length s) 1))) 1)]\n    [else\n     0]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) #\\a) (add1 (vowels_count (rest s)))]\n\
    \    [(equal? (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(equal? (first\
    \ s) #\\i) (add1 (vowels_count (rest s)))]\n    [(equal? (first s) #\\o) (add1\
    \ (vowels_count (rest s)))]\n    [(equal? (first s) #\\u) (add1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (equal? (rest s) \"\")) 1]\n\
    \    [else (vowels_count (rest s))]))", "  ;; s: String\n  ;; Returns: number\
    \ of vowels in s\n  (let* ([s (string-upcase s)]\n         [n (string-length s)]\n\
    \         [vowels (string->list \"AEIOU\")])\n    (cond [(empty? s) 0]\n     \
    \     [(and (> n 1) (char=? (string-ref s (- n 1)) #\\Y))\n           (+ (vowels_count\
    \ (substring s 0 (- n 1)))\n              (if (member (string-ref s (- n 2)) vowels)\n\
    \                  0\n                  1))]\n          [else (+ (if (member (string-ref\
    \ s (- n 1)) vowels) 1 0)\n                   (vowels_count (substring s 0 (-\
    \ n 1))))])))\n```\n\n```racket\n#lang racket\n", "  (local ((define (vowels_count-iter\
    \ s n)\n            (cond ((string=? \"\" s) n)\n                  ((or (string=?\
    \ (substring s 0 1) \"a\")\n                       (string=? (substring s 0 1)\
    \ \"e\")\n                       (string=? (substring s 0 1) \"i\")\n        \
    \               (string=? (substring s 0 1) \"o\")\n                       (string=?\
    \ (substring s 0 1) \"u\")\n                       (string=? (substring s 0 1)\
    \ \"y\"))\n                   (vowels_count-iter (substring s 1) (+ n 1)))\n \
    \                 (else (vowels_count-iter (substring s 1) n)))))\n    (vowels_count-iter\
    \ s 0)))\n", "  (cond\n    [(empty? s) 0]\n    [(symbol=? (first s) 'a) (add1\
    \ (vowels_count (rest s)))]\n    [(symbol=? (first s) 'e) (add1 (vowels_count\
    \ (rest s)))]\n    [(symbol=? (first s) 'i) (add1 (vowels_count (rest s)))]\n\
    \    [(symbol=? (first s) 'o) (add1 (vowels_count (rest s)))]\n    [(symbol=?\
    \ (first s) 'u) (add1 (vowels_count (rest s)))]\n    [(symbol=? (first s) 'y)\
    \ (add1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n```\n\
    \n```racket\n#lang racket\n", "  (if (= 1 (string-length s))\n      (if (or (char=?\
    \ (string-ref s 0) #\\a)\n              (char=? (string-ref s 0) #\\e)\n     \
    \         (char=? (string-ref s 0) #\\i)\n              (char=? (string-ref s\
    \ 0) #\\o)\n              (char=? (string-ref s 0) #\\u)\n              (char=?\
    \ (string-ref s 0) #\\y))\n          1\n          0)\n      (if (or (char=? (string-ref\
    \ s 0) #\\a)\n              (char=? (string-ref s 0) #\\e)\n              (char=?\
    \ (string-ref s 0) #\\i)\n              (char=? (string-ref s 0) #\\o)\n     \
    \         (char=? (string-ref s 0) #\\u))\n          (+ 1 (vowels_count (substring\
    \ s 1)))\n          (vowels_count (substring s 1)))))\n", "  (cond [(empty? s)\
    \ 0]\n        [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n         (+\
    \ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n", " \
    \ (cond [(empty? s) 0]\n        [(member (first s) '('a 'e 'i 'o 'u))\n      \
    \   (+ 1 (vowels_count (rest s)))]\n        [(member (first s) '('y))\n      \
    \   (cond [(empty? (rest s)) 1]\n               [else (vowels_count (rest s))])]\n\
    \        [else (vowels_count (rest s))]))\n", "  (define (count s n)\n    (cond\
    \ ((eq? n (string-length s)) 0)\n          ((or (char=? (string-ref s n) #\\a)\n\
    \               (char=? (string-ref s n) #\\e)\n               (char=? (string-ref\
    \ s n) #\\i)\n               (char=? (string-ref s n) #\\o)\n               (char=?\
    \ (string-ref s n) #\\u)\n               (char=? (string-ref s n) #\\y))\n   \
    \        (+ 1 (count s (+ n 1))))\n          (else (count s (+ n 1)))))\n  (count\
    \ s 0))\n", "  (string-count s #\\a #\\e #\\i #\\o #\\u #\\y))\n", "  (define\
    \ (vowels? c)\n    (if (char-ci=? c #\\a) #t\n        (if (char-ci=? c #\\e) #t\n\
    \            (if (char-ci=? c #\\i) #t\n                (if (char-ci=? c #\\o)\
    \ #t\n                    (if (char-ci=? c #\\u) #t\n                        #f))))))\n\
    \  (define (is-last? s)\n    (and (string-empty? (string-tail s 1))\n        \
    \ (vowels? (string-ref s 0))))\n  (define (vowels-count-inner s acc)\n    (if\
    \ (string-empty? s) acc\n        (if (or (vowels? (string-ref s 0))\n        \
    \        (is-last? s))\n            (vowels-count-inner (string-tail s 1) (+ acc\
    \ 1))\n            (vowels-count-inner (string-tail s 1) acc))))\n  (vowels-count-inner\
    \ s 0))\n", "  (let loop ([s s] [count 0])\n    (if (string-empty? s)\n      \
    \  count\n        (let ([c (string-ref s 0)])\n          (if (or (char=? c #\\\
    a)\n                  (char=? c #\\e)\n                  (char=? c #\\i)\n   \
    \               (char=? c #\\o)\n                  (char=? c #\\u)\n         \
    \         (and (char=? c #\\y)\n                       (string-length s)\n   \
    \                    (string-ref s (sub1 (string-length s)))))\n             \
    \ (loop (substring s 1) (+ count 1))\n              (loop (substring s 1) count))))))\n",
  "  (let loop ([s s] [acc 0])\n    (cond\n      [(empty? s) acc]\n      [(match:char:any\
    \ (regexp #rx\"a|e|i|o|u|y\") (first s))\n       (loop (rest s) (+ acc 1))]\n\
    \      [else (loop (rest s) acc)])))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '#(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (member (first s) '#(#\\A #\\E #\\I #\\O #\\U))\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (cond [(empty?\
    \ s) 0]\n        [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n\
    \        [(char-ci=? (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n        [(char-ci=?\
    \ (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n        [(char-ci=? (first s)\
    \ #\\o) (+ 1 (vowels_count (rest s)))]\n        [(char-ci=? (first s) #\\u) (+\
    \ 1 (vowels_count (rest s)))]\n        [(char-ci=? (first s) #\\y) (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  ;; TODO: fill this\
    \ in\n  )\n", "  (cond\n    [(null? s) 0]\n    [(or (char=? (car s) #\\a)\n  \
    \       (char=? (car s) #\\e)\n         (char=? (car s) #\\i)\n         (char=?\
    \ (car s) #\\o)\n         (char=? (car s) #\\u))\n     (+ 1 (vowels_count (cdr\
    \ s)))]\n    [(and (char=? (car s) #\\y)\n          (null? (cdr s)))\n     (+\
    \ 1 (vowels_count (cdr s)))]\n    [else (vowels_count (cdr s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (= (first s) #\\a) (= (first s) #\\e) (= (first\
    \ s) #\\i) (= (first s) #\\o) (= (first s) #\\u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (= (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))", "  (cond\n    [(equal? s \"\") 0]\n    [(member (string-ref s\
    \ 0) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (substring s 1)))]\n\
    \    [else (vowels_count (substring s 1))]))\n```\n\n```racket\n#lang racket\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal?\
    \ (first s) #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s)\
    \ #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (not (equal? (first s) #\\y))\n          (equal? (first s) (last s)))\n\
    \     (vowels_count (rest s))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    ((null? s) 0)\n    ((or (equal? (string-upcase (string-ref s 0)) \"A\")\n\
    \         (equal? (string-upcase (string-ref s 0)) \"E\")\n         (equal? (string-upcase\
    \ (string-ref s 0)) \"I\")\n         (equal? (string-upcase (string-ref s 0))\
    \ \"O\")\n         (equal? (string-upcase (string-ref s 0)) \"U\")\n         (and\
    \ (equal? (string-upcase (string-ref s 0)) \"Y\")\n              (string-length\
    \ s) 1))\n     (+ 1 (vowels_count (substring s 1 (string-length s)))))\n    (else\n\
    \     (vowels_count (substring s 1 (string-length s))))))\n", "  ;; ...\n  (cond\n\
    \    [(empty? s) 0]\n    [(equal? (first s) 'a) (+ 1 (vowels_count (rest s)))]\n\
    \    [(equal? (first s) 'e) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first\
    \ s) 'i) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) 'u) (+ 1 (vowels_count (rest s)))]\n   \
    \ [(equal? (first s) 'y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))", "  (define (vowels-in-s s)\n    (cond ((empty? s) s)\n      \
    \    ((member (first s) '(a e i o u)) (append (first s) (vowels-in-s (rest s))))\n\
    \          (else (vowels-in-s (rest s)))))\n  (define (last-vowel s)\n    (cond\
    \ ((empty? s) '())\n          ((member (first s) '(a e i o u)) (vowels-in-s s))\n\
    \          (else (last-vowel (rest s)))))\n  (if (member (last s) '(a e i o u))\n\
    \      (+ (length (vowels-in-s s)) (length (last-vowel s)))\n      (length (vowels-in-s\
    \ s))))\n</code>\nYou can use a <code>define-values</code> form instead of multiple\
    \ <code>define</code>s.\n<code>#lang racket\n", "  (define vowel-regexp #rx\"\
    [aeiou]\")\n  (define (vowels_count-inner s vcount)\n    (cond [(empty? s) vcount]\n\
    \          [(regexp-match? vowel-regexp (string-ref s 0))\n           (vowels_count-inner\
    \ (substring s 1) (+ vcount 1))]\n          [else (vowels_count-inner (substring\
    \ s 1) vcount)]))\n  (if (empty? s)\n      0\n      (if (string=? (substring s\
    \ -1) \"y\")\n          (vowels_count-inner (substring s 0 -1) 1)\n          (vowels_count-inner\
    \ s 0))))\n", "  (cond\n    [(empty? s) 0]\n    [(equal? (last s) \"y\")\n   \
    \  (+ (if (or (equal? (first s) \"a\")\n                (equal? (first s) \"e\"\
    )\n                (equal? (first s) \"i\")\n                (equal? (first s)\
    \ \"o\")\n                (equal? (first s) \"u\"))\n              1\n       \
    \       0)\n        (vowels_count (butlast s)))]\n    [else\n     (+ (if (or (equal?\
    \ (first s) \"a\")\n                (equal? (first s) \"e\")\n               \
    \ (equal? (first s) \"i\")\n                (equal? (first s) \"o\")\n       \
    \         (equal? (first s) \"u\"))\n              1\n              0)\n     \
    \   (vowels_count (rest s)))]))\n", "  (cond [(empty? s) 0]\n        [(member\
    \ (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count (rest\
    \ s)))]\n        [else (vowels_count (rest s))]))\n", "  (let loop ([s s] [vowels\
    \ 0])\n    (cond\n      [(empty? s) vowels]\n      [(or\n         (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u)\n        \
    \ (and (char=? (first s) #\\y) (empty? (rest s))))\n       (loop (rest s) (+ vowels\
    \ 1))]\n      [else (loop (rest s) vowels)])))", "  (cond\n    [(string=? s \"\
    \") 0]\n    [(string-member (substring s 0 1) \"aeiouy\")\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n", "  (let\
    \ ((l (string->list s)))\n    (if (null? l)\n        0\n        (if (or (char=?\
    \ (car l) #\\a)\n                (char=? (car l) #\\e)\n                (char=?\
    \ (car l) #\\i)\n                (char=? (car l) #\\o)\n                (char=?\
    \ (car l) #\\u)\n                (and (char=? (car l) #\\y)\n                \
    \     (null? (cdr l))))\n            (+ 1 (vowels_count (list->string (cdr l))))\n\
    \            (vowels_count (list->string (cdr l)))))))\n", "  (length (filter\
    \ (lambda (x) (or (eq? x #\\a) (eq? x #\\e) (eq? x #\\i) (eq? x #\\o) (eq? x #\\\
    u))) (string->list s))))\n", "  (count-if (lambda (c) (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))) (string->list s)))\n", "  (cond [(string=? s \"\") 0]\n\
    \        [(string-contains? \"aeiou\" (string-downcase (string (string-ref s 0))))\n\
    \         (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count (substring\
    \ s 1))]))\n\n", "  (define VOWELS '(#\\a #\\e #\\i #\\o #\\u))\n  (define (is-vowel?\
    \ c)\n    (memq c VOWELS))\n  (define (vowels-count-aux s)\n    (cond\n      ((null?\
    \ s) 0)\n      ((is-vowel? (car s))\n       (+ 1 (vowels-count-aux (cdr s))))\n\
    \      (else (vowels-count-aux (cdr s)))))\n  (if (is-vowel? (string-ref s (-\
    \ (string-length s) 1)))\n      (+ 1 (vowels-count-aux (substring s 0 (- (string-length\
    \ s) 1))))\n      (vowels-count-aux s)))\n", "  ;; state machine for vowels\n\
    \  (define (is-vowel c)\n    (cond ((or (eq? c #\\a) (eq? c #\\e) (eq? c #\\i)\
    \ (eq? c #\\o) (eq? c #\\u)) #t)\n          ((and (eq? c #\\y) (eq? (string-ref\
    \ s (sub1 (string-length s))) #\\y)) #t)\n          (else #f)))\n  (for/sum ([c\
    \ (in-string s)])\n    (if (is-vowel c) 1 0)))\n", "  (if (empty? s)\n      0\n\
    \      (vowels_count-helper (string-&gt;list s))))\n", "  (cond [(empty? s) 0]\n\
    \        [(or (member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          \
    \   (and (member (first s) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n               \
    \   (last? s)))\n         (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count\
    \ (rest s))]))", "  (if (string=? \"\" s)\n      0\n      (if (string-contains\
    \ \"aeiou\" (string-ref s 0))\n          (+ 1 (vowels_count (substring s 1)))\n\
    \          (vowels_count (substring s 1)))))\n", "  (if (string=? s \"\")\n  \
    \    0\n      (if (char-vowel? (string-ref s 0))\n          (+ 1 (vowels_count\
    \ (substring s 1)))\n          (vowels_count (substring s 1)))))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (accumulate\
    \ + 0 (map (lambda (c) (if (is-vowel? c) 1 0)) (string->list s))))\n", "  (let\
    \ loop ([l (string->list s)]\n             [acc 0])\n    (cond [(empty? l) acc]\n\
    \          [(memq (car l) '(#\\a #\\e #\\i #\\o #\\u))\n           (loop (cdr\
    \ l) (+ acc 1))]\n          [(and (memq (car l) '(#\\A #\\E #\\I #\\O #\\U))\n\
    \                (or (empty? (cdr l))\n                    (not (string-contains\
    \ \"aeiou\" (list->string (cdr l))))))\n           (loop (cdr l) (+ acc 1))]\n\
    \          [else (loop (cdr l) acc)])))\n", "  (length (filter (lambda (char)\n\
    \                    (not (not (member char '(\"a\" \"e\" \"i\" \"o\" \"u\" \"\
    y\")))))\n                  (string->list s))))\n", "  (define (vowels_count-h\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(or (string=? (first s) \"a\")\n\
    \           (string=? (first s) \"e\")\n           (string=? (first s) \"i\")\n\
    \           (string=? (first s) \"o\")\n           (string=? (first s) \"u\"))\n\
    \       (+ 1 (vowels_count-h (rest s)))]\n      [(and (string=? (first s) \"y\"\
    )\n            (empty? (rest s)))\n       (+ 1 (vowels_count-h (rest s)))]\n \
    \     [else (vowels_count-h (rest s))]))\n  (vowels_count-h s))", "  (define (vowels-in-str\
    \ s)\n    (cond\n      ((null? s) '())\n      ((char-ci=? (car s) #\\a) (cons\
    \ #\\a (vowels-in-str (cdr s))))\n      ((char-ci=? (car s) #\\e) (cons #\\e (vowels-in-str\
    \ (cdr s))))\n      ((char-ci=? (car s) #\\i) (cons #\\i (vowels-in-str (cdr s))))\n\
    \      ((char-ci=? (car s) #\\o) (cons #\\o (vowels-in-str (cdr s))))\n      ((char-ci=?\
    \ (car s) #\\u) (cons #\\u (vowels-in-str (cdr s))))\n      ((char-ci=? (car s)\
    \ #\\y) (cons #\\y (vowels-in-str (cdr s))))\n      (else (vowels-in-str (cdr\
    \ s)))))\n  (length (vowels-in-str s)))\n", "  (if (string=? s \"\")\n      0\n\
    \      (if (string-contains \"aeiouy\" (string-ref s 0))\n          (+ 1 (vowels_count\
    \ (substring s 1)))\n          (vowels_count (substring s 1)))))\n", "  (letrec\
    \ ((vowels (lambda (s)\n                     (cond\n                       [(null?\
    \ s) 0]\n                       [(member (car s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \                        (+ 1 (vowels (cdr s)))]\n                       [(and\
    \ (member (car s) '(#\\y))\n                             (null? (cdr s)))\n  \
    \                      (+ 1 (vowels (cdr s)))]\n                       [else (vowels\
    \ (cdr s))]\n                       ))))\n    (vowels (string->list (string-upcase\
    \ s)))))\n", "  ;; your code here\n  )\n```\n\n### Question 2\n\nWrite a function\
    \ max_count which takes an integer n as input and returns the\nmaximum number\
    \ of repetitions of a character in the first n characters of the\nstring \"abracadabra\"\
    .\n\nThe output of your function should be:\n\n```racket\n>>> (max_count 0)\n\
    0\n>>> (max_count 1)\n1\n>>> (max_count 3)\n2\n>>> (max_count 5)\n2\n>>> (max_count\
    \ 10)\n3\n>>> (max_count 20)\n4\n```\n\nRelevant syntax:\n\n1. `string-length`\n\
    2. `string-ref`\n3. `string=?`\n\n```racket\n#lang racket\n", "  (define (vowels_count/helper\
    \ s i l c)\n    (cond\n      [(empty? s) c]\n      [(string-length s) l]\n   \
    \   [(member (string-ref s i) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))\n      \
    \ (vowels_count/helper s (+ i 1) l (+ c 1))]\n      [else (vowels_count/helper\
    \ s (+ i 1) l c)]))\n  (vowels_count/helper s 0 (string-length s) 0))\n", "  ;;\
    \ write your code here\n  )\n", "  (let loop ([s s] [count 0])\n    (cond\n  \
    \    [(empty? s) count]\n      [(char-set=? (string->char-set \"aeiouy\") (string->char-set\
    \ (string s)))\n       (loop (rest s) (+ count 1))]\n      [else (loop (rest s)\
    \ count)])))", "  (cond\n    [(string=? \"\" s) 0]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (cond\n       [(or (char=? (string-ref s 0) #\\a)\n            (char=?\
    \ (string-ref s 0) #\\e)\n            (char=? (string-ref s 0) #\\i)\n       \
    \     (char=? (string-ref s 0) #\\o)\n            (char=? (string-ref s 0) #\\\
    u))\n        (+ 1 (vowels_count (substring s 1)))]\n       [else (vowels_count\
    \ (substring s 1))])]\n    [else (vowels_count (substring s 1))]))\n", "  (define\
    \ (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (if (null? s)\n\
    \      0\n      (if (is-vowel (car s))\n          (+ 1 (vowels_count (cdr s)))\n\
    \          (vowels_count (cdr s)))))\n", "  (define (helper s acc)\n    (if (null?\
    \ s)\n        acc\n        (if (or (equal? (car s) #\\a)\n                (equal?\
    \ (car s) #\\e)\n                (equal? (car s) #\\i)\n                (equal?\
    \ (car s) #\\o)\n                (equal? (car s) #\\u)\n                (equal?\
    \ (car s) #\\y))\n            (helper (cdr s) (+ acc 1))\n            (helper\
    \ (cdr s) acc))))\n  (if (and (not (null? s))\n           (equal? (car (reverse\
    \ s)) #\\y))\n      (helper (reverse (cdr (reverse s))) (+ 1 (helper (reverse\
    \ (cdr (reverse s))) 0)))\n      (helper (reverse (cdr (reverse s))) (helper (reverse\
    \ (cdr (reverse s))) 0))))\n\n", "  (define (is-vowel? c)\n    (or (= (string-ci=?\
    \ c \"a\") #t)\n        (= (string-ci=? c \"e\") #t)\n        (= (string-ci=?\
    \ c \"i\") #t)\n        (= (string-ci=? c \"o\") #t)\n        (= (string-ci=?\
    \ c \"u\") #t)))\n  (define (is-y? c)\n    (and (= (string-ci=? c \"y\") #t)\n\
    \         (= (string-length s) (add1 (string-length c)))))\n  (define (count index)\n\
    \    (cond\n      [(= index (string-length s)) 0]\n      [(or (is-vowel? (string-ref\
    \ s index))\n           (is-y? (string-ref s index)))\n       (add1 (count (add1\
    \ index)))]\n      [else (count (add1 index))]))\n  (count 0))\n", "  (if (string=?\
    \ s \"\")\n      0\n      (define first-char (string-ref s 0))\n      (if (or\
    \ (= first-char #\\a) (= first-char #\\e) (= first-char #\\i) (= first-char #\\\
    o) (= first-char #\\u))\n          (+ 1 (vowels_count (substring s 1)))\n    \
    \      (vowels_count (substring s 1)))))\n```\n\n```\n#lang racket\n", "  (let*\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n         [lst (string->list s)]\n\
    \         [last (list-ref lst (- (string-length s) 1))])\n    (if (and (member\
    \ last vowels)\n             (member (char-upcase last) vowels))\n        (+ (count_vowels\
    \ lst vowels) 1)\n        (count_vowels lst vowels))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (member (first s) '('a 'e 'i 'o 'u)) (add1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n```\n\n```racket\n#lang racket\n", "  (letrec ([vowels (list #\\\
    a #\\e #\\i #\\o #\\u #\\y)]\n           [count (lambda (s count)\n          \
    \          (cond [(empty? s) count]\n                          [(member (first\
    \ s) vowels)\n                           (count (rest s) (+ count 1))]\n     \
    \                     [else (count (rest s) count)]))])\n    (count s 0)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (member (first s) '(#\\A #\\E\
    \ #\\I #\\O #\\U)) (equal? (rest s) empty))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n\n", "  (cond [(empty? s) 0]\n        [(equal?\
    \ (first s) 'a)\n         (+ 1 (vowels_count (rest s)))]\n        [(equal? (first\
    \ s) 'e)\n         (+ 1 (vowels_count (rest s)))]\n        [(equal? (first s)\
    \ 'i)\n         (+ 1 (vowels_count (rest s)))]\n        [(equal? (first s) 'o)\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(equal? (first s) 'u)\n   \
    \      (+ 1 (vowels_count (rest s)))]\n        [(equal? (first s) 'y)\n      \
    \   (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (length\
    \ (filter is_vowel? (string->list s))))\n", "  (cond\n    [(string=? s \"\") 0]\n\
    \    [(string-contains \"aeiou\" (string-ref s 0))\n     (+ 1 (vowels_count (string-tail\
    \ s 1)))]\n    [(and (string=? (string-ref s (- (string-length s) 1)) \"y\")\n\
    \          (string-contains \"aeiou\" (string-ref s 0)))\n     (+ 1 (vowels_count\
    \ (string-tail s 1)))]\n    [else (vowels_count (string-tail s 1))]))\n```\n\n\
    ```\n#lang racket\n", "  (cond [(empty? s) 0]\n        [(or (equal? (first s)\
    \ 'a)\n             (equal? (first s) 'e)\n             (equal? (first s) 'i)\n\
    \             (equal? (first s) 'o)\n             (equal? (first s) 'u)) (+ 1\
    \ (vowels_count (rest s)))]\n        [(and (equal? (first s) 'y') (empty? (rest\
    \ s))) (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count (rest s))]))\n",
  "  (let loop ([i (string-length s)] [v 0])\n    (cond [(= i 0) v]\n          [(member\
    \ (string-ref s (- i 1)) \"aeiou\")\n           (loop (- i 1) (+ v 1))]\n    \
    \      [(and (= i 1) (string-ref s 0) #\\y)\n           (loop (- i 1) (+ v 1))]\n\
    \          [else (loop (- i 1) v)])))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-last-char-y? c)\n    (char=?\
    \ c #\\y))\n  (define (vowels_count* s)\n    (let ([chars (string->list s)])\n\
    \      (cond [(empty? chars)\n             0]\n            [(is-vowel? (first\
    \ chars))\n             (+ 1 (vowels_count* (rest chars)))]\n            [(is-last-char-y?\
    \ (first chars))\n             (+ 1 (vowels_count* (rest chars)))]\n         \
    \   [else\n             (vowels_count* (rest chars))])))\n  (vowels_count* s))\n",
  "  (cond [(empty? s) 0]\n        [(member (first s) '#(#\\a #\\e #\\i #\\o #\\u))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(string=? (first s) #\\y)\n\
    \         (if (empty? (rest s)) 1 0)]\n        [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(member (first s) '(#\\A #\\E #\\I\
    \ #\\O #\\U))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\\
    y)\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\Y)\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (is_vowel c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (define (is_vowel-y\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\")))\n  (define (get-last\
    \ s)\n    (string-ref s (- (string-length s) 1)))\n  (define (get-rest s)\n  \
    \  (substring s 0 (- (string-length s) 1)))\n  (if (= (string-length s) 1)\n \
    \     (if (is_vowel (string-downcase (string s))) 1 0)\n      (if (is_vowel-y\
    \ (string-downcase (string s)))\n          (+ 1 (vowels_count (get-rest s)))\n\
    \          (vowels_count (get-rest s)))))\n", "  (define (helper s count)\n  \
    \  (if (null? s)\n        count\n        (if (member (car s) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))\n            (helper (cdr s) (+ count 1))\n            (helper\
    \ (cdr s) count))))\n  (if (null? s)\n      0\n      (if (member (car (reverse\
    \ s)) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          (helper s 1)\n          (helper\
    \ s 0))))\n", "  (define (is-vowel c)\n    (define (is-lower-vowel c)\n      (or\
    \ (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u)))\n    (define (is-upper-vowel\
    \ c)\n      (or (= c #\\A) (= c #\\E) (= c #\\I) (= c #\\O) (= c #\\U)))\n   \
    \ (or (is-lower-vowel c) (is-upper-vowel c)))\n  (define (is-y c)\n    (or (=\
    \ c #\\y) (= c #\\Y)))\n  (define (count-vowels s)\n    (if (empty? s)\n     \
    \   0\n        (if (or (is-vowel (first s)) (and (is-y (first s)) (is-vowel (second\
    \ s))))\n            (+ 1 (count-vowels (rest s)))\n            (count-vowels\
    \ (rest s)))))\n  (if (and (not (empty? s)) (is-y (last s)))\n      (+ 1 (count-vowels\
    \ (butlast s)))\n      (count-vowels s)))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(vowel? (first s)) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (= (first s) #\\a) (=\
    \ (first s) #\\e) (= (first s) #\\i) (= (first s) #\\o) (= (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(or (= (first s) #\\A) (= (first s)\
    \ #\\E) (= (first s) #\\I) (= (first s) #\\O) (= (first s) #\\U))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(or (= (first s) #\\y) (= (first s) #\\Y))\n     (if (empty?\
    \ (rest s))\n         1\n         (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))", "  (let loop ([len (string-length s)]\n             [count 0])\n\
    \    (cond\n      [(zero? len) count]\n      [(or (char=? (string-ref s (- len\
    \ 1)) #\\a)\n           (char=? (string-ref s (- len 1)) #\\e)\n           (char=?\
    \ (string-ref s (- len 1)) #\\i)\n           (char=? (string-ref s (- len 1))\
    \ #\\o)\n           (char=? (string-ref s (- len 1)) #\\u)\n           (char=?\
    \ (string-ref s (- len 1)) #\\y))\n       (loop (- len 1) (+ count 1))]\n    \
    \  [else (loop (- len 1) count)])))\n", "  (define (is_vowel? c)\n    (or (string=?\
    \ c \"a\")\n        (string=? c \"e\")\n        (string=? c \"i\")\n        (string=?\
    \ c \"o\")\n        (string=? c \"u\")\n        (string=? c \"y\")))\n  (define\
    \ (iter i n)\n    (if (> i (string-length s))\n        n\n        (if (is_vowel?\
    \ (string-ref s i))\n            (iter (+ i 1) (+ n 1))\n            (iter (+\
    \ i 1) n))))\n  (if (string=? (string-ref s (- (string-length s) 1)) \"y\")\n\
    \      (iter 0 1)\n      (iter 0 0)))\n", "  (define vowels '(#\\a #\\e #\\i #\\\
    o #\\u))\n  (define (vowels_count-i s i)\n    (cond\n      [(= i (- (string-length\
    \ s) 1)) (if (member (string-ref s i) vowels)\n                              \
    \            1\n                                          0)]\n      [(member\
    \ (string-ref s i) vowels) (+ 1 (vowels_count-i s (+ i 1)))]\n      [else (vowels_count-i\
    \ s (+ i 1))]))\n  (vowels_count-i s 0))\n", "  (define (is_vowel c)\n    (or\
    \ (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal?\
    \ c #\\o)\n        (equal? c #\\u)))\n  (define (is_end_vowel c)\n    (and (equal?\
    \ c #\\y)\n         (equal? (substring s (sub1 (string-length s)) (string-length\
    \ s)) #\\y)))\n  (if (string-empty? s)\n      0\n      (+ (if (or (is_vowel (string-ref\
    \ s 0))\n                (is_end_vowel (string-ref s 0)))\n             1\n  \
    \           0)\n         (vowels_count (substring s 1 (string-length s))))))\n",
  "  (define (vowels-in-str str)\n    (define (helper curr)\n      (if (empty? curr)\
    \ str\n        (if (or (equal? (first curr) 'a)\n                (equal? (first\
    \ curr) 'e)\n                (equal? (first curr) 'i)\n                (equal?\
    \ (first curr) 'o)\n                (equal? (first curr) 'u))\n            (helper\
    \ (rest curr))\n            (helper (cons (first curr) (rest curr))))))\n    (helper\
    \ (str->list str)))\n  (define (vowels-in-chars s)\n    (if (empty? s) 0\n   \
    \   (if (or (equal? (first s) 'a)\n              (equal? (first s) 'e)\n     \
    \         (equal? (first s) 'i)\n              (equal? (first s) 'o)\n       \
    \       (equal? (first s) 'u))\n          (+ 1 (vowels-in-chars (rest s)))\n \
    \         (vowels-in-chars (rest s)))))\n  (if (equal? (last-symbol (vowels-in-str\
    \ s)) 'y)\n      (+ 1 (vowels-in-chars (vowels-in-str s)))\n      (vowels-in-chars\
    \ (vowels-in-str s))))\n", "  (local\n    [(define (vowels-inner s counter)\n\
    \       (if (or (null? s) (char=? (car s) #\\)) (string-ci=? s \"y\"))\n     \
    \      counter\n           (vowels-inner (cdr s)\n                         (if\
    \ (or (char=? (car s) #\\a)\n                                 (char=? (car s)\
    \ #\\e)\n                                 (char=? (car s) #\\i)\n            \
    \                     (char=? (car s) #\\o)\n                                \
    \ (char=? (car s) #\\u))\n                             (+ counter 1)\n       \
    \                      counter))))]\n    (vowels-inner s 0)))\n", "  (length (regexp-match\
    \ #rx\"a|e|i|o|u|y$\" s)))\n", "  (cond\n    [(empty? s) 0]\n    [(in-set-char?\
    \ (string-ref s 0) \"aeiou\")\n     (+ 1 (vowels_count (substring s 1)))]\n  \
    \  [(in-set-char? (string-ref s 0) \"AEIOU\")\n     (+ 1 (vowels_count (substring\
    \ s 1)))]\n    [(in-set-char? (string-ref s 0) \"yY\")\n     (if (empty? (substring\
    \ s 1))\n         1\n         (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n```\n\n```racket\n#lang racket\n", "  (letrec ([is_vowel?\
    \ (lambda (c)\n                        (string-contains? \"aeiouy\" c))]\n   \
    \        [count (lambda (cs n)\n                    (cond [(empty? cs) n]\n  \
    \                        [(is_vowel? (first cs))\n                           (count\
    \ (rest cs) (+ n 1))]\n                          [else (count (rest cs) n)]))])\n\
    \    (if (equal? (length s) 1)\n        (if (is_vowel? (first s)) 1 0)\n     \
    \   (count (rest s) (if (is_vowel? (first s)) 1 0)))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char=? (first s) #\\y) (empty? (rest s))) 1]\n    [(member\
    \ (char-upcase (first s)) '(#\\A #\\E #\\I #\\O #\\U #\\Y))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (help (n i)\
    \ (w l))\n    (cond ((= i l) n)\n          ((char-ci=? (string-ref w i) #\\a)\
    \ (help (+ n 1) (+ i 1) l))\n          ((char-ci=? (string-ref w i) #\\e) (help\
    \ (+ n 1) (+ i 1) l))\n          ((char-ci=? (string-ref w i) #\\i) (help (+ n\
    \ 1) (+ i 1) l))\n          ((char-ci=? (string-ref w i) #\\o) (help (+ n 1) (+\
    \ i 1) l))\n          ((char-ci=? (string-ref w i) #\\u) (help (+ n 1) (+ i 1)\
    \ l))\n          ((and (= i (- l 1)) (char-ci=? (string-ref w i) #\\y)) (help\
    \ (+ n 1) (+ i 1) l))\n          (else (help n (+ i 1) l))))\n  (help 0 0 (string-length\
    \ s)))\n", "  (length (remove (lambda (c) (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\y)))) s)))\n", "  (cond [(string=? s \"\") 0]\n        [(string-contains\
    \ \"aeiou\" (string-ref s (- (string-length s) 1)))\n         (+ 1 (vowels_count\
    \ (substring s 0 (- (string-length s) 1))))]\n        [else (vowels_count (substring\
    \ s 0 (- (string-length s) 1)))]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\\
    o #\\u)])\n    (for/sum ([i (in-range (string-length s))])\n      (if (member\
    \ (string-ref s i) vowels)\n          1\n          0))))\n", "  (define (count-vowels-helper\
    \ s acc)\n    (if (empty? s)\n        acc\n        (let ([c (first s)])\n    \
    \      (if (or (char=? c #\\a)\n                  (char=? c #\\e)\n          \
    \        (char=? c #\\i)\n                  (char=? c #\\o)\n                \
    \  (char=? c #\\u)\n                  (char=? c #\\y))\n              (count-vowels-helper\
    \ (rest s) (+ acc 1))\n              (count-vowels-helper (rest s) acc)))))\n\
    \  (if (empty? s)\n      0\n      (if (char=? (last s) #\\y)\n          (count-vowels-helper\
    \ (butlast s) 1)\n          (count-vowels-helper (butlast s) 0))))\n\n", "  (let\
    \ ((vowels '(#\\a #\\e #\\i #\\o #\\u)))\n    (for/sum ([v (in-list vowels)])\n\
    \              (count v s))))\n", "  ;; the acc is the current count, and the\
    \ current character is the one\n  ;; at the head of the list, rest is the remaining\
    \ list\n  (define (myloop acc s)\n    (cond\n      [(empty? s) acc]\n      [else\
    \ (myloop (+ acc (vowel-count (first s))) (rest s))]))\n  (myloop 0 s))\n", " \
    \ (cond [(string=? s \"\") 0]\n        [(or (char=? (string-ref s 0) #\\a)\n \
    \            (char=? (string-ref s 0) #\\e)\n             (char=? (string-ref\
    \ s 0) #\\i)\n             (char=? (string-ref s 0) #\\o)\n             (char=?\
    \ (string-ref s 0) #\\u))\n         (+ 1 (vowels_count (substring s 1)))]\n  \
    \      [(and (char=? (string-ref s 0) #\\y) (string=? (substring s 1) \"\"))\n\
    \         (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count (substring\
    \ s 1))]))\n", "  (define (vowels_count-inner s acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\\
    e)\n           (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n \
    \          (char=? (first s) #\\u))\n       (vowels_count-inner (rest s) (+ acc\
    \ 1))]\n      [(and (char=? (first s) #\\y)\n            (not (empty? (rest s))))\n\
    \       (vowels_count-inner (rest s) (+ acc 1))]\n      [else (vowels_count-inner\
    \ (rest s) acc)]))\n  (vowels_count-inner s 0))\n", "  (if (null? s)\n      0\n\
    \      (if (member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n          (+ 1 (vowels_count\
    \ (rest s)))\n          (vowels_count (rest s)))))\n", "  (define (is-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) true]\n      [(char=? c #\\e) true]\n     \
    \ [(char=? c #\\i) true]\n      [(char=? c #\\o) true]\n      [(char=? c #\\u)\
    \ true]\n      [(char=? c #\\y) true]\n      [else false]))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n      [else (count-vowels (rest s))]))\n  (count-vowels s))", " \
    \ (if (null? s)\n      0\n      (if (or (char=? (car s) #\\a)\n              (char=?\
    \ (car s) #\\e)\n              (char=? (car s) #\\i)\n              (char=? (car\
    \ s) #\\o)\n              (char=? (car s) #\\u)\n              (and (char=? (car\
    \ s) #\\y)\n                   (null? (cdr s))))\n          (+ 1 (vowels_count\
    \ (cdr s)))\n          (vowels_count (cdr s)))))\n", "  (cond [(null? s) 0]\n\
    \        [(or (string=? (substring s 0 1) \"a\")\n             (string=? (substring\
    \ s 0 1) \"e\")\n             (string=? (substring s 0 1) \"i\")\n           \
    \  (string=? (substring s 0 1) \"o\")\n             (string=? (substring s 0 1)\
    \ \"u\")) (+ 1 (vowels_count (substring s 1)))]\n        [(and (string=? (substring\
    \ s -1) \"y\") (not (null? (substring s 0 -1)))) (+ 1 (vowels_count (substring\
    \ s 0 -1)))]\n        [else (vowels_count (substring s 1))]))", "  (letrec ((vowels\
    \ (lambda (c)\n                     (string-contains \"aeiouy\" c))))\n    (cond\n\
    \      [(string=? \"\" s) 0]\n      [(or (vowels (string-ref s 0))\n         \
    \  (and (string=? (string-ref s 0) #\\y)\n                (string=? (substring\
    \ s 1) \"\")))\n       (+ 1 (vowels_count (substring s 1)))]\n      [else (vowels_count\
    \ (substring s 1))])))\n</code>\nI wonder if there's a more concise or elegant\
    \ way to do this using <code>map</code> or <code>fold</code> or an equivalent.\n\
    Thank you for your help!\n\n\nA:\n\nHere is a way that could be more elegant if\
    \ you use <code>regexp-match</code> (since it makes the code a lot shorter). One\
    \ caveat: I didn't use it to check for y at the end, but you can extend it easily.\n\
    <code>(define (vowels-count s)\n  (regexp-match #rx\"[aeiouy]+\" s))\n</code>\n\
    But, I think this kind of regexp is not good:\n<code>(define (vowels-count s)\n\
    \  (regexp-match #rx\"[aeiouy]{1,}\" s))\n</code>\nbecause you are going to count\
    \ <code>aa</code> as <code>1</code> while it should be <code>2</code>. So, you\
    \ should use it this way:\n<code>(define (vowels-count s)\n  (regexp-match #rx\"\
    ([aeiouy])\" s))\n</code>\nor simply:\n<code>(define (vowels-count s)\n  (regexp-match\
    \ #rx\"[aeiouy]\" s))\n</code>\n", "  (define (helper i count)\n    (cond\n  \
    \    [(= i (string-length s)) count]\n      [(= (string-ref s i) #\\a) (helper\
    \ (+ i 1) (+ count 1))]\n      [(= (string-ref s i) #\\e) (helper (+ i 1) (+ count\
    \ 1))]\n      [(= (string-ref s i) #\\i) (helper (+ i 1) (+ count 1))]\n     \
    \ [(= (string-ref s i) #\\o) (helper (+ i 1) (+ count 1))]\n      [(= (string-ref\
    \ s i) #\\u) (helper (+ i 1) (+ count 1))]\n      [(= (string-ref s i) #\\y)\n\
    \       (if (= i (- (string-length s) 1))\n           (helper (+ i 1) (+ count\
    \ 1))\n           (helper (+ i 1) count))]\n      [else (helper (+ i 1) count)]))\n\
    \  (helper 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u)) (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (vowels-count-iter ss)\n    (cond\n      [(empty? ss) 0]\n      [(member?\
    \ (first ss) '(#\\a #\\e #\\i #\\o #\\u)) (+ 1 (vowels-count-iter (rest ss)))]\n\
    \      [(and (equal? (first ss) #\\y) (empty? (rest ss))) 1]\n      [else (vowels-count-iter\
    \ (rest ss))]))\n  (vowels-count-iter (string->list s)))", "  (cond ((equal? s\
    \ \"\") 0)\n        ((equal? (char-downcase (string-ref s 0)) 'a)\n         (+\
    \ 1 (vowels_count (substring s 1))))\n        ((equal? (char-downcase (string-ref\
    \ s 0)) 'e)\n         (+ 1 (vowels_count (substring s 1))))\n        ((equal?\
    \ (char-downcase (string-ref s 0)) 'i)\n         (+ 1 (vowels_count (substring\
    \ s 1))))\n        ((equal? (char-downcase (string-ref s 0)) 'o)\n         (+\
    \ 1 (vowels_count (substring s 1))))\n        ((equal? (char-downcase (string-ref\
    \ s 0)) 'u)\n         (+ 1 (vowels_count (substring s 1))))\n        ((equal?\
    \ (char-downcase (string-ref s 0)) 'y)\n         (+ 1 (vowels_count (substring\
    \ s 1))))\n        (else (vowels_count (substring s 1)))))", "  (let recur ((s\
    \ s) (c 0))\n    (cond ((null? s) c)\n          ((member (car s) '(#\\a #\\e #\\\
    i #\\o #\\u))\n           (recur (cdr s) (+ c 1)))\n          ((and (pair? (cdr\
    \ s)) (null? (cddr s))\n                (member (car s) '(#\\a #\\e #\\i #\\o\
    \ #\\u #\\y)))\n           (recur (cdr s) (+ c 1)))\n          (else (recur (cdr\
    \ s) c)))))\n", "  (if (empty? s)\n      0\n      (cond\n       ((or (equal? (first\
    \ s) #\\a)\n            (equal? (first s) #\\e)\n            (equal? (first s)\
    \ #\\i)\n            (equal? (first s) #\\o)\n            (equal? (first s) #\\\
    u))\n        (+ 1 (vowels_count (rest s))))\n       ((and (equal? (first s) #\\\
    y)\n             (empty? (rest s)))\n        (+ 1 (vowels_count (rest s))))\n\
    \       (else\n        (vowels_count (rest s))))))\n", "  (let ([l (string->list\
    \ s)])\n    (cond [(empty? l) 0]\n          [(member (first l) '(#\\a #\\e #\\\
    i #\\o #\\u))\n           (+ 1 (vowels_count (rest l)))]\n          [(and (char=?\
    \ (first l) #\\y) (empty? (rest l))) 1]\n          [else (vowels_count (rest l))])))\n",
  "  (define (vowels-count-iter counter n)\n    (if (= n 0)\n        counter\n   \
    \     (if (or (string=? (substring s (- n 1) n) \"a\")\n                (string=?\
    \ (substring s (- n 1) n) \"e\")\n                (string=? (substring s (- n\
    \ 1) n) \"i\")\n                (string=? (substring s (- n 1) n) \"o\")\n   \
    \             (string=? (substring s (- n 1) n) \"u\")\n                (string=?\
    \ (substring s (- n 1) n) \"y\"))\n            (vowels-count-iter (+ counter 1)\
    \ (- n 1))\n            (vowels-count-iter counter (- n 1)))))\n  (vowels-count-iter\
    \ 0 (string-length s)))\n", "  (cond ((string=? s \"\") 0)\n        ((or (string=?\
    \ (substring s -1) \"a\")\n             (string=? (substring s -1) \"e\")\n  \
    \           (string=? (substring s -1) \"i\")\n             (string=? (substring\
    \ s -1) \"o\")\n             (string=? (substring s -1) \"u\")\n             (string=?\
    \ (substring s -1) \"y\"))\n         (+ 1 (vowels_count (substring s 0 -1))))\n\
    \        (else (vowels_count (substring s 0 -1)))))\n", "  (cond ((or (equal?\
    \ (substring s -1 (string-length s)) \"a\")\n             (equal? (substring s\
    \ -1 (string-length s)) \"e\")\n             (equal? (substring s -1 (string-length\
    \ s)) \"i\")\n             (equal? (substring s -1 (string-length s)) \"o\")\n\
    \             (equal? (substring s -1 (string-length s)) \"u\"))\n         (+\
    \ (vowels_count (substring s 0 (- (string-length s) 1))) 1))\n        ((equal?\
    \ (substring s -1 (string-length s)) \"y\")\n         (vowels_count (substring\
    \ s 0 (- (string-length s) 1))))\n        ((or (equal? (substring s 0 1) \"a\"\
    )\n             (equal? (substring s 0 1) \"e\")\n             (equal? (substring\
    \ s 0 1) \"i\")\n             (equal? (substring s 0 1) \"o\")\n             (equal?\
    \ (substring s 0 1) \"u\"))\n         (+ (vowels_count (substring s 1 (string-length\
    \ s))) 1))\n        (else (vowels_count (substring s 1 (string-length s))))))\n",
  "  (define vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n  (define (count-vowels s)\n\
    \    (if (string-empty? s)\n        0\n        (if (member (string-append (substring\
    \ s 0 1)) vowels)\n            (+ 1 (count-vowels (substring s 1)))\n        \
    \    (count-vowels (substring s 1)))))\n  (if (member (string-append (substring\
    \ s -1)) vowels)\n      (+ 1 (count-vowels (substring s 0 -1)))\n      (count-vowels\
    \ (substring s 0 -1))))\n", "  (let* ([s (string-downcase s)]\n         [vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u)]\n         [pred (lambda (c) (if (and (equal?\
    \ (string-ref s (- (string-length s) 1)) #\\y)\n                             \
    \       (equal? c #\\y))\n                               #t\n                \
    \               (member c vowels)))])\n    (list-length (filter pred (string->list\
    \ s)))))\n", "  (if (= (string-length s) 0)\n      0\n      (if (string-member\
    \ (substring s 0 1) \"aeiou\")\n          (+ 1 (vowels_count (substring s 1)))\n\
    \          (vowels_count (substring s 1)))))\n", "  (define (vowels-p ch)\n  \
    \  (or (string=? ch \"a\")\n        (string=? ch \"e\")\n        (string=? ch\
    \ \"i\")\n        (string=? ch \"o\")\n        (string=? ch \"u\")))\n  (cond\n\
    \    [(null? s) 0]\n    [(vowels-p (string-ref s 0))\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))\n", "  (length\
    \ (filter (lambda (x)\n                    (member x '(#\\a #\\e #\\i #\\o #\\\
    u #\\y)))\n                  (string->list s))))\n", "  (let loop ([n 0] [cs (string->list\
    \ s)])\n    (cond [(empty? cs) n]\n          [(char-ci=? (car cs) #\\a) (loop\
    \ (+ n 1) (cdr cs))]\n          [(char-ci=? (car cs) #\\e) (loop (+ n 1) (cdr\
    \ cs))]\n          [(char-ci=? (car cs) #\\i) (loop (+ n 1) (cdr cs))]\n     \
    \     [(char-ci=? (car cs) #\\o) (loop (+ n 1) (cdr cs))]\n          [(char-ci=?\
    \ (car cs) #\\u) (loop (+ n 1) (cdr cs))]\n          [(char-ci=? (car cs) #\\\
    y) (if (empty? (cdr cs))\n                                       (+ n 1)\n   \
    \                                    (loop n (cdr cs)))]\n          [else (loop\
    \ n (cdr cs))])))\n", "  (count-if (lambda (c) (or (char=? c #\\a) (char=? c #\\\
    e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))) s))\n", "  (count (lambda\
    \ (c)\n           (member c '(#\\a #\\e #\\i #\\o #\\u)))\n         (string->list\
    \ s)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
