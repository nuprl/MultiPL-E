name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"\
  abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n     \
    \    (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first\
    \ s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else\
    \ (vowels_count (rest s))]))", "  (cond [(empty? s) 0]\n        [(or (equal? (first\
    \ s) #\\a)\n             (equal? (first s) #\\e)\n             (equal? (first\
    \ s) #\\i)\n             (equal? (first s) #\\o)\n             (equal? (first\
    \ s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n        [(or (equal? (first\
    \ s) #\\A)\n             (equal? (first s) #\\E)\n             (equal? (first\
    \ s) #\\I)\n             (equal? (first s) #\\O)\n             (equal? (first\
    \ s) #\\U))\n         (+ 1 (vowels_count (rest s)))]\n        [(and (equal? (first\
    \ s) #\\y)\n              (equal? (rest s) empty))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [else (vowels_count (rest s))]))\n", "  (define (is_vowel\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\y)))\n  (define (is_last s)\n\
    \    (not (string=? s \"\")))\n  (define (count-vowels s)\n    (if (is_last s)\n\
    \        (if (is_vowel (string-ref s 0))\n            1\n            0)\n    \
    \    (if (is_vowel (string-ref s 0))\n            (+ 1 (count-vowels (substring\
    \ s 1)))\n            (count-vowels (substring s 1)))))\n  (count-vowels s))\n",
  "  (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (cond [(empty? s) 0]\n       \
    \ [(member (first s) vowels) (+ 1 (vowels_count (rest s)))]\n        [else (vowels_count\
    \ (rest s))]))\n", "  (let* ((vowels (list #\\a #\\e #\\i #\\o #\\u))\n      \
    \   (s (string-upcase s))\n         (n (string-length s))\n         (vowels-count\
    \ 0))\n    (let loop ((i 0))\n      (cond ((= i n) vowels-count)\n           \
    \ ((= i (- n 1)) (if (member (string-ref s i) vowels)\n                      \
    \         (+ vowels-count 1)\n                               vowels-count))\n\
    \            ((member (string-ref s i) vowels)\n             (loop (+ i 1)) (+\
    \ vowels-count 1))\n            (else (loop (+ i 1)) vowels-count)))))\n", " \
    \ (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=?\
    \ (first s) #\\e)\n             (char=? (first s) #\\i)\n             (char=?\
    \ (first s) #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count\
    \ (rest s)))]\n        [(char=? (first s) #\\y)\n         (cond [(empty? (rest\
    \ s)) 1]\n               [else (+ 1 (vowels_count (rest s)))])]\n        [else\
    \ (vowels_count (rest s))]))\n", "  (list-length (list-of-vowels s)))\n", "  (length\
    \ (filter\n           (lambda (c)\n             (regexp-match #rx\"[aeiouy]\"\
    \ (string c)))\n           (string->list s))))\n", "  (foldl (lambda (c n)\n \
    \          (cond\n             [(or (string=? \"a\" c)\n                  (string=?\
    \ \"e\" c)\n                  (string=? \"i\" c)\n                  (string=?\
    \ \"o\" c)\n                  (string=? \"u\" c))\n              (+ n 1)]\n  \
    \           [(and (string=? \"y\" c)\n                   (= (string-length s)\
    \ (+ 1 n)))\n              (+ n 1)]\n             [else n]))\n         0\n   \
    \      (string->list s)))\n</code>\nI use the following to test the code.\n<code>#lang\
    \ racket\n", "  (define (normalize-string s)\n    (if (string=? s \"\") #f (string-downcase\
    \ s)))\n  (define (vowels-count s)\n    (define (vowels-count-iter s n)\n    \
    \  (cond ((null? s) n)\n            ((char-set=? (string-&gt;list s) \"aeiouy\"\
    ) (vowels-count-iter (cdr s) (+ n 1)))\n            (else (vowels-count-iter (cdr\
    \ s) n))))\n    (vowels-count-iter s 0))\n  (vowels-count (normalize-string s)))\n",
  "  (define (char-is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n\
    \        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (vowels-in-word w)\n    (if (char-is-vowel? (string-ref w (- (string-length\
    \ w) 1)))\n        (if (string-empty? w)\n            0\n            (+ (if (char-is-vowel?\
    \ (string-ref w 0)) 1 0)\n               (vowels-in-word (substring w 1 (- (string-length\
    \ w) 1)))))\n        (if (string-empty? w)\n            0\n            (+ (if\
    \ (char-is-vowel? (string-ref w 0)) 1 0)\n               (vowels-in-word (substring\
    \ w 1))))))\n  (vowels-in-word s))\n", '  (length (filter vowel? (string->list
    s))))', "  (let loop ([i (string-length s)] [n 0])\n    (cond [(negative? i) n]\n\
    \          [(or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (char=? (string-ref s i) #\\y) (= i 0)))\n           (loop (-\
    \ i 1) (+ n 1))]\n          [else (loop (- i 1) n)])))\n", "  (define (check-vowel\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n  (let loop ((count 0)\n\
    \             (s s))\n    (cond ((string=? \"\" s) count)\n          ((string=?\
    \ \"y\" (substring s -1))\n           (loop (+ count 1) (substring s 0 -1)))\n\
    \          ((check-vowel (substring s 0 1))\n           (loop (+ count 1) (substring\
    \ s 1)))\n          (else (loop count (substring s 1))))))\n", "  (cond\n    [(string=?\
    \ s \"\") 0]\n    [(or (string=? (substring s 0 1) \"a\")\n         (string=?\
    \ (substring s 0 1) \"e\")\n         (string=? (substring s 0 1) \"i\")\n    \
    \     (string=? (substring s 0 1) \"o\")\n         (string=? (substring s 0 1)\
    \ \"u\"))\n     (+ 1 (vowels_count (substring s 1)))]\n    [(and (string=? (substring\
    \ s 0 1) \"y\")\n          (string=? (substring s 1) \"\"))\n     (+ 1 (vowels_count\
    \ (substring s 1)))]\n    [else (vowels_count (substring s 1))]))", "  (cond\n\
    \    [(string=? s \"\") 0]\n    [(or (string=? (substring s -1) \"a\")\n     \
    \    (string=? (substring s -1) \"e\")\n         (string=? (substring s -1) \"\
    i\")\n         (string=? (substring s -1) \"o\")\n         (string=? (substring\
    \ s -1) \"u\")\n         (string=? (substring s -1) \"y\"))\n     (+ 1 (vowels_count\
    \ (substring s 0 -1)))]\n    [else (vowels_count (substring s 0 -1))]))\n", " \
    \ (define vowels '(#\\a #\\e #\\i #\\o #\\u))\n  (define (valid-vowel? c)\n  \
    \  (member c vowels))\n  (define (last-vowel? s)\n    (and (char=? (string-ref\
    \ s (- (string-length s) 1)) #\\y)\n         (not (member (string-ref s (- (string-length\
    \ s) 2)) vowels))))\n  (define (cnt-vowels s)\n    (if (zero? (string-length s))\n\
    \        0\n        (+ (if (valid-vowel? (string-ref s 0)) 1 0)\n           (cnt-vowels\
    \ (substring s 1)))))\n  (if (last-vowel? s)\n      (+ (cnt-vowels (substring\
    \ s 0 (- (string-length s) 1))) 1)\n      (cnt-vowels s)))\n", "  (letrec ([f\
    \ (lambda (s)\n                (cond [(empty? s) 0]\n                      [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n                       (+ 1 (f (rest\
    \ s)))]\n                      [(member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n\
    \                       (+ 1 (f (rest s)))]\n                      [(and (member\
    \ (first s) '(#\\y #\\Y)) (empty? (rest s)))\n                       (+ 1 (f (rest\
    \ s)))]\n                      [else (f (rest s))]))])\n    (f s)))\n</code>\n",
  "  (cond [(string=? s \"\") 0]\n        [(string-contains-ci? \"aeiou\" (string-ref\
    \ s 0)) (+ 1 (vowels_count (substring s 1)))]\n        [else (vowels_count (substring\
    \ s 1))]))\n```", "  (cond [(empty? s) 0]\n        [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n         (+ 1 (vowels_count (rest s)))]\n       \
    \ [else (vowels_count (rest s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
