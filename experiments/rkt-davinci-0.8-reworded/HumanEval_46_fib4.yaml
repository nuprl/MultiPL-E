name: HumanEval_46_fib4
language: rkt
prompt: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
  \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1) ->\
  \ 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n;; Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n;; >>> (fib4 5)\n;; 4\n;;\
  \ >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4 n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
  \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal?\
  \ (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
completions: ["  (fib4-helper n (make-vector 5 0)))\n", "  (define (fib-recur n-2\
    \ n-1 n-3 n-4)\n    (if (= n-2 0)\n        n-4\n        (fib-recur (- n-2 1) n-2\
    \ (+ n-1 n-3 n-4) n-1)))\n  (fib-recur n 0 2 0))\n```\n</details>\n\n4. <details><summary>C#</summary>\n\
    \n```c#\n// Write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3)\
    \ -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing\
    \ System.Threading.Tasks;\n\nnamespace fib4_number_sequence\n{\n    class Program\n\
    \    {\n        static void Main(string[] args)\n        {\n            Test();\n\
    \        }\n\n        static int fib4(int n)\n        {\n            int[] fib4_array\
    \ = new int[n + 1];\n            for (int i = 0; i < fib4_array.Length; i++)\n\
    \            {\n                fib4_array[i] = 0;\n            }\n          \
    \  fib4_array[2] = 2;\n            return fib4_core(n, fib4_array);\n        }\n\
    \n        static int fib4_core(int n, int[] fib4_array)\n        {\n         \
    \   if (fib4_array[n] == 0)\n            {\n                fib4_array[n] = fib4_core(n\
    \ - 1, fib4_array) + fib4_core(n - 2, fib4_array) + fib4_core(n - 3, fib4_array)\
    \ + fib4_core(n - 4, fib4_array);\n            }\n\n            return fib4_array[n];\n\
    \        }\n\n        static void Test()\n        {\n", "  (define (fn-1 x) (-\
    \ x 1))\n  (define (fn-2 x) (- x 2))\n  (define (fn-3 x) (- x 3))\n  (define (fn-4\
    \ x) (- x 4))\n  (define (fib4-rec n acc)\n    (cond [(= n 0) 0]\n          [(=\
    \ n 1) 0]\n          [(= n 2) 2]\n          [(= n 3) 0]\n          [else (+ (fib4-rec\
    \ (fn-1 n) acc)\n                   (fib4-rec (fn-2 n) acc)\n                \
    \   (fib4-rec (fn-3 n) acc)\n                   (fib4-rec (fn-4 n) acc))]))\n\
    \  (fib4-rec n acc))\n```\n\n## Question 4 (7 points)\n\n```#lang racket\n", " \
    \ (define (iter prev-values i)\n    (if (= i n)\n        (car prev-values)\n \
    \       (iter (append (cdr prev-values) (list (+ (apply + prev-values) 0))) (+\
    \ i 1))))\n  (iter '(0 0 2 0) 0))\n", "  (cond\n    [(< n 3) 0]\n    [(= n 3)\
    \ 2]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n",
  "  (let loop ([m n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= m 0) a]\n   \
    \   [(= m 1) b]\n      [(= m 2) c]\n      [(= m 3) d]\n      [else (loop (- m\
    \ 1) b c d (+ a b c d))])))\n", "  (fib4_iter 1 0 0 0 0 n))\n", "  (for/fold ([a\
    \ 0] [b 0] [c 2] [d 0]) ([i (in-range n)])\n    (values (+ a b c d) a b c)))\n",
  "  (if (and (or (equal? n 0) (equal? n 1)) \n           (not (equal? n 2)))\n  \
    \    0\n      (if (equal? n 2)\n          2\n          (+ \n           (fib4 (-\
    \ n 1))\n           (fib4 (- n 2))\n           (fib4 (- n 3))\n           (fib4\
    \ (- n 4))))))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n\
    \    [(= n 3) 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4\
    \ (- n 4)))]))\n", "  (if (< n 4)\n      (cond [(= n 0) 0]\n            [(= n\
    \ 1) 0]\n            [(= n 2) 2]\n            [(= n 3) 0])\n      (+ (fib4 (-\
    \ n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))))\n", "  (define (inner-fib4\
    \ n)\n    (cond [(= n 0) 0]\n          [(= n 1) 0]\n          [(= n 2) 2]\n  \
    \        [(= n 3) 0]\n          [else (+ (inner-fib4 (- n 1))\n              \
    \     (inner-fib4 (- n 2))\n                   (inner-fib4 (- n 3))\n        \
    \           (inner-fib4 (- n 4)))]))\n  (inner-fib4 n))\n", "  (define (fib4-helper\
    \ i a b c d count)\n    (cond ((= count 0) (+ a b c d))\n          ((= count 1)\
    \ (+ a b c d))\n          ((= count 2) (+ a b c d))\n          ((= count 3) (+\
    \ a b c d))\n          (else (fib4-helper (+ i 1) b c d (+ a b c d) (- count 1)))))\n\
    \  (fib4-helper 3 0 0 2 0 n))\n", "  (define (fib4-helper n fib4-n1 fib4-n2 fib4-n3\
    \ fib4-n4)\n    (if (= n 1) fib4-n1\n        (if (= n 2) fib4-n2\n           \
    \ (if (= n 3) fib4-n3\n                (if (= n 4) fib4-n4\n                 \
    \   (fib4-helper (- n 1) (+ fib4-n1 fib4-n2 fib4-n3 fib4-n4) fib4-n1 fib4-n2 fib4-n3))))))\n\
    \  (fib4-helper n 0 0 2 0))\n", "  (cond [(< n 4) (- n)]\n        [else\n    \
    \     (+ (fib4 (- n 1))\n            (fib4 (- n 2))\n            (fib4 (- n 3))\n\
    \            (fib4 (- n 4)))]))\n", "  (if (< n 2)\n      0\n      (cond\n   \
    \    [(= n 2) 2]\n       [(= n 3) 0]\n       [else (+ (fib4 (- n 1)) (fib4 (-\
    \ n 2)) (fib4 (- n 3)) (fib4 (- n 4)))])))\n", "  (cond [(= n 0) 0]\n        [(=\
    \ n 1) 0]\n        [(= n 2) 2]\n        [(= n 3) 0]\n        [else\n         (+\
    \ (fib4 (- n 1))\n            (fib4 (- n 2))\n            (fib4 (- n 3))\n   \
    \         (fib4 (- n 4)))]))\n", "  (let loop ([i 0] [a 0] [b 0] [c 2] [d 0])\n\
    \    (cond\n      [(= i n) a]\n      [else (loop (+ i 1) c (+ a b c d) b d)])))\n\
    ```\n\n```\n#lang racket\n", "    (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n\
    \      (cond [(= n 0) a]\n            [(= n 1) b]\n            [(= n 2) c]\n \
    \           [(= n 3) d]\n            [else (loop (- n 1) d (+ d c b a) (+ a b\
    \ c d) a)])))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n\
    \    [(= n 3) 0]\n    [else\n     (+ (fib4 (- n 1))\n        (fib4 (- n 2))\n\
    \        (fib4 (- n 3))\n        (fib4 (- n 4)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
