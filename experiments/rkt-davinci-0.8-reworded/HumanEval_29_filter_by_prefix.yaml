name: HumanEval_29_filter_by_prefix
language: rkt
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list )\n;;\
  \ >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n;; (list\
  \ \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (if\
    \ (empty? strings)\n      strings\n      (if (string-prefix? prefix (first strings))\n\
    \          (cons (first strings) (filter_by_prefix (rest strings) prefix))\n \
    \         (filter_by_prefix (rest strings) prefix))))\n", "  (filter (lambda (element)\
    \ (string-prefix? prefix element)) strings))\n", "  (cond\n    [(empty? strings)\
    \ empty]\n    [(string-prefix? prefix (first strings))\n     (cons (first strings)\
    \ (filter_by_prefix (rest strings) prefix))]\n    [else (filter_by_prefix (rest\
    \ strings) prefix)]))\n", "  (filter (lambda (str) (string-prefix? prefix str))\
    \ strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (for/list ([string strings])\n    (when (string-prefix? prefix string)\n    \
    \  string)))\n", "  (filter (lambda (str) (string-prefix? prefix str)) strings))\n",
  "  (cond [(empty? strings) empty]\n        [(string-prefix? prefix (first strings))\n\
    \         (cons (first strings) (filter_by_prefix (rest strings) prefix))]\n \
    \       [else (filter_by_prefix (rest strings) prefix)]))\n", "  (filter (lambda\
    \ (str) (string-prefix? prefix str)) strings))\n", "  (for/list ([string strings])\n\
    \    (if (string-prefix? prefix string)\n        string)))\n", "  (filter (lambda\
    \ (str) (string-prefix? prefix str)) strings))\n", "  (filter (lambda (x) (string-prefix?\
    \ prefix x)) strings))\n", "  (filter (lambda (str) (string-prefix? prefix str))\
    \ strings))\n", "  (if (empty? strings)\n      (list)\n      (if (string-prefix?\
    \ prefix (first strings))\n          (cons (first strings) (filter_by_prefix (rest\
    \ strings) prefix))\n          (filter_by_prefix (rest strings) prefix))))\n",
  "  (cond\n    [(empty? strings) empty]\n    [(string-prefix? prefix (first strings))\n\
    \     (cons (first strings) (filter_by_prefix (rest strings) prefix))]\n    [else\
    \ (filter_by_prefix (rest strings) prefix)]))\n", "  (filter (lambda (string)\
    \ (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (x) (string-prefix? prefix x)) strings))\n",
  "  (filter (lambda (x) (string-prefix? prefix x)) strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
