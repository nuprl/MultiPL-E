name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\"\
  )\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (for/list ([idx (in-range (string-length string))])\n    (substring\
    \ string 0 (+ idx 1))))\n", "  (for/list ((i (in-range (string-length string))))\n\
    \    (substring string 0 (+ i 1))))\n", "  (let ([len (string-length string)])\n\
    \    (for/list ([i (in-range len)])\n      (substring string 0 i))))\n", "  (let\
    \ loop ([current_prefix (substring string 0 1)]\n             [char_index 2]\n\
    \             [acc (list current_prefix)])\n    (if (= char_index (string-length\
    \ string))\n        acc\n        (loop (string-append current_prefix (substring\
    \ string char_index (add1 char_index)))\n             (add1 char_index)\n    \
    \         (cons (string-append current_prefix (substring string char_index (add1\
    \ char_index))) acc)))))\n", "  (list-&gt;set (map (\u03BB (i) (substring string\
    \ 0 i))\n                   (range (add1 (string-length string))))))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (for/list ([i (in-range (add1 (string-length string)))])\n    (substring string\
    \ 0 i)))\n", "  (define (helper string acc)\n    (if (= 0 (string-length string))\n\
    \        acc\n        (helper (substring string 1) (cons string acc))))\n  (helper\
    \ string '()))\n", "  (for/list ([x (in-range (string-length string))])\n    (substring\
    \ string 0 (+ x 1))))\n", "  (for/list ([i (in-range (string-length string))])\n\
    \            (substring string 0 (+ i 1))))\n", "  (reverse (in-nested (build-list\
    \ (string-length string) (lambda (i) (substring string 0 (+ i 1)))))))\n", " \
    \ (if (string=? \"\" string)\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (map (lambda (i) (substring string 0 i))\n       (build-list (string-length string)\
    \ add1)))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 i)))\n", "  (if (= 1 (string-length string))\n      (list string)\n\
    \      (append (all_prefixes (substring string 0 -1))\n              (list string))))\n",
  "  (define (f accum idx)\n    (if (>= idx (string-length string))\n        accum\n\
    \        (f (cons (substring string 0 idx) accum) (+ idx 1))))\n  (f '() 1))\n",
  "  (let loop ([i 0] [result (list)] [prefix \"\"])\n    (cond\n      [(>= i (string-length\
    \ string))\n       (reverse result)]\n      [else\n       (set! prefix (string-append\
    \ prefix (string-ref string i)))\n       (set! result (cons prefix result))\n\
    \       (loop (+ i 1) result prefix)])))\n", "  (prefixes (string->list string)))\n",
  "  (define (iter string acc)\n    (cond\n      [(empty? string) (reverse acc)]\n\
    \      [else (iter (rest string) (cons (string-append (first acc) (string (first\
    \ string))) acc))]))\n  (iter string '()))\n", "  (if (string=? string \"\")\n\
    \      '()\n      (cons (string-append string)\n            (all_prefixes (substring\
    \ string 0 (- (string-length string) 1))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
