name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (let ([x_mean (/ (apply + numbers) (length numbers))])\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x x_mean))) numbers))\n       (length numbers))))\n",
  "  (define length_of_numbers (length numbers))\n  (define mean_of_numbers (mean\
    \ numbers))\n  (define absolute_difference_list (list-abs-difference numbers mean_of_numbers))\n\
    \  (mean absolute_difference_list))\n", "  (define (sum numbers)\n    (foldr +\
    \ 0 numbers))\n  (define (absolute x)\n    (cond ((< x 0) (- x))\n          (else\
    \ x)))\n  (define (average numbers)\n    (/ (sum numbers) (length numbers)))\n\
    \  (define (absolute-distances numbers)\n    (map (lambda (x) (absolute (- x (average\
    \ numbers)))) numbers))\n  (/ (sum (absolute-distances numbers)) (length numbers)))\n",
  "  (let* ([mean (average numbers)]\n         [mean-differences (map (lambda (x)\
    \ (abs (- x mean))) numbers)])\n    (average mean-differences)))\n", "  (define\
    \ (map-abs x)\n    (abs x))\n  (define (avg-list lst)\n    (/ (apply + lst) (length\
    \ lst)))\n  (define (mean-diff x)\n    (- x (avg-list numbers)))\n  (define (map-mean-diff\
    \ x)\n    (mean-diff x))\n  (define (sum-list lst)\n    (apply + lst))\n  (define\
    \ (size-list lst)\n    (length lst))\n  (define (mean-absolute-deviation-accumulator\
    \ numbers)\n    (cond ((null? numbers) '())\n          (else (cons (mean-diff\
    \ (car numbers))\n                      (mean-absolute-deviation-accumulator (cdr\
    \ numbers))))))\n  (/ (sum-list (map-abs (mean-absolute-deviation-accumulator\
    \ numbers)))\n     (size-list numbers)))\n", "  (mean (map (\u03BB (x) (abs (-\
    \ x (mean numbers)))) numbers)))\n", "  (define (abs_diff n)\n    (abs (- n (mean\
    \ numbers))))\n  (mean (map abs_diff numbers)))\n", "  (define numbers-mean (mean\
    \ numbers))\n  (mean (map (lambda (x) (abs (- x numbers-mean))) numbers)))\n",
  "  (define (abs_deviation number)\n    (abs (- number (mean numbers))))\n  (mean\
    \ (map abs_deviation numbers)))\n", "  (let ([mean (reduce + numbers 0.0)])\n\
    \    (/ (reduce + (map (lambda (x) (abs (- x mean))) numbers) 0.0)\n       (length\
    \ numbers))))\n```\n\n``` scheme\n#lang scheme\n", "  (let* ([mean (mean numbers)]\n\
    \         [mean-deviations (map (lambda (n) (abs (- n mean))) numbers)])\n   \
    \ (mean mean-deviations)))\n", "  (define (rec numbers acc)\n    (if (null? numbers)\n\
    \        (/ acc (length numbers))\n        (rec (cdr numbers) (+ acc (abs (- (car\
    \ numbers) (/ acc (length numbers))))))))\n  (rec numbers 0))\n  \n", "  (define\
    \ x_mean (mean numbers))\n  (define absolute_deviations (map (lambda (x) (abs\
    \ (- x x_mean))) numbers))\n  (mean absolute_deviations))\n", "  (local [(define\
    \ (filter-func x) (abs (- x (mean numbers))))]\n    (mean (map filter-func numbers))))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map abs-diff numbers (repeat mean)))))\n",
  "  (define (absval x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (average-of-squares\
    \ numbers)\n    (divide (apply + (map (lambda (x) (* x x)) numbers))\n       \
    \     (length numbers)))\n  (sqrt (average-of-squares (map (lambda (x) (absval\
    \ (- x (average numbers)))) numbers))))", "  (let* ([sum_of_numbers (apply + numbers)]\n\
    \         [mean (/ sum_of_numbers (length numbers))]\n         [mean_diffs (map\
    \ (lambda (n) (- n mean)) numbers)])\n    (/ (apply + (map abs mean_diffs)) (length\
    \ numbers))))\n", "  (define (summand element)\n    (abs (- element (mean numbers))))\n\
    \  (mean (map summand numbers)))\n", "  (let* ([average (average numbers)]\n \
    \        [diff-from-average (map (lambda (x) (abs (- x average))) numbers)])\n\
    \    (average diff-from-average)))\n", "  (let ((mean (mean numbers)))\n    (mean\
    \ (map (lambda (n) (abs (- n mean))) numbers))))\n", "  (if (null? numbers)\n\
    \      0\n      (let ((mean (mean_of_numbers numbers)))\n        (/ (sum_of_numbers\n\
    \            (map (lambda (x) (abs (- x mean)))\n                 numbers))\n\
    \           (length numbers)))))\n", "  (define centerpoint (mean numbers))\n\
    \  (define abs-diff-from-centerpoint (map (lambda (x) (abs (- x centerpoint)))\
    \ numbers))\n  (mean abs-diff-from-centerpoint))\n", "  (let ([mean (average numbers)])\n\
    \    (average (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ([mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define average (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda\
    \ (x) (abs (- x average))) numbers))\n     (length numbers)))\n", "  (define (diff\
    \ number)\n    (- number (mean numbers)))\n  (define (abs number)\n    (if (<\
    \ number 0)\n        (- number)\n        number))\n  (mean (map abs (map diff\
    \ numbers))))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x)\
    \ (abs (- x mean))) numbers))))\n", "  (let* ([length (length numbers)]\n    \
    \     [sum (apply + numbers)]\n         [mean (/ sum length)])\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) length)))\n", "  (cond\n    [(empty?\
    \ numbers) 0]\n    [else\n     (/ (reduce +\n              (map (lambda (x) (abs\
    \ (- x (average numbers))))\n                   numbers))\n        (length numbers))]))\n\
    ```\n\n##### [Problem Set 04](https://github.com/jkachmar/csci-110/tree/master/pset-04):\n\
    \n1. Read in a list of integers from user via REPL and insert it into a list.\
    \ Then, using built-in Scheme functions, write expressions to perform each of\
    \ the following tasks.\n\n> - Extract the first element of the list\n> - Extract\
    \ the second element of the list\n> - Extract the last element of the list\n>\
    \ - Extract a sublist containing the first three elements of the list\n> - Extract\
    \ a sublist containing the last three elements of the list\n> - Extract a sublist\
    \ containing the second, third, and fourth elements of the list\n> - Replace the\
    \ first element of the list with the symbol abc\n> - Replace the last element\
    \ of the list with the symbol xyz\n> - Replace the sublist containing the second,\
    \ third, and fourth elements of the list with the list (2 3 4)\n> - Append the\
    \ list (5 6 7) to the end of the list\n> - Reverse the order of the elements in\
    \ the list\n> - Sort the elements of the list in ascending order\n> - Sort the\
    \ elements of the list in descending order\n\nI chose to call the original list\
    \ `numbers`. Using the `list-ref` and `list-tail` functions to extract elements\
    \ is pretty straightforward, but I also took this opportunity to check out the\
    \ `define-values` function:\n\n```#lang racket", "  (define x_mean (mean numbers))\n\
    \  (define x_minus_x_mean (map (lambda (x) (- x x_mean)) numbers))\n  (define\
    \ absolute_x_minus_x_mean (map (lambda (x) (abs x)) x_minus_x_mean))\n  (mean\
    \ absolute_x_minus_x_mean))\n", "  (let ((mean (mean numbers)))\n    (define (absolute\
    \ x)\n      (if (&lt; x 0) (- x) x))\n    (mean (map (lambda (x) (absolute (-\
    \ x mean))) numbers))))\n", "  (define (mean-absolute-deviation-iter total running-count\
    \ remaining-numbers)\n    (if (null? remaining-numbers)\n        (/ total running-count)\n\
    \        (let ((x (car remaining-numbers)))\n          (mean-absolute-deviation-iter\n\
    \           (+ total (abs (- x (mean numbers))))\n           (+ running-count\
    \ 1)\n           (cdr remaining-numbers)))))\n  (mean-absolute-deviation-iter\
    \ 0 0 numbers))\n", "  (let ((mean (mean numbers)))\n    (mean (map (lambda (x)\
    \ (abs (- x mean))) numbers))))\n", "  (let ((numbers-mean (mean numbers)))\n\
    \    (apply + (map (lambda (x) (abs (- x numbers-mean))) numbers))\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x numbers-mean))) numbers))\n       (length numbers))))\n",
  "  (let* ([average (average numbers)]\n         [absolute-differences (for/list\
    \ ([number numbers])\n                                (abs (- number average)))]\n\
    \         [mean-absolute-difference (average absolute-differences)])\n    mean-absolute-difference))\n",
  "  (define mean (for/sum ([x numbers]) x))\n  (define denom (length numbers))\n\
    \  (define numer (for/sum ([x numbers]) (abs (- x mean))))\n  (/ numer denom))\n\
    ```\n\nThe other function we need is to convert a given list of numbers to Z-scores.\
    \ The Z-score of a given value is the number of standard deviations above or below\
    \ the mean that value is.\n```racket", "  (define (difference-from-mean n)\n \
    \   (- n (average numbers)))\n  (define (absolute n)\n    (if (< n 0)\n      \
    \  (- n)\n        n))\n  (define (absolute-differences numbers)\n    (map absolute\
    \ (map difference-from-mean numbers)))\n  (average (absolute-differences numbers)))\n",
  "  (require math)\n  (define dataset-size (length numbers))\n  (define mean (apply\
    \ + numbers))\n  (define deviations (for/list ([n numbers])\n                \
    \       (abs (- n mean))))\n  (/ (apply + deviations) dataset-size))\n", "  (define\
    \ dataset_mean\n    (apply + numbers))\n  (define numerator\n    (apply + (map\
    \ (lambda (x) (abs (- x dataset_mean))) numbers)))\n  (/ numerator (length numbers)))\n",
  "  (letrec ([list-mean (lambda (list-of-numbers) (/ (apply + list-of-numbers) (length\
    \ list-of-numbers)))])\n    (let ([mean (list-mean numbers)])\n      (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) (length numbers)))))\n", "  (define\
    \ (sum_and_length numbers)\n    (let ([sum 0.0]\n          [length 0])\n     \
    \ (for ([number numbers])\n        (set! sum (+ sum number))\n        (set! length\
    \ (+ length 1)))\n      (values sum length)))\n  (define (abs_diff x)\n    (if\
    \ (&lt; x 0)\n        (- x)\n        x))\n  (define (sum_abs_diffs_from_mean numbers)\n\
    \    (let ([sum 0.0])\n      (for ([number numbers])\n        (set! sum (+ sum\
    \ (abs_diff (- number (mean numbers))))))\n      sum))\n  (/ (sum_abs_diffs_from_mean\
    \ numbers) (length numbers)))\n", "  (define (mean numbers)\n    (/ (foldr + 0\
    \ numbers) (length numbers)))\n  (let ([mean (mean numbers)])\n    (/ (foldr (lambda\
    \ (x sum) (+ sum (abs (- x mean)))) 0 numbers)\n       (length numbers))))\n",
  "  (define mean (mean numbers))\n  (define diffs (map abs (map (lambda (x) (- x\
    \ mean)) numbers)))\n  (mean diffs))\n", "  (let ((mean (mean numbers)))\n   \
    \ (mean (map (\u03BB (x) (abs (- x mean))) numbers))))\n", "  (define (list-mean\
    \ xs) (/ (apply + xs) (length xs)))\n  (define (absolute x) (if (< x 0) (- x)\
    \ x))\n  (define (list-difference xs centerpoint)\n    (map (lambda (x) (absolute\
    \ (- x centerpoint))) xs))\n  (define (mean_of_absolutes xs)\n    (apply + (list-difference\
    \ xs (list-mean xs))))\n  (/ (mean_of_absolutes numbers) (length numbers)))\n",
  "  (define (x-xmean nums)\n    (for/list ([n nums])\n      (abs (- n (mean nums)))))\n\
    \  (mean (x-xmean numbers)))\n", "  (define number_count (length numbers))\n \
    \ (define average (/ (apply + numbers) number_count))\n  (define absolute_differences\
    \ (map (lambda (x) (abs (- x average))) numbers))\n  (/ (apply + absolute_differences)\
    \ number_count))\n```\n\n### Median Absolute Deviation\n\nIf I were to calculate\
    \ Median Absolute Deviation for the same list of input numbers, I would get the\
    \ following result:\n\n```\n>>> (median_absolute_deviation (list 1.0 2.0 3.0 4.0))\n\
    1.0\n```\n\nHere is the code:\n\n```racket\n#lang racket\n", "  (define mean_numbers\n\
    \    (exact->inexact (mean (map exact->inexact numbers))))\n  (define total_absolute_deviation\
    \ 0)\n  (for ([number numbers])\n    (set! total_absolute_deviation\n        \
    \  (+ total_absolute_deviation\n             (abs (- (exact->inexact number) mean_numbers)))))\n\
    \  (/ total_absolute_deviation (length numbers)))\n", "  (if (null? numbers)\n\
    \      0\n      (define (absolute x)\n        (if (> x 0)\n            x\n   \
    \         (- x)))\n      (define (sum_absolute_diffs x y)\n        (+ (absolute\
    \ (- x y)) y))\n      (define mean\n        (/ (apply + numbers) (length numbers)))\n\
    \      (/ (apply sum_absolute_diffs numbers (make-list (length numbers) 0))\n\
    \         (length numbers))))\n", "  (define m (mean numbers))\n  (define ds (map\
    \ (lambda (x) (abs (- x m))) numbers))\n  (mean ds))\n", "  (define (sum_of_absolute_deviations\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers)\
    \ (average numbers)))\n           (sum_of_absolute_deviations (cdr numbers)))))\n\
    \  (/ (sum_of_absolute_deviations numbers)\n     (length numbers)))\n", "  (define\
    \ n (length numbers))\n  (define sum (apply + numbers))\n  (define mean (/ sum\
    \ n))\n  (define diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (apply\
    \ + diffs) n))\n", "  (define (abs x)\n    (if (< x 0)\n        (- x)\n      \
    \  x))\n  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (distance-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (let ((distance-from-mean-per-number (map distance-from-mean numbers)))\n \
    \   (/ (apply + distance-from-mean-per-number) (length distance-from-mean-per-number))))\n",
  "  (define (avg lst)\n    (/ (foldr + 0 lst) (length lst)))\n  (define (square x)\
    \ (* x x))\n  (define (sum lst)\n    (foldr + 0 lst))\n  (define (deviations lst)\n\
    \    (map (lambda (x) (abs (- x (avg lst)))) lst))\n  (/ (sum (deviations numbers))\
    \ (length numbers)))\n```\n\n```haskell\n-- For a given list of input numbers,\
    \ calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean\
    \ Absolute Deviation is the average absolute difference between each\n-- element\
    \ and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n--\
    \ >>> mean_absolute_deviation [1.0, 2.0, 3.0, 4.0]\n-- 1.0\nmean_absolute_deviation\
    \ xs = sum deviations / length xs\n  where\n    mean = sum xs / length xs\n  \
    \  deviations = map (\\x -> abs (x - mean)) xs\n```\n\n```julia\n# For a given\
    \ list of input numbers, calculate Mean Absolute Deviation\n# around the mean\
    \ of this dataset.\n# Mean Absolute Deviation is the average absolute difference\
    \ between each\n# element and a centerpoint (mean in this case):\n# MAD = average\
    \ | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\n\
    function mean_absolute_deviation(numbers)\n    numbers_mean = mean(numbers)\n\
    \    mean(abs.(numbers - numbers_mean))\nend\n```\n\n```javascript\n// For a given\
    \ list of input numbers, calculate Mean Absolute Deviation\n// around the mean\
    \ of this dataset.\n// Mean Absolute Deviation is the average absolute difference\
    \ between each\n// element and a centerpoint (mean in this case):\n// MAD = average\
    \ | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\n\
    function mean_absolute_deviation(numbers) {\n  return numbers.red", "  (define\
    \ (deviations nums)\n    (define mean (mean nums))\n    (map\n     (lambda (x)\
    \ (abs (- x mean)))\n     nums))\n  (mean (deviations numbers)))\n", "  (define\
    \ (helper nums nums-length)\n    (if (empty? nums)\n        0\n        (+ (abs\
    \ (- (first nums) (/ (sum nums) nums-length)))\n           (helper (rest nums)\
    \ nums-length))))\n  (/ (helper numbers (length numbers)) (length numbers)))\n",
  "  (define total\n    (apply + numbers))\n  (define mean\n    (/ total (length numbers)))\n\
    \  (define squared-diffs\n    (map (lambda (x)\n           (sqr (- x mean)))\n\
    \         numbers))\n  (define total-squared-diffs\n    (apply + squared-diffs))\n\
    \  (define mean-squared-diff\n    (/ total-squared-diffs (length numbers)))\n\
    \  (sqrt mean-squared-diff))\n```\n\nThis obviously can be optimized to use less\
    \ variables, but it's probably\na bit too lengthy to do so in the code-golf format.\n\
    \n15. **[Mandelbrot Set](https://www.reddit.com/r/dailyprogrammer/comments/62wo0l/20170317_challenge_305_intermediate_mandelbrot/)**\n\
    \nBasically, same as the [regular](mandelbrot.rkt) challenge, but with\nan addition\
    \ of a step before calculating each point.\n\n```racket", "  (let* ([data-len\
    \ (length numbers)]\n         [mean (/ (apply + numbers) data-len)])\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x mean))) numbers)) data-len)))\n", "  (let ([mean\
    \ (average numbers)])\n    (average (map abs-difference numbers (repeat mean)))))\n",
  "  (let* ([n (length numbers)]\n         [mean (apply / numbers)])\n    (/ (apply\
    \ + (map (\u03BB (x) (abs (- x mean))) numbers)) n)))\n", "  (define (abs-dev\
    \ numbers mean)\n    (map (lambda (x) (abs (- x mean))) numbers))\n  (define mean\
    \ (apply + numbers)\n        abs-devs (abs-dev numbers mean))\n  (/ (apply + abs-devs)\
    \ (length numbers)))\n", "  (define n (length numbers))\n  (define mean (apply\
    \ + numbers))\n  (define total 0)\n  (for ([n (in-list numbers)])\n    (set! total\
    \ (+ total (abs (- n mean)))))\n  (/ total n))\n", "  (define mean (average numbers))\n\
    \  (average (map (lambda (x) (abs (- x mean))) numbers)))\n", "  (define mean\
    \ (mean numbers))\n  (define differences (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean differences))\n", "  (let* ([mean (mean numbers)]\n         [absolute-differences\
    \ (map (lambda (n) (abs (- n mean))) numbers)])\n    (mean absolute-differences)))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map (lambda (e) (abs (- e mean))) numbers))))\n",
  "  (define (m_abs n)\n    (define (abs x)\n      (if (&lt; x 0) (- x) x))\n    (abs\
    \ (- n (average numbers))))\n  (define (map_lst lst proc)\n    (if (null? lst)\n\
    \        '()\n        (cons (proc (car lst)) (map_lst (cdr lst) proc))))\n  (average\
    \ (map_lst numbers m_abs)))\n", "  (let* ([N (length numbers)]\n         [mean\
    \ (/ (apply + numbers) N)])\n    (/ (apply + (map (lambda (num) (abs (- num mean)))\
    \ numbers)) N)))\n", "  (let ((mean (mean numbers)))\n    (mean (map (lambda (x)\
    \ (abs (- x mean))) numbers))))\n", "  (define (deviation n)\n    (abs (- n mean)))\n\
    \  (define mean (apply + numbers))\n  (define (recur r xs)\n    (cond [(empty?\
    \ xs) r]\n          [else (recur (+ r (deviation (first xs))) (rest xs))]))\n\
    \  (/ (recur 0 numbers) (length numbers)))\n```\n\n### Task 2\n\n```racket\n#lang\
    \ racket\n", "  (let* ([mean (mean numbers)]\n         [absolute-deviations (map\
    \ abs\n                                   (map (lambda (x) (- x mean))\n     \
    \                                   numbers))])\n    (mean absolute-deviations)))\n",
  "  (local [(define mean (/ (sum numbers) (length numbers)))\n          (define abs-diffs\
    \ (map (lambda (x) (abs (- x mean))) numbers))]\n    (/ (sum abs-diffs) (length\
    \ abs-diffs))))\n", "  (define (deviation x)\n    (abs (- x (average numbers))))\n\
    \  (average (map deviation numbers)))\n", "  (define (mean xs) (/ (apply + xs)\
    \ (length xs)))\n  (define (absolute x) (if (< x 0) (- x) x))\n  (define (deviations\
    \ xs)\n    (let* ([mean (mean xs)]\n           [abs (map absolute (map (- mean)\
    \ xs))])\n      abs))\n  (define (average xs) (/ (apply + xs) (length xs)))\n\
    \  (average (deviations numbers)))\n```\n\n### 3.2.2 Standard Deviation\n\nNow\
    \ that we know how to calculate the mean absolute deviation, let's try a slightly\
    \ more complex measure: standard deviation.\n\nThe standard deviation is a statistical\
    \ measure of the spread of values in a dataset. The more tightly all the values\
    \ are clustered around the mean, the lower the standard deviation. If the values\
    \ are spread out, then the standard deviation is high.\n\nGiven a dataset (as\
    \ a Python list), the standard deviation is calculated as the square root of the\
    \ average of the squared deviations of each value from the mean value.\n\n```\n\
    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n1.2909944487358056\n```\n\n####\
    \ Exercise\n\nDefine a procedure, `standard_deviation`, which takes a list of\
    \ numbers as input and outputs their standard deviation.\n\n```\n#lang racket\n",
  "  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n  (define (average xs)\n\
    \    (/ (apply + xs) (length xs)))\n  (define (mean xs)\n    (average (map absolute\
    \ (map - xs (list (average xs))))))\n  (mean numbers))\n", "  (let* ([mean (mean\
    \ numbers)]\n         [abs-diff-lst (map (lambda (n) (abs (- n mean))) numbers)])\n\
    \    (mean abs-diff-lst)))\n", "  (let* ([numbers-count (length numbers)]\n  \
    \       [sum (apply + numbers)]\n         [mean (/ sum numbers-count)])\n    (/\
    \ (apply + (map (\u03BB (x) (abs (- x mean))) numbers)) numbers-count)))\n", " \
    \ (define mean (mean numbers))\n  (mean (map (lambda (x) (abs (- x mean))) numbers)))\n",
  "  (if (empty? numbers)\n      (error \"no input!\")\n      (define centerpoint\
    \ (average numbers))\n      (define absolute-deviations\n        (map (lambda\
    \ (x) (abs (- x centerpoint))) numbers))\n      (average absolute-deviations)))\n",
  "  (define (absolute x)\n    (if (> x 0) x (- x)))\n  (define (deviation x)\n  \
    \  (define mean (average numbers))\n    (absolute (- x mean)))\n  (define (average\
    \ xs)\n    (/ (apply + xs) (length xs)))\n  (average (map deviation numbers)))\n",
  "  (define (mean_abs_dev_iter numbers acc)\n    (if (null? numbers)\n        (/\
    \ acc (length numbers))\n        (mean_abs_dev_iter (cdr numbers) (+ acc (abs\
    \ (- (car numbers) (mean numbers)))))))\n  (mean_abs_dev_iter numbers 0))\n",
  "  (define (avg numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (avg-abs-diff numbers)\n    (avg (map (lambda (x) (abs (- x (avg numbers))))\
    \ numbers)))\n  (avg-abs-diff numbers))\n", "  (let ((x_mean (/ (apply + numbers)\
    \ (length numbers))))\n    (/ (apply + (map (lambda (x) (abs (- x x_mean))) numbers))\n\
    \       (length numbers))))\n", "  (define sum\n    (foldl (lambda (number sum)\n\
    \             (+ sum number))\n           0\n           numbers))\n  (define mean\
    \ (/ sum (length numbers)))\n  (define diffs\n    (map (lambda (number)\n    \
    \       (abs (- number mean)))\n         numbers))\n  (define sum-diffs\n    (foldl\
    \ (lambda (diff sum)\n             (+ sum diff))\n           0\n           diffs))\n\
    \  (/ sum-diffs (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ diffs (map (lambda (x) (abs (- x mean))) numbers))\n  (mean diffs))\n", "  (define\
    \ mean (mean numbers))\n  (define differences (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean differences))\n", "  (local [(define mean (/ (apply + numbers)\
    \ (length numbers)))\n          (define diff-from-mean (map (lambda (x) (abs (-\
    \ x mean))) numbers))]\n    (/ (apply + diff-from-mean) (length numbers))))\n",
  "  (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (distance\
    \ a b)\n    (abs (- a b)))\n  (define (mean_distance n)\n    (define (mean-distance-iter\
    \ n numbers)\n      (if (null? numbers)\n          (/ n (length numbers))\n  \
    \        (mean-distance-iter (+ n (distance (car numbers) (mean numbers))) (cdr\
    \ numbers))))\n    (mean-distance-iter n numbers))\n  (mean_distance 0.0))\n",
  "  (let ([mean (mean numbers)])\n    (if (empty? numbers)\n        0\n        (/\
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers))\n           (length numbers)))))\n",
  "  (let ([x-mean (/ (apply + numbers) (length numbers))])\n    (/ (apply + (map\
    \ (lambda (x) (abs (- x x-mean))) numbers))\n       (length numbers))))\n", " \
    \ (define mean_of_numbers (mean numbers))\n  (define deviation_from_mean (map\
    \ (lambda (x) (abs (- x mean_of_numbers))) numbers))\n  (mean deviation_from_mean))\n",
  "  (define (abs-diff x) (abs (- x (mean numbers))))\n  (mean (map abs-diff numbers)))\n",
  "  (let ((sum 0.0)\n        (numbers-length (length numbers)))\n    (for ([n numbers])\n\
    \      (set! sum (+ sum (abs (- n (/ sum numbers-length))))))\n    (/ sum numbers-length)))\n",
  "  (let* ((mean (mean numbers))\n         (n (length numbers))\n         (absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers)))\n    (/ (sum absolute-differences)\
    \ n)))\n", "  (let* ((mean_of_numbers (mean numbers))\n         (diffs (map (lambda\
    \ (x) (abs (- x mean_of_numbers))) numbers)))\n    (mean diffs)))\n", "  (define\
    \ (mean_of numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (abs_diff_from_mean\
    \ number mean)\n    (abs (- number mean)))\n  (define (abs_diff_from_mean_each\
    \ numbers mean)\n    (map (lambda (number) (abs_diff_from_mean number mean)) numbers))\n\
    \  (define (mean_of_absolute_differences numbers mean)\n    (/ (apply + (abs_diff_from_mean_each\
    \ numbers mean)) (length numbers)))\n  (mean_of_absolute_differences numbers (mean_of\
    \ numbers)))\n", "  (define mean-numbers-calculated (mean numbers))\n  (define\
    \ squared-diffs (map (lambda (x) (sqr (- x mean-numbers-calculated))) numbers))\n\
    \  (mean squared-diffs))\n", "  (define (absolute x)\n    (if (< x 0)\n      \
    \  (- x)\n        x))\n  (define (average numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (mean_absolute_diffs numbers)\n    (map (lambda (x) (absolute\
    \ (- x (average numbers)))) numbers))\n  (define (mean_of_diffs numbers)\n   \
    \ (/ (apply + (mean_absolute_diffs numbers)) (length numbers)))\n  (mean_of_diffs\
    \ numbers))\n", "  (define (mean_absolute_deviation_helper numbers acc)\n    (if\
    \ (null? numbers)\n        (/ acc (length numbers))\n        (mean_absolute_deviation_helper\
    \ (cdr numbers)\n                                        (+ acc (abs (- (car numbers)\n\
    \                                                       (mean numbers)))))))\n\
    \  (mean_absolute_deviation_helper numbers 0))\n", "  (local [(define mean_value\
    \ (/ (sum numbers) (length numbers)))\n          (define absolute_deviations (map\
    \ (lambda (x) (abs (- x mean_value))) numbers))]\n    (/ (sum absolute_deviations)\
    \ (length absolute_deviations))))\n", "  (define (deviation-sum numbers)\n   \
    \ (foldl (lambda (a b) (+ (abs (- a (mean numbers))) b)) 0 numbers))\n  (/ (deviation-sum\
    \ numbers) (length numbers)))\n", "  (define avg (apply + numbers))\n  (define\
    \ avg (quotient avg (length numbers)))\n  (define squared-diff (map (lambda (x)\n\
    \                              (quotient (expt (- x avg) 2) (length numbers)))\n\
    \                            numbers))\n  (sqrt (apply + squared-diff)))\n", " \
    \ (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (distance number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map\
    \ distance numbers)) (length numbers)))\n", "  (define n (length numbers))\n \
    \ (define numbers-mean (/ (foldl + 0 numbers) n))\n  (define absolute-differences\
    \ (map (lambda (x) (abs (- x numbers-mean))) numbers))\n  (/ (foldl + 0 absolute-differences)\
    \ n))\n", "  (define length (length numbers))\n  (define sum (apply + numbers))\n\
    \  (define mean (/ sum length))\n  (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (/ (apply + (map (lambda (x) (abs (- x mean))) numbers)) length))\n",
  "  (let ([mean (/ (apply + numbers) (length numbers))])\n    (/ (apply + (map (lambda\
    \ (x) (abs (- x mean))) numbers))\n       (length numbers))))\n", "  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (deviation\
    \ numbers)\n    (map (lambda (x) (abs (- x (average numbers)))) numbers))\n  (average\
    \ (deviation numbers)))\n", "  (define n (length numbers))\n  (define sum (sum\
    \ numbers))\n  (define mean (/ sum n))\n  (define deviations (map (lambda (x)\
    \ (abs (- x mean))) numbers))\n  (/ (sum deviations) n))\n```\n# 1.3.3\n\n```\
    \ #lang racket\n", "  (let* ([mean (mean numbers)]\n         [deviations (map\
    \ (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", "  (define\
    \ mean_value (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda\
    \ (x) (abs (- x mean_value))) numbers))\n     (length numbers)))\n", "  (let ([x-bar\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x x-bar))) numbers))))\n\
    ```\n\n```python\n#!/usr/bin/env python\n\nfrom __future__ import division\nfrom\
    \ functools import partial\n\ndef average(numbers):\n    return sum(numbers) /\
    \ len(numbers)\n\ndef mean_absolute_deviation(numbers):\n    x_bar = average(numbers)\n\
    \    return average(map(lambda x: abs(x - x_bar), numbers))\n```\n\n```ruby\n\
    #!/usr/bin/env ruby\n\ndef mean(numbers)\n  numbers.reduce(:+) / numbers.size\n\
    end\n\ndef mean_absolute_deviation(numbers)\n  x_bar = mean(numbers)\n  numbers.map\
    \ { |x| (x - x_bar).abs }.reduce(:+) / numbers.size\nend\n```\n\n```perl\n#!/usr/bin/env\
    \ perl\n\nsub average {\n  my ($numbers) = @_;\n  my $sum = 0;\n  foreach my $number\
    \ (@$numbers) {\n    $sum += $number;\n  }\n  return $sum / scalar(@$numbers);\n\
    }\n\nsub mean_absolute_deviation {\n  my ($numbers) = @_;\n  my $x_bar = average($numbers);\n\
    \  my $sum = 0;\n  foreach my $number (@$numbers) {\n    $sum += abs($number -\
    \ $x_bar);\n  }\n  return $sum / scalar(@$numbers);\n}\n```\n\n```lisp\n#!/usr/bin/env\
    \ sbcl --script\n", "  (define (sum_of_absolute_diffs)\n    (foldl + 0 (map (lambda\
    \ (x) (abs (- x (mean numbers)))) numbers)))\n  (/ (sum_of_absolute_diffs) (length\
    \ numbers)))\n", "  (let ([mean (average numbers)])\n    (average (map abs (map\
    \ (lambda (x) (- x mean)) numbers)))))\n", "  (define (sum l)\n    (if (null?\
    \ l)\n        0\n        (+ (car l) (sum (cdr l)))))\n  (define (mean l)\n   \
    \ (/ (sum l) (length l)))\n  (define (square l)\n    (map (lambda (x) (* x x))\
    \ l))\n  (define (average l)\n    (/ (sum l) (length l)))\n  (define (variances\
    \ l)\n    (map (lambda (x) (- x (mean l))) l))\n  (define (squared_variances l)\n\
    \    (square (variances l)))\n  (define (average_of_squared_variances l)\n   \
    \ (average (squared_variances l)))\n  (define (standard_deviation_of_squared_variances\
    \ l)\n    (sqrt (average_of_squared_variances l)))\n  (define (mad l)\n    (standard_deviation_of_squared_variances\
    \ l))\n  (mad numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference number)\n    (if (< number\
    \ (mean numbers))\n        (- (mean numbers) number)\n        (- number (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define x_mean (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda\
    \ (x) (abs (- x x_mean))) numbers))\n     (length numbers)))\n", "  (define (absolute\
    \ x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (mean_absolute_deviation-iter\
    \ numbers count running-sum running-total)\n    (if (null? numbers)\n        (/\
    \ running-sum count)\n        (mean_absolute_deviation-iter (cdr numbers) (+ count\
    \ 1)\n                                      (+ running-sum (absolute (- (car numbers)\
    \ (/ running-total count))))\n                                      (+ running-total\
    \ (car numbers)))))\n  (mean_absolute_deviation-iter numbers 0 0 0))\n```\n##\
    \ Week 3\n\n### [Q3.8](q3.8.rkt)\n```\n#lang racket\n", "  (let* ([mean (average\
    \ numbers)]\n         [distances (map (lambda (x) (abs (- x mean))) numbers)])\n\
    \    (average distances)))\n", "  (define centerpoint (mean numbers))\n  (define\
    \ total (foldl + 0 (map (lambda (x) (abs (- x centerpoint))) numbers)))\n  (/\
    \ total (length numbers)))\n", "  (let loop ([numbers numbers] [acc 0.0])\n  \
    \  (cond\n      [(empty? numbers) (/ acc (length numbers))]\n      [else (loop\
    \ (rest numbers) (+ acc (abs (- (first numbers) (mean numbers)))))])))\n", " \
    \ (let ((mean (average numbers)))\n    (average (map (\u03BB (n) (abs (- n mean)))\
    \ numbers))))\n", "  (let* ([numbers_sum (apply + numbers)]\n         [numbers_length\
    \ (length numbers)]\n         [mean (div numbers_sum numbers_length)])\n    (div\
    \ (apply + (map (lambda (num) (abs (- num mean))) numbers))\n         numbers_length)))\n",
  "  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum\
    \ (cdr lst)))))\n  (define (absolute x)\n    (if (&lt; x 0)\n        (- x)\n \
    \       x))\n  (define (difference lst)\n    (map (lambda (x) (absolute (- x (average\
    \ lst)))) lst))\n  (average (difference numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define differences (map (lambda (x) (abs (- x mean))) numbers))\n  (mean differences))\n\
    </code>\nFor e.g. the list (1.0 2.0 3.0 4.0), we get:\n<code>&gt; (mean_absolute_deviation\
    \ (list 1.0 2.0 3.0 4.0))\n1.0\n</code>\nFor e.g. the list (3.0 4.0 7.0 5.0),\
    \ we get:\n<code>&gt; (mean_absolute_deviation (list 3.0 4.0 7.0 5.0))\n1.5\n\
    </code>\n<code>-3.0</code> is exactly 3 times away from the mean <code>1.0</code>,\
    \ so MAD = 3, and the same thing with <code>-5.0</code>.\nFor e.g. the list (1.0\
    \ 2.0 3.0 4.0 6.0), we get:\n<code>&gt; (mean_absolute_deviation (list 1.0 2.0\
    \ 3.0 4.0 6.0))\n1.8\n</code>\n<code>-3.0</code> is also <code>3.0</code> times\
    \ away from the mean <code>2.4</code> so MAD = 3, and the same thing with <code>-1.4</code>.\n",
  "  (define sum-of-abs-differences\n    (foldl (lambda (x acc)\n\t     (+ acc (abs\
    \ (- x (sum numbers)))))\n\t   0\n\t   numbers))\n  (/ sum-of-abs-differences\
    \ (length numbers)))\n", "  (let ([mean (/ (apply + numbers) (length numbers))])\n\
    \    (/ (apply + (map (lambda (x) (abs (- x mean))) numbers))\n       (length\
    \ numbers))))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute_difference-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (mean_of_absolute_differences numbers)\n    (/\
    \ (apply + (map absolute_difference-from-mean numbers))\n       (length numbers)))\n\
    \  (mean_of_absolute_differences numbers))\n", "  (let ([mean (apply + numbers)])\n\
    \    (/ (apply + (map (lambda (n) (abs (- n mean))) numbers))\n       (length\
    \ numbers))))\n", "  (define x_mean (/ (sum numbers) (length numbers)))\n  (define\
    \ absolute_differences (map (lambda (x) (abs (- x x_mean))) numbers))\n  (/ (sum\
    \ absolute_differences) (length absolute_differences)))", "  (let ([data-mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x data-mean))) numbers))))\n",
  "  (let ([sum-of-abs (apply + (map abs (map (curry - (mean numbers)) numbers)))])\n\
    \    (/ sum-of-abs (length numbers))))\n", "  (let* ((numbers-sum (apply + numbers))\n\
    \         (numbers-count (length numbers))\n         (numbers-mean (/ numbers-sum\
    \ numbers-count)))\n    (/ (apply + (map (lambda (n) (abs (- n numbers-mean)))\
    \ numbers))\n       numbers-count)))\n", "  (let ([mean (average numbers)])\n\
    \    (apply + (map (lambda (x) (abs (- x mean))) numbers))\n    (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers))\n       (length numbers))))\n", "  (define\
    \ (dev number)\n    (abs (- number (mean numbers))))\n  (mean (map dev numbers)))\n",
  "  (local [(define mean (mean numbers))]\n    (mean (map (lambda (x) (abs (- x mean)))\
    \ numbers))))\n", "  (define (mean_absolute_deviation_helper numbers mean result)\n\
    \    (if (null? numbers)\n        result\n        (mean_absolute_deviation_helper\
    \ (cdr numbers) mean (+ result (abs (- (car numbers) mean))))))\n  (mean_absolute_deviation_helper\
    \ numbers (mean numbers) 0))\n", "  (define mean (mean numbers))\n  (define deviations\
    \ (map (lambda (n) (abs (- n mean))) numbers))\n  (mean deviations))\n", "  (define\
    \ (inner acc n)\n    (let ((abs_diff (- n (mean numbers))))\n      (if (negative?\
    \ abs_diff)\n          (+ acc (- abs_diff))\n          (+ acc abs_diff))))\n \
    \ (/ (foldl inner 0 numbers) (length numbers)))\n", "  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (abs-diff-from-mean-of-numbers\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (mean (abs-diff-from-mean-of-numbers\
    \ numbers)))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs\
    \ (- x mean))) numbers))))\n", "  (define (sum-abs-diffs numbers mean)\n    (cond\
    \ ((null? numbers) 0)\n          (else (+ (abs (- (car numbers) mean))\n     \
    \              (sum-abs-diffs (cdr numbers) mean)))))\n  (/ (sum-abs-diffs numbers\
    \ (mean numbers))\n     (length numbers)))\n", "  (define (abs x)\n    (if (<\
    \ x 0)\n        (- x)\n        x))\n  (define (average xs)\n    (/ (apply + xs)\
    \ (length xs)))\n  (define (sum-absolute-diffs xs)\n    (foldl (lambda (n acc)\n\
    \             (+ acc (abs (- n (average xs)))))\n           0 xs))\n  (/ (sum-absolute-diffs\
    \ numbers) (length numbers)))\n", "  (define (mean xs)\n    (/ (apply + xs) (length\
    \ xs)))\n  (define (abs_diff x x_mean)\n    (abs (- x x_mean)))\n  (define (mad\
    \ xs)\n    (let ([x_mean (mean xs)])\n      (mean (map (lambda (x) (abs_diff x\
    \ x_mean)) xs))))\n  (mad numbers))\n", "  (define (mean_absolute_deviation_iter\
    \ dev_sum num_sum ind numbers)\n    (if (null? numbers)\n        (/ dev_sum num_sum)\n\
    \        (mean_absolute_deviation_iter (+ dev_sum (abs (- (car numbers) (/ dev_sum\
    \ ind))))\n                                      (+ num_sum 1)\n             \
    \                         (+ ind 1)\n                                      (cdr\
    \ numbers))))\n  (mean_absolute_deviation_iter 0 0 0 numbers))\n```\n\n> **Source**:\
    \ http://www.racket-lang.org/\n\n## Raku\n\n```perl6\n#!/usr/bin/env perl6\nuse\
    \ v6;\n\n# Finds the mean absolute deviation of a list of numbers.\nsub MAIN ($list)\
    \ {\n  my @nums = $list.comb;\n  my $sum = [+] @nums;\n  my $avg = $sum / @nums;\n\
    \  my $dev_sum = 0;\n  for @nums -> $num {\n    $dev_sum += abs($num - $avg);\n\
    \  }\n  say $dev_sum / @nums;\n}\n```\n\n> **Source**: https://raku.org/\n\n##\
    \ Racket\n\n```racket\n#lang racket\n", "  (define mean (mean numbers))\n  (define\
    \ absolute-deviations (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute-deviations))\n",
  "  (define number-sum 0)\n  (define number-count 0)\n  (for ([number numbers])\n\
    \    (set! number-sum (+ number-sum number))\n    (set! number-count (+ number-count\
    \ 1)))\n  (define number-mean (/ number-sum number-count))\n  (define abs-deviations\
    \ 0)\n  (for ([number numbers])\n    (set! abs-deviations (+ abs-deviations (abs\
    \ (- number number-mean)))))\n  (/ abs-deviations number-count))\n```\n\n## Quiz:\
    \ Mean Absolute Deviation\n\nWrite a function (mean_absolute_deviation numbers)\
    \ that given a list of numbers,\nwill return their Mean Absolute Deviation around\
    \ their mean.\n\n## Background: Measures of Central Tendency\n\n\"Measures of\
    \ central tendency are values that attempt to describe a set of data by identifying\
    \ the central position within that set of data.\"\n\nOne common measure of central\
    \ tendency is the _mean_, which is the same as the average.\n\nAnother measure\
    \ of central tendency is the _median_, which is the value in the exact middle\
    \ of a sorted list of numbers (or the mean of the two numbers in the middle if\
    \ the list has an even number of elements).\n\nAnother measure of central tendency\
    \ is the _mode_, which is the value that occurs most often in a list of numbers.\n\
    \nWhile each of these is a single number representing some central value in a\
    \ list of numbers, there is no perfect measure of central tendency.  The mean\
    \ can be influenced by extreme numbers, the median does not consider how far numbers\
    \ are from each other, and the mode does not consider how many of each number\
    \ there are.\n\n## Background: Standard Deviation\n\n\"The standard deviation\
    \ is a statistic that measures the dispersion of a dataset relative to its mean.\"\
    \n\nIt is a way to measure the typical distance that the numbers in a dataset\
    \ are from the mean of the dataset.\n\nThe standard deviation is a very common\
    \ measure of central tendency, but it has the drawback that it only measures distances\
    \ in one direction.  A list of numbers where one is 1 standard deviation above\
    \ the mean, one is 1 standard deviation below the mean, and the rest are exactly\
    \ at the mean would have a standard deviation of 0.\n\n## Computing the Mean Absolute\
    \ Deviation\n\nWe can use a modified version of standard", "  (let* ([mean (average\
    \ numbers)]\n         [diffs (map (lambda (x) (abs (- x mean))) numbers)])\n \
    \   (average diffs)))\n```\n\n## Running\n\n```racket\n#lang racket\n", "  (define\
    \ numbers-len (length numbers))\n  (define numbers-sum (sum numbers))\n  (define\
    \ numbers-mean (/ numbers-sum numbers-len))\n  (define diffs (map (\u03BB (x)\
    \ (abs (- x numbers-mean))) numbers))\n  (/ (sum diffs) numbers-len))\n", "  (let*\
    \ ([mean (mean numbers)]\n         [diffs (map (\u03BB (x) (abs (- x mean))) numbers)])\n\
    \    (mean diffs)))\n", "  (define (mapper n) (abs (- n (mean numbers))))\n  (mean\
    \ (map mapper numbers)))\n", "  (define (devs numbers)\n    (map (lambda (x) (abs\
    \ (- x (average numbers)))) numbers))\n  (average (devs numbers)))\n", "  (let\
    \ ((mean (mean numbers)))\n    (mean (map (lambda (n) (abs (- n mean))) numbers))))\n",
  "  (let* ([numbers-count (length numbers)]\n         [sum (apply + numbers)]\n \
    \        [mean (/ sum numbers-count)])\n    (/ (apply + (map (lambda (n) (abs\
    \ (- n mean))) numbers))\n       numbers-count)))\n", "  (cond\n    [(empty? numbers)\
    \ 0]\n    [else\n     (/ (sum (map (lambda (x) (abs (- x (mean numbers)))) numbers))\n\
    \        (length numbers))]))\n", "  (let* ([sum (apply + numbers)]\n        \
    \ [count (length numbers)]\n         [mean (/ sum count)])\n    (define (f x)\
    \ (abs (- x mean)))\n    (/ (apply + (map f numbers)) count)))\n", "  (define\
    \ mean (/ (sum numbers) (length numbers)))\n  (define absolute-deviations\n  \
    \  (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (sum absolute-deviations)\
    \ (length absolute-deviations)))\n", "  (define (mean-accum accum num)\n    (+\
    \ accum num))\n  (define (abs-diff-accum accum num)\n    (+ accum (abs (- num\
    \ (/ (apply + numbers) (length numbers))))))\n  (/ (apply + (map abs-diff-accum\
    \ (make-list (length numbers) 0) numbers))\n     (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define (deviation number)\n    (abs (- number mean)))\n\
    \  (define deviations (map deviation numbers))\n  (mean deviations))\n", "  (define\
    \ mean (average numbers))\n  (define diffs (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (average diffs))\n", "  (if (null? numbers)\n      0\n      (/\
    \ (apply + (map absdiff numbers)) (length numbers))))\n", "  (mean_absolute_deviation_helper\
    \ (get_mean numbers) numbers))\n", "  (define (mean_abs_dev nums mean)\n    (if\
    \ (null? nums)\n        0\n        (/ (+ (abs (- (car nums) mean))\n         \
    \     (mean_abs_dev (cdr nums) mean))\n           (length nums))))\n  (mean_abs_dev\
    \ numbers (mean numbers)))\n", "  (define input-length (length numbers))\n  (define\
    \ (helper numbers accum dev-sum)\n    (if (null? numbers)\n        (/ dev-sum\
    \ input-length)\n        (helper (cdr numbers) (+ accum (car numbers)) (+ dev-sum\
    \ (abs (- (car numbers) (/ accum input-length)))))))\n  (helper numbers 0 0))\n",
  "  (define num-len (length numbers))\n  (define mean (average numbers))\n  (define\
    \ sum (apply + (map (lambda (x) (abs (- x mean))) numbers)))\n  (/ sum num-len))\n",
  "  (define count (list-length numbers))\n  (define sum (foldl + 0 numbers))\n  (define\
    \ mean (/ sum count))\n  (define averages (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (/ (foldl + 0 averages) count))\n", "  (define mean (mean numbers))\n  (mean\
    \ (map (lambda (num) (abs (- num mean))) numbers)))\n", "  (define len (length\
    \ numbers))\n  (define sum (apply + numbers))\n  (define mean (/ sum len))\n \
    \ (apply + (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (/ (apply + (map\
    \ (lambda (x) (abs (- x mean))) numbers)) len) len))\n", "  (define n (length\
    \ numbers))\n  (define x_mean (/ (apply + numbers) n))\n  (define squared-difference\n\
    \    (lambda (x)\n      (expt (- x x_mean) 2)))\n  (sqrt (/ (apply + (map squared-difference\
    \ numbers)) n)))\n", "  (define avg (mean numbers))\n  (mean (map (\u03BB (n)\
    \ (abs (- n avg))) numbers)))\n", "  (define mean\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (/ (apply + (map (lambda (n) (abs (- n mean))) numbers))\n   \
    \  (length numbers)))\n", "  (define mean (mean numbers))\n  (mean (map (\u03BB\
    \ (x) (abs (- x mean))) numbers)))\n", "  (define n (length numbers))\n  (define\
    \ sum (apply + numbers))\n  (define mean (/ sum n))\n  (define d_vect (map (lambda\
    \ (x) (abs (- x mean))) numbers))\n  (/ (apply + d_vect) n))\n", "  (let ((sum\
    \ 0)\n        (num-count 0)\n        (mean 0))\n    (for ([num numbers])\n   \
    \   (set! sum (+ sum num))\n      (set! num-count (+ num-count 1)))\n    (set!\
    \ mean (/ sum num-count))\n    (set! sum 0)\n    (for ([num numbers])\n      (set!\
    \ sum (+ sum (abs (- num mean)))))\n    (/ sum num-count)))\n```\n\n### Root Mean\
    \ Square\n\n```racket\n#lang racket\n", "  (let* ([mean (mean numbers)]\n    \
    \     [diffs (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean diffs)))\n",
  "  (define (sum_absolute_deviations_from_mean numbers)\n    (apply + (map (lambda\
    \ (x) (abs (- x (apply + numbers))/ (length numbers))) numbers)))\n  (/ (sum_absolute_deviations_from_mean\
    \ numbers) (length numbers)))\n", "  (define n_len (length numbers))\n  (define\
    \ n_sum (apply + numbers))\n  (define n_mean (/ n_sum n_len))\n  (define n_means\
    \ (map (lambda (x) (- x n_mean)) numbers))\n  (define n_abs (map abs n_means))\n\
    \  (/ (apply + n_abs) n_len))\n", "  (local [(define (mean_abs_dev_iter sum count)\n\
    \            (cond [(empty? numbers)\n                   (/ sum count)]\n    \
    \              [else\n                   (mean_abs_dev_iter (+ sum (abs (- (first\
    \ numbers)\n                                                      (/ sum count))))\n\
    \                                      (+ count 1))]))]\n    (mean_abs_dev_iter\
    \ 0 0)))\n", "  (let ([mean (apply + numbers)])\n    (/ (apply + (map (lambda\
    \ (n) (abs (- n mean))) numbers))\n       (length numbers))))\n", "  (define numbers_sum\
    \ (apply + numbers))\n  (define numbers_len (length numbers))\n  (define numbers_mean\
    \ (/ numbers_sum numbers_len))\n  (define abs_diffs\n    (map (lambda (x) (abs\
    \ (- x numbers_mean))) numbers))\n  (/ (apply + abs_diffs) numbers_len))\n", " \
    \ (define (absolute-difference x y)\n    (if (&lt; x y) (- y x) (- x y)))\n  (define\
    \ (do-sum lst)\n    (cond ((null? lst) 0)\n          (else (+ (absolute-difference\
    \ (car lst) (average lst))\n                   (do-sum (cdr lst))))))\n  (/ (do-sum\
    \ numbers) (length numbers)))\n", "  (let* ([numbers-count (length numbers)]\n\
    \         [mean (sum numbers) (/ numbers-count)])\n    (/ (sum (map (lambda (x)\
    \ (abs (- x mean))) numbers)) numbers-count)))\n", "  (define (mean_of_numbers\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference_from_mean\
    \ numbers)\n    (define numbers_mean (mean_of_numbers numbers))\n    (map (lambda\
    \ (n) (abs (- n numbers_mean))) numbers))\n  (mean_of_numbers (absolute_difference_from_mean\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define deviations (map (lambda\
    \ (n) (abs (- n mean))) numbers))\n  (mean deviations))\n", "  (define (absolute-diff\
    \ x)\n    (abs (- x (list-mean numbers))))\n  (list-mean (map absolute-diff numbers)))\n",
  "  (let ((numbers-mean (/ (apply + numbers) (length numbers))))\n    (/ (apply +\
    \ (map (lambda (num) (abs (- num numbers-mean))) numbers))\n       (length numbers))))\n",
  "  (define (deviation number)\n    (abs (- number (mean numbers))))\n  (define (mean_deviations\
    \ numbers)\n    (cond ((null? numbers) 0)\n          (else (+ (deviation (car\
    \ numbers))\n                   (mean_deviations (cdr numbers))))))\n  (/ (mean_deviations\
    \ numbers) (length numbers)))\n", "  (define (mean x)\n    (/ (apply + x) (length\
    \ x)))\n  (define (absolute-difference x)\n    (abs (- x (mean numbers))))\n \
    \ (define (maplist f lst)\n    (if (null? lst)\n      '()\n      (cons (f (car\
    \ lst)) (maplist f (cdr lst)))))\n  (/ (apply + (maplist absolute-difference numbers))\
    \ (length numbers)))\n", "  (define total (apply + numbers))\n  (define length\
    \ (length numbers))\n  (define mean (/ total length))\n  (define absolute-deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (/ (apply + absolute-deviations)\
    \ length))\n", "  (define mean (average numbers))\n  (define deviations (map (lambda\
    \ (x) (abs (- x mean))) numbers))\n  (average deviations))\n", "  (let* ([mean_value\
    \ (mean numbers)]\n         [results (for/list ([i numbers])\n               \
    \     (abs (- i mean_value)))])\n    (mean results)))\n", "  (define mean (/ (apply\
    \ + numbers) (length numbers)))\n  (/ (apply + (map (lambda (x) (abs (- x mean)))\
    \ numbers)) (length numbers)))\n", "  (define len (length numbers))\n  (define\
    \ (sum_abs_differences n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (abs\
    \ (- (list-ref numbers n) (mean numbers)))\n               (sum_abs_differences\
    \ (- n 1)))]))\n  (/ (sum_abs_differences (- len 1)) len))\n", "  (define mean-num\
    \ (/ (apply + numbers) (length numbers)))\n  (/ (apply + (map (lambda (x) (abs\
    \ (- x mean-num))) numbers))\n     (length numbers)))\n", "  (define mean (mean\
    \ numbers))\n  (define abs-diffs (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean abs-diffs))\n", "  (cond\n    [(empty? numbers)\n     #f]\n    [else\n\
    \     (/ (apply + (map (lambda (x) (abs (- x (mean numbers)))) numbers))\n   \
    \     (length numbers))]))\n", "  (define x-bar (mean numbers))\n  (mean (map\
    \ (lambda (x) (abs (- x x-bar))) numbers)))\n", "  (let ((mean (mean numbers)))\n\
    \    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n", "  (let ([nums-len\
    \ (length numbers)])\n    (if (not (positive? nums-len))\n        0\n        (let\
    \ ([mean (mean numbers)])\n          (/ (apply + (map (lambda (num) (abs (- num\
    \ mean))) numbers))\n             nums-len)))))\n", "  (define (mean number-list)\n\
    \    (/ (apply + number-list) (length number-list)))\n  (define (absolute-deviation-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (average-absolute-deviation\
    \ numbers)\n    (/ (apply + (map absolute-deviation-from-mean numbers))\n    \
    \   (length numbers)))\n  (average-absolute-deviation numbers))\n```\n\n### Skewness\n\
    Skewness is defined as:\n\n![skewness](https://wikimedia.org/api/rest_v1/media/math/render/svg/26b6ba8cf6cb2420c07e9e9da7f8c1b8125c77a3)\n\
    \nOr in Scheme,\n\n```scheme", "  (let* ([mean (average numbers)]\n         [centerpoint\
    \ mean]\n         [results (map (lambda (x) (abs (- x centerpoint))) numbers)])\n\
    \    (average results)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
