name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (let ([x_mean (/ (apply + numbers) (length numbers))])\n    (/ (apply\
    \ + (map (lambda (x) (abs (- x x_mean))) numbers))\n       (length numbers))))\n",
  "  (define length_of_numbers (length numbers))\n  (define mean_of_numbers (mean\
    \ numbers))\n  (define absolute_difference_list (list-abs-difference numbers mean_of_numbers))\n\
    \  (mean absolute_difference_list))\n", "  (define (sum numbers)\n    (foldr +\
    \ 0 numbers))\n  (define (absolute x)\n    (cond ((< x 0) (- x))\n          (else\
    \ x)))\n  (define (average numbers)\n    (/ (sum numbers) (length numbers)))\n\
    \  (define (absolute-distances numbers)\n    (map (lambda (x) (absolute (- x (average\
    \ numbers)))) numbers))\n  (/ (sum (absolute-distances numbers)) (length numbers)))\n",
  "  (let* ([mean (average numbers)]\n         [mean-differences (map (lambda (x)\
    \ (abs (- x mean))) numbers)])\n    (average mean-differences)))\n", "  (define\
    \ (map-abs x)\n    (abs x))\n  (define (avg-list lst)\n    (/ (apply + lst) (length\
    \ lst)))\n  (define (mean-diff x)\n    (- x (avg-list numbers)))\n  (define (map-mean-diff\
    \ x)\n    (mean-diff x))\n  (define (sum-list lst)\n    (apply + lst))\n  (define\
    \ (size-list lst)\n    (length lst))\n  (define (mean-absolute-deviation-accumulator\
    \ numbers)\n    (cond ((null? numbers) '())\n          (else (cons (mean-diff\
    \ (car numbers))\n                      (mean-absolute-deviation-accumulator (cdr\
    \ numbers))))))\n  (/ (sum-list (map-abs (mean-absolute-deviation-accumulator\
    \ numbers)))\n     (size-list numbers)))\n", "  (mean (map (\u03BB (x) (abs (-\
    \ x (mean numbers)))) numbers)))\n", "  (define (abs_diff n)\n    (abs (- n (mean\
    \ numbers))))\n  (mean (map abs_diff numbers)))\n", "  (define numbers-mean (mean\
    \ numbers))\n  (mean (map (lambda (x) (abs (- x numbers-mean))) numbers)))\n",
  "  (define (abs_deviation number)\n    (abs (- number (mean numbers))))\n  (mean\
    \ (map abs_deviation numbers)))\n", "  (let ([mean (reduce + numbers 0.0)])\n\
    \    (/ (reduce + (map (lambda (x) (abs (- x mean))) numbers) 0.0)\n       (length\
    \ numbers))))\n```\n\n``` scheme\n#lang scheme\n", "  (let* ([mean (mean numbers)]\n\
    \         [mean-deviations (map (lambda (n) (abs (- n mean))) numbers)])\n   \
    \ (mean mean-deviations)))\n", "  (define (rec numbers acc)\n    (if (null? numbers)\n\
    \        (/ acc (length numbers))\n        (rec (cdr numbers) (+ acc (abs (- (car\
    \ numbers) (/ acc (length numbers))))))))\n  (rec numbers 0))\n  \n", "  (define\
    \ x_mean (mean numbers))\n  (define absolute_deviations (map (lambda (x) (abs\
    \ (- x x_mean))) numbers))\n  (mean absolute_deviations))\n", "  (local [(define\
    \ (filter-func x) (abs (- x (mean numbers))))]\n    (mean (map filter-func numbers))))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map abs-diff numbers (repeat mean)))))\n",
  "  (define (absval x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (average-of-squares\
    \ numbers)\n    (divide (apply + (map (lambda (x) (* x x)) numbers))\n       \
    \     (length numbers)))\n  (sqrt (average-of-squares (map (lambda (x) (absval\
    \ (- x (average numbers)))) numbers))))", "  (let* ([sum_of_numbers (apply + numbers)]\n\
    \         [mean (/ sum_of_numbers (length numbers))]\n         [mean_diffs (map\
    \ (lambda (n) (- n mean)) numbers)])\n    (/ (apply + (map abs mean_diffs)) (length\
    \ numbers))))\n", "  (define (summand element)\n    (abs (- element (mean numbers))))\n\
    \  (mean (map summand numbers)))\n", "  (let* ([average (average numbers)]\n \
    \        [diff-from-average (map (lambda (x) (abs (- x average))) numbers)])\n\
    \    (average diff-from-average)))\n", "  (let ((mean (mean numbers)))\n    (mean\
    \ (map (lambda (n) (abs (- n mean))) numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
