name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\"\
  )\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"\
  aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (define (substring? start end)\n    (equal? (substring string start\
    \ end) substring))\n  (define (search? start)\n    (substring? start (+ start\
    \ (string-length substring))))\n  (define (search start count)\n    (cond ((or\
    \ (string-empty? string) (string-empty? substring)) 0)\n          ((search? start)\
    \ (search (+ start 1) (+ count 1)))\n          (else count)))\n  (search 0 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (how_many_times_helper string substring 0))\n", "  (if (empty? string)\n   \
    \   0\n      (if (equal? (substring string 0 (string-length substring)) substring)\n\
    \          (+ 1 (how_many_times (substring string 1) substring))\n          (how_many_times\
    \ (substring string 1) substring))))\n", "  (define (how_many_times-helper string\
    \ substring position)\n    (cond\n      [(empty? string) position]\n      [(empty?\
    \ substring) position]\n      [(and (not (empty? string)) (not (empty? substring))\
    \ (equal? (first string) (first substring))) (how_many_times-helper (rest string)\
    \ (rest substring) (add1 position))]\n      [else (how_many_times-helper (rest\
    \ string) substring position)]))\n  (how_many_times-helper string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(equal? (substring\
    \ string 0 (string-length substring)) substring) (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n",
  "  (cond\n    [(equal? string \"\") 0]\n    [(equal? substring \"\") 0]\n    [(equal?\
    \ (substring string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times\
    \ (substring string 1) substring))]\n    [else (how_many_times (substring string\
    \ 1) substring)]))\n", "  (letrec ([len (string-length substring)]\n         \
    \  [count 0]\n           [n (string-length string)]\n           [start 0])\n \
    \   (if (= len 0) 0\n      (if (= start n) count\n        (if (string=? (substring\
    \ string start (+ start len)) substring)\n            (how_many_times string substring\
    \ (+ start 1) (+ count 1))\n            (how_many_times string substring (+ start\
    \ 1) count))))))", "  (cond\n    [(or (empty? string) (empty? substring)) 0]\n\
    \    [(not (string-contains string (string-head substring))) (how_many_times (string-tail\
    \ string) substring)]\n    [else (+ 1 (how_many_times (string-tail string) substring))]))\n",
  "  (cond\n    [(empty? string) 0]\n    [(string-index substring string) (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))]\n    [else\
    \ 0]))\n", "  (define (hmt substring str i len)\n    (cond ((&gt; i (- len (string-length\
    \ substring))) 0)\n          ((string=? substring (substring str i (+ i (string-length\
    \ substring)))) (+ 1 (hmt substring str (+ i 1) len)))\n          (else (hmt substring\
    \ str (+ i 1) len))))\n  (hmt substring string 0 (string-length string)))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string 1 (string-length string)) substring))\n      0))\n", "  (if (string-length\
    \ string)\n      (if (string-prefix? substring string)\n          (+ 1 (how_many_times\
    \ (substring string (string-length substring)) substring))\n          (how_many_times\
    \ (substring string 1) substring))\n      0))\n", "  (define (count-helper string\
    \ substring start)\n    (cond\n      [(string=? substring (substring string start\
    \ (+ start (string-length substring))))\n       (+ 1 (count-helper string substring\
    \ (+ start 1)))]\n      [else\n       0]))\n  (count-helper string substring 0))\n",
  "  (if (substring=? string substring)\n      1\n      (if (substring=? substring\
    \ \"\")\n          0\n          (if (substring=? string \"\")\n              0\n\
    \              (+ (if (substring=? string (substring substring 0 1))\n       \
    \             (how_many_times (substring string 1) substring)\n              \
    \      0)\n                 (how_many_times (substring string 1) substring))))))",
  "  (if (string-index substring string)\n      (+ 1 (how_many_times (substring string\
    \ (string-index substring string) (+ (string-index substring string) (string-length\
    \ substring))\n) substring))\n      0))", "  (if (string-length string)\n    \
    \  (if (string-length substring)\n          (if (string=? (substring string 0\
    \ (string-length substring)) substring)\n              (+ 1 (how_many_times (substring\
    \ string 1) substring))\n              (how_many_times (substring string 1) substring))\n\
    \          0)\n      0))\n", "  (let loop ([i 0] [n 0])\n    (cond\n      [(null?\
    \ string) n]\n      [(equal? substring (substring string i (+ i (string-length\
    \ substring))))\n       (loop (+ i (string-length substring)) (+ n 1))]\n    \
    \  [else (loop (+ i 1) n)])))\n", "  (define (iter str sub cnt)\n    (if (string-contains\
    \ str sub)\n        (iter (substring str (add1 (string-index str sub))) sub (add1\
    \ cnt))\n        cnt))\n  (iter string substring 0))", "  (if (eq? string \"\"\
    )\n      0\n      (if (string-contains string substring)\n          (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-length substring))) substring))\n          0)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
