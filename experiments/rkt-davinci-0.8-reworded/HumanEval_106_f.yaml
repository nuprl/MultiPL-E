name: HumanEval_106_f
language: rkt
prompt: "#lang racket\n\n;; Implement the function f that takes n as a parameter,\n\
  ;; and returns a list of size n, such that the value of the element at index i is\
  \ the factorial of i if i is even\n;; or the sum of numbers from 1 to i otherwise.\n\
  ;; i starts from 1.\n;; the factorial of i is the multiplication of the numbers\
  \ from 1 to i (1 * 2 * ... * i).\n;; Example:\n;; >>> (f 5)\n;; (list 1 2 6 24 15)\n\
  (define (f n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate f))\n\
  \    (check-equal? (candidate 5) (list 1 2 6 24 15))\n    (check-equal? (candidate\
  \ 7) (list 1 2 6 24 15 720 28))\n    (check-equal? (candidate 1) (list 1))\n   \
  \ (check-equal? (candidate 3) (list 1 2 6))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    ((= n 0) (list))\n    ((= n 1) (list 1))\n    ((= n 2)\
    \ (list 1 2))\n    (else\n     (cons (if (even? n)\n               (foldl * 1\
    \ (range 1 n))\n               (foldl + 0 (range 1 n)))\n           (f (- n 1))))))\n",
  "    (build-list n (lambda (i) (if (even? i) (factorial i) (sum-up-to i)))))\n",
  "  (cond ((<= n 0) '())\n        ((<= n 1) (list 1))\n        (else (cons (if (even?\
    \ (- n 1)) (factorial (- n 1)) (sum-to (- n 1))) (f (- n 1))))))\n", "  (cond\n\
    \    ((= n 0) '())\n    ((odd? n) (cons (apply + (build-list n (lambda (x) x)))\
    \ (f (- n 1))))\n    ((even? n) (cons (apply * (build-list n (lambda (x) x)))\
    \ (f (- n 1))))))\n", "  (cond\n    [(= n 0) '()]\n    [(= n 1) (list 1)]\n  \
    \  [else (append (f (- n 1)) (list (g (- n 1))))]))\n", "  (define (factorial\
    \ i)\n    (if (eq? i 1)\n        1\n        (* i (factorial (- i 1)))))\n  (cond\n\
    \    [(eq? n 0) empty]\n    [(even? n) (cons (factorial n) (f (- n 1)))]\n   \
    \ [else (cons n (f (- n 1)))]))", "  (define (f-i-even i)\n    (cond [(eq? i 0)\
    \ 1]\n          [else (* i (f-i-even (- i 1)))]))\n  (define (f-i-odd i)\n   \
    \ (cond [(eq? i 0) 0]\n          [else (+ i (f-i-odd (- i 1)))]))\n  (define (gen-lst\
    \ n i)\n    (cond [(eq? n i) (list)]\n          [(= (modulo i 2) 0) (cons (f-i-even\
    \ i) (gen-lst n (+ i 1)))]\n          [else (cons (f-i-odd i) (gen-lst n (+ i\
    \ 1)))]))\n  (gen-lst n 1))\n```\n\n```racket\n#lang racket\n", "  (if (= n 0)\n\
    \      (list)\n      (cons (if (even? n)\n              (factorial n)\n      \
    \        (list-sum (list-from-to 1 n)))\n            (f (- n 1)))))\n", "  (if\
    \ (= n 0)\n      empty\n      (list-append (list n) (f (- n 1)))))\n", "  (for/list\
    \ ([i (in-range n)])\n    (if (even? i)\n        (factorial i)\n        (sum (in-range\
    \ 1 (+ i 1))))))\n", "  (local [(define (f-helper i)\n            (if (= i 0)\n\
    \                (list)\n                (cons (if (even? i)\n               \
    \           (factorial i)\n                          (sum-n i))\n            \
    \          (f-helper (- i 1)))))])\n  (f-helper n)))\n", "  (list-of (list-ref\
    \ (list 1 2 6 24 15) (sub1 n))))\n", "  (if (= n 0)\n      '()\n      (append\
    \ (f (- n 1)) (list (if (even? n)\n                                    (factorial\
    \ n)\n                                    (sum (range 1 n)))))))\n", "  (f n 1\
    \ 1))\n", "  'your-code-here)\n", "  (define (factorial num)\n    (if (= num 1)\n\
    \        1\n        (* num (factorial (- num 1)))))\n  (define (sum-to-num num)\n\
    \    (if (= num 1)\n        1\n        (+ num (sum-to-num (- num 1)))))\n  (if\
    \ (= n 1)\n      (list 1)\n      (cons (if (even? n)\n                (factorial\
    \ n)\n                (sum-to-num n))\n            (f (- n 1)))))\n", "  (local\
    \ ((define (factorial n)\n            (for/fold ([result 1])\n               \
    \       ([i (in-range 2 (add1 n))])\n              (* result i))))\n    (for/list\
    \ ([i (in-range 1 (add1 n))])\n      (if (even? i)\n          (factorial i)\n\
    \          (for/sum ([j (in-range 1 (add1 i))])\n            j)))))\n```\n\n```racket\n\
    #lang racket\n", "  (local ((define (rec-helper i)\n            (cond ((= i n)\
    \ empty)\n                  ((even? i) (cons (* (range 1 i) (range 1 i)) (rec-helper\
    \ (+ i 1))))\n                  (else (cons (apply + (range 1 i)) (rec-helper\
    \ (+ i 1)))))))\n    (rec-helper 1)))\n", "  (define (odd n)\n    (cond ((= n\
    \ 1) 1)\n          (else (+ n (odd (- n 1))))))\n  (define (even n)\n    (cond\
    \ ((= n 0) 1)\n          (else (* n (even (- n 1))))))\n  (cond ((= n 1) (list\
    \ 1))\n        ((= (remainder n 2) 0) (cons (even n) (f (- n 1))))\n        (else\
    \ (cons (odd n) (f (- n 1))))))\n", "  (define (factorial x)\n    (define (fact\
    \ x acc)\n      (if (= x 1)\n          acc\n          (fact (- x 1) (* acc x))))\n\
    \    (fact x 1))\n  (define (sum-to-n x)\n    (define (sum x acc)\n      (if (=\
    \ x 1)\n          acc\n          (sum (- x 1) (+ acc x))))\n    (sum x 0))\n \
    \ (cond ((= n 0) empty)\n        ((= n 1) (list 1))\n        ((even? n) (append\
    \ (f (- n 1)) (list (factorial n))))\n        (else (append (f (- n 1)) (list\
    \ (sum-to-n n))))))\n", "  (define (fact n)\n    (if (= n 1)\n        1\n    \
    \    (* n (fact (- n 1)))))\n  (map (lambda (i)\n         (if (even? i)\n    \
    \         (fact i)\n             (for/sum ([x (in-range 1 (add1 i))])\n      \
    \         x)))\n       (in-range 1 (add1 n))))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(= n 1) (list 1)]\n    [else (cons (if (even? n) (* n (f (- n 1))) (+ n\
    \ (f (- n 1)))) (f (- n 1)))]))\n", "  (local\n    (;; helper function\n     (define\
    \ (g i)\n       (cond\n         [(even? i) (cond\n                      [(= i\
    \ 0) 1]\n                      [else (* i (g (- i 2)))])]\n         [else (+ i\
    \ (g (- i 1)))]))\n    (for/list ([i (in-range 1 (+ 1 n))])\n      (g i))))\n",
  "  (for/list ([i (in-range (add1 n))])\n    (cond\n      [(even? i) (for/product\
    \ ([j (in-range (add1 i))]) j)]\n      [else (for/sum ([j (in-range (add1 i))])\
    \ j)])\n    )\n  )\n", "  (list-tabulate n (lambda (i)\n                     (if\
    \ (even? i)\n                         (factorial i)\n                        \
    \ (sum-i-to-n i)))))", "(cond\n  [(= n 0) empty]\n  [else (cons (if (= 1 (remainder\
    \ n 2)) (sum '(1 n)) (factorial n)) (f (- n 1)))]))\n", "  (map (lambda (i)\n\
    \         (if (even? i)\n             (fact i)\n             (sum-up-to i)))\n\
    \       (range 1 (+ 1 n))))\n", "    (for/list ([i (in-range 1 (add1 n))])\n \
    \     (cond [(even? i) (reduce * (in-range 1 (add1 i)))]\n            [else (reduce\
    \ + (in-range 1 (add1 i)))])))\n", "  (let loop ([n n] [i 1] [lst '()])\n    (cond\n\
    \      [(zero? n) (reverse lst)]\n      [(even? i) (loop (- n 1) (+ i 1) (cons\
    \ (factorial i) lst))]\n      [else (loop (- n 1) (+ i 1) (cons (sum-to i) lst))])))\n",
  "  (define (f-i c n)\n    (cond [(= c n) empty]\n          [(and (even? c) (not\
    \ (= c 0))) (cons (* c (f-i (- c 1) n)) (f-i (+ c 1) n))]\n          [else (cons\
    \ (fold + 0 (map (lambda (x) x) (in-range 1 c))) (f-i (+ c 1) n))]))\n  (f-i 0\
    \ n))\n", "  (for/list ([i (in-range n)])\n            (if (even? i)\n       \
    \         (factorial i)\n                (for/sum ([j (in-range i)])\n       \
    \                   j))))\n", "  (if (zero? n)\n      '()\n      (append (f (-\
    \ n 1))\n              (list (if (even? n)\n                        (fact n)\n\
    \                        (sum n))))))\n", "  (for/list ((i (in-range 1 (+ n 1))))\n\
    \    (if (even? i)\n        (fact i)\n        (apply + (in-range 1 (+ i 1))))))\n",
  "  (if (zero? n)\n      (void)\n      (cons\n       (if (even? n)\n           (fact\
    \ n)\n           (sum n))\n       (f (- n 1)))))\n", "  (if (= n 0) (list)\n \
    \     (cons (if (even? n) (factorial n) (sum n)) (f (- n 1)))))\n", "  (if (=\
    \ n 0)\n      (list)\n      (append (f (- n 1))\n              (list (if (even?\
    \ n)\n                        (fact n)\n                        (sum-to n))))))\n",
  "  (if (= n 0) '()\n      (if (= (remainder n 2) 0)\n          (cons (factorial\
    \ n) (f (- n 1)))\n          (cons (sum-to n) (f (- n 1))))))\n", "  (if (= n\
    \ 0)\n      '()\n      (cons (if (even? n)\n              (product n)\n      \
    \        (sum n))\n            (f (- n 1)))))\n", "  (local [(define (g i) (if\
    \ (even? i) (factorial i) (sum-from-1-to i)))\n          (define (factorial n)\
    \ (if (= n 1) 1 (* n (factorial (- n 1)))))\n          (define (sum-from-1-to\
    \ n) (if (= n 1) 1 (+ n (sum-from-1-to (- n 1)))))\n          (define (build n)\
    \ (if (= n 0) '() (cons (g n) (build (- n 1)))))\n          ]\n    (build n)))\n",
  "  (map (lambda (i) (if (even? i) (factorial i) (sum-from-1-to i))) (list->vector\
    \ (iota n))))\n", "  (cond\n    [(< n 1) null]\n    [else\n     (cond\n      \
    \ [(even? n) (cons (fact n) (f (- n 1)))]\n       [else (cons (sum-i-to-n n) (f\
    \ (- n 1)))])]))\n", "  (cond ((= n 0) (list))\n        ((= n 1) (list 1))\n \
    \       (else (cons (if (even? (- n 1)) (factorial (- n 1)) (sum-up-to (- n 1)))\
    \ (f (- n 1))))))", "  (for/list ((i (in-range 1 (+ n 1))))\n    (if (even? i)\n\
    \        (fact i)\n        (sum (in-range 1 (+ i 1))))))\n", '  (list->vector
    (list-of-list n)))', "  (define (g m)\n    (cond\n      [(= m 0) 1]\n      [else\
    \ (* m (g (- m 1)))]))\n  (cond\n    [(= n 0) (list)]\n    [(= (remainder n 2)\
    \ 0) (cons (g n) (f (- n 1)))]\n    [else (cons n (f (- n 1)))]))\n", "  (cond\n\
    \    [(= n 0) (list)]\n    [(= (remainder n 2) 0) (cons (* n (f (- n 1))) (f (-\
    \ n 1)))]\n    [else (cons (sum-1-to-n n) (f (- n 1)))]))\n", "  (if (= n 0)\n\
    \      empty\n      (cons\n       (cond\n         [(= (remainder n 2) 0)\n   \
    \       (reduce * (range 1 (+ 1 n)))]\n         [else\n          (reduce + (range\
    \ 1 (+ 1 n)))])\n       (f (- n 1)))))\n```\n\n``` #lang racket", "  (define (fact\
    \ n)\n    (if (= n 1)\n        1\n        (* n (fact (- n 1)))))\n  (for/list\
    \ ([i (in-range 1 (+ n 1))])\n    (if (even? i)\n        (fact i)\n        (for/sum\
    \ ([i (in-range 1 (+ i 1))])\n                i))))\n", "  (for/list ([i (in-range\
    \ n)]\n             #:when (even? i))\n    (apply * (in-range 1 (add1 i))))\n\
    \  (for/list ([i (in-range n)]\n             #:when (odd? i))\n    (apply + (in-range\
    \ 1 (add1 i)))))\n```\n\n### Task 13\n```racket\n#lang racket\n", "  ;; TODO:\
    \ fill here\n  )\n```\n\n#### Hint\n\n- You need to use `when` and `if` to write\
    \ a `cond` expression.\n\n#### Answer\n\n```racket\n#lang racket\n", "  (for/list\
    \ ([i (in-range 1 (+ n 1))])\n    (cond\n      [(even? i) (for/product ([i (in-range\
    \ 1 (+ i 1))]) i)]\n      [else (for/sum ([i (in-range 1 (+ i 1))]) i)])\n  )\n\
    )\n", "  (define (iter i r)\n    (if (<= i n)\n        (iter (+ i 1) (cons (if\
    \ (even? i) (fact i) (sum 1 i)) r))\n        (reverse r)))\n  (iter 1 '()))\n",
  "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact (- n 1)))))\n\
    \  (for/list ([i (in-range 1 (+ n 1))])\n    (if (even? i)\n        (fact i)\n\
    \        (for/sum ([j (in-range 1 (+ i 1))])\n          j))))\n", "  (cond\n \
    \   [(= n 0) empty]\n    [else (list (cond [(even? (- n 1)) (factorial (- n 1))]\n\
    \                    [else (sum-to (- n 1))])\n                (f (- n 1)))]))\n",
  "  ;; Implement the function f here\n  )\n", "  (if (zero? n)\n      '()\n     \
    \ (cons (if (even? n)\n              (factorial n)\n              (sum-from-1-to\
    \ n))\n            (f (- n 1)))))\n", "  (for/list ([i (in-range 1 (+ n 1))])\n\
    \    (if (even? i)\n        (for/product ([j (in-range 1 (+ i 1))])\n        \
    \  j)\n        (for/sum ([j (in-range 1 (+ i 1))])\n          j))))\n", "  (define\
    \ (sum x)\n    (cond\n      [(= x 1) 1]\n      [else (+ x (sum (- x 1)))]))\n\
    \  (cond\n    [(= n 1) (list 1)]\n    [else (cons (sum n) (f (- n 1)))]))\n",
  "  (cond\n    [(= n 0) empty]\n    [else (cons (if (even? n) (fact n) (sum n)) (f\
    \ (- n 1)))]))\n", "  (build-list n (lambda (i)\n\t\t  (if (even? i)\n\t\t   \
    \   (factorial i)\n\t\t      (sum-numbers i)))))\n", "  (for/list ([i (in-range\
    \ n)])\n    (if (even? i)\n        (for/fold ([acc 1]) ([k (in-range 1 (add1 i))])\
    \ (* acc k))\n      (for/fold ([acc 0]) ([k (in-range 1 (add1 i))]) (+ acc k)))))\n\
    ```\n\nExample:\n\n```racket\n#lang racket", "  (cond [(= n 0) '()]\n        [else\
    \ (cons (cond [(even? n) (factorial n)]\n                          [else (sum-of-digits\
    \ n)])\n                   (f (- n 1)))]))", "  (build-list n (lambda (i) (if\
    \ (even? i) (apply * (build-list i (lambda (x) (+ x 1)))) (+ (i) (f (- i 1)))))))\n\
    ```", "  (define (helper i)\n    (cond ((even? i) (factorial i))\n          (else\
    \ (sum-upto i))))\n  (build-list n helper))\n", "    (for/list ((i (in-range 1\
    \ (add1 n))))\n        (if (even? i)\n            (for/fold ((p 1)) ((j (in-range\
    \ 1 (add1 i))))\n                (* p j))\n            (for/fold ((s 0)) ((j (in-range\
    \ 1 (add1 i))))\n                (+ s j)))))\n", "  (cond\n    [(< n 1) empty]\n\
    \    [(= (remainder n 2) 0) (cons (fact n) (f (- n 1)))]\n    [else (cons (sum\
    \ n) (f (- n 1)))]))\n", "  (if (= n 0)\n      empty\n      (cons (f-n 1 n) (f\
    \ (- n 1)))))\n", "  (if (= n 0)\n      empty\n      (cons (if (even? n)\n   \
    \            (foldl * 1 (for/list ([i (in-range 1 n)]) i))\n               (foldl\
    \ + 0 (for/list ([i (in-range 1 n)]) i)))\n            (f (- n 1)))))", "  (range\
    \ 0 n '()))\n", "  (if (= n 0) empty (cons (f1 n) (f (- n 1)))))\n", "  (cond\n\
    \    [(zero? n) '()]\n    [(even? n) (cons (fact n) (f (- n 1)))]\n    [else (cons\
    \ (sum n) (f (- n 1)))]))", "  (if (= n 0)\n      '()\n      (cons (if (even?\
    \ n)\n                (fact n)\n                (sum (range n)))\n           \
    \ (f (- n 1)))))\n", "  (define (aux i)\n    (if (= i n)\n        (list 1)\n \
    \       (if (even? i)\n            (cons (factorial i) (aux (+ i 1)))\n      \
    \      (cons (sum-to i) (aux (+ i 1))))))\n  (aux 1))\n", "  (cond\n    [(= n\
    \ 0)\n     empty]\n    [else\n     (cons\n      (cond\n        [(even? n)\n  \
    \       (factorial n)]\n        [else\n         (sigma n)])\n      (f (- n 1)))]))\n",
  "  ;; fill your code here\n  (if (= n 0)\n      '()\n      (cons (if (even? n)\n\
    \                (fact n)\n                (sum n))\n            (f (- n 1)))))\n",
  "  (for/list ([i (in-range n)])\n    (if (even? i)\n        (reduce * (in-range\
    \ (+ 1 i)))\n        (reduce + (in-range (+ 1 i))))))\n", "  (for/list ((i (in-range\
    \ n)))\n            (cond\n              [(even? i) (for/fold ([fact 1])\n   \
    \                               ([i (in-range i)])\n                         \
    \         (* fact i))]\n              [else (for/fold ([i (in-range i)])\n   \
    \                           ([x i])\n                              (+ x i))])))\n",
  "  (for/list ([i (in-range 1 (+ n 1))])\n    (if (even? i)\n        (apply * (in-range\
    \ 1 (+ i 1)))\n        (apply + (in-range 1 (+ i 1))))))\n", "  (if (= n 0)\n\
    \      '()\n      (cons (if (even? n)\n          (fact n)\n          (sum n))\n\
    \      (f (- n 1)))))\n", "  (cond [(equal? n 0) '()]\n        [else (cons (if\
    \ (even? n) (fact n) (sum n)) (f (- n 1)))]))\n", "  (build-list n (lambda (i)\
    \ (if (even? i) (factorial i) (sum-to i)))))\n", "(define (val i)\n    (if (even?\
    \ i)\n        (if (= i 0)\n            1\n            (* i (val (- i 1))))\n \
    \       (if (= i 0)\n            0\n            (+ i (val (- i 1))))))", "  (build-list\
    \ n (lambda (i)\n                  (if (even? i)\n                      (apply\
    \ * (iota (+ i 1)))\n                      (apply + (iota (+ i 1)))))))\n", " \
    \ (if (= n 0)\n      '()\n      (if (even? n)\n          (cons (fact n) (f (-\
    \ n 1)))\n          (cons (sum n) (f (- n 1))))))\n", "  (if (= n 0)\n      '()\n\
    \      (let ((l (f (- n 1))))\n        (if (even? n)\n            (cons (fact\
    \ n) l)\n            (cons (number-sum n) l)))))\n", "  (let ([ls (list)]\n  \
    \      [i 1])\n    (do ([i 1 (+ i 1)])\n        ((<= i n) ls)\n      (if (even?\
    \ i)\n          (set! ls (cons (factorial i) ls))\n          (set! ls (cons (sum-from-1-to\
    \ i) ls)))\n      )))\n", "  (local [(define (facc i acc)\n             (if (=\
    \ i 0)\n                 acc\n                 (facc (- i 1) (* acc i))))\n  \
    \        (define (even? n)\n            (= (remainder n 2) 0))]\n    (build-list\
    \ n (lambda (i)\n                    (if (even? i)\n                        (facc\
    \ i 1)\n                        (+ i (f (- i 1))))))))\n", "  (if (= n 0)\n  \
    \    null\n      (cons\n       (if (even? n)\n           (factorial n)\n     \
    \      (sum n))\n       (f (- n 1)))))\n", "  (for/list ([i (in-range n)])\n \
    \   (if (even? i)\n        (factorial i)\n        (sum (in-range (add1 i))))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (factorial n) (f (- n 1)))]\n\
    \    [else (cons (sum-to n) (f (- n 1)))]))\n", "  (define (factorial i)\n   \
    \ (cond\n      [(= i 1) 1]\n      [else (* i (factorial (- i 1)))]))\n  (define\
    \ (sum i)\n    (cond\n      [(= i 1) 1]\n      [else (+ i (sum (- i 1)))]))\n\
    \  (cond\n    [(= n 1) (list 1)]\n    [else (append (f (- n 1))\n            \
    \      (list (if (even? n)\n                            (factorial n)\n      \
    \                      (sum n))))]))", "  (if (= n 0)\n      '()\n      (if (even?\
    \ n)\n          (cons (factorial n) (f (- n 1)))\n          (cons (+ (list-sum\
    \ 1 n) 0) (f (- n 1))))))\n", "  (if (<= n 0)\n      '()\n      (cons (if (even?\
    \ n)\n                (begin (display n)\n                       (factorial n))\n\
    \                n)\n            (f (- n 1)))))\n", "  (for/list ([i (in-range\
    \ n)])\n    (if (even? i)\n        (fact i)\n        (sum-nums i))))\n", "  (build-list\
    \ n (lambda (i)\n                  (if (even? i)\n                      (factorial\
    \ (- i 1))\n                      (sum-from-1-to (- i 1))))))\n", "  (define (aux\
    \ i acc)\n    (if (= i n)\n        acc\n        (if (even? i)\n            (aux\
    \ (+ i 1) (cons (* i (car acc)) acc))\n            (aux (+ i 1) (cons (- i (car\
    \ acc)) acc)))))\n  (aux 1 (list 1)))\n", "  (if (= n 0)\n      '()\n      (cons\
    \ (if (even? n)\n                (factorial n)\n                (factorial (+\
    \ n -1)))\n            (f (- n 1)))))\n", "  (for/list ([i (in-range 1 (add1 n))])\n\
    \    (cond [(even? i)\n           (reduce * (list-&gt;vector (in-range 1 (add1\
    \ i))))]\n          [else (reduce + (list-&gt;vector (in-range 1 (add1 i))))])))\n\
    </code>\nThis uses the functions <code>even?</code>, <code>in-range</code>, <code>add1</code>,\
    \ <code>reduce</code>, <code>list-&gt;vector</code>\n", "  (define (fact n)\n\
    \    (if (<= n 1)\n        1\n        (* n (fact (- n 1)))))\n  (if (<= n 0)\n\
    \      null\n      (if (even? n)\n          (cons (fact n) (f (- n 1)))\n    \
    \      (cons (sum-n n) (f (- n 1))))))\n", "  (cond\n    [(= n 0) empty]\n   \
    \ [else (cons (fact (add1 (modulo n 2))) (f (sub1 n)))]))\n", "  (build-list n\
    \ (lambda (i)\n                  (if (even? i)\n                      (factorial\
    \ i)\n                      (sum-to i)))))\n", "  (cond [(= n 0) '()]\n      \
    \  [else (cons (helper (+ n 1)) (f (- n 1)))]))\n", "  (build-list n (lambda (i)\n\
    \                  (if (even? i)\n                      (cond\n              \
    \          [(= i 0) 1]\n                        [else (* i (f (- i 1)))])\n  \
    \                    (+ i (f (- i 1)))))))\n", "  'TODO)\n", "  (cond\n    [(=\
    \ n 0) empty]\n    [else\n     (if (even? n)\n         (cons (factorial n) (f\
    \ (- n 1)))\n         (cons (sumTo n) (f (- n 1))))]))\n", "  (if (= n 0)\n  \
    \    '()\n      (if (even? n)\n          (cons (factorial n) (f (- n 1)))\n  \
    \        (cons (sum-until n) (f (- n 1))))))\n", "  (build-list n\n          \
    \    (lambda (i)\n                (if (even? i)\n                    (factorial\
    \ i)\n                    (sum-list (list->vector (build-list i add1)))))))\n",
  "  (build-list n (lambda (i) (if (even? i)\n                               (for/fold\
    \ ([product 1]) ([j (in-range 1 (+ i 1))]) (* product j))\n                  \
    \             (for/fold ([sum 0]) ([j (in-range 1 (+ i 1))]) (+ sum j))))))\n\
    </code>\n", "  'undefined)\n", "  (cond ((= n 0) (list))\n        ((= (remainder\
    \ n 2) 0) (cons (product (iota 1 n)) (f (- n 1))))\n        (else (cons (sum (iota\
    \ 1 n)) (f (- n 1))))))\n```\n\nHere is the [answer](https://github.com/cc-lam/CLab/blob/master/Extra%20Credit/4/4.rkt).",
  "  (build-list n (lambda (x)\n                  (if (even? x)\n                \
    \      (factorial x)\n                      (sum-from-to 1 x)))))\n", "  (define\
    \ (factorial n)\n    (define (f n)\n      (if (= n 1)\n          1\n         \
    \ (* n (f (- n 1)))))\n    (f n))\n  (define (sum n)\n    (define (f n i)\n  \
    \    (if (= i n)\n          i\n          (+ i (f n (+ i 1)))))\n    (f n 1))\n\
    \  (define (rec n i)\n    (if (= i n)\n        (list (if (even? n) (factorial\
    \ n) (sum n)))\n        (cons (if (even? i) (factorial i) (sum i)) (rec n (+ i\
    \ 1)))))\n  (rec n 1))\n```", "  (if (zero? n)\n      '()\n      (cons (cond\n\
    \             ((= (modulo n 2) 0)\n              (cond\n               ((= n 2)\
    \ 2)\n               (else (apply * (range n)))))\n             (else (apply +\
    \ (range n))))\n            (f (- n 1)))))\n", "  (for/list ((i (in-range 1 (+\
    \ n 1))))\n    (if (even? i)\n        (expt 2 i)\n        (* i (+ i 1)))))\n",
  "  (cond\n    [(= n 0) empty]\n    [else\n     (append\n      (list (if (= (remainder\
    \ (sub1 n) 2) 0)\n                (factorial (sub1 n))\n                (sum (sub1\
    \ n))))\n      (f (sub1 n)))]))\n", "  (local [(define (factorial n)\n       \
    \     (if (= n 1)\n                1\n                (* n (factorial (- n 1)))))\n\
    \          (define (sum n)\n            (if (= n 1)\n                1\n     \
    \           (+ n (sum (- n 1)))))\n          (define (faux n count acc)\n    \
    \        (if (= count n)\n                acc\n                (if (even? count)\n\
    \                    (faux n (+ count 1) (cons (factorial count) acc))\n     \
    \               (faux n (+ count 1) (cons (sum count) acc)))))]\n    (faux n 1\
    \ '())))\n", "  (list->vector (f-list n)))\n", "  (local [(define (build-list\
    \ l n)\n            (if (= n 0)\n                l\n                (build-list\
    \ (cons (if (even? (- n 1))\n                                     (factorial (-\
    \ n 1))\n                                     (sum-to-n (- n 1)))\n          \
    \                       l)\n                           (- n 1))))]\n    (build-list\
    \ '() n)))\n", "  (define (helper i acc)\n    (if (= i n)\n        acc\n     \
    \   (if (even? i)\n            (helper (+ i 1) (cons (factorial i) acc))\n   \
    \         (helper (+ i 1) (cons (sum-to i) acc)))))\n  (helper 1 '()))\n", " \
    \ (map (lambda (i)\n\t (if (even? i)\n\t     (factorial i)\n\t     (sum-of-numbers-to\
    \ i)))\n       (iota n 1)))\n", "  (if (= n 0)\n      '()\n      (if (even? n)\n\
    \          (append (f (- n 1)) (list (factorial n)))\n          (append (f (-\
    \ n 1)) (list (sum-to n))))))", "  (if (= n 0) '()\n      (if (= n 1) '(1)\n \
    \         (if (= (remainder n 2) 0)\n              (cons (* (remainder n 2) (car\
    \ (f (- n 1)))) (f (- n 1)))\n              (cons (apply + (iota 1 n)) (f (- n\
    \ 1)))))))\n", "  (define (factorial n)\n    (cond ((<= n 1) 1)\n          (else\
    \ (* n (factorial (- n 1))))))\n  (cond ((<= n 0) (list))\n        (else (cons\
    \ (if (even? n) (factorial n) (apply + (range 1 n))) (f (- n 1))))))\n", "  (map\
    \ (lambda (i)\n         (if (even? i)\n             (factorial i)\n          \
    \   (sum-to i)))\n       (range 1 n)))", "  (for/list ([i (in-range 1 (+ n 1))])\n\
    \    (if (even? i)\n        (let loop ([i i] [res 1])\n          (if (zero? i)\n\
    \              res\n              (loop (- i 1) (* res i))))\n        (for/sum\
    \ ([i (in-range 1 (+ i 1))])\n          i))))\n", "  (for/list ([i (in-range 1\
    \ (add1 n))])\n    (cond\n      [(even? i)\n       (for/fold ([acc 1]) ([i (in-range\
    \ 1 (add1 i))])\n         (* acc i))]\n      [else\n       (for/fold ([acc 0])\
    \ ([i (in-range 1 (add1 i))])\n         (+ acc i))])))\n", "  (cond\n    [(= n\
    \ 0) empty]\n    [else (append (list\n                   (cond\n             \
    \        [(even? n) (reduce * (range 1 n))]\n                     [else (reduce\
    \ + (range 1 n))]))\n                  (f (- n 1)))]))\n", "  (local ((define\
    \ (sum n)\n            (if (= n 1)\n                1\n                (+ n (sum\
    \ (- n 1))))))\n    (local ((define (fact n)\n              (if (= n 1)\n    \
    \              1\n                  (* n (fact (- n 1))))))\n      (build-list\
    \ n (lambda (x)\n                      (if (even? x)\n                       \
    \   (fact x)\n                          (sum (+ x 1))))))))\n", "  (cond\n   \
    \ [(< n 1) '()]\n    [else\n     (cons\n      (cond\n        [(even? n) (reduce\
    \ * (iota n 1))]\n        [else (reduce + (iota n 1))])\n      (f (- n 1)))]))\n",
  "  (if (zero? n)\n      '()\n      (cons (cond\n             ((even? n) (reduce\
    \ * (range 1 n)))\n             (else (reduce + (range 1 n))))\n            (f\
    \ (- n 1)))))\n", "  (if (= n 0)\n      empty\n      (cons (if (even? n)\n   \
    \             (iterate n 1)\n                n)\n            (f (- n 1)))))\n",
  "  (letrec\n      ((loop (lambda (n i acc)\n               (cond\n             \
    \    [(= i n) (reverse acc)]\n                 [(even? i) (loop n (+ i 1) (cons\
    \ (* (range 1 i) 1) acc))]\n                 [else (loop n (+ i 1) (cons (range\
    \ 1 i) acc))]))))\n    (loop n 1 '())))\n", "  (define (factorial i)\n    (if\
    \ (= i 1)\n        1\n        (* i (factorial (- i 1)))))\n  (define (sum i)\n\
    \    (if (= i 1)\n        1\n        (+ i (sum (- i 1)))))\n  (cond ((= n 1) (list\
    \ 1))\n        ((= (remainder n 2) 0) (cons (factorial n) (f (- n 1))))\n    \
    \    (else (cons (sum n) (f (- n 1))))))\n", "  (if (= n 0) '()\n      (cons (if\
    \ (even? n)\n                (product (sub1 n) 0)\n                (sum (sub1\
    \ n) 0))\n            (f (sub1 n)))))", "  (for/list ([i (in-range 1 (+ n 1))])\n\
    \    (cond\n      [(even? i) (apply * (in-range 1 (+ i 1)))]\n      [else (apply\
    \ + (in-range 1 (+ i 1)))])))\n", "  (cond\n    [(= n 0) empty]\n    [else (cons\
    \ (f-calc n) (f (- n 1)))]))\n", "  (cond ((eq? n 0) '())\n        ((even? n)\
    \ (cons (fact n) (f (- n 1))))\n        (else (cons (sum (- n 1)) (f (- n 1))))))\n",
  "  (for/list ((i (in-range 1 (+ n 1))))\n    (cond\n      [(even? i) (apply * (in-range\
    \ 1 (+ i 1)))]\n      [else (apply + (in-range 1 (+ i 1)))])))", "  (local [\n\
    \         (define (factorial i)\n           (if (= i 1)\n               1\n  \
    \             (* i (factorial (- i 1)))))\n         (define (f2 i)\n         \
    \  (if (= i 0)\n               (list)\n               (cons (if (even? i)\n  \
    \                       (factorial i)\n                         i)\n         \
    \            (f2 (- i 1)))))\n         ]\n    (f2 n)))\n", "  (if (<= n 0)\n \
    \     '()\n      (let ([i 0])\n        (for/list ([i (in-range 1 (+ n 1))])\n\
    \          (if (even? i)\n              (for/fold ([total 1]) ([j (in-range 1\
    \ (+ i 1))])\n                (* total j))\n              (for/fold ([total 0])\
    \ ([j (in-range 1 (+ i 1))])\n                (+ total j)))))))\n", "  (if (=\
    \ n 0)\n      '()\n      (if (even? n)\n          (cons (fact n) (f (- n 1)))\n\
    \          (cons (sum n) (f (- n 1))))))\n", "  (for/list ((i (in-range 1 (add1\
    \ n))))\n    (if (even? i)\n        (factorial i)\n        (sum (in-range 1 (add1\
    \ i))))))\n", "  (local\n    [(define (sum-to-n m)\n       (if (= m 1)\n     \
    \      1\n           (+ m (sum-to-n (- m 1)))))\n    (define (factorial m)\n \
    \     (if (= m 1)\n          1\n          (* m (factorial (- m 1)))))\n    (define\
    \ (make-list m result)\n      (if (= m 0)\n          result\n          (make-list\
    \ (- m 1) (append result (list (if (even? m) (factorial m) (sum-to-n m)))))))]\n\
    \    (make-list n '())))\n", "  (cond [(= n 0) empty]\n        [else (cons (if\
    \ (even? n)\n                        (fact n)\n                        (sum n))\n\
    \                    (f (- n 1)))]))\n", "  (cond\n    [(= n 0) empty]\n    [else\n\
    \     (cons\n      (if (even? n)\n          (apply * (range 1 n))\n          (apply\
    \ + (range 1 n)))\n      (f (- n 1)))]))\n", "  (if (= n 0)\n      '()\n     \
    \ (cons (if (even? n)\n                (fact n)\n                (sum n))\n  \
    \          (f (- n 1)))))\n", "  (define (factorial i)\n    (cond [(= i 1) 1]\n\
    \          [else (* i (factorial (- i 1)))]))\n  (define (sum i)\n    (cond [(=\
    \ i 1) 1]\n          [else (+ i (sum (- i 1)))]))\n  (define (aux i)\n    (cond\
    \ [(= i n) empty]\n          [(even? i) (cons (factorial i) (aux (+ i 1)))]\n\
    \          [else (cons (sum i) (aux (+ i 1)))]))\n  (aux 1))\n", "  (if (= n 0)\
    \ '()\n      (if (= (remainder n 2) 0)\n          (cons (factorial n) (f (- n\
    \ 1)))\n          (cons (sum 1 n) (f (- n 1))))))\n", "  (for/list ([i (in-range\
    \ n)]\n             #:when (even? i))\n    (apply * (in-range 1 (add1 i))))\n\
    \  (for/list ([i (in-range n)]\n             #:when (odd? i))\n    (apply + (in-range\
    \ 1 (add1 i)))))\n\n```\n\n```scheme\n#lang racket\n", "  (for/list ([i (in-range\
    \ 1 (+ n 1))])\n    (cond\n      [(even? i) (apply * (in-range 1 (+ i 1)))]\n\
    \      [else (apply + (in-range 1 (+ i 1)))])))\n", "  (cond ((= n 0) (list))\n\
    \        ((even? n) (cons (fact n) (f (- n 1))))\n        (else (cons (sum n)\
    \ (f (- n 1))))))\n", "  (for/list ((i (in-range 1 (add1 n))))\n    (cond\n  \
    \    [(even? i) (for/fold ([a 1]) ([j (in-range 1 (add1 i))])\n              \
    \     (multiply a j))]\n      [else (for/fold ([a 0]) ([j (in-range 1 (add1 i))])\n\
    \               (add a j))])))", "  (define (fact n)\n    (cond [(= n 1) 1]\n\
    \          [else (* n (fact (- n 1)))]))\n  (map (lambda (x) (if (even? x) (fact\
    \ x) (+ 1 (+ x 1) (/ x 2)))) (build-list n add1 1)))", "  (for/list ([i (in-range\
    \ n)])\n    (if (even? i)\n        (factorial i)\n        (for/sum ([i (in-range\
    \ i)])\n          i))))\n", "  (local (; your code goes here\n          )\n  \
    \  (for ([i (in-range 1 n)])\n      (cond [(= (remainder i 2) 0)\n           \
    \  (set! sum\n                   (for/fold ([sum 1])\n                       \
    \      ([j (in-range 1 i)])\n                       (* sum j)))]\n           \
    \ [else\n             (set! sum\n                   (for/fold ([sum 0])\n    \
    \                         ([j (in-range 1 i)])\n                       (+ sum\
    \ j)))])\n      (set! lst (cons sum lst))))\n  (reverse lst))\n", "  (define (is-even\
    \ x)\n    (= (remainder x 2) 0))\n  (define (fact x)\n    (if (= x 1) 1 (* x (fact\
    \ (- x 1)))))\n  (define (sum-to x)\n    (if (= x 1) 1 (+ x (sum-to (- x 1)))))\n\
    \  (for/list ([i (in-range 1 (+ 1 n))])\n    (if (is-even i)\n        (fact i)\n\
    \        (sum-to i))))", "  (build-list n (lambda (i) (if (even? i) (fact i) (sum-n\
    \ i)))))\n", "  (define (factorial i)\n    (if (= i 1)\n        1\n        (*\
    \ i (factorial (- i 1)))))\n  (define (sum i)\n    (if (= i 1)\n        1\n  \
    \      (+ i (sum (- i 1)))))\n  (cond\n    ((= n 1) (list 1))\n    ((even? n)\
    \ (append (f (- n 1)) (list (factorial n))))\n    (else (append (f (- n 1)) (list\
    \ (sum n))))))\n", "  (for/list ([i (in-range n)])\n    (cond\n      [(even? i)\
    \ (factorial i)]\n      [else (for/sum ([j (in-range i)]) j)])))\n", "  (for/list\
    \ ([i (in-range 1 (+ n 1))])\n    (if (even? i)\n        (reduce * (in-range 1\
    \ (+ i 1)))\n        (reduce + (in-range 1 (+ i 1))))))\n```\n\n```scheme\n#lang\
    \ racket\n", "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact\
    \ (- n 1)))))\n  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum\
    \ (- n 1)))))\n  (cond ((even? n) (list (fact n)))\n        (else (list (sum n)))))",
  "  (cond ((= n 0) '())\n        ((even? n) (cons (factorial n) (f (- n 1))))\n \
    \       (else (cons (+ 1 n) (f (- n 1))))))", "  (local [(define (factorial i)\n\
    \            (if (= i 1)\n                1\n                (* i (factorial (-\
    \ i 1)))))\n          (define (sum n)\n            (if (= n 1)\n             \
    \   1\n                (+ n (sum (- n 1)))))\n          (define (helper i n acc)\n\
    \            (if (= i n)\n                acc\n                (if (even? i)\n\
    \                    (helper (+ i 1) n (cons (factorial i) acc))\n           \
    \         (helper (+ i 1) n (cons (sum i) acc)))))]\n    (helper 1 n '())))\n",
  "  (build-list n (lambda (x) (if (even? x)\n                                (fact\
    \ x)\n                                (sum-to x)))))\n</code>\nI know I could\
    \ use the sum-to function in the prelude, but it is forbidden to do so. I tried\
    \ to implement it but I could only do it recursively, and I have a limit of 128000\
    \ frames.\n<code>(define (fact n)\n  (cond\n    [(zero? n) 1]\n    [else (* n\
    \ (fact (- n 1)))]))\n", "  (for/list ((i (in-range n))\n             (factorial\
    \ (list 1)))\n    (cond\n      [(even? i) (list (* factorial i))]\n      [else\
    \ (list (apply + (in-range 1 (+ i 1))))])))\n", "  (if (zero? n)\n      '()\n\
    \      (cons (if (even? n)\n                (fact n)\n                (sum n))\n\
    \            (f (- n 1)))))\n", "  (build-list n (lambda (x)\n               \
    \    (cond\n                     [(even? x) (prod-to x)]\n                   \
    \  [else (sum-to x)]))))\n", "  (cond\n    [(< n 1) '()]\n    [else\n     (cons\
    \ (if (even? (- n 1))\n               (factorial (- n 1))\n               (- n\
    \ 1))\n           (f (- n 1)))]))\n", "  (map (lambda (i)\n         (if (even?\
    \ i)\n             (factorial i)\n             (sum 1 i)))\n       (range 1 (+\
    \ 1 n))))\n", "  (cond\n    [(= n 0) empty]\n    [else (cons (cond\n         \
    \         [(even? n) (for/product [(i (in-range (add1 n)))] i)]\n            \
    \      [else (for/sum [(i (in-range (add1 n)))] i)])\n                  (f (sub1\
    \ n)))]))", "  (define (from-to n m)\n    (if (>= n m)\n        (list m)\n   \
    \     (cons m (from-to n (+ m 1)))))\n  (if (= n 0)\n      (list 0)\n      (cons\
    \ (f (- n 1)) (from-to 1 n))))\n", "    (cond\n        [(= n 0) (list)]\n    \
    \    [(= (remainder n 2) 0) (cons (* n (f (- n 1))) (f (- n 1)))]\n        [else\
    \ (cons (+ 1 n) (f (- n 1)))]))\n", "  ;; Implement me\n  )\n", "  (letrec ([helper\
    \ (lambda (n accu)\n                     (if (zero? n)\n                     \
    \    accu\n                         (helper (- n 1) (cons (if (even? n)\n    \
    \                                              (for/fold ([accum 0]) ([i n]) (+\
    \ accum i))\n                                                  (for/fold ([accum\
    \ 1]) ([i n]) (* accum i)))\n                                              accu))))])\n\
    \    (helper n '())))\n", "  (cond\n    [(= n 0) empty]\n    [else (cons (if (even?\
    \ n)\n                    (fact n)\n                    (sum n))\n           \
    \     (f (- n 1)))]))\n", "  (for/list ([i (in-range n)])\n    (if (even? i)\n\
    \        (fact i)\n        (sum (in-range i)))))\n", "  (cond\n    [(= n 0) '()]\n\
    \    [(= (remainder n 2) 0) (cons (factorial n) (f (- n 1)))]\n    [else (cons\
    \ (sum n) (f (- n 1)))]))\n", "  (define (even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial\
    \ (- n 1)))))\n  (define (sum n)\n    (if (= n 1)\n        1\n        (+ n (sum\
    \ (- n 1)))))\n  (for/list ([i (in-range n)])\n    (if (even? i)\n        (factorial\
    \ i)\n        (sum i))))\n", "  'your-code-here)\n", "  (cond ((= n 0)\n     \
    \    '())\n        ((even? n)\n         (cons (fact n) (f (- n 1))))\n       \
    \ (else\n         (cons (sum n) (f (- n 1))))))\n", "  (cond ((= n 0) '())\n \
    \       ((and (= (remainder n 2) 0) (> n 1)) (cons (factorial n) (f (- n 1))))\n\
    \        (else (cons n (f (- n 1))))))\n", "  (cond\n    ((= n 0) '())\n    ((=\
    \ n 1) '(1))\n    ((= n 2) '(1 2))\n    (else (cons (if (even? n) (fact n) (sum\
    \ n)) (f (- n 1))))))\n", "  (cond\n    ((= n 0) (list))\n    ((even? n) (cons\
    \ (fact n) (f (- n 1))))\n    (else (cons (sum n) (f (- n 1))))))\n", "  (for/list\
    \ ([i (in-range 1 (+ n 1))])\n    (cond\n      [(even? i) (factorial i)]\n   \
    \   [else (sum-from-1-to i)])))\n", "  (if (= n 0)\n      (list 0)\n      (cons\
    \ (if (even? n)\n                (fact n)\n                (sum n))\n        \
    \    (f (- n 1)))))\n", "(if (= n 0)\n    empty\n    (cons (i n) (f (- n 1)))))\n",
  "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (fact n) (f (- n 1)))]\n    [else\
    \ (cons (sum n) (f (- n 1)))]))\n", "  (if (= n 0)\n      empty\n      (cons \n\
    \       (if (even? n)\n           (let fac ((i 1) (result 1))\n             (if\
    \ (= i n)\n                 result\n                 (fac (+ i 1) (* result i))))\n\
    \           (let sum ((i 1) (result 0))\n             (if (= i n)\n          \
    \       result\n                 (sum (+ i 1) (+ result i)))))\n       (f (- n\
    \ 1)))))\n", "  (if (zero? n)\n      (list)\n      (append (if (even? n)\n   \
    \               (list (fact n))\n                  (list (sum n)))\n         \
    \     (f (- n 1)))))\n", "  (for/list ((i (in-range 1 (add1 n))))\n    (cond\n\
    \      [(even? i) (factorial i)]\n      [else (in-naturals (add1 i))])))\n", " \
    \ ;; your code goes here\n  (list-of-list n))\n", "  (define (factorial i)\n \
    \   (cond\n      [(= i 1) 1]\n      [else (* i (factorial (- i 1)))]))\n  (define\
    \ (sum i)\n    (cond\n      [(= i 1) 1]\n      [else (+ i (sum (- i 1)))]))\n\
    \  (cond\n    [(= n 1) (list 1)]\n    [else (cons (if (even? n) (factorial n)\
    \ (sum n)) (f (- n 1)))]))\n", "  (for/list ([i (in-range n)]\n             #:when\
    \ (even? i))\n    (apply * (in-range 1 (add1 i)))))\n```\n\n```racket\n#lang racket\n",
  "  (if (= n 0)\n      '()\n      (cons (if (even? n)\n                (product (iota\
    \ n 1))\n                (sum (iota n 1)))\n            (f (- n 1)))))\n", "(if\
    \ (= n 0)\n'()", "  (cond\n    [(= n 0) '()]\n    [(even? n) (cons (factorial\
    \ n) (f (- n 1)))]\n    [else (cons (sum-1-to n) (f (- n 1)))]))\n", "  (define\
    \ (odd? n)\n    (= (remainder n 2) 1))\n  (define (fact n)\n    (if (= n 1)\n\
    \        1\n        (* n (fact (- n 1)))))\n  (define (sum n)\n    (if (= n 1)\n\
    \        1\n        (+ n (sum (- n 1)))))\n  (for/list ((i (in-range 1 (+ n 1))))\n\
    \    (if (odd? i)\n        (sum i)\n        (fact i))))", "  (cond\n    [(= n\
    \ 0) null]\n    [else (cons\n            (if (even? n)\n                (letrec\n\
    \                  ([fact (lambda (k)\n                            (if (= k 0)\n\
    \                                1\n                                (* k (fact\
    \ (- k 1)))))])\n                  (fact n))\n                (letrec\n      \
    \            ([sums (lambda (k)\n                            (if (= k 0)\n   \
    \                             0\n                                (+ k (sums (-\
    \ k 1)))))])\n                  (sums n)))\n            (f (- n 1)))]))\n", " \
    \ (make-list n (lambda (i)\n                 (cond\n                   ((even?\
    \ i) (factorial i))\n                   (else (sum-numbers 1 i))))))\n", "   \
    \ (cond\n        [(= n 0) (list)]\n        [(even? n) (cons (factorial n) (f (-\
    \ n 1)))]\n        [else (cons (sum-list (list->vec (list->list n))) (f (- n 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
