language: d
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long[,] temp = new long[nums.Length, nums.Length];\n  int i,j;\n\
    \  for(i=0;i<nums.Length;i++)\n  {\n    int sum = 0;\n    for(j=i;j<nums.Length;j++)\n\
    \      sum += nums[j];\n    temp[i,i] = sum;\n  }\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps67u8bwx.d(19): Error: expression expected, not \'',\''\n/tmp/tmps67u8bwx.d(19):
    Error: found \'',\'' when expecting \'']\''\n/tmp/tmps67u8bwx.d(19): Error: semicolon
    expected, not \''nums\''\n/tmp/tmps67u8bwx.d(19): Error: found \'']\'' when expecting
    \'';\'' following statement\n/tmp/tmps67u8bwx.d(28): Error: found \''unittest\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps67u8bwx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // Your code here\n    long sum=0;\n    for(int i=0;i<nums.length;i++){\n\
    \        sum=sum+nums[i];\n    }\n    long[] result=new long[nums.length];\n \
    \   int idx=0;\n    for(int i=0;i<nums.length;i++){\n        sum=sum-nums[i];\n\
    \        if(sum<0){\n            sum=-sum;\n        }\n        result[idx]=nums[i];\n\
    \        idx++;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a |>\nThe\
    \ first step is just to find all numbers with same sum of digits. In order to\
    \ do that, you will need to get the number as string, convert it to int, get the\
    \ sum, remove the char '0' and convert the result back to string. \n<code>\nList<int>\
    \ result = new List<int>();\nforeach(int n in nums) {\n   string num = n.ToString();\n\
    \   string sum = \"\";\n   for(int i=0;i<num.Length;i++) {\n      if(num[i] !=\
    \ '0') sum += num[i];\n   }\n   int result = Convert.ToInt32(sum);\n   result.Add(result);\n\
    }\n</code>\nNow you have a List of int list with all the numbers with the same\
    \ sum. From here you can sort the list however you want.\n<|/ a dscore=0 tags=c#,arrays,algorithm\
    \ |>\n<| a tags=c#,arrays,algorithm |>\n<code>\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoo1jt3w3.d(36): Error: Declaration expected, not \''<\''\n/tmp/tmpoo1jt3w3.d(42):
    Error: Declaration expected, not \''foreach\''\n/tmp/tmpoo1jt3w3.d(45): Error:
    Declaration expected, not \''for\''\n/tmp/tmpoo1jt3w3.d(45): Error: no identifier
    for declarator i\n/tmp/tmpoo1jt3w3.d(45): Error: Declaration expected, not \''<\''\n/tmp/tmpoo1jt3w3.d(45):
    Error: no identifier for declarator i\n/tmp/tmpoo1jt3w3.d(45): Error: Declaration
    expected, not \''++\''\n/tmp/tmpoo1jt3w3.d(47): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoo1jt3w3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] ordered = new long[nums.length];\n\tfor(int i=0; i<ordered.length;\
    \ i++) ordered[i] = 0L;\n\t\n\tlong sum = 0;\n\tfor(int i=0; i<nums.length; i++)\n\
    \t\tsum += nums[i];\n\t\n\tfor(int i=0; i<nums.length; i++)\n\t{\n\t\tlong cur\
    \ = nums[i];\n\t\tfor(int j=i+1; j<nums.length; j++)\n\t\t{\n\t\t\tint compare\
    \ = sum - cur;\n\t\t\tif(compare < 0)\n\t\t\t\tcompare = -compare;\n\t\t\tif(compare\
    \ == 0)\n\t\t\t\tordered[j-1]++;\n\t\t\telse if(compare < 0)\n\t\t\t\tordered[j-1]++;\n\
    \t\t\telse\n\t\t\t\tordered[j]++;\n\t\t}\n\t}\n\treturn ordered;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptptk743r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sortedNums = new long[nums.length];\n    long maxSum =\
    \ 0;\n    long sum = 0;\n    \n    for (int i = 0; i < nums.length; i++) \n  \
    \  {\n        sum += nums[i];\n        if (maxSum < sum) \n        {\n       \
    \     maxSum = sum;\n            sortedNums = Arrays.copyOfRange(nums, i, nums.length);\n\
    \        }\n    }\n    return sortedNums;\n}\n</code>\n<|/ a tags=c# |>\n<| a\
    \ |>\nHere's my answer:\n<code>\nvar arr = new[] { 1, 10, 2, -20 };\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr6sx4btm.d(34): Error: Declaration expected, not \''<\''\n/tmp/tmpr6sx4btm.d(37):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpr6sx4btm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long digits[] = new long[nums.Length];\n    long[] sums = new\
    \ long[nums.Length];\n    int max_sum = 0;\n    long sum = 0;\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5kjxkpvg.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kjxkpvg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] arr =new long[nums.length];\n    int i= 0;\n    long sum\
    \ = 0;\n    while(i<nums.length){\n        sum = sum+nums[i];\n        arr[i]\
    \ = sum;\n        i++;\n    }\n    Arrays.sort(arr);\n    return arr;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n<code>\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4qycu6zi.d(30): Error: Declaration expected, not \''<\''\n/tmp/tmp4qycu6zi.d(38):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4qycu6zi.d(39): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp4qycu6zi.d(40): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp4qycu6zi.d(41): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp4qycu6zi.d(42): Error: Declaration expected, not \''assert\''\n/tmp/tmp4qycu6zi.d(43):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp4qycu6zi.d(44): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4qycu6zi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.isEmpty)\n    {\n        return nums;\n    }\n    long[]\
    \ result = new long[nums.length];\n    long min = Long.MAX_VALUE;\n    long max\
    \ = Long.MIN_VALUE;\n    long sum = 0;\n    for (int i=0; i<nums.length; i++)\n\
    \    {\n        sum += nums[i];\n        if(sum < min)\n            min = sum;\n\
    \        if(sum > max)\n            max = sum;\n        result[i] = i;\n    }\n\
    \    Arrays.sort(result, new OrderBySum());\n    return result;\n}\nclass OrderBySum\n\
    {\n    public int compare(long[] num1, long[] num2)\n    {\n        long sum1\
    \ = num1[0];\n        long sum2 = num2[0];\n        if(sum1 < sum2)\n        \
    \    return -1;\n        else if(sum1 > sum2)\n            return 1;\n       \
    \ return 0;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nSure, I'll add a description.\n<|/ c |>\n<| c |>\nThank you\
    \ for editing.  I agree that adding an explanation is helpful.  Your code looks\
    \ very succinct.  How does it perform on large data sets?\n<|/ c |>\n<| c |>\n\
    I assume it would be O(n^2) in time complexity, since sort is sorting a list with\
    \ O(n) time. If you use a different data structure (like a HashMap), you probably\
    \ have to implement a custom comparator.\n<|/ c |>\n<| c |>\n`HashMap`  is better\
    \ than `LinkedHashMap` in your case. `LinkedHashMap` can guarantee O(log n) time\
    \ complexity but for large data set, it will cost you O(n) memory usage.\n<|/\
    \ c |>\n<| a dscore=1 |>\nHere is my code using HashSet and sort in java 8 :\n\
    <code>\npublic static void main(String[] args) {\n        int[] array = {2, -2,\
    \ 12, 45, -78, 3, 10, -5, 0};\n        HashSet<Integer> set = new HashSet<>();\n\
    \        Arrays.sort(array);\n        for (int i : array) {\n            if (!set.add(i))\
    \ {\n                set.remove(i);\n            }\n        }\n        System.out.println(set);\n\
    \    }\n</code>\n<|/ a tags=java,arrays,sorting |>\n\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjuispg4b.d(52): Error: Declaration expected, not \''<\''\n/tmp/tmpjuispg4b.d(55):
    Error: unterminated character constant\n/tmp/tmpjuispg4b.d(58): Error: unterminated
    character constant\n/tmp/tmpjuispg4b.d(74): Error: no identifier for declarator
    HashSet\n/tmp/tmpjuispg4b.d(74): Error: Declaration expected, not \''<\''\n/tmp/tmpjuispg4b.d(75):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmpjuispg4b.d(75): Error: no identifier for declarator
    Arrays.sort(array)\n/tmp/tmpjuispg4b.d(76): Error: Declaration expected, not \''for\''\n/tmp/tmpjuispg4b.d(79):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjuispg4b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] ret = new long[nums.length];\n    int i = 0;\n    for\
    \ (long n : nums) \n    {\n        if (n >= 0) {\n            while (i < ret.length\
    \ && ret[i] < n) \n                i++;\n        }\n        else \n          \
    \  while (i < ret.length && ret[i] > n) \n                i++;\n        ret[i]\
    \ = n;\n    }\n    return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,sorting,java\
    \ |>\nA more general approach that works for arbitrary types is to create and\
    \ sort an array of objects of the desired type. Once you have such an array, you\
    \ can use the Arrays.sort() method, which knows how to sort an array of objects\
    \ of a specific type. Here's an example that sorts integers (longs, actually):\n\
    <code>\nclass Person implements Comparable<Person> {\n    private final long id;\n\
    \    private final String name;\n    private final String age;\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb8hsg3qu.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmpb8hsg3qu.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmpb8hsg3qu.d(21): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpb8hsg3qu.d(34):
    Error: Declaration expected, not \''<\''\n/tmp/tmpb8hsg3qu.d(37): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb8hsg3qu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] numsCopy = nums.clone();\n    numsCopy = numsCopy.sort((a,b)->{\n\
    \        long sum = a + b; // a + b\n        return sum.compareTo(nums[nums.indexOf(sum)]);\n\
    \    });\n    return numsCopy;\n}\n</code>\n<|/ a tags=arrays,java |>\n<| a tags=arrays,java\
    \ dscore=2 |>\n<code>\npublic class SortArrayBySumOfDigits {\n    public static\
    \ void main(String[] args) {\n        int[] array = {12, 3, -10, -100, 10, 50,\
    \ -1};\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnb09nobk.d(20): Error: expression expected, not \''>\''\n/tmp/tmpnb09nobk.d(20):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpnb09nobk.d(21): Error: found
    \''sum\'' when expecting \''.\'' following long\n/tmp/tmpnb09nobk.d(21): Error:
    found \''=\'' when expecting identifier following \''long.\''\n/tmp/tmpnb09nobk.d(21):
    Error: found \''a\'' when expecting \'',\''\n/tmp/tmpnb09nobk.d(21): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpnb09nobk.d(22): Error: expression expected,
    not \''return\''\n/tmp/tmpnb09nobk.d(22): Error: found \''sum\'' when expecting
    \'',\''\n/tmp/tmpnb09nobk.d(22): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpnb09nobk.d(23):
    Error: expression expected, not \''}\''\n/tmp/tmpnb09nobk.d(26): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnb09nobk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = null;\n    int idx = 0, sum = 0;\n    \n    foreach(\
    \ long n in nums) {\n        idx += n % 10;\n        sum += (n / 10) * (long)\
    \ Math.pow(10, idx % 10);\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpov4wm53b.d(22): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpov4wm53b.d(24):
    Error: C style cast illegal, use cast(long)Math.pow(10, idx % 10)\n/tmp/tmpov4wm53b.d(26):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpov4wm53b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int len = nums.length;\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        long n = nums[i];\n  \
    \      long nsum = 0;\n        long j = 0;\n        while(n < 0)\n        {\n\
    \            nsum = nsum * 10 + (n - 0);\n            n -= 10;\n            j++;\n\
    \        }\n        long k = 0;\n        while(nsum != 0)\n        {\n       \
    \     nsum -= n % 10;\n            k += 1;\n            n /= 10;\n        }\n\
    \        result[i] = k;\n    }\n    \n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfiroq6by.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long max = long.MinValue;\n  int i = 0;\n  long[] res = new long[nums.length];\n\
    \  while (i < nums.Length && nums[i] != 0) {\n    max = max * (long)Math.Pow(10,\
    \ nums[i] - 1);\n    ++i;\n  }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw83go_m5.d(23): Error: C style cast illegal, use cast(long)Math.Pow(10,
    nums[i] - 1)\n/tmp/tmpw83go_m5.d(26): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw83go_m5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var sums = nums.map(num => num.intValue()); // [1, 1, 1, 1, 1]\n\
    \    foreach (var num in nums) {\n        var index = sums.indexOf(int.Parse(num.ToString()));\n\
    \        if (index != -1) sums[index] += num.intValue();\n        else sums.add(num.intValue());\n\
    \    }\n    var result = new long[sums.Length];\n    System.arraycopy(sums, 0,\
    \ result, 0, sums.Length);\n    System.Array.Sort(result);\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=c#,arrays |>\n<| a tags=c#,arrays |>\nIn C# 7\
    \ you can use LINQ to do this in a single line.\n<code>\nvar result = nums.OrderBy(x\
    \ => x.ToString().Sum(y => y.ToString().Length));\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nThe main point here is to take advantage of the ability of a\
    \ Dictionary to remember which keys already have values.\n<code>\npublic static\
    \ long OrderBySumOfDigits(long[] nums)\n{\n    var result = new Dictionary<long,\
    \ int>();\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp61s24qzu.d(20): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp61s24qzu.d(30):
    Error: Declaration expected, not \''<\''\n/tmp/tmp61s24qzu.d(36): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61s24qzu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length <= 0) \n        return nums;\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9v1zh8h.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9v1zh8h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int sum = 0;\n    for (int i = 0; i < nums.length; ++i)\n   \
    \ {\n        sum += nums[i];\n    }\n    \n    int [] result = new int[nums.length];\n\
    \    int index = 0;\n    for (int i = 0; i < nums.length; ++i)\n    {\n      \
    \  sum += nums[i];\n        result[i] = index;\n        ++index;\n    }\n    Arrays.sort(result);\n\
    \    for (int i = 0; i < nums.length; ++i)\n    {\n        result[i] /= nums.length;\n\
    \    }\n    return nums;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,java,sorting\
    \ |>\nJust for fun, here's my own std lib version:\n<code>\npublic static final\
    \ <T> T[] sortBySum(T[] arr) {\n    Map<T, Integer> sums = new HashMap<>();\n\
    \    for (T t : arr) {\n        Integer value = sums.get(t);\n        if (value\
    \ == null)\n            sums.put(t, 1);\n        else\n            sums.put(t,\
    \ value + 1);\n    }\n    List<T> copy = new ArrayList<>(sums.keySet());\n   \
    \ Collections.sort(copy, new Comparator<Integer>() {\n        public int compare(Integer\
    \ o1, Integer o2) {\n            int diff = o1.compareTo(o2);\n            if\
    \ (diff != 0)\n                return diff;\n            return o1 - o2;\n   \
    \     }\n    });\n    T[] result = new T[copy.get(copy.size() - 1).intValue()];\n\
    \    int index = 0;\n    for (int i = 0; i < copy.size(); i++) {\n        Integer\
    \ value = sums.get(copy.get(i));\n        System.arraycopy(copy.get(i).toArray(),\
    \ 0, result, index, value);\n        index += value;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,java,sorting |>\nThis is my\
    \ solution using streams. It does not handle duplicate sums.\n<code>\npublic static\
    \ void main(String[] args) {\n    Integer[] nums = { 1L, 11L, -1L, -11L, -12L\
    \ };\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm3cipw39.d(40): Error: Declaration expected, not \''<\''\n/tmp/tmpm3cipw39.d(43):
    Error: unterminated character constant\n/tmp/tmpm3cipw39.d(47): Error: Declaration
    expected, not \''for\''\n/tmp/tmpm3cipw39.d(49): Error: Declaration expected,
    not \''if\''\n/tmp/tmpm3cipw39.d(51): Error: Declaration expected, not \''else\''\n/tmp/tmpm3cipw39.d(53):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3cipw39.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int length = nums.length;\n    \n    int min = 0;\n    int max\
    \ = nums.length-1;\nunittest\n{\n    alias candidate = order_by_points;\n\n  \
    \  assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwnuhrhk2.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwnuhrhk2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length == 0) {\n        return nums;\n    }\n    \n\
    \    int len = nums.length;\n    \n    // find sum of digits, store sum in `sum`\n\
    \    long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum += nums[i];\n\
    \    }\n    \n    // sort digits from smallest to largest\n    int[] arr = new\
    \ int[len];\n    int[] reversed = new int[len];\n    for (int i = 0; i < len;\
    \ i++) {\n        int c = nums[i];\n        int a = c - sum;\n        \n     \
    \   if (a > reversed[arr[i]]) {\n            reversed[arr[i]] = a;\n        }\n\
    \        arr[i] = i;\n    }\n    \n    // reverse array and return\n    int i\
    \ = 0;\n    for (int j = 0; j < len; j++) {\n        nums[j] = reversed[arr[j]];\n\
    \        i++;\n    }\n    \n    return nums;\n}\n</code>\nThe function above can\
    \ be refactored into a generic function with generics, like this:\n<code>\n//\
    \ generics\nimport std.array;\nimport std.algorithm; // sort\nimport std.conv;\
    \ // toInt\nimport std.range;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprgs2urqq.d(53): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgs2urqq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums == null || nums.length == 0)\n    {\n        return nums;\n\
    \    }\n    long[] nums1 = new long[nums.length];\n    long[] nums2 = new long[nums.length];\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqz2k2bum.d(25): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqz2k2bum.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length == 0)\n    {\n        return nums;\n    }\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6xvx0_bk.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xvx0_bk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var result = [];\n    var max = 0;\n    var sum = 0;\n    var\
    \ point;\n    foreach( num in nums ) {\n        point = num % 10;\n        sum\
    \ += point;\n        if( sum > max ) {\n            max = sum;\n        }\n  \
    \  }\n    foreach( num in nums ) {\n        point = num % 10;\n        sum +=\
    \ point;\n        if( sum > max ) {\n            max = sum;\n        }\n     \
    \   result[nums - 1 - num] = point + sum;\n    }\n    return result;\n}\n/*\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_5yximq.d(23): Error: no identifier for declarator num\n/tmp/tmp2_5yximq.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp2_5yximq.d(30): Error: no
    identifier for declarator num\n/tmp/tmp2_5yximq.d(30): Error: found \''in\'' when
    expecting \'';\''\n/tmp/tmp2_5yximq.d(40): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_5yximq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Map<long, int> map = new HashMap<long, int>();\n    \n    for\
    \ (long n : nums)\n    {\n        int index = map.get(n);\n        map.put(n,\
    \ (index == -1) ? nums.length : index);\n    }\n    \n    List<long> results =\
    \ new LinkedList<long>();\n    \n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        int index = map.get(nums[i]);\n        results.add((index == -1)\
    \ ? nums[i] : nums[index]);\n    }\n    \n    return results.toArray(new long[results.size()]);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nIf you do this, you can avoid a whole\
    \ lot of boilerplate code. You can also avoid the need to manually manage an `int[]`\
    \ by using `ArrayList` instead of `int[]`.\n<|/ c |>\n<| a dscore=0 |>\nYou can\
    \ do something like this, using a map to hold the sum of the digits and a linked\
    \ list to hold the sorted elements.\n<code>\npublic static void main(String[]\
    \ args) {\n    int[] nums = {1, 10, 11, -9, -10, 13};\n    System.out.println(Arrays.toString(order_by_points(nums)));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp0sjkilp.d(19): Error: found \'',\'' when expecting \''.\''
    following long\n/tmp/tmpp0sjkilp.d(19): Error: found \''int\'' when expecting
    identifier following \''long.\''\n/tmp/tmpp0sjkilp.d(19): Error: found \''>\''
    when expecting \'';\'' following statement\n/tmp/tmpp0sjkilp.d(19): Error: found
    \'',\'' when expecting \''.\'' following long\n/tmp/tmpp0sjkilp.d(19): Error:
    found \''int\'' when expecting identifier following \''long.\''\n/tmp/tmpp0sjkilp.d(19):
    Error: found \''>\'' when expecting \'';\'' following statement\n/tmp/tmpp0sjkilp.d(19):
    Error: expression expected, not \'')\''\n/tmp/tmpp0sjkilp.d(19): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpp0sjkilp.d(21): Error: found \''for\''
    when expecting \'';\'' following statement\n/tmp/tmpp0sjkilp.d(21): Error: found
    \'':\'' when expecting \'')\''\n/tmp/tmpp0sjkilp.d(21): Error: missing { ... }
    for function literal\n/tmp/tmpp0sjkilp.d(21): Error: found \''nums\'' when expecting
    \'';\'' following statement\n/tmp/tmpp0sjkilp.d(21): Error: found \'')\'' instead
    of statement\n/tmp/tmpp0sjkilp.d(27): Error: no identifier for declarator List\n/tmp/tmpp0sjkilp.d(27):
    Error: Declaration expected, not \''<\''\n/tmp/tmpp0sjkilp.d(29): Error: Declaration
    expected, not \''for\''\n/tmp/tmpp0sjkilp.d(29): Error: no identifier for declarator
    i\n/tmp/tmpp0sjkilp.d(29): Error: Declaration expected, not \''<\''\n/tmp/tmpp0sjkilp.d(29):
    Error: no identifier for declarator i\n/tmp/tmpp0sjkilp.d(29): Error: Declaration
    expected, not \''++\''\n/tmp/tmpp0sjkilp.d(32): Deprecation: C-style function
    pointer and pointer to array syntax is deprecated. Use \''function\'' to declare
    function pointers\n/tmp/tmpp0sjkilp.d(32): Error: unexpected ( in declarator\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp0sjkilp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long n = std.length(nums);\n  long digits = std.map(std.digits,\
    \ nums);\n  int index = 0;\n  for(int i = 0; i < n; i++) {\n    int cur = std.get_int(digits,\
    \ i);\n    index ^= cur;\n  }\n  \n  return std.reverse(nums, index, n);\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91ko6av1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = nums.clone();\n    std.array.Sort!(result, (x,\
    \ y) -> \n    std.math.Compare.get(x, std.math.Ordering.sumOfDigits(y))); // ascending\
    \ order \n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps14989df.d(20): Error: expression expected, not \''>\''\n/tmp/tmps14989df.d(21):
    Error: found \''std\'' when expecting \'')\'' following template argument list\n/tmp/tmps14989df.d(21):
    Error: found \'')\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmps14989df.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    //write your code here\n    long sum = 0;\n    int index = 0;\n\
    \    for (int i : nums) \n    {\n        sum += i;\n        index ++;\n    }\n\
    \    Map<long, List<long>> temp = new HashMap<>();\n    List<long> tempList =\
    \ new ArrayList<>();\n    tempList.add(nums[index]);\n    temp.add(sum, tempList);\n\
    \    return temp.entrySet().stream().sorted(Map.Entry.<Long, List<long>>comparingByValue()).map(Map.Entry::getValue).flatMap(List::stream).collect(Collectors.toList());\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=java,algorithm,sorting |>\n\
    This question seems very similar to Knapsack Problem.\nThe most naive solution\
    \ in Java would be to iterate the list of integers one by one and calculate all\
    \ the possible combinations and then sort them accordingly.\nHowever, the problem\
    \ with Knapsack Problem is that it takes too long and too much memory to solve\
    \ the problem if the number of integers is large.\nA better approach would be\
    \ to use a Dynamic Programming solution to solve the problem in a linear time\
    \ complexity.\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8zb4x79.d(22): Error: semicolon expected, not \'':\''\n/tmp/tmpx8zb4x79.d(22):
    Error: expression expected, not \'':\''\n/tmp/tmpx8zb4x79.d(22): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpx8zb4x79.d(27):
    Error: found \'',\'' when expecting \''.\'' following long\n/tmp/tmpx8zb4x79.d(27):
    Error: found \''<\'' when expecting \'';\'' following statement\n/tmp/tmpx8zb4x79.d(27):
    Error: no identifier for declarator long\n/tmp/tmpx8zb4x79.d(27): Error: found
    \''>>\'' instead of statement\n/tmp/tmpx8zb4x79.d(28): Error: found \''>\'' when
    expecting \''.\'' following long\n/tmp/tmpx8zb4x79.d(28): Error: expression expected,
    not \'')\''\n/tmp/tmpx8zb4x79.d(28): Error: found \'';\'' when expecting \'')\''\n/tmp/tmpx8zb4x79.d(29):
    Error: found \''tempList\'' when expecting \'';\'' following statement\n/tmp/tmpx8zb4x79.d(31):
    Error: identifier expected following \''.\'', not \''<\''\n/tmp/tmpx8zb4x79.d(31):
    Error: found \''Long\'' when expecting \'',\''\n/tmp/tmpx8zb4x79.d(31): Error:
    expression expected, not \'',\''\n/tmp/tmpx8zb4x79.d(31): Error: found \''List\''
    when expecting \'',\''\n/tmp/tmpx8zb4x79.d(31): Error: expression expected, not
    \''<\''\n/tmp/tmpx8zb4x79.d(31): Error: found \''long\'' when expecting \'',\''\n/tmp/tmpx8zb4x79.d(31):
    Error: expression expected, not \''>>\''\n/tmp/tmpx8zb4x79.d(31): Error: found
    \''comparingByValue\'' when expecting \'',\''\n/tmp/tmpx8zb4x79.d(31): Error:
    expression expected, not \'')\''\n/tmp/tmpx8zb4x79.d(31): Error: found \'':\''
    when expecting \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8zb4x79.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long result = 0;\n    for(int i=0; i< nums.length; i++)\n   \
    \ {\n        result += nums[i];\n    }\n    int[] resultArr = new int[32];\n \
    \   std.typecons.int[] sortedArr = new std.typecons.int[32];\n    for(int i=0;\
    \ i < nums.length; i++)\n    {\n        result -= nums[i];\n        resultArr[0]\
    \ -= nums[i];\n        resultArr[1] -= nums[i];\n        resultArr[2] -= nums[i];\n\
    \        resultArr[3] -= nums[i];\n        resultArr[4] -= nums[i];\n        resultArr[5]\
    \ -= nums[i];\n        resultArr[6] -= nums[i];\n        resultArr[7] -= nums[i];\n\
    \        resultArr[8] -= nums[i];\n        resultArr[9] -= nums[i];\n        resultArr[10]\
    \ -= nums[i];\n        resultArr[11] -= nums[i];\n        resultArr[12] -= nums[i];\n\
    \        resultArr[13] -= nums[i];\n        resultArr[14] -= nums[i];\n      \
    \  resultArr[15] -= nums[i];\n        resultArr[16] -= nums[i];\n        resultArr[17]\
    \ -= nums[i];\n        resultArr[18] -= nums[i];\n        resultArr[19] -= nums[i];\n\
    \        resultArr[20] -= nums[i];\n        resultArr[21] -= nums[i];\n      \
    \  resultArr[22] -= nums[i];\n        resultArr[23] -= nums[i];\n        resultArr[24]\
    \ -= nums[i];\n        resultArr[25] -= nums[i];\n        resultArr[26] -= nums[i];\n\
    \        resultArr[27] -= nums[i];\n        resultArr[28] -= nums[i];\n      \
    \  resultArr[29] -= nums[i];\n        resultArr[30] -= nums[i];\n        resultArr[31]\
    \ -= nums[i];\n        for(int j = 0; j < 32; j++)\n        {\n            if((result\
    \ & 1L) != 0)\n            {\n                sortedArr[j] = 0;\n            }\n\
    \            else\n            {\n                sortedArr[j] = nums[i];\n  \
    \          }\n            result >>= 1;\n        }\n    }\n    long[] res = new\
    \ long[32];\n    for(int i = 0; i < 32; i++)\n    {\n        res[i] = sortedArr[i];\n\
    \    }\n    return res;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,c# dscore=3\
    \ |>\nHere's my version:\n<code>\nList<int> a = new List<int>() { 0, 2, 2, 1,\
    \ 4, 3, 6, 8 };\na.Sort((a, b) =>\n        {\n            int result = 0;\n  \
    \          for (int i = 0; i < 4; i++)\n            {\n                result\
    \ |= (a & 1L) << (i * 4);\n                result |= (a & 1L) << ((i + 4) * 4);\n\
    \            }\n            return result;\n        });\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv_di1b4h.d(25): Error: identifier expected following \''.\'',
    not \''int\''\n/tmp/tmpv_di1b4h.d(25): Error: found \''sortedArr\'' when expecting
    \'';\'' following statement\n/tmp/tmpv_di1b4h.d(25): Error: found \''=\'' instead
    of statement\n/tmp/tmpv_di1b4h.d(81): Error: Declaration expected, not \''<\''\n/tmp/tmpv_di1b4h.d(84):
    Error: unterminated character constant\n/tmp/tmpv_di1b4h.d(87): Deprecation: C-style
    function pointer and pointer to array syntax is deprecated. Use \''function\''
    to declare function pointers\n/tmp/tmpv_di1b4h.d(87): Error: function declaration
    without return type. (Note that constructors are always named \''this\'')\n/tmp/tmpv_di1b4h.d(87):
    Error: found \''=>\'' when expecting \'')\''\n/tmp/tmpv_di1b4h.d(88): Error: no
    identifier for declarator a.Sort(a, b)\n/tmp/tmpv_di1b4h.d(96): Error: Declaration
    expected, not \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_di1b4h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int i = 0;\n    int j = 0;\n    long[] numsSorted = new long[nums.length];\n\
    \    while(i < nums.length)\n    {\n        while(j < nums.length && nums[i] <\
    \ nums[j])\n            ++j;\n        if(j > i)\n        {\n            int tmp\
    \ = nums[i];\n            nums[i] = nums[j];\n            nums[j] = tmp;\n   \
    \         ++i;\n        }\n        ++j;\n    }\n    for(long i : numsSorted)\n\
    \        i = Math.max(1, i);\n    return numsSorted;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmzv_5wmc.d(35): Error: semicolon expected, not \'':\''\n/tmp/tmpmzv_5wmc.d(35):
    Error: expression expected, not \'':\''\n/tmp/tmpmzv_5wmc.d(35): Error: found
    \''numsSorted\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmzv_5wmc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int size = nums.length - 1;\n    int sums[] = new int[size];\n\
    \    for (int i = 0; i < size; i++)\n    {\n        sums[i] = nums[i]%10;\n  \
    \  }\n    for (int i = 0; i < size; i++)\n    {\n        int s = sums[i];\n  \
    \      int pos = i;\n        while (sums[pos] > s)\n        {\n            sums[pos]\
    \ -= 10;\n            pos--;\n        }\n        sums[pos] += s;\n    }\n    long[]\
    \ results = new long[size];\n    for (int i = 0; i < size; i++)\n    {\n     \
    \   results[i] = nums[sums[i]];\n    }\n    return results;\n}\n</code>\n<|/ a\
    \ tags=sorting,java |>\n<| c |>\nThis is wrong, `order_by_points([-1L, -11L, 1L,\
    \ -12L, 11L])` returns `[-1L, -11L, 1L, -12L, 11L]` instead of `[-1L, -11L, -1L,\
    \ -12L, 11L]`\n<|/ c |>\n<| c |>\n: Yes, this was my bad. Edited the answer and\
    \ tested it.\n<|/ c |>\n<| c |>\nThis sorts ascending numbers, not descending\n\
    <|/ c |>\n<| c |>\nThis should be the correct answer, though it's not the most\
    \ efficient. Try inserting `1L` as the first element in the array and it will\
    \ output `[-1L, -11L, 1L, -12L, 11L]`. It's also not sorting descending, but it's\
    \ much easier to implement.\n<|/ c |>\n<| c |>\n: I agree. The question was edited\
    \ recently so I missed that part. Thanks for pointing it out.\n<|/ c |>\n<| a\
    \ tags=sorting,java |>\nTry to use this code:\n<code>\n  List<Integer> numbers=\
    \ Arrays.asList(10,1,8,2);\n  Collections.sort(numbers);\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis sorts ascending numbers, not descending\n<|/ c |>\n<| c |>\n\
    This should be the correct answer, though it's not the most efficient. Try inserting\
    \ `1L` as the first element in the array and it will output `[-1L, -11L, 1L, -12L,\
    \ 11L]`. It's also not sorting descending, but it's much easier to implement.\n\
    <|/ c |>\n<| a dscore=5 |>\nThe simplest way is to use Collections.sort\n<code>\n\
    Arrays.sort(intArray);\n</code>\n<|/ a tags=sorting,java |>\n<| c |>\nHow to use\
    \ this method in Java? \nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptnmgspbg.d(43): Error: Declaration expected, not \''<\''\n/tmp/tmptnmgspbg.d(55):
    Error: unterminated character constant\n/tmp/tmptnmgspbg.d(55): Error: unterminated
    character constant\n/tmp/tmptnmgspbg.d(55): Error: unterminated character constant\n/tmp/tmptnmgspbg.d(64):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmptnmgspbg.d(64): Error: no identifier for declarator
    Collections.sort(numbers)\n/tmp/tmptnmgspbg.d(65): Error: Declaration expected,
    not \''<\''\n/tmp/tmptnmgspbg.d(71): Error: unterminated character constant\n/tmp/tmptnmgspbg.d(71):
    Error: unterminated character constant\n/tmp/tmptnmgspbg.d(71): Error: unterminated
    character constant\n/tmp/tmptnmgspbg.d(77): Error: Declaration expected, not \''<\''\n/tmp/tmptnmgspbg.d(85):
    Error: Declaration expected, not \''assert\''\n/tmp/tmptnmgspbg.d(86): Error:
    Declaration expected, not \''assert\''\n/tmp/tmptnmgspbg.d(87): Error: Declaration
    expected, not \''assert\''\n/tmp/tmptnmgspbg.d(88): Error: Declaration expected,
    not \''assert\''\n/tmp/tmptnmgspbg.d(89): Error: Declaration expected, not \''assert\''\n/tmp/tmptnmgspbg.d(90):
    Error: Declaration expected, not \''assert\''\n/tmp/tmptnmgspbg.d(91): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnmgspbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Map<long,int> sums = new HashMap<>(); //map<long, int>\n    for(long\
    \ i : nums) {\n        sums.put(i, sums.getOrDefault(i, 0) + i);\n    }\n    long[]\
    \ sorted = new long[sums.size()];\n    int index = 0;\n    for(long sum : sums.values())\
    \ {\n        for(int i=0; i<sorted.length; ++i) {\n            if(sum == sorted[i])\
    \ break;\n        }\n        sorted[index++] = sum;\n    }\n    return sorted;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI think this could work. Not sure whether\
    \ it will work with negative numbers. \n<code>\nlong[] orderBySumOfDigits(long[]\
    \ arr) {\n    Arrays.sort(arr, new Comparator<Long>() {\n        public int compare(Long\
    \ o1, Long o2) {\n            return Long.signum(o1 - o2);\n        }\n    });\n\
    \    return arr;\n}\n</code>\n<|/ a tags=sorting,arrays,java dscore=0 |>\n<| c\
    \ |>\nThis would not work correctly for negative numbers. For example, for the\
    \ array `{ 1, -1L, -2L, -1 }`, the array `{ -1L, -2L, 1, -1 }` is returned.\n\
    <|/ c |>\n<| c |>\nThanks. I didn't think about negative numbers. Now I corrected\
    \ the answer.\n<|/ c |>\n<| a tags=sorting,arrays,java |>\n<code>\npublic static\
    \ void main(String[] args) {\n    long arr[] = {-2, -2, 1, 2, 4, -1, 2, -9, 5,\
    \ -5, -7, -4, -9, -1, -4, 6, -10, -3, -2, -1};\n    Arrays.sort(arr, new Comparator<Long>()\
    \ {\n        public int compare(Long o1, Long o2) {\n            long diff = 0;\n\
    \            while (o1 != 0) {\n                diff += o1 % 10;\n           \
    \     o1 /= 10;\n            }\n            while (o2 != 0) {\n              \
    \  diff += o2 % 10;\n                o2 /= 10;\n            }\n            return\
    \ diff;\n        }\n    });\n    System.out.println(Arrays.toString(arr));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\nThe solution using streams and a comparator:\n\
    <code>\npublic class SortingExample {\n    public static void main(String[] args)\
    \ {\n        int[] intArray = {1,-2,-3,4,5,-5,-5,-6,-7,6,8,-9,-10,-9,-11,-8};\n\
    \        System.out.println(\"Unsorted: \" + Arrays.toString(intArray));\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptedf4hp_.d(19): Error: found \'',\'' when expecting \''.\''
    following long\n/tmp/tmptedf4hp_.d(19): Error: found \''int\'' when expecting
    identifier following \''long.\''\n/tmp/tmptedf4hp_.d(19): Error: found \''>\''
    when expecting \'';\'' following statement\n/tmp/tmptedf4hp_.d(19): Error: expression
    expected, not \'')\''\n/tmp/tmptedf4hp_.d(19): Error: found \'';\'' when expecting
    \'')\''\n/tmp/tmptedf4hp_.d(20): Error: found \''for\'' when expecting \'';\''
    following statement\n/tmp/tmptedf4hp_.d(20): Error: found \'':\'' when expecting
    \'')\''\n/tmp/tmptedf4hp_.d(20): Error: missing { ... } for function literal\n/tmp/tmptedf4hp_.d(20):
    Error: found \''nums\'' when expecting \'';\'' following statement\n/tmp/tmptedf4hp_.d(20):
    Error: found \'')\'' instead of statement\n/tmp/tmptedf4hp_.d(25): Error: Declaration
    expected, not \''for\''\n/tmp/tmptedf4hp_.d(26): Error: no identifier for declarator
    i\n/tmp/tmptedf4hp_.d(26): Error: Declaration expected, not \''<\''\n/tmp/tmptedf4hp_.d(26):
    Error: Declaration expected, not \''++\''\n/tmp/tmptedf4hp_.d(28): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptedf4hp_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // write your code here\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpen18jw4t.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpen18jw4t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] ret = new long[nums.length];\n    int idx = 0;\n    for(int\
    \ i : nums)\n    {\n        ret[idx++] = i;\n    }\n    Arrays.sort(ret);\n  \
    \  return ret;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java,bubble-sort\
    \ dscore=0 |>\n<| c |>\nHe wants no libraries, only built-in methods. Also, I\
    \ don't think he wants to do any kind of sorting but just to count the occurrences\
    \ of an element. If he just wants the occurrence count, then your answer is way\
    \ better. Also, since he is using Java, no need to use long here.\n<|/ c |>\n\
    <| a dscore=0 |>\nI assume you mean you aren't allowed to use a library at all.\
    \ You are not allowed to use a library? Then you are in trouble. \nIf you are\
    \ allowed to use library, then I suggest you use the apache commons collections\
    \ library. With that library, you can do this:\n<code>\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_a4j6_fx.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmp_a4j6_fx.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmp_a4j6_fx.d(21): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmp_a4j6_fx.d(28):
    Error: Declaration expected, not \''<\''\n/tmp/tmp_a4j6_fx.d(31): Error: unterminated
    character constant\n/tmp/tmp_a4j6_fx.d(34): Error: unterminated character constant\n/tmp/tmp_a4j6_fx.d(41):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp_a4j6_fx.d(42): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp_a4j6_fx.d(43): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp_a4j6_fx.d(44): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp_a4j6_fx.d(45): Error: Declaration expected, not \''assert\''\n/tmp/tmp_a4j6_fx.d(46):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp_a4j6_fx.d(47): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_a4j6_fx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpya9ufro8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int sum = 0;\n    long temp = 0;\n    long[] numsCopy = new long[nums.length];\n\
    \    for (int i = 0; i < numsCopy.length; i++)\n    {\n        temp = nums[i];\n\
    \        sum += temp;\n        numsCopy[i] = temp;\n    }\n    Arrays.sort(numsCopy);\n\
    \    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = sum - nums[i];\n        sum = sum - nums[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,sorting,java\
    \ |>\nI have come up with another solution using Java8 streams and lambda expressions.\n\
    <code>\npublic static long sumOfDigits(long... numbers) {\n    long result = 0;\n\
    \    for (long number : numbers) {\n        result += number;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xl30bvn.d(37): Error: Declaration expected, not \''<\''\n/tmp/tmp2xl30bvn.d(44):
    Error: Declaration expected, not \''for\''\n/tmp/tmp2xl30bvn.d(46): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xl30bvn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long largest = Long.MIN_VALUE;\n    long index = 0;\n    long\
    \ sum = 0;\n    int i = 0;\n    for(i=0; i<nums.length; i++) {\n        sum =\
    \ Math.abs(nums[i]-sum);\n        index = i;\n    }\n    for(i=0; i<nums.length;\
    \ i++) {\n        if(sum < 0) sum += Math.abs(nums[i]);\n        if(sum > largest)\
    \ {\n            largest = sum;\n            index = i;\n        }\n        sum\
    \ = 0;\n    }\n    while(index >= 0) {\n        nums[index] = nums[--index];\n\
    \    }\n    largest = Math.abs(largest);\n    for(i=0; i<nums.length; i++) {\n\
    \        nums[i] += largest;\n    }\n    return nums;\n}\n</code>\n<|/ a tags=c#,arrays,sorting\
    \ |>\n<| a dscore=0 tags=c#,arrays,sorting |>\nThe code provided by is quite good,\
    \ except that the return should be done inside the while loop, and not outside.\n\
    Also, it is better to declare a variable inside the loop, otherwise it would remain\
    \ empty after the loop has completed.\n<code>\nusing System;\nnamespace sort\n\
    {\n    class Program\n    {\n        static void Main(string[] args)\n       \
    \ {\n            long[] nums = new long[]{1L, 11L, -1L, -11L, -12L};\n       \
    \     long[] res = order_by_points(nums);\n            for (int i = 0; i < res.Length;\
    \ i++)\n            {\n                Console.WriteLine($\"{i}: {res[i]}\");\n\
    \            }\n        }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmploewmefd.d(44): Error: Declaration expected, not \''<\''\n/tmp/tmploewmefd.d(52):
    Error: semicolon expected, not \''{\''\n/tmp/tmploewmefd.d(52): Error: Declaration
    expected, not \''{\''\n/tmp/tmploewmefd.d(59): Error: Declaration expected, not
    \''for\''\n/tmp/tmploewmefd.d(59): Error: no identifier for declarator i\n/tmp/tmploewmefd.d(59):
    Error: Declaration expected, not \''<\''\n/tmp/tmploewmefd.d(59): Error: no identifier
    for declarator i\n/tmp/tmploewmefd.d(59): Error: Declaration expected, not \''++\''\n/tmp/tmploewmefd.d(62):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmploewmefd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int sum = 0;\n    int index = 0;\n    long[] res = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++){\n        sum += nums[i];\n        res[i]\
    \ = sum;\n    }\n    for(int i = 0; i < nums.length; i++){\n        index = 0;\n\
    \        sum = 0;\n        for(int j = 0; j < nums.length; j++){\n           \
    \ if(nums[j] == res[i]){\n                index++;\n                sum += nums[j];\n\
    \            }\n        }\n        res[i] = sum;\n    }\n    return res;\n}\n\
    </code>\n<|/ a tags=algorithm,sorting,java |>\n<| c |>\nHi, could you please provide\
    \ an example of your code? It will be easier to understand.\n<|/ c |>\n<| c |>\n\
    Hi thanks for your comment. I think I understand your algorithm, however I am\
    \ not 100% sure that my logic is correct (I understood it partially, it was not\
    \ enough). I will try to play with it a bit more and get back to you. Thanks again\n\
    <|/ c |>\n<| c |>\nI am sorry, I tested the code. I found that it does not work\
    \ correctly.\n<|/ c |>\n<| c |>\nI tested my code with some sample inputs. It\
    \ works for all the cases that I tested. May I know what case did you test so\
    \ that it does not work for you? I will be happy to debug it.\n<|/ c |>\n<| c\
    \ |>\nHere are some examples: http://codeforces.com/problemset/problem/692/B\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxkrx_q24.d(39): Error: Declaration expected, not \''<\''\n/tmp/tmpxkrx_q24.d(59):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpxkrx_q24.d(60): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpxkrx_q24.d(61): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpxkrx_q24.d(62): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpxkrx_q24.d(63): Error: Declaration expected, not \''assert\''\n/tmp/tmpxkrx_q24.d(64):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpxkrx_q24.d(65): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxkrx_q24.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] results = new long[nums.length];\n    int index = nums.length;\n\
    \    for(long i = 0; i < nums.length; ++i)\n    {\n        int digit = nums[i]\
    \ - '0';\n        long sum = 0;\n        for(int k = 0; k < index; ++k)\n    \
    \    {\n            sum += nums[k]-'0';\n            \n        }\n        if(sum\
    \ == digit)\n            results[i] = nums[i];\n        index--;\n    }\n    return\
    \ results;\n}\n</code>\nThe key thing to do is to sum all the digits then check\
    \ if the array element is equal to the sum, if not decrease the counter. \nTo\
    \ test it, I created the following functions:\n<code>\npublic void test1()\n{\n\
    \    long[] nums = new long[] {-1L, -11L, 1L, -12L, 11L};\n    long[] results\
    \ = new long[nums.length];\n    order_by_points(nums);\n    assertArrayEquals(nums,\
    \ results);\n}\npublic void test2()\n{\n    long[] nums = new long[] {1L, 11L,\
    \ -1L, -11L, -12L};\n    long[] results = new long[nums.length];\n    order_by_points(nums);\n\
    \    assertArrayEquals(nums, results);\n}\npublic void test3()\n{\n    long[]\
    \ nums = new long[] {1L, 11L, 1L, -1L, -11L};\n    long[] results = new long[nums.length];\n\
    \    order_by_points(nums);\n    assertArrayEquals(nums, results);\n}\npublic\
    \ void test4()\n{\n    long[] nums = new long[] {-1L, -11L, -1L, -11L, -11L};\n\
    \    long[] results = new long[nums.length];\n    order_by_points(nums);\n   \
    \ assertArrayEquals(nums, results);\n}\npublic void test5()\n{\n    long[] nums\
    \ = new long[] {-1L, -11L, -11L, -11L, -1L};\n    long[] results = new long[nums.length];\n\
    \    order_by_points(nums);\n    assertArrayEquals(nums, results);\n}\npublic\
    \ void test6()\n{\n    long[] nums = new long[] {-1L, -11L, -11L, -1L, -1L};\n\
    \    long[] results = new long[nums.length];\n    order_by_points(nums);\n   \
    \ assertArrayEquals(nums, results);\n}\npublic void test7()\n{\n    long[] nums\
    \ = new long[] {-1L, -11L, -11L, -11L, -1L};\n    long[] results = new long[nums.length];\n\
    \    order_by_points(nums);\n    assertArrayEquals(nums, results);\n}\npublic\
    \ void test\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ocd_wf9.d(36): Error: Declaration expected, not \''<\''\n/tmp/tmp7ocd_wf9.d(44):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmp7ocd_wf9.d(44): Error: no identifier for declarator
    order_by_points(nums)\n/tmp/tmp7ocd_wf9.d(45): Error: function declaration without
    return type. (Note that constructors are always named \''this\'')\n/tmp/tmp7ocd_wf9.d(45):
    Error: no identifier for declarator assertArrayEquals(nums, results)\n/tmp/tmp7ocd_wf9.d(46):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ocd_wf9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var n = nums.length;\n    var nums_sorted = new long[n];\n  \
    \  for (int i = 0; i < n; ++i) {\n        long sum = nums[i];\n        for (int\
    \ j = i + 1; j < n; ++j) {\n            if (sum < 0) sum *= 10;\n            sum\
    \ += nums[j];\n        }\n        nums_sorted[i] = sum;\n    }\n    return nums_sorted;\n\
    }\n</code>\n<|/ a tags=optimization,algorithm,sorting,c#,.net dscore=3 |>\n<|\
    \ c |>\n\"The first element will be the biggest one\". I think you meant \"The\
    \ first element will be the smallest one\"\n<|/ c |>\n<| a dscore=1 |>\nYou were\
    \ missing a parenthesis in the for loop at second for loop.\nThe below program\
    \ is working for me,\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Collections;\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbckplb58.d(31): Error: Declaration expected, not \''<\''\n/tmp/tmpbckplb58.d(41):
    Error: semicolon expected, not \''.\''\n/tmp/tmpbckplb58.d(41): Error: no identifier
    for declarator .Collections.Generic\n/tmp/tmpbckplb58.d(42): Error: semicolon
    expected, not \''.\''\n/tmp/tmpbckplb58.d(42): Error: no identifier for declarator
    .Linq\n/tmp/tmpbckplb58.d(43): Error: semicolon expected, not \''.\''\n/tmp/tmpbckplb58.d(43):
    Error: no identifier for declarator .Text\n/tmp/tmpbckplb58.d(44): Error: semicolon
    expected, not \''.\''\n/tmp/tmpbckplb58.d(44): Error: no identifier for declarator
    .Collections\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbckplb58.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] index = new int[nums.length];\n    int sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++){\n        index[i] = i;\n        sum += nums[i];\n\
    \    }\n    Arrays.sort(index, (a, b) -> {\n        int c = nums[a];\n       \
    \ int d = nums[b];\n        return std.math.abs(c - d) + c;\n    });\n    long[]\
    \ results = new long[index.length];\n    for(int i = 0; i < index.length; i++){\n\
    \        results[index[i]] = nums[index[i]];\n    }\n    return results;\n}\n\
    </code>\n<|/ a dscore=2 tags=stl,sorting,java,c++ |>\n<| c |>\nThis is actually\
    \ the best answer for Java. Java is great for such things, and it's good to learn\
    \ different ways to do things. Thank you so much!\n<|/ c |>\n<| a tags=stl,sorting,java,c++\
    \ |>\nI think this is what you need, it is sort the array by sum of digits of\
    \ the number :\n<code>\npublic static int[] sort(int[] nums) {\n    int[] array\
    \ = new int[nums.length];\n    int temp = 0;\n    int sum = 0;\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwavtsd7s.d(25): Error: expression expected, not \''>\''\n/tmp/tmpwavtsd7s.d(25):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(26): Error: found
    \''c\'' when expecting \''.\'' following int\n/tmp/tmpwavtsd7s.d(26): Error: found
    \''=\'' when expecting identifier following \''int.\''\n/tmp/tmpwavtsd7s.d(26):
    Error: found \''nums\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(26): Error:
    found \'';\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(27): Error: found \''d\''
    when expecting \''.\'' following int\n/tmp/tmpwavtsd7s.d(27): Error: found \''=\''
    when expecting identifier following \''int.\''\n/tmp/tmpwavtsd7s.d(27): Error:
    found \''nums\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(27): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(28): Error: expression expected,
    not \''return\''\n/tmp/tmpwavtsd7s.d(28): Error: found \''std\'' when expecting
    \'',\''\n/tmp/tmpwavtsd7s.d(28): Error: found \'';\'' when expecting \'',\''\n/tmp/tmpwavtsd7s.d(29):
    Error: expression expected, not \''}\''\n/tmp/tmpwavtsd7s.d(36): Error: Declaration
    expected, not \''<\''\n/tmp/tmpwavtsd7s.d(39): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavtsd7s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    /*\n        Write your code here.\n    */\n    long[] result\
    \ = new long[nums.length];\n    int[] map = new int[(int)Math.pow(10, (int)nums.length)];\n\
    \    for(int i = 0; i < nums.length; ++i)\n    {\n        map[nums[i]]++;\n  \
    \  }\n    for(int i = 0; i < nums.length; ++i)\n    {\n        result[i] = map[nums[i]];\n\
    \    }\n    for(int i = 0; i < nums.length; ++i)\n    {\n        if(map[nums[i]]\
    \ == 1)\n        {\n            int j = i;\n            while(j > 0 && map[nums[j\
    \ - 1]] != map[nums[j]])\n            {\n                swap(nums, j, j - 1);\n\
    \                --j;\n            }\n        }\n    }\n    for(int i = 0; i <\
    \ nums.length; ++i)\n    {\n        if(map[nums[i]] == 0)\n        {\n       \
    \     swap(nums, i, nums.length - 1);\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=sorting,java,arrays |>\n<| a tags=sorting,java,arrays dscore=0\
    \ |>\n<code>\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp54w2uabt.d(23): Error: C style cast illegal, use cast(int)nums.length\n/tmp/tmp54w2uabt.d(23):
    Error: C style cast illegal, use cast(int)Math.pow(10, cast(int)nums.length)\n/tmp/tmp54w2uabt.d(53):
    Error: Declaration expected, not \''<\''\n/tmp/tmp54w2uabt.d(58): Error: identifier
    expected following package\n/tmp/tmp54w2uabt.d(58): Error: \'';\'' expected\n/tmp/tmp54w2uabt.d(59):
    Error: identifier expected following package\n/tmp/tmp54w2uabt.d(59): Error: \'';\''
    expected\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp54w2uabt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long last = 0;\n    long[] ans = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; ++i)\n    {\n        sum += nums[i];\n \
    \       if (sum == 0)\n        {\n            ans[i] = last;\n        }\n    \
    \    else\n        {\n            if (sum < 0)\n            {\n              \
    \  sum += 100000000000000000L;\n            }\n            if (last)\n       \
    \     {\n                ans[i] = last;\n                last = sum;\n       \
    \     }\n            else\n            {\n                last = sum;\n      \
    \      }\n        }\n    }\n    Arrays.sort(ans);\n    return ans;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxv2yeue.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums == null || nums.length <= 0) \n        return nums;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4dm1xb8.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4dm1xb8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] counter = new int[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++) \n    {\n        int count = 0;\n        foreach (int digit\
    \ in nums[i]) \n        {\n            count += digit;\n        }\n        if\
    \ (counter[count] == 0) \n        {\n            counter[count] = i;\n       \
    \ }\n    }\n    long[] result = new long[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++) \n    {\n        int index = counter[nums[i]];\n       \
    \ result[index] = nums[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,.net,sorting,arrays\
    \ dscore=4 |>\n<| a dscore=3 |>\n<code>\n int[] array = new int[] { 4, 7, 2, 9,\
    \ 5 };\n Array.Sort(array, (x, y) => { var xi = Math.Abs(x - y); return xi <=>\
    \ xi });\n</code>\n<|/ a tags=c#,algorithm,.net,sorting,arrays |>\n<| c |>\nIt\
    \ doesn't even compile, since `<=>` operator is a method group and not an operator.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try sorting this array: `new int[] { 5,\
    \ 4, 3, 2, 1 }`\n<|/ c |>\n<| c |>\nYeah, it doesn't. This code doesn't compile\
    \ and will give a cryptic error. The problem is the use of `<=>` operator as a\
    \ comparison, while it needs to be a function.\n<|/ c |>\n<| c |>\nThe code won't\
    \ compile. C# compiler says: `error CS0117: 'System.Array' does not contain a\
    \ definition for 'Sort' and no extension method 'Sort' accepting a first argument\
    \ of type 'System.Array' could be found (are you missing a using directive or\
    \ an assembly reference?)`.\n<|/ c |>\n<| c |>\nIt doesn't compile. Sort doesn't\
    \ exist for Arrays, it exists for List. As mentioned, it isn't a method of any\
    \ sort.\n<|/ c |>\n<| a tags=c#,algorithm,.net,sorting,arrays |>\n<code>\n static\
    \ void Main(string[] args)\n    {\n        int[] arr = { 4,7,2,9,5 };\n      \
    \  Array.Sort(arr, (x, y) => Compare(x, y));\n        for(int i = 0; i < arr.Length;\
    \ i++)\n        {\n            Console.WriteLine(arr[i]);\n        }\n       \
    \ Console.ReadLine();\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpci5zve9g.d(23): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpci5zve9g.d(40):
    Error: Declaration expected, not \''<\''\n/tmp/tmpci5zve9g.d(45): Error: unexpected
    ( in declarator\n/tmp/tmpci5zve9g.d(45): Error: basic type expected, not (\n/tmp/tmpci5zve9g.d(45):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmpci5zve9g.d(45): Error: found \''=>\'' when expecting
    \'')\''\n/tmp/tmpci5zve9g.d(45): Error: no identifier for declarator Array.Sort(array,
    int(x, y))\n/tmp/tmpci5zve9g.d(45): Error: expression expected, not \''>\''\n/tmp/tmpci5zve9g.d(45):
    Error: found \''xi\'' when expecting \'';\'' following return statement\n/tmp/tmpci5zve9g.d(45):
    Error: Declaration expected, not \'')\''\n/tmp/tmpci5zve9g.d(46): Error: Declaration
    expected, not \''<\''\n/tmp/tmpci5zve9g.d(49): Error: unterminated character constant\n/tmp/tmpci5zve9g.d(52):
    Error: unterminated character constant\n/tmp/tmpci5zve9g.d(55): Error: unterminated
    character constant\n/tmp/tmpci5zve9g.d(55): Error: unterminated character constant\n/tmp/tmpci5zve9g.d(58):
    Error: unterminated character constant\n/tmp/tmpci5zve9g.d(61): Error: unterminated
    character constant\n/tmp/tmpci5zve9g.d(61): Error: unterminated character constant\n/tmp/tmpci5zve9g.d(61):
    Error: unterminated character constant\n/tmp/tmpci5zve9g.d(68): Error: unexpected
    ( in declarator\n/tmp/tmpci5zve9g.d(68): Error: basic type expected, not (\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpci5zve9g.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.isEmpty()) return nums;\n    \n    SortedArray<int, 2>\
    \ sortedMap = new SortedArray<int, 2>();\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8ybvzt4j.d(21): Error: found \'',\'' when expecting \''.\''
    following int\n/tmp/tmp8ybvzt4j.d(21): Error: found \''2\'' when expecting identifier
    following \''int.\''\n/tmp/tmp8ybvzt4j.d(21): Error: found \''>\'' when expecting
    \'';\'' following statement\n/tmp/tmp8ybvzt4j.d(21): Error: found \'',\'' when
    expecting \''.\'' following int\n/tmp/tmp8ybvzt4j.d(21): Error: found \''2\''
    when expecting identifier following \''int.\''\n/tmp/tmp8ybvzt4j.d(21): Error:
    found \''>\'' when expecting \'';\'' following statement\n/tmp/tmp8ybvzt4j.d(21):
    Error: expression expected, not \'')\''\n/tmp/tmp8ybvzt4j.d(21): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmp8ybvzt4j.d(22): Error: found \''unittest\''
    when expecting \'';\'' following statement\n/tmp/tmp8ybvzt4j.d(33): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8ybvzt4j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n   long sum;\n   long result[] = new long[nums.length];\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxo3n2sxf.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxo3n2sxf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int i, j, k;\n  long sum = 0;\n  int[] map = new int[nums.length];\n\
    \  long[] rev = nums.clone();\n  sort(rev, 0, nums.length-1);\n  for (i = 0; i\
    \ < nums.length; i++)\n    map[i] = i;\n  for (i = 0; i <= nums.length - 1; i++)\n\
    \    for (j = 0; j < i; j++)\n      if (rev[j] + rev[j + 1] > sum)\n        k\
    \ = map[j];\n      else\n        k = map[i];\n      map[i] = k;\n    sort(rev,\
    \ i+1, nums.length-1);\n  for (i = 0; i <= nums.length - 1; i++)\n    if (i !=\
    \ map[i])\n      swap(rev[i], rev[map[i]]);\n  return rev;\n}\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeysd5d_9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] points = new long[nums.length];\n\t\n\tif(nums.length ==\
    \ 0) return nums;\n\t\n\tlong sum = 0;\n\tfor(int i = 0; i < nums.length; i++)\n\
    \t{\n\t\tpoints[i] = nums[i];\n\t\tsum += nums[i];\n\t}\n\t\n\tArrays.sort(points);\n\
    \t\n\tlong[] result = new long[nums.length];\n\t\n\tfor(int i = 0; i < nums.length;\
    \ i++)\n\t{\n\t\tresult[i] = points[i];\n\t\tpoints[i] -= sum;\n\t}\n\t\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1ybdvx1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int len = nums.length;\n\
    \    \n    for(int i = 0; i < len; i++)\n    {\n        long sum = 0;\n      \
    \  int j = 0;\n        for(; j < len; j++)\n        {\n            if(nums[i]\
    \ > 0)\n            {\n                sum++;\n            }\n            else\n\
    \            {\n                sum --;\n            }\n            if(nums[j]\
    \ > 0 && sum > 0)\n            {\n                break;\n            }\n    \
    \    }\n        long value = len - j;\n        \n        if(nums[i] > 0)\n   \
    \     {\n            sum++;\n        }\n        else\n        {\n            sum--;\n\
    \        }\n        \n        result[i] = value;\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer would be much more useful\
    \ to readers if it had a little explanation of how it works.\n<|/ c |>\n<| c |>\n\
    This solution will always give the correct result as long as no element is repeated\
    \ more than once.\n<|/ c |>\n<| c |>\nThis solution can easily be modified to\
    \ get the result even when repeated elements are present.\n<|/ c |>\n<| c |>\n\
    The answer is based on brute force checks over all possible combinations which\
    \ is very slow for bigger arrays. But it can easily be modified to get the result\
    \ even when repeated elements are present.\n<|/ c |>\n<| a tags=arrays,java dscore=1\
    \ |>\nTry this solution:\n<code>\npublic int[] orderBySumOfDigits(int[] nums)\
    \ {\n    Arrays.sort(nums);\n    int sum = 0;\n    for (int i = nums.length -\
    \ 1; i >= 0; i--) {\n        sum += nums[i];\n        for (int j = nums.length\
    \ - 1; j > i; j--) {\n            if (nums[j] >= sum) {\n                nums[i\
    \ + 1] = nums[j];\n                break;\n            }\n        }\n    }\n \
    \   return nums;\n}\n</code>\n<|/ a |>\n<| c |>\nThis will not work. Take a simple\
    \ case: \nInput: int[] = {0, 6, 1, 2}\nOutput: int[] = {2, 1, 0, 6}\n<|/ c |>\n\
    <| c |>\nThat would be a problem with this solution as well.\n<|/ c |>\n<| c |>\n\
    This solution gives wrong answer if two elements have the same sum. Try this:\
    \ `{0, 6, 1, 2}`.\n<|/ c |>\n<| c |>\nThis solution will also give you wrong answer\
    \ if there is a repeated element. See my comment on Ashwini's answer.\n<|/ c |>\n\
    <| c |>\n\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp33wp7x40.d(57): Error: Declaration expected, not \''<\''\n/tmp/tmp33wp7x40.d(77):
    Error: Declaration expected, not \''for\''\n/tmp/tmp33wp7x40.d(77): Error: no
    identifier for declarator i\n/tmp/tmp33wp7x40.d(77): Error: Declaration expected,
    not \''>=\''\n/tmp/tmp33wp7x40.d(77): Error: no identifier for declarator i\n/tmp/tmp33wp7x40.d(77):
    Error: Declaration expected, not \''--\''\n/tmp/tmp33wp7x40.d(79): Error: Declaration
    expected, not \''for\''\n/tmp/tmp33wp7x40.d(79): Error: no identifier for declarator
    j\n/tmp/tmp33wp7x40.d(79): Error: Declaration expected, not \''>\''\n/tmp/tmp33wp7x40.d(79):
    Error: no identifier for declarator j\n/tmp/tmp33wp7x40.d(79): Error: Declaration
    expected, not \''--\''\n/tmp/tmp33wp7x40.d(82): Error: Declaration expected, not
    \''break\''\n/tmp/tmp33wp7x40.d(83): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33wp7x40.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long sum = 0;\n  for (long n : nums)\n    sum += n;\n  return nums.sort((a,\
    \ b) -> sum - a + b);\n}\n</code>\n<|/ a tags=java,java-stream,java-8 dscore=0\
    \ |>\n<| a dscore=0 |>\nIt seems like an easy thing to do, but it's not as easy\
    \ as just using the built-in sort function or lambda expressions. You'll want\
    \ to create a custom comparator for this, and you'll also want to make a custom\
    \ comparator for sorting with regards to the sum of the digits. Once you do that,\
    \ you can pass that to a Stream API call to sort and use that to return your list\
    \ of values.\n<code>\npublic static List<Integer> sortWithSum(List<Integer> input)\
    \ {\n    long sum = 0;\n    long max = Long.MIN_VALUE;\n    \n    // Create custom\
    \ comparator for sorting by sum of the digits\n    class Comparator implements\
    \ Comparator<Integer> {\n        public int compare(Integer a, Integer b) {\n\
    \            return Long.compare(getSum(a), getSum(b));\n        }\n        \n\
    \        public long getSum(Integer number) {\n            for (; number > 0;\
    \ number /= 10)\n                sum += number % 10;\n            return sum;\n\
    \        }\n    }\n    \n    // Create a custom comparator for sorting by index\n\
    \    class Comparator2 implements Comparator<Integer> {\n        public int compare(Integer\
    \ a, Integer b) {\n            return Integer.compare(getIndex(a), getIndex(b));\n\
    \        }\n        \n        public int getIndex(Integer number) {\n        \
    \    long sum = 0;\n            int count = 0;\n            \n            while(number\
    \ > 0) {\n                sum += number % 10;\n                count++;\n    \
    \            number /= 10;\n            }\n            \n            return count;\n\
    \        }\n    }\n    \n    // Pass comparator to sort method\n    input.sort(Comparator.comparingLong(Comparator2::getSum));\n\
    \    \n    return input;\n}\n</code>\n<|/ a tags=java,java-stream,java-8 |>\n\
    <| a |>\nHere's another possibility that does not require a custom comparator:\n\
    <code>\nstatic List<Integer> sortWithSum(List<Integer> input) {\n    return IntStream.range(input.size()\
    \ - 1).mapToObj(i -> input.get(i))\n            .collect(Collectors.toList())\n\
    \            .stream()\n            .sorted((a, b) -> Long.compare(\n        \
    \            Integer.valueOf(String.valueOf(a).charAt(0)),\n                 \
    \   Integer.valueOf(String.valueOf(b).charAt(0)))\n                    .thenComparingLong(i\
    \ -> Long.parseLong(String.valueOf(i)).sum()))\n            .\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpux2j4tny.d(20): Error: semicolon expected, not \'':\''\n/tmp/tmpux2j4tny.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmpux2j4tny.d(20): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpux2j4tny.d(22):
    Error: expression expected, not \''>\''\n/tmp/tmpux2j4tny.d(22): Error: found
    \''sum\'' when expecting \'',\''\n/tmp/tmpux2j4tny.d(24): Error: Declaration expected,
    not \''<\''\n/tmp/tmpux2j4tny.d(27): Error: unterminated character constant\n/tmp/tmpux2j4tny.d(27):
    Error: unterminated character constant\n/tmp/tmpux2j4tny.d(27): Error: unterminated
    character constant\n/tmp/tmpux2j4tny.d(34): Error: { } expected following aggregate
    declaration\n/tmp/tmpux2j4tny.d(34): Error: semicolon expected, not \''<\''\n/tmp/tmpux2j4tny.d(34):
    Error: Declaration expected, not \''<\''\n/tmp/tmpux2j4tny.d(37): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpux2j4tny.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int n = nums.length;\n\
    \    int m = 0;\n    for (int i = 0; i < n; ++i) {\n        int sum = 0;\n   \
    \     int j;\n        for (j = 0; j < n; ++j) {\n            sum = (sum + nums[j])\
    \ % 10;\n        }\n        if (sum < nums[i]) {\n            result[m++] = nums[i];\n\
    \        } else if (sum > nums[i]) {\n            result[m++] = sum;\n       \
    \ } else {\n            result[m++] = i;\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ht2xx3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    int j = 0;\n    long\
    \ sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum = sum + nums[i];\n\
    \        while (sum > 0) {\n            res[j] = sum % 10;\n            sum =\
    \ (sum - res[j]) / 10;\n            j++;\n        }\n    }\n    return res;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\n`long sum = 0;` is redundant and\
    \ unnecessary.\n<|/ c |>\n<| a |>\n<code>\n/**\n* The array is sorted in ascending\
    \ order based on the sum of the digits in the array.\n* For example:\n* [1, 2,\
    \ 3, 4] -> [1, 3, 2, 4]\n* [5, 10, 3, 7] -> [10, 7, 5, 3]\n* [12, 3, 6, 8, 9]\
    \ -> [3, 6, 9, 12, 8]\n* [9, 4, 2, 5, 7] -> [4, 7, 9, 2, 5]\n* [] -> []\n*/\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppg69whck.d(32): Error: Declaration expected, not \''<\''\n/tmp/tmppg69whck.d(52):
    Error: Declaration expected, not \''assert\''\n/tmp/tmppg69whck.d(53): Error:
    Declaration expected, not \''assert\''\n/tmp/tmppg69whck.d(54): Error: Declaration
    expected, not \''assert\''\n/tmp/tmppg69whck.d(55): Error: Declaration expected,
    not \''assert\''\n/tmp/tmppg69whck.d(56): Error: Declaration expected, not \''assert\''\n/tmp/tmppg69whck.d(57):
    Error: Declaration expected, not \''assert\''\n/tmp/tmppg69whck.d(58): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppg69whck.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res_list = new long[nums.length];\n    int[] digits =\
    \ new int[nums.length];\n    int maxSum = 0, tempSum = 0, index, i, j, sum;\n\
    \    \n    for(int i = 0; i < nums.length; ++i)\n    {\n        digits[i] = (int)nums[i];\n\
    \        temp = digits[i];\n        sum = 0;\n        for(j = 0; j < digits.length;\
    \ ++j)\n        {\n            sum += temp;\n            temp /= 10;\n       \
    \     if(temp != 0)\n                --j;\n        }\n        if (sum > maxSum)\n\
    \        {\n            index = i;\n            maxSum = sum;\n        }\n   \
    \ }\n    \n    for(int i = 0; i < nums.length; ++i)\n    {\n        digits[i]\
    \ = (int)nums[i];\n        temp = digits[i];\n        sum = 0;\n        for(j\
    \ = 0; j < digits.length; ++j)\n        {\n            sum += temp;\n        \
    \    temp /= 10;\n            if(temp != 0)\n                --j;\n        }\n\
    \        res_list[index] = sum;\n        index--;\n    }\n    return res_list;\n\
    }\n</code>\nThe time complexity of this implementation is O(n*log(n)). I don't\
    \ think we can do better than that because the number of digits of the input number\
    \ won't go much above 10. Also, if you consider using a HashMap instead which\
    \ would map the sum value to an index in an array then the complexity would be\
    \ O(n*log(n)) only. Although, it would take O(n) space.\n<|/ a |>\n<| c |>\nThe\
    \ complexity of the algorithm is O(n*log(n)), so I don't think it can be better\
    \ than O(n*log(n)).\n<|/ c |>\n<| c |>\nYou also need to sort the original array\
    \ (which is O(n*log(n))) before you can apply the above algorithm. Although, it\
    \ takes O(n) space (as opposed to O(n*log(n))).\n<|/ c |>\n<| a |>\n<code>\n \
    \   package com.example;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxm5_svhb.d(25): Error: C style cast illegal, use cast(int)nums[i]\n/tmp/tmpxm5_svhb.d(44):
    Error: C style cast illegal, use cast(int)nums[i]\n/tmp/tmpxm5_svhb.d(59): Error:
    Declaration expected, not \''<\''\n/tmp/tmpxm5_svhb.d(60): Error: unterminated
    character constant\n/tmp/tmpxm5_svhb.d(60): Error: unterminated character constant\n/tmp/tmpxm5_svhb.d(63):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxm5_svhb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int sum = 0;\n  \
    \  for(int i = 0; i < nums.length; ++i)\n    {\n        sum += nums[i];\n    \
    \    result[i] = sum;\n    }\n    int order = 0;\n    for(int i = 0; i < nums.length;\
    \ ++i)\n    {\n        while(order >= 0 && sum < 0)\n        {\n            sum\
    \ += result[order];\n            order -= 1;\n        }\n        while(order <\
    \ result.length && sum > 0)\n        {\n            sum -= result[order];\n  \
    \          order += 1;\n        }\n        if(sum == 0)\n            break;\n\
    \        result[order] = nums[i];\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=2 tags=arrays,algorithm,sorting,sorting |>\n<| c |>\nWhat do you think\
    \ about it? This looks like a great solution, thank you.\n<|/ c |>\n<| c |>\n\
    Thanks for the suggestion. Indeed it works great. Just one little detail: in line\
    \ 83 change `while(order >= 0 && sum < 0)` to `while(order >= 0 && sum > 0)` since\
    \ you just want to swap the numbers when `sum` is positive.\n<|/ c |>\n<| c |>\n\
    Yeah, that is right. Fixed it now.\n<|/ c |>\n<| a |>\n<code>\npublic int sortNumber(int\
    \ arr[], int n) {\n    int sum = 0;\n    int swap = 0;\n    int minIndex = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n        if (sum <\
    \ 0)\n            swap = arr[i];\n    }\n    int index = 0;\n    while (swap <\
    \ 0) {\n        index++;\n        swap = arr[index];\n    }\n    arr[index] =\
    \ minIndex;\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] < arr[i\
    \ + 1]) {\n            arr[i] = arr[i + 1];\n        }\n    }\n    return arr[0];\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,sorting,sorting dscore=1 |>\n<| a tags=arrays,algorithm,sorting,sorting\
    \ |>\nI thought of a solution using two pointers swap and min and max to keep\
    \ track of what to swap\n<code>\npublic int[] sort(int[] nums) {\n  int n = nums.length;\n\
    \  int min = 0;\n  int max = 0;\n  \n  int swap = 0;\n  int sum = 0;\n  \n  for\
    \ (int i = 0; i < n; i++){\n    sum = nums[i];\n    \n    if (max < sum){\n  \
    \    max = sum;\n    }\n    \n    if (min > sum){\n      min = sum;\n    }\n \
    \   \n  }\n  \n  int minIndex = 0;\n  int maxIndex = n-1;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77urvp9i.d(45): Error: Declaration expected, not \''<\''\n/tmp/tmp77urvp9i.d(62):
    Error: Declaration expected, not \''for\''\n/tmp/tmp77urvp9i.d(62): Error: no
    identifier for declarator i\n/tmp/tmp77urvp9i.d(62): Error: Declaration expected,
    not \''<\''\n/tmp/tmp77urvp9i.d(62): Error: no identifier for declarator i\n/tmp/tmp77urvp9i.d(62):
    Error: Declaration expected, not \''++\''\n/tmp/tmp77urvp9i.d(64): Error: Declaration
    expected, not \''if\''\n/tmp/tmp77urvp9i.d(66): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77urvp9i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] arr = nums;\n    bool flag = false;\n    long largest\
    \ = 0;\n    long smallest = 0;\n    int length = arr.length;\n    for (int i =\
    \ 0; i < length; i++)\n    {\n        if (arr[i] >= 0)\n        {\n          \
    \  arr[i] += largest;\n            flag = true;\n            flag ? largest =\
    \ arr[i] : largest = arr[i];\n        }\n        else\n        {\n           \
    \ arr[i] += smallest;\n            flag = false;\n            flag ? smallest\
    \ = arr[i] : smallest = arr[i];\n        }\n    }\n    return flag ? arr : arr.Reverse();\n\
    }\n</code>\n<|/ a |>\n<| a |>\nHere's an example of the algorithm I use, where\
    \ I sort the list by number of digits, where -1 is the highest and 1 is the lowest:\n\
    <code>\nlet rec numOfDigits x = if x < 0 then 0 else if x < 10 then 1 else\n \
    \                         (1+numOfDigits ((x%10)*10+x//10)) \n               \
    \           * numOfDigits (x%10);;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkb7g95_l.d(41): Error: Declaration expected, not \''<\''\n/tmp/tmpkb7g95_l.d(44):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpkb7g95_l.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // write your code here\n    long[] copy = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n     \
    \   for(int j = 0; j < nums.length; j++)\n        {\n            sum += nums[j];\n\
    \        }\n        copy[i] = sum;\n    }\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqqv1vh_r.d(30): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqv1vh_r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // sort by sum of the digits of each number\n    long[] result\
    \ = new long[nums.length];\n    long sum = 0;\n    for(int i = 0; i < nums.length;\
    \ i++){\n        int digit = nums[i] % 10;\n        sum += digit;\n        result[i]\
    \ = sum;\n    }\n    Arrays.sort(result, (a, b) -> Long.compare(a + b, sum));\n\
    \    \n    long[] result2 = new long[result.length];\n    int index = 0;\n   \
    \ for(int i = 0; i < nums.length; i++){\n        int digit = nums[i] % 10;\n \
    \       result2[index] = digit;\n        sum += digit;\n        index++;\n   \
    \ }\n    Arrays.sort(result2, (a, b) -> Long.compare(a + b, sum));\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbwh39v13.d(27): Error: expression expected, not \''>\''\n/tmp/tmpbwh39v13.d(27):
    Error: found \''Long\'' when expecting \'',\''\n/tmp/tmpbwh39v13.d(37): Error:
    expression expected, not \''>\''\n/tmp/tmpbwh39v13.d(37): Error: found \''Long\''
    when expecting \'',\''\n/tmp/tmpbwh39v13.d(38): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwh39v13.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int N = nums.length;\n    int ret[N];\n    int i, j, sum = 0;\n\
    \    \n    for (i = 0; i < N; i++) {\n        sum = 0;\n        for (j = 0; j\
    \ < N; j++) \n        {\n            if (j == i)\n                continue;\n\
    \            \n            sum += nums[j];\n            if (sum > 0)\n       \
    \     {\n                ret[i] = j;\n                sum -= nums[j];\n      \
    \          break;\n            }\n        }\n    }\n    \n    return ret;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmd97sqm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if( nums.Length == 0 )\n    {\n        return nums;\n    }\n\
    \    int start=0;\n    long maxSum=nums[0];\n    long sum=0;\n    foreach(long\
    \ n in nums)\n    {\n        sum += n%10;\n        maxSum = sum > maxSum ? sum\
    \ : maxSum;\n        sum = 0;\n    }\n    foreach(long n in nums)\n    {\n   \
    \     sum += n%10;\n        if( sum == maxSum )\n        {\n            start\
    \ += nums.IndexOf(n);\n            break;\n        }\n    }\n    Array.Copy(nums,\
    \ start, nums, 0, nums.Length-start );\n    return nums;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nIt is not an option for me. Thanks anyway.\n<|/ c |>\n<| c |>\n\
    Hmm.... that makes my comment look like I'm wrong. Maybe it is better to ask a\
    \ new question, or to tell us more about the constraints. Because I now don't\
    \ see how to do it. And this answer is not about performance, it's about readability.\n\
    <|/ c |>\n<| a tags=c#,list,linq,sorting |>\nThis is an old question, but here's\
    \ a solution using LINQ:\n<code>\nlong[] nums = { 11L, 1L, -1L, -12L, -11L };\n\
    List<long> sortedNums = nums.ToList();\nsortedNums.Sort((x, y) => x.ToString().Sum()\
    \ - y.ToString().Sum());\n</code>\nIt uses the Sort overload that accepts a lambda\
    \ which compares two values based on their sum.\n<|/ a dscore=3 |>\n<| a |>\n\
    I believe this is what you're looking for. \n<code>\nvar result = list.OrderBy(x=>\
    \ x.ToString().Sum()).ToList();\n</code>\n<|/ a dscore=3 tags=c#,list,linq,sorting\
    \ |>\n<| c |>\nThis doesn't look like it's sorting in descending order.\n<|/ c\
    \ |>\n<| a dscore=1 tags=c#,list,linq,sorting |>\nI believe the answer is something\
    \ like:\n<code>\nlist.OrderBy(x => x.ToString().Sum()).ToList();\n</code>\n<|/\
    \ a |>\n<| c |>\nI think you missed the point of his question. This will sort\
    \ them in ascending order.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nvar list = new\
    \ List<long>()\n{\n    11L,\n    1L,\n    -1L,\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ms3cqur.d(26): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4ms3cqur.d(32):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4ms3cqur.d(44): Error: Declaration
    expected, not \''<\''\n/tmp/tmp4ms3cqur.d(50): Error: unterminated character constant\n/tmp/tmp4ms3cqur.d(50):
    Error: unterminated character constant\n/tmp/tmp4ms3cqur.d(50): Error: unterminated
    character constant\n/tmp/tmp4ms3cqur.d(53): Error: unterminated character constant\n/tmp/tmp4ms3cqur.d(56):
    Error: no identifier for declarator List\n/tmp/tmp4ms3cqur.d(56): Error: Declaration
    expected, not \''<\''\n/tmp/tmp4ms3cqur.d(57): Deprecation: C-style function pointer
    and pointer to array syntax is deprecated. Use \''function\'' to declare function
    pointers\n/tmp/tmp4ms3cqur.d(57): Error: function declaration without return type.
    (Note that constructors are always named \''this\'')\n/tmp/tmp4ms3cqur.d(57):
    Error: found \''=>\'' when expecting \'')\''\n/tmp/tmp4ms3cqur.d(57): Error: no
    identifier for declarator sortedNums.Sort(x, y)\n/tmp/tmp4ms3cqur.d(57): Error:
    semicolon expected following function declaration\n/tmp/tmp4ms3cqur.d(57): Error:
    function declaration without return type. (Note that constructors are always named
    \''this\'')\n/tmp/tmp4ms3cqur.d(57): Error: no identifier for declarator x.ToString()\n/tmp/tmp4ms3cqur.d(57):
    Error: semicolon expected following function declaration\n/tmp/tmp4ms3cqur.d(57):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmp4ms3cqur.d(57): Error: no identifier for declarator
    .Sum()\n/tmp/tmp4ms3cqur.d(57): Error: semicolon expected following function declaration\n/tmp/tmp4ms3cqur.d(57):
    Error: Declaration expected, not \''-\''\n/tmp/tmp4ms3cqur.d(58): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ms3cqur.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int i,j,k=0;\n    long arr[k];\n    long sum=0;\n    long[] res=new\
    \ long[nums.length];\n    \n    for (i=0;i<nums.length;i++)\n    {\n        arr[i]=nums[i];\n\
    \        sum=0;\n        for (j=0;j<i;j++)\n        {\n            sum+=arr[j];\n\
    \            arr[k++]=sum;\n        }\n    }\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps1leay4e.d(34): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1leay4e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted = new long[nums.length];\n    long[] sortedCopy\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++){\n     \
    \   sorted[i] = nums[i];\n    }\n    Arrays.sort(sorted);\n    for (int i = 0;\
    \ i < nums.length; i++){\n        sortedCopy[i] = sorted[i];\n    }\n    Arrays.sort(sortedCopy);\n\
    \    long[] result = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++){\n        result[i] = sortedCopy[nums[i]];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,algorithm,sorting,java dscore=2\
    \ |>\n<code>\npublic class Main {\n    public static void main(String args[]){\n\
    \        List<Integer> nums = new ArrayList<Integer>();\n        nums.add(1);\n\
    \        nums.add(10);\n        nums.add(11);\n        nums.add(100);\n      \
    \  nums.add(101);\n        nums.add(-1);\n        nums.add(-11);\n        nums.add(-12);\n\
    \        nums.add(2);\n        nums.add(20);\n        nums.add(30);\n        nums.add(32);\n\
    \        nums.add(42);\n        nums.add(100);\n        nums.add(101);\n     \
    \   nums.add(-1);\n        nums.add(11);\n        nums.add(-1);\n        nums.add(12);\n\
    \        nums.add(13);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\
    \        nums.add(44);\n        nums.add(44);\n        nums.add(44);\n       \
    \ nums.add(44);\n        nums.add(44);\n        nums.add(44);\n\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0m7jr5bv.d(35): Error: Declaration expected, not \''<\''\n/tmp/tmp0m7jr5bv.d(42):
    Error: unexpected ( in declarator\n/tmp/tmp0m7jr5bv.d(42): Error: basic type expected,
    not 1\n/tmp/tmp0m7jr5bv.d(42): Error: found \''1\'' when expecting \'')\''\n/tmp/tmp0m7jr5bv.d(42):
    Error: no identifier for declarator nums.add(int)\n/tmp/tmp0m7jr5bv.d(42): Error:
    semicolon expected following function declaration\n/tmp/tmp0m7jr5bv.d(42): Error:
    Declaration expected, not \'')\''\n/tmp/tmp0m7jr5bv.d(43): Error: unexpected (
    in declarator\n/tmp/tmp0m7jr5bv.d(43): Error: basic type expected, not 10\n/tmp/tmp0m7jr5bv.d(43):
    Error: found \''10\'' when expecting \'')\''\n/tmp/tmp0m7jr5bv.d(43): Error: no
    identifier for declarator nums.add(int)\n/tmp/tmp0m7jr5bv.d(43): Error: semicolon
    expected following function declaration\n/tmp/tmp0m7jr5bv.d(43): Error: Declaration
    expected, not \'')\''\n/tmp/tmp0m7jr5bv.d(44): Error: unexpected ( in declarator\n/tmp/tmp0m7jr5bv.d(44):
    Error: basic type expected, not 11\n/tmp/tmp0m7jr5bv.d(44): Error: found \''11\''
    when expecting \'')\''\n/tmp/tmp0m7jr5bv.d(44): Error: no identifier for declarator
    nums.add(int)\n/tmp/tmp0m7jr5bv.d(44): Error: semicolon expected following function
    declaration\n/tmp/tmp0m7jr5bv.d(44): Error: Declaration expected, not \'')\''\n/tmp/tmp0m7jr5bv.d(45):
    Error: unexpected ( in declarator\n/tmp/tmp0m7jr5bv.d(45): Error: basic type expected,
    not 100\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m7jr5bv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var tempSum = nums[0];\n    var order = 1;\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx1jjt3v2.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1jjt3v2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Arrays.sort(nums);\n    \n    long[] ret = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        ret[i] = nums[i];\n\
    \    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp5dvwbji.d(26): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5dvwbji.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        long n = nums[i];\n        long nSum = 0;\n\
    \        while (n > 0)\n        {\n            nSum += n % 10;\n            n\
    \ /= 10;\n        }\n        result[i] = nSum;\n    }\n    for (int i = 0; i <\
    \ result.length; i++)\n    {\n        result[i] += nums[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for this solution. I am just\
    \ confused why this works.. Can you tell me why this works? Thanks\n<|/ c |>\n\
    <| c |>\nBecause by ordering by their first digit, they're not only ordered by\
    \ sum, but by their position in the original array too.\n<|/ c |>\n<| a dscore=2\
    \ |>\nUsing Kotlin:\n<code>\nfun main(args: Array<String>) {\n    val arr = listOf(1L,\
    \ 11L, -1L, -11L, -12L).sortedWith(compareByDescending { it.digits.reduce { a,\
    \ b -> a + b } })\n    println(arr)\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo22mucqa.d(37): Error: Declaration expected, not \''<\''\n/tmp/tmpo22mucqa.d(43):
    Error: unterminated character constant\n/tmp/tmpo22mucqa.d(56): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpo22mucqa.d(57): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpo22mucqa.d(58): Error: Declaration expected, not \''assert\''\n/tmp/tmpo22mucqa.d(59):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpo22mucqa.d(60): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpo22mucqa.d(61): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpo22mucqa.d(62): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo22mucqa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] results = new long[nums.length];\n    int num;\n    int\
    \ sum = 0;\n    for (int i = 0; i < nums.length; i++)\n    {\n        num = nums[i];\n\
    \        sum += num;\n        results[i] = sum;\n    }\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        int j = 0;\n        long minSum = results[i];\n\
    \        while (j < results.length && results[j] >= minSum) \n        {\n    \
    \        sum += nums[j];\n            minSum = results[j];\n            ++j;\n\
    \        }\n        results[i] = sum;\n    }\n    return results;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsx7tfwju.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // sort nums\n    var sortedList = nums;\n    var sum = 0;\n\
    \    for(var i=0; i< sortedList.length; ++i){\n        sum += sortedList[i];\n\
    \    }\n    var map = new std.typecons.HashedMap();\n    for(var i=0; i< sortedList.length;\
    \ ++i){\n        var curSum = sum - sortedList[i];\n        if(map.containsKey(curSum))\n\
    \        {\n            sortedList[i] = map.get(curSum);\n            map.put(curSum,\
    \ i);\n        }\n        else{\n            map.put(curSum, i);\n        }\n\
    \        sum -= sortedList[i];\n    }\n    return sortedList;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. This is a solution that I already\
    \ have in my head. I am looking for any better solution.\n<|/ c |>\n<| c |>\n\
    I don't think the problem can be solved without an additional data structure.\
    \ Since you cannot change the order of the elements the sums must be the same.\
    \ You could add another map that contains the sums for sorting purposes.\n<|/\
    \ c |>\n<| a dscore=0 tags=algorithm,sorting,c# |>\nI came up with this solution.\
    \ I believe it is optimal and it works on bigger data.\n<code>\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0q4_ioae.d(40): Error: Declaration expected, not \''<\''\n/tmp/tmp0q4_ioae.d(46):
    Error: unterminated character constant\n/tmp/tmp0q4_ioae.d(55): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp0q4_ioae.d(56): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp0q4_ioae.d(57): Error: Declaration expected, not \''assert\''\n/tmp/tmp0q4_ioae.d(58):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp0q4_ioae.d(59): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp0q4_ioae.d(60): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp0q4_ioae.d(61): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0q4_ioae.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long[] result = new long[nums.length];\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbwauzpcn.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwauzpcn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length <= 1) return nums;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7p9c35vc.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p9c35vc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  if (nums == null || nums.length == 0) \n  {\n    return nums;\n\
    \  }\n  \n  std.list.sort(\n    function(long x, long y)\n    {\n      long xs\
    \ = toInt(std.string(x));\n      long ys = toInt(std.string(y));\n      long xd\
    \ = toLong(xs) - toLong(ys);\n      long yd = xs - ys;\n      if (xd > yd)\n \
    \     {\n        return 1;\n      }\n      else if (xd < yd)\n      {\n      \
    \  return -1;\n      }\n      else \n      {\n        return xs < ys;\n      }\n\
    \    },\n    nums\n  );\n  \n  return nums;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jhb7n14.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = nums;\n    int n = nums.length;\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj1fy8pg5.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1fy8pg5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    int i, j;\n    \n  \
    \  for (i = 0; i < nums.length; ++i)\n    {\n        int sum = 0;\n        for\
    \ (j = 0; j < nums.length; ++j)\n        {\n            if (j != i)\n        \
    \    {\n                sum += nums[j];\n            }\n        }\n        \n\
    \        if (sum > 0)\n        {\n            res[i] = sum;\n        }\n     \
    \   else\n        {\n            res[i] = nums[i];\n        }\n    }\n    \n \
    \   return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n  \
    \  assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp694q16er.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    //write your code here\n    long[] result = new long[nums.length];\n\
    \    int c = 0;\n    for(int i=0;i<nums.length;i++){\n        int sum = (int)\
    \ nums[i];\n        if(sum>0){\n            for(int j=i+1;j<nums.length;j++){\n\
    \                int sum2 = (int) nums[j];\n                if(c==sum2){\n   \
    \                 for(int k=0;k<i;k++){\n                        result[k] = nums[k];\n\
    \                    }\n                    for(int l=0;l<i;l++){\n          \
    \              nums[l] = result[l];\n                    }\n                 \
    \   i=0;\n                    c=sum2;\n                }\n            }\n    \
    \    }\n        if(sum<0){\n            for(int j=i+1;j<nums.length;j++){\n  \
    \              int sum2 = (int) nums[j];\n                if(c==sum2){\n     \
    \               for(int k=0;k<i;k++){\n                        result[k] = nums[k];\n\
    \                    }\n                    for(int l=0;l<i;l++){\n          \
    \              nums[l] = result[l];\n                    }\n                 \
    \   i=0;\n                    c=sum2;\n                }\n            }\n    \
    \    }\n    }\n    for(int i=0;i<nums.length;i++){\n        result[i] = nums[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,java,arrays |>\n<|\
    \ c |>\nCan you please explain this code?\n<|/ c |>\n<| c |>\nThe code has three\
    \ loops.\n<|/ c |>\n<| c |>\nI am still trying to understand what it does but\
    \ thanks for your effort\n<|/ c |>\n<| c |>\nThis algorithm doesn't return in\
    \ any defined order.\n<|/ c |>\n<| c |>\nThis isn't an answer. How is this supposed\
    \ to be accepted as an answer?\n<|/ c |>\n<| a dscore=5 |>\nJava 8 streams can\
    \ be used to sort the array:\n<code>\nArrays.sort(nums);\n</code>\n<|/ a tags=sorting,java,arrays\
    \ |>\n<| c |>\nThis is very handy. Thanks.\n<|/ c |>\n<| c |>\nThis answer is\
    \ really nice.\n<|/ c |>\n<| c |>\n`Arrays.sort()` sorts the array in place. Using\
    \ streams doesn't change that. It's also not guaranteed that the array will be\
    \ sorted in the order it appears.\n<|/ c |>\n<| c |>\nAgreed, it sorts the array\
    \ in place.\n<|/ c |>\n<| c |>\nThis doesn't guarante\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy5vyjgot.d(23): Error: C style cast illegal, use cast(int)nums[i]\n/tmp/tmpy5vyjgot.d(26):
    Error: C style cast illegal, use cast(int)nums[j]\n/tmp/tmpy5vyjgot.d(41): Error:
    C style cast illegal, use cast(int)nums[j]\n/tmp/tmpy5vyjgot.d(60): Error: Declaration
    expected, not \''<\''\n/tmp/tmpy5vyjgot.d(72): Error: unterminated character constant\n/tmp/tmpy5vyjgot.d(75):
    Error: unterminated character constant\n/tmp/tmpy5vyjgot.d(81): Error: Declaration
    expected, not \''<\''\n/tmp/tmpy5vyjgot.d(90): Error: unterminated character constant\n/tmp/tmpy5vyjgot.d(90):
    Error: unterminated character constant\n/tmp/tmpy5vyjgot.d(96): Error: unterminated
    character constant\n/tmp/tmpy5vyjgot.d(101): Error: Declaration expected, not
    \''assert\''\n/tmp/tmpy5vyjgot.d(102): Error: Declaration expected, not \''assert\''\n/tmp/tmpy5vyjgot.d(103):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpy5vyjgot.d(104): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpy5vyjgot.d(105): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpy5vyjgot.d(106): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpy5vyjgot.d(107): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5vyjgot.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tint maxSum = 0, maxIdx;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp84bw401m.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp84bw401m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++)\n   \
    \ {\n        sum += nums[i];\n        \n        // Find a similar sum\n      \
    \  for(int j = 0; j < nums.length; j++)\n        {\n            if(i != j && nums[j]\
    \ == sum)\n            {\n                int tempIndex = j;\n               \
    \ while(tempIndex != i && nums[tempIndex] == sum)\n                {\n       \
    \             tempIndex--;\n                }\n                \n            \
    \    nums[j] = nums[i];\n                nums[i] = tempIndex;\n            }\n\
    \        }\n    }\n    \n    return nums;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\npublic class Solution {\n    public int Solution(int[]\
    \ A) {\n        Set<Integer> set = new HashSet<>();\n        Arrays.sort(A);\n\
    \        int j=0;\n        for(int i:A)\n        {\n            set.add(j);\n\
    \            j = j+i;\n        }\n        System.out.println(set);\n        int\
    \ k = 0;\n        for(int i = 1; i < A.length; i++)\n        {\n            int\
    \ sum = 0;\n            while(set.contains(k) && k < A.length)\n            {\n\
    \                sum += A[k];\n                k++;\n            }\n         \
    \   if(sum > 0)\n            {\n                A[A.length - i] = sum;\n     \
    \       }\n        }\n        Arrays.sort(A);\n        \n        return A[0];\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,algorithm |>\n<| a dscore=0 |>\nA solution\
    \ in C++\n<code>\n#include <iostream>\n#include <algorithm>\n#include <vector>\n\
    using namespace std;\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphs36cuz4.d(43): Error: Declaration expected, not \''<\''\n/tmp/tmphs36cuz4.d(50):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmphs36cuz4.d(50): Error: no identifier for declarator
    Arrays.sort(A)\n/tmp/tmphs36cuz4.d(52): Error: Declaration expected, not \''for\''\n/tmp/tmphs36cuz4.d(55):
    Error: no identifier for declarator j\n/tmp/tmphs36cuz4.d(55): Error: Declaration
    expected, not \''=\''\n/tmp/tmphs36cuz4.d(56): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphs36cuz4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] sorted = new long[nums.length];\n\tfor(int i = 0; i < nums.length;\
    \ i++)\n\t{\n\t\tfor(int j = 0; j < nums.length - 1; j++)\n\t\t{\n\t\t\tif(nums[j].digits\
    \ + nums[j + 1].digits > nums[i].digits + nums[i + 1].digits)\n\t\t\t{\n\t\t\t\
    \tsorted[j] = nums[j];\n\t\t\t\tsorted[j + 1] = nums[j + 1];\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn sorted;\n}\n/*\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_rde05bm.d(33): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_rde05bm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int len = nums.length;\n    Arrays.sort(nums);\n    for(int i=0;\
    \ i<len; i++){\n        if(nums[i] != 0){\n            int t = nums[i]%10;\n \
    \           nums[i] /= 10;\n            nums[i] = t*10 + nums[i];\n        }\n\
    \    }\n    return nums;\n}\n</code>\n<|/ a |>\n<| c |>\nIn some languages, integers\
    \ are stored as two's complement, so your solution only works if the input array\
    \ contains non-negative integers (i.e., integers less than the maximum value for\
    \ an unsigned 32-bit integer). For languages that store integers as one's complement,\
    \ this solution will fail.\n<|/ c |>\n<| a dscore=2 tags=arrays,algorithm |>\n\
    I know this question has been answered, but I don't think this is the best solution.\
    \ Though it may be a little slow, it's pretty easy to implement and it runs very\
    \ quickly for me. I'll walk through it so you can understand what it is doing.\n\
    <code>\ndef solution(A):\n    '''\n    Solve the problem and return the new order\
    \ of the array\n    '''\n    # Step one: sort by sum\n    A.sort(key = lambda\
    \ x:sum(str(x)[::-1]))\n    # Step two: rearrange the numbers as they need to\n\
    \    for i in range(len(A)):\n        j = i + 1 # start at i+1, and find where\
    \ the number would go\n        # if the number didn't change, then move it to\
    \ the correct spot\n        if j != i:\n            if j == len(A) - 1: # if the\
    \ last number, just add the number to the end\n                A[j] = A[i]\n \
    \           else:\n                A[j] += A[i] # if the number changes again,\
    \ add the number to the end\n    # Step three: return the new order\n    return\
    \ A\n</code>\n<|/ a |>\n<| c |>\nThe code may run quickly when your input array\
    \ is small, but it will become very slow when your input array is large. An example\
    \ of a large input array is [5,10,15,20]. Your solution will take more than 50\
    \ seconds to execute, whereas the following solution will take under a second.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere is another solution (with JAVA 8).\n<code>\n\
    public class Main {\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjpazhhjl.d(30): Error: Declaration expected, not \''<\''\n/tmp/tmpjpazhhjl.d(33):
    Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(33): Error: unterminated
    character constant\n/tmp/tmpjpazhhjl.d(36): Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(36):
    Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(36): Error: unterminated
    character constant\n/tmp/tmpjpazhhjl.d(39): Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(39):
    Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(41): Error: unterminated
    character constant\n/tmp/tmpjpazhhjl.d(41): Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(47):
    Error: unterminated character constant\n/tmp/tmpjpazhhjl.d(68): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpjpazhhjl.d(69): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpjpazhhjl.d(70): Error: Declaration expected, not \''assert\''\n/tmp/tmpjpazhhjl.d(71):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpjpazhhjl.d(72): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpjpazhhjl.d(73): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpjpazhhjl.d(74): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpazhhjl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] results = new long[nums.length];\n\tfor(int i = 0; i < nums.length;\
    \ i++){\n\t\tint sum = 0;\n\t\tfor(int j = 0; j < nums.length; j++)\n\t\t\tsum\
    \ += nums[j];\n\t\tif(sum > 0){\n\t\t\tresults[i] = sum;\n\t\t\tsum = 0;\n\t\t\
    \tfor(int j = 0; j < nums.length; j++)\n\t\t\t\tsum += nums[j];\n\t\t}\n\t\telse{\n\
    \t\t\tresults[i] = -sum;\n\t\t}\n\t}\n\treturn results;\n}\n/*\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc1tbp0o1.d(36): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpc1tbp0o1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int N = nums.length;\n    if (N == 0) return nums;\n    \n  \
    \  long[] first = new long[N];\n    long[] second = new long[N];\n    long[] result\
    \ = new long[N];\n    int firstIndex = 0;\n    int secondIndex = 0;\n    int thirdIndex\
    \ = 0;\n    int thirdIndex2 = 0;\n    int thirdIndex3 = 0;\n    int thirdIndex4\
    \ = 0;\n    \n    long sum;\n    int digitSum;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8uo908vj.d(34): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8uo908vj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    int index = 0;\n   \
    \ int nums_size = nums.length;\n    int i, j, sum, carry = 0;\n    for (i = 0;\
    \ i < nums_size; i++) {\n        sum = nums[i] + carry;\n        carry = 0;\n\
    \        for (j = 0; j < nums_size; j++) {\n            if (index == j) {\n  \
    \              res[index++] = sum;\n                break;\n            } else\
    \ if (sum < nums[j]) {\n                carry = 1;\n            } else {\n   \
    \             sum -= nums[j];\n            }\n        }\n    }\n    return res;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting |>\n<| a tags=algorithm,sorting dscore=0\
    \ |>\n<code>\nfunction sort(a, b) {\n    var arr = [];\n    for(var i=0; i<a.length;\
    \ i++){\n        var val = a[i] - b[i];\n        if(val == 0){\n            arr.push(a[i]);\n\
    \            arr.push(b[i]);\n        }\n        else{\n            arr.push(a[i]);\n\
    \            arr.push(b[i]);\n            arr.push(val);\n        }\n    }\n \
    \   arr.sort(function(a,b){return a-b});\n    arr.pop();\n    return arr;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 tags=algorithm,sorting |>\nSort\
    \ array from L to R \n1. Create a array \n2. find difference of number from each\
    \ other \n3. place array in ascending order \n<code>\n#include <stdio.h>\n#include\
    \ <stdlib.h>\n#include <time.h>\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa46jv7_9.d(39): Error: Declaration expected, not \''<\''\n/tmp/tmpa46jv7_9.d(45):
    Error: Declaration expected, not \''for\''\n/tmp/tmpa46jv7_9.d(45): Error: no
    identifier for declarator i\n/tmp/tmpa46jv7_9.d(45): Error: Declaration expected,
    not \''<\''\n/tmp/tmpa46jv7_9.d(45): Error: no identifier for declarator i\n/tmp/tmpa46jv7_9.d(45):
    Error: Declaration expected, not \''++\''\n/tmp/tmpa46jv7_9.d(47): Error: Declaration
    expected, not \''if\''\n/tmp/tmpa46jv7_9.d(49): Error: function declaration without
    return type. (Note that constructors are always named \''this\'')\n/tmp/tmpa46jv7_9.d(49):
    Error: no identifier for declarator arr.push(b[i])\n/tmp/tmpa46jv7_9.d(50): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa46jv7_9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    List<int> digits = nums.map(d => d % 10);\n    Map<long, int>\
    \ sumToDigits = new Map<long, int>();\n    for(auto i : digits) \n    {\n    \
    \    int prev = sumToDigits.get(sumToDigits.key());\n        sumToDigits.put(i,\
    \ prev + 1);\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnwd10r98.d(19): Error: found \''>\'' when expecting \''.\''
    following int\n/tmp/tmpnwd10r98.d(20): Error: found \'',\'' when expecting \''.\''
    following long\n/tmp/tmpnwd10r98.d(20): Error: found \''int\'' when expecting
    identifier following \''long.\''\n/tmp/tmpnwd10r98.d(20): Error: found \''>\''
    when expecting \'';\'' following statement\n/tmp/tmpnwd10r98.d(20): Error: found
    \'',\'' when expecting \''.\'' following long\n/tmp/tmpnwd10r98.d(20): Error:
    found \''int\'' when expecting identifier following \''long.\''\n/tmp/tmpnwd10r98.d(20):
    Error: found \''>\'' when expecting \'';\'' following statement\n/tmp/tmpnwd10r98.d(20):
    Error: expression expected, not \'')\''\n/tmp/tmpnwd10r98.d(20): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpnwd10r98.d(21): Error: found \''for\''
    when expecting \'';\'' following statement\n/tmp/tmpnwd10r98.d(21): Error: found
    \'':\'' when expecting \'')\''\n/tmp/tmpnwd10r98.d(21): Error: missing { ... }
    for function literal\n/tmp/tmpnwd10r98.d(21): Error: found \''digits\'' when expecting
    \'';\'' following statement\n/tmp/tmpnwd10r98.d(21): Error: found \'')\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwd10r98.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sortedArray = new long[nums.length];\n    int count =\
    \ 0;\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpomjf825b.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpomjf825b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int digits = 0;\n    for(int i = 0; i < nums.length; i++) digits\
    \ += nums[i];\n    Arrays.sort(nums, (a, b) -> {\n        if((long)a - (long)b\
    \ != 0) return (int)(a) - (int)b;\n        return (int)a - (int)b;\n    });\n\
    \    long[] res = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++) res[nums[i]-digits] = i;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp679zn_12.d(21): Error: expression expected, not \''>\''\n/tmp/tmp679zn_12.d(21):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmp679zn_12.d(22): Error: expression
    expected, not \''if\''\n/tmp/tmp679zn_12.d(22): Error: C style cast illegal, use
    cast(long)a\n/tmp/tmp679zn_12.d(22): Error: C style cast illegal, use cast(long)b\n/tmp/tmp679zn_12.d(22):
    Error: found \''return\'' when expecting \'',\''\n/tmp/tmp679zn_12.d(22): Error:
    C style cast illegal, use cast(int)a\n/tmp/tmp679zn_12.d(22): Error: C style cast
    illegal, use cast(int)b\n/tmp/tmp679zn_12.d(22): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmp679zn_12.d(23): Error: expression expected, not \''return\''\n/tmp/tmp679zn_12.d(23):
    Error: found \'')\'' when expecting \''.\'' following int\n/tmp/tmp679zn_12.d(23):
    Error: C style cast illegal, use cast(int)b\n/tmp/tmp679zn_12.d(23): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmp679zn_12.d(24): Error: expression expected,
    not \''}\''\n/tmp/tmp679zn_12.d(24): Error: found \'';\'' when expecting \'',\''\n/tmp/tmp679zn_12.d(25):
    Error: found \''[\'' when expecting \''.\'' following long\n/tmp/tmp679zn_12.d(25):
    Error: found \'']\'' when expecting identifier following \''long.\''\n/tmp/tmp679zn_12.d(25):
    Error: found \''res\'' when expecting \'',\''\n/tmp/tmp679zn_12.d(25): Error:
    expression expected, not \''=\''\n/tmp/tmp679zn_12.d(25): Error: found \''new\''
    when expecting \'',\''\n/tmp/tmp679zn_12.d(25): Error: found \''[\'' when expecting
    \''.\'' following long\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp679zn_12.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    long total = 0;\n  \
    \  int i;\n    for(i = 0; i < nums.length; i++)\n    {\n        total += nums[i];\n\
    \        res[i] = total;\n    }\n    res = res.clone();\n    std.sort(res, less);\n\
    \    return res;\n}\n</code>\n<|/ a |>\n<| c |>\nThe \"long[] res = new long[nums.length];\"\
    \ line can be changed to \"int[] res = new int[nums.length];\" without changing\
    \ the rest of the code.\n<|/ c |>\n<| a |>\nThis is very similar to the other\
    \ answers, but a little more flexible:\n<code>\nimport std.algorithm; // sort\n\
    import std.array; // array\nimport std.math; // intpow\nimport std.random; //\
    \ random\nimport std.typecons // int\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxljbuz_0.d(31): Error: Declaration expected, not \''<\''\n/tmp/tmpxljbuz_0.d(44):
    Error: \'';\'' expected\n/tmp/tmpxljbuz_0.d(45): Error: Declaration expected,
    not \''{\''\n/tmp/tmpxljbuz_0.d(48): Error: Declaration expected, not \''assert\''\n/tmp/tmpxljbuz_0.d(49):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpxljbuz_0.d(50): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpxljbuz_0.d(51): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpxljbuz_0.d(52): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpxljbuz_0.d(53): Error: Declaration expected, not \''assert\''\n/tmp/tmpxljbuz_0.d(54):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxljbuz_0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int sum;\n    long[] sorted;\n    sort(nums, nums.length);\n\
    \    sum = 0;\n    sorted = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        sum += nums[i];\n        sorted[i] = sum;\n    }\n    return\
    \ sorted;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_2nqykn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Arrays.sort(nums);\n    long sum = 0;\n    for(int i = 0; i <\
    \ nums.length; i++)\n    {\n        sum += nums[i];\n    }\n    int i = 0;\n \
    \   while(i<nums.length)\n    {\n        if(nums[i] - sum >= 0)\n        {\n \
    \           swap(nums,i,nums.length-1);\n            i--;\n        }\n       \
    \ else\n        {\n            swap(nums,i,i);\n            i++;\n        }\n\
    \    }\n    return nums;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    import java.util.*;\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb7frpnmy.d(41): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7frpnmy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int i;\n    long sum = 0;\n    int len = nums.length;\n    long[]\
    \ output = new long[len];\n    for(i = 0; i < len; i++)\n    {\n        sum +=\
    \ nums[i];\n    }\n    int start = 0;\n    for(i = 0; i < len; i++)\n    {\n \
    \       while(sum < 0)\n        {\n            sum += nums[start];\n         \
    \   start++;\n        }\n        output[i] = nums[start];\n        start++;\n\
    \    }\n    return output;\n}\n</code>\n<|/ a |>\n<| a tags=c#,sorting,arrays\
    \ |>\n<code>\nusing System;\nusing System.Collections;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgi99ln5d.d(40): Error: Declaration expected, not \''<\''\n/tmp/tmpgi99ln5d.d(45):
    Error: semicolon expected, not \''.\''\n/tmp/tmpgi99ln5d.d(45): Error: no identifier
    for declarator .Collections\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgi99ln5d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // Your code goes here\n    int[] map = new int[32];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        for(int j\
    \ = 0; j < nums.length; j++)\n        {\n            if(i == j)\n            \
    \    continue;\n            sum += nums[j];\n        }\n        map[sum] = i;\n\
    \    }\n    long[] sorted = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        sorted[i] = map[nums[i]];\n    }\n    return sorted;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nI like this one the best! Very\
    \ readable and easy to understand :)\n<|/ c |>\n<| a dscore=1 |>\nA simpler, not\
    \ so efficient solution could be\n<code>\npublic static int[] orderBySum(int[]\
    \ input) {\n    int min = Integer.MAX_VALUE;\n    int max = Integer.MIN_VALUE;\n\
    \    int sum = 0;\nunittest\n{\n    alias candidate = order_by_points;\n\n   \
    \ assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwboxo_qg.d(39): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwboxo_qg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Arrays.sort(nums);\n    long sum = 0;\n    for(int i = 0; i<\
    \ nums.length; i++)\n    {\n        sum = sum + nums[i];\n    }\n    int pos =\
    \ -1;\n    int end = nums.length - 1;\n    while(pos != end)\n    {\n        sum\
    \ = sum + nums[pos];\n        int temp = pos;\n        int next = 0;\n       \
    \ pos = end + 1;\n        while(next != pos)\n        {\n            if(sum >\
    \ 0)\n            {\n                sum = sum - nums[next];\n            }\n\
    \            else\n            {\n                sum = sum + nums[next];\n  \
    \          }\n            next = next + 1;\n        }\n        if(sum > 0)\n \
    \       {\n            nums[temp] = nums[temp] - nums[pos];\n            nums[pos]\
    \ = 0;\n        }\n        else\n        {\n            nums[pos] = nums[pos]\
    \ + nums[temp];\n            nums[temp] = 0;\n        }\n    }\n    return nums;\n\
    }\n</code>\n<|/ a tags=c++,sorting |>\n<| a tags=c++,sorting |>\n<code>\n #include\
    \ <iostream>\n #include <stdio.h>\n #include <conio.h>\n #include <vector>\n #include\
    \ <algorithm>\n #include <numeric>\n using namespace std;\n #define SWAP(a,b)\
    \ { register int c = a; a=b; b=c; }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu2h27_vq.d(58): Error: Declaration expected, not \''<\''\n/tmp/tmpu2h27_vq.d(69):
    Error: Declaration expected, not \''#\''\n/tmp/tmpu2h27_vq.d(69): Error: no identifier
    for declarator a\n/tmp/tmpu2h27_vq.d(69): Error: Declaration expected, not \''=\''\n/tmp/tmpu2h27_vq.d(69):
    Error: no identifier for declarator b\n/tmp/tmpu2h27_vq.d(69): Error: Declaration
    expected, not \''=\''\n/tmp/tmpu2h27_vq.d(69): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2h27_vq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    /*\n        \n        Sort:\n            1. Sum each number's\
    \ digits, store them in a vector\n            2. Sort this vector in ascending\
    \ order\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkvl0kdd3.d(19): Error: unterminated /* */ comment\n/tmp/tmpkvl0kdd3.d(35):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkvl0kdd3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.length == 0)\n        return nums;\n    \n    long[]\
    \ sorted = new long[nums.length];\n    long[] order = new long[nums.length];\n\
    \    long cur = 0;\n    for(int i = 0; i < nums.length; ++i)\n    {\n        order[i]\
    \ = cur;\n        cur += nums[i];\n    }\n    \n    Arrays.sort(order);\n    for(int\
    \ i = 0; i < nums.length; ++i)\n        sorted[order[i]] = nums[i];\n    \n  \
    \  return sorted;\n}\n</code>\n<|/ a tags=java,arrays,sorting,c# |>\n<| a tags=java,arrays,sorting,c#\
    \ |>\nI came up with the following solution in Java using Kahan Sums Algorithm.\
    \ It is based on quick sort.\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy0ee9w8o.d(37): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0ee9w8o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int N = nums.length;\n    long sum = 0;\n    long[] sorted_nums\
    \ = new long[N];\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxy7ov50e.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxy7ov50e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int N=nums.length;\n    long[] result=new long[N];\n    int i=0;\n\
    \    for (int j=0;j<N;j++)\n    {\n        int j2=0;\n        while(i<N)\n   \
    \     {\n            if(nums[i]>0)\n            {\n                nums[j2]=nums[i];\n\
    \                i++;\n            }\n            else\n            {\n      \
    \          nums[j2]=nums[i-1];\n                j--;\n            }\n        \
    \    j2++;\n        }\n        result[j]=nums[j2];\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe function below should do\
    \ the job:\n<code>\npublic class Solution {\n    public static void main(String[]\
    \ args) {\n        List<Integer> nums = Arrays.asList(13, -9, -9, -12, -3);\n\
    \        nums = orderByDigits(nums);\n        System.out.println(nums);\n    }\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv922mifs.d(43): Error: Declaration expected, not \''<\''\n/tmp/tmpv922mifs.d(51):
    Error: no identifier for declarator nums\n/tmp/tmpv922mifs.d(51): Error: Declaration
    expected, not \''=\''\n/tmp/tmpv922mifs.d(52): Error: identifier expected following
    \''.\'' instead of \''out\''\n/tmp/tmpv922mifs.d(52): Error: no identifier for
    declarator System\n/tmp/tmpv922mifs.d(52): Error: Declaration expected, not \''out\''\n/tmp/tmpv922mifs.d(53):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv922mifs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted = std.array;\n    long sum = 0;\n    for(uint i\
    \ = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        sorted.insertAt(sum,\
    \ i);\n    }\n    return sorted;\n}\n</code>\n<|/ a tags=sorting,arrays,java,algorithm\
    \ |>\n<| c |>\nThis assumes that all numbers are positive.\n<|/ c |>\n<| c |>\n\
    The original question said \"The array of integers is assumed to be positive\"\
    .\n<|/ c |>\n<| c |>\nYes and no.  The \"array of integers is assumed to be positive\"\
    \ is implied by \"If the sum of their digits is positive\".  To get the sum of\
    \ their digits, you need to subtract the minimum (negative) value, i.e. `-10`\
    \ from each number.  I suspect that the question does have a point with the 'sort\
    \ by digits' part.  It would be better if this was clarified and explained in\
    \ the answer.\n<|/ c |>\n<| c |>\nI agree. I've added a note about it now.\n<|/\
    \ c |>\n<| c |>\nThis is incorrect. `order_by_points([1,11,0,-11,0,-12])` returns\
    \ `[-11L,-11L,-11L,-12L,-12L,-12L]` instead of `[-11L,-11L,-12L,-12L,-12L,-11L]`.\
    \ You have to sort `nums` instead of `sorted`.\n<|/ c |>\n<| a tags=sorting,arrays,java,algorithm\
    \ |>\nThis is how I solved it in Python:\n<code>\ndef order_by_points(points):\n\
    \    digits = []\n    for point in points:\n        digits.append(int(point))\n\
    \    digits.sort(reverse=True)\n    return points\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI used this for Java and was pretty happy with it. Thanks!\n<|/ c |>\n\
    <| a tags=sorting,arrays,java,algorithm |>\n<code>\n public static void main(String[]\
    \ args) {\n            ArrayList<Integer> points = new ArrayList<Integer>();\n\
    \            points.add(1L);\n            points.add(11L);\n            points.add(-1L);\n\
    \            points.add(-11L);\n            points.add(-12L);\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcyad7lki.d(28): Error: Declaration expected, not \''<\''\n/tmp/tmpcyad7lki.d(37):
    Error: unterminated character constant\n/tmp/tmpcyad7lki.d(37): Error: unterminated
    character constant\n/tmp/tmpcyad7lki.d(40): Error: unterminated character constant\n/tmp/tmpcyad7lki.d(63):
    Error: unexpected ( in declarator\n/tmp/tmpcyad7lki.d(63): Error: basic type expected,
    not 1L\n/tmp/tmpcyad7lki.d(63): Error: found \''1L\'' when expecting \'')\''\n/tmp/tmpcyad7lki.d(63):
    Error: no identifier for declarator points.add(int)\n/tmp/tmpcyad7lki.d(63): Error:
    semicolon expected following function declaration\n/tmp/tmpcyad7lki.d(63): Error:
    Declaration expected, not \'')\''\n/tmp/tmpcyad7lki.d(64): Error: unexpected (
    in declarator\n/tmp/tmpcyad7lki.d(64): Error: basic type expected, not 11L\n/tmp/tmpcyad7lki.d(64):
    Error: found \''11L\'' when expecting \'')\''\n/tmp/tmpcyad7lki.d(64): Error:
    no identifier for declarator points.add(int)\n/tmp/tmpcyad7lki.d(64): Error: semicolon
    expected following function declaration\n/tmp/tmpcyad7lki.d(64): Error: Declaration
    expected, not \'')\''\n/tmp/tmpcyad7lki.d(65): Error: unexpected ( in declarator\n/tmp/tmpcyad7lki.d(65):
    Error: basic type expected, not -\n/tmp/tmpcyad7lki.d(65): Error: found \''-\''
    when expecting \'')\''\n/tmp/tmpcyad7lki.d(65): Error: no identifier for declarator
    points.add(int)\n/tmp/tmpcyad7lki.d(65): Error: semicolon expected following function
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyad7lki.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long[] result = new long[nums.length];\n  for(int i=0, j=0; i<\
    \ nums.length; i++)\n  {\n    int cur = nums[i];\n    while (j>0 && cur>0)\n \
    \   {\n      result[j--] = cur;\n      cur = nums[i+1];\n    }\n    if (cur >\
    \ 0)\n      result[j++] = cur;\n  }\n  return result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,c++,sorting dscore=1 |>\nThe idea is to make a new array,\
    \ where you store the sum of the first digit of each number in order. \nThe algorithm\
    \ is simple:\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv37xxxu1.d(33): Error: Declaration expected, not \''<\''\n/tmp/tmpv37xxxu1.d(42):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpv37xxxu1.d(43): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpv37xxxu1.d(44): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpv37xxxu1.d(45): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpv37xxxu1.d(46): Error: Declaration expected, not \''assert\''\n/tmp/tmpv37xxxu1.d(47):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpv37xxxu1.d(48): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv37xxxu1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int sum = 0; \n    \n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long digit = nums[i] % 10;\n        sum += digit;\n        if\
    \ (sum == 0)\n            \n            return nums;\n    }\n    \n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long digit = nums[i] % 10;\n  \
    \      sum -= digit;\n        if (sum < 0)\n            \n            return nums;\n\
    \    }\n    \n    int index = 0;\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        long digit = nums[i] % 10;\n        sum -= digit;\n        if\
    \ (sum < 0)\n        {\n            sum += 10;\n            index = i;\n     \
    \   }\n    }\n    \n    return nums;\n}\n</code>\n<|/ a tags=arrays,c#,sorting\
    \ dscore=0 |>\n<| c |>\nWhy have you posted this answer if it doesn't actually\
    \ solve the OP's problem?\n<|/ c |>\n<| c |>\nThis answer is just a simplification\
    \ of what they were doing. They were trying to sort an array of ints descending\
    \ from least to greatest by taking the sum of each int in the array and putting\
    \ it into the correct position when they would realize the sum was the only thing\
    \ that could move the numbers down in descending order. This answer solves their\
    \ problem and shows they know how to do that.\n<|/ c |>\n<| c |>\nIf they don't\
    \ get it that they have to get the sum of every number in the array to sort the\
    \ array, then how can they sort it in ascending order?\n<|/ c |>\n<| a tags=arrays,c#,sorting\
    \ |>\nYou can use a custom IComparer and use LINQ to sort:\n<code>\npublic class\
    \ NumericSort : IComparer<long>\n{\n    public int Compare(long x, long y)\n \
    \   {\n        var i1 = x - y;\n        var i2 = y - x;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiujd11_p.d(53): Error: Declaration expected, not \''<\''\n/tmp/tmpiujd11_p.d(56):
    Error: unterminated character constant\n/tmp/tmpiujd11_p.d(56): Error: unterminated
    character constant\n/tmp/tmpiujd11_p.d(62): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiujd11_p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums == null || nums.isEmpty) return nums;\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i]/10;\n    }\n\
    \    Arrays.sort(sums);\n    for(int i = 0; i < nums.length; i++)\n    {\n   \
    \     result[i] = sums[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is not the answer. He asked about summing digits of numbers, not\
    \ ordering.\n<|/ c |>\n<| c |>\n: Yes, I agree. I was just giving him an alternative\
    \ solution because I thought it might be interesting to consider sorting an array\
    \ of integers in ascending order with respect to the sum of the digits (as in\
    \ \"order them according to their sum of their digits\")\n<|/ c |>\n<| a tags=java\
    \ dscore=1 |>\nHere's a O(n) solution in python:\n<code>\ndef sort_numbers(n):\n\
    \    sorted_numbers = []\n    total = 0\n    i = 0\n    while i < len(n):\n  \
    \      total += n[i]\n        i += 1\n    sorted_numbers.append(total)\n    i\
    \ = 0\n    while i < len(n):\n        total = total + n[i]\n        i += 1\n \
    \       if total < sorted_numbers[-1]:\n            sorted_numbers.append(total)\n\
    \    return sorted_numbers\n</code>\nHere's a Java solution\n<code>\npublic static\
    \ long[] sortNumbers(long[] nums) {\n    long[] sorted_numbers = new long[nums.length];\n\
    \    int sum = 0;\n    int i = 0;\n    while (i < nums.length) {\n        sum\
    \ += nums[i++];\n    }\n    int j = 0;\n    while (j < sorted_numbers.length)\
    \ {\n        sorted_numbers[j++] = sum;\n        sum = 0;\n        int k = i;\n\
    \        while (k < nums.length && sum + nums[k] < sorted_numbers[j]) {\n    \
    \        sum += nums[k++];\n        }\n    }\n    return sorted_numbers;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nI like this solution the best.  Although it's not\
    \ Java.\n<|/ c |>\n<| c |>\nI'm pretty sure it's O(N), but it's definitely not\
    \ O(N^2).\n<|/ c |>\n<| a tags=java |>\nHere is another O(N) solution in Javascript\
    \ (since that's what I use). It's not particularly efficient, especially in terms\
    \ of speed (O(N^2)), but it does its job.\n<code>\nfunction sortNumbers(nums)\
    \ {\n    var sortedNums = [];\n    var numberSum = 0;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzvzq515k.d(33): Error: Declaration expected, not \''<\''\n/tmp/tmpzvzq515k.d(42):
    Error: unterminated character constant\n/tmp/tmpzvzq515k.d(60): Error: unterminated
    character constant\n/tmp/tmpzvzq515k.d(66): Error: Declaration expected, not \''while\''\n/tmp/tmpzvzq515k.d(68):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvzq515k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if( nums.isEmpty() )\n        return nums;\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7qbgkgzu.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qbgkgzu.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] nums2 = new long[nums.length];\n    for(int i = 0; i <\
    \ nums.length; i++) {\n        nums2[i] = nums[i];\n    }\n    Arrays.sort(nums2);\n\
    \    return nums2;\n}\n</code>\n<|/ a tags=algorithm,sorting |>\n<| a dscore=2\
    \ |>\n<code>\nfunction sort(array){\n   let newArray=[];\n   let temp;\n   for\
    \ (let i=0; i< array.length; i++){\n      temp= array[i]+array[i+1];\n      newArray.push(temp);\n\
    \   }\n   newArray=newArray.sort((a,b)=>a-b);\n   let index1=0;\n   let index2=newArray.length-1;\n\
    \   for(let i=0;i<newArray.length;i++){\n      while(index2!=0&&newArray[index2]>newArray[index1]){\n\
    \         let temp=newArray[index2];\n         newArray[index2]=newArray[index1];\n\
    \         newArray[index1]=temp;\n         index1++;\n         index2--;\n   \
    \   }\n   }\n   return newArray;\n}\n</code>\n<|/ a tags=algorithm,sorting |>\n\
    <| a tags=algorithm,sorting |>\nThis is my solution, inspired by Rishabh Maheshwari's\
    \ answer, but without having to use recursion. I just want to share the code:\n\
    <code>\nprivate static void sortNumbers(int[] numbers) {\n    int[] sortedNumbers\
    \ = new int[numbers.length];\n    int index = 0;\n    int sum = 0;\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplb79td1h.d(26): Error: Declaration expected, not \''<\''\n/tmp/tmplb79td1h.d(33):
    Error: Declaration expected, not \''for\''\n/tmp/tmplb79td1h.d(33): Error: no
    identifier for declarator i\n/tmp/tmplb79td1h.d(33): Error: Declaration expected,
    not \''<\''\n/tmp/tmplb79td1h.d(33): Error: no identifier for declarator i\n/tmp/tmplb79td1h.d(33):
    Error: Declaration expected, not \''++\''\n/tmp/tmplb79td1h.d(35): Error: function
    declaration without return type. (Note that constructors are always named \''this\'')\n/tmp/tmplb79td1h.d(35):
    Error: no identifier for declarator newArray.push(temp)\n/tmp/tmplb79td1h.d(36):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplb79td1h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] numsAsIntArray = nums.toIntArray();\n    Arrays.sort(numsAsIntArray);\n\
    \    long[] result = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++)\n        result[i] = numsAsIntArray[i];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphk28_4i_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var ordered = new long[nums.Length];\n    var prevSum = long.MinValue;\n\
    \    var currSum = long.MinValue;\n    var currIndex = long.MinValue;\n    for\
    \ (var i = 0; i < nums.Length; i++) \n    {\n        var currentNum = nums[i];\n\
    \        currSum = currentNum + currSum;\n        if (currSum != prevSum)\n  \
    \      {\n            ordered[currIndex] = prevSum;\n            currSum = currentNum;\n\
    \        }\n        else\n        {\n            currIndex++;\n        }\n   \
    \     prevSum = currSum;\n    }\n    \n    Array.Reverse(ordered);\n    \n   \
    \ return ordered;\n}\n</code>\n<|/ a |>\n<| c |>\nI added some comments to the\
    \ code to explain what it does\n<|/ c |>\n<| c |>\nThanks, you answer is a better\
    \ one, but I used another one, which you answered. I will upvote your answer once\
    \ I get enough reputation.\n<|/ c |>\n<| c |>\nThanks I agree with you that this\
    \ answer is better and more understandable. However, the problem was about understanding\
    \ the problem and how to solve it, so I felt that the other answer was not too\
    \ helpful to understand. Also, I am glad that you accepted the other answer. I\
    \ also upvoted his answer as well.\n<|/ c |>\n<| c |>\nThank you for upvoting\
    \ the answer, I appreciate that.\n<|/ c |>\n<| a |>\nThis code should do the job:\n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp_duv1rt.d(43): Error: Declaration expected, not \''<\''\n/tmp/tmpp_duv1rt.d(61):
    Error: semicolon expected, not \''.\''\n/tmp/tmpp_duv1rt.d(61): Error: no identifier
    for declarator .Collections.Generic\n/tmp/tmpp_duv1rt.d(62): Error: semicolon
    expected, not \''.\''\n/tmp/tmpp_duv1rt.d(62): Error: no identifier for declarator
    .Linq\n/tmp/tmpp_duv1rt.d(63): Error: semicolon expected, not \''.\''\n/tmp/tmpp_duv1rt.d(63):
    Error: no identifier for declarator .Text\n/tmp/tmpp_duv1rt.d(64): Error: semicolon
    expected, not \''.\''\n/tmp/tmpp_duv1rt.d(64): Error: no identifier for declarator
    .Threading.Tasks\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_duv1rt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long numsLen = nums.length;\n    if (numsLen == 0) return nums;\n\
    \    \n    long[] numsCopy = new long[numsLen];\n    \n    for (int i = 0; i <\
    \ numsLen; i++) {\n        numsCopy[i] = nums[i];\n    }\n    \n    numsCopy =\
    \ sort(numsCopy);\n    \n    for (int i = 0; i < numsLen; i++) {\n        nums[i]\
    \ = numsCopy[i];\n    }\n    \n    return nums;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8p6grwi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length < 2)\n        return nums;\n    int[] points\
    \ = new int[nums.length];\n    std.algorithm.quickSort(nums, points);\n    std.typecons.Int\
    \ sum = new std.typecons.Int(0);\n    for (long i : nums)\n    {\n        int\
    \ digit = std.math.toDigit(i);\n        sum += digit;\n    }\n    long lastSum\
    \ = 0;\n    long lastIndex = -1;\n    for (long i : nums)\n    {\n        int\
    \ digit = std.math.toDigit(i);\n        long sum = sum.plus(digit);\n        if\
    \ (sum.equal(lastSum))\n        {\n            lastIndex = i;\n        }\n   \
    \ }\n    std.sort(nums, points);\n    return std.List.sublist(nums, 0, lastIndex);\n\
    }\n</code>\n<|/ a tags=c++,sorting,algorithm,sublist |>\n<| a dscore=0 |>\nTo\
    \ sort a sublist using the criteria of your question (ascending order according\
    \ to the sum of their digits):\n<code>\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxm_9mc9r.d(24): Error: semicolon expected, not \'':\''\n/tmp/tmpxm_9mc9r.d(24):
    Error: expression expected, not \'':\''\n/tmp/tmpxm_9mc9r.d(24): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpxm_9mc9r.d(31):
    Error: semicolon expected, not \'':\''\n/tmp/tmpxm_9mc9r.d(31): Error: expression
    expected, not \'':\''\n/tmp/tmpxm_9mc9r.d(31): Error: found \''nums\'' when expecting
    \'';\'' following for condition\n/tmp/tmpxm_9mc9r.d(43): Error: Declaration expected,
    not \''<\''\n/tmp/tmpxm_9mc9r.d(52): Error: Declaration expected, not \''assert\''\n/tmp/tmpxm_9mc9r.d(53):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpxm_9mc9r.d(54): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpxm_9mc9r.d(55): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpxm_9mc9r.d(56): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpxm_9mc9r.d(57): Error: Declaration expected, not \''assert\''\n/tmp/tmpxm_9mc9r.d(58):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm_9mc9r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] arr = nums;\n    arr := std.array.sort(arr, (left, right)\
    \ => \n    {\n        var sum = left + right;\n        if (sum < 0)\n        {\n\
    \            var tmp = sum;\n            sum := sum + 10;\n            sum :=\
    \ sum - tmp;\n        }\n        return sum;\n    });\n    return arr;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 tags=c# |>\nHere is a solution using Linq:\n\
    <code>\nusing System;\nusing System.Linq;\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnzozxl8t.d(20): Error: found \''=\'' instead of statement\n/tmp/tmpnzozxl8t.d(26):
    Error: found \''=\'' instead of statement\n/tmp/tmpnzozxl8t.d(27): Error: found
    \''=\'' instead of statement\n/tmp/tmpnzozxl8t.d(30): Error: Declaration expected,
    not \'')\''\n/tmp/tmpnzozxl8t.d(31): Error: Declaration expected, not \''return\''\n/tmp/tmpnzozxl8t.d(32):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzozxl8t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int n = nums.length;\n    int m = std.math.max(std.math.reduce(nums,\
    \ 0, (acc, i) => acc + i), 0);\n    int index = std.math.min(std.math.ceil(std.math.log2(m)),\
    \ n - 1);\n    \n    long[] result = new long[n];\n    \n    for (int i = 0; i\
    \ < n; i++)\n        result[i] = nums[index];\n    \n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,big-o,java |>\n<| a |>\nHere's a solution written\
    \ in Java, which is O(nlogn).\n<code>\npublic static int sortByDigits(int[] arr){\n\
    \    int sum = 0;\n    int digit = 0;\n    for(int i : arr){\n        sum += i;\n\
    \        digit += (int) Math.pow(10, (sum - i) / 10.0);\n    }\n    int temp =\
    \ arr[arr.length - 1];\n    arr[arr.length - 1] = 0;\n    int pos = 0;\n    for(int\
    \ i : arr){\n        if(i != 0 && digit > 10){\n            pos += 1;\n      \
    \      temp = arr[pos - 1];\n            arr[pos - 1] = 0;\n        }\n      \
    \  if(digit > 10)\n            arr[pos] = i;\n        else\n            arr[pos]\
    \ += i;\n        digit--;\n    }\n    arr[pos] = temp;\n    return pos;\n}\n</code>\n\
    <|/ a tags=sorting,algorithm,big-o,java dscore=1 |>\n<| a dscore=1 |>\nHere you\
    \ go. I implemented it with java8. \n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqeygxpvr.d(30): Error: Declaration expected, not \''<\''\n/tmp/tmpqeygxpvr.d(33):
    Error: unterminated character constant\n/tmp/tmpqeygxpvr.d(38): Error: Declaration
    expected, not \''for\''\n/tmp/tmpqeygxpvr.d(40): Error: no identifier for declarator
    digit\n/tmp/tmpqeygxpvr.d(40): Error: Declaration expected, not \''+=\''\n/tmp/tmpqeygxpvr.d(41):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqeygxpvr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] ans = new long[nums.length];\n\t\n\tint pos = 0;\n\t\n\t\
    for(int i = 0; i < nums.length; ++i)\n\t{\n\t\tans[pos++] = nums[i];\n\t}\n\t\n\
    \tfor(int i = 0; i < nums.length; ++i)\n\t{\n\t\tint curSum = 0;\n\t\t\n\t\tfor(int\
    \ j = 0; j < nums.length; ++j)\n\t\t{\n\t\t\tif(j != i)\n\t\t\t{\n\t\t\t\tcurSum\
    \ += nums[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tint minSum = curSum;\n\t\t\n\t\tfor(int\
    \ j = 0; j < nums.length; ++j)\n\t\t{\n\t\t\tif(j != i)\n\t\t\t{\n\t\t\t\tint\
    \ curSum = 0;\n\t\t\t\t\n\t\t\t\tfor(int k = 0; k < nums.length; ++k)\n\t\t\t\t\
    {\n\t\t\t\t\tif(k != j)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurSum += nums[k];\n\t\t\t\t\
    \t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(curSum < minSum)\n\t\t\t\t{\n\t\t\t\t\tminSum\
    \ = curSum;\n\t\t\t\t\tpos = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tint temp\
    \ = ans[pos];\n\t\tans[pos] = nums[pos];\n\t\tnums[pos] = temp;\n\t}\n\t\n\treturn\
    \ ans;\n}\n//endregion\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9j1h5lwq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long[] result = new long[nums.length];\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbwauzpcn.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwauzpcn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int sum = 0;\n  for(int i=0;i<nums.length;i++)\n  {\n    sum +=\
    \ nums[i];\n  }\n  \n  long[] result = new long[nums.length];\n  \n  int index\
    \ = 0;\n  int maxSum = sum;\n  for(int i=0;i<nums.length;i++)\n  {\n    sum +=\
    \ nums[i];\n    if(sum > maxSum)\n    {\n      maxSum = sum;\n      result[index++]\
    \ = nums[i];\n    }\n  }\n  \n  return result;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjv_njw97.d(41): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjv_njw97.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int n = nums.length;\n    long[] ret = new long[n];\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8p3solto.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8p3solto.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    for(int i = 0; i < nums.length; i++){\n  \
    \      sum += nums[i];\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplw3uom_u.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplw3uom_u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] sums = new int[nums.length];\n    int[] indices = new int[nums.length];\n\
    \    long[] sorted = new long[nums.length];\n    \n    int sum_index = 0;\n  \
    \  for (int i = 0; i < nums.length; i++) {\n        sums[sum_index++] = nums[i]%10;\n\
    \    }\n    std.sort(sums.begin(), sums.end());\n    \n    for (int i = 0; i <\
    \ nums.length; i++) {\n        if (sums[sum_index-1] == nums[i]%10) {\n      \
    \      indices[sum_index-1] = i;\n        }\n    }\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        if (sums[sum_index-1] == nums[i]%10) {\n            sorted[indices[i]-1]\
    \ = nums[i];\n        }\n    }\n    return sorted;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThank you for sharing your code. While I appreciate you sharing\
    \ the code, please be aware that this is a Q&A site, not a code writing service.\
    \ As such, it would be much more useful to others if you could [edit] your answer\
    \ to include the explanations/insights from your code. Thanks!\n<|/ c |>\n<| c\
    \ |>\nthank you for comment. I thought that writing this comment to help others\
    \ would be enough. As I understand \"write a code with my ideas\" means that you\
    \ should post your ideas to others, because people will not copy and paste some\
    \ untested code.\n<|/ c |>\n<| a |>\nThe answer by Kris Kollhofer was really helpful\
    \ to me, however I needed to tweak his method a bit to make it work with the latest\
    \ Java version of JDK. The problem is with the Comparator interface and the sort()\
    \ method. When you use the sort() method the array gets sorted in a reverse manner.\
    \ \n<code>\nimport java.util.Comparator;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpc2qmrmm6.d(41): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2qmrmm6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong sum = 0;\n\tlong counter = 1;\n\tlong[] numsCopy = nums.toArray();\n\
    \t\n\tfor (int i = 0; i < numsCopy.length; i++)\n\t{\n\t\tsum += numsCopy[i];\n\
    \t\tif (sum == 0)\n\t\t{\n\t\t\tnumsCopy[i] = counter++;\n\t\t\tsum = 1;\n\t\t\
    }\n\t}\n\treturn numsCopy;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,math,sorting\
    \ |>\nIf you're just sorting numbers in ascending order, and not counting how\
    \ many of each number are in the array, you could use a modified version of the\
    \ merge sort algorithm, which is specifically designed for situations like this.\
    \  It's also probably faster than any sorting algorithm you could possibly write\
    \ in pure Java.\nThe idea is to repeatedly merge the smallest numbers into the\
    \ larger ones, and then move the smaller numbers into the right place.  This is\
    \ done repeatedly until you have a list with no larger numbers left to merge in.\
    \  This will end up giving you the largest numbers in ascending order, since you\
    \ move them out as you go.  When there are no numbers left to merge in, you end\
    \ up with the original array.  (There are obviously lots of ways to make this\
    \ faster, but this will be pretty simple and easy to understand.)\nThis algorithm\
    \ is O(nlogn) rather than O(n^2) like most other sorting algorithms, but I believe\
    \ it can still be beaten by a simple sort.\nEDIT: For an O(n^2) solution, see\
    \ the following link - http://rosettacode.org/wiki/Partition_sort#Java\n<|/ a\
    \ dscore=1 |>\n<| a tags=algorithm,math,sorting |>\n<code>\npublic class MyClass{\n\
    public static void main(String[] args){\n    int num[] = {1,3,4,2};\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0jq7xscz.d(34): Error: Declaration expected, not \''<\''\n/tmp/tmp0jq7xscz.d(37):
    Error: unterminated character constant\n/tmp/tmp0jq7xscz.d(37): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jq7xscz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] ret = new long[nums.length];\n    int pos = 0;\n    int\
    \ neg = 0;\n    int zero = 0;\n    for(int i = 0; i < nums.length; i++)\n    {\n\
    \        if(nums[i] < 0)\n        {\n            neg++;\n            for(int j\
    \ = i; j > pos; j--)\n            {\n                if(nums[j] < 0)\n       \
    \         {\n                    swap(nums, j, j-1);\n                    pos--;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      pos++;\n            for(int j = i; j > pos; j--)\n            {\n     \
    \           if(nums[j] > 0)\n                {\n                    swap(nums,\
    \ j, j-1);\n                    pos--;\n                }\n            }\n   \
    \     }\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ < 0)\n        {\n            swap(nums, pos, i);\n            pos++;\n     \
    \   }\n        else\n        {\n            swap(nums, pos, i);\n            pos++;\n\
    \        }\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ > 0)\n        {\n            swap(nums, pos, i);\n            pos++;\n     \
    \   }\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(nums[i]\
    \ > 0)\n        {\n            swap(nums, pos, i);\n            pos++;\n     \
    \   }\n    }\n    return ret;\n}\n</code>\nAnd that's it.\n<|/ a tags=c++,arrays,sorting\
    \ dscore=0 |>\n<| a |>\nIn Java the solution would be something like this \n<code>\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp81w5b019.d(81): Error: Declaration expected, not \''<\''\n/tmp/tmp81w5b019.d(82):
    Error: unterminated character constant\n/tmp/tmp81w5b019.d(91): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp81w5b019.d(92): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp81w5b019.d(93): Error: Declaration expected, not \''assert\''\n/tmp/tmp81w5b019.d(94):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp81w5b019.d(95): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp81w5b019.d(96): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp81w5b019.d(97): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp81w5b019.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int max = nums[0];\n    int min = nums[0];\n    int sum = 0;\n\
    \    int count = 0;\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5kn19vc1.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kn19vc1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong sum = 0;\n\tint i;\n\tlong sum2;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmhrof8wa.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhrof8wa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res=new long[nums.length];\n    int i=0;\n    long sum=0;\n\
    \    \n    for(int x:nums){\n        sum+=x;\n        res[i]=sum;\n        i++;\n\
    \    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmgndm_ln.d(23): Error: semicolon expected, not \'':\''\n/tmp/tmpmgndm_ln.d(23):
    Error: expression expected, not \'':\''\n/tmp/tmpmgndm_ln.d(23): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpmgndm_ln.d(28):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpmgndm_ln.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long[] sortedArray = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n      \
    \  sortedArray[i] = sum;\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp56q0p9j5.d(25): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56q0p9j5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int nLen = nums.length;\n    if (nLen < 1)\n        return nums;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx01udfy0.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx01udfy0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // TODO: your code\n    long[] result = new long[nums.length];\n\
    \    int sum = 0;\n    for(int i = 0; i < nums.length; i++) \n    {\n        sum\
    \ += nums[i];\n        result[i] = sum;\n    }\n    Arrays.sort(result);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp843mhhnb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] nums_copy = copy(nums);\n    sort(nums_copy, greaterThan(0));\n\
    \    return nums_copy;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xk04s1z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int index = 0;\n\
    \    int total = 0;\n    for(long n:nums) {\n        index = n;\n        total\
    \ += abs(n);\n        result[index] = total;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n\
    <| a dscore=0 |>\n<code>\npackage JavaApp;\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbcdq2mye.d(22): Error: semicolon expected, not \'':\''\n/tmp/tmpbcdq2mye.d(22):
    Error: expression expected, not \'':\''\n/tmp/tmpbcdq2mye.d(22): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpbcdq2mye.d(30):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpbcdq2mye.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] ans = new long[nums.length];\n    for (int i = 0; i <\
    \ ans.length; i++)\n    {\n        int sum = 0;\n        for(long num : nums)\n\
    \        {\n            if (num < 0) num *= -1;\n            if (num < 10) sum\
    \ += num;\n            else sum += num - 10;\n        }\n        if (ans[i] <\
    \ sum)\n        {\n            ans[i] = sum;\n        }\n    }\n    return ans;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nIt will work with negative numbers. But it won't\
    \ work with negative and positive numbers in the same array.\n<|/ c |>\n<| c |>\n\
    Good catch, I forgot that.\n<|/ c |>\n<| c |>\nApart from the negative number\
    \ problem, the code has a few other issues. First of all, the line `ans[i+1] =\
    \ nums[i];` should be `ans[i] = nums[i];` since the `i` loop variable represents\
    \ the index of the element in the array `nums`. Also, you're doing some unnecessary\
    \ work in the loop. You don't need to calculate the `sum` variable at all, just\
    \ loop through the array and add the current element to the sum. I'll also suggest\
    \ using `i < ans.length - 1` instead of the more general `i <= ans.length`.\n\
    <|/ c |>\n<| c |>\nYeah, I didn't notice that I had `i` instead of `i + 1` originally.\
    \ I'll edit the answer when I'm in a computer.\n<|/ c |>\n<| a tags=java,arrays\
    \ dscore=0 |>\nI haven't really worked with Java for a while, but as far as I\
    \ recall, I think Java stores arrays as linear arrays, so sorting them with bubble\
    \ sort would require you to take into account that elements are being swapped\
    \ with other elements during the sorting. Since you aren't really swapping anything\
    \ here, it's easiest to think of the array as a stack of data elements. Just as\
    \ you would pop and push elements, this implies that if you were to push an element\
    \ onto the array, you would have to pop it off before pushing it onto the stack.\n\
    I hope that helps!\n<|/ a |>\n<| c |>\nJava arrays are definitely arrays, not\
    \ stacks.\n<|/ c |>\n<| c |>\nThat's a nice idea, but I haven't been able to figure\
    \ out how Java would compare two elements. I would think that since Java compares\
    \ array elements by index, you should be able to write some code that would compare\
    \ two array elements by calculating their sum. I'm guessing that the Java sort\
    \ method would loop through the array and compare every element with every other\
    \ element, and that would require some sort of array comparison algorithm. How\
    \ would you implement that\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp01hydjn_.d(23): Error: semicolon expected, not \'':\''\n/tmp/tmp01hydjn_.d(23):
    Error: expression expected, not \'':\''\n/tmp/tmp01hydjn_.d(23): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmp01hydjn_.d(36):
    Error: Declaration expected, not \''<\''\n/tmp/tmp01hydjn_.d(39): Error: unterminated
    character constant\n/tmp/tmp01hydjn_.d(45): Error: unterminated character constant\n/tmp/tmp01hydjn_.d(45):
    Error: unterminated character constant\n/tmp/tmp01hydjn_.d(45): Error: unterminated
    character constant\n/tmp/tmp01hydjn_.d(48): Error: unterminated character constant\n/tmp/tmp01hydjn_.d(48):
    Error: unterminated character constant\n/tmp/tmp01hydjn_.d(48): Error: unterminated
    character constant\n/tmp/tmp01hydjn_.d(51): Error: unterminated character constant\n/tmp/tmp01hydjn_.d(51):
    Error: unterminated character constant\n/tmp/tmp01hydjn_.d(51): Error: unterminated
    character constant\n/tmp/tmp01hydjn_.d(58): Error: unterminated character constant\n/tmp/tmp01hydjn_.d(58):
    Error: unterminated character constant\n/tmp/tmp01hydjn_.d(58): Error: unterminated
    character constant\n/tmp/tmp01hydjn_.d(63): Error: Declaration expected, not \''assert\''\n/tmp/tmp01hydjn_.d(64):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp01hydjn_.d(65): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp01hydjn_.d(66): Error: Declaration
    expected, not \''assert\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01hydjn_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int j = 0;\n    int\
    \ sum = 0;\n    for (int i = 0; i < nums.length; ++i)\n    {\n        sum += nums[i];\n\
    \        result[j++] = sum;\n    }\n    for (int i = 1; i < nums.length; ++i)\n\
    \    {\n        sum -= nums[i];\n        result[j++] = sum;\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}\n</code>\nThe above code is in C#, but you can easily port\
    \ it to Java, if you need that. \nEDIT:\nI've just tested the above code on ideone\
    \ and it gives the correct results. Check it out here\n<|/ a tags=java,algorithm\
    \ |>\n<| c |>\nHmm... this does not seem to work properly with negative numbers.\n\
    <|/ c |>\n<| c |>\nIt seems like the OP is more concerned with the sum of the\
    \ digits in the original numbers, and not their position in the array. Not sure\
    \ if this is correct, but I think this should work.\n<|/ c |>\n<| c |>\nI've just\
    \ updated the code with a solution which sorts the original array and also preserves\
    \ the original position of similar digits.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ seem to work properly with negative numbers: https://ideone.com/y8SjMk\n<|/\
    \ c |>\n<| c |>\nI've just tested it with negative numbers and it works fine.\
    \ Check out the code here: http://ideone.com/6MjEjK\n<|/ c |>\n<| a tags=java,algorithm\
    \ |>\nHere is my Java version:\n<code>\npublic static List<Integer> orderByDigits(int[]\
    \ nums) {\n    int[] digits = Arrays.copyOfRange(nums, 0, nums.length);\n    Arrays.sort(digits);\n\
    \    List<Integer> result = new ArrayList<>();\n    for (int i = 0; i < digits.length;\
    \ i++) {\n        result.add(digits[i]);\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nIf I'm not mistaken, this solution won't work because\
    \ it is in lexicographical order - i.e. it places 0 before 1\n<|/ c |>\n<| a |>\n\
    A slightly different take on Akhilesh Ghodaparthy's solution:\n<code>\npublic\
    \ static ArrayList<Integer> orderByDigits(int[] nums) {\n    ArrayList<Integer>\
    \ result = new ArrayList<>();\n    int sum = 0;\n    for (int i = 0; i < nums.length;\
    \ ++i) {\n        sum += nums[i];\n        result.set(i, sum);\n    }\n    Collections.sort(result);\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 tags=java,algorithm |>\n<|\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0bufj70n.d(35): Error: Declaration expected, not \''<\''\n/tmp/tmp0bufj70n.d(38):
    Error: unterminated character constant\n/tmp/tmp0bufj70n.d(47): Error: unterminated
    character constant\n/tmp/tmp0bufj70n.d(50): Error: unterminated character constant\n/tmp/tmp0bufj70n.d(53):
    Error: unterminated character constant\n/tmp/tmp0bufj70n.d(60): Error: function
    declaration without return type. (Note that constructors are always named \''this\'')\n/tmp/tmp0bufj70n.d(60):
    Error: no identifier for declarator Arrays.sort(digits)\n/tmp/tmp0bufj70n.d(61):
    Error: no identifier for declarator List\n/tmp/tmp0bufj70n.d(61): Error: Declaration
    expected, not \''<\''\n/tmp/tmp0bufj70n.d(62): Error: Declaration expected, not
    \''for\''\n/tmp/tmp0bufj70n.d(62): Error: no identifier for declarator i\n/tmp/tmp0bufj70n.d(62):
    Error: Declaration expected, not \''<\''\n/tmp/tmp0bufj70n.d(62): Error: no identifier
    for declarator i\n/tmp/tmp0bufj70n.d(62): Error: Declaration expected, not \''++\''\n/tmp/tmp0bufj70n.d(64):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0bufj70n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // TODO: Write code here\n    // var array = new long[nums.length];\n\
    \    // for (int i = 0; i < nums.length; i++)\n    //     array[i] = nums[i];\n\
    \    // array.sort((a, b) => (a > b) ? 1 : ((b > a) ? -1 : 0));\n    \n    long[]\
    \ array = new long[nums.length];\n    int count = 0;\n    long sum = 0;\n    for(int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        array[count]\
    \ = nums[i];\n        count++;\n    }\n    array.sort((a, b) => (b > a) ? 1 :\
    \ ((a > b) ? -1 : 0));\n    return array;\n}\n</code>\n<|/ a tags=arrays,java\
    \ |>\n<| c |>\nYou don't need to sort the whole array, only to find the index\
    \ of the two elements that add up to the largest sum.\n<|/ c |>\n<| a tags=arrays,java\
    \ |>\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5julcsf9.d(37): Error: Declaration expected, not \''<\''\n/tmp/tmp5julcsf9.d(40):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp5julcsf9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] arr = nums;\n    long sum = 0;\n    for(int i=0;i<arr.length;i++)\n\
    \    {\n        sum += arr[i];\n        long c = arr[i];\n        while(c>0)\n\
    \        {\n            sum -= c%10;\n            c /= 10;\n        }\n      \
    \  arr[i] = sum;\n    }\n    return arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=java,sorting |>\nThis is my implementation using only Arrays.sort(int[]\
    \ array);:\n<code>\nprivate int[] swap(int i, int j) {\n    int temp=array[i];\n\
    \    array[i] = array[j];\n    array[j]=temp;\n    return array;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoi4jbh3k.d(34): Error: Declaration expected, not \''<\''\n/tmp/tmpoi4jbh3k.d(37):
    Error: Declaration expected, not \'':\''\n/tmp/tmpoi4jbh3k.d(41): Error: no identifier
    for declarator array[i]\n/tmp/tmpoi4jbh3k.d(41): Error: Declaration expected,
    not \''=\''\n/tmp/tmpoi4jbh3k.d(42): Error: no identifier for declarator array[j]\n/tmp/tmpoi4jbh3k.d(42):
    Error: Declaration expected, not \''=\''\n/tmp/tmpoi4jbh3k.d(43): Error: Declaration
    expected, not \''return\''\n/tmp/tmpoi4jbh3k.d(44): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoi4jbh3k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long max = 0;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        sum = nums[i] + sum;\n        if (sum > max)\n        {\n\
    \            max = sum;\n        }\n    }\n    \n    long[] res = {0L};\n    int\
    \ index = 0;\n    while (max > 0)\n    {\n        int index = sum % 10;\n    \
    \    sum = sum / 10;\n        res.insert(index, nums[index]);\n    }\n    \n \
    \   return res;\n}\n</code>\n<|/ a tags=list,sorting,java,arrays |>\n<| c |>\n\
    This code works fine but when I input the array like this `[-5,-4,-3,-2,-1]` it\
    \ is showing me `[-5, -4, -3, -2, -1, -2, -3]`\n<|/ c |>\n<| c |>\nI just copied\
    \ your code and pasted it on my side and changed it a little bit, but the same\
    \ code works fine for `[-5,-4,-3,-2,-1]`. Could you check again?\n<|/ c |>\n<|\
    \ a tags=list,sorting,java,arrays |>\nHere is a solution that utilizes a stream.\
    \  The idea is that we convert the array to a stream of digits and then sort them\
    \ by the sum of the digits.  Then we convert the sorted stream back into an array.\n\
    <code>\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiwvsltyx.d(41): Error: Declaration expected, not \''<\''\n/tmp/tmpiwvsltyx.d(56):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpiwvsltyx.d(57): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpiwvsltyx.d(58): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpiwvsltyx.d(59): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpiwvsltyx.d(60): Error: Declaration expected, not \''assert\''\n/tmp/tmpiwvsltyx.d(61):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpiwvsltyx.d(62): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwvsltyx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    Arrays.sort(nums);\n\
    \    int index = 0;\n    for (int i = 0; i < nums.length; i++) {\n        result[i]\
    \ = nums[index];\n        if (nums[i] < 0) {\n            result[i] = -result[i];\n\
    \            index++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a |>\nWe can write it like this:\n<code>\nimport std.algorithm:\
    \ sort;\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp570uns7s.d(31): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp570uns7s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.Length == 0) return nums;\n    \n    long sum = 0;\n\
    \    long max = nums[0];\n    for(int i = 0; i < nums.Length; i++)\n    {\n  \
    \      sum += nums[i];\n        if(sum > max)\n        {\n            max = sum;\n\
    \        }\n    }\n    \n    long[] ans = new long[nums.Length];\n    int index\
    \ = 0;\n    for(int i = 0; i < nums.Length; i++)\n    {\n        long num = nums[i];\n\
    \        long newNum = num - max;\n        ans[index++] = newNum;\n        sum\
    \ += newNum;\n    }\n    \n    return ans;\n}\n</code>\n<|/ a |>\n<| c |>\nWow,\
    \ that's a great answer. Just to clarify, you are sorting the array in place?\n\
    <|/ c |>\n<| c |>\nIt will sort the array in place as long as you are operating\
    \ on primitive types (`int`, `float`, `char`, etc.).\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work in C# :) The line \"maxNum = Math.Max(maxNum, nums[i]);\" won't compile.\
    \ Do you know what can be done?\n<|/ c |>\n<| c |>\n- [System.Math.Max](http://msdn.microsoft.com/en-us/library/system.math.max.aspx)\
    \ is a static method of the `Math` class which operates on `int`s, `float`s, and\
    \ `char`s. I updated the answer to use that method instead.\n<|/ c |>\n<| c |>\n\
    Yes but Math.Max is not available for C#. I found a solution to my problem in\
    \ http://stackoverflow.com/questions/7301613/sorting-arrays-in-c-sharp-by-a-value-in-the-array\n\
    <|/ c |>\n<| a tags=c#,sorting dscore=2 |>\nI ended up using this:\n<code>\n \
    \       static void Main(string[] args)\n    {\n        int[] input = { 8, 10,\
    \ 7, 5, 12, 6, 4, 3, 2 };\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgas6qmu6.d(44): Error: Declaration expected, not \''<\''\n/tmp/tmpgas6qmu6.d(47):
    Error: unterminated character constant\n/tmp/tmpgas6qmu6.d(53): Error: unterminated
    character constant\n/tmp/tmpgas6qmu6.d(53): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgas6qmu6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Map<int, int> points = new HashMap<int, int>();\n    for (long\
    \ n : nums) {\n        points.set(0, points.get(0) + n);\n    }\n    List<long>\
    \ res = new ArrayList<long>();\n    for (int i = 0; i< points.size(); i++) {\n\
    \        res.add(points.get(i));\n    }\n    return res.toArray(new long[0]);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you have a very large dataset\
    \ then sorting all records will be too expensive.\nSo if you have a very large\
    \ dataset and if your dataset is not too large then sort all records will be faster\
    \ than sorting each record.\nBelow is the Java implementation of QuickSort.\n\
    <code>\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7ndpoe6m.d(19): Error: found \'',\'' when expecting \''.\''
    following int\n/tmp/tmp7ndpoe6m.d(19): Error: found \''int\'' when expecting identifier
    following \''int.\''\n/tmp/tmp7ndpoe6m.d(19): Error: found \''>\'' when expecting
    \'';\'' following statement\n/tmp/tmp7ndpoe6m.d(19): Error: found \'',\'' when
    expecting \''.\'' following int\n/tmp/tmp7ndpoe6m.d(19): Error: found \''int\''
    when expecting identifier following \''int.\''\n/tmp/tmp7ndpoe6m.d(19): Error:
    found \''>\'' when expecting \'';\'' following statement\n/tmp/tmp7ndpoe6m.d(19):
    Error: expression expected, not \'')\''\n/tmp/tmp7ndpoe6m.d(19): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmp7ndpoe6m.d(20): Error: found \''for\''
    when expecting \'';\'' following statement\n/tmp/tmp7ndpoe6m.d(20): Error: found
    \'':\'' when expecting \'')\''\n/tmp/tmp7ndpoe6m.d(20): Error: missing { ... }
    for function literal\n/tmp/tmp7ndpoe6m.d(20): Error: found \''nums\'' when expecting
    \'';\'' following statement\n/tmp/tmp7ndpoe6m.d(20): Error: found \'')\'' instead
    of statement\n/tmp/tmp7ndpoe6m.d(23): Error: no identifier for declarator List\n/tmp/tmp7ndpoe6m.d(23):
    Error: Declaration expected, not \''<\''\n/tmp/tmp7ndpoe6m.d(24): Error: Declaration
    expected, not \''for\''\n/tmp/tmp7ndpoe6m.d(24): Error: no identifier for declarator
    i\n/tmp/tmp7ndpoe6m.d(24): Error: Declaration expected, not \''<\''\n/tmp/tmp7ndpoe6m.d(24):
    Error: no identifier for declarator i\n/tmp/tmp7ndpoe6m.d(24): Error: Declaration
    expected, not \''++\''\n/tmp/tmp7ndpoe6m.d(26): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ndpoe6m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong maxDigit = 0;\n\t\n\tfor (int i = 0; i < nums.length; ++i)\n\
    \t{\n\t\tmaxDigit = max(maxDigit, nums[i]);\n\t}\n\t\n\tint maxDigitIndex = 0;\n\
    \tlong maxDigitSum = 0;\n\t\n\tfor (int i = 0; i < nums.length; ++i)\n\t{\n\t\t\
    long digit = nums[i];\n\t\t\n\t\tif (digit > 0)\n\t\t{\n\t\t\tmaxDigitSum += digit;\n\
    \t\t\t++maxDigitIndex;\n\t\t}\n\t\telse if (digit < 0)\n\t\t{\n\t\t\tmaxDigitSum\
    \ += -digit;\n\t\t\t--maxDigitIndex;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaxDigitIndex\
    \ = 0;\n\t\t}\n\t}\n\t\n\tlong[] order = new long[maxDigitIndex+1];\n\t\n\tint\
    \ orderIndex = 0;\n\tfor (int i = 0; i < nums.length; ++i)\n\t{\n\t\tlong digit\
    \ = nums[i];\n\t\t\n\t\tif (digit > 0)\n\t\t{\n\t\t\torder[orderIndex] = digit;\n\
    \t\t\torder[orderIndex + 1] = nums[i - 1];\n\t\t\t++orderIndex;\n\t\t}\n\t\telse\
    \ if (digit < 0)\n\t\t{\n\t\t\torder[orderIndex] = -digit;\n\t\t\torder[orderIndex\
    \ + 1] = nums[i - 1];\n\t\t\t--orderIndex;\n\t\t}\n\t\telse\n\t\t{\n\t\t\torder[orderIndex]\
    \ = 0;\n\t\t\torder[orderIndex + 1] = 0;\n\t\t}\n\t}\n\t\n\treturn order;\n}\n\
    /*\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsqo685qd.d(77): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpsqo685qd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int length = nums.length;\n  long[] result = new long[length];\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9m7_6e7i.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9m7_6e7i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tint i, maxSum, currSum, sum, index, sumArr[] = new int[nums.length];\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpla7yo2nj.d(19): Error: multiple declarations must have the same
    type, not int and int[]\n/tmp/tmpla7yo2nj.d(20): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpla7yo2nj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int digitSum = 0;\n  long[] sortedNums = new long[nums.length];\n\
    \  for (int i = 0; i < nums.length; i++) {\n    digitSum += nums[i];\n    sortedNums[i]\
    \ = nums[i];\n  }\n  for (int i = 0; i < nums.length; i++) {\n    if (digitSum\
    \ == 0) break;\n    int pos = i;\n    for (int j = i + 1; j < nums.length; j++)\
    \ {\n      if (digitSum < nums[j]) break;\n      if (digitSum > nums[j]) pos++;\n\
    \    }\n    sortedNums[pos] = nums[i];\n    digitSum -= nums[i];\n  }\n  return\
    \ sortedNums;\n}\n</code>\n<|/ a tags=sorting,arrays,c# |>\n<| a tags=sorting,arrays,c#\
    \ dscore=0 |>\nIf you know you're sorting integers, you should use System.Numerics.BigInteger\
    \ to do it, instead of longs.\nTo avoid casting errors during sorting (e.g. when\
    \ sorting by strings), you can sort by first converting the integers to a BigInteger\
    \ and then sort by that integer:\n<code>\nvar numbers = new int[] { 1, 2, 4, 3,\
    \ 2, 3 };\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpma_qacf0.d(37): Error: Declaration expected, not \''<\''\n/tmp/tmpma_qacf0.d(40):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpma_qacf0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    int n = nums.length;\n\
    \    long sum = 0;\n    \n    for (int i = 0; i < n; i++) \n    {\n        sum\
    \ += nums[i];\n        res[i] = sum;\n    }\n    \n    Arrays.sort(res);\n   \
    \ \n    return res;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw86_d5jx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted = new long[nums.length];\n    for(int i = 0; i\
    \ < nums.length; ++i)\n    {\n        int digitSum = 0;\n        int index = -1;\n\
    \        for(int j = 0; j < nums.length; ++j)\n        {\n            if(j !=\
    \ i)\n            {\n                digitSum += nums[j];\n                if(digitSum\
    \ > 0)\n                {\n                    index = j;\n                  \
    \  break;\n                }\n            }\n        }\n        if(index >= 0)\n\
    \        {\n            sorted[i] = nums[index];\n        }\n        else\n  \
    \      {\n            sorted[i] = nums[i];\n        }\n    }\n    return sorted;\n\
    }\n</code>\n<|/ a tags=java,sorting |>\n<| c |>\nIt sorts the array into ascending\
    \ order. But I don't want that. I've edited my question to include a sample input\
    \ and output that I want.\n<|/ c |>\n<| c |>\nYou asked for an array sorted in\
    \ ascending order, but in the sample output you posted the array is sorted. Is\
    \ this a mistake?\n<|/ c |>\n<| c |>\nNo, that is a mistake. I'll have to fix\
    \ it now.\n<|/ c |>\n<| c |>\nI updated my answer to include a possible solution\
    \ to your problem.\n<|/ c |>\n<| a dscore=0 |>\nI tested this with some sample\
    \ values and it seems to work:\n<code>\n/**\n * Sorts an array of longs so that\
    \ their digits are sorted\n * in ascending order.\n *\n * sorted The array to\
    \ be sorted.\n */\npublic void test() {\n    long[] nums = { 1L, 11L, -1L, -11L,\
    \ -12L };\n    nums = order_by_points(nums);\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpur3p3eyw.d(47): Error: Declaration expected, not \''<\''\n/tmp/tmpur3p3eyw.d(50):
    Error: unterminated character constant\n/tmp/tmpur3p3eyw.d(50): Error: unterminated
    character constant\n/tmp/tmpur3p3eyw.d(56): Error: unterminated character constant\n/tmp/tmpur3p3eyw.d(72):
    Error: no identifier for declarator nums\n/tmp/tmpur3p3eyw.d(72): Error: Declaration
    expected, not \''=\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpur3p3eyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong[] res = new long[nums.length];\n\tint index = 0;\n\tfor (int\
    \ i=0; i < nums.length; i++)\n\t{\n\t\tfor (int j=i+1; j < nums.length; j++)\n\
    \t\t{\n\t\t\tlong tmp = nums[i]+nums[j];\n\t\t\tif (tmp != 0)\n\t\t\t{\n\t\t\t\
    \tindex++;\n\t\t\t\tres[index] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tArrays.sort(res);\n\
    \treturn res;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis only handles positive\
    \ numbers. A more general solution can be found here: http://stackoverflow.com/a/20653753/477420\n\
    <|/ c |>\n<| c |>\nThank you for noting this. I just updated the code to handle\
    \ negative numbers as well.\n<|/ c |>\n<| c |>\nNice work.  I always prefer using\
    \ standard library stuff over writing my own code, though.\n<|/ c |>\n<| c |>\n\
    You shouldn't need the `index++;` line if you use my solution, since the original\
    \ index is still incremented in that line.\n<|/ c |>\n<| c |>\nThat's true. I'll\
    \ update my solution accordingly.\n<|/ c |>\n<| a |>\nJust for fun - the solution\
    \ is in python:\n<code>\n>>> L = [1L, 11L, -1L, -11L, -12L]\n>>> L = [x for _,\
    \ x in sorted(zip(map(lambda x: sum(x), L), range(0, len(L))))]\n>>> L\n[-1L,\
    \ -11L, 1L, -12L, 11L]\n</code>\n<|/ a dscore=3 tags=sorting,algorithm |>\n<|\
    \ c |>\nOk, this works except it fails the 'fail the test' part. I think the idea\
    \ is to sort the sums of the digits by their absolute value, so 11 is before -1.\
    \ I'm not sure why that works, though.\n<|/ c |>\n<| c |>\nI think I got it -\
    \ the negative numbers get sorted before the positive ones, because they are in\
    \ reverse order of magnitude. 11 is greater than -1, so the negative number is\
    \ moved ahead by the absolute value of the sum of the digits.\n<|/ c |>\n<| c\
    \ |>\nIt's not just the negative numbers - if you reverse the list and sort it\
    \ by sum, negative numbers move to the front.  Try doing that for [1,11,-1,-11,-12]\n\
    <|/ c |>\n<| c |>\n- Ah, you were right. My first idea was that negative numbers\
    \ were supposed to be sorted after the positive ones, i.e. the list reversed.\
    \ However, if I reverse the list before sorting, the negative numbers do get \n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6iutzikw.d(36): Error: Declaration expected, not \''<\''\n/tmp/tmp6iutzikw.d(48):
    Error: unterminated character constant\n/tmp/tmp6iutzikw.d(51): Error: unterminated
    character constant\n/tmp/tmp6iutzikw.d(51): Error: unterminated character constant\n/tmp/tmp6iutzikw.d(63):
    Error: unterminated character constant\n/tmp/tmp6iutzikw.d(63): Error: unterminated
    character constant\n/tmp/tmp6iutzikw.d(63): Error: unterminated character constant\n/tmp/tmp6iutzikw.d(69):
    Error: unterminated character constant\n/tmp/tmp6iutzikw.d(77): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6iutzikw.d(78): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp6iutzikw.d(79): Error: Declaration expected, not \''assert\''\n/tmp/tmp6iutzikw.d(80):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6iutzikw.d(81): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6iutzikw.d(82): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6iutzikw.d(83): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6iutzikw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] sums = nums.map(x-> digits(x)).map(x-> x[0]);\n    long[]\
    \ result = new long[sums.max()];\n    int i = 0;\n    foreach(x->result[i++]=nums.indexOf(x));\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,c#,algorithm dscore=0 |>\n\
    <| a tags=arrays,c#,algorithm |>\n<code>\nusing System.Collections.Generic;\n\
    using System;\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0852232.d(19): Error: expression expected, not \''>\''\n/tmp/tmpj0852232.d(19):
    Error: found \''digits\'' when expecting \'',\''\n/tmp/tmpj0852232.d(19): Error:
    expression expected, not \''>\''\n/tmp/tmpj0852232.d(19): Error: found \''x\''
    when expecting \'',\''\n/tmp/tmpj0852232.d(22): Error: no identifier for declarator
    x\n/tmp/tmpj0852232.d(22): Error: found \''-\'' when expecting \'';\''\n/tmp/tmpj0852232.d(22):
    Error: expression expected, not \''>\''\n/tmp/tmpj0852232.d(22): Error: found
    \''result\'' when expecting \'')\''\n/tmp/tmpj0852232.d(22): Error: found \'')\''
    when expecting \'';\'' following statement\n/tmp/tmpj0852232.d(25): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0852232.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong sum = 0;\n\tint count = 0;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpkeu5gguh.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkeu5gguh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int N = nums.length;\n    long[] ret = new long[N];\n    int\
    \ j = 0;\n    for (int i = 0; i < N; ++i) {\n        int count = 0;\n        int\
    \ carry = 1;\n        for (j;  j < N && (nums[j] < 0); ++j) {\n            carry\
    \ += nums[j] % 10;\n            count += carry % 10;\n            carry /= 10;\n\
    \        }\n        if (j < N && (nums[j] >= 0)) {\n            carry += nums[j];\n\
    \            ++j;\n        }\n        ret[i] = count + carry;\n    }\n    Arrays.sort(ret);\n\
    \    return ret;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,java |>\n<|\
    \ a dscore=0 tags=arrays,sorting,algorithm,java |>\nWe can use the fact that addition\
    \ has commutative property and we only need one loop:\n<code>\nunittest\n{\n \
    \   alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx149py2h.d(39): Error: Declaration expected, not \''<\''\n/tmp/tmpx149py2h.d(48):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpx149py2h.d(49): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpx149py2h.d(50): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpx149py2h.d(51): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpx149py2h.d(52): Error: Declaration expected, not \''assert\''\n/tmp/tmpx149py2h.d(53):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpx149py2h.d(54): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx149py2h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length==0)\n        return nums;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbx68lf74.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbx68lf74.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    map<long, map<long, bool>> seen;\n    long result = 0;\n    long\
    \ max = 0;\n    long sum = 0;\n    bool first = true;\n    foreach(long n in nums)\n\
    \    {\n        if(first || n<0)\n            first = false;\n        else\n \
    \       {\n            sum += n;\n            max = max(max, sum);\n        }\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpch5d1xo7.d(19): Error: found \'',\'' when expecting \''.\''
    following long\n/tmp/tmpch5d1xo7.d(19): Error: found \''<\'' when expecting \'';\''
    following statement\n/tmp/tmpch5d1xo7.d(19): Error: no identifier for declarator
    long\n/tmp/tmpch5d1xo7.d(19): Error: found \'',\'' instead of statement\n/tmp/tmpch5d1xo7.d(24):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpch5d1xo7.d(33): Error: found
    \''unittest\'' instead of statement\n/tmp/tmpch5d1xo7.d(44): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpch5d1xo7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // TODO: implement this function\n    long sum = 0;\n    for\
    \ (long n : nums)\n        sum += n;\n    \n    int[] count = new int[10];\n \
    \   for (long n : nums)\n    {\n        int c = n % 10;\n        sum += c;\n \
    \       count[c] += 1;\n    }\n    \n    long[] result = new long[count[sum]];\n\
    \    int i = 0;\n    for (long n : nums)\n    {\n        int c = n % 10;\n   \
    \     result[i++] = (count[c] <= 1)\n                        ? n\n           \
    \             : sum - c - n;\n    }\n    \n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nPlease don't post only code as an answer, but also provide an\
    \ explanation of what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=3 |>\nYou could\
    \ use an array to store digits in order. Iterate over the array, adding digits\
    \ to a temporary total. Add the temporary total to a new array. If the temporary\
    \ total is less than the desired result, add it to the new array.\nThis doesn't\
    \ take into account that two equal digits might be next to each other (e.g. 123,\
    \ 234, 123, 345). Although this wouldn't be an issue in the example given, it\
    \ may be in other problems with larger numbers.\n<|/ a tags=sorting,arrays,c#\
    \ |>\n<| c |>\nThis solution is O(n^2), which can be improved quite a bit.  See\
    \ my answer.\n<|/ c |>\n<| c |>\nThis can be improved even more if there are more\
    \ digits in the number.  See my answer.\n<|/ c |>\n<| c |>\n: I see that you've\
    \ posted a solution that does this.  However, I think that it's too complicated\
    \ for someone just starting out to understand what's happening in the code.  I\
    \ do think it's quite clear and concise, so I'll leave it un-accepted.\n<|/ c\
    \ |>\n<| c |>\nI don't think the complexity is O(n^2), because the array contains\
    \ integers that can have up to 4 digits. But yes, it's complexity is O(n^2) in\
    \ the worst case. And the solutions below are O(n) in the worst case, as they\
    \ iterate over O(n) digits with O(1) lookup time.\n<|/ c |>\n<| a |>\nThis solution\
    \ is more concise and faster, but it is still O(n^2):\n<code>\nstatic IEnumerable<int>\
    \ \nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpinuume2e.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmpinuume2e.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmpinuume2e.d(21): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpinuume2e.d(25):
    Error: semicolon expected, not \'':\''\n/tmp/tmpinuume2e.d(25): Error: expression
    expected, not \'':\''\n/tmp/tmpinuume2e.d(25): Error: found \''nums\'' when expecting
    \'';\'' following for condition\n/tmp/tmpinuume2e.d(34): Error: semicolon expected,
    not \'':\''\n/tmp/tmpinuume2e.d(34): Error: expression expected, not \'':\''\n/tmp/tmpinuume2e.d(34):
    Error: found \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpinuume2e.d(44):
    Error: Declaration expected, not \''<\''\n/tmp/tmpinuume2e.d(47): Error: unterminated
    character constant\n/tmp/tmpinuume2e.d(51): Error: unterminated character constant\n/tmp/tmpinuume2e.d(51):
    Error: unterminated character constant\n/tmp/tmpinuume2e.d(60): Error: unterminated
    character constant\n/tmp/tmpinuume2e.d(60): Error: unterminated character constant\n/tmp/tmpinuume2e.d(60):
    Error: unterminated character constant\n/tmp/tmpinuume2e.d(60): Error: unterminated
    character constant\n/tmp/tmpinuume2e.d(60): Error: unterminated character constant\n/tmp/tmpinuume2e.d(63):
    Error: unterminated character constant\n/tmp/tmpinuume2e.d(63): Error: unterminated
    character constant\n/tmp/tmpinuume2e.d(73): Error: Declaration expected, not \''assert\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpinuume2e.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var list = new long[nums.length];\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbukl6lc7.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbukl6lc7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    return order_by_points_helper(nums, 0);\n}\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3kpf9trs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var result = nums;\n    \n    for (int i = 0; i < result.length;\
    \ i++) \n    {\n        for (int j = i + 1; j < result.length; j++) \n       \
    \ {\n            long x = result[j];\n            long y = result[i];\n      \
    \      \n            if (y == 0) \n            {\n                long sum = 0;\n\
    \                for (int k = i; k >= 0; k--) \n                {\n          \
    \          sum += result[k];\n                }\n                result[i] = sum;\n\
    \                result[j] = sum;\n                i++;\n                j--;\n\
    \            } \n            else \n            {\n                long sum =\
    \ x / y;\n                result[i] = sum;\n                result[j] = sum;\n\
    \            }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=functional-programming,java |>\n<| c |>\nI think it is better\
    \ to use java built-in sort function, but your answer may help to understand how\
    \ it works.\n<|/ c |>\n<| c |>\nIt doesn't work well when there is multiple points\
    \ with same sum of digits. My answer works only for single points with same sum\
    \ of digits.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n/**\n * \n * arr \n * sorted\
    \ array of ints\n */\nprivate static int[] sortArray(int[] arr) {\n    long sum\
    \ = 0;\n    int tmp = 0;\n    int index = 0;\n    int temp = 0;\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmtq_jtow.d(51): Error: Declaration expected, not \''<\''\n/tmp/tmpmtq_jtow.d(57):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpmtq_jtow.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // Your code here\n    long[] result = nums;\n    for(int i =\
    \ 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        int index = -1;\n\
    \        for(int j = 0; j < nums.length; j++)\n        {\n            sum += nums[j]\
    \ % 10;\n            if(sum < 0)\n                sum += 10;\n            if(sum\
    \ == nums[i])\n            {\n                index = j;\n                break;\n\
    \            }\n        }\n        if(index != -1)\n        {\n            long\
    \ tmp = 0;\n            for(int j = 0; j < index; j++)\n                tmp +=\
    \ nums[j] % 10;\n            tmp = nums[index] - tmp;\n            for(int j =\
    \ index + 1; j < nums.length; j++)\n                tmp += nums[j] % 10;\n   \
    \         tmp = tmp + nums[index];\n            result[i] = tmp;\n        }\n\
    \    }\n    for(int i = 0; i < result.length; i++)\n    {\n        result[i] =\
    \ result[i] * -1;\n    }\n    return result ;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks, i would like to know how to implement this on java. Can you please provide\
    \ me an answer?\n<|/ c |>\n<| c |>\nI tested your code, but its not working. I\
    \ will post my code below.\n<|/ c |>\n<| c |>\nYou don't get it right. If i give\
    \ \"-1234\" as input then its not sorting it as expected. Your code is not working\
    \ as i expected.\n<|/ c |>\n<| c |>\n, I've updated my answer with Java code snippet.\n\
    <|/ c |>\n<| c |>\nThanks, but can you please tell me why the code is only giving\
    \ \"-1L\" as output? I guess it should give \"-11L\" also, am i right?\n<|/ c\
    \ |>\n<| a tags=java,algorithm,sorting,arrays |>\n<code>\n/**\n* The program reads\
    \ a line of numbers and sorts them in ascending order based on their sum of the\
    \ digits they have.\n* It ignores the case when the numbers given are negative.\n\
    * It also ignores any non-numeric input.\n* The program stops when the user enters\
    \ a blank line (or presses Ctrl+D on Unix).\n*/\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptncv48_a.d(54): Error: Declaration expected, not \''<\''\n/tmp/tmptncv48_a.d(63):
    Error: unterminated character constant\n/tmp/tmptncv48_a.d(66): Error: unterminated
    character constant\n/tmp/tmptncv48_a.d(83): Error: Declaration expected, not \''assert\''\n/tmp/tmptncv48_a.d(84):
    Error: Declaration expected, not \''assert\''\n/tmp/tmptncv48_a.d(85): Error:
    Declaration expected, not \''assert\''\n/tmp/tmptncv48_a.d(86): Error: Declaration
    expected, not \''assert\''\n/tmp/tmptncv48_a.d(87): Error: Declaration expected,
    not \''assert\''\n/tmp/tmptncv48_a.d(88): Error: Declaration expected, not \''assert\''\n/tmp/tmptncv48_a.d(89):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptncv48_a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int i = 0, j = 0, sum = 0;\n  long[] result = new long[nums.length];\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybvyp3z0.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybvyp3z0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long[] resArray = new long[nums.length];\n  long maxIndex = 0;\n\
    \  long curSum = 0;\n  for (int i = 0; i < nums.length; i++)\n  {\n    curSum\
    \ += nums[i];\n    if (curSum > 0)\n    {\n      curSum = 0;\n      maxIndex =\
    \ i;\n    }\n  }\n  \n  resArray[maxIndex] = nums[maxIndex];\n  resArray.length\
    \ = maxIndex + 1;\n  \n  for (int i = maxIndex-1; i >= 0; i--)\n  {\n    long\
    \ sum = 0;\n    for (int j = 0; j < nums.length; j++)\n    {\n      sum += nums[j];\n\
    \      if (sum > 0)\n      {\n        sum = 0;\n      }\n    }\n    resArray[i]\
    \ = nums[(maxIndex - 1) - j];\n  }\n  return resArray;\n}\n</code>\n<|/ a |>\n\
    <| a tags=algorithm,sorting dscore=1 |>\nI wanted to solve this problem in JavaScript,\
    \ so I made my own solution using sorting. My solution is based on the idea that\
    \ all numbers have to be added up to be sorted. So the idea is to sum up all the\
    \ digits of the numbers. Then sorting the sums would give me the desired result.\n\
    <code>\nfunction sortNumbers(numbers) {\n    let sums = new Array(numbers.length).fill(0);\n\
    \    let results = [];\n    for (let i = 0; i < numbers.length; i++) {\n     \
    \   let numDigits = Math.floor(Math.log10(Math.abs(numbers[i])));\n        let\
    \ numDecimal = Math.pow(10, numDigits);\n        let sum = 0;\n        while (numbers[i]\
    \ >= numDecimal) {\n            sum += Math.ceil(numbers[i] % numDecimal);\n \
    \           numbers[i] /= numDecimal;\n        }\n        sums[i] += sum;\n  \
    \  }\n    sums.sort((a, b) => {\n        return a - b;\n    });\n    for (let\
    \ i = 0; i < sums.length; i++) {\n        results.push(Math.ceil(sums[i] / 10));\n\
    \    }\n    return results;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,sorting\
    \ |>\nI know this is a very old question, but I wanted to share my solution using\
    \ Ruby, which could be easily translated to other languages.\n<code>\ndef sort_nums(nums)\n\
    \    nums.inject([0,0,0,0,0]) do |sums, num|\n        digits.each do |digit|\n\
    \            sums[digit] += num.to_i\n        end\n        sums\n    end.sort\n\
    end\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp3pmht12e.d(50): Error: Declaration expected, not \''<\''\n/tmp/tmp3pmht12e.d(58):
    Error: Declaration expected, not \''for\''\n/tmp/tmp3pmht12e.d(58): Error: no
    identifier for declarator i\n/tmp/tmp3pmht12e.d(58): Error: Declaration expected,
    not \''<\''\n/tmp/tmp3pmht12e.d(58): Error: no identifier for declarator i\n/tmp/tmp3pmht12e.d(58):
    Error: Declaration expected, not \''++\''\n/tmp/tmp3pmht12e.d(62): Error: Declaration
    expected, not \''while\''\n/tmp/tmp3pmht12e.d(64): Error: no identifier for declarator
    numbers[i]\n/tmp/tmp3pmht12e.d(64): Error: Declaration expected, not \''/=\''\n/tmp/tmp3pmht12e.d(65):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pmht12e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long result = 0;\n    for (int i = 0; i < nums.length; i++) {\n\
    \        result += nums[i];\n    }\n    int start = 0;\n    int end = nums.length\
    \ - 1;\n    while (start < end) {\n        int mid = start + (end - start) / 2;\n\
    \        long sum = 0;\n        for (int i = start; i < end; i++) {\n        \
    \    sum += (long) nums[i];\n            if (sum == mid) {\n                result\
    \ = mid;\n                start = i;\n                end = i + 1;\n         \
    \   }\n        }\n    }\n    if (result == 0) {\n        return nums;\n    } else\
    \ {\n        int left = 0;\n        int right = nums.length - 1;\n        long[]\
    \ ans = new long[nums.length];\n        while (left < right) {\n            while\
    \ (left < right && sum > result) {\n                sum += nums[left];\n     \
    \           left++;\n            }\n            while (left < right && sum < result)\
    \ {\n                sum -= nums[right];\n                right--;\n         \
    \   }\n            while (left < right && sum == result) {\n                sum\
    \ -= nums[right];\n                right--;\n                while (sum > result)\
    \ {\n                    sum -= nums[left];\n                    left++;\n   \
    \             }\n                while (sum < result) {\n                    sum\
    \ += nums[left];\n                    left++;\n                }\n           \
    \     ans[left] = nums[left];\n            }\n        }\n        return ans;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 tags=java,algorithm,sorting |>\n<| c |>\nCan\
    \ you please provide some explanation about the code. Thank you.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nUsing recursion\n<code>\nclass Point\n{\n    private int x;\n\
    \    private int y;\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv7tg96vq.d(29): Error: C style cast illegal, use cast(long)nums[i]\n/tmp/tmpv7tg96vq.d(69):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpv7tg96vq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int count[10]={0};\n\
    \    for(int i=0;i<nums.length;i++){\n        count[std.math.floor(std.math.fabs(nums[i]))]++;\n\
    \    }\n    \n    for(int i=0;i<10;i++){\n        if(count[i]>1){\n          \
    \  result[std.math.floor(std.math.fabs(nums[i]))]++;\n        }\n    }\n    \n\
    \    for(int i=0;i<nums.length;i++){\n        if(result[i]==0){\n            return\
    \ nums;\n        }\n    }\n    \n    int i=0,j=0;\n    for(int i=0;i<nums.length;i++){\n\
    \        if(result[i]==0){\n            break;\n        }\n    }\n    \n    for(int\
    \ i=0;i<nums.length;i++){\n        if(nums[i]<0){\n            j++;\n        \
    \    continue;\n        }\n        \n        int tmp=nums[i];\n        int x=0;\n\
    \        while(tmp>0){\n            x++;\n            tmp=tmp-std.math.pow10(x);\n\
    \        }\n        \n        if(j>x){\n            result[i]=j;\n        }\n\
    \    }\n    \n    return result;\n}\n\"\"\"\n    ),\n    html.Img(src='assets/images/sort_by_points.png',\n\
    \        style={'width': '100%'}),\n    html.Hr(),\n    html.H4('Sort by sum of\
    \ digits'),\n    html.P(\n\"\"\"\nimport std.algorithm;\nimport std.array;\nimport\
    \ std.conv;\nimport std.stdio;\nimport std.string;\nimport std.typecons;\nimport\
    \ std.math;\n/*\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp72ez_6kj.d(64): Error: Declaration expected, not \''""\''\n/tmp/tmp72ez_6kj.d(79):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72ez_6kj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var result = nums.sort((a,b) => ((b > 0) ? b : (int)Math.Abs(b))\
    \ - ((a > 0) ? a : (int)Math.Abs(a)));\n    return result.map((a) => a.Value);\n\
    }\n</code>\n<|/ a dscore=0 tags=algorithm,c#,sorting |>\n<| c |>\nI don't think\
    \ this does what the OP wants - it still sorts by the absolute value of the difference\
    \ of the sums.\n<|/ c |>\n<| c |>\nThanks. I thought my solution works, but I\
    \ must have made some mistake.\n<|/ c |>\n<| c |>\nYou are welcome :)\n<|/ c |>\n\
    <| c |>\nYou don't need the `map` call on `result` - just call `result` in the\
    \ last line. Also, rather than using `Math.Abs`, you can just use `OrderByDescending`\
    \ on the `a` part and `OrderBy` on the `b` part.\n<|/ c |>\n<| c |>\nThanks. I\
    \ tested it, and it works fine.\n<|/ c |>\n<| a |>\nHere's a fairly simple solution\
    \ that seems to work:\n<code>\npublic static IEnumerable<int> OrderBySum(this\
    \ IEnumerable<int> values)\n{\n    using (var sorted = values.OrderBy(v => v).ThenBy(v\
    \ => v))\n    {\n        int sum = 0;\n        int value = 0;\n        foreach\
    \ (int val in sorted)\n        {\n            sum += val;\n            if (sum\
    \ > 0)\n            {\n                value = val;\n                yield return\
    \ value;\n            }\n            sum -= val;\n        }\n    }\n}\n</code>\n\
    <|/ a tags=algorithm,c#,sorting dscore=0 |>\n<| a tags=algorithm,c#,sorting dscore=0\
    \ |>\nHere is my solution in Java 7 and 8 for sorting a list of integers based\
    \ on the sum of their digits.\n<code>\npublic class ListDigitsSum {\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw97ty5pf.d(19): Error: C style cast illegal, use cast(int)Math.Abs(b)\n/tmp/tmpw97ty5pf.d(19):
    Error: C style cast illegal, use cast(int)Math.Abs(a)\n/tmp/tmpw97ty5pf.d(22):
    Error: Declaration expected, not \''<\''\n/tmp/tmpw97ty5pf.d(25): Error: unterminated
    character constant\n/tmp/tmpw97ty5pf.d(34): Error: unterminated character constant\n/tmp/tmpw97ty5pf.d(40):
    Error: unterminated character constant\n/tmp/tmpw97ty5pf.d(48): Error: Declaration
    expected, not \''foreach\''\n/tmp/tmpw97ty5pf.d(51): Error: Declaration expected,
    not \''if\''\n/tmp/tmpw97ty5pf.d(54): Error: no identifier for declarator yield\n/tmp/tmpw97ty5pf.d(54):
    Error: Declaration expected, not \''return\''\n/tmp/tmpw97ty5pf.d(55): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw97ty5pf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.Length == 0)\n        return nums;\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1o9a8qjj.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1o9a8qjj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] arr = new long[nums.length];\n    for (int i = 0; i <\
    \ arr.length; i++)\n    {\n        int sum = 0;\n        int index = i;\n    \
    \    while (index != -1 && nums[index] != 0)\n        {\n            sum += nums[index];\n\
    \            index--;\n        }\n        if (sum > 0)\n        {\n          \
    \  arr[i] = sum;\n        }\n    }\n    Arrays.sort(arr);\n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] == 0)\n        {\n         \
    \   arr[i] = i;\n        }\n    }\n    return arr;\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=java,sorting,arrays |>\nThis solution has some issues as well, but this\
    \ solution is pretty simple and easy to understand. Just do this. I used a HashMap\
    \ to store the values while sorting. \n<code>\nimport java.util.HashMap;\nimport\
    \ java.util.Arrays;\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsfsxwi9d.d(44): Error: Declaration expected, not \''<\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfsxwi9d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.Length > 0)\n    {\n        Array.Sort(nums);\n    \
    \    long sum = 0;\n        long maxSum = 0;\n        long i = 0;\n        \n\
    \        while ((i < nums.Length) && (sum < maxSum))\n        {\n            sum\
    \ += nums[i];\n            maxSum = sum;\n            i++;\n        }\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpap9knsz8.d(32): Error: found \''unittest\'' instead of statement\n/tmp/tmpap9knsz8.d(43):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpap9knsz8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int n = nums.length;\n    long[] results = new long[n];\n   \
    \ long[] digits = new long[10];\n    long sum = 0;\n    for (int i = 0; i < n;\
    \ i++)\n    {\n        digits[nums[i]%10] += nums[i]/10;\n    }\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        sum += digits[nums[i]%10];\n        results[i]\
    \ = sum;\n        sum -= digits[nums[i]%10];\n    }\n    std.sort(results);\n\
    \    return std.copy(results);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n+1 Nice\
    \ one. I'd suggest to reuse `digits` to speed up the second `for` loop. Also,\
    \ don't forget to set the value of `sum` to zero before starting the loop. Otherwise,\
    \ you will always have `sum` initialized to 0 on the first iteration and it may\
    \ lead to incorrect results in the end.\n<|/ c |>\n<| c |>\nThanks for the advice.\
    \ Updated the code.\n<|/ c |>\n<| a dscore=1 tags=java,sorting,algorithm |>\n\
    I wrote a quicksort algorithm, and I think it works.  I ran it against some large\
    \ data sets (~500,000 integers) and got the following performance.  Note that\
    \ I did this in Scala, so I apologize if the Scala code is incorrect.\n<code>\n\
    // scala\ndef quicksort2(nums: List[Long], low: Int, high: Int): List[Long] =\
    \ {\n  if(low < high) {\n    val p = partition(nums, low, high)\n    val mid =\
    \ (low + high) >>> 1\n    quicksort2(nums, low, mid)\n    quicksort2(nums, mid\
    \ + 1, high)\n  }\n  nums\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwvyqji61.d(36): Error: Declaration expected, not \''<\''\n/tmp/tmpwvyqji61.d(39):
    Error: unterminated character constant\n/tmp/tmpwvyqji61.d(39): Error: unterminated
    character constant\n/tmp/tmpwvyqji61.d(61): Error: Declaration expected, not \''assert\''\n/tmp/tmpwvyqji61.d(62):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpwvyqji61.d(63): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpwvyqji61.d(64): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpwvyqji61.d(65): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpwvyqji61.d(66): Error: Declaration expected, not \''assert\''\n/tmp/tmpwvyqji61.d(67):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvyqji61.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.isEmpty())\n    {\n        return nums;\n    }\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbitxvq5p.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbitxvq5p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res;\n    int i;\n    long sum = 0;\n    \n    for(int\
    \ j=0; j<nums.length; j++){\n        sum += nums[j];\n    }\n    \n    int index\
    \ = 0;\n    for(int j=0; j<nums.length; j++){\n        if(sum > 0){\n        \
    \    if(index == 0)\n                res[index++] = nums[j];\n            else{\n\
    \                if(nums[j] > nums[index-1])\n                    res[index++]\
    \ = nums[j];\n            }\n            sum -= nums[j];\n        }\n    }\n \
    \   \n    return res;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n<|\
    \ c |>\nYour implementation is wrong. Your code will put `-1` before `1`.\n<|/\
    \ c |>\n<| a |>\nI took a different approach - it works for me in O(n), with two\
    \ passes.\n<code>\ndef orderInPlace(a):\n    idx = 0\n    while idx < len(a):\n\
    \        currsum = 0\n        curridx = -1\n        while curridx < len(a):\n\
    \            if currsum > a[curridx]:\n                currsum -= a[curridx]\n\
    \                curridx += 1\n            else:\n                a[curridx],\
    \ a[idx] = a[idx], a[curridx]\n                currsum += a[curridx]\n       \
    \         idx += 1\n            \n</code>\n<|/ a dscore=0 tags=arrays,algorithm,sorting\
    \ |>\n<| c |>\nIt doesn't work when the list is empty.\n<|/ c |>\n<| c |>\nHow\
    \ about now?\n<|/ c |>\n<| a tags=arrays,algorithm,sorting |>\nThis code work\
    \ for me - \n<code>\ndef order_by_points(nums: List[int]) -> Optional[List[int]]:\n\
    if len(nums) == 0:\n    return None\nelse:\n    sum = 0\n    index = 0\n    \n\
    \    while index < len(nums):\n        sum += nums[index]\n        if sum > 0:\n\
    \            nums[index], nums[index-1] = nums[index-1], nums[index]\n       \
    \ index += 1\n    \n    return nums\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nHere is my implementation for Python with time complexity of O(n^2). It\
    \ might be helpful.\n<code>\ndef sortInPlace(nums):\n  length = len(nums)\n  for\
    \ i in range(length-1):\n    nums[i], nums[length-1] = nums[length-1], nums[i]\n\
    \  \n  if length == 1:\n    return nums\n  else:\n    k = nums.pop(0)\n    left\
    \ = sortInPlace(nums[0:k])\n    right = sortInPlace(nums[k+1:])\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpon8dpi__.d(42): Error: Declaration expected, not \''<\''\n/tmp/tmpon8dpi__.d(67):
    Error: unterminated character constant\n/tmp/tmpon8dpi__.d(109): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpon8dpi__.d(110): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpon8dpi__.d(111): Error: Declaration expected, not \''assert\''\n/tmp/tmpon8dpi__.d(112):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpon8dpi__.d(113): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpon8dpi__.d(114): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpon8dpi__.d(115): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpon8dpi__.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int n = nums.length;\n    if (n<2)\n        return nums;\n  \
    \  \n    long[] dp = new long[n+1];\n    \n    for(int i=0; i<=n; i++)\n     \
    \   dp[i] = 0;\n    \n    for (int i=0; i<=n; i++)\n        dp[i+1] = nums[i]*i;\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwocig7m9.d(30): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwocig7m9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    var index = 0;\n    var temp = new long[nums.Length];\n    var\
    \ sum = new long[nums.Length];\n    int cnt = 0;\n    int digit;\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcozxnh0w.d(24): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcozxnh0w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] digits = new int[nums.Length];\n    long sum = 0;\n   \
    \ for(int i=0;i<nums.Length;i++)\n    {\n        digits[i] = (int)nums[i]%10;\n\
    \        sum += digits[i];\n    }\n    Array.Sort(digits);\n    long[] ans = new\
    \ long[nums.Length];\n    for(int i=0;i<nums.Length;i++)\n    {\n        ans[i]\
    \ = nums[i]/10 + digits[i];\n    }\n    return ans;\n}\n</code>\n<|/ a tags=c#,sorting\
    \ |>\n<| c |>\nThis isn't what OP asked for. He is trying to sort an array.\n\
    <|/ c |>\n<| c |>\nYes, I'm trying to sort an array.\n<|/ c |>\n<| c |>\nThis\
    \ is wrong.  OP is asking for an implementation that uses `Array.Sort`.\n<|/ c\
    \ |>\n<| c |>\nYou don't need an implementation with Array.Sort, if you only want\
    \ to use standard .NET types.\n<|/ c |>\n<| c |>\nOP wants a solution using standard\
    \ C# types. Your code isn't any more efficient than Array.Sort, because it doesn't\
    \ implement any special sorting logic that OP asked for. Your code doesn't implement\
    \ any sort of comparison at all, which is not at all the same as OP's requirement\
    \ for sorting in ascending order.\n<|/ c |>\n<| a tags=c#,sorting dscore=0 |>\n\
    Here is a generic solution that allows for different types of comparisons between\
    \ elements (i.e. different sorting algorithms).\nThe input can be either an array\
    \ or a IOrderedEnumerable and the output is also an IOrderedEnumerable:\n<code>\n\
    public static class Extensions\n{\n    public static IOrderedEnumerable<T> OrderBy<T>(this\
    \ IOrderedEnumerable<T> source, Func<T, T, int> comparison)\n    {\n        if\
    \ (source == null) throw new ArgumentNullException(\"source\");\n        if (comparison\
    \ == null) throw new ArgumentNullException(\"comparison\");\nunittest\n{\n   \
    \ alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqvoq0tpc.d(23): Error: C style cast illegal, use cast(int)nums[i]\n/tmp/tmpqvoq0tpc.d(34):
    Error: Declaration expected, not \''<\''\n/tmp/tmpqvoq0tpc.d(37): Error: unterminated
    character constant\n/tmp/tmpqvoq0tpc.d(40): Error: unterminated character constant\n/tmp/tmpqvoq0tpc.d(46):
    Error: unterminated character constant\n/tmp/tmpqvoq0tpc.d(49): Error: unterminated
    character constant\n/tmp/tmpqvoq0tpc.d(49): Error: unterminated character constant\n/tmp/tmpqvoq0tpc.d(49):
    Error: unterminated character constant\n/tmp/tmpqvoq0tpc.d(49): Error: unterminated
    character constant\n/tmp/tmpqvoq0tpc.d(60): Error: Declaration expected, not \''if\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvoq0tpc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int counter = 0;\n    int sum = 0;\n    long[] result = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      if(sum < 0)\n        {\n            sum += 1000000000000000000L;\n    \
    \        counter--;\n        }\n        result[counter] = sum;\n        counter++;\n\
    \    }\n    for(int i = 0; i < result.length; i++)\n    {\n        if(result[i]\
    \ == 0)\n        {\n            result[i] = -1;\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 tags=c#,sorting,arrays |>\n<| a tags=c#,sorting,arrays\
    \ |>\nHere is the Solution for C# with Array.Sort()\n<code>\nusing System;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpr4qfp5ul.d(42): Error: Declaration expected, not \''<\''\n/tmp/tmpr4qfp5ul.d(48):
    Error: semicolon expected, not \''.\''\n/tmp/tmpr4qfp5ul.d(48): Error: no identifier
    for declarator .Collections.Generic\n/tmp/tmpr4qfp5ul.d(49): Error: semicolon
    expected, not \''.\''\n/tmp/tmpr4qfp5ul.d(49): Error: no identifier for declarator
    .Linq\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4qfp5ul.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.isEmpty()) {\n        return nums;\n    }\n    \n  \
    \  long sum = 0;\n    int[] arr;\n    int n = nums.length;\n    arr = new int[n];\n\
    \    for (int i = 0; i < n; ++i) {\n        arr[i] = nums[i];\n        sum +=\
    \ arr[i]%10;\n    }\n    arr = arr.sort((a, b) => (b-a));\n    \n    long[] results\
    \ = new long[arr.length];\n    int j = 0;\n    for (int i = 0; i < n; ++i) {\n\
    \        results[j++] = arr[i]%10;\n        arr[i]/=10;\n    }\n    results =\
    \ results.sort((a, b) => (b-a));\n    \n    int i = arr.length - 1;\n    for (int\
    \ i = 0; i < n; ++i) {\n        results[--i] = sum - arr[i] + results[i];\n  \
    \      arr[i] = 0;\n    }\n    return results;\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,java\
    \ dscore=0 |>\n<| a dscore=0 |>\nYou could use a custom comparator to sort an\
    \ array using the digits of the number in order\n<code>\npublic class Main{\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj6e6x1my.d(48): Error: Declaration expected, not \''<\''\n/tmp/tmpj6e6x1my.d(58):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpj6e6x1my.d(59): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpj6e6x1my.d(60): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpj6e6x1my.d(61): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpj6e6x1my.d(62): Error: Declaration expected, not \''assert\''\n/tmp/tmpj6e6x1my.d(63):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpj6e6x1my.d(64): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6e6x1my.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted = new long[nums.length];\n    long sum = 0;\n \
    \   int i = 0;\n    for(; i < nums.length; ++i){\n        sum = nums[i];\n   \
    \     int pos = -1;\n        for(; i < nums.length; ++i){\n            if(sum\
    \ > nums[i]){\n                sum = nums[i];\n                pos = i;\n    \
    \        }\n        }\n        sorted[pos] = nums[i];\n    }\n    return sorted;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,java |>\n<| c |>\nWhat about `order_by_points(new\
    \ long[] {100L, -2L, 30L, -40L, 60L, -90L})`? How does it handle this? How about\
    \ `order_by_points(new long[] {100, -23, 30, -40, 60, -90})`? How does it handle\
    \ this? It's also a little hard to see how this answers the original question.\n\
    <|/ c |>\n<| c |>\nYeah, your example is good but what about `order_by_points(new\
    \ long[] {100, -23, 30, -40, 60, -90})`? How does it handle this? `order_by_points(new\
    \ long[] {100, -23, 30, -40, 60, -90})` is the same as `order_by_points(new long[]\
    \ {100, -23, -30, -40, -60, -90})`\n<|/ c |>\n<| c |>\nYeah, and that's why I\
    \ said \"write a function\" not \"solve the problem\".\n<|/ c |>\n<| c |>\nOhh,\
    \ that's my bad. I missed that part of the description. My bad.\n<|/ c |>\n<|\
    \ c |>\n, your `order_by_points` function does not work as described for the examples\
    \ you gave because you are using a different ordering algorithm. From the question,\
    \ if you have multiple integers with the same sum of their digits, you should\
    \ order them based on their index in their original array. Your algorithm will\
    \ treat numbers with equal sum of their digits as equal. Therefore, your function\
    \ returns an empty array.\n<|/ c |>\n<| a dscore=0 |>\nThis is a bit inefficient,\
    \ but works:\n<code>\npublic static void main(String args[]) throws IOException\
    \ {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\
    \    int[] nums = br.readLine().split(\" \");\n    int[] result = new int[nums.length];\n\
    \    long sum = 0;\n    for (int i = 0; i < nums.length; i++) {\n        sum =\
    \ sum * 10 + nums[i];\n    }\n    for (int i = 0; i < nums.length; i++) {\n  \
    \      sum = sum / 10;\n        if (sum < 0) {\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7l1cwyf4.d(35): Error: Declaration expected, not \''<\''\n/tmp/tmp7l1cwyf4.d(38):
    Error: unterminated character constant\n/tmp/tmp7l1cwyf4.d(44): Error: unterminated
    character constant\n/tmp/tmp7l1cwyf4.d(47): Error: unterminated character constant\n/tmp/tmp7l1cwyf4.d(60):
    Error: Declaration expected, not \''for\''\n/tmp/tmp7l1cwyf4.d(60): Error: no
    identifier for declarator i\n/tmp/tmp7l1cwyf4.d(60): Error: Declaration expected,
    not \''<\''\n/tmp/tmp7l1cwyf4.d(60): Error: no identifier for declarator i\n/tmp/tmp7l1cwyf4.d(60):
    Error: Declaration expected, not \''++\''\n/tmp/tmp7l1cwyf4.d(62): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l1cwyf4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.length <= 0)\n    {\n        return new long[0];\n  \
    \  }\n    long total_num = 0;\n    long[] sorted_nums = new long[nums.length];\n\
    \    for(int i = 0; i < nums.length; i++)\n    {\n        int num_digits = nums[i]\
    \ % 10;\n        total_num += num_digits;\n        sorted_nums[i] = nums[i];\n\
    \    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        if(total_num\
    \ != sorted_nums[i])\n        {\n            int j;\n            for(j = 0; j\
    \ < nums.length; j++)\n            {\n                if(total_num == sorted_nums[j])\n\
    \                {\n                    break;\n                }\n          \
    \      else\n                {\n                    total_num -= sorted_nums[j];\n\
    \                    sorted_nums[j] = sorted_nums[i];\n                    total_num\
    \ += sorted_nums[j];\n                    sorted_nums[i] = total_num;\n      \
    \              break;\n                }\n            }\n        }\n    }\n  \
    \  return sorted_nums;\n}\n</code>\n<|/ a |>\n<| c |>\nthank you! I used your\
    \ logic for sorting and merged them into one function and got the answer\n<|/\
    \ c |>\n<| a |>\nI figured it out. I wrote a java function that sorts numbers\
    \ in ascending order as per their digits:\n<code>\nimport java.util.*;\npublic\
    \ class SortNumbers {\n    public static void main (String args[]){\n        int[]\
    \ nums = {4, 10, 25, -4, -25};\n        int[] sorted_nums = sort_in_descending_order(nums);\n\
    \        for(int num : sorted_nums){\n            System.out.print(num + \" \"\
    );\n        }\n    }\n    public static int[] sort_in_descending_order(int[] nums)\
    \ {\n        int[] sorted_nums = new int[nums.length];\n        for(int i = 0;\
    \ i < nums.length; i++)\n        {\n            int num_digits = nums[i] % 10;\n\
    \            sorted_nums[i] = nums[i];\n        }\n        for(int i = 0; i <\
    \ nums.length; i++)\n        {\n            for(int j = nums.length - 1; j > i;\
    \ j--)\n            {\n                if(nums[j] < nums[j-1] && num_digits <\
    \ nums[j] % 10)\n                {\n                    int temp = nums[j];\n\
    \                    nums[j] = nums[j-1];\n                    nums[j-1] = temp;\n\
    \                }\n            }\n        }\n        return sorted_nums;\n  \
    \  }\n}\n</code>\noutput:\n-25 4 10 25\n<|/ a tags=sorting,algorithm,java,arrays\
    \ dscore=0 |>\n<| a dscore=0 tags=sorting,algorithm,java,arrays |>\n<code>\npublic\
    \ static void main(String[] args) {\n    int [] a = {9,4,6,2,6,3};\n    sort(a);\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgzei2xi8.d(55): Error: Declaration expected, not \''<\''\n/tmp/tmpgzei2xi8.d(68):
    Error: semicolon expected, not \'':\''\n/tmp/tmpgzei2xi8.d(68): Error: expression
    expected, not \'':\''\n/tmp/tmpgzei2xi8.d(68): Error: found \''sorted_nums\''
    when expecting \'';\'' following for condition\n/tmp/tmpgzei2xi8.d(69): Error:
    identifier expected following \''.\'', not \''out\''\n/tmp/tmpgzei2xi8.d(94):
    Error: Declaration expected, not \''<\''\n/tmp/tmpgzei2xi8.d(102): Error: function
    declaration without return type. (Note that constructors are always named \''this\'')\n/tmp/tmpgzei2xi8.d(102):
    Error: no identifier for declarator sort(a)\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpgzei2xi8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long max_sum = 0, min_sum = 0, sum = 0;\n    int n = nums.length;\n\
    \    int i = 0;\n    int count = 0;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjl_ucsi_.d(23): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl_ucsi_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    int[] sumIndex = new int[nums.length];\n \
    \   for (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n  \
    \      sumIndex[i] = i;\n    }\n    Arrays.sort(sumIndex, (x, y) -> (int) std.math.abs(sum\
    \ - nums[y]); \n    return nums[sumIndex];\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=c++,algorithm |>\nThis code worked for me : \n<code>\n#include <iostream>\n\
    #include <array>\n#include <algorithm>\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpelt2xerq.d(26): Error: expression expected, not \''>\''\n/tmp/tmpelt2xerq.d(26):
    Error: found \'')\'' when expecting \''.\'' following int\n/tmp/tmpelt2xerq.d(26):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmpelt2xerq.d(27): Error: expression
    expected, not \''return\''\n/tmp/tmpelt2xerq.d(27): Error: found \''nums\'' when
    expecting \'',\''\n/tmp/tmpelt2xerq.d(27): Error: found \'';\'' when expecting
    \'',\''\n/tmp/tmpelt2xerq.d(28): Error: expression expected, not \''}\''\n/tmp/tmpelt2xerq.d(29):
    Error: expression expected, not \''/\''\n/tmp/tmpelt2xerq.d(29): Error: found
    \''code\'' when expecting \'',\''\n/tmp/tmpelt2xerq.d(29): Error: expression expected,
    not \''>\''\n/tmp/tmpelt2xerq.d(30): Error: expression expected, not \''|\''\n/tmp/tmpelt2xerq.d(30):
    Error: found \''dscore\'' when expecting \'',\''\n/tmp/tmpelt2xerq.d(30): Error:
    expression expected, not \''=\''\n/tmp/tmpelt2xerq.d(30): Error: found \''1\''
    when expecting \'',\''\n/tmp/tmpelt2xerq.d(30): Error: expression expected, not
    \''|\''\n/tmp/tmpelt2xerq.d(31): Error: expression expected, not \''<\''\n/tmp/tmpelt2xerq.d(30):
    Error: 0 > 0 must be parenthesized when next to operator |\n/tmp/tmpelt2xerq.d(31):
    Error: found \''tags\'' when expecting \'',\''\n/tmp/tmpelt2xerq.d(31): Error:
    expression expected, not \''=\''\n/tmp/tmpelt2xerq.d(31): Error: found \''c\''
    when expecting \'',\''\n/tmp/tmpelt2xerq.d(31): Error: expression expected, not
    \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelt2xerq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length == 0) \n        return nums;\n    \n    long\
    \ min = nums[0];\n    long max = nums[0];\n    for (int i = 0; i < nums.length;\
    \ ++i) {\n        long tmp = nums[i];\n        nums[i] = tmp;\n        if (tmp\
    \ < min) min = tmp;\n        if (tmp > max) max = tmp;\n    }\n    \n    List<Long>\
    \ sorted = new ArrayList<Long>();\n    long curr = max;\n    while (true) {\n\
    \        sorted.add(curr);\n        int idx = 0;\n        while (idx < sorted.size()\
    \ && sorted[idx] <= curr) {\n            ++idx;\n        }\n        curr = sorted[idx];\n\
    \    }\n    return nums.toLongArray(0);\n}\n</code>\nI did not compile this code,\
    \ but it should work. \nI used ArrayList to sort because I didn't want to use\
    \ a bubble sort.\n<|/ a tags=java,sorting dscore=1 |>\n<| a |>\n<code>\npublic\
    \ static void main(String[] args) {\n    long[] nums = new long[args.length];\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplut0_967.d(31): Error: found \''>\'' when expecting \'';\''
    following statement\n/tmp/tmplut0_967.d(31): Error: found \''>\'' when expecting
    \'';\'' following statement\n/tmp/tmplut0_967.d(31): Error: expression expected,
    not \'')\''\n/tmp/tmplut0_967.d(31): Error: found \'';\'' when expecting \'')\''\n/tmp/tmplut0_967.d(32):
    Error: found \''long\'' when expecting \'';\'' following statement\n/tmp/tmplut0_967.d(43):
    Error: Declaration expected, not \''<\''\n/tmp/tmplut0_967.d(45): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplut0_967.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // write your function here\n    long[] ret = new long[nums.length];\n\
    \    Arrays.sort(nums);\n    for (int i = 0; i < ret.length; i++) \n    {\n  \
    \      ret[i] = nums[i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprr41y1l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] counts = new int[10];\n    for(int i : nums)\n        counts[i\
    \ % 10] ++;\n    int[] res = new int[10];\n    for(int i = 0; i < 10; i++)\n \
    \       res[i] = counts[i];\n    for(int i = 10; i < nums.length; i++)\n    {\n\
    \        int index = nums[i - 10]%10;\n        res[index] += nums[i];\n    }\n\
    \    return Arrays.copyOf(res, 10);\n}\n</code>\n<|/ a |>\n<| c |>\n\"If you want\
    \ it to work, don't use the Java Arrays.sort() method as it is not guaranteed\
    \ to work.\" - from https://www.geeksforgeeks.org/java-arrays-sort-method/\n<|/\
    \ c |>\n<| c |>\nWell, I guess I should have mentioned that I do not want to rely\
    \ on any libraries. I have edited my question to not ask for a library, as that\
    \ wasn't exactly clear from my question. I also did say that I am looking for\
    \ a solution without relying on libraries.\n<|/ c |>\n<| c |>\nI edited the solution\
    \ to avoid any dependency on libraries.\n<|/ c |>\n<| a tags=java,arrays,sorting,algorithm\
    \ dscore=0 |>\nYou can simply find the sum of digit of all the elements in the\
    \ array and sort them according to their sum.\nExample: \nArray:\n<code>\n[12,\
    \ -6, -2, -4, -9, 9]\n</code>\nSorted Array:\n<code>\n[-6, -9, 9, -2, 12]\n</code>\n\
    Code:\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6haykzff.d(20): Error: semicolon expected, not \'':\''\n/tmp/tmp6haykzff.d(20):
    Error: expression expected, not \'':\''\n/tmp/tmp6haykzff.d(20): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmp6haykzff.d(32):
    Error: Declaration expected, not \''<\''\n/tmp/tmp6haykzff.d(38): Error: unterminated
    character constant\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6haykzff.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] res = new long[nums.length];\n    Arrays.sort(res);\n\
    \    \n    long sum = 0;\n    for (int i=0; i<res.length; i++){\n        sum +=\
    \ nums[i];\n    }\n    for (int i=0; i<res.length; i++){\n        nums[i] = nums[i]\
    \ - sum;\n    }\n    return nums;\n}\n</code>\n<|/ a tags=c#,arrays,sorting dscore=1\
    \ |>\n<| a tags=c#,arrays,sorting |>\nJust to throw some code out there that doesn't\
    \ use arrays. Just using standard library methods like foreach and sort.\n<code>\n\
    using System;\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8hm042ze.d(31): Error: Declaration expected, not \''<\''\n/tmp/tmp8hm042ze.d(34):
    Error: unterminated character constant\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmp8hm042ze.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tlong sum=0;\n\tfor (int i=0; i<nums.length; i++)\n\t{\n\t\tsum+=nums[i];\n\
    \t}\n\tint maxi=nums.length;\n\tlong[] sorted=new long[maxi];\n\tint i=0;\n\t\
    while (sum>0)\n\t{\n\t\tsorted[i++]=nums[sum%10];\n\t\tsum/=10;\n\t}\n\treturn\
    \ sorted;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0wssh61r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] nums2;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int sum = 0;\n    nums2 = nums;\n    while ( i < nums.length && j < nums2.length)\n\
    \    {\n        sum = nums[i] + nums2[j];\n        if (sum > 0)\n        {\n \
    \           i++;\n        }\n        else\n        {\n            j++;\n     \
    \   }\n    }\n    if (j < nums2.length)\n    {\n        int len = j;\n       \
    \ while ( k < nums2.length)\n        {\n            sum = nums[k] + nums2[len];\n\
    \            if (sum > 0)\n            {\n                nums[k] = sum;\n   \
    \             len++;\n            }\n            else\n            {\n       \
    \         k++;\n            }\n        }\n        for (int l = 0; l < len; l++)\n\
    \        {\n            nums[l] = nums2[l];\n        }\n    }\n    return nums;\n\
    }\n</code>\n<|/ a tags=algorithm,sorting,c#,arrays |>\n<| a dscore=1 tags=algorithm,sorting,c#,arrays\
    \ |>\n<code>\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybmk3soy.d(60): Error: Declaration expected, not \''<\''\n/tmp/tmpybmk3soy.d(68):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpybmk3soy.d(69): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpybmk3soy.d(70): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpybmk3soy.d(71): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpybmk3soy.d(72): Error: Declaration expected, not \''assert\''\n/tmp/tmpybmk3soy.d(73):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpybmk3soy.d(74): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybmk3soy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length < 2) return nums;\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa6bne_57.d(20): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6bne_57.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sortedArray = new long[nums.length];\n    int index =\
    \ 0;\n    int i = 0;\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2bc_gje9.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bc_gje9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = std.math.reduce(nums);\n    long index = -1;\n   \
    \ \n    for(int i = 0; i < nums.length; i++)\n    {\n        long sum = std.math.reduce(nums);\n\
    \        if(sum == nums[i])\n        {\n            index = i;\n            break;\n\
    \        }\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\n   \
    \ assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6vsg1woc.d(31): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6vsg1woc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  int i, sum, summand;\n  long temp;\n  long[] sorted;\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphnsvdnj7.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnsvdnj7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length <= 1)\n        return nums;\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpziwc89tb.d(21): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpziwc89tb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    //write your code here\n    if (nums == null || nums.length ==\
    \ 0)\n        return nums;\n    int sum = 0, len = nums.length;\n    for (int\
    \ i = 0; i < len; i++)\n        sum += nums[i];\n    Arrays.sort(nums, 0, len,\
    \ new Comparator<long>() {\n        public int compare(long a, long b) {\n   \
    \         return Long.compare(sum_of_digits(a), sum_of_digits(b));\n        }\n\
    \    });\n    return nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiedsrot5.d(25): Error: found \''>\'' when expecting \''.\''
    following long\n/tmp/tmpiedsrot5.d(25): Error: found \''(\'' when expecting identifier
    following \''long.\''\n/tmp/tmpiedsrot5.d(25): Error: found \''{\'' when expecting
    \'';\'' following statement\n/tmp/tmpiedsrot5.d(26): Error: found \''public\''
    instead of statement\n/tmp/tmpiedsrot5.d(29): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiedsrot5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int len = nums.length;\n\
    \    int index = 0;\n    \n    for (int i = 0; i < len; i++) {\n        int digit\
    \ = nums[i] / 10;\n        \n        long sum = 0;\n        for (int j = 0; j\
    \ < len; j++) {\n            if (j != i) {\n                sum += nums[j];\n\
    \            }\n        }\n        \n        if (sum > digit) {\n            \n\
    \            int pos = index++;\n            while (sum > digit) {\n         \
    \       result[pos] = result[pos];\n                pos++;\n                sum\
    \ -= result[pos];\n            }\n            \n            result[pos] = nums[i];\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nvar arr = new int[] { 0, 5, 9, 2, 3 };\nvar result =\
    \ arr.OrderByDescending(i => int.Parse(string.Concat(i.ToString().ToCharArray().Select(c\
    \ => (char) c).ToArray())));\n</code>\n<|/ a tags=arrays,algorithm,c#,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\nvar array = new int[] { 0, 5, 9, 2, 3 };\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp9j059pmj.d(48): Error: Declaration expected, not \''<\''\n/tmp/tmp9j059pmj.d(53):
    Error: C style cast illegal, use cast(char)c\n/tmp/tmp9j059pmj.d(54): Error: Declaration
    expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9j059pmj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if((nums == null) || (nums.length == 0))\n        return nums;\n\
    \    \n    long[] sorted = new long[nums.length];\n    \n    for(int i=0; i<nums.length;\
    \ i++)\n    {\n        int sum = 0;\n        for(int j=0; j<i; j++)\n        {\n\
    \            sum += (long)nums[j];\n        }\n        \n        sorted[i] = sum;\n\
    \    }\n    \n    std.sort(sorted, 0, sorted.length);\n    \n    return sorted;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1q0rvs03.d(29): Error: C style cast illegal, use cast(long)nums[j]\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1q0rvs03.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    int idx = 0;\n  \
    \  for (long x : nums)\n    {\n        int sum = x.digitSum();\n        while(sum\
    \ > 0)\n        {\n            result[idx++] = x;\n            sum -= x.digitSum();\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq7vzgtnx.d(21): Error: semicolon expected, not \'':\''\n/tmp/tmpq7vzgtnx.d(21):
    Error: expression expected, not \'':\''\n/tmp/tmpq7vzgtnx.d(21): Error: found
    \''nums\'' when expecting \'';\'' following for condition\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq7vzgtnx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    /*\n        Time Complexity: O(n)\n        Space Complexity:\
    \ O(n)\n    */\n    int n = nums.length;\n    long[] sorted = new long[n];\n \
    \   int i, index;\n    long sum = 0;\n    long digitSum;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp983gitxe.d(28): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp983gitxe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long result = nums[0];\n    int len = 1;\n    for (int i = 1;\
    \ i < nums.length; i++)\n    {\n        int d = std.math.abs(nums[i]) + std.math.abs(result);\n\
    \        if (d < len)\n        {\n            len = d;\n            result = nums[i];\n\
    \        }\n    }\n    \n    long[] res = new long[len];\n    long sum = 0;\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        sum += std.math.abs(nums[i]);\n\
    \        if (sum == result)\n            res[len-1-i] = nums[i];\n    }\n    return\
    \ res;\n}\n</code>\n<|/ a tags=c#,algorithm,c++,sorting dscore=2 |>\n<| c |>\n\
    In your solution, you are sorting by the sum of absolute values of the digits.\
    \ This is not correct: for example, order_by_points([1L, 11L, -12L]) returns [-12,\
    \ -11L, 1L]. Also, you should change the variable len because it will not match\
    \ the length of nums in order_by_points.\n<|/ c |>\n<| c |>\nThis solution is\
    \ wrong. It is not even close. The right answer is the one with O(n) worst-case\
    \ complexity (which is exactly the one provided by the other answer).\n<|/ c |>\n\
    <| c |>\nYeah, the answer provided by is wrong. I've just edited my answer to\
    \ correct it.\n<|/ c |>\n<| c |>\nYes, I think you have the right idea, but your\
    \ sorting logic is not right.  Try `order_by_points([-12L])`.\n<|/ c |>\n<| c\
    \ |>\nYes, you're right. It's easy to get it wrong, but if you check my algorithm\
    \ carefully you will see that it's easy to make it right.\n<|/ c |>\n<| a |>\n\
    I believe that the following Python code does the job:\n<code>\ndef sort(arr):\n\
    \    digits = map(int, str(sum(map(abs, arr))))\n    return sorted(arr, key=lambda\
    \ x: digits[digits.index(x)])\n</code>\nIt converts all the elements of the list\
    \ into a string, sums them, extracts the digits using map and extracts the indices\
    \ using index and then sorts using the key. The above code also works on negative\
    \ numbers, since they have a negative digit.\n<|/ a tags=c#,algorithm,c++,sorting\
    \ dscore=2 |>\n<| c |>\nThis is wrong: for example, `sort([-12L])` returns `[-12,\
    \ -11L, 1L]`.\n<|/ c |>\n<| c |>\nSorry, I forgot to add that in my answer.\n\
    <|/ c |>\n<| c |>\n\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj3oos6nz.d(41): Error: Declaration expected, not \''<\''\n/tmp/tmpj3oos6nz.d(50):
    Error: unterminated character constant\n/tmp/tmpj3oos6nz.d(56): Error: unterminated
    character constant\n/tmp/tmpj3oos6nz.d(56): Error: unterminated character constant\n/tmp/tmpj3oos6nz.d(56):
    Error: unterminated character constant\n/tmp/tmpj3oos6nz.d(79): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpj3oos6nz.d(80): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpj3oos6nz.d(81): Error: Declaration expected, not \''assert\''\n/tmp/tmpj3oos6nz.d(82):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpj3oos6nz.d(83): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpj3oos6nz.d(84): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpj3oos6nz.d(85): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3oos6nz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n  long[] result = new long[nums.length];\n  std.array.resize(result,\
    \ nums.length);\n  std.array.resize(result, nums.length);\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbuvfgzsv.d(22): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuvfgzsv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted_nums = nums.clone(), sorted_sums;\n    std.array.append(sorted_sums,\
    \ 0);\n    std.array.append(sorted_nums, 0);\n    for (long i=0; i<nums.length;\
    \ i++) {\n        sorted_nums[i]++;\n        sorted_sums[i]+= nums[i];\n    }\n\
    \    std.array.append(sorted_nums, 0);\n    std.array.append(sorted_sums, 0);\n\
    \    long index = 1;\n    std.array.append(sorted_sums, 0);\n    std.array.append(sorted_nums,\
    \ 0);\n    for(;;) {\n        long l = std.math.toInt64(sorted_sums[index]);\n\
    \        if (l<0) {\n            index++;\n            if (index==sorted_sums.length)\n\
    \                return sorted_nums.clone();\n        }\n        else if (l==0)\
    \ {\n            index++;\n            if (index==sorted_sums.length)\n      \
    \          return sorted_nums.clone();\n        }\n        std.array.append(sorted_sums,\
    \ 0);\n        std.array.append(sorted_nums, 0);\n        std.array.append(sorted_sums,\
    \ 0);\n        std.array.append(sorted_nums, 0);\n        long c = std.math.toInt64(sorted_sums[index]);\n\
    \        long a = std.math.toInt64(sorted_nums[index]);\n        for (long i=0;\
    \ i<c; i++) {\n            sorted_nums[index+i] = sorted_nums[index+i] + a;\n\
    \            sorted_sums[index+i] = std.math.toInt64(sorted_nums[index+i]);\n\
    \        }\n        std.array.append(sorted_sums, 0);\n        std.array.append(sorted_nums,\
    \ 0);\n        std.array.append(sorted_sums, 0);\n        std.array.append(sorted_nums,\
    \ 0);\n    }\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is my favorite solution,\
    \ very fast and simple. Thanks\n<|/ c |>\n<| c |>\nI tested the solution with\
    \ the dataset of (100, 100, 100, 100). It's very fast, less than 1ms per element,\
    \ and very fast. Thanks for sharing your solution!\n<|/ c |>\n<| a dscore=4 |>\n\
    I believe the following is quite efficient. I will benchmark it against a solution\
    \ using std.array and std.sort.\n<code>\nfunction order(int[] a){\n   var l =\
    \ a.length;\n   var ans = std.array[];\n   var sum = 0;\n   var i = l;\n   while(i\
    \ != 0){\n      ans[i] = sum;\n      sum += a[i-1];\n      i--;\n   }\n   ans[i]\
    \ = sum;\n   var sorts = std.sort[];\n   while(i>0)\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppnwgw_om.d(59): Error: Declaration expected, not \''<\''\n/tmp/tmppnwgw_om.d(65):
    Error: unterminated character constant\n/tmp/tmppnwgw_om.d(75): Error: Declaration
    expected, not \''while\''\n/tmp/tmppnwgw_om.d(77): Error: no identifier for declarator
    sum\n/tmp/tmppnwgw_om.d(77): Error: Declaration expected, not \''+=\''\n/tmp/tmppnwgw_om.d(78):
    Error: no identifier for declarator i\n/tmp/tmppnwgw_om.d(78): Error: Declaration
    expected, not \''--\''\n/tmp/tmppnwgw_om.d(79): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnwgw_om.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    // TODO\n    long[] result = new long[nums.length];\n    int\
    \ num_sum = sumOfDigits(nums);\n    for (int i = 0; i < nums.length; i++) {\n\
    \        result[i] = nums[i];\n        result[i + nums.length - num_sum] = nums[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqo19_68.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    return nums.sort((a,b) =>\n        {\n            int aS = sumDigits(a);\n\
    \            int bS = sumDigits(b);\n            if(aS == bS) return a.compareTo(b);\n\
    \            return aS - bS;\n        });\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_gcwln1a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int n = nums.length;\n    long[] numsCopy = new long[n];\n  \
    \  for(int i=0; i<n; ++i)\n    {\n        numsCopy[i] = nums[i];\n    }\n    Arrays.sort(numsCopy);\n\
    \    int minSum = numsCopy[0];\n    int maxSum = numsCopy[0];\n    for(int i=0;\
    \ i<n-1; ++i)\n    {\n        long sum = numsCopy[i];\n        for(int j=i+1;\
    \ j<n; ++j)\n        {\n            sum += numsCopy[j];\n            if(sum <\
    \ 0)\n            {\n                sum = (sum*-1L) + numsCopy[j];\n        \
    \    }\n        }\n        if(sum < minSum)\n        {\n            minSum = sum;\n\
    \        }\n        else if(sum > maxSum)\n        {\n            maxSum = sum;\n\
    \        }\n    }\n    long[] results = new long[nums.length];\n    for(int i=0;\
    \ i<n; ++i)\n    {\n        long sum = numsCopy[i];\n        for(int j=i+1; j<n;\
    \ ++j)\n        {\n            sum += numsCopy[j];\n            if(sum < 0)\n\
    \            {\n                sum = (sum*-1L) + numsCopy[j];\n            }\n\
    \        }\n        if(sum == minSum)\n        {\n            results[i] = nums[i];\n\
    \        }\n        else if(sum == maxSum)\n        {\n            results[i]\
    \ = nums[i];\n        }\n        else\n        {\n            results[i] = sum;\n\
    \        }\n    }\n    return results;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I really like that code but as I said in the original post, I need to sort the\
    \ array of integers based on the sum of the digits.\n<|/ c |>\n<| c |>\nI just\
    \ updated my post. please take a look at it.\n<|/ c |>\n<| c |>\nThanks for your\
    \ help. It almost works, but not quite. The problem with this code is that it\
    \ produces an incorrect output for negative numbers. For example: order_by_points([-1L,\
    \ -11L, 1L, -12L, 11L]) should produce [-1L, -11L, 1L, -12L, 11L]. It gives [-1L,\
    \ -11L, 1L, -12L, 11L] instead. Same problem with order_by_points([1L, -11L, -1L,\
    \ -12L, 11L]) and order_by_points([-1L, 1L, -11L, -12L, 11L]).\n<|/ c |>\n<| c\
    \ |>\nThanks for the update. Now it works perfectly.\n<|/ c |>\n<| a |>\nThis\
    \ solution is based on a modified version of the following post: Sort a list by\
    \ a property \nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpawt3ym8_.d(75): Error: Declaration expected, not \''<\''\n/tmp/tmpawt3ym8_.d(95):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpawt3ym8_.d(96): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpawt3ym8_.d(97): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpawt3ym8_.d(98): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpawt3ym8_.d(99): Error: Declaration expected, not \''assert\''\n/tmp/tmpawt3ym8_.d(100):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpawt3ym8_.d(101): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpawt3ym8_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    SortedList<long, long> result = new SortedList<long, long>();\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjz4ht1n0.d(19): Error: found \'',\'' when expecting \''.\''
    following long\n/tmp/tmpjz4ht1n0.d(19): Error: found \''long\'' when expecting
    identifier following \''long.\''\n/tmp/tmpjz4ht1n0.d(19): Error: found \''>\''
    when expecting \'';\'' following statement\n/tmp/tmpjz4ht1n0.d(19): Error: found
    \'',\'' when expecting \''.\'' following long\n/tmp/tmpjz4ht1n0.d(19): Error:
    found \''long\'' when expecting identifier following \''long.\''\n/tmp/tmpjz4ht1n0.d(19):
    Error: found \''>\'' when expecting \'';\'' following statement\n/tmp/tmpjz4ht1n0.d(19):
    Error: expression expected, not \'')\''\n/tmp/tmpjz4ht1n0.d(19): Error: found
    \'';\'' when expecting \'')\''\n/tmp/tmpjz4ht1n0.d(20): Error: found \''unittest\''
    when expecting \'';\'' following statement\n/tmp/tmpjz4ht1n0.d(31): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpjz4ht1n0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] result = new long[nums.length];\n    \n    long[] count\
    \ = new long[nums.length];\n    for( int i = 0; i < count.length; ++i)\n     \
    \   count[i] = 0;\n    \n    for( int i = 0; i < nums.length; ++i)\n        count[nums[i]]\
    \ += 1;\n    \n    for( int i = 0; i < count.length; ++i)\n        result[i] =\
    \ nums[count[i]];\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf0oc69fg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int count = 0;\n    bool sorted = false;\n    long sum = 0;\n\
    \    foreach(long n in nums)\n    {\n        count++;\n        sum += n;\n   \
    \ }\n    while(!sorted)\n    {\n        sorted = true;\n        foreach(long n\
    \ in nums)\n        {\n            if(n == sum)\n            {\n             \
    \   foreach(long n in nums)\n                {\n                    if(n > sum)\n\
    \                    {\n                        sorted = false;\n            \
    \            break;\n                    }\n                }\n            }\n\
    \        }\n    }\n    long[] result = new long[count];\n    int index = 0;\n\
    \    foreach(long n in nums)\n    {\n        result[index++] = n;\n        sum\
    \ += n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy6nr0co6.d(22): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpy6nr0co6.d(30):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpy6nr0co6.d(34): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpy6nr0co6.d(47): Error: found \''in\''
    when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6nr0co6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int[] ds = new int[nums.length];\n    \n    for (int i = 0; i\
    \ < nums.length; i++)\n        ds[i] = int(nums[i]) / int(10*pow(10, i)); // TODO:\
    \ use std.math.mod;\n    \n    Arrays.sort(ds);\n    \n    long[] result = new\
    \ long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n        result[i]\
    \ = nums[i] * 10 + ds[i];\n    \n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThank you for posting the solution!\n<|/ c |>\n<| c |>\n`mod` seems inefficient.\
    \ Use `pow` instead.\n<|/ c |>\n<| c |>\n: Thanks for the feedback, I'll update\
    \ my answer accordingly.\n<|/ c |>\n<| a tags=arrays,c,sorting |>\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6_l3iecr.d(22): Error: found \''(\'' when expecting \''.\''
    following int\n/tmp/tmp6_l3iecr.d(22): Error: found \'')\'' when expecting \'';\''
    following statement\n/tmp/tmp6_l3iecr.d(22): Error: found \''/\'' instead of statement\n/tmp/tmp6_l3iecr.d(32):
    Error: Declaration expected, not \''<\''\n/tmp/tmp6_l3iecr.d(41): Error: unterminated
    character constant\n/tmp/tmp6_l3iecr.d(53): Error: Declaration expected, not \''assert\''\n/tmp/tmp6_l3iecr.d(54):
    Error: Declaration expected, not \''assert\''\n/tmp/tmp6_l3iecr.d(55): Error:
    Declaration expected, not \''assert\''\n/tmp/tmp6_l3iecr.d(56): Error: Declaration
    expected, not \''assert\''\n/tmp/tmp6_l3iecr.d(57): Error: Declaration expected,
    not \''assert\''\n/tmp/tmp6_l3iecr.d(58): Error: Declaration expected, not \''assert\''\n/tmp/tmp6_l3iecr.d(59):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_l3iecr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    \n    int i = 1;\n    int sum = 0;\n    long total = 0;\n   \
    \ int max = nums.length - 1;\n    \n    while (i < max) \n    {\n        sum +=\
    \ nums[i];\n        total = sum;\n        i++;\n    }\n    \n    return nums;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java,c |>\n<| a tags=sorting,arrays,algorithm,java,c\
    \ |>\n<code>\n#include <stdio.h>\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqpvu9052.d(34): Error: Declaration expected, not \''<\''\n/tmp/tmpqpvu9052.d(43):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqpvu9052.d(44): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpqpvu9052.d(45): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpqpvu9052.d(46): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpqpvu9052.d(47): Error: Declaration expected, not \''assert\''\n/tmp/tmpqpvu9052.d(48):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqpvu9052.d(49): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpvu9052.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if (nums.length == 0) return nums;\n    long[] temp = new long[nums.length];\n\
    \    int numSum = 0, index;\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        index = i;\n        while (nums[index] >= 10)\n        {\n          \
    \  numSum += nums[index] - 10;\n            index = (index + 1) % nums.length;\n\
    \        }\n        temp[i] = nums[index];\n    }\n    long newNumSum = numSum;\n\
    \    int i;\n    for (i = 0; i < temp.length; i++) \n    {\n        numSum +=\
    \ temp[i];\n        newNumSum += numSum;\n    }\n    int[] temp2 = new int[newNumSum\
    \ + 1];\n    int numSum2 = 0;\n    int index2 = 0;\n    for (i = 0; i < temp.length;\
    \ i++) \n    {\n        index = i;\n        while (nums[index] >= 10)\n      \
    \  {\n            numSum += nums[index] - 10;\n            index = (index + 1)\
    \ % nums.length;\n        }\n        temp2[index2++] = nums[index];\n    }\n \
    \   int k;\n    for (k = 0; k < newNumSum; k++) \n    {\n        int j;\n    \
    \    for (j = 0; j < newNumSum; j++) \n        {\n            if (temp2[j] > temp[k])\n\
    \            {\n                temp[k] = temp2[j];\n                k--;\n  \
    \          }\n        }\n    }\n    return temp;\n}\n</code>\n<|/ a tags=sorting,arrays,java\
    \ dscore=3 |>\n<| a tags=sorting,arrays,java |>\nI used this code to sort an array\
    \ with unique elements:\n<code>\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqil4mulf.d(67): Error: Declaration expected, not \''<\''\n/tmp/tmpqil4mulf.d(76):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqil4mulf.d(77): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpqil4mulf.d(78): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpqil4mulf.d(79): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpqil4mulf.d(80): Error: Declaration expected, not \''assert\''\n/tmp/tmpqil4mulf.d(81):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpqil4mulf.d(82): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqil4mulf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int i = 0;\n    int j = 0;\n    int temp = 0;\n    int sum =\
    \ 0;\n    int result[] = new long[nums.length];\n    for (int k = 0; k < nums.length;\
    \ k++) {\n        temp = nums[k];\n        sum += temp % 10;\n        i++;\n \
    \   }\n    while (i < j) {\n        temp = sum;\n        sum = 0;\n        while\
    \ (i < j) {\n            sum += (nums[i] - temp % 10) * 10;\n            i++;\n\
    \        }\n        result[j] = sum;\n        j++;\n    }\n    for (int k = 0;\
    \ k < nums.length; k++) {\n        temp = sum;\n        sum = 0;\n        while\
    \ (i < j) {\n            sum += nums[k] * temp / 10;\n            i++;\n     \
    \   }\n        result[k] = sum;\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=sorting,arrays,algorithm,java |>\nJust as a side note,\
    \ if you are trying to sort a large array in ascending order you should use quicksort\
    \ instead of insertion sort or selection sort. It is both faster and easier to\
    \ implement.\n<|/ a dscore=1 |>\n<| c |>\nquicksort would not help as the problem\
    \ requires sorting in descending order.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    class Solution {\n    public List<Integer> sortArray(int[] nums) {\n        List<Integer>\
    \ result = new ArrayList<>();\n        for(int i : nums) {\n            int digit\
    \ = i % 10;\n            result.add(digit * (int)(Math.log10(i)/Math.log10(10))+1);\n\
    \        }\n        Collections.sort(result);\n        return result;\n    }\n\
    }\n</code>\n<|/ a tags=sorting,arrays,algorithm,java |>\n<| c |>\nThanks for contributing\
    \ an answer! Please be sure to read the [FAQ on Self-Promotion](http://stackoverflow.com/faq#promotion)\
    \ carefully. Also note that it is *required* that you post a disclaimer every\
    \ time you link to your own site/product.\n<|/ c |>\n<| c |>\nThank you for the\
    \ suggestion, I will keep that in mind.\n<|/ c |>\n<| a dscore=0 tags=sorting,arrays,algorithm,java\
    \ |>\nA solution using Java 8 and streams:\n<code>\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpowaosaj5.d(50): Error: Declaration expected, not \''<\''\n/tmp/tmpowaosaj5.d(63):
    Error: Declaration expected, not \''for\''\n/tmp/tmpowaosaj5.d(65): Error: unexpected
    ( in declarator\n/tmp/tmpowaosaj5.d(65): Error: function declaration without return
    type. (Note that constructors are always named \''this\'')\n/tmp/tmpowaosaj5.d(65):
    Error: found \''(\'' when expecting \'')\''\n/tmp/tmpowaosaj5.d(65): Error: no
    identifier for declarator result.add(digit*(int))\n/tmp/tmpowaosaj5.d(65): Error:
    semicolon expected following function declaration\n/tmp/tmpowaosaj5.d(65): Error:
    function declaration without return type. (Note that constructors are always named
    \''this\'')\n/tmp/tmpowaosaj5.d(65): Error: no identifier for declarator Math.log10(i)\n/tmp/tmpowaosaj5.d(65):
    Error: semicolon expected following function declaration\n/tmp/tmpowaosaj5.d(65):
    Error: Declaration expected, not \''/\''\n/tmp/tmpowaosaj5.d(66): Error: unrecognized
    declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowaosaj5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums.isEmpty()) return nums;\n    long numSum = 0;\n    long[]\
    \ results = new long[nums.length];\n    for(int i = 0; i < nums.length; i++)\n\
    \    {\n        numSum += nums[i];\n        results[i] = nums[i];\n    }\n   \
    \ Arrays.sort(results);\n    int count = 0;\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        if(nums[i] == results[i]) count++;\n    }\n    while(count\
    \ > 0)\n    {\n        int index = 0;\n        long sum = 0;\n        for(int\
    \ i = 0; i < nums.length; i++)\n        {\n            sum += nums[i];\n     \
    \       if(sum == results[i]) break;\n            index++;\n        }\n      \
    \  results[index] = nums[i];\n        count--;\n    }\n    return results;\n}\n\
    </code>\n<|/ a tags=java,algorithm,arrays dscore=1 |>\n<| a |>\nHere is a solution\
    \ that uses streams.\n<code>\nList<Integer> nums = Arrays.asList(1, -1, -12, -11,\
    \ 11);\nnums.stream().sorted((num1, num2) -> Integer.compare(num1, num2)).distinct().collect(Collectors.toList());\n\
    </code>\nThe stream produces a sorted list of unique numbers in ascending order.\
    \ The stream also has a distinct() method which returns a stream of unique items.\n\
    <|/ a tags=java,algorithm,arrays dscore=0 |>\n<| a |>\nIn Java 8, the solution\
    \ by Nakov can be improved by using IntStream.range and flatMap:\n<code>\nList<Integer>\
    \ result = IntStream.range(0, array.length).flatMap(v -> IntStream.range(v, array.length\
    \ + v)).distinct().sorted().boxed().collect(Collectors.toList());\n</code>\n<|/\
    \ a dscore=0 tags=java,algorithm,arrays |>\n<| a tags=java,algorithm,arrays |>\n\
    This works even with negative numbers and returns all numbers in ascending order:\n\
    <code>\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi7ahrrzv.d(48): Error: Declaration expected, not \''<\''\n/tmp/tmpi7ahrrzv.d(54):
    Error: function declaration without return type. (Note that constructors are always
    named \''this\'')\n/tmp/tmpi7ahrrzv.d(54): Error: no identifier for declarator
    nums.stream()\n/tmp/tmpi7ahrrzv.d(54): Error: semicolon expected following function
    declaration\n/tmp/tmpi7ahrrzv.d(54): Deprecation: C-style function pointer and
    pointer to array syntax is deprecated. Use \''function\'' to declare function
    pointers\n/tmp/tmpi7ahrrzv.d(54): Error: function declaration without return type.
    (Note that constructors are always named \''this\'')\n/tmp/tmpi7ahrrzv.d(54):
    Error: found \''-\'' when expecting \'')\''\n/tmp/tmpi7ahrrzv.d(54): Error: no
    identifier for declarator .sorted(num1, num2)\n/tmp/tmpi7ahrrzv.d(54): Error:
    semicolon expected following function declaration\n/tmp/tmpi7ahrrzv.d(54): Error:
    Declaration expected, not \''>\''\n/tmp/tmpi7ahrrzv.d(55): Error: Declaration
    expected, not \''<\''\n/tmp/tmpi7ahrrzv.d(62): Error: Declaration expected, not
    \''<\''\n/tmp/tmpi7ahrrzv.d(71): Error: Declaration expected, not \''assert\''\n/tmp/tmpi7ahrrzv.d(72):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpi7ahrrzv.d(73): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpi7ahrrzv.d(74): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpi7ahrrzv.d(75): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpi7ahrrzv.d(76): Error: Declaration expected, not \''assert\''\n/tmp/tmpi7ahrrzv.d(77):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7ahrrzv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] points = new long[nums.length];\n    bool swapped;\n \
    \   for(int i=0;i < nums.length; i++)\n    {\n        long digit = nums[i];\n\
    \        for(int j=i;j<nums.length;j++)\n        {\n            long digit2 =\
    \ nums[j];\n            if(digit2 > digit)\n            {\n                swapped\
    \ = true;\n                break;\n            }\n            else if(digit2 !=\
    \ digit)\n            {\n                swapped = false;\n                break;\n\
    \            }\n        }\n        if(swapped == false)\n        {\n         \
    \   points[i] = points[i-1] + digit;\n            break;\n        }\n    }\n \
    \   return points;\n}\n</code>\n<|/ a |>\n<| c |>\nA little late, but I still\
    \ want to post this solution. Had the same problem and took me a while to figure\
    \ out how to solve it. The key was to understand that arrays are always sorted\
    \ (I thought it could sort other stuff but it doesn't) and to think about the\
    \ problem from the opposite direction. By sorting it in ascending order you just\
    \ have to find the sum of the digits of the numbers (as you did in your solution)\
    \ and compare that to the remaining numbers. Since you are just summing digits,\
    \ you can compare each two numbers and see which comes first in the array. If\
    \ they are equal, the numbers are equal, so the algorithm ends. If they are not\
    \ equal, the algorithm continues comparing pairs of numbers, and so on until no\
    \ swap is needed (if all numbers are equal, you end up with the same order as\
    \ before). Hope this helps.\n<|/ c |>\n<| a |>\nAn algorithm for this problem\
    \ can use two pointers instead of sorting algorithm. \nThe algorithm works as\
    \ follows:\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptykpw_l6.d(46): Error: Declaration expected, not \''<\''\n/tmp/tmptykpw_l6.d(49):
    Error: unterminated character constant\n/tmp/tmptykpw_l6.d(58): Error: Declaration
    expected, not \''assert\''\n/tmp/tmptykpw_l6.d(59): Error: Declaration expected,
    not \''assert\''\n/tmp/tmptykpw_l6.d(60): Error: Declaration expected, not \''assert\''\n/tmp/tmptykpw_l6.d(61):
    Error: Declaration expected, not \''assert\''\n/tmp/tmptykpw_l6.d(62): Error:
    Declaration expected, not \''assert\''\n/tmp/tmptykpw_l6.d(63): Error: Declaration
    expected, not \''assert\''\n/tmp/tmptykpw_l6.d(64): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptykpw_l6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long[] sorted_nums = nums.clone();\n    long sum = 0;\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sum += nums[i];\n        sorted_nums[i]\
    \ = sum;\n    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphw9dfiha.d(26): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphw9dfiha.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n\tint min = -32768;\n\tint max = 32767;\n\tint result[] = new int[nums.length];\n\
    \tfor(int i=0; i<nums.length; ++i)\n\t{\n\t\tint sum = 0;\n\t\tfor(int j=0; j<i;\
    \ ++j)\n\t\t{\n\t\t\tsum += digits[nums[j]]%10;\n\t\t}\n\t\tresult[i] = sum;\n\
    \t\tif(sum < min)\n\t\t\tmin = sum;\n\t\tif(sum > max)\n\t\t\tmax = sum;\n\t}\n\
    \t\n\tfor(int i=nums.length-1; i>=0; --i)\n\t{\n\t\tint sum = 0;\n\t\tfor(int\
    \ j=0; j<i; ++j)\n\t\t{\n\t\t\tsum += digits[nums[j]]%10;\n\t\t}\n\t\tresult[i]\
    \ = sum;\n\t\tif(sum < min)\n\t\t\tmin = sum;\n\t\tif(sum > max)\n\t\t\tmax =\
    \ sum;\n\t}\n\t\n\tfor(int i=0; i<nums.length; ++i)\n\t\tnums[i] = result[i]%10;\n\
    \treturn nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n   \
    \ assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpomwcuip5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    \n    long total = 0, max = 0;\n    \n    for(long n: nums) {\n\
    \        total += n;\n        if(max < total) {\n            max = total;\n  \
    \      }\n    }\n    \n    long[] ans = new long[nums.length];\n    int i = 0;\n\
    \    for(long n: nums) {\n        ans[i++] = n;\n        total -= n;\n       \
    \ if(total < 0) {\n            total += n;\n        }\n    }\n    return ans;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI agree that your solution will work,\
    \ but I think it's quite complex (a lot of branches, variable declarations, loops,\
    \ conditionals etc.) compared to the other answers. Besides, it requires at least\
    \ two loops, whereas the other solution only requires one loop (sorting in place).\n\
    <|/ c |>\n<| a tags=algorithm,java |>\nOne way to do this without changing the\
    \ given array is to use Maps. \n<code>\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.Map;\nimport java.util.stream.Collectors;\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp210ylxq.d(22): Error: semicolon expected, not \'':\''\n/tmp/tmpp210ylxq.d(22):
    Error: expression expected, not \'':\''\n/tmp/tmpp210ylxq.d(22): Error: found
    \''nums\'' when expecting \'';\'' following for condition\n/tmp/tmpp210ylxq.d(31):
    Error: semicolon expected, not \'':\''\n/tmp/tmpp210ylxq.d(31): Error: expression
    expected, not \'':\''\n/tmp/tmpp210ylxq.d(31): Error: found \''nums\'' when expecting
    \'';\'' following for condition\n/tmp/tmpp210ylxq.d(40): Error: Declaration expected,
    not \''<\''\n/tmp/tmpp210ylxq.d(43): Error: unterminated character constant\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp210ylxq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    long sum = 0;\n    long min = nums[0];\n    long max = 0;\n \
    \   int i = 0;\n    for(i = 0; i < nums.length; i++){\n        sum = sum + nums[i];\n\
    \        if(sum > max)\n            max = sum;\n        if(sum < min)\n      \
    \      min = sum;\n    }\n    long[] ret = new long[i];\n    for(i = 0; i < nums.length;\
    \ i++){\n        if(nums[i] >= 0){\n            ret[nums.length-i-1] = nums[i];\n\
    \        }\n    }\n    for(i = 0; i < nums.length; i++){\n        if(nums[i] <\
    \ 0){\n            ret[nums.length-i-1] = -nums[i];\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kbxhp5w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    if(nums == null || nums.length == 0)\n        return nums;\n\
    \    long sum = 0;\n    for(int i = 0; i < nums.length; ++i)\n    {\n        sum\
    \ += nums[i];\n        nums[i] = sum;\n    }\n    \n    int pos = 0;\n    int\
    \ maxPos = -1;\n    for(long i = 0; i < nums.length; ++i)\n    {\n        pos\
    \ = (int)Math.floor((i + sum - 1) / sum);\n        if(pos > maxPos)\n        \
    \    maxPos = pos;\n    }\n    for(int i = 0; i < nums.length; ++i)\n    {\n \
    \       nums[i] = nums[pos + i];\n    }\n    return nums;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=arrays,dynamic-programming,sorting,algorithm |>\nYou\
    \ can do that in O(n) using a stack to push the sum of all the digits of the numbers\
    \ in a array and pop them when they are all done.\n<|/ a |>\n<| c |>\nWhile this\
    \ is a valid solution, I'm not sure why you'd want to use a stack to implement\
    \ this in Java.  It's much easier to use recursion.\n<|/ c |>\n<| c |>\nI dont\
    \ know how stack would affect this.\n<|/ c |>\n<| c |>\nI would have written the\
    \ code this way, but I realized it was too late to edit. I'll do it again in a\
    \ minute.\n<|/ c |>\n<| c |>\nIt's a perfectly valid solution.  Stacks are the\
    \ way to go in Java for this problem.  You don't need recursion for this problem.\
    \  You could also use a linked list or a sorted array (a sorted array would be\
    \ better, but that would require a radix sort or similar to keep things organized,\
    \ so this isn't an option).  You could also use a bucket sort, which is probably\
    \ the most efficient for this problem (though you'd still need a stack to sort\
    \ the numbers before popping them off).\n<|/ c |>\n<| c |>\nThank you. Your answer\
    \ was very helpful.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef solution(A, k):\n\
    \    if len(A) == 1:\n        return A\n    total = sum(A)\n    A.sort()\n   \
    \ pos = total\n    result = []\n    for i in A:\n        result.append(i)\n  \
    \      pos += i\n    pos = total - pos\n    return solution(result, k - pos -\
    \ 1)\n</code>\n<|/ a tags=arrays,dynamic-programming,sorting,algorithm |>\n<|\
    \ a tags=arrays,dynamic-programming,sorting,algorithm |>\nThe first step is to\
    \ find out the highest number of the given array, let's say H (Highest number\
    \ in given array).\nNow, you have a list of \nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcc71cgc9.d(32): Error: C style cast illegal, use cast(int)Math.floor((i
    + sum - 1) / sum)\n/tmp/tmpcc71cgc9.d(42): Error: Declaration expected, not \''<\''\n/tmp/tmpcc71cgc9.d(48):
    Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(48): Error: unterminated
    character constant\n/tmp/tmpcc71cgc9.d(48): Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(54):
    Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(57): Error: unterminated
    character constant\n/tmp/tmpcc71cgc9.d(57): Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(57):
    Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(57): Error: unterminated
    character constant\n/tmp/tmpcc71cgc9.d(79): Error: unterminated character constant\n/tmp/tmpcc71cgc9.d(85):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpcc71cgc9.d(86): Error:
    Declaration expected, not \''assert\''\n/tmp/tmpcc71cgc9.d(87): Error: Declaration
    expected, not \''assert\''\n/tmp/tmpcc71cgc9.d(88): Error: Declaration expected,
    not \''assert\''\n/tmp/tmpcc71cgc9.d(89): Error: Declaration expected, not \''assert\''\n/tmp/tmpcc71cgc9.d(90):
    Error: Declaration expected, not \''assert\''\n/tmp/tmpcc71cgc9.d(91): Error:
    unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcc71cgc9.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    int len = (int) nums.length;\n    long[] answer = new long[len];\n\
    \    int i;\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpttardjii.d(19): Error: C style cast illegal, use cast(int)nums.length\n/tmp/tmpttardjii.d(22):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpttardjii.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given array of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original array.\n\n    For example:\n\
    \    >>> order_by_points([1L, 11L, -1L, -11L, -12L])\n    [-1L, -11L, 1L, -12L,\
    \ 11L]\n    >>> order_by_points([])\n    []\n    \n*/\nlong[] order_by_points(long[]\
    \ nums) \n{\n    Arrays.sort(nums, (a, b) -> {\n        long digit = a;\n    \
    \    digit = (a<0) ? -digit : digit;\n        long digitB = b;\n        digitB\
    \ = (b<0) ? -digitB : digitB;\n        int diff = b - a;\n        diff = (diff<0)\
    \ ? -diff : diff;\n        return diff * 100 + digit;\n    });\n    return nums;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphjvvw511.d(19): Error: expression expected, not \''>\''\n/tmp/tmphjvvw511.d(19):
    Error: found \''{\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(20): Error: found
    \''digit\'' when expecting \''.\'' following long\n/tmp/tmphjvvw511.d(20): Error:
    found \''=\'' when expecting identifier following \''long.\''\n/tmp/tmphjvvw511.d(20):
    Error: found \''a\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(20): Error: expression
    expected, not \'';\''\n/tmp/tmphjvvw511.d(21): Error: found \''digit\'' when expecting
    \'',\''\n/tmp/tmphjvvw511.d(21): Error: expression expected, not \''=\''\n/tmp/tmphjvvw511.d(21):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(22): Error: found
    \''digitB\'' when expecting \''.\'' following long\n/tmp/tmphjvvw511.d(22): Error:
    found \''=\'' when expecting identifier following \''long.\''\n/tmp/tmphjvvw511.d(22):
    Error: found \''b\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(22): Error: expression
    expected, not \'';\''\n/tmp/tmphjvvw511.d(23): Error: found \''digitB\'' when
    expecting \'',\''\n/tmp/tmphjvvw511.d(23): Error: expression expected, not \''=\''\n/tmp/tmphjvvw511.d(23):
    Error: found \'';\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(24): Error: found
    \''diff\'' when expecting \''.\'' following int\n/tmp/tmphjvvw511.d(24): Error:
    found \''=\'' when expecting identifier following \''int.\''\n/tmp/tmphjvvw511.d(24):
    Error: found \''b\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(24): Error: found
    \'';\'' when expecting \'',\''\n/tmp/tmphjvvw511.d(25): Error: found \'';\'' when
    expecting \'',\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjvvw511.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014112
