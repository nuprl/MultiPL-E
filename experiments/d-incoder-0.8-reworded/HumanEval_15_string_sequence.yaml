name: HumanEval_15_string_sequence
language: d
prompt: "import std.math;\n/*\n Return a string containing space-delimited numbers\
  \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n  \
  \  >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
  \ n) \n"
tests: "unittest\n{\n    alias candidate = string_sequence;\n\n    assert(candidate(0L)\
  \ == \"0\");\n    assert(candidate(3L) == \"0 1 2 3\");\n    assert(candidate(10L)\
  \ == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\nvoid main(){}"
completions: ["{\n    string s = \"\";\n    while (n > 0)\n        s = s << (n & 1L);\n\
    \        s = s >> 1L;\n        n >>= 1L;\n    return s;\n}", "{\n  string s;\n\
    \  s.reserve(n);\n  for (long i = 0; i < n; ++i)\n    s += to_string(i);\n  return\
    \ s;\n}", "{\n\tstring s;\n\tfor (long i = 0; i < n; i++)\n\t\ts += to_string(i);\n\
    \treturn s;\n}", "{\n\tstring result = \"\";\n\tfor( long i = 0; i < n; i++)\n\
    \t{\n\t\tresult += to_string(i);\n\t\tresult += \" \";\n\t}\n\t\n\treturn result;\n\
    }", "{\n\tstringstream s;\n\tchar buffer[50];\n\tchar c;\n\ts << n;\n\ts.str(\"\
    \");\n\twhile(s >> buffer)\n\t\ts << ' ' << buffer;\n\treturn s.str();\n}", "{\n\
    \    char result[1024];\n    string s = \"\";\n    char c;\n    long i; \n   \
    \ \n    for (i = 0L; i <= n; i++)\n    {\n        sprintf(result, \" %d\", i);\n\
    \        s = s + result;\n    }\n    \n    return s;\n}", "{\n    string result\
    \ = \"\";\n    for (long i = 0; i < n; i++) result += to_string(i);\n    return\
    \ result;\n}\n/*\n Convert a floating-point number to a string representation.\n\
    \    >>> format_float(0.1)\n    \"0.1\"\n    \n A number can also be formatted\
    \ with a prefix \"e\" to specify scientific notation:\n    >>> format_float(1e100)\n\
    \    \"1e+100\"\n    \n Negative numbers can be formatted with a prefix \"-\"\
    \ to specify a negative number:\n    >>> format_float(-12.345e6)\n    \"-12.345e6\"\
    \n    \n Negative numbers can be formatted with a prefix \"+\" to specify positive\
    \ numbers:\n    >>> format_float(+12.345e6)\n    \"+12.345e6\"\n    \n In order\
    \ to override the choice of scientific notation or sign of negative number,\n\
    \ use \"e\" or \"E\" as the last prefix instead of \"e\" or \"E\":\n    >>> format_float(1e100e6)\n\
    \    \"100e6\"\n    >>> format_float(-12.345e6)\n    \"-12.345e6\"\n    \n This\
    \ behavior can be changed by setting the float global variable to another value:\n\
    \    >>> setenv(\"float\", \"+.0000000000\", 1)\n    >>> format_float(1234.567)\n\
    \    \"+1234.567\"\n    \n Alternatively, you can use the default value for float_type\
    \ by setting the\n float_type global variable or by setting the \"float\" environment\
    \ variable:\n    >>> format_float(1)\n    \"1\"\n    >>> format_float(1234.567)\n\
    \    \"1234.567\"\n    \n A precision of 0 causes no space to be added:\n    >>>\
    \ format_float(1234.567, 0)\n    \"1234.567\"\n    \n*/\nstring format_float(float\
    \ f) \n{\n    return to_string(std.math._floatToString(f, 0));\n}", "{\n    string\
    \ str = string(\"0\");\n    for(long i=0; i<n; i++) str += \" \" + std.to_string(i);\n\
    \    return str;\n}\n</code>\n<|/ a tags=string,int,c |>\n<| a |>\nI ran into\
    \ a similar issue trying to concatenate strings and ints into a string in C.\n\
    I resolved it using sprintf (it is the same as strcat).\nHere an example:\n<code>\n\
    char string[10];", "{\n    string s;\n    if (n > 0) {\n        string ss = to_string(0);\n\
    \        for (long i = 1;i <= n;i++) {\n            if (i > 0) {\n           \
    \     ss += \" \";\n            }\n            ss += to_string(0);\n        }\n\
    \        s = ss;\n    }\n    return s;\n}", "{\n    char buffer[32];\n    stringstream\
    \ ss;\n    ss << n;\n    for(;;)\n    {\n        ss >> buffer;\n        if(ss.fail())\n\
    \        {\n            break;\n        }\n        string s(buffer);\n       \
    \ return s;\n    }\n    return \"\";\n}\nstring string_sequence(long n, int base)\n\
    {\n    char buffer[32];\n    stringstream ss;\n    ss << n;\n    ss.str(string());\n\
    \    while(ss.str() << base)\n    {\n        ss >> buffer;\n        if(ss.fail())\n\
    \        {\n            break;\n        }\n        string s(buffer);\n       \
    \ return s;\n    }\n    return \"\";\n}", "{\n  string s = \"\";\n  for (long\
    \ i = 0; i < n; i++) s += \" \" + (i+1);\n  return s;\n}", "{\n    stringstream\
    \ ss;\n    ss << n;\n    return ss.str();\n}", "{\n\tstring s = \"\"; \n\tstring\
    \ ss=\"\";\n\tfor(int i=0;i<n;i++) \n\t{\n\t\ts += to_string(i);\n\t\tss += to_string(i)\
    \ + \" \";\n\t}\n\treturn s+\" \"+ss;\n}", "{\n\treturn format(\"%ld\", n).str();\n\
    }", "{\n\tstring result = \"\";\n\tfor(long i = 0; i < n; i++)\n\t\tresult +=\
    \ \" \" + to_string(i);\n\treturn result;\n}", "{\n\treturn string(n) + \" \"\
    ;\n}\n/*\n Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(float n)\n{\n\treturn string_sequence(int(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double n)\n{\n\treturn\
    \ string_sequence(int(n));\n}", "{\n\tstringstream ss;\n\tss << n;\n\treturn ss.str();\n\
    }", "{\n\tint s = 1;\n\tchar buf[32];\n\tbuf[0] = ' ';\n\t\n\twhile (n) {\n\t\t\
    buf[1] = ' ';\n\t\t\n\t\twhile ((n & 0L) == 0)\n\t\t\tn = (n >> 1);\n\t\t\n\t\t\
    buf[2] = '0' + n / 10;\n\t\tn = n % 10;\n\t\t\n\t\tn = n / 100;\n\t\tbuf[3] =\
    \ '0' + n / 10;\n\t\tn = n % 10;\n\t\t\n\t\tbuf[4] = '0' + n;\n\t\ts++;\n\t\t\
    n = n / 10;\n\t}\n\t\n\tbuf[0] = ' ';\n\tbuf[1] = '-';\n\tbuf[2] = '-';\n\t\n\t\
    string result;\n\tresult.size = 0;\n\t\n\tfor (int i = 0; i < s; i++) {\n\t\t\
    result += buf[i];\n\t}\n\t\n\treturn result;\n}", "{\n\tstring s = \"\";\n\tfor\
    \ (long i = 1; i < n; ++i) {\n\t\ts = s + \" \" + to_string(i);\n\t}\n\treturn\
    \ s;\n}", "{\n    string result;\n    long i;\n    for(i = 0; i<n; ++i)\n    \
    \    result += to_string(i);\n    return result;\n}", "{\n    string s = string(n);\n\
    \    for (long i = 0; i < n; ++i)\n        s += ' '+to_string(i);\n    return\
    \ s;\n}\nstring string_range(long n) \n{\n    string s = string(n);\n    for (long\
    \ i = 0; i < n; ++i)\n        s += ' '+to_string(i);\n    return s;\n}", "{\n\
    \  string s = \"\";\n  for (long i = 0; i <= n; i++) s += string(i);\n  return\
    \ s;\n}", "{\n\tstring result;\n\twhile (n > 0) \n\t{\n\t\tresult += \" \" + to_string(n);\n\
    \t\tn--;\n\t}\n\treturn result;\n}", "{\n\tint i;\n\tchar buf[2*(n+1)];\n\tstring\
    \ s;\n\t\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tsprintf(buf, \"%ld\", i);\n\t\ts += buf;\n\
    \t}\n\treturn s;\n}", "{\n    stringstream ss;\n    ss << n;\n    return ss.str();\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(1L)\n    \"0 1\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(ulong n) \n{\n    stringstream\
    \ ss;\n    ss << n;\n    return ss.str();\n}", "{\n\tstring result = \"\";\n\t\
    for(long i = 0; i < n; ++i)\n\t\tresult += to_string(i);\n\treturn result;\n}",
  "{\n\tstring result = \"\";\n\tfor (long i = n; i > 0; --i) result += \" \" + (\
    \ n - ( i * i ) ) + \" \";\n\treturn result;\n}", "{\n   stringstream ss;\n  \
    \ for (long i = 0; i < n; ++i)\n       ss << i;\n   return ss.str();\n}", "{\n\
    \    string s = string(\"0\");\n    while (n > 0)\n    {\n        s += \" \" +\
    \ (n % 10);\n        n /= 10;\n    }\n    return s;\n}", "{\n    string s;\n \
    \   for (long i = 0; i < n; ++i)\n    {\n        s += to_string(i);\n        if\
    \ (i < n-1)\n            s += \" \";\n    }\n    return s;\n}", "{\n    string\
    \ s = \"\";\n    for(long i = 0; i < n; i++) s += to_string(i);\n    return s;\n\
    }", "{\n  int i;\n  char s[128];\n  for (i = 0;  i < n;  i++) s[i] = i + 65;\n\
    \  return string(s);\n}", "{\n    string s = to_str(n);\n    long i = 1;\n   \
    \ for (auto it = s.begin(); it != s.end(); ++it, ++i)\n        *it = i;\n    return\
    \ s;\n}", "{\n\tstring result = \"\";\n\tlong i;\n\tfor(i = 0L; i <= n; i++) result\
    \ += to_string(i);\n\treturn result;\n}", "{\n\tstringstream ss;\n\tfor(int i=0;\
    \ n>i; i++)\n\t\tss << \" \" << i;\n\treturn ss.str();\n}", "{\n    static char\
    \ s[1024];\n    size_t i;\n    for (i = 0; i < sizeof(s); ++i)\n\ts[i] = '0';\n\
    \    return join(s, s);\n}", "{\n  stringstream ss;\n  ss.str(\"\");\n  ss.clear();\n\
    \  ss << n;\n  string s = ss.str();\n  while (ss.good())\n  {\n    ss << ' ' <<\
    \ s;\n  }\n  return s;\n}", "{\n\tstring s = \"\";\n\tfor (long i = 0; i < n;\
    \ i++) s += to_string(i);\n\treturn s;\n}", "{\n\tstring s;\n\twriteln(s);\n\t\
    writeln(n);\n\twriteln(s);\n\twriteln(n);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\
    \twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\twriteln(s);\n\t\
    writeln(s);", "{\n    stringstream ss;\n    for (int i = 0; i < n; i++) {\n  \
    \      ss << i;\n    }\n    return ss.str();\n}", "{\n    string result;\n   \
    \ int i;\n    \n    for (i = 0; i < n; i++) {\n\tresult += to_string(i);\n   \
    \ }\n    \n    return result;\n}", "{\n    string str = string(\"0 \", n);\n \
    \   while (n-- != 0) {\n        str += \" \";\n    }\n    return str;\n}\n/*\n\
    \ Return the number of strings of length n containing 0 starting from 0 upto n\
    \ inclusive.\n    >>> string_count_sequences(0L)\n    1\n    >>> string_count_sequences(5L)\n\
    \    5\n    \n*/", "{\n\tstring s = \"\"; \n\tlong i = n;\n\twhile(i > 0)\n\t\
    {\n\t\ts = to_string(i - 1) + \" \" + s;\n\t\ti--;\n\t}\n\ts = \"0\" + s;\n\t\
    return s;\n}\n/* Return true if s is an integer.\n    Note: This function does\
    \ not test if s is strictly an integer.\n*/", "{\n    int i;\n    char a[64];\n\
    \    string s;\n    static char space[64];\n    for (i = 0 ; i < n ; i++)\n  \
    \  {\n        a[i] = i;\n        space[i] = ' ';\n    }\n    \n    size_t size\
    \ = sprintf(a,\"%\" PRId64 \"\",n);\n    memcpy(s,&space[0],size);\n    \n   \
    \ return s;\n}", "{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n\
    \    {\n        result += to_string(i);\n    }\n    return result;\n}\n/* \n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n*/\nstring string_sequence2(long\
    \ n) \n{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n    {\n\
    \        if(i > 0) result += ' ';\n        result += to_string(i);\n    }\n  \
    \  return result;\n}\n/* \n Return the square root of n.\n \n    >>> sqrt(5) #\
    \ 5\n    5\n    >>> sqrt(10) # 3\n    1.41421356237\n*/\ndouble sqrt(double n)\
    \ \n{\n    return std.math.sqrt(n);\n}\n/* \n Return the square root of n truncated\
    \ to the nearest integer.\n \n    >>> sqrt(6.4) # 3\n    6\n*/", "{\n\tstring\
    \ s = \"\";\n\tfor(long i = 0; i < n; i++)\n\t{\n\t\ts += to_string(i);\n\t}\n\
    \treturn s;\n}", "{\n  stringstream s;\n  s.width(20);\n  s << n;\n  return s.str();\n\
    }", "{\n\tstringstream ss;\n\tss << n;\n\tstring s = ss.str();\n\t\n\tsize_t len\
    \ = s.length();\n\ts = s.substr(0,n-1);\n\twhile(len > 0) {\n\t\tss << ' ';\n\t\
    \tss = ss.str();\n\t\ts = s.substr(0,n-1);\n\t\tlen--;\n\t}\n\treturn s;\n}",
  "{\n\tchar[] c = new char[n];\n\tstring s = \"\";\n\tfor(int i=0; i!=n; ++i)\n\t\
    \tc[i] = ' ';\n\tfor(i=0; i<n; ++i)\n\t\ts += to_string(i);\n\t\n\treturn s;\n\
    }", "{\n    char[] buf = new char[n];\n    buf[0] = '0';\n    for(int i = 1; i\
    \ < n; ++i)\n    {\n        buf[i] = ' ';\n    }\n    string result = buf;\n \
    \   return result + 0;\n}", "{\n\tstring res;\n\tstring first=string(\"0\");\n\
    \tlong ii=0;\n\twhile (ii<n) \n\t{\n\t\tres+=first;\n\t\tfirst=string_shift(first,1);\n\
    \t\t++ii;\n\t}\n\treturn res;\n}", "{\n    string result = \"\";\n    for (long\
    \ i = 0; i < n; i++) \n\tresult += to_string(i) + \" \";\n    return result;\n\
    }", "{\n\tchar s[] = \"0 \";\n\tfor (long i = 2; i <= n; i++) {\n\t\ts += \"1\
    \ \";\n\t\ts += std.format(\"%Ld\", i);\n\t}\n\treturn s;\n}", "{\n    string\
    \ s;\n    for(int i = 0; i < n; ++i)\n    {\n        s+=to_string(i);\n    }\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(int n) \n{\n    string\
    \ s;\n    for(int i = 0; i < n; ++i)\n    {\n        s+=to_string(i);\n    }\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double n) \n{\n    string\
    \ s;\n    for(int i = 0; i < n; ++i)\n    {\n        s+=to_string(i);\n    }\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long double n) \n{\n  \
    \  string s;\n    for(int i = 0; i < n; ++i)\n    {\n        s+=to_string(i);\n\
    \    }\n    return s;\n}\nstring string_sequence(string n) \n{\n    string s;\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        s+=to_string(i);\n    }\n    return\
    \ s;\n}\nstring string_sequence(char *s)\n{\n    string s = string(\"0\");\n \
    \   for(int i = 0; i < s; ++i)\n    {\n        s+=to_string(i);\n    }\n    return\
    \ s;\n}", "{\n\tstring str = \"\";\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\t\
    if (i > 0) str += \" \";\n\t\tstr += i;\n\t}\n\treturn str;\n}", "{\n\tstatic\
    \ char s[];\n\ts[0] = '\\0';\n\tchar* r = s;\n\tfor (long i = 0; i != n; ++i)\n\
    \t\tr = join(\" \", r, to_string(i));\n\treturn r;\n}", "{\n\tstring str = stringify(n);\n\
    \tstring str2 = \"\";\n\tfor(long i=0; i<n; i++) str2 = str2 + \" \" +  str[i];\n\
    \tstr = str2;\n\treturn str;\n}", "{\n    string result = \"\";\n    for(int i\
    \ = 0; i < n; i++) result += to_string(i);\n    return result;\n}\n/*\n Return\
    \ an iterator over the string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence_iter(0L)\n    ()\n    >>> string_sequence_iter(5L)\n\
    \    (0,1,2,3,4)\n    \n*/\niterator string_sequence_iter(long n) \n{\n    return\
    \ iterator() \n    {\n        long i = 0;\n        string s = to_string(i);\n\
    \        auto f = [&i](long x) -> bool { return x == i; };\n        return range(s.begin(),\
    \ s.end(), f);\n    };\n}\n/*\n Return an iterator over substring starting from\
    \ start position in string and ending at end position in string.\n    >>> substr(\"\
    \", \"abc\")\n    ()\n    >>> substr(\"abc\", \"\")\n    ()\n    >>> substr(\"\
    abc\", 0, 1)\n    ()\n    >>> substr(\"abc\", 0, 2)\n    (\"a\")\n    >>> substr(\"\
    abc\", 0, 4)\n    (\"abc\")\n    >>> substr(\"abc\", 1, 2)\n    (\"b\", \"\")\n\
    \    >>> substr(\"abc\", 3, 3)\n    (\"\")\n    >>> substr(\"abc\", 4, 4)\n  \
    \  (\"\")\n    \n*/\niterator substr(string s, long start, long end) \n{\n   \
    \ return range(s.begin()+start, s.begin()+end);\n}\n/*\n Return substring with\
    \ 0 as the start position and str.length() as the end position.\n    >>> substr(\"\
    \", \"abc\")\n    ()\n    >>> substr(\"abc\", \"\")\n    ()\n    >>> substr(\"\
    abc\", 0, 1)\n    ()\n    >>> substr(\"abc\", 0, 2)\n    (\"a\")\n    >>> substr(\"\
    abc\", 0, 4)\n    (\"abc\")\n    >>> substr(\"abc\", 1, 2)\n    (\"b\", \"\")\n\
    \    >>> substr(\"abc\", 3, 3)\n    (\"\")\n    >>> substr(\"abc\", 4, 4)\n  \
    \  (\"\")\n    \n*/\niterator substr(string s, string str) \n{\n    return substr(s,\
    \ 0, str.length());\n}\n/*\n Return substring starting at start position and ending\
    \ at end position of string.\n    >>> substr(\"abcd\", \"cd\")\n    (\"d\")\n\
    \    >>> substr(\"abcd\", \"abcd\")\n    (\"\")\n    >>> substr(\"abcd\", \"abcd\"\
    , 1)\n    (\"abcd\")\n    >>> substr(\"abcd\", \"abcd\", 2)\n    (\"abcd\")\n\
    \    \n*/\nstring substr(string s, string str, long start, long end) \n{\n   \
    \ return substr(s, start, end - start);\n}", "{\n    static char s[] = \"0 \"\
    ;\n    return s + to_string(n);\n}", "{\n    string str;\n    char c;\n    \n\
    \    for(int i = 0; i < n; i++)\n    {\n        c = i;\n        str = str(i) +\
    \ \" \";\n    }\n    return str;\n}\n/*\n Return the string representation of\
    \ an arbitrary integer in binary notation.\n    >>> binary_string(0)\n    \"0\"\
    \n    >>> binary_string(1L)\n    \"1\"\n    >>> binary_string(63L)\n    \"1 0\
    \ 1 0 0 1\"\n    \n*/\nstring binary_string(long n) \n{\n    string str;\n   \
    \ char c;\n    \n    for(int i = 0; i < n/2; i++)\n    {\n        c = i + (n%2\
    \ == 0);\n        str = str(i) + c+ \" \";\n    }\n    return str;\n}\n/*\n Return\
    \ the string representation of a long integer in binary notation.\n    >>> binary_string(3L)\n\
    \    \"1 0 1\"\n    >>> binary_string(63L)\n    \"1 0 1 0 0 1\"\n    \n*/\nstring\
    \ binary_string(long long n)\n{\n    string str;\n    char c;\n    \n    for(int\
    \ i = 0; i < n/2; i++)\n    {\n        c = i + (n%2 == 0);\n        str = str(i)\
    \ + c+ \" \";\n    }\n    return str;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 up to n exclusive.\n    >>> string_sequence(5L)\n  \
    \  \"5 4 3 2 1\"\n    \n*/\nstring string_sequence(long long n)\n{\n    string\
    \ str;\n    char c;\n    \n    for(int i = 1; i <= n; i++)\n    {\n        c =\
    \ i;\n        str = str(i) + \" \";\n    }\n    return str;\n}\n/*\n Return true\
    \ if s ends with s1 and s2; false otherwise.\n    \n*/", "{\n\tstring s;\n\t\n\
    \ts = \" \";\n\tlong i = 1L;\n\twhile (i<=n) { s = s + to_string(i); s = s + \"\
    \ \"; i = i + 1L; }\n\treturn s;\n}", "{\n\tstring s = \"\";\n\twhile (n > 0)\n\
    \t{\n\t\ts = to_string(n % 10) + s;\n\t\tn = n / 10;\n\t}\n\treturn s;\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\
    /*\n This class implements an array like object that can be used to store a sequence\
    \ of numbers, strings, etc..\n Note that it is not designed to be used directly;\
    \ it is meant to be subclassed!\n*/\ntemplate<class T>\nclass Array\n{\npublic:\n\
    \tArray();\n\tArray(const Array &other);\n\tArray(T first);\n\tArray(T first,\
    \ T last);\n\tArray(const string &s);\n\tArray(const vector<string> &v);\n\tArray(const\
    \ vector<pair<string, string> > &v);\n\tArray(const vector<pair<string, string>\
    \ > &v, size_t start, size_t end);\n\tArray(const vector<pair<string, string>\
    \ > &v, size_t start, size_t end, const string &delimiter);\n\t~Array();\n\tArray<T>\
    \ &operator=(const Array &other);\n\tvoid pushBack(T t);\n\tvoid pushFront(T t);\n\
    \tvoid insert(size_t index, T t);\n\tvoid append(T t);\n\tvoid insert(size_t index,\
    \ const string &str);\n\tvoid append(const string &str);\n\tvoid push_back(T t);\n\
    \tvoid pushBack(const string &str);\n\tvoid insert(size_t index, const vector<string>\
    \ &strs);\n\tvoid insert(size_t index, const vector<pair<string, string> > &strs);\n\
    \tvoid append(const vector<string> &strs);\n\tvoid append(const vector<pair<string,\
    \ string> > &strs);\n\tvoid push_back(T t, const string &str);\n\tvoid pushBack(const\
    \ string &str, const string &delimiter);\n\tbool operator==(const Array &other)\
    \ const;\n\tbool operator<(const Array &other) const;\n\tbool operator>(const\
    \ Array &other) const;\n\tbool operator<=(const Array &other) const;\n\tbool operator>=(const\
    \ Array &other) const;\n\tsize_t size() const;\n\tT& at(size_t i);\n\tconst T&\
    \ at(size_t i) const;\n\tT& operator[](size_t i);\n\tconst T& operator[](size_t\
    \ i) const;\n\tvector<string> split(const string &s, const string &delimiters)\
    \ const;\n\tvoid remove(const string &s);\n\tvoid clear();\n\tvoid swap(Array\
    \ &other);\n\tvoid appendRange(Array &other, size_t start, size_t end);\n\tvoid\
    \ appendRange(Array &other, size_t start, size_t ", "{\n    string s;\n    int\
    \ i = 1;\n    while(i < n) s += int_to_string(i) + \" \";\n    return s;\n}",
  "{\n\tint  i, ret[32];\n\t\n\tfor(i = 0; i < 32; ++i)\n\t\tret[i] = '0';", "{\n\
    \  string result;\n  if (n <= 0) {\n    return result;\n  }\n  result = string_sequence(n\
    \ >> 1L);\n  while (n > 0) {\n    result = \" \" + result + \" \";\n    n >>=\
    \ 1L;\n  }\n  return result;\n}", "{\n    return convert_to_string(std.range(0,\
    \ n));\n}", "{\n  return to_string(std.seq.rev_iseq(range(n))).str();\n}", "{\n\
    \    string result;\n    for(long i = n; ; ++i) \n    {\n        if(i == 0) \n\
    \        {\n            result += to_string(0);\n            break;\n        }\n\
    \        result += to_string(i - 1) + \" \" + to_string(i);\n    }\n    return\
    \ result;\n}", "{\n    char[] buf = new char[64];\n    StringBuilder result =\
    \ new StringBuilder(64);\n    for(long i=0; i<n; i++) \n    {\n        sprintf(buf,\
    \ \"%ld\", i);\n        result.Append(buf);\n    }\n    return result.ToString();\n\
    }", "{\n  string s = string(\"0\");\n  for(int i=0;i<n;i++) s += \" \"+to_string(std.math::__int_type__(i));\
    \ \n  return s;\n}", "{\n    string result = \"\";\n    for (long i = 0;  i <\
    \ n; i++) result += to_string(i);\n    return result;\n}", "{\n    string s;\n\
    \    for(long i = 0; i < n; ++i)\n        s += string(i);\n    return s;\n}",
  "{\n    string result = \"\";\n    for(long i = 0; i < n; ++i)\n        result +=\
    \ to_string(i);\n    return result;\n}", "{\n    int j = 0;\n    string s = \"\
    \";\n    while(n > 0) {\n        s = char(n % 10) + s;\n        n /= 10;\n   \
    \ }\n    while(j < s.length())\n    {\n        s += \" \";\n        j++;\n   \
    \ }\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence_r(0L)\n    \"0 \"\
    \n    >>> string_sequence_r(5L)\n    \"0 1 2 3 4 5 \"\n    \n*/\nstring string_sequence_r(long\
    \ n) \n{\n    int j = 0;\n    string s = \"\";\n    while(n > 0) {\n        s\
    \ = char(n % 10) + s;\n        n /= 10;\n    }\n    while(j < s.length())\n  \
    \  {\n        s += \" \";\n        j++;\n    }\n    s = string(1,' ') + s;\n \
    \   return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence_n(0L)\n    \"0\"\n    >>>\
    \ string_sequence_n(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence_n(long\
    \ n) \n{\n    int j = 0;\n    string s = \"\";\n    while(n > 0) {\n        s\
    \ = char(n % 10) + s;\n        n /= 10;\n    }\n    while(j < s.length())\n  \
    \  {\n        s += \" \";\n        j++;\n    }\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence_rn(0L)\n    \"0 \"\n    >>> string_sequence_rn(5L)\n\
    \    \"0 1 2 3 4 5 \"\n    \n*/\nstring string_sequence_rn(long n) \n{\n    int\
    \ j = 0;\n    string s = \"\";\n    while(n > 0) {\n        s = char(n % 10) +\
    \ s;\n        n /= 10;\n    }\n    while(j < s.length())\n    {\n        s +=\
    \ \" \";\n        j++;\n    }\n    s = string(1,' ') + s;\n    return s;\n}\n\
    /*\n Return the number of times x in a string occurs.\n    >>> string_count('abracadabra',\
    \ 'ab')\n    2\n    \n*/", "{\n\tchar[] s = \"\";\n\tstring r = \"0\";\n\tfor(long\
    \ i=0;i<n;i++) s += r;\n\treturn s;\n}", "{\n    string str = int_to_string(n);\n\
    \    string result = \"\";\n    \n    foreach(str) {\n        result += str;\n\
    \    }", "{\n\tstring str = stringify(n);\n\tfor (int i = 0; i < str.size(); ++i)\
    \ {\n\t\tif (str.at(i) != ' ')\n\t\t\tstr += ' ';\n\t}\n\treturn str;\n}\n/**\n\
    \ Return string representation of an integer in binary form.\n If n is not a power\
    \ of 2, then zeros will be appended at the end of the string.\n*/\nstring string_binary(long\
    \ n)\n{\n\tif (n <= 0)\n\t\treturn \"0\";\n\tstring str = \"\";\n\tstring mask\
    \ = string_binary(n >> 1);\n\twhile (mask != \"\")\n\t\tstr += mask.at(0) + \"\
    , \";\n\tstr += mask.at(0);\n\tif (n & 1)\n\t\tstr += \"1\";\n\treturn str;\n}",
  "{\n   string s;\n   auto i = n;\n   \n   while (i != 0)\n   {\n      s = to_string(i);\n\
    \      s = \" \" + s;\n      --i;\n   }\n   \n   return s;\n}", "{\n\tstring s\
    \ = \"\";\n\tfor(long i = 0; i <= n; i++) {\n\t\ts += to_string(i);\n\t}\n\treturn\
    \ s;\n}", "{\n    int i=0,j;\n    string s=\"\";\n    for(;i<n;i++)\n    {\n \
    \       s+=char(i+65);\n        j=i+1;\n        while(j<n)\n        {\n      \
    \      s+=char(j+65);\n            ++j;\n        }\n        s+=' ';\n    }\n \
    \   return s;\n}\n</code>\n<|/ a |>\n<| c |>\nI thought of this, but I didn't\
    \ want to have to create my own string type with extra functions.\n<|/ c |>\n\
    <| c |>\n: why not?\n<|/ c |>\n<| c |>\n, this is much less efficient than using\
    \ `std.string` and writing it yourself.\n<|/ c |>\n<| c |>\n: I thought of creating\
    \ a string class, too, but that seems overly complicated.\n<|/ c |>\n<| c |>\n\
    , why don't you think so? `std.string` can be easily written with a few lines\
    \ of code. How much more complicated is that?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\nusing namespace std;", "{\n\tint\t\t\ti;\n\tint\t\t\tj;\n\
    \tstring\t\ts;\n\t\n\ts = \"0\";\n\t\n\tfor (i = 1; i < n; ++i)\n\t{\n\t\tfor\
    \ (j = 1; j < i; ++j)\n\t\t\ts += \" \" + ((i-j) % 10);\n\t\ts += \" \" + (i-1)\
    \ % 10;\n\t\t\n\t\tif (i < 10) return s;\n\t\t\n\t\tfor (j = i+1; j < 10; ++j)\n\
    \t\t\ts += \" \" + (i-1) % 10;\n\t\t\n\t\tif (i == j)\n\t\t\ts += \" \" + (i-1)\
    \ % 10;\n\t\t\n\t\ts += \" \" + (i) % 10;\n\t}\n\t\n\treturn s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double n) \n{\n\treturn string_sequence((long)(n));\n\
    }\n/*\n Return an array of strings containing the space-delimited numbers starting\
    \ from 0 upto n inclusive.\n Note that these are strings of length 10 long (as\
    \ opposed to the integer strings in the range 0-n).\n    >>> strings_to_sequence([\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\n    [\"0 1 2 3 4 5\"]\n    >>> strings_to_sequence([\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\"]).length\n    5L\n    >>> strings_to_sequence([\"\
    0\",\"1\",\"2\",\"3\",\"4\",\"5\"],5L)\n    [\"0 1 2 3 4 5\"]\n    \n*/\nstd.vector<string>\
    \ strings_to_sequence(string s)\n{\n\tstd.vector<string> v;\n\tsize_t len = s.length();\n\
    \tsize_t i = 0;\n\t\n\twhile (i < len)\n\t{\n\t\tstring t = s.substr(i, 10);\n\
    \t\ti++;\n\t\tv.push_back(t);\n\t}\n\t\n\treturn v;\n}\n/*\n Return an array of\
    \ integers containing the space-delimited numbers starting from 0 upto n inclusive.\n\
    \ Note that these are integers (as opposed to the string strings in the range\
    \ 0-n).\n    >>> integers_to_sequence([\"0\",\"1\",\"2\",\"3\",\"4\",\"5\"])\n\
    \    [0,1,2,3,4,5]\n    >>> integers_to_sequence([\"0\",\"1\",\"2\",\"3\",\"4\"\
    ,\"5\"]).length\n    5L\n    >>> integers_to_sequence([\"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\"],5L)\n    [0,1,2,3,4,5]\n    \n*/\nstd.vector<int> integers_to_sequence(string\
    \ s)\n{", "{\n    string result = \"\"; // result to return\n    long i = 0;\n\
    \    while (n) {\n        result.append((char)(i%10 + 48));\n        n = n/10;\n\
    \        ++i;\n    }\n    return result;\n}", "{\n    string s = \"\";\n    for\
    \ (int i = 0; i < n; ++i)\n    {\n        if (i > 0)\n            s += \" \";\n\
    \        s += to_string(i);\n    }\n    return s;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nOne liners:\n<code>\ndef string_sequence(n): return '\\n'.join(str(n//i)\
    \ for i in range(0, n+1, 1))\n</code>\n<|/ a dscore=1 tags=loops,string,python,python-3.x\
    \ |>\n<| a |>\nYou can try this:\n<code>\ndef string_sequence(n):\n    # print\
    \ n\n    for i in range(1, n+1):\n        print i", "{\n  return join(\" \", repeat(string(\"\
    0\", int_to_str(n)), -int(log2(n)+1)));\n}", "{\n\tstring str = string((n>0) ?\
    \ \"\" : \"\");\n\tif(n==0) str+=\"0\";\n\tfor(int i=0;i<n;++i) str+=int2string(i);\n\
    \treturn str;\n}", "{\n\tint count = 1;\n\tstring s = str(n).c_str() + \", \"\
    ;\n\twhile (n--) \n\t{\n\t\ts = str(count++).c_str() + s;\n\t}\n\treturn s;\n\
    }\n//#include \"Tools/Display/rangy/highlighter/SaxParser/SaxParser.hpp\"\n//#include\
    \ <boost/lexical_cast.hpp>\n//#include <boost/lexical_cast/try_lexical_convert.hpp>\n\
    //#include <boost/lexical_cast/try_lexical_convert.hpp>\n//#define BOOST_LEXICAL_CAST_ASSUME_C_LOCALE\n\
    //#define BOOST_HAS_GETLINE", "{\n\treturn string(\"0 \");\n}\n/*\n Return an\
    \ array of n integers.\n    >>> integer_array(0L)\n    [0]\n    >>> integer_array(5L)\n\
    \    [0, 1, 2, 3, 4]\n    \n*/", "{\n   string res;\n   for (int i = 0; i < n;\
    \ ++i)\n      res += to_string(i);\n   return res;\n}\n</code>\n<|/ a tags=c++,stl,c++11,string,templates\
    \ |>\n<| a dscore=4 |>\nAs an alternative to string_generator, for C++11, you\
    \ could use the ranges library. Here's a basic example:\n<code>\n#include <string>\n\
    #include <ranges>", "{\n    stringstream ss;\n    ss.str(\"\");\n    long i;\n\
    \    for(i=0;i<n;i++)\n    {\n        ss<<i;\n        ss<<\" \";\n    }\n    return\
    \ ss.str();\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n \n This function is primarily for debugging purposes\
    \ to show the numbers in a\n readable fashion. \n */\nstring string_sequence(long\
    \ n, int base)\n{\n    stringstream ss;\n    ss.str(\"\");\n    long i;\n    for(i=0;i<n;i++)\n\
    \    {\n        ss<<i;\n        ss<<\" \";\n    }\n    return ss.str();\n}\n/*\n\
    \ A generic function to convert a long into a string.\n \n It takes care of converting\
    \ to hexadecimal and base64 encoded strings.\n \n n : number to convert\n base\
    \ : base for conversion (default 16)\n \n Example:\n \n >>> to_string(123, 'hex')\n\
    \ '3f'\n >>> to_string(123, 'base64')\n 'Zm9v'\n >>> to_string(123, 'dec')\n '123'\n\
    \ */\nstring to_string(long n, string base) \n{\n    string retval;\n    switch\
    \ (base) \n    {\n        case 'dec': \n            retval = (string)n;\n    \
    \        break;\n        case 'hex': \n            {\n                hexstring\
    \ hs = hexstring(n);\n                retval = (string)hs;\n            }\n  \
    \          break;\n        case 'base64': \n            {\n                base64string\
    \ bs = base64string(n);\n                retval = (string)bs;\n            }\n\
    \            break;\n        default:\n            retval = \"bad base\";\n  \
    \  }\n    return retval;\n}\n/*\n A generic function to convert a long into a\
    \ string.\n \n It takes care of converting to hexadecimal and base64 encoded strings.\n\
    \ \n n : number to convert\n base : base for conversion (default 16)\n \n Example:\n\
    \ \n >>> to_string_2(123, 'hex')\n '3f'\n >>> to_string_2(123, 'base64')\n 'Zm9v'\n\
    \ >>> to_string_2(123, 'dec')\n '123'\n */\nstring to_string_2(long n, string\
    \ base) \n{\n    string retval;\n    switch (base) \n    {\n        case 'dec':\
    \ \n            retval = (string)n;\n            break;\n        case 'hex': \n\
    \            {\n                hexstring hs = hexstring(n);\n               \
    \ retval = (string)hs;\n            }\n            break;\n        case 'base64': ",
  "{\n\tstring s;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\ts.append(i);\n\t}\n\treturn\
    \ s;\n}", "{\n    string str = \"\";\n    for(long i = 0; i < n; ++i)\n      \
    \  str += std.string.format(\"%li\", i);\n    return str;\n}", "{\n\tstring s\
    \ = \"\";\n\tfor(long i = n; i > 0; i--)\n\t{\n\t\ts += to_string(i);\n\t}\n\t\
    return s;\n}\n/*\n Return a string containing the numbers 0 to n in reverse order.\n\
    \    >>> string_sequence(0L,5L)\n    \"5 4 3 2 1 0\"\n    \n*/\nstring string_sequence(long\
    \ n, long m) \n{\n\tstring s = \"\";\n\tfor(long i = n; i > 0; i--)\n\t{\n\t\t\
    s += to_string(i);\n\t}\n\treturn s;\n}\n/*\n Return the first character of the\
    \ string s.\n    >>> \"hello\"[0]\n    'h'\n    \n*/\nchar first_char(string s)\n\
    {\n\treturn s[0];\n}\n/*\n Return the last character of the string s.\n    >>>\
    \ \"hello\"[-1]\n    'o'\n    \n*/\nchar last_char(string s)\n{\n\treturn s[s.length()\
    \ - 1];\n}\n/*\n Return a string containing the first n characters of s in reverse\
    \ order.\n    >>> string_sequence(\"hello\",3L)\n    \"olleh\"\n    \n*/\nstring\
    \ string_sequence(string s, long n) \n{\n\tstring s = \"\";\n\tfor(long i = n;\
    \ i > 0; i--)\n\t{\n\t\ts += s[i];\n\t}\n\treturn s;\n}\n/*\n Return a string\
    \ containing the numbers 0 to n in reverse order.\n    >>> string_sequence(\"\
    hello\",3L,5L)\n    \"olleh wrlle\"\n    \n*/\nstring string_sequence(string s,\
    \ long n, long m) \n{\n\tstring s = \"\";\n\tfor(long i = n; i > 0; i--)\n\t{\n\
    \t\ts += s[i];\n\t}\n\treturn s;\n}\n/*\n Return the first n characters of the\
    \ string s in reverse order.\n    >>> string_sequence(\"hello\",3L,4L)\n    \"\
    lehel\"\n    \n*/\nstring string_sequence(string s, long n, long m) \n{\n\tstring\
    \ s = \"\";\n\tfor(long i = n; i > 0; i--)\n\t{\n\t\ts += s[i];\n\t}\n\treturn\
    \ s;\n}\n/*\n Return the last n characters of the string s in reverse order.\n\
    \    >>> string_sequence(\"hello\",3L,4L)\n    \"olleh\"\n    \n*/\nstring string_sequence(string\
    \ s, long n, long m) \n{\n\tstring s = \"\";\n\tfor(long i = n; i > 0; i--)\n\t\
    {\n\t\ts += s[i];\n\t}\n\treturn s;\n}\n/*\n Return the first n characters of\
    \ the string s in reverse order.\n    >>> string_sequence(\"hello\",3L,4L,7",
  "{\n\tstring result;\n\tfor(long i = 0; i <= n; i++)\n\t{\n\t\tresult += to_string(i)\
    \ + \" \";\n\t}\n\t\n\treturn result;\n}", "{\n  string s = \"\";\n  while (n)\
    \ {\n    s += string(n%10); n /= 10;\n  }\n  return s;\n}", "{\n\tstring s = \"\
    \"; \n\twhile(n--) s += to_string(n % 10) + \" \";\n\treturn s;\n}", "{\n\tstring\
    \ str = toString(n);\n\tstring spaces = \" \";\n\tsize_t len = str.size();\n\t\
    while(len > 0){\n\t\twhile(len > 0 && str[len-1] == ' ') len--;\n\t\tstr = str.substr(0,len);\n\
    \t\tlen += spaces.size();\n\t}\n\treturn str;\n}", "{\n    string s = \"\";\n\
    \    int i;\n    for (i = 1; i < n; ++i)\n    {\n        if (i > 0) s += \" \"\
    ;\n        s += to_string(long(i));\n    }\n    return s;\n}", "{\n  return to_string(n);\n\
    }\nstring string_sequence(long n, int min_indent)\n{\n  if (n < min_indent)\n\
    \    throw runtime_error(\"string_sequence: n must be >= min_indent\");\n  return\
    \ to_string(n);\n}\nstring string_sequence(long n, string pad)\n{\n  return to_string(n).str_pad(min_indent,\
    \ pad);\n}\nstring string_sequence(long n, string pad, int min_indent)\n{\n  if\
    \ (n < min_indent)\n    throw runtime_error(\"string_sequence: n must be >= min_indent\"\
    );\n  return to_string(n).str_pad(min_indent, pad);\n}\nstring string_sequence(long\
    \ n, string pad, string sep)\n{\n  return to_string(n).str_pad(min_indent, pad,\
    \ sep);\n}\nstring string_sequence(long n, string pad, string sep, string left_sep)\n\
    {\n  return to_string(n).str_pad(min_indent, pad, sep, left_sep);\n}\nstring string_sequence(long\
    \ n, string pad, string sep, string left_sep, string right_sep)\n{\n  return to_string(n).str_pad(min_indent,\
    \ pad, sep, left_sep, right_sep);\n}\nstring string_sequence(long n, string pad,\
    \ string sep, string left_sep, string right_sep, string align)\n{\n  return to_string(n).str_pad(min_indent,\
    \ pad, sep, left_sep, right_sep, align);\n}\nstring string_sequence(long n, string\
    \ pad, string sep, string left_sep, string right_sep, string align, string valign)\n\
    {\n  return to_string(n).str_pad(min_indent, pad, sep, left_sep, right_sep, align,\
    \ valign);\n}\nstring string_sequence(long n, string pad, string sep, string left_sep,\
    \ string right_sep, string align, string valign, int min_indent)\n{\n  if (n <\
    \ min_indent)\n    throw runtime_error(\"string_sequence: n must be >= min_indent\"\
    );\n  return to_string(n).str_pad(min_indent, pad, sep, left_sep, right_sep, align,\
    \ valign);\n}\nstring string_sequence(long n, string pad, string sep, string left_sep,\
    \ string right_sep, string align, string valign, int min_indent, string pad2)\n\
    {\n  if (n < min_indent)\n    throw runtime_error(\"string_sequence: n must be\
    \ >= min_indent\");\n  return to_string(n).str_pad(min_indent, pad, sep, left_sep,\
    \ right_sep, align, valign).str_pad(min_indent, pad2);\n}\nstring string_sequence(long\
    \ n, string pad", "{\n\tstring s = \"\";\n\tfor (long i = 0; i < n; ++i) s +=\
    \ \"0 \";\n\treturn s;\n}", "{\n\tstring result = \"\";\n\tfor( long i = 0; i\
    \ < n; i++) result += to_string(i);\n\treturn result;\n}", "{\n    int i;\n  \
    \  int len;\n    char *s;", "{\n\tint count = 0;\n\tstring result;\n\tfor(int\
    \ i = 0;i < n;i++) {\n\t\tresult += (count==0) ? to_string(i) : \" \" + to_string(i);\n\
    \t\tcount++;\n\t}\n\treturn result;\n}", "{\n    string s = \"\";\n    int ii;\n\
    \    for (ii=0;ii<n;ii++)\n    {\n        s += to_string(ii);\n    }\n    return\
    \ s;\n}", "{\n  string s = \"\";\n  for(int i = 0; i < n; i++) {\n    s += to_string(i);\n\
    \  }\n  return s;\n}", "{\n  int count = 0;\n  int last = 0;\n  string str = to_string(last);\n\
    \  string s = \"\";\n  while(n != 0) {\n    last = n;\n    str += \" \" + to_string(last);\n\
    \    n = (n-last)>>1;\n    count++;\n  }\n  for(int i = 0; i < count; i++)\n \
    \ {\n    s += \" \" + str.substr(0, str.size()-1);\n    str = str.substr(str.size()-1);\n\
    \  }\n  return s;\n}", "{\n    string s = \"\";\n    for (long i = 0; i < n; ++i)\n\
    \ts += i;\n    return s;\n}", "{\n    string result = \"\";\n    while (n > 0)\
    \ {\n        result += \" \" + (n%10);\n        n /= 10;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=4 tags=c++,visual-studio |>\n<| a tags=c++,visual-studio\
    \ |>\nI wrote a small piece of code to generate numbers with letters \n<code>\n\
    #include <iostream>", "{\n\tstring res;\n\tres[0]='0';\n\tfor(int i=1;i<n;i++)\
    \ res+=' '+to_string(i);\n\treturn res;\n}\n/*\n Return string with commas and\
    \ space inserted between each number up to a maximum of limit.\n    >>> space_join(string_sequence(\"\
    0 1 2 3 4 5 6 7 8 9 10\"))\n    \"0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\"\n    >>>\
    \ space_join(string_sequence(\"0 1 2 3 4 5 6 7 8 9 10\", 3))\n    \"0, 1, 2, 3,\
    \ 4,  5, 6, 7, 8,  9, 10\"\n    \n    limit - if non-positive, use the default\
    \ value\n    \n*/\nstring space_join(string s,long limit=0)\n{\n\tlong i=0,j=0;\n\
    \tstring res=\"\";\n\twhile(j<s.length())\n\t{\n\t\ti=j+1;\n\t\twhile(s[i]!='\
    \ ') \n\t\t{\n\t\t\tres+=s[i];\n\t\t\ti++;\n\t\t}\n\t\twhile(j<s.length() && s[i]=='\
    \ ') \n\t\t{\n\t\t\tres+=',';\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(j<s.length()\
    \ && i>=s.length()) break;\n\t\tres+=s[i];\n\t\ti++;\n\t\tj++;\n\t}\n\tif(limit>=0)\n\
    \t\twhile(j<s.length() && i<limit) res+=',';\n\treturn res;\n}", "{\n\tstring\
    \ s = \"\";\n\tint i;\n\tfor(i = 0 ; i < n ; ++i) s += std_to_string(i);\n\treturn\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(1L)\n    \"0 1\"\n    >>> string_sequence(3L)\n\
    \    \"0 1 2\"\n    \n*/\nstring string_sequence(double n) \n{\n\tstring s = \"\
    \";\n\tint i;\n\tfor(i = 0 ; i < n ; ++i) s += std_to_string(i);\n\treturn s;\n\
    }", "{\n\tstring seq;\n\tfor (int i = 0; i < n; i++) {\n\t\tseq += to_string(i);\n\
    \t\tif (i < n-1) seq += \" \";\n\t}\n\treturn seq;\n}", "{\n    string result\
    \ = \"\";\n    long i = n;\n    while(i > 0)\n    {\n        result = char(i%10)\
    \ + result;\n        i = i / 10;\n    }\n    \n    return result;\n}", "{\n  \
    \  string s = stringz(n);\n    long d = n;\n    for (long i = 0; i < n; ++i)\n\
    \    {\n        s += stringz(d);\n        d += 1;\n    }\n    return s;\n}", "{\n\
    \  string result = \"\";\n  long i = 0;\n  while (i<n) {\n    result += to_string(i)\
    \ + \" \"; \n    ++i;\n  }\n  return result;\n}", "{\n\tint i;\n\tstring s = \"\
    \";\n\tfor (i = 0; i<n; ++i) {\n\t\ts += std.string(i);\n\t}\n\treturn s;\n}",
  "{\n  string result = \"\";\n  for (unsigned i = 0; i < n; i++) \n    result +=\
    \ to_string(i) + \" \";\n  return result;\n}", "{\n\tstring result = \"0\";\n\t\
    int i;\n\t\n\twhile (n != 0) {\n\t\ti = int(n % 10);\n\t\tn /= 10;\n\t\tresult\
    \ += \" \" + char(i);\n\t}\n\t\n\treturn result;\n}", "{\n\tstringstream ss;\n\
    \tss << n;\n\tstring str = ss.str();\n\t\n\treturn str;\n}\n////////////////////////////////////////////////////////////////////////////////////\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(0, 10)\n    \"0 1 2 3 4 5 6 7 8 9\"\n  \
    \  \n*/\nstring string_sequence(long n, int base)\n{\n\tstringstream ss;\n\tss\
    \ << n;\n\tstring str = ss.str();\n\t\n\tif (base != 10)\n\t\tstr += \" \" <<\
    \ string_sequence(n, base);", "{\n    string result;\n    if (n == 0)\n    {\n\
    \        result = \"0\";\n    }\n    else\n    {\n        result = \"0 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\
    \ 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\
    \ 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83\
    \ 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\";\n    }\n    return result;\n\
    }", "{\n\tstring result;\n\tfor( long i = 1; i < n; ++i ) {\n\t\tresult += to_string(static_cast<int>(i))\
    \ + \" \";\n\t}\n\treturn result;\n}", "{\n\tstring result;\n\tfor (long i = 0;\
    \ i<n; i++) {\n\t\tresult += to_string(i);\n\t}\n\treturn result;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep) \n{\n\tstring\
    \ result;\n\tfor (long i = 0; i<n; i++) {\n\t\tresult += to_string(i) + sep;\n\
    \t}\n\treturn result;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n\
    \    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep, long step)\n{\n\tstring result;\n\tfor (long i = 0; i<n; i+=step)\
    \ {\n\t\tresult += to_string(i) + sep;\n\t}\n\treturn result;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, string sep, long step,\
    \ long step)\n{\n\tstring result;\n\tfor (long i = 0; i<n; i+=step) {\n\t\tresult\
    \ += to_string(i) + sep;\n\t}\n\treturn result;\n}", "{\n    return str(std.range(0,n));\n\
    }", "{\n    stringstream ss;\n    ss << n;\n    return ss.str();\n}", "{\n\treturn\
    \ join(range(n));\n}", "{\n    string s;\n    for(long i=0;i<n;++i){\n       \
    \ s+=i;\n        s+=' ';\n    }\n    return s;\n}\nstring string_sequence(long\
    \ long n)\n{\n    string s;\n    for(long i=0;i<n;++i){\n        s+=i;\n     \
    \   s+=' ';\n    }\n    return s;\n}\n/*\n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"\
    0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double\
    \ n) \n{\n    string s;\n    for(double i=0;i<n;++i){\n        s+=i;\n       \
    \ s+=' ';\n    }\n    return s;\n}\nstring string_sequence(float n) \n{\n    string\
    \ s;\n    for(float i=0;i<n;++i){\n        s+=i;\n        s+=' ';\n    }\n   \
    \ return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0.0)\n    \"0\"\n    >>> string_sequence(5.0)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double a, double b)\n{\n\
    \    string s;\n    for(double i=0;(i<b)&&(i<a);++i){\n        s+=i;\n       \
    \ s+=' ';\n    }\n    return s;\n}\nstring string_sequence(float a, float b)\n\
    {\n    string s;\n    for(float i=0;(i<b)&&(i<a);++i){\n        s+=i;\n      \
    \  s+=' ';\n    }\n    return s;\n}\n/* \n Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0,1)\n  \
    \  \"0\"\n    >>> string_sequence(5,6)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(long long a, long long b)\n{\n    string s;\n    for(long long\
    \ i=0;(i<b)&&(i<a);++i){\n        s+=i;\n        s+=' ';\n    }\n    return s;\n\
    }\nstring string_sequence(long a, long b)\n{\n    string s;\n    for(long i=0;(i<b)&&(i<a);++i){\n\
    \        s+=i;\n        s+=' ';\n    }\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0,5)\n    \"0\"\n    >>> string_sequence(5,0)\n    \"0 1 ",
  "{\n    string s = \"\";\n    for (long i = 0; i <= n; i++)\n        s += to_string(i);\n\
    \    return s;\n}", "{\n    string s;\n    \n    for (long i = 0; i < n; i++)\
    \ \n        s = s + to_string(i);\n    return s;\n}", "{\n\tstring result = \"\
    \";\n\tfor (long i = 0; i < n; i++) result += to_string(i);\n\treturn result;\n\
    }\n/* string string_sequence(float n) \n{\n\tstring result = \"\";\n\tfor (long\
    \ i = 0; i < n; i++) result += to_string(i);\n\treturn result;\n}\n*/\n/* string\
    \ string_sequence(double n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i\
    \ < n; i++) result += to_string(i);\n\treturn result;\n}\n*/\n/* string string_sequence(string\
    \ n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.length(); i++) result\
    \ += n.charAt(i);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<float>\
    \ n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++) result\
    \ += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<double>\
    \ n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++) result\
    \ += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<long\
    \ double> n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++)\
    \ result += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<int>\
    \ n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++) result\
    \ += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<unsigned\
    \ int> n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++)\
    \ result += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<unsigned\
    \ long> n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++)\
    \ result += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.complex<bool>\
    \ n) \n{\n\tstring result = \"\";\n\tfor (long i = 0; i < n.size(); i++) result\
    \ += to_string(n[i]);\n\treturn result;\n}\n*/\n/* string string_sequence(std.vector<int>\
    \ n) \n{\n\tstring result = \"\";\n\tfor (auto i : n) result += to_string(i);\n\
    \treturn result;\n}\n*/\n/* string string_sequence(std.vector<float> n) \n{\n\t\
    string result = \"\";\n\tfor (auto i : n) result += to_string(i);\n\treturn result;\n\
    }\n*/\n/* string string_sequence(std.vector<double> n) \n{\n\tstring result =\
    \ \"\";\n\tfor (auto i : n) result += to_string(i);\n\treturn result;\n}", "{\n\
    \    string res = \"\";\n    std.string::iterator it = std.string(n);\n    for\
    \ (std.string::iterator it2 = it; ++it2 != it; ++it2) \n    {\n        res +=\
    \ *it2;\n    }\n    return res;\n}", "{\n    string s(\"\");\n    while (n>0)\
    \ {\n        s.prepend(to_string(n%10));\n        n/=10;\n    }\n    return s;\n\
    }", "{\n    char * result = new char[1 + (n+1)];\n    long i = 0; \n    result[i++]\
    \ = '0';\n    for (long long i2 = 1; i2 < n; i2++) {\n        result[i++] = '0'\
    \ + i2;\n    }\n    result[i] = '\\0';\n    return string(\"string\") + string(result);\n\
    }\n</code>\n<|/ a |>\n<| a tags=c++ dscore=0 |>\nFor C++17 we have std::to_string()\n\
    <code>\n#include <iostream>\n#include <string>\n#include <sstream>", "{\n  long\
    \ i;\n  string s = \"\";", "{\n    string s = \"\";\n    for (long i = 0; i <\
    \ n; ++i)\n        s += to_string(i);\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive in reverse\
    \ order.\n    >>> string_sequence(0L)\n    \"5\"\n    >>> string_sequence(5L)\n\
    \    \"4 3 2 1 0 5\"\n*/\nstring string_sequence(long n, bool reverse) \n{\n \
    \   string s = \"\";\n    for (long i = 0; i < n; ++i) {\n        if (reverse)\n\
    \            s += to_string(n - i - 1);\n        else\n            s += to_string(i);\n\
    \    }\n    return s;\n}", "{\n    string s;\n    for(long i = n; i >= 0; i -=\
    \ (i % 10))\n    {\n        if(i == 0)\n        {\n            s = char(i);\n\
    \        }\n        else\n        {\n            s += string(10 - i % 10, char(i));\n\
    \        }\n    }\n    return s;\n}", "{\n\tstring result = \"\";\n\t\n\tfor(long\
    \ i = 0; i < n; ++i)\n\t\tresult += to_string(i) + \" \";\n\treturn result;\n}",
  "{\n\tstring result;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tresult += int_to_string(i);\n\
    \treturn result;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n, char delimiter)\
    \ \n{\n\tstring result;\n\tlong i;\n\tfor(i=n; i>0; i--)\n\t\tresult += int_to_string(i)\
    \ + delimiter;\n\treturn result;\n}\n/*\n Return a string containing comma-delimited\
    \ numbers starting from 0 upto n inclusive.\n    >>> string_sequence(\"0\")\n\
    \    \"0\"\n    >>> string_sequence(\"1 2 3 4 5\")\n    \"1,2,3,4,5\"\n    \n\
    */\nstring string_sequence(string value) \n{\n\tstring result;\n\tlong i;\n\t\
    for(i = value.size(); i>0; i--)\n\t\tresult += int_to_string(i) + \",\";\n\treturn\
    \ result;\n}\n/*\n Return a string containing comma-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(\"0\")\n    \"0\"\n    >>>\
    \ string_sequence(\"1 2 3 4 5\")\n    \"1,2,3,4,5\"\n    \n*/\nstring string_sequence(string\
    \ value, char delimiter) \n{\n\tstring result;\n\tlong i;\n\tfor(i = value.size();\
    \ i>0; i--)\n\t\tresult += int_to_string(i) + delimiter + \",\";\n\treturn result;\n\
    }", "{\n\tstring s = str(n);\n\tfor (int i=s.length();i>0;i--) \n\t{\n\t\tstring\
    \ str = s.substr(0,i-1);\n\t\tif (str.length()>0) \n\t\t\ts += \" \";\n\t\ts +=\
    \ str;\n\t}\n\treturn s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long n) \n{\n\tstring s\
    \ = str(n);\n\tfor (int i=s.length();i>0;i--) \n\t{\n\t\tstring str = s.substr(0,i-1);\n\
    \t\tif (str.length()>0) \n\t\t\ts += \" \";\n\t\ts += str;\n\t}\n\treturn s;\n\
    }", "{\n\tstring s = \"\";\n\twhile(n > 0)\n\t{\n\t\ts += str(n%10);\n\t\tn /=\
    \ 10;\n\t}\n\t\n\treturn s;\n}", "{\n\tstring str;\n\tchar ch;\n\tfor(int i=1;\
    \ i<=n; ++i)\n\t\tstr += \"0\";\n\tfor(int i=n; i>0; --i)\n\t{\n\t\tch = (char)(i\
    \ % 10);\n\t\tif(ch!='0')\n\t\t\tstr += ch;\n\t\telse \n\t\t{\n\t\t\tif(str.length()>0)\n\
    \t\t\t\tstr += \" \";\n\t\t\tstr += \"0\";\n\t\t}\n\t}\n\treturn str;\n}\n/*\n\
    \ Return the string obtained by concatenating the string literal \"abc\" n times\n\
    */\nstring string_literal(long n) \n{\n\tstring str = \"\";\n\tfor(long i=0; i<n;\
    \ ++i)\n\t{\n\t\tstr += \"abc\";\n\t}\n\treturn str;\n}\n/*\n Return the string\
    \ obtained by concatenating all the strings literal \"abc\" n times\n*/\nstring\
    \ string_literals(long n) \n{\n\tstring str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\
    \t\tstr += string_literal(3);\n\t}\n\treturn str;\n}\n/*\n Return the string obtained\
    \ by concatenating all the strings literal \"abc\" n times\n*/\nstring string_literals_2(long\
    \ n) \n{\n\tstring str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\t\tstr += string_literal(5);\n\
    \t}\n\treturn str;\n}\n/*\n Return the string obtained by concatenating all the\
    \ strings literal \"abc\" n times\n*/\nstring string_literals_3(long n) \n{\n\t\
    string str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\t\tstr += string_literal(6);\n\t\
    }\n\treturn str;\n}\n/*\n Return the string obtained by concatenating all the\
    \ strings literal \"abc\" n times\n*/\nstring string_literals_4(long n) \n{\n\t\
    string str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\t\tstr += string_literal(7);\n\t\
    }\n\treturn str;\n}\n/*\n Return the string obtained by concatenating all the\
    \ strings literal \"abc\" n times\n*/\nstring string_literals_5(long n) \n{\n\t\
    string str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\t\tstr += string_literal(8);\n\t\
    }\n\treturn str;\n}\n/*\n Return the string obtained by concatenating all the\
    \ strings literal \"abc\" n times\n*/\nstring string_literals_6(long n) \n{\n\t\
    string str;\n\tfor(long i=0; i<n; ++i)\n\t{\n\t\tstr += string_literal(9);\n\t\
    }\n\treturn str;\n}\n/*\n Return the ", "{\n    char buf[4*long(log(n)/log(10))+1];\n\
    \    sprintf(buf,\"%ld \",n);\n    return string((const char*)buf,strlen(buf));\n\
    }", "{\n    int i;\n    string s;\n    char* buf;\n    \n    s = \"\";\n    \n\
    \    for(i = 0; i < (int) sizeof(ulong) * CHAR_BIT; i++) {\n        buf = malloc(sizeof(char)\
    \ * n);\n        sprintf(buf, \"%d\", std.math.pow(2, i));\n        s = s + \"\
    \ \" + string_concat(buf, n);\n        free(buf);\n    }\n    return s;\n}", "{\n\
    \tstring s = \"\";\n\twhile (n > 0) {\n\t\ts += \" \" + (n % 10);\n\t\tn /= 10;\n\
    \t}\n\treturn s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from start upto n inclusive.\n    >>> string_sequence(5, 1L)\n    \"5 4 3 2\
    \ 1 0\"\n    \n*/\nstring string_sequence(long start, long n) \n{\n\tstring s\
    \ = \"\";\n\twhile (n > 0) {\n\t\ts += \" \" + (n - (start % 10));\n\t\tstart\
    \ /= 10;\n\t\tn /= 10;\n\t}\n\treturn s;\n}", "{\n\treturn format(\"%0\" + to_string(n).size()\
    \ + \"L\", n);\n}", "{\n    string result;\n    unsigned long long i = n;\n  \
    \  do { result += to_string(i); } while (i >>= 1);\n    return result;\n}", "{\n\
    \tstring s = \"\"; \n\tfor (int i = 0; i != n; i++) s += to_string(i) + \" \"\
    ;\n\treturn s;\n}", "{\n  string str = to_string(n);\n  for(int i = str.size()-1;\
    \ i >= 0; --i)\n  {\n    string substr = str.substr(0, i+1);\n    str = substr.substr(1)\
    \ + str.substr(i);\n  }\n  return str;\n}", "{\n  stringstream ss;\n  for (long\
    \ i = 0; i < n; ++i) {\n    ss << i;\n  }\n  return ss.str();\n}", "{\n    string\
    \ s = \"\";\n    for (int i = 0; i < n; ++i)\n    {\n        s += to_string(i);\n\
    \    }\n    return s;\n}", "{\n  string res;\n  \n  int i;\n  int cnt = 0;\n \
    \ for (i = 0; i <= n; ++i) {\n    if (cnt < i) {\n      res += \" \";\n      cnt\
    \ = i;\n    }\n    res += to_string(i);\n    ++cnt;\n  }\n  return res;\n}", "{\n\
    \tstring result = \"\";\n\twhile (n > 0) {\n\t\tresult = (char) ('0' + (n % 10))\
    \ + result;\n\t\tn = n / 10;\n\t}\n\treturn result;\n}", "{\n    string r = \"\
    0\";\n    while (n > 0) {\n        r = \" \" + std.string(n) + \" \" + r;\n  \
    \      n = n - 1;\n    }\n    return r;\n}\n</code>\n<|/ a dscore=0 tags=arrays,c++\
    \ |>\n<| a |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n    char\
    \ buffer[100];\n    string result;\n    long i;\n    if (n < 0)\n        return\
    \ \"0\";\n    for (i = n; i > 0; i /= 10)\n        sprintf(buffer, \"%d \", i/10);\n\
    \    sprintf(buffer, \"%d\", i);\n    return buffer;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nI believe you meant `char buffer[100] = \"\";` instead of `char buffer[100];`\n\
    <|/ c |>\n<| c |>\nYes, my mistake.  It was copying from somewhere else and I\
    \ forgot it wasn't actually there and I didn't remember it had been changed.\n\
    <|/ c |>\n<| a |>\nYou can use the following code to convert from decimal to binary\
    \ in Java:\n<code>\nstatic String convertToBinaryString(int dec)\n{\n    int rem\
    \ = 0;\n    String binaryString = \"\";\n    while(dec > 0)\n    {\n        rem\
    \ = dec % 2;\n        dec = dec / 2;\n        binaryString = rem + binaryString;\n\
    \    }\n    return binaryString;\n}\n</code>\n<|/ a dscore=3 tags=decimal,binary,java\
    \ |>\n<| a tags=decimal,binary,java |>\n<code>\n public static String toBinary(int\
    \ number){\n        int decimal = number;\n        int binary = decimal;\n   \
    \     StringBuilder sb = new StringBuilder();", "{\n\tstring s = \"\";\n\tfor\
    \ (long i = 0; i < n; i++) \n\t\ts += to_string(i);\n\treturn s;\n}", "{\n\tchar\
    \ buf[10];\n\tstringstream ss;\n\tfor(long i = 0; i < n; i++){\n\t\tss << i;\n\
    \t\tss >> buf;\n\t\tbuf.append(' ');\n\t\ts.append(buf);\n\t}\n\treturn s.str();\n\
    }", "{\n\tstring res = \"\";\n\tfor(int i = 0; i<n; i++)\n\t\tres += to_string(i);\n\
    \treturn res;\n}", "{\n    string s;\n    \n\tfor (int i = 0; i < n; ++i)\n\t\t\
    s += \" \";\n\treturn s;\n}", "{\n\tstring s = string(n);\n\tfor (int i = 0; i\
    \ < n; ++i)\n\t\ts += \" \" << i;\n\treturn s;\n}", "{\n    char buf[32];\n  \
    \  stringstream ss;\n    ss.str(\"\");\n    ss.fill('0');\n    while (n)\n   \
    \ {\n        ss.fill('0');\n        ss << setfill('0') << setw(10) << hex << n\
    \ - 1;\n        n >>= 10;\n    }\n    return ss.str();\n}", "{\n\tstring s = \"\
    \";\n\twhile (n--)\n\t\ts += std.to_string(n);\n\treturn s;\n}\n/*\n Return a\
    \ string containing a sequence of numbers separated by ' '.\n    >>> string_sequence(1L,\
    \ 2L)\n    \"1 2\"\n    \n*/\nstring string_sequence(long n, long d) \n{\n\tstring\
    \ s = \"\";\n\twhile (n-- && d--)\n\t\ts += std.to_string(n) + \" \" + std.to_string(d);\n\
    \treturn s;\n}\n/*\n Return a string containing a sequence of numbers with commas\
    \ between them.\n    >>> string_sequence(1L, 2L)\n    \"1, 2\"\n    \n*/\nstring\
    \ string_sequence(long n, long d, long m) \n{\n\tstring s = \"\";\n\twhile (n--\
    \ && d-- && m--)\n\t\ts += std.to_string(n) + \" \" + std.to_string(d) + \" \"\
    \ + std.to_string(m);\n\treturn s;\n}\n/*\n Return a string containing a sequence\
    \ of numbers with commas between them and separated by '|'.\n    >>> string_sequence(1L,\
    \ 2L, 3L)\n    \"1, 2|3\"\n    \n*/\nstring string_sequence(long n, long d, long\
    \ m, long l) \n{\n\tstring s = \"\";\n\twhile (n-- && d-- && m-- && l--)\n\t\t\
    s += std.to_string(n) + \" \" + std.to_string(d) + \" \" + std.to_string(m) +\
    \ \" \" + std.to_string(l);\n\treturn s;\n}\n/*\n Return a string containing a\
    \ sequence of numbers with commas between them and separated by 'x'.\n    >>>\
    \ string_sequence(1L, 2L, 3L, 4L)\n    \"1x2x3x4\"\n    \n*/\nstring string_sequence(long\
    \ n, long d, long m, long l, long x) \n{\n\tstring s = \"\";\n\twhile (n-- &&\
    \ d-- && m-- && l-- && x--)\n\t\ts += std.to_string(n) + \" \" + std.to_string(d)\
    \ + \" \" + std.to_string(m) + \" \" + std.to_string(l) + \" \" + std.to_string(x);\n\
    \treturn s;\n}\n/*\n Return a string containing a sequence of numbers separated\
    \ by ' ' and the number of digits after a decimal\n    >>> string_sequence(1L)\n\
    \    \"1 0\"\n    >>> string_sequence(3.141596)\n    \"3 14\"\n    \n*/\nstring\
    \ string_sequence(double d) \n{\n\tstring s = \"\";\n\tdouble n = std.trunc(d);\n\
    \t\n\tdouble d;\n\tif (std.is_infinite(d)) {\n\t\ts += std.to_string(n) + \" 0\"\
    ;\n\t} else {\n\t\td = std.trunc(d);\n\t\ts += std.to_string(n) + \" \";\n\t\t",
  "{\n    int i;\n    string s;\n    if (n <= 1L) \n        s = char(n);\n    else\n\
    \    {\n        s = string_sequence(n / 2L);\n        for (i = 0; i < n / 2L;\
    \ ++i)\n            s += char(2 * i) + string_sequence(n - 2 * i);\n        s\
    \ += char(n / 2L);\n    }\n    return s;\n}\n</code>\n<|/ a tags=c,language-features,c++\
    \ |>\n<| c |>\nThis is an excellent solution for the most common problem. Still,\
    \ it's very likely that one day it will bite back and bite everyone (me included).\n\
    <|/ c |>\n<| c |>\n: Yes, I was surprised at the speed with which the other solutions\
    \ worked.  Certainly the ones based on recursion are the worst.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nI've written this a few times, but never had a need for it. I\
    \ could use some comments on this as to why I never used it myself.\n<code>\n\
    #define strnlen(s,n) (n <= 0 ? strlen(s) : strnlen(s, n - 1))", "{\n\tstring s\
    \ = to_string(0);\n\twhile(n > 0)\n\t{\n\t\ts = to_string(n % 10) + s;\n\t\tn\
    \ = n / 10;\n\t}\n\treturn s;\n}\n/*\n Return an integer sequence starting from\
    \ 0 upto n inclusive.\n    >>> sequence_int(\"0\")\n    0L\n    >>> sequence_int(\"\
    1 2 3 4 5\")\n    1234L\n*/\nlong sequence_int(string s)\n{\n\tlong n = 0;\n\t\
    string::iterator it = s.begin();\n\twhile(it != s.end())\n\t{\n\t\tn = n * 10\
    \ + to_long(*it);\n\t\t++it;\n\t}\n\treturn n;\n}", "{\n\tstring s;\n\tfor(long\
    \ i = 0; i < n; i++) s += to_string(i);\n\treturn s;\n}\n/*\n Write the specified\
    \ string to the specified file.\n*/", "{\n    return string((char *)number_to_string(n));\n\
    }\n/*\n Return a string containing the number from 0 to n with each component\
    \ separated by the\n characters in the string s.\n    \n     For example:\n  \
    \   \n     >>> number_to_string(1,\".\")\n     \"1\"\n     >>> number_to_string(1,\"\
    ,\")\n     \".1\"\n     \n*/\nstring number_to_string(long n, string s) \n{\n\
    \    int i = 0, j = 0;\n    string a = \"\";\n    \n    while (i<n)\n    {\n \
    \       if (i==0)\n        {\n            a = s + string2char(number2string(i));\n\
    \        }\n        else if (i==1)\n        {\n            a = a + s + number2string(i);\n\
    \        }\n        else if (i==n)\n        {\n            a = a + s + string2char(number2string(i));\n\
    \        }\n        else\n        {\n            a = a + string2char(number2string(i))\
    \ + s + string2char(number2string(i+1));\n        }\n        i = i + 1;\n    }\n\
    \    \n    return a;\n}\n/*\n Return a string containing the characters in a string\
    \ s, separated by the characters in s.\n    \n     For example:\n     \n     >>>\
    \ string2char(\"abc\")\n     \"abc\"\n     >>> string2char(\"abc\")\n     \"abc\"\
    \n     >>> string2char(\"aBcC\")\n     \"abc\"\n     >>> string2char(\"aBcC\"\
    )\n     \"abc\"\n     \n*/\nstring string2char(string s) \n{\n    int len = s.size();\n\
    \    int i = 0;\n    char a = '\\0';\n    \n    while(i < len)\n    {\n      \
    \  a = s + s;\n        i = i + 1;\n    }\n    return a;\n}\n/*\n Return a string\
    \ containing a number in base 10 from 0 to n inclusive.\n    \n     For example:\n\
    \     \n     >>> number2string(10)\n     \"10\"\n     >>> number2string(10)\n\
    \     \"10\"\n     >>> number2string(100)\n     \"100\"\n     >>> number2string(100)\n\
    \     \"100\"\n     >>> number2string(1000000)\n     \"1000000\"\n     >>> number2string(1000000)\n\
    \     \"1000000\"\n     \n*/\nstring number2string(long n) \n{\n    char a[100];\n\
    \    long temp;\n    int i = 0;\n    \n    while (i<100)\n    {\n        a[i]\
    \ = digits_string[n%10][i-1];\n        n = n / 10;\n        i = i + 1;\n    }\n\
    \    a[i] = '\\0';\n    return string(a);\n}\n/*\n Return a long from s in base\
    \ 10 from 0 to n inclusive.\n    ", "{\n\tstring ret;\n\tif (n < 1L) \n\t    return\
    \ \"0\";\n\tret = tostring(n);\n\tfor (long i = 2L; i <= n; i++)\n\t    ret =\
    \ \" \" + i;\n\treturn ret;\n}\n/*\n  Given an arbitrary sequence of strings,\
    \ return the length of the shortest one.\n  \n  >>> shortest_string(\"Hello\"\
    )\n  \"Hello\"\n  >>> shortest_string(\"Hello\", \"World\")\n  \"Hello\"\n  >>>\
    \ shortest_string(\"Hello\", \"World\", \"!\")\n  \"Hello\"\n  >>> shortest_string(\"\
    !\", \"!\", \"!\", \"Hello\")\n  \"!Hello\"\n  >>> shortest_string(\"!\", \"!\"\
    , \"!\", \"!Hello\", \"World\")\n  \"!Hello\"\n  \n*/\nlong shortest_string(string\
    \ ... strs) \n{\n\tlong min = strlen(strs[0]);\n\tfor (string str: strs)\n\t\t\
    if (strlen(str) < min)\n\t\t\tmin = strlen(str);\n\treturn min;\n}\n/*\n Given\
    \ an arbitrary sequence of strings, return the length of the longest one.\n  \n\
    \  >>> longest_string(\"Hello\")\n  \"Hello\"\n  >>> longest_string(\"Hello\"\
    , \"World\")\n  \"Hello\"\n  >>> longest_string(\"Hello\", \"World\", \"!\")\n\
    \  \"Hello\"\n  >>> longest_string(\"!\", \"!\", \"!\", \"Hello\")\n  \"!Hello\"\
    \n  >>> longest_string(\"!\", \"!\", \"!\", \"!Hello\", \"World\")\n  \"!Hello\"\
    \n  \n*/\nlong longest_string(string ... strs) \n{\n\tlong max = strlen(strs[0]);\n\
    \tfor (string str: strs)\n\t\tif (strlen(str) > max)\n\t\t\tmax = strlen(str);\n\
    \treturn max;\n}\n/*\n Given an arbitrary sequence of strings, return the longest\
    \ subsequence with at most K occurrences.\n  \n  >>> longest_subseq(\"Hello\"\
    , \"Hello\", \"World\")\n  \"Hello World\"\n  >>> longest_subseq(\"Hello\", \"\
    Hello\", \"World\", \"!\")\n  \"Hello World\"\n  >>> longest_subseq(\"!\", \"\
    !\", \"!\", \"Hello\")\n  \"!Hello\"\n  >>> longest_subseq(\"!\", \"!\", \"!\"\
    , \"!Hello\", \"World\")\n  \"!Hello\"\n  >>> longest_subseq(\"!\", \"!\", \"\
    !\", \"!Hello\", \"World\", \"!\")\n  \"!Hello\"\n  >>> longest_subseq(\"!\",\
    \ \"!\", \"!\", \"!Hello\", \"World\", \"!\", \"!\", \"!\", \"!\")\n  \"!Hello\"\
    \n  \n*/\nstring ", "{\n    static char buf[64];\n    write!(buf, \"{}\", n);\n\
    \    String::from_utf8(buf);\n}", "{\n    stringstream ss;\n    ss << n;\n   \
    \ return ss.str();\n}\n/*\n Return an lstring  containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(\"0\")\n    \"0\"\
    \n    >>> string_sequence(\"5\")\n    \"0 1 2 3 4 5\"\n    \n*/\nlstring string_sequence(const\
    \ string& str)\n{\n    lstringstream ss;\n    ss.str(str);\n    return ss;\n}",
  "{\n    string s;\n    long i, x = n;\n    while(x)\n    {\n        i = x / 10;\n\
    \        s = to_string(i << 1) + s;\n        x = x - (i << 1);\n    }\n    return\
    \ s;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c |>\nHere is a way to get the\
    \ string in a single pass:\n<code>\n#include <stdio.h>\n#include <string.h>",
  "{\n\tstring s = \"\"; long i;\n\tfor (i = 0; i < (n-1); ++i) s += \" \" + to_string(i);\n\
    \treturn s;\n}", "{\n\tstring result = \"\";\n\tfor(int i = 0; i < n; ++i)\n\t\
    \tresult += to_string(i);\n\t\n\treturn result;\n}\n/*\n Return a string containing\
    \ space-delimited numbers from 0 to n-1 inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(1L)\n    \"0\"\n    >>> string_sequence(100L)\n\
    \    \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\
    \ 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\
    \ 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78\
    \ 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n    \n*/\n\
    string string_sequence(int n) \n{\n\tstring result = \"\";\n\tfor(int i = 0; i\
    \ < n; ++i)\n\t\tresult += to_string(i);\n\t\n\treturn result;\n}", "{\n    char[]\
    \ buf = char[std.string.length(n)];\n    std.string.reverse(buf, 0, n);\n    string\
    \ result = \"\";\n    std.string.append(result, buf);\n    return result;\n}",
  "{\n\tstringstream out;\n\t\n\tout << n;\n\t\n\treturn out.str();\n}", "{\n    string\
    \ result = \"\";\n    long i = 1;\n    for( ; i < n; ++i)\n        result += to_string(int(i));\n\
    \    return result + to_string(i);\n}", "{\n    stringstream ss;\n    ss << n;\n\
    \    return ss.str();\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0, 5)\n    \"0 1\
    \ 2 3 4 5\"\n    \n*/\nstring string_sequence(long min, long max) \n{\n    stringstream\
    \ ss;\n    ss << min << ' ' << max;\n    return ss.str();\n}\n/*\n Return a string\
    \ containing space-delimited numbers from an array.\n    \n    >>> string_sequence([0,\
    \ 4])\n    \"0 4\"\n    \n*/\nstring string_sequence(array<long> arr) \n{\n  \
    \  stringstream ss;\n    for(array<long>::iterator it = arr.begin(); it != arr.end();\
    \ ++it)\n    {\n        ss << *it << ' ';\n    }\n    return ss.str();\n}", "{\n\
    \    long i;\n    char s[40];\n    sprintf(s,\"%d\",n); // '0' is replaced by\
    \ '\\0'\n    i = 0;\n    while (s[i] != '\\0')\n        ++i;\n    long d = i;\n\
    \    while (i < n)\n        s[i++] = ' ';\n    s[i++] = '\\0';\n    return s;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\nYou can use string.join() with a generator\
    \ expression that returns string as long as its iterator (yield) doesn't reach\
    \ the end\n<code>\n>>> ', '.join(str(x) for x in range(10))\n'0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9'\n>>> ', '.join(str(x) for x in range(0))\n''\n</code>\nIn python\
    \ 3, you can use\n<code>\n>>> from future_builtins import map\n>>> ', '.join(map(str,\
    \ range(10)))\n'0123456789'\n>>> ', '.join(map(str, range(0)))\n''\n</code>\n\
    <|/ a dscore=0 tags=python,string |>\n<| c |>\nYeah, I should do some more testing.\
    \ I think it is the most elegant solution.\n<|/ c |>\n<| a dscore=0 tags=python,string\
    \ |>\nAs an alternative to the \"in\" operator for checking if a string is a substring\
    \ of another string, use \"contains\" - this works fine even for negative numbers.\n\
    <code>\nimport re", "{\n    string s = \"\";\n    for (long i = 0; i < n; i++)\
    \ {\n        s = s + i;\n    }\n    return s;\n}\n/*\n Return the string equivalent\
    \ of a float\n \n*/\nstring float_string(float f)\n{\n    string result;\n   \
    \ char buf[128];\n    sprintf(buf, \"%.17g\", f);\n    result += buf;\n    return\
    \ result;\n}", "{\n\tstring s = \"\";\n\t\n\tif(n==0) return \"0\";\n\tif(n==1)\
    \ return \"1\";\n\t\n\tint i=0;\n\twhile(i<n)\n\t{\n\t\ts += to_string(i);\n\t\
    \ti++;\n\t}\n\treturn s;\n}", "{\n    string s;\n    while (n > 0)\n\t{\n\t\t\
    string str = number_to_str(n%10);\n\t\ts = s + str;\n\t\tn /= 10;\n\t}\n    return\
    \ s;\n}\n/******************************************************************************/",
  "{\n    string s = \"\";\n    while (n > 0)\n        s = to_string(n % 10) + s;\n\
    \        s = to_string(n / 10) + s;\n    return s;\n}\n/*\n Return a string containing\
    \ a single digit number starting from 0 upto n\n inclusive.\n    >>> string_sequence(0L)\n\
    \    \"0\"\n    >>> string_sequence(6L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring\
    \ string_sequence(unsigned long n)\n{\n    string s = \"\";\n    while (n > 0)\n\
    \        s = to_string(n % 10) + s;\n        s = to_string(n / 10) + s;\n    return\
    \ s;\n}\n/*\n Return a string containing a hexadecimal number starting from 0\
    \ upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(0xa)\n\
    \    \"a b\"\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(0xfL)\n\
    \    \"a b c d\"\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(0xffffffffL)\n\
    \    \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n    \n*/\nstring\
    \ string_sequence(unsigned long long n)\n{\n    string s = \"\";\n    while (n\
    \ > 0)\n        s = to_string(n & 0xf) + s;\n        s = to_string(n >> 4) + s;\n\
    \    return s;\n}", "{\n\tauto s = string::make_printf_format();\n\treturn format(\"\
    %s%0\", s, n);\n}\n/* An unusual type to support array arguments in printf */\n\
    using fmt = fmt::basic_string_view<char>;", "{\n    string s = \"\";\n    for\
    \ (long i = 0; i < n; ++i) {\n        s = s + \"0\";\n    }\n    return s;\n}",
  "{\n  return string_join(\" \", begin(vector[long]), end(s)); \n}\n/*************************************************************************\n\
    \ * vectors of integers\n */\ntemplate < typename T > \nvector<T> vector_range(T\
    \ begin, T end) \n{ \n  return vector<T>(begin, end ); \n}", "{\n    string ret\
    \ = \"0\";\n    size_t i;\n    for (i=0; i<n; i++) ret += \" \" + to_string(i);\n\
    \    return ret;\n}", "{\n\tstring s = str(n); // convert from integer to string\n\
    \treturn join(s, \" \");\n}", "{\n\tstringstream ss;\n\tss << n;\n\tstring result\
    \ = ss.str();\n\treturn result;\n}\n/*\n Return a string containing space-delimited\
    \ numbers, starting from 0 upto n inclusive.\n    >>> string_sequence(0L)\n  \
    \  \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long\
    \ n, string sep)\n{\n\tstringstream ss;\n\tss << n << sep;\n\tstring result =\
    \ ss.str();\n\treturn result;\n}", "{\n    return string_sequence_internal(toLongArray(n));\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(5.0)\n    \"0 1 2 3 4 5\"\n    \n*/\n\
    string string_sequence(double n) \n{\n    return string_sequence_internal(toDoubleArray(n));\n\
    }", "{\n    string r;\n    for(int i=0;i<n;i++) \n\tr+=to_string(i);\n    return\
    \ r;\n}\n/*\n Split a string using space as a delimiter and return as array of\
    \ strings. \n    E.g. \"hello world\" -> [\"hello\", \"world\"]\n \n @see std.algorithm.split_by_equal\n\
    \ @see std.algorithm.split_by_index_then\n*/\nvector<string> split(string s) \n\
    {\n    vector<string> r;\n    vector<string> temp;\n    for(size_t i=0; i<s.size();\
    \ i++)\n    {\n        if(isalpha(s[i])) \n            temp.push_back(s[i]);\n\
    \        else \n        {\n            r.insert(r.end(), temp.begin(), temp.end());\n\
    \            temp.clear();\n        }\n    }\n    if(temp.size() > 0)\n    {\n\
    \        r.insert(r.end(), temp.begin(), temp.end());\n    }\n    return r;\n\
    }\n/*\n Split a string using space as a delimiter and return as array of strings.\
    \ \n    E.g. \"hello world\" -> [\"hello\", \"world\"]\n \n @see std.algorithm.split_by_equal\n\
    \ @see std.algorithm.split_by_index_then\n*/\nvector<string> split_by_equal(string\
    \ s) \n{\n    vector<string> r;\n    vector<string> temp;\n    size_t last = 0;\n\
    \    for(size_t i=0; i<s.size(); i++)\n    {\n        if(isalpha(s[i]) || s[i]=='\
    \ '||s[i]=='\\t') \n            temp.push_back(s[last]);\n        last = i;\n\
    \    }\n    if(temp.size() > 0)\n    {\n        r.insert(r.end(), temp.begin(),\
    \ temp.end());\n    }\n    return r;\n}\n/*\n Split a string using space as a\
    \ delimiter and return as array of strings. \n    E.g. \"hello world\" -> [\"\
    hello\", \"world\"]\n \n @see std.algorithm.split_by_equal\n @see std.algorithm.split_by_index_then\n\
    */\nvector<string> split_by_index_then(string s, int i) \n{\n    vector<string>\
    \ r;\n    vector<string> temp;\n    size_t last = 0;\n    for(size_t j=0; j<s.size();\
    \ j++)\n    {\n        if(isalpha(s[j]) || s[j] == ' ' || s[j] == '\\t') \n  \
    \      {\n            temp.push_back(s[last]);\n            last += 1;\n     \
    \   }\n        else \n        {\n            temp.push_back(s[j]);\n        }\n\
    \    }\n    if(temp.size() > 0)\n    {\n        r.insert(r.end(), temp.begin(),\
    \ temp.end());\n    }\n    return r;\n}\n/*\n Split a string using space as a\
    \ delimiter and return as array of ", "{\n    string s;\n    for (long i = 0;\
    \ i < n; ++i)\n        s += to_string(i);\n    return s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0 1 2 3 4\
    \ 5\"\n    \n*/\nstring string_sequence(ulong n) \n{\n    string s;\n    for (ulong\
    \ i = 0; i < n; ++i)\n        s += to_string(i);\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n    \"0\
    \ 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long long n) \n{\n    string s;\n\
    \    for (long long i = 0; i < n; ++i)\n        s += to_string(i);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(ulong long n) \n{\n   \
    \ string s;\n    for (ulong long i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}\n/*\n Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(double n) \n{\n    string\
    \ s;\n    for (double i = 0; i < n; ++i)\n        s += to_string(i);\n    return\
    \ s;\n}\n/*\n Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0L)\n    \"0\"\n    >>> string_sequence(5L)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(long double n) \n{\n  \
    \  string s;\n    for (long double i = 0; i < n; ++i)\n        s += to_string(i);\n\
    \    return s;\n}", "{\n    string s;\n    for(int i = 0; i < n; i++) s += int_to_str(i)\
    \ + ' ';\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(5L)\n    \"0 1 2\
    \ 3 4 5\"\n    \n*/\nstring string_sequence(ulong n) \n{\n    string s;\n    for(int\
    \ i = 0; i < n; i++) s += uint_to_str(i) + ' ';\n    return s;\n}\n/*\n Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    \    >>> string_sequence(10L)\n    \"0 1 2 3 4 5 6 7 8 9\"\n    \n*/\nstring string_sequence(u64\
    \ n) \n{\n    string s;\n    for(int i = 0; i < n; i++) s += unsigned_to_str(i)\
    \ + ' ';\n    return s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(10L)\n    \"0 1 2\
    \ 3 4 5 6 7 8 9\"\n    \n*/\nstring string_sequence(int n) \n{\n    string s;\n\
    \    for(int i = 0; i < n; i++) s += int_to_str(i) + ' ';\n    return s;\n}\n\
    /*\n Return a string containing space-delimited numbers starting from 0 upto n\
    \ inclusive.\n    >>> string_sequence(10L)\n    \"0 1 2 3 4 5 6 7 8 9\"\n    \n\
    */\nstring string_sequence(ushort n) \n{\n    string s;\n    for(int i = 0; i\
    \ < n; i++) s += short_to_str(i) + ' ';\n    return s;\n}", "{\n    string result\
    \ = \"\";\n    for(long i=0; i<n; ++i) result += to_string(i) + \" \";\n    return\
    \ result;\n}", "{\n\tint i;\n\tstring s = \"\";\n\twhile (n > 0) \n\t{\n\t\ti\
    \ = (int)n % 10;\n\t\tn = n / 10;\n\t\ts = s + to_string(10);\n\t\ts = s + i;\n\
    \t}\n\t\n\treturn s;\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n \
    \   >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(int\
    \ n) \n{\n\tint i;\n\tstring s = \"\";\n\twhile (n>0) \n\t{\n\t\ti = n%10;\n\t\
    \tn = n/10;\n\t\ts = s + to_string(10);\n\t\ts = s + i;\n\t}\n\t\n\treturn s;\n\
    }\n/*\n Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \n*/\nstring string_sequence(char n) \n{\n\tint i;\n\
    \tstring s = \"\";\n\twhile (n>0) \n\t{\n\t\ti = n%10;\n\t\tn = n/10;\n\t\ts =\
    \ s + to_string(10);\n\t\ts = s + i;\n\t}\n\t\n\treturn s;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\
    \n    \n*/\nstring string_sequence(string &s) \n{\n\tint i;\n\tstring s = \"\"\
    ;\n\twhile (!s.empty()) \n\t{\n\t\ti = s.back()%10;\n\t\ts = s.substr(0, s.size()-1);\n\
    \t\ts = s.substr(0, s.size()-1) + to_string(10);\n\t\ts = s.substr(0, s.size()-1)\
    \ + i;\n\t}\n\t\n\treturn s;\n}", "{\n    string s;\n    for (long i = 0; i <\
    \ n; ++i)\n        s += to_string(i) + \" \";\n    return s;\n}", "{\n\tstring\
    \ result;\n\tfor(long i = 0;;)\n\t{\n\t\tif(i>=n) break;\n\t\tresult += (char)i;\n\
    \t\t++i;\n\t}\n\treturn result;\n}", "{\n    string s = string(\"0\");\n    for\
    \ (long i = 1L; i <= n; ++i)\n        s = s + \" \" + to_string(i);\n    return\
    \ s;\n}\n/* \n Return the string \"A...B...C...\".\n    \n Each new character\
    \ is placed in front of the old ones and separated by an underscore (\"_\").\n\
    \ \n Example:\n    \"A...B...C...\" == \"A_B_C...\"\n*/\nstring alphabet() \n\
    {\n    string s = string(\"A\");\n    for (long i = 1L; i <= 26; ++i)\n      \
    \  s = s + \"...\"_;\n    return s;\n}", "{\n    string result;\n    for (long\
    \ i = 0; i < n; i++) {\n        result.append(tostring(i));\n    }\n    return\
    \ result;\n}", "{\n\tstring s;\n\tfor (long i = 0; i < n; i++) {\n\t\ts += to_string(i);\n\
    \t}\n\treturn s;\n}", "{\n    string s = string(\"0\");\n    for (long i = n;\
    \ i > 0; i /= 10)\n        s = \" \" + std.string(std.rint(i / 10)) + s;\n   \
    \ return s;\n}", "{\n\tstring result = \"\";\n\t\n\tfor(long i = 0;i < n;i++)\n\
    \t{\n\t\tresult += to_string(i);\n\t}\n\treturn result;\n}\n/*\n Return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\n    >>>\
    \ string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n    \"0 1 2 3 4 5\"\
    \n    \n*/\nstring string_sequence(int n) \n{\n\tstring result = \"\";\n\t\n\t\
    for(long i = 0;i < n;i++)\n\t{\n\t\tresult += to_string(i);\n\t}\n\treturn result;\n\
    }", "{\n\tstring s=\"\";\n\twhile(n>0){\n\t\ts+=to_string(n%10);\n\t\tn/=10;\n\
    \t}\n\treturn s;\n}\n/*\n Convert a decimal number to binary using the given number\
    \ of digits.\n \n Example:\n >>> binary_number(0L)\n \"0\"\n >>> binary_number(123L)\n\
    \ \"11 10\"\n >>> binary_number(123L, 3)\n \"111 110 101\"\n >>> binary_number(123L,\
    \ 4)\n \"1111 1110 1011\"\n >>> binary_number(123L, 4)\n \"1111 1110 1011\"\n\
    \ >>> binary_number(123L, 5)\n \"1111 1110 1011 1000\"\n >>> binary_number(123L,\
    \ 5)\n \"1111 1110 1011 1000\"\n >>> binary_number(123L, 6)\n \"1111 1110 1011\
    \ 1000 011\"\n >>> binary_number(123L, 6)\n \"1111 1110 1011 1000 011\"\n >>>\
    \ binary_number(123L, 7)\n \"1111 1110 1011 1000 011 001\"\n >>> binary_number(123L,\
    \ 7)\n \"1111 1110 1011 1000 011 001\"\n >>> binary_number(123L, 8)\n \"1111 1110\
    \ 1011 1000 011 001 000\"\n >>> binary_number(123L, 8)\n \"1111 1110 1011 1000\
    \ 011 001 000\"\n >>> binary_number(123L, 9)\n \"1111 1110 1011 1000 011 001 000\
    \ 001\"\n >>> binary_number(123L, 9)\n \"1111 1110 1011 1000 011 001 000 001\"\
    \n >>> binary_number(123L, 10)\n \"1111 1110 1011 1000 011 001 000 001 000\"\n\
    \ >>> binary_number(123L, 10)\n \"1111 1110 1011 1000 011 001 000 001 000\"\n\
    \ >>> binary_number(123L, 11)\n \"1111 1110 1011 1000 011 001 000 001 000 011\"\
    \n >>> binary_number(123L, 11)\n \"1111 1110 1011 1000 011 001 000 001 000 011\"\
    \n >>> binary_number(123L, 12)\n \"1111 1110 1011 1000 011 001 000 001 000 011\
    \ 001\"\n >>> binary_number(123L, 12)\n \"1111 1110 1011 1000 011 001 000 001\
    \ 000 011 001\"\n >>> binary_number(123L, 13)\n \"1111 1110 ", "{\n\treturn (\"\
    \ \" \n\t\t+ join( range(n), \" \" )\n\t\t+ \" \");\n}\n/*\n Return a string containing\
    \ space-delimited numbers starting from min upto max inclusive.\n \n >>> string_sequence(1L,\
    \ 5L)\n \"1 2 3 4 5\"\n >>> string_sequence(1L, 7L)\n \"1 2 3 4 5 6 7\"\n \n*/\n\
    string string_sequence(long min, long max)\n{\n\treturn (\" \" \n\t\t+ join( range(min,max),\
    \ \" \" )\n\t\t+ \" \");\n}\n/*\n Return a string containing space-delimited numbers\
    \ starting from min upto max inclusive.\n \n >>> string_sequence(1L, 1L, 5L)\n\
    \ \"1 2 3 4 5\"\n >>> string_sequence(1L, 1L, 7L)\n \"1 2 3 4 5 6 7\"\n \n*/\n\
    string string_sequence(long min, long max, long step)\n{\n\treturn (\" \" \n\t\
    \t+ join( range(min,max,step), \" \" )\n\t\t+ \" \");\n}\n/*\n Return a string\
    \ containing a copy of string str up to but not including the\n first occurrence\
    \ of str.\n \n >>> string_first(\"this is a test\", \"test\")\n \"this is a t\"\
    \n \n */\nstring string_first(string str, string substr)\n{\n\tsize_t pos = find(str,\
    \ substr);\n\tif(pos == string::npos)\n\t\treturn str;\n\telse\n\t\treturn substr(0,\
    \ pos);\n}", "{\n  char buffer[32];\n  int i;\n  for(i=0; i<n; ++i)\n    sprintf(buffer+i*sizeof(char),\
    \ \"%d\", i);\n  return string(buffer);\n}\n</cell>\n<cell>\n%%script R\n#r \"\
    ../src/contrib/SurvivalAnalysis/survMisc.R\"\n</cell>\n<text>\nMisc\nThe most\
    \ commonly used functions are implemented in a file called survMisc.R", "{\n \
    \   string s;\n    \n    for (long i = 0; i < n; ++i)\n    {\n        s += \"\
    0 \";\n    }\n    \n    return s;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ works if you have an IDE supporting C++11 and above. If you are using GCC 4.8\
    \ you need a different technique as `to_string` was added in GCC 4.9.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n// return all numbers from 1 to n\n#include <stdio.h>\n\
    #include <stdlib.h>"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
