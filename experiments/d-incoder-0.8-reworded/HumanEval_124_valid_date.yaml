name: HumanEval_124_valid_date
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYou have to write a function\
  \ which validates a given date string and\n    returns true if the date is valid\
  \ otherwise false.\n    The date is valid if all of the following rules are satisfied:\n\
  \    1. The date string is not empty.\n    2. The number of days is not less than\
  \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
  \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of\
  \ days is not less than 1 or higher than 29 for the month 2.\n    3. The months\
  \ should not be less than 1 or higher than 12.\n    4. The date should be in the\
  \ format: mm-dd-yyyy\n\n    >>> valid_date(\"03-11-2000\")\n    true\n\n    >>>\
  \ valid_date(\"15-01-2012\")\n    false\n\n    >>> valid_date(\"04-0-2040\")\n \
  \   false\n\n    >>> valid_date(\"06-04-2020\")\n    true\n\n    >>> valid_date(\"\
  06/04/2020\")\n    false\n    \n*/\nbool valid_date(string date) \n"
tests: "unittest\n{\n    alias candidate = valid_date;\n\n    assert(candidate(\"\
  03-11-2000\") == true);\n    assert(candidate(\"15-01-2012\") == false);\n    assert(candidate(\"\
  04-0-2040\") == false);\n    assert(candidate(\"06-04-2020\") == true);\n    assert(candidate(\"\
  01-01-2007\") == true);\n    assert(candidate(\"03-32-2011\") == false);\n    assert(candidate(\"\
  \") == false);\n    assert(candidate(\"04-31-3000\") == false);\n    assert(candidate(\"\
  06-06-2005\") == true);\n    assert(candidate(\"21-31-2000\") == false);\n    assert(candidate(\"\
  04-12-2003\") == true);\n    assert(candidate(\"04122003\") == false);\n    assert(candidate(\"\
  20030412\") == false);\n    assert(candidate(\"2003-04\") == false);\n    assert(candidate(\"\
  2003-04-12\") == false);\n    assert(candidate(\"04-2003\") == false);\n}\nvoid\
  \ main(){}"
completions: ["{\n    string [] month = { \"01\", \"03\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\" };\n    string [] days = {\n            \"01\",\n           \
    \ \"03\",\n            \"05\",\n            \"07\",\n            \"08\",\n   \
    \         \"10\",\n            \"12\",\n            \"04\",\n            \"06\"\
    ,\n            \"09\",\n            \"11\",\n            \"02\"\n        };\n\
    \    string [] year = { \"20\", \"19\", \"18\", \"17\", \"16\", \"15\", \"14\"\
    , \"13\", \"12\", \"11\", \"10\", \"09\", \"08\", \"07\", \"06\", \"05\", \"04\"\
    , \"03\", \"02\" };", "{\n    if(date == \"\")\n    {\n        return false;\n\
    \    }", "{\n    //Your code goes here\n    \n    return true;\n}\n</code>\n<|/\
    \ a tags=c,datetime dscore=0 |>\n<| c |>\nThanks for your answer. This is the\
    \ algorithm I was looking for. I think I understand the logic but am not sure\
    \ how to code it in C. The way I see it is that the function should take the date\
    \ string, count the days in the string. Add all the days together, then use that\
    \ number as a multiplier to get the remainder. If the remainder is greater than\
    \ or equal to 28 then it is a valid date if it is not then it is a not valid date.\n\
    <|/ c |>\n<| c |>\nI didn't code it in C but I will provide you a pseudocode which\
    \ you can convert into C code.\n<|/ c |>\n<| c |>\nI have added a sample code\
    \ in C. If you find it helpful, please accept the answer by clicking the tick\
    \ mark.\n<|/ c |>\n<| c |>\nI'm sorry for the late reply. I think I understand\
    \ what you are doing. Thank you for taking the time to help!\n<|/ c |>\n<| c |>\n\
    no worries. I am glad that helped. Happy coding :)\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n/*\n Am I late to answer?", "{\n    \n    int day = 0;\n    int month\
    \ = 0;\n    int year = 0;\n    int totalDay = 0;\n    int totalMonth = 0;\n  \
    \  int totalYear = 0;\n    \n    if(!std.isspace(date[0])) {\n        return false;\n\
    \    }\n    \n    auto pos = date.find(\"dd\");\n    if(pos == string::npos) {\n\
    \        return false;\n    }\n    \n    auto pos2 = date.find(\"dd\", pos+2);\n\
    \    if(pos2 == string::npos) {\n        return false;\n    }\n    \n    auto\
    \ pos3 = date.find(\"dd\", pos2+2);\n    if(pos3 == string::npos) {\n        return\
    \ false;\n    }\n    \n    auto pos4 = date.find(\"dd\", pos3+2);\n    if(pos4\
    \ == string::npos) {\n        return false;\n    }\n    \n    auto pos5 = date.find(\"\
    dd\", pos4+2);\n    if(pos5 == string::npos) {\n        return false;\n    }\n\
    \    \n    auto pos6 = date.find(\"dd\", pos5+2);\n    if(pos6 == string::npos)\
    \ {\n        return false;\n    }\n    \n    pos = date.find(\"mm\");\n    pos2\
    \ = date.find(\"mm\", pos+2);\n    pos3 = date.find(\"mm\", pos2+2);\n    pos4\
    \ = date.find(\"mm\", pos3+2);\n    pos5 = date.find(\"mm\", pos4+2);\n    pos6\
    \ = date.find(\"mm\", pos5+2);\n    \n    if(pos == string::npos) {\n        return\
    \ false;\n    }\n    \n    if(pos2 == string::npos) {\n        return false;\n\
    \    }\n    \n    if(pos3 == string::npos) {\n        return false;\n    }\n \
    \   \n    if(pos4 == string::npos) {\n        return false;\n    }\n    \n   \
    \ if(pos5 == string::npos) {\n        return false;\n    }\n    \n    if(pos6\
    \ == string::npos) {\n        return false;\n    }\n    \n    month = stoi(date.substr(pos+1,\
    \ pos-pos-1));\n    if(month < 1 || month > 12) \n        return false;\n    \n\
    \    day = stoi(date.substr(pos2+2, pos2-2-2));\n    if(day < 1 || day > 31) \n\
    \        return false;\n    \n    year = stoi(date.substr(pos3+2, pos3-2-2));\n\
    \    if(year < 2000 || year > 2040) \n        return false;\n    \n    return\
    \ true;\n}", "{\n    date_type date_obj;\n    if(date == \"\") return false;\n\
    \    \n    date_obj = parse(\"%d-%d-%Y\", date);\n    if(!date_obj) return false;\n\
    \    \n    long days =  date_obj.day();\n    long months = date_obj.month();\n\
    \    \n    if(days < 1 || days > 31) return false;\n    if(months < 1 || months\
    \ > 12) return false;\n    if(days > 29) return false;\n    \n    return true;\n\
    }", "{\n    DateTime dt = DateTime.parse(date, Format(\"%m-%d-%Y\"));\n    if(dt.month<1\
    \ || dt.month>12 || dt.day<1 || dt.day>31 || dt.year<1)\n        return false;\n\
    \    if(dt.month==2 && dt.day>29)\n        return false;\n    switch(dt.month)\n\
    \    {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n \
    \       case 8:\n        case 10:\n        case 12:\n        case 4:\n       \
    \ case 6:\n        case 9:\n        case 11:\n        case 2:\n        case 0:\
    \ \n            return true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=c++,validation,c++11\
    \ |>\n<| c |>\nPlease consider adding some explanation to your code.\n<|/ c |>\n\
    <| c |>\nI have added some explanation and an example.\n<|/ c |>\n<| c |>\nWhy\
    \ are you parsing the date as `\"%m-%d-%Y\"` and not `\"%d-%m-%Y\"`?\n<|/ c |>\n\
    <| c |>\nBecause I am using the `DateTime` class of C++ and I needed the date\
    \ to be in \"mm-dd-yyyy\" format.\n<|/ c |>\n<| c |>\nThanks this is so cool but\
    \ is there a way to make validation on leap year without using if?\n<|/ c |>\n\
    <| a tags=c++,validation,c++11 |>\nIf you want a simple way to determine if a\
    \ year is a leap year, you can use the Gregorian calendar to determine this information.\n\
    The Gregorian calendar counts how many days are in each month, and if it is 0\
    \ it is a leap year or if it is 1 it is not a leap year.  You can use the following\
    \ code:\n<code>\n#include <iostream>\n#include <ctime>", "{\n    if(!date.empty())\
    \ \n    {\n        const auto months = &std.array[\"Jan\", \"Mar\", \"May\", \"\
    Jul\", \"Aug\", \"Oct\", \"Dec\", \n                                       \"\
    Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\"];\n        const auto\
    \ days = &std.array[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"10\", \n                                       \"11\", \"12\"];\n     \
    \   const auto month_days = \"Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\"\
    , \"Dec\";\n        auto date_strs = date.split('-');\n        if(date.size()\
    \ != 10 && date.size() != 11 && date.size() != 12 && date.size() != 13 && date.size()\
    \ != 14) \n        {\n            return false;\n        }\n        else \n  \
    \      {\n            int days_value = std.parseInt(date_strs[2]);\n         \
    \   if(days_value < 0) \n            {\n                return false;\n      \
    \      }\n            int months_value = std.parseInt(date_strs[1]) - 1;\n   \
    \         if(months_value < 0 || months_value > 12)\n            {\n         \
    \       return false;\n            }\n            int year_value = std.parseInt(date_strs[0]);\n\
    \            if(year_value<1 || year_value>31)\n            {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=0 tags=string,c++,algorithm |>\n<| a |>\nThis\
    \ might be a little late but here is my solution in C++\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;",
  "{\n    if(date.length()==0)\n        return false;\n    int days[12] ={31,30,29,31,30,31,30,31,30,31,30,31};\n\
    \    int months[12] ={4,6,9,11};\n    int years[12] ={2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int month1= string::to_int(date.substr(0,2));\n    int month2 = string::to_int(date.substr(2,2));\n\
    \    int day1 = string::to_int(date.substr(4,2));\n    int year = string::to_int(date.substr(6,4));\n\
    \    for(int i=0;i<12;++i)\n    {\n        if(days[i]<month1||month1==2 && days[i]<month2)\n\
    \        {\n            return false;\n        }\n        else if(days[i]<month2||month2==2\
    \ && days[i]<month1)\n        {\n            return false;\n        }\n    }\n\
    \    for(int i=0;i<12;++i)\n    {\n        if(months[i]<month1||month1==2 && months[i]<month2)\n\
    \        {\n            return false;\n        }\n        else if(months[i]<month2||month2==2\
    \ && months[i]<month1)\n        {\n            return false;\n        }\n    }\n\
    \    if(year<years[0] || year>years[12])\n        return false;\n    return true;\n\
    }", "{\n    if (!date || date.empty())\n    {\n        return false;\n    }\n\
    \    \n    stringstream ss(date);\n    string month;\n    string day;\n    string\
    \ year;\n    \n    // Read month\n    ss >> month;\n    \n    // Read day\n  \
    \  ss >> day;\n    \n    // Read year\n    ss >> year;", "{\n    //TODO: write\
    \ your code here\n}", "{\n    int month = 1;\n    int day = 1;\n    int year =\
    \ 0;\n    int totalDays = 0;\n    \n    int mm = stoi(date.substr(0, 2));\n  \
    \  int dd = stoi(date.substr(3, 2));\n    int yyyy = stoi(date.substr(6, 4));\n\
    \    \n    month = mm - 1;\n    day = dd;\n    year = yyyy;\n    \n    if(month\
    \ < 1 || month > 12)\n    {\n        return false;\n    }\n    \n    if(day <\
    \ 1 || day > 31)\n    {\n        return false;\n    }\n    \n    if(month == 2)\n\
    \    {\n        if(day < 1 || day > 29)\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        if(day < 1 || day > 30)\n        {\n\
    \            return false;\n        }\n    }\n    \n    if(year % 4 == 0)\n  \
    \  {\n        if(day < 1 || day > 29)\n        {\n            return false;\n\
    \        }\n    }\n    else\n    {\n        if(day < 1 || day > 31)\n        {\n\
    \            return false;\n        }\n    }\n    \n    totalDays = 31 * month\
    \ + day;\n    \n    if(totalDays > 3652)\n    {\n        return false;\n    }\n\
    \    \n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12)\n    {\n        if(day < 1 || day > 30)\n \
    \       {\n            return false;\n        }\n    }\n    else\n    {\n    \
    \    if(day < 1 || day > 31)\n        {\n            return false;\n        }\n\
    \    }\n    \n    return true;\n}\n</code>\n<|/ a tags=c++,validation,date |>\n\
    <| a dscore=1 |>\n<code>\n#include <iostream>\nusing namespace std;", "{\n   auto\
    \ [year, month, day] = std.split(date, '-');\n   if (year.isEmpty() || month.isEmpty()\
    \ || day.isEmpty()) \n   {\n      return false;\n   }", "{\n    date m;\n    date\
    \ d;\n    int year;\n    \n    try\n    {\n        m = strtodate(date,\"%m-%d-%Y\"\
    );\n    }\n    catch(const std::out_of_range& e)\n    {\n        return false;\n\
    \    }\n    try\n    {\n        d = strtodate(date,\"%m-%d-%Y\");\n    }\n   \
    \ catch(const std::out_of_range& e)\n    {\n        return false;\n    }\n   \
    \ try\n    {\n        year = atoi(date.substr(4,4));\n    }\n    catch(const std::out_of_range&\
    \ e)\n    {\n        return false;\n    }\n    \n    int m2 = m % 100;\n    int\
    \ y2 = year - 400;\n    int y1 = y2 - m2;\n    int m1 = m % 100;\n    int d1 =\
    \ d % 100;\n    \n    \n    bool valid1 = ( m2 != 0 && m2 <= 12);\n    bool valid2\
    \ = ( y2 != 0 && y2 <= 99);\n    bool valid3 = ( m1 != 0 && m1 <= 12);\n    bool\
    \ valid4 = ( d1 != 0 && d1 <= 31);\n    bool valid5 = ( m1 != 0 && m1 <= 12);\n\
    \    bool valid6 = ( d1 != 0 && d1 <= 30);\n    bool valid7 = ( d1 != 0 && d1\
    \ <= 29);\n    \n    return valid1 && valid2 && valid3 && valid4 && valid5 &&\
    \ valid6 && valid7 &&\n            (m == m && d == d);\n}", "{\n    try{\n   \
    \     Datetime d = DateTime.parse(date);\n        //If the date is valid then\n\
    \        if (d.year() > 1900 && d.year() < 2100 && d.month() >= 1 && d.month()\
    \ <= 12 && d.day() >= 1 && d.day() <= 30) \n        {\n            if (d.month()\
    \ < 1 || d.month() > 12)\n            {\n                return false;\n     \
    \       }\n            if (d.day() < 1 || d.day() > 29)\n            {\n     \
    \           return false;\n            }\n            \n            return true;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    catch(Exception&e){\n        return false;\n    }\n}", "{\n\tif(date.empty())\
    \ return false; // check for empty string\n\tint days_in_month[] = { 0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\tint days_in_year_2017[] = { 0,\
    \ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\tint days_in_year_2018[]\
    \ = { 0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\t\n\tint year = 0;\n\
    \t\n\tsscanf(date.c_str(), \"%d-%d-%d\", &year, &days_in_month[month - 1], &days_in_year);\n\
    \tif (days_in_month[month - 2] > days_in_month[month - 1] || days_in_year > days_in_year_2017[year]\
    \ || days_in_year > days_in_year_2018[year]) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n/*\nYou have to write a function which validates a given phone number\
    \ and returns true if the phone number is valid otherwise false.\n    The number\
    \ is valid if it meets the following criteria:\n    1. The phone number length\
    \ is 8.\n    2. The phone number starts with a 1 followed by the digit 0.\n  \
    \  3. The phone number ends with the digit 8.\n    4. The phone number does not\
    \ contain any alphabetic character.\n    5. The phone number does not contain\
    \ any special character except space.\n    6. The phone number does not contain\
    \ any leading 0s.\n    7. The phone number does not contain any trailing 0s.\n\
    \    8. The phone number does not contain any special character except '-' between\
    \ the digits.\n    9. The phone number does not contain any special character\
    \ except '-' between the last two digits.", "{\n    if(!date.empty())\n    {\n\
    \        const string months[] =\n        {\n            \"01\",\n           \
    \ \"03\",\n            \"05\",\n            \"07\",\n            \"08\",\n   \
    \         \"10\",\n            \"12\",\n        };\n        const string days[]\
    \ =\n        {\n            \"01\",\n            \"02\",\n            \"03\",\n\
    \            \"04\",\n            \"05\",\n            \"06\",\n            \"\
    07\",\n            \"08\",\n            \"09\",\n            \"10\",\n       \
    \     \"11\",\n            \"12\",\n            \"13\",\n            \"14\",\n\
    \            \"15\",\n            \"16\",\n            \"17\",\n            \"\
    18\",\n            \"19\",\n            \"20\",\n            \"21\",\n       \
    \     \"22\",\n            \"23\",\n            \"24\",\n            \"25\",\n\
    \            \"26\",\n            \"27\",\n            \"28\",\n            \"\
    29\",\n            \"30\",\n            \"31\",\n        };\n        int day1,month1,year1;\n\
    \        if(!sscanf(date.c_str(), \"%d-%d-%d\", &day1, &month1, &year1) == 3)\n\
    \        {\n            return false;\n        }\n        const string months[]\
    \ =\n        {\n            \"04\",\n            \"06\",\n            \"09\",\n\
    \            \"11\",\n        };\n        const string days[] =\n        {\n \
    \           \"01\",\n            \"02\",\n            \"03\",\n            \"\
    04\",\n            \"05\",\n            \"06\",\n            \"07\",\n       \
    \     \"08\",\n            \"09\",\n            \"10\",\n            \"11\",\n\
    \            \"12\",\n            \"13\",\n            \"14\",\n            \"\
    15\",\n            \"16\",\n            \"17\",\n            \"18\",\n       \
    \     \"19\",\n            \"20\",\n            \"21\",\n            \"22\",\n\
    \            \"23\",\n            \"24\",\n            \"25\",\n            \"\
    26\",\n            \"27\",\n            \"28\",\n            \"29\",\n       \
    \     \"30\",\n            \"31\",\n        };\n        int day2,month2,year2;\n\
    \        if(!sscanf(date.c_str(), \"%d-%d-%d\", &day2, &month2, &year2) == 3)\n\
    \        {\n            return false;\n        }\n        if(day1 > day2)\n  \
    \      {\n            return false;\n        }\n        if(month1 != month2)\n\
    \        {\n            return false;\n        }\n        if(month1 == 12)\n \
    \       {\n            return day1 == day2;\n        }\n        if(day1 > 31)\n\
    \        {\n            return false;\n        }\n        if(day2 > 30)\n    \
    \    {\n            return false;\n        }\n        if(day2 > 31)\n        {\n\
    \            return false;\n        }\n        return true;\n    }\n    return\
    \ false;\n}", "{\n    char dateString[100];\n    char delimiter[2] = {'/','-'};\n\
    \    int day, month, year;", "{\n    if (!date.empty())\n    {\n        if (date.size()\
    \ != 10 || date.find_first_not_of(\"0123456789\") != string::npos)\n        {\n\
    \            return false;\n        }\n        \n        int days[12] = { 31,\
    \ 31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29, 29, 29 };\n        int months[12]\
    \ = { 0, 4, 6, 9, 11, 12, 1, 2, 3, 4, 5, 7, 8, 10, 12 };", "{\n    struct tm *tm\
    \ = localtime(&now);\n    tm->tm_year = stoi(date.substr(0, 4));\n    tm->tm_mon\
    \ = stoi(date.substr(5, 2));\n    tm->tm_mday = stoi(date.substr(8, 2));\n   \
    \ if (strptime(date.c_str(), \"%m-%d-%Y\", tm) != 0)\n        return false;\n\
    \    return is_valid_date(tm);\n}", "{\n    \n    int mm, dd;\n    int yy = year(date);\n\
    \    int mmn = month(date);\n    int dmn = day(date);\n    string mm = string(mmn,\
    \ 2);\n    string dm = string(dmn, 2);\n    \n    // Check month\n    if(mmn <=\
    \ 12 && mmn >= 1)\n    {\n        // Check date\n        if(dmn < 1 || dmn > 31)\n\
    \        {\n            return false;\n        }\n    }\n    else\n    {\n   \
    \     return false;\n    }\n    \n    // Check year\n    if((yy % 4 == 0 && yy\
    \ % 100 != 0) || yy % 400 == 0)\n    {\n        // Check date\n        if((mm\
    \ == \"01\" && dm == \"01\") || (mm == \"02\" && dm == \"01\") || (mm == \"03\"\
    \ && dm == \"01\") || (mm == \"04\" && dm == \"01\") || (mm == \"05\" && dm ==\
    \ \"01\") || (mm == \"06\" && dm == \"01\") || (mm == \"07\" && dm == \"01\")\
    \ || (mm == \"08\" && dm == \"01\") || (mm == \"09\" && dm == \"01\") || (mm ==\
    \ \"10\" && dm == \"01\") || (mm == \"11\" && dm == \"01\") || (mm == \"12\" &&\
    \ dm == \"01\") || (mm == \"13\" && dm == \"01\") || (mm == \"14\" && dm == \"\
    01\") || (mm == \"15\" && dm == \"01\") || (mm == \"16\" && dm == \"01\") || (mm\
    \ == \"17\" && dm == \"01\") || (mm == \"18\" && dm == \"01\") || (mm == \"19\"\
    \ && dm == \"01\") || (mm == \"20\" && dm == \"01\") || (mm == \"21\" && dm ==\
    \ \"01\") || (mm == \"22\" && dm == \"01\") || (mm == \"23\" && dm == \"01\")\
    \ || (mm == \"24\" && dm == \"01\") || (mm == \"25\" && dm == \"01\") || (mm ==\
    \ \"26\" && dm == \"01\") || (mm == \"27\" && dm == \"01\") || (mm == \"28\" &&\
    \ dm == \"01\") || (mm == \"29\" && dm == \"01\") || (mm == \"30\" && dm == \"\
    01\") || (mm == \"31\" && dm == \"01\") || (mm == \"01\" && dm == \"30\") || (mm\
    \ == \"02\" && dm == \"30\") || (mm == \"03\" && dm == \"30\") || (mm == \"04\"\
    \ && dm == \"30\") || (mm == \"05\" && dm == \"30\") || (mm == \"06\" && dm ==\
    \ \"30\") || (mm == \"07\" && ", "{\n    Date today = CURRENT_DATE;\n    int day;\n\
    \    int month;\n    string year;", "{\n    \n    int day = 0;\n    int month\
    \ = stoi(string(\"01-01-2000\"));\n    int year = stoi(string(\"1950\"));\n  \
    \  \n    date += string(\"-\");\n    for(int i = 2; i <= 3; i++)\n    {\n    \
    \    date += to_string(i) + \"-\";\n    }\n    \n    for(int i = 0; i < 2; i++)\n\
    \    {\n        for(int j = 0; j < 3; j++)\n        {\n            for(int k =\
    \ 0; k < 4; k++)\n            {\n                for(int l = 0; l < 5; l++)\n\
    \                {\n                    if(stoi(string(\"01-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 1;\n                        }\n\
    \                        else if(day > 31)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"03-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 30)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"05-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 29)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"07-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 28)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"08-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 28)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"10-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 28)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    else if(stoi(string(\"12-01-2000\")) == month)\n\
    \                    {\n                        if(day == 0)\n               \
    \         {\n                            day = 31;\n                        }\n\
    \                        else if(day > 28)\n                        {\n      \
    \                      return false;\n                        }\n            \
    \        }\n                    month++;\n                }\n                month--;\n\
    \            }\n        }\n    }\n    \n    if((stoi(string(\"01-01-2000\")) ==\
    \ month) && (stoi(string(\"01-01-2000\")) == year))\n    {\n        return true;\n\
    \    }\n    else if((stoi(string(\"03", "{\n   /*\n       Write your code here\n\
    \    */\n    \n    \n    if(!is_empty(date) && std.not.less(std.num.days(date),\
    \ std.num.days(std.num.month(date), std.num.year(date)))\n    && std.not.less(std.num.days(date),\
    \ std.num.days(std.num.month(date), std.num.year(date)))\n    && std.not.less(std.num.days(date),\
    \ std.num.days(12, std.num.month(date)))\n    && std.not.less(std.num.month(date),\
    \ 12))\n    {\n        return true\n    }\n    else\n    {\n        return false\n\
    \    }\n}", "{\n    if(!is_empty(date))\n    {\n        if(!is_less_or_equal(1,31,date)\
    \ && !is_less_or_equal(1,30,date) && !is_less_or_equal(1,29,date) && !is_less_or_equal(2,12,date))\n\
    \        {\n            if((is_less_or_equal(1,3,date) || is_less_or_equal(1,5,date)\
    \ || is_less_or_equal(1,7,date) || is_less_or_equal(1,8,date) || is_less_or_equal(1,10,date)\
    \ || is_less_or_equal(1,12,date))&&\n            (is_less_or_equal(4,6,date) ||\
    \ is_less_or_equal(4,9,date) || is_less_or_equal(4,11,date)))\n            {\n\
    \                if((is_less_or_equal(2,1,date) || is_less_or_equal(2,4,date)\
    \ || is_less_or_equal(2,6,date)))\n                {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }", "{\n    int day=0;\n    int month=0;\n    int year=0;\n    int year2=0;",
  "{\n    if (date.empty())\n        return false;\n    int days = 0;\n    int months\
    \ = 0;\n    int years = 0;\n    int date_check = 0;\n    char check;\n    string\
    \ months[12] = {\"Jan\",\"Mar\",\"May\",\"Jul\",\"Aug\",\"Oct\",\"Dec\",\"Feb\"\
    };\n    for (int i = 0; i < 12; i++)\n    {\n        date_check += (date[i]-'0');\n\
    \        days += date_check/30;\n        months += date_check%30;\n        if\
    \ (date[i] == '0')\n        {\n            months--;\n        }\n        date_check\
    \ -= 30;\n        years += date_check;\n    }\n    \n    if (days < 1 || days\
    \ > 31)\n        return false;\n    \n    if (months < 1 || months > 12)\n   \
    \     return false;\n    \n    bool valid = true;\n    if (days < 1 || days >\
    \ 29)\n    {\n        if (months == 1)\n            valid = false;\n        else\
    \ if (months == 3)\n            valid = false;\n        else if (months == 5)\n\
    \            valid = false;\n        else if (months == 7)\n            valid\
    \ = false;\n        else if (months == 8)\n            valid = false;\n      \
    \  else if (months == 10)\n            valid = false;\n        else if (months\
    \ == 12)\n            valid = false;\n    }\n    else if (months > 1)\n    {\n\
    \        if (months == 2)\n            valid = false;\n        else if (months\
    \ == 4)\n            valid = false;\n        else if (months == 6)\n         \
    \   valid = false;\n        else if (months == 9)\n            valid = false;\n\
    \        else if (months == 11)\n            valid = false;\n    }\n    return\
    \ valid;\n}\n</code>\n<|/ a |>\n<| a tags=c++,algorithm |>\nMy solution:\n<code>\n\
    #include <string>\n#include <iostream>\nusing namespace std;", "{\n    if(date\
    \ == \"\")\n    {\n        return false;\n    }\n    \n    int days_in_month[]\
    \ = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int days_in_year[]\
    \ = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int num_days_in_month\
    \ = 0;\n    int num_days_in_year = 0;\n    int days_left = 0;", "{\n    string\
    \ date_str = date;\n    if(date_str.empty())\n        return false;\n    \n  \
    \  int days_in_month = std.date.days_in_month(std.date.month(date));\n    if(days_in_month\
    \ < 1 || days_in_month > 31)\n        return false;\n    \n    int days_in_year\
    \ = std.date.days_in_year(std.date.year(date));\n    if(days_in_year < 1 || days_in_year\
    \ > 30)\n        return false;\n    \n    int days_in_month = std.date.days_in_month(std.date.month(date));\n\
    \    if(days_in_month < 1 || days_in_month > 29)\n        return false;\n    \n\
    \    int days_in_year = std.date.days_in_year(std.date.year(date));\n    if(days_in_year\
    \ < 1 || days_in_year > 29)\n        return false;\n    \n    int days_in_month\
    \ = std.date.days_in_month(std.date.month(date));\n    if(days_in_month < 1 ||\
    \ days_in_month > 12)\n        return false;\n    \n    return true;\n}", "{\n\
    \    if(date.length() == 0)\n    {\n        return false;\n    }", "{\n    stringstream\
    \ ss(date);\n    ss.imbue(std::locale(\"en_IN\"));\n    int month;\n    int day;\n\
    \    int year;\n    ss >> month >> day >> year;\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if((month == 4 || month == 6 || month == 9 || month == 11) && day\
    \ > 30){\n        return false;\n    }\n    if(month == 2 && day > 29){\n    \
    \    return false;\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nYour\
    \ algorithm is incorrect, as it also returns true for invalid dates like `31-0-1940`.\
    \  It also doesn't handle leap years.\n<|/ c |>\n<| c |>\nMy algorithm returns\
    \ true only for valid dates. And for invalid dates it returns false. This answer\
    \ is not about leap years. It is about determining if the string is valid date.\n\
    <|/ c |>\n<| c |>\nI mean your algorithm will accept `31-0-1940` as an invalid\
    \ date because it contains 4 or 2 digits for the month, and a day of 0. It doesn't\
    \ handle leap years.\n<|/ c |>\n<| c |>\nI agree with you. I have edited my answer\
    \ and added `checking for leap year logic`. Please review the updated answer.\n\
    <|/ c |>\n<| c |>\nIt fails to validate 29-02-1986 as valid and 29-02-1986 as\
    \ invalid (with leap year included). Also, it doesn't consider days in months\
    \ that have fewer than 3 (e.g. 29-02-1986 as invalid and 29-02-2020 as valid).\n\
    <|/ c |>\n<| a |>\nTry this one\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\nusing namespace std;", "{\n    stringstream ss(date);\n  \
    \  int month, day, year;\n    month = 0;\n    day = 0;\n    year = 2000;\n   \
    \ if(date == \"-\")\n        return true;\n    if(!ss.get()) return false;\n \
    \   while(ss.good())\n    {\n        string sVal = ss.peek();\n        while(!ss.eof())\n\
    \        {\n            if(isdigit(sVal))\n            {\n                sVal\
    \ += ss.peek();\n                ss.ignore();\n            }\n            else\n\
    \                break;\n        }\n        if(isdigit(sVal))\n        {\n   \
    \         day = atoi(sVal.c_str());\n            sVal += ss.peek();\n        \
    \    ss.ignore();\n        }\n        else\n            break;\n        if(isdigit(sVal))\n\
    \        {\n            month = atoi(sVal.c_str());\n            sVal += ss.peek();\n\
    \            ss.ignore();\n        }\n        else\n            break;\n     \
    \   if(isdigit(sVal))\n        {\n            year = atoi(sVal.c_str());\n   \
    \     }\n        else\n            break;\n    }\n    if(month < 1 || month >\
    \ 12)\n        return false;\n    if(day < 1 || day > 31)\n        return false;\n\
    \    if(month == 2)\n    {\n        if(day > 29)\n            return false;\n\
    \    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\n \
    \   {\n        if(day > 30)\n            return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=c++ |>\n<| a dscore=0 tags=c++ |>\nYou can use these functions:\n\
    <code>\n#include <string>\n#include <sstream>\n#include <cctype>", "{\n    date_time\
    \ date;\n    date.year(2000);\n    date.month(12);\n    date.day(1);\n    \n \
    \   int days[] = {0,31,30,29,28,31,30,31};\n    int months[] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \    \n    string month1 = date + \"-01\";\n    string month2 = date + \"-02\"\
    ;\n    string month3 = date + \"-03\";\n    string month4 = date + \"-04\";\n\
    \    string month5 = date + \"-05\";\n    string month6 = date + \"-06\";\n  \
    \  string month7 = date + \"-07\";\n    string month8 = date + \"-08\";\n    string\
    \ month9 = date + \"-09\";\n    string month10 = date + \"-10\";\n    string month11\
    \ = date + \"-11\";\n    string month12 = date + \"-12\";\n    \n    date temp;\n\
    \    date temp1;\n    date temp2;\n    date temp3;\n    date temp4;\n    date\
    \ temp5;\n    date temp6;\n    date temp7;\n    date temp8;\n    date temp9;\n\
    \    date temp10;\n    date temp11;\n    date temp12;\n    \n    date date1 =\
    \ date_time(2000,1,1);\n    date date2 = date_time(2000,1,1);\n    date date3\
    \ = date_time(2000,1,1);\n    date date4 = date_time(2000,1,1);\n    date date5\
    \ = date_time(2000,1,1);\n    date date6 = date_time(2000,1,1);\n    date date7\
    \ = date_time(2000,1,1);\n    date date8 = date_time(2000,1,1);\n    date date9\
    \ = date_time(2000,1,1);\n    date date10 = date_time(2000,1,1);\n    date date11\
    \ = date_time(2000,1,1);\n    date date12 = date_time(2000,1,1);\n    \n    \n\
    \    \n    for(int i = 0; i<12; i++)\n    {\n        temp = date(date1.year,date1.month,days[i]);\n\
    \        temp1 = date(date2.year,date2.month,days[i]);\n        temp2 = date(date3.year,date3.month,days[i]);\n\
    \        temp3 = date(date4.year,date4.month,days[i]);\n        temp4 = date(date5.year,date5.month,days[i]);\n\
    \        temp5 = date(date6.year,date6.month,days[i]);\n        temp6 = date(date7.year,date7.month,days[i]);\n\
    \        temp7 = date(date8.year,date8.month,days[i]);\n        temp8 = date(date9.year,date9.month,days[i]);\n\
    \        temp9 = date(date10.year,date10.month,days[i]);\n        temp10 = date(date11.year,date11.month,days[i]);\n\
    \        temp11 = date(date12.year,date", "{\n    int days[31];\n    string months[12];\n\
    \    months[1] = \"Jan\";\n    months[2] = \"Feb\";\n    months[3] = \"Mar\";\n\
    \    months[4] = \"Apr\";\n    months[5] = \"May\";\n    months[6] = \"Jun\";\n\
    \    months[7] = \"Jul\";\n    months[8] = \"Aug\";\n    months[9] = \"Sep\";\n\
    \    months[10] = \"Oct\";\n    months[11] = \"Nov\";\n    months[12] = \"Dec\"\
    ;", "{\n    if(!date.isEmpty())\n    {\n        int day1,day2,year;\n        string\
    \ day;\n        date=date.erase(6);\n        day1=stringToInt(date,\"-\",1,2);\n\
    \        day2=stringToInt(date,\"-\",1,2);\n        year=stringToInt(date,\"-\"\
    ,1,2);", "{\n    // Your code goes here\n    \n    return true;\n}", "{\n    if(!date.empty())\n\
    \    {\n        string days[] = {\"\", \"01\", \"02\", \"03\", \"04\", \"05\"\
    , \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    , \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"}; //array of strings with days\
    \ of the month\n        string months[] = {\"01\", \"03\", \"05\", \"07\", \"\
    08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"04\", \"06\", \"09\", \"11\", \"05", "{\n    return !empty(date) &&\
    \ day(date) != 1 && day(date) != 31 && day(date) != 30 && day(date) != 29 && month(date)\
    \ != 1 && month(date) != 12 && month(date) != 4 && day(date) != day(date);\n}",
  "{\n    if (date == \"\")\n        return false;\n    int day;\n    int month;\n\
    \    int year;\n    if (stringToInt(date, &day, &month, &year) != 3)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (day < 1 || day > 31)\n        return false;\n    if (day == 31 && month\
    \ < 4)\n        return false;\n    if (day == 31 && month == 4)\n        return\
    \ day == 29;\n    if (day == 30 && month < 6)\n        return false;\n    if (day\
    \ == 30 && month == 6)\n        return day == 29;\n    if (day == 29 && month\
    \ == 2)\n        return day == 28;\n    return true;\n}\n</code>\n<|/ a tags=c++,arrays,algorithm,c,string\
    \ dscore=1 |>\n<| c |>\nPlease don't post answers containing code you don't understand.\n\
    <|/ c |>\n<| c |>\nHis solution checks the number of days in each month. The function\
    \ I provided checks the months in a given date. His function returns true if and\
    \ only if the date string meets the above mentioned rules. My function returns\
    \ true if and only if the date is valid (according to above mentioned rules).\
    \ Hence my solution meets the requirement of OP.\n<|/ c |>\n<| c |>\nYou didn't\
    \ understand how functions work. If you have `void foo()`, that's a function that\
    \ takes no arguments, and returns no value. How can you pass a parameter `string\
    \ date` to `void foo(string date)`?\n<|/ c |>\n<| c |>\nYou are right. My bad.\
    \ Edited my solution.\n<|/ c |>\n<| c |>\nThis approach doesn't work in general.\n\
    <|/ c |>\n<| a |>\nYou don't need to convert the date into its month and day and\
    \ year separately. You can just use the strings to validate the date. Also I recommend\
    \ you to use a std::unordered_map to store the months.\n<code>\n#include <iostream>\n\
    #include <string>\n#include <map>\n#include <algorithm>\n#include <iterator>",
  "{\n    if (!date.empty())\n    {\n        int days, days_in_month[30], days_in_month[31]={31,30,31,30,31,30,31,30,31,30,31,30,31,1,1,1};\n\
    \        int current_day, current_month, current_year, current_day_of_week;\n\
    \        int month_length, month_days[30] = {31,30,31,30,31,30,31,30,31,30,31,30,31,1,1,1};\n\
    \        int year_length = date.length();\n        char year[20];\n        int\
    \ current_year=2010;\n        char temp[4];\n        int month_day_of_week;\n\
    \        int month_days[12];\n        int current_month;\n        string month[31];\n\
    \        int current_month_length;\n        \n        int i = 0;\n        \n \
    \       //Get all the years\n        while ( i < year_length && date[i] != '-'\
    \ )\n        {\n            year[i]=date[i];\n            i++;\n        }\n  \
    \      //Get all the months\n        i = 0;\n        while (i < month_length &&\
    \ date[i] != '-')\n        {\n            month[i]=date[i];\n            i++;\n\
    \        }\n        //Get all the days\n        i = 0;\n        while (i < days_in_month[current_month]\
    \ && date[i] != '-')\n        {\n            days[i++]=date[i] - '0' ;\n     \
    \   }\n        \n        //Check if we already have a valid month and year\n \
    \       if (current_month == 1 || current_month == 3 || current_month == 5 ||\
    \ current_month == 7 || current_month == 8 || current_month == 10 || current_month\
    \ == 12)\n        {\n            if (current_year == current_month)\n        \
    \    {\n                current_month = current_month + 1;\n            }\n  \
    \          else\n            {\n                current_month = 1;\n         \
    \       current_year = current_year + 1;\n            }\n        }\n        \n\
    \        //If the day is out of range\n        if(days[i] > days_in_month[current_month]\
    \ || days[i] < 0)\n        {\n            return false;\n        }\n        \n\
    \        //If the year is out of range\n        if(days_in_month[current_month]\
    \ > days_in_month[31] || days_in_month[current_month] < 1)\n        {\n      \
    \      return false;\n        }\n        \n        //If the month is out of range\n\
    \        if(days_in_month[31] > days_in_month[current_month] || days_in_month[31]\
    \ < 0)\n        {\n            return false;\n        }\n        \n        //If\
    \ the month is out of range\n        if(days_in_month[current_month] > days_in_month[30]\
    \ || days_in_month[current_month] < 1)\n        {\n            return false;\n\
    \        }\n        \n        //Get all days of the current month\n        i =\
    \ 0;\n        while (i < days_in_month[current_month] && date[i] != '-')\n   \
    \     {\n            days[i++]=date[i", "{\n    stringstream dateStream(date);\n\
    \    int day,month,year;\n    \n    dateStream >> month;\n    dateStream >> day;\n\
    \    dateStream >> year;\n    \n    if (day <= 1 || day > 31)\n    {\n       \
    \ return false;\n    }", "{\n    if(!isEmpty(date))\n    {\n        int dd,mm,yyyy;\n\
    \        char dates[10];\n        \n        dd=std.string.toInt(date,0,2);\n \
    \       mm=std.string.toInt(date,2,2);\n        yyyy=std.string.toInt(date,4,4);",
  "{\n    if (date.length() == 0)\n        return false;\n    int year  = std.parseint()(date.substring(0,4));\n\
    \    int month = std.parseint()(date.substring(4,6));\n    int day   = std.parseint()(date.substring(6,8));\n\
    \    if ((month < 1 || month > 12) || (day < 1 || day > 29))\n        return false;\n\
    \    if ((month == 1 && day > 31) || (month == 3 && day > 30))\n        return\
    \ false;\n    if ((month == 5 && day > 31) || (month == 7 && day > 30))\n    \
    \    return false;\n    if ((month == 9 && day > 30))\n        return false;\n\
    \    if ((month == 11 && day > 30))\n        return false;\n    if (year > 0)\n\
    \        return true;\n    return false;\n}", "{\n    if(!date.empty())\n    {\n\
    \        auto [days, months] = date.split('-');\n        if(days.to_i() >= 1 &&\
    \ days.to_i() <= 31 && months.to_i() >= 1 && months.to_i() <= 12 && months.to_i()\
    \ >= 0 && months.to_i() <= 2 && days.to_i() >= 1 && days.to_i() <= 30)\n     \
    \   {\n            if(months.to_i() == 2)\n            {\n                return\
    \ days.to_i() >= 1 && days.to_i() <= 29;\n            }\n            else if(months.to_i()\
    \ >= 4 && months.to_i() <= 6)\n            {\n                return days.to_i()\
    \ >= 1 && days.to_i() <= 30;\n            }\n            else if(months.to_i()\
    \ >= 7 && months.to_i() <= 9)\n            {\n                return days.to_i()\
    \ >= 1 && days.to_i() <= 31;\n            }\n            else\n            {\n\
    \                return days.to_i() >= 1 && days.to_i() <= 30;\n            }\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    else\n    {\n        return false;\n    }\n}", "{\n    date _date =\
    \ new date(date);\n    \n    int _days = _date.getDays();\n    int _months = _date.getMonth();\n\
    \    int _years = _date.getYear();\n    \n    bool valid = true;\n    \n    valid\
    \ &= !string.IsNullOrEmpty(_date);\n    valid &= _days > 1 && _days < 31;\n  \
    \  valid &= _months >= 1 && _months < 12;\n    valid &= _years >= 1 && _years\
    \ <= 9999;\n    valid &= (_days < 1 || _days > 30) && _months < 1 || _months >\
    \ 12;\n    valid &= (_days < 1 || _days > 29) && _months == 2;\n    \n    return\
    \ valid;\n}", "{\n\tstring::iterator it = date.begin();\n\tstring::iterator it1\
    \ = it.end();\n\tstring date_str;\n\tint days;\n\tint months;\n\tint year;\n\t\
    \n\tcout << \"Enter a date\" << endl;\n\tcin >> date_str;\n\t\n\tint i = 0;\n\t\
    \n\twhile(it != it1)\n\t{\n\t\tcout << date_str[i++];\n\t}\n\t\n\tstring date_day\
    \ = date_str.substr(0, 2);\n\tstring date_month = date_str.substr(2, 2);\n\tstring\
    \ date_year = date_str.substr(4, 4);\n\t\n\tdays = string_to_int(date_day);\n\t\
    months = string_to_int(date_month);\n\tyear = string_to_int(date_year);\n\t\n\t\
    if((days < 1 || days > 31) && ((months < 1 || months > 12) && ((year < 1 || year\
    \ > 150)))\n\t{\n\t\treturn false;\n\t}\n\telse if(days != 31 && (months != 12)\
    \ && (year != 150) && months != 2)\n\t{\n\t\treturn false;\n\t}\n\telse if(days\
    \ != 31 && (months != 12) && (year != 150) && months == 2)\n\t{\n\t\treturn false;\n\
    \t}\n\telse if(days != 31 && (months != 12) && (year != 150) && months == 1)\n\
    \t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n    \n    auto daysInMonth\
    \ = [&](int month) \n    {\n        return 31;\n    };", "{\n     if(!date.empty())\n\
    \     {\n         vector<int> daysInMonth(31,0);\n         vector<int> daysInMonth(30,0);\n\
    \         vector<int> daysInMonth(29,0);", "{\n    \n    string dateString;\n\
    \    string months[12] = {\n        \"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"\
    Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"\n    };\n    string dateFormat\
    \ = \"%m-%d-%Y\";", "{\n  if(!empty(date))\n  {\n    int daysInMonth[] = { 0,\
    \ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    string months[] = { \"\
    Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"\
    , \"Oct\", \"Nov\", \"Dec\" };\n    string temp_string = \"\";\n    int days_in_month\
    \ = 0;\n    int days_passed = 0;\n    for(int i = 0; i < 12; i++)\n    {\n   \
    \   if(temp_string.length() > 0)\n        temp_string = temp_string + \"-\";\n\
    \      temp_string = temp_string.concat(months[i]);\n      days_in_month = daysInMonth[i];\n\
    \      int current_day = date.substr(i, 2);\n      days_passed = days_passed +\
    \ current_day;\n      if(days_passed > days_in_month)\n      {\n        days_passed\
    \ = days_in_month;\n      }\n    }\n    if(days_passed > days_in_month)\n    {\n\
    \      return false;\n    }\n    int current_month = date.substr(0, 2);\n    if(current_month\
    \ < 1 || current_month > 12)\n    {\n      return false;\n    }\n    if(date.substr(3,\
    \ 2) != date[date.size() - 2])\n    {\n      return false;\n    }\n    if(days_passed\
    \ > 30)\n    {\n      return false;\n    }\n    if(date.substr(5, 2) != date[date.size()\
    \ - 1])\n    {\n      return false;\n    }\n    return true;\n  }\n  return false;\n\
    }\n</code>\nThe last function which checks if the given date is valid:\n<code>\n\
    /*\nThis function checks if a particular date is valid or not.\nThe date should\
    \ be in the format: mm-dd-yyyy", "{\n    bool ret = true;\n    if(date == null\
    \ || date.length() == 0)\n    {\n        ret = false;\n    }\n    \n    string\
    \ month = \"01-\" + string(1);\n    string day = \"01-\" + string(1);\n    int\
    \ year = 0;\n    int numDays = 0;\n    int numMonths = 0;\n    int i = 1;\n  \
    \  \n    /*\n     * Split the date string using dashes.\n     * \n     * Ex: 03-11-2000\n\
    \     * \n     * 03 -> month\n     * 11 -> day\n     * 2000 -> year\n     * \n\
    \     */\n    string[] dateSplit = date.split('-');\n    \n    if(dateSplit.length\
    \ == 3)\n    {\n        month = dateSplit[0];\n        day = dateSplit[1];\n \
    \       year = dateSplit[2];\n    }\n    else if(dateSplit.length == 4)\n    {\n\
    \        month = dateSplit[0];\n        day = dateSplit[1];\n        year = dateSplit[2];\n\
    \    }\n    else\n    {\n        ret = false;\n    }\n    \n    /*\n     * Convert\
    \ the month to number from 1-12.\n     * \n     * Ex: 03 -> 3\n     * 04 -> 4\n\
    \     * \n     */\n    month = month.substr(0, 1);\n    month = month.substr(1,\
    \ 2);\n    month = month.substr(2, 2);\n    \n    /*\n     * Convert the day to\
    \ number from 1-31 and month 1 to 12.\n     * \n     * Ex: 11 -> 31\n     * 01\
    \ -> 1\n     * \n     */\n    day = day.substr(0, 2);\n    day = day.substr(2,\
    \ 2);\n    \n    /*\n     * If month is not valid, return false.\n     * \n  \
    \   * Ex: 04 -> 4 -> false\n     * \n     */\n    if(month > 12 || month < 1)\n\
    \    {\n        ret = false;\n    }\n    \n    /*\n     * If the day is not valid,\
    \ return false.\n     * \n     * Ex: 11 -> 11 -> false\n     * \n     */\n   \
    \ if(day > 31 || day < 1)\n    {\n        ret = false;\n    }\n    \n    /*\n\
    \     * If the year has not gone into next year, return false.\n     * \n    \
    \ * Ex: 04 -> 01 -> false\n     * \n     */\n    if(year < 2000 || year > 2020)\n\
    \    {\n        ret = false;\n    }\n    \n    /*\n     * If the number of days\
    \ is less than 1, return false.\n     * \n     * Ex: 3 -> 3 -> false\n     * \n\
    \     */\n    if(numDays < 1)\n    {\n        ret = false;\n    }\n    \n    /*\n\
    \     * If the number of months is less than 1, return false.\n     * \n     *\
    \ Ex: 3 -> 3 -> false\n     * \n     */\n    if(numMonths < 1)\n    {\n      \
    \  ret = false;\n    }\n    ", "{\n    if(!(date.isEmpty())) \n    {\n       \
    \ int date = date.length();\n        if(date < 1 || date > 31) \n        {\n \
    \           return false;\n        }\n        else if(date < 31 && (date % 3)\
    \ == 1) \n        {\n            return false;\n        }\n        else if(date\
    \ < 29 && (date % 3) == 0) \n        {\n            return false;\n        }\n\
    \        else \n        {\n            for(int i = 1; i < date; i++) \n      \
    \      {\n                if((date % i) == 0) \n                {\n          \
    \          return false;\n                }\n            }\n            return\
    \ true;\n        }\n    }\n    else \n    {\n        return false;\n    }\n}\n\
    </code>\n<|/ a tags=validation,c++ dscore=0 |>\n<| a |>\nThe best way I found\
    \ was to create a list of valid months (i.e. Jan, Feb, Mar etc.) which can then\
    \ be used during the validation process.\nSo something like:\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    if(date.length()\
    \ == 0)\n        return false;\n    int days = get_days(date);\n    if(days <\
    \ 1 || days > 31)\n        return false;\n    int months = get_months(date);\n\
    \    if(months < 1 || months > 12)\n        return false;\n    int years = get_years(date);\n\
    \    if(years < 1 || years > 10000)\n        return false;\n    return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is awesome, thank you. Can you explain what\
    \ is happening in the `get_years` and `get_months` functions?\n<|/ c |>\n<| c\
    \ |>\nthe get_year and get_months will return a number which should be between\
    \ 1 and 9999. get_years will return the year part of the date string and get_months\
    \ returns the month part of the date string.\n<|/ c |>\n<| a dscore=1 tags=c++,validation,date\
    \ |>\n<code>", "{\n    return !empty(date) && valid_days(date) && valid_months(date)\
    \ && valid_year(date);\n}", "{\n    size_t days[12] =\n    {\n        31,\n  \
    \      28,\n        31,\n        30,\n        31,\n        30,\n        31,\n\
    \        30,\n        31,\n        30,\n        31,\n        31\n    };\n    size_t\
    \ months[12] =\n    {\n        0,\n        1,\n        3,\n        5,\n      \
    \  7,\n        8,\n        10,\n        12\n    };\n    \n    size_t months_count\
    \ = sizeof(months) / sizeof(months[0]);\n    size_t days_count = sizeof(days)\
    \ / sizeof(days[0]);", "{\n    if(date.length() == 0)\n    {\n        return false;\n\
    \    }\n    int month = date.substr(0,2);\n    int day = date.substr(3,2);\n \
    \   int year = date.substr(6,4);\n    int months[12] = {0,31,30,31,30,31,31,30,31,30,31};\n\
    \    int days[12] = {0,31,30,31,30,31,31,30,31,30,31};\n    int month_diff = month\
    \ - 1;\n    int day_diff = day - 1;\n    if(month_diff < 0 || month_diff > 11)\n\
    \    {\n        return false;\n    }\n    if(day_diff < 1 || day_diff > 30) \n\
    \    {\n        return false;\n    }\n    bool is_valid_month = true;\n    if(month\
    \ == 2)\n    {\n        if(day_diff < 1 || day_diff > 29)\n        {\n       \
    \     is_valid_month = false;\n        }\n    }\n    else\n    {\n        if(month_diff\
    \ > months[month - 1] || day_diff > days[months[month - 1]])\n        {\n    \
    \        is_valid_month = false;\n        }\n    }\n    if(!is_valid_month)\n\
    \    {\n        return false;\n    }\n    if(year < 1900)\n    {\n        return\
    \ false;\n    }\n    bool is_valid_year = true;\n    if(year%100 != 0 || year%400\
    \ == 0)\n    {\n        if(months[month - 1] == 0 || days[months[month - 1]] ==\
    \ 0)\n        {\n            is_valid_year = false;\n        }\n    }\n    else\n\
    \    {\n        if(months[month - 1] != 0 && days[months[month - 1]] != 0)\n \
    \       {\n            is_valid_year = false;\n        }\n    }\n    if(!is_valid_year)\n\
    \    {\n        return false;\n    }\n    return true;\n}", "{\n    auto firstDigit\
    \ = date[0];\n    if (firstDigit >= '0' && firstDigit <= '9')\n    {\n       \
    \ return true;\n    }\n    auto daysInYear = [&](char year){\n        switch (year)\n\
    \        {\n            case '1':\n                return 31;\n            case\
    \ '2':\n                return 29;\n            case '3':\n                return\
    \ 31;\n            case '4':\n                return 30;\n            case '5':\n\
    \                return 31;\n            case '6':\n                return 30;\n\
    \            case '7':\n                return 31;\n            case '8':\n  \
    \              return 31;\n            case '9':\n                return 30;\n\
    \            case '0':\n                return 29;\n            case '1':\n  \
    \          case '2':\n            case '3':\n            case '4':\n         \
    \   case '5':\n            case '6':\n            case '7':\n            case\
    \ '8':\n            case '9':\n                return 28;\n        }\n       \
    \ return -1;\n    };\n    auto firstDigit2 = date[1];\n    if (firstDigit2 >=\
    \ '0' && firstDigit2 <= '9')\n    {\n        return true;\n    }\n    auto daysInMonth\
    \ = [&](char month)->int{\n        switch (month)\n        {\n            case\
    \ '1':\n                return 31;\n            case '2':\n                return\
    \ 28;\n            case '3':\n                return 31;\n            case '4':\n\
    \                return 30;\n            case '5':\n                return 31;\n\
    \            case '6':\n                return 30;\n            case '7':\n  \
    \              return 31;\n            case '8':\n                return 31;\n\
    \            case '9':\n                return 30;\n            case '0':\n  \
    \              return 29;\n        }\n        return -1;\n    };\n    auto months\
    \ = [&](char month)->int{\n        switch (month)\n        {\n            case\
    \ '1':\n                return 1;\n            case '2':\n                return\
    \ 2;\n            case '3':\n                return 3;\n            case '4':\n\
    \                return 4;\n            case '5':\n                return 5;\n\
    \            case '6':\n                return 6;\n            case '7':\n   \
    \             return 7;\n            case '8':\n                return 8;\n  \
    \          case '9':\n                return 9;\n            case '0':\n     \
    \           return 10;\n        }\n        return -1;\n    };\n    auto days =\
    \ [&](char day)->int{\n        switch (day)\n        {\n            case '1':\n\
    \                return 1;\n            case '2':\n                return 2;\n\
    \            case '3':\n                return 3;\n            case '4':\n   \
    \             return 4;\n            case '5':\n                return 5;\n  \
    \          case '6':\n                return 6;\n            case '7':\n     \
    \           return 7;\n            case '8':\n                return 8;\n    \
    \        case '9':\n                return 9;\n            case '0':\n       \
    \         return 10;\n            case '1':\n            case '2':\n         \
    \   case '3':\n            case '4':\n            case '5':\n            case\
    \ '6':\n            case '7':\n", "{\n    //validate date\n    if(date.length()\
    \ == 0) return false;\n    int month = 0;\n    int day = 0;\n    int year = 0;\n\
    \    int days_in_month[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\
    \ };\n    int current_day = 0;\n    int current_month = 0;\n    int current_year\
    \ = 0;\n    char temp_char;\n    char ch;", "{\n    if(date.empty())\n       \
    \ return false;\n    \n    int months = date.length();\n    int days = 0;\n  \
    \  \n    for(int i = 0; i < months; i++)\n    {\n        if(date[i] != ' ')\n\
    \            break;\n    }\n    \n    while(i < months)\n    {\n        i++;\n\
    \        if(date[i] != ' ')\n            break;\n    }", "{\n\tif (date.length()\
    \ == 0) return false;\n\tint num_days = days_between(date(2,4,2000), date(6,4,2020));\n\
    \tif (num_days > 30 or num_days < 1) return false;\n\tstring month = date.substr(0,2);\n\
    \tint month_val = 0;\n\tstd.typecons::to_integer(month,month_val);\n\tif (month_val\
    \ < 1 or month_val > 12) return false;\n\tstring day = date.substr(2,2);\n\tint\
    \ day_val = 0;\n\tstd.typecons::to_integer(day,day_val);\n\tif (day_val < 1 or\
    \ day_val > 31) return false;\n\tint year = 0;\n\tstring year = date.substr(4,4);\n\
    \tstd.typecons::to_integer(year,year_val);\n\tif((year_val < 1 or year_val > 12)\
    \ or (day_val > 31 or day_val < 1) or (month_val > 12 or month_val < 1) or \n\t\
    \   (day_val > 30 or day_val < 1)) return false;\n\treturn true;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c++,algorithm,string,arrays |>\nYour problem could\
    \ be easily solved using regular expressions. \nFor example, for February you\
    \ would have regex like this: ((january|february|march|april|may|june|july|august|september|october|november|december))\\\
    -([0-9]{1,2})\\-([0-9]{4})\nHere is a simple example of this regex and some more\
    \ complex ones.\nAnd here you can find some more information about regular expressions\
    \ in C++.\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <sstream>\n#include <vector>\n#include <string>\n#include <cassert>\n\
    #include <algorithm>", "{\n    int day = std.atoi(string(\"01-\" + string(\"19\"\
    \ + string(\"20\" + string(date))));\n    int month = std.atoi(string(\"12-\"\
    \ + string(\"19\" + string(\"20\" + string(date))));\n    int year = std.atoi(string(\"\
    19\" + string(\"20\" + string(date)));\n    \n    if(day < 1 || day > 31 || month\
    \ < 1 || month > 12 || year < 1 || year > 2020) {\n        return false;\n   \
    \ } else {\n        return true;\n    }\n}\n</code>\n<|/ a |>\n<| c |>\nPlease\
    \ provide an explanation of how your code solves the original problem.\n<|/ c\
    \ |>\n<| c |>\n`string(\"01-\" + string(\"19\" + string(\"20\" + string(date))));`\
    \ this is really unreadable and hard to maintain. Try writing `string(\"01-\"\
    +std.format(\"%y\",date));` instead.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ the day of February 29th. Try it with `\"29-02-2020\"`. By the way, why do you\
    \ concatenate `string(\"19\" + string(\"20\" + string(date)))` instead of `std.format(\"\
    %y\", date)`?\n<|/ c |>\n<| a |>\nI assume you were looking for something that\
    \ would return true or false and also would print out the date. There is an easy\
    \ way to accomplish this, using some features of std library:\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n#include\
    \ <chrono>", "{\n    string::size_type pos;\n    string::size_type pos2;\n   \
    \ string::size_type pos3;\n    int day;\n    int month;\n    bool validity;\n\
    \    int month2;\n    int year;\n    int year2;\n    string dateFormat(\"%d-%d-%d\"\
    );\n    pos = date.find(\",\");\n    if (pos != string::npos)\n    {\n       \
    \ date = date.substr(0, pos);\n    }\n    pos = date.rfind(\",\");\n    if (pos\
    \ != string::npos)\n    {\n        date = date.substr(0, pos);\n    }\n    pos\
    \ = date.rfind(\",\");\n    if (pos != string::npos)\n    {\n        date = date.substr(0,\
    \ pos);\n    }\n    pos = date.find(\",\");\n    if (pos != string::npos)\n  \
    \  {\n        date = date.substr(0, pos);\n    }\n    pos = date.rfind(\",\");\n\
    \    if (pos != string::npos)\n    {\n        date = date.substr(0, pos);\n  \
    \  }\n    pos = date.rfind(\",\");\n    if (pos != string::npos)\n    {\n    \
    \    date = date.substr(0, pos);\n    }\n    pos = date.rfind(\",\");\n    if\
    \ (pos != string::npos)\n    {\n        date = date.substr(0, pos);\n    }\n \
    \   pos = date.find(\",\");\n    if (pos != string::npos)\n    {\n        date\
    \ = date.substr(0, pos);\n    }\n    pos = date.rfind(\",\");\n    if (pos !=\
    \ string::npos)\n    {\n        date = date.substr(0, pos);\n    }\n    pos =\
    \ date.rfind(\",\");\n    if (pos != string::npos)\n    {\n        date = date.substr(0,\
    \ pos);\n    }\n    pos = date.rfind(\",\");\n    if (pos != string::npos)\n \
    \   {\n        date = date.substr(0, pos);\n    }\n    pos = date.find(\",\");\n\
    \    if (pos != string::npos)\n    {\n        date = date.substr(0, pos);\n  \
    \  }\n    pos = date.rfind(\",\");\n    if (pos != string::npos)\n    {\n    \
    \    date = date.substr(0, pos);\n    }\n    pos = date.rfind(\",\");\n    if\
    \ (pos != string::npos)\n    {\n        date = date.substr(0, pos);\n    }\n \
    \   pos = date.rfind(\",\");\n    if (pos != string::npos)\n    {\n        date\
    \ = date.substr(0, pos);\n    }\n    pos = date.find(\",\");\n    if (pos != string::npos)\n\
    \    {\n        date = date.substr(0, pos);\n    }\n    pos = date.rfind(\"",
  "{\n    if (date == \"\" || date == null) \n    {\n        return false;\n    }\n\
    \    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n\
    \    int y = stoi(date.substr(6, 4));\n    \n    if (m > 12 \n        || m ==\
    \ 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12)\n    {\n  \
    \      return false;\n    }\n    \n    if (d > 31)\n    {\n        return false;\n\
    \    }\n    \n    if (y > 80)\n    {\n        return false;\n    }\n    \n   \
    \ if (m == 2 && d > 29)\n    {\n        return false;\n    }\n    \n    if (m\
    \ == 2 && d < 29)\n    {\n        return false;\n    }\n    \n    int d1 = m *\
    \ 31;\n    int d2 = d * 30;\n    int d3 = y + 90;\n    int d4 = d1 + d2 + d3;\n\
    \    int d5 = d1 - d2 + d3;\n    \n    if (d4 > d5)\n    {\n        return false;\n\
    \    }\n    \n    return true;\n}\n</code>\n<|/ a tags=c++ |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <ctime>\n#include <stdlib.h>\n\
    #include <algorithm>\nusing namespace std;", "{\n    if (!empty(date)) {\n   \
    \     int dateParts[] = date.split('-');\n        int day = dateParts[0];\n  \
    \      int month = dateParts[1];\n        int year = dateParts[2];\n        \n\
    \        if (month < 1 || month > 12) {\n            return false;\n        }",
  "{\n    \n    int dd;\n    int mm;\n    int yyyy;\n    \n    int days[12] = \n \
    \   {\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    \n\
    \    int months[12] = \n    {\n        12, 1, 4, 6, 9, 11\n    };\n    \n    int\
    \ n = strlen(date);\n    \n    if (n != 10) return false;\n    \n    if (string::npos\
    \ != date.find(\"-\")) return false;\n    \n    dd = atoi(&date[1]);\n    mm =\
    \ atoi(&date[2]);\n    yyyy = atoi(&date[4]);\n    \n    if (mm < 1 || mm > 12)\
    \ return false;\n    \n    if (dd < 1 || dd > days[mm]) return false;\n    \n\
    \    if (mm == 1 || mm == 3 || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm\
    \ == 12) \n    {\n        if (dd < 1 || dd > 30) return false;\n    }\n    \n\
    \    if (mm == 4 || mm == 6 || mm == 9 || mm == 11) \n    {\n        if (dd <\
    \ 1 || dd > 29) return false;\n    }\n    \n    if (mm == 2) \n    {\n       \
    \ if (dd < 1 || dd > 31) return false;\n    }\n    \n    if (yyyy < 1000 || yyyy\
    \ > 2040) return false;\n    \n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nWelcome to Stack Overflow! Please don't answer just with source code.\
    \ Try to provide a nice description about how your solution works. See: [How do\
    \ I write a good answer?](https://stackoverflow.com/help/how-to-answer). Thanks\n\
    <|/ c |>\n<| c |>\nSorry for the late reply. I have updated my answer with full\
    \ code. Hope it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! But I think\
    \ you missed one condition: days < 31 should be <= 31. Otherwise it can return\
    \ true for 31-02-2019.\n<|/ c |>\n<| c |>\n, thanks for catching that, I didn't\
    \ notice that condition. I have updated the code snippet.\n<|/ c |>\n<| c |>\n\
    This solution has problems. For example it can return true for \"0103-11-2000\"\
    , which should be false\n<|/ c |>\n<| a dscore=1 |>\nA slightly different version\
    \ of answer but with 2 functions:", "{\n    if(!string.len(date))\n        return\
    \ false;", "{\n    if(!date.empty())\n    {\n        int year = stoi(date);\n\
    \        int months = stoi(date);\n        int days = stoi(date);\n        if(months\
    \ < 1 || months > 12)\n        {\n            return false;\n        }\n     \
    \   if(days < 1 || days > 31)\n        {\n            return false;\n        }\n\
    \        if(months == 2 && days > 29)\n        {\n            return false;\n\
    \        }\n        if(days > 30 || months > 11)\n        {\n            return\
    \ false;\n        }\n        if(months == 12)\n        {\n            if(days\
    \ > 31)\n            {\n                return false;\n            }\n       \
    \ }\n        if(months > 1 && months < 12)\n        {\n            if(year < 2000)\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    return true;\n}\n/*\nYou have to write a function that returns the number\
    \ of days between 2 given dates and a leap year is 366 days.\nThe function accepts\
    \ the date of birth as string and return the number of days between them in the\
    \ format: dd-mm-yyyy\n    \n    >>> days_between(\"02-11-2000\",\"19-03-2012\"\
    )\n    366", "{\n    string s;\n    unsigned days;\n    unsigned months;\n   \
    \ unsigned year;\n    unsigned currentmonth;\n    unsigned currentyear;\n    unsigned\
    \ firstday;\n    unsigned lastday;\n    unsigned month;\n    unsigned yearindex;\n\
    \    unsigned i;\n    unsigned x;\n    bool valid;\n    valid = true;\n    bool\
    \ validDays;\n    bool validYear;\n    bool validMonths;\n    bool validDate;\n\
    \    string monthStr;\n    string yearStr;\n    s = date; //string s = \"12-25-2010\"\
    ;\n    stringstream ss(s); //stream ss(\"12-25-2010\");\n    ss >> days;\n   \
    \ monthStr = \"\";\n    yearStr = \"\";\n    for(i = 0; i <= 12; i++) {\n    \
    \    monthStr += char(i + '0');\n    }\n    for(x = 0; x < s; x++) {\n       \
    \ if(s[x] == ' ') {\n            monthStr += ' ';\n        }\n        else {\n\
    \            validMonths = true;\n            monthStr = string(x);\n        \
    \    monthStr = monthStr.substr(1, monthStr.length() - 2);\n            for(i\
    \ = 0; i <= 12; i++) {\n                if(i == month) {\n                   \
    \ break;\n                }\n            }\n            currentmonth = i;\n  \
    \          firstday = day;\n            if(month < 1 || month > 12) {\n      \
    \          valid = false;\n            }\n            else {\n               \
    \ validMonths = validDays = validYear = true;\n            }\n            if(month\
    \ < 2) {\n                validDays = validYear = false;\n            }\n    \
    \        else {\n                for(i = 1; i <= day; i++) {\n               \
    \     if(day == 31) {\n                        validDays = false;\n          \
    \              break;\n                    }\n                    validDays =\
    \ true;\n                }\n            }\n            for(i = 1; i <= 31; i++)\
    \ {\n                if(i == day) {\n                    break;\n            \
    \    }\n            }\n            lastday = i;\n            validDate = true;\n\
    \            for(i = 1; i <= day; i++) {\n                if(day == 31) {\n  \
    \                  validDate = false;\n                    break;\n          \
    \      }\n                validDate = true;\n            }\n            if(day\
    \ < 1 || day > 29) {\n                validDate = false;\n            }\n    \
    \        for(i = 1; i <= month; i++) {\n                if(i == month) {\n   \
    \                 break;\n                }\n            }\n            if(month\
    \ < 1 || month > 12) {\n                valid = false;\n            }\n      \
    \      else {\n                validYear = validMonths = true;\n            }\n\
    \            if(day < 1 || day > 31) {\n                valid = false;\n     \
    \       }\n            else if(month == 2 && day > 29) {\n                valid\
    \ = false;\n            }\n            else {\n                validYear = validMonths\
    \ = validDate = true;\n            }\n            if(currentmonth == 2 && day\
    \ > 28) {\n                ", "{\n    if(date == \"\")\n        return false;\n\
    \    \n    map<int,string> months = {1:\"January\", 3:\"March\", 5:\"May\", 7:\"\
    July\", 8:\"August\", 10:\"October\", 12:\"December\"};\n    map<int,string> days\
    \ = {1:\"01\", 3:\"03\", 5:\"05\", 7:\"07\", 8:\"08\", 10:\"10\", 12:\"12\"};",
  "{\n    if(date.length()==0)\n    {\n        return false;\n    }\n    string::size_type\
    \ index=0;\n    string::size_type date_length=date.length();\n    if(date[index++]!='-')\n\
    \    {\n        return false;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index++;\n    while(index<date_length)\n\
    \    {\n        if(date[index++]!='-')\n        {\n            return false;\n\
    \        }\n        index++;\n    }\n    index", "{\n    if(date.length()>0){\n\
    \        int days = date_diff(date,\"1-Jan-1900\")/365;\n        if(days>=1 &&\
    \ days<=31)\n            days += 1;\n        else days = 0;\n        int month\
    \ = date_diff(date,\"1-Jan-1900\")%12;\n        if(month>=1 && month<=12)\n  \
    \          month += 1;\n        else month = 0;\n        int year = date_diff(date,\"\
    1-Jan-1900\");\n        if(year>=1 && year<=365)\n            return true;\n \
    \       else\n            return false;\n    }\n    return false;\n}", "{\n  \
    \  if(!string.isEmpty(date)) \n    {\n        auto arr = date.split('-');\n  \
    \      if(arr.length != 3 || std.ranges.Range2<int>([arr.begin(),arr.end()]).count()\
    \ > 1) \n        {\n            return false;\n        }\n        int y = std.atoi(arr[1]);\n\
    \        if(y < 1 || y > std.atoi(\"12\"))\n        {\n            return false;\n\
    \        }\n        int m = std.atoi(arr[0]);\n        if(m < 1 || m > std.atoi(\"\
    12\"))\n        {\n            return false;\n        }\n        int d = std.atoi(arr[2]);\n\
    \        if(d < 1 || d > std.atoi(\"31\"))\n        {\n            return false;\n\
    \        }\n        return true;\n    }\n    return false;\n}", "{\n    int month;\n\
    \    int day;\n    int year;\n    int daysInMonths[12]={31,30,29,31,30,31,30,31,31,30,31,30,31};\n\
    \    \n    //Extract month and day from date string\n    istringstream ss1(date);\n\
    \    string monthStr, dayStr;\n    ss1 >> monthStr >> dayStr;\n    monthStr.erase(remove(monthStr.begin(),\
    \ monthStr.end(), '-'), monthStr.end());\n    month = std.string.toInt(monthStr);\n\
    \    dayStr = dayStr.erase(remove(dayStr.begin(), dayStr.end(), '-'), dayStr.end());\n\
    \    day = std.string.toInt(dayStr);\n    \n    if(month<=1 || month>12)\n   \
    \ {\n        return false;\n    }\n    \n    year=std.string.toInt(date);\n  \
    \  if(year<1||year>10000)\n    {\n        return false;\n    }\n    \n    //Validate\
    \ the date\n    if(month==2 && day<1 || day>daysInMonths[month])\n    {\n    \
    \    return false;\n    }\n    if(month==4 && day<1 || day>30)\n    {\n      \
    \  return false;\n    }\n    if(month==6 && day<1 || day>30)\n    {\n        return\
    \ false;\n    }\n    if(month==9 && day<1 || day>30)\n    {\n        return false;\n\
    \    }\n    if(month==11 && day<1 || day>30)\n    {\n        return false;\n \
    \   }\n    \n    return true;\n}", "{\n    date temp=date;\n    int days[]={31,30,29,28,31,30,31};\n\
    \    int months[]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n    int year=1900;\n    string\
    \ months[]={\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"\
    Sep\",\"Oct\",\"Nov\",\"Dec\"};\n    string::size_type pos = 0;\n    string::size_type\
    \ i;\n    bool valid = false;\n    \n    temp[pos]='-';\n    pos++;\n    temp[pos]='-';\n\
    \    pos++;\n    temp[pos]=' ';\n    pos++;\n    temp[pos]='-';\n    pos++;\n\
    \    \n    //first check the date string\n    for(i=0; i<date.length(); i++){\n\
    \        if((date[i]<'0') || (date[i]>'9'))\n            valid=false;\n      \
    \  else{\n            valid=true;\n            int temp=date[i] - '0';\n     \
    \       if((temp>12) || (temp<1))\n                valid=false;\n            else\n\
    \                year=year*10 + temp;\n        }\n    }\n    \n    //now check\
    \ the number of days\n    for(i=0; i<days.length; i++){\n        if((days[i]<1)\
    \ || (days[i]>31))\n            valid=false;\n        else{\n            valid=true;\n\
    \            int temp=days[i] - 1;\n            if((temp>31) || (temp<1))\n  \
    \              valid=false;\n        }\n    }\n    \n    //now check the months\n\
    \    for(i=0; i<months.length; i++){\n        if((months[i]<1) || (months[i]>12))\n\
    \            valid=false;\n        else{\n            valid=true;\n          \
    \  int temp=months[i] - 1;\n            if((temp>12) || (temp<1))\n          \
    \      valid=false;\n        }\n    }\n    \n    //now check the year\n    if((year<1900)\
    \ || (year>2099))\n        valid=false;\n    else\n        valid=true;\n    \n\
    \    return valid;\n}", "{\n    int days = 0;\n    int months = 0;\n    string\
    \ month = \"\";\n    int year = date.length() - 6;\n    for(int i = 0; i < date.length();\
    \ ++i)\n    {\n        switch(date[i])\n        {\n        case '0':\n       \
    \ case '1':\n        case '2':\n        case '3':\n        case '4':\n       \
    \ case '5':\n        case '6':\n        case '7':\n        case '8':\n       \
    \ case '9':\n            months++;\n            break;\n        case '-':\n  \
    \      case '/':\n            days = days + 1;\n            month = \"\";\n  \
    \          break;\n        case '.':\n            days = days + 1;\n         \
    \   month = month + date[i];\n            break;\n        }\n    }\n    if(days\
    \ > 31)\n    {\n        return false;\n    }\n    if(months > 12)\n    {\n   \
    \     return false;\n    }\n    if(month == \"01\" || month == \"03\" || month\
    \ == \"05\" || month == \"07\" || month == \"08\" || month == \"10\" || month\
    \ == \"12\")\n    {\n        if(days > 31)\n        {\n            return false;\n\
    \        }\n    }\n    else if(month == \"04\" || month == \"06\" || month ==\
    \ \"09\" || month == \"11\")\n    {\n        if(days > 30)\n        {\n      \
    \      return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n    if(year < 100 || year > 2100)\n    {\n        return false;\n    }\n\
    \    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe this solution\
    \ is better than the accepted answer.  I suggest that you edit your answer to\
    \ point out how it differs from it.  That way other people can see what changes\
    \ and how it differs.\n<|/ c |>\n<| a dscore=2 |>\nOne of the comments mentioned\
    \ dateutil.parser, but it did not work for me.\nMy function was like this:\n<code>\n\
    from datetime import datetime\ndef date_check(date_str):\n    date_obj = datetime.strptime(date_str,\
    \ '%m/%d/%Y')\n    if date_obj.month != 12:\n        return False\n    if date_obj.day\
    \ <= 1 or date_obj.day > 31:\n        return False\n    return True\n</code>\n\
    This gave me the error ValueError: time data '6/4/2020' does not match format\
    \ '%m/%d/%Y'\nThen I remembered that my dates were in the format mm/dd/yyyy so\
    \ I simply converted them to dd/mm/yyyy like this:\n<code>\ndate_str = '06/04/2020'\n\
    date_str = date_str.replace('0','')\ndate_str = '20' + date_str\ndate_str = date_str.split('/')\n\
    date_str = '20' + date_str[1] + '/' + date_str[0] + '/' + date_str[2]\ndate_obj\
    \ = datetime.strptime(date_str, '%d/%m/%Y')\n</code>\n", "{\n    map<string,int>\
    \ days;\n    string months[12] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"\
    07\",\"08\",\"09\",\"10\",\"11\",\"12\" };\n    string day = date.substr(0,2);\n\
    \    string month = date.substr(2,2);\n    string year = date.substr(4,4);", "{\n\
    \    if (date != \"\")\n    {\n        if (date.length() != 10)\n        {\n \
    \           return false;\n        }", "{\n    if(!string.empty)\n    {\n    \
    \    //1\n        int days = std.string.toi('1');\n        //3\n        if(days\
    \ > 31) return false;\n        //5\n        if(days > 30) return false;\n    \
    \    //7\n        if(days > 29) return false;\n        //8\n        if(days >\
    \ 28) return false;\n        //10\n        if(days > 31) return false;\n     \
    \   //12\n        if(days > 30) return false;\n    }\n    if(days > 31) return\
    \ false;\n    if(days > 30) return false;\n    if(days > 29) return false;\n \
    \   if(days > 28) return false;\n    if(days > 31) return false;\n    if(days\
    \ > 30) return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,c++14,c++11\
    \ dscore=1 |>\n<| a dscore=0 |>\nHow about this? It uses std.algorithm.all, std.algorithm.any_of,\
    \ and std.algorithm.is_permutation. \n<code>", "{\n    ifstream file_in {\"date.txt\"\
    };\n    if(file_in.fail())\n    {\n        return false;\n    }", "{\n\tif(date.length()<1)\
    \ return false;\n\tif(date.find('-')==string::npos)return false;\n\tif(date.length()<5)\
    \ return false;\n\tstring month = date.substr(0,2);\n\tif(month.length()<1 ||\
    \ month.length()>12) return false;\n\tstring day = date.substr(3,2);\n\tif(day.length()<1\
    \ || day.length()>31) return false;\n\tint year=stoi(date.substr(6,4));\n\tif(year<1900\
    \ || year>3000) return false;\n\treturn true;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks, i had already done all these conditions checking but its getting\
    \ a little too much of codes to write so i used this one but for now its fine\
    \ with me. Thanks again for your answer. :)\n<|/ c |>\n<| a tags=c++,c++11 |>\n\
    You can convert your date string to std::chrono::system_clock::time_point and\
    \ then subtract std::chrono::system_clock::time_point from current time to check\
    \ if the difference is less then 24 hours and then check if it's smaller then\
    \ one day:\n<code>", "{\n    stringstream ss(date);\n    char month;\n    int\
    \ day;\n    int year;\n    char temp;", "{\n    int days[12]={31,31,31,31,31,30,30,30,30,30,29,29,29,29};\n\
    \    int months[12]={0,1,2,3,4,5,6,7,8,9,10,11};\n    string months[12]={\"\"\
    ,\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\"\
    ,\"Nov\",\"Dec\"};\n    int years[12]={0,1,2,3,4,5,6,7,8,9,10,11,12};\n    string\
    \ years[12]={\"\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"\
    ,\"28\",\"29\",\"30\",\"31\"};\n    for(int i=0;i<12;i++)\n    {\n        if(days[i]>date.size())\
    \ return false;\n        if(days[i]<1) return false;\n        if(months[i+1]>date.size())\
    \ return false;\n        if(months[i+1]<1) return false;\n        if(date.substr(0,2)==months[i+1]+date[2]+years[i+1])\
    \ return false;\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++ |>\n<| a\
    \ dscore=0 |>\nAs you are new to c++, I would suggest you use vectors instead\
    \ of array. Vectors offer you a lot of functionality like push_back and erase\
    \ etc.\nAlso your logic is flawed. Your function should validate a date not just\
    \ to meet a specific format. Your validation should be based on the rules of \"\
    A date is a valid date, if one of the following is true:\nA date is valid if all\
    \ of the following rules are satisfied:\n1. The date string is not empty.\n2.\
    \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The\
    \ date should be in the format: mm-dd-yyyy\".\nTo do so, write an algorithm to\
    \ check these rules. Your validation should be based on these rules.\nTry this\
    \ code and understand how it works.\n<code>\n#include <iostream>\n#include <vector>\n\
    #include <string>\nusing namespace std;", "{\n    string months[12] = {\"Jan\"\
    , \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\", \"Jan\", \"Mar\", \"May\"\
    , \"Jul\", \"Aug\", \"Oct\", \"Dec\"};\n    \n    int m_d = std.atoi(date.substr(0,\
    \ 2));\n    int m_m = std.atoi(months[std.atoi(date.substr(2, 2))-1].substr(0,\
    \ 2));\n    int m_y = std.atoi(date.substr(4, 4));", "{\n    DateTime valid;\n\
    \    bool valid = DateTime.TryParse(date, out valid);\n    if(!valid)\n    {\n\
    \        return false;\n    }\n    \n    if (valid.Days != 31 || valid.Months\
    \ < 1 || valid.Months > 12)\n    {\n        return false;\n    }\n    \n    int\
    \ years = valid.Years;\n    int months = valid.Months;\n    \n    if (months <\
    \ 1 || months > 12)\n    {\n        return false;\n    }\n    \n    if (years\
    \ < 1 || years > 100)\n    {\n        return false;\n    }", "{\n    if (date.empty()\
    \ || date == \"01-01-2000\")\n        return true;\n    if (date == \"30-06-2000\"\
    )\n        return true;\n    \n    vector<int> months = {1,3,5,7,8,10,12};\n \
    \   vector<int> days = {1,31,29,30,31};\n    vector<int> years = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};",
  "{\n    string date_str = date;\n    string month;\n    int year, days, month, days_in_month;\n\
    \    stringstream ss;\n    ss << date_str;\n    ss >> month >> year >> days;\n\
    \    month = stoi(month);\n    days_in_month = std.array.length(std.filter(months[month],\
    \ [] (string month_string) {return month_string != \"0\";}));\n    days = stoi(days);\n\
    \    if (date == \"\")\n        return false;\n    year = stoi(year);\n    if\
    \ (month > 12)\n        return false;\n    if (days > days_in_month)\n       \
    \ return false;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (year > INT_MAX)\n        return false;\n    if (year < INT_MIN)\n      \
    \  return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,c++17,algorithm\
    \ dscore=2 |>\n<| c |>\nthank you for writing a function that validates a date\
    \ string but I also want to see how I can write it without recursion and also\
    \ without using boost libraries\n<|/ c |>\n<| c |>\nI do not know if this is possible\
    \ to do without recursion, because it can be done without recursion.\n<|/ c |>\n\
    <| c |>\nThis solution does not check for leap years and for future dates.\n<|/\
    \ c |>\n<| c |>\nI have updated my answer. Thank you for noticing that.\n<|/ c\
    \ |>\n<| a tags=c++,c++17,algorithm dscore=0 |>\nThis is a simple solution. Let\
    \ me know if any improvements need to be made or if any test cases are missing.\n\
    <code>", "{\n    \n    int days;\n    int months;\n    \n    if(!std.string.empty(date))\n\
    \    {\n        auto date1 = std.chrono.parseDateTime(date, std.chrono.Format::DateTime);\n\
    \        \n        if(date1.is_valid())\n        {\n            days = date1.date().getDays();\n\
    \            months = date1.date().getMonths();\n            \n            if(months\
    \ > 0 && months <= 12)\n            {\n                auto date2 = std.chrono.parseDateTime(date,\
    \ \"%d-%m-%Y\");\n                \n                if(date2.is_valid())\n   \
    \             {\n                    if(days >= 1 && days <= 31)\n           \
    \         {\n                        if(months >= 1 && months <= 12)\n       \
    \                 {\n                            if(date2.date().getYear() >=\
    \ 1900)\n                            {\n                                return\
    \ true;\n                            }\n                        }\n          \
    \          }\n                    else if(days == 29 && months == 1)\n       \
    \             {\n                        return true;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false;\n}", "{\n\
    \    size_t i = 0;\n    bool valid = false;\n    \n    if(!isEmpty(date))\n  \
    \  {\n        if(isValidDigit(date[i]))\n        {\n            if(!isValidDigit(date[i+1]))\n\
    \            {\n                return false;\n            }\n            if(!isValidDigit(date[i+2]))\n\
    \            {\n                return false;\n            }\n            valid\
    \ = true;\n            \n            i += 2;\n        }\n        \n        while(i\
    \ + 3 < date.size() && isValidDigit(date[i]))\n        {\n            if(!isValidDigit(date[i+1]))\n\
    \            {\n                return false;\n            }\n            if(!isValidDigit(date[i+2]))\n\
    \            {\n                return false;\n            }\n            if(!isValidDigit(date[i+3]))\n\
    \            {\n                return false;\n            }\n            valid\
    \ = true;\n            \n            i += 3;\n        }\n        \n        \n\
    \        while(i + 1 < date.size() && isValidDigit(date[i]))\n        {\n    \
    \        if(!isValidDigit(date[i+1]))\n            {\n                return false;\n\
    \            }\n            valid = true;\n            \n            i += 1;\n\
    \        }\n        \n        while(i < date.size() && isValidDigit(date[i]))\n\
    \        {\n            valid = true;\n            \n            i += 1;\n   \
    \     }\n    }\n    \n    return valid;\n}", "{\n    \n    if (date.empty())\n\
    \        return false;\n    int dateparts = 4;\n    int days;\n    int months;\n\
    \    \n    try\n    {\n        days = stoi(date.substr(0, 2));\n        months\
    \ = stoi(date.substr(3, 2));\n        dateparts = 4;\n    }\n    catch (out_of_range)\n\
    \    {\n        dateparts = 0;\n    }\n    \n    if (months == 0 || months ==\
    \ 4 || months == 6 || months == 9 || months == 11)\n    {\n        dateparts -=\
    \ 3;\n    }\n    else if (months == 2)\n    {\n        if (days > 29)\n      \
    \  {\n            dateparts -= 2;\n        }\n        else\n        {\n      \
    \      dateparts -= 1;\n        }\n    }\n    else if (days > 31)\n    {\n   \
    \     dateparts -= 1;\n    }\n    \n    if (dateparts == 0)\n        return false;\n\
    \    \n    try\n    {\n        days = stoi(date.substr(2, 2));\n        months\
    \ = stoi(date.substr(5, 2));\n        dateparts = 4;\n    }\n    catch (out_of_range)\n\
    \    {\n        dateparts = 0;\n    }\n    \n    if (months == 0 || months ==\
    \ 4 || months == 6 || months == 9 || months == 11)\n    {\n        dateparts -=\
    \ 3;\n    }\n    else if (months == 2)\n    {\n        if (days > 29)\n      \
    \  {\n            dateparts -= 2;\n        }\n        else\n        {\n      \
    \      dateparts -= 1;\n        }\n    }\n    else if (days > 30)\n    {\n   \
    \     dateparts -= 1;\n    }\n    \n    if (dateparts == 0)\n        return false;\n\
    \    \n    try\n    {\n        days = stoi(date.substr(4, 2));\n        months\
    \ = stoi(date.substr(7, 2));\n        dateparts = 4;\n    }\n    catch (out_of_range)\n\
    \    {\n        dateparts = 0;\n    }\n    \n    if (months == 0 || months ==\
    \ 4 || months == 6 || months == 9 || months == 11)\n    {\n        dateparts -=\
    \ 3;\n    }\n    else if (months == 2)\n    {\n        if (days > 29)\n      \
    \  {\n            dateparts -= 2;\n        }\n        else\n        {\n      \
    \      dateparts -= 1;\n        }\n    }\n    else if (days > 28)\n    {\n   \
    \     dateparts -= 1;\n    }\n    \n    if (dateparts == 0)\n        return false;\n\
    \    \n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nUsing regular\
    \ expressions, you can check a date in the format mm-dd-yyyy with a single line:\n\
    <code>\nimport std.stdio;", "{\n    int month;\n    int day;\n    int year;",
  "{\n    int day;\n    string month;\n    string year;\n    \n    int minDay = 1;\n\
    \    int maxDay = 31;\n    int minMonth = 1;\n    int maxMonth = 12;", "{\n  \
    \  string dateString = \"\";\n    dateString = date;\n    string::size_type dateStringLen\
    \ = dateString.length();\n    char * pchar = &dateString[0];\n    pchar += (dateStringLen\
    \ - 5);\n    int year = stoi(pchar);\n    \n    int month;\n    pchar += 2;\n\
    \    month = stoi(pchar);\n    \n    int day;\n    pchar += 2;\n    day = stoi(pchar);\n\
    \    \n    \n    // validation\n    if (dateString.empty() || day <= 0 || day\
    \ >= 31)\n        return false;\n    \n    if (month < 1 || month > 12)\n    \
    \    return false;\n    \n    if (month == 2 && day > 29)\n        return false;\n\
    \    \n    if (month == 4 && day > 30)\n        return false;\n    \n    if (month\
    \ == 6 && day > 30)\n        return false;\n    \n    if (month == 9 && day >\
    \ 30)\n        return false;\n    \n    return true;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nA little explanation would be in order.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work in the general case (i.e. when the year has more than 4 digits)\n<|/ c\
    \ |>\n<| c |>\n, thanks, this was a solution for a question I had on CodeWars.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere is a simple solution using c++ algorithms:\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace\
    \ std;", "{\n    int day;\n    int month;\n    int year;", "{\n    if(!is_empty(date))\n\
    \    {\n        if(date.find_first_of(\"-\") > 0)\n        {\n            auto\
    \ date_str = date;\n            date_str.erase(date_str.find_last_of(\"-\") +\
    \ 1);\n            auto month = _toint(date_str.substr(0, 2));\n            auto\
    \ day = _toint(date_str.substr(2, 2));\n            auto year = _toint(date_str.substr(4,\
    \ 4));\n            if(!month >= 1 && month <= 12)\n            {\n          \
    \      if(day > 0 && day <= 31)\n                {\n                    if(day\
    \ > 29)\n                    {\n                        if(!day > 29 && day <=\
    \ 31)\n                        {\n                            if(!day > 30 &&\
    \ day <= 31)\n                            {\n                                if(day\
    \ > 31 && day <= 31)\n                                {\n                    \
    \                if(day > 30 && day <= 30)\n                                 \
    \   {\n                                        if(day > 29)\n                \
    \                        {\n                                            return\
    \ false;\n                                        }\n                        \
    \            }\n                                }\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return true;\n}", "{\n    if(date == \"\"\
    )\n        return false;\n    int daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n    int days = 0;\n    int months = 0;\n    vector<string>\
    \ dateParts = split_string(date, '-', 3);\n    vector<int> datePartVector(dateParts.size());\n\
    \    for(int i = 0; i < dateParts.size(); i++)\n    {\n        datePartVector[i]\
    \ = stoi(dateParts[i]);\n        if(datePartVector[i] < 1 || datePartVector[i]\
    \ > 12)\n        {\n            return false;\n        }\n        days =  datePartVector[i]\
    \ > 0 ? datePartVector[i] : 1;\n        months--;\n        if(months == 0)\n \
    \           break;\n    }\n    if(days < 1 || days > 31) return false;\n    if(months\
    \ < 1 || months > 12) return false;\n    int year = datePartVector[2] % 100;\n\
    \    int leapYear = (datePartVector[2] % 100 == 0) ? 1 : 0;\n    int isLeap =\
    \ datePartVector[2] % 4;\n    bool validYear = ((year % 400 == 0) ? 1 : ((year\
    \ % 4 == 0) ? 0 : -1));\n    return (((months - isLeap * 12) < daysInMonth[months\
    \ - 1]) && isLeap == leapYear && daysInMonth[months - 1] == days);\n}", "{\n \
    \   size_t length = date.size();\n    if(length < 1 || length > 15) return false;\
    \ \n    \n    string months[12] = {\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\"\
    ,\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"};\n    size_t days[12]\
    \ = {31,31,30,31,30,31,31,30,31,30,31,31};\n    \n    auto day = date[length-3];\n\
    \    if(day < '0' || day > '9') return false; \n    \n    auto month = date[length-2];\n\
    \    if(month < '0' || month > '9') return false; \n    \n    auto year = date[length-1];\n\
    \    if(year < '0' || year > '9') return false; \n    \n    size_t index = 0;\n\
    \    for(auto i = 1;i < 12;i++){\n        if(months[i-1] == month){\n        \
    \    if(days[i-1] > day || days[i-1] < 1) return false;\n        }\n        index++;\n\
    \    }\n    return true;\n}", "{\n    string months[12] = {\"01\",\"03\",\"05\"\
    ,\"07\",\"08\",\"10\",\"12\"};\n    string day_formats[2] = {\"01\",\"04\",\"\
    06\",\"09\",\"11\",\"12\",\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"\
    01\",\"04\",\"06\",\"09\",\"11\",\"12\"};\n    int days[31] = {31,30,31};\n  \
    \  int months[12] = {1,3,5,7,8,10,12};\n    int d = -1, m = -1, y = -1;\n    bool\
    \ valid = false;\n    char c;\n    // Your code goes here!\n    string::size_type\
    \ loc = date.find_first_not_of(\"-0123456789\");\n    if ( loc == string::npos\
    \ ) {\n        valid = true;\n    } else {\n        if ( date.empty() ) {\n  \
    \          valid = false;\n        } else {\n            string date = date.substr(0,\
    \ loc);\n            int d = stoi(date);\n            string::size_type month_loc\
    \ = date.find_first_of(\"-\");\n            int m_d = stoi(date.substr(month_loc,\
    \ month_loc + 1));\n            int m = stoi(months[m_d]);\n            int y\
    \ = stoi(date.substr(month_loc + 1));\n            if ( d > 0 && d <= 31 ) {\n\
    \                if ( m >= 1 && m <= 12 ) {\n                    if ( y > 1900\
    \ && y < 2020 ) {\n                        valid = true;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return valid;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThe date string validation is okay, but there\
    \ are some cases where the function returns false. See the last function call\
    \ in the above code and the comment below the definition of valid_date. The validation\
    \ should only succeed if the date is in the format mm-dd-yyyy. I guess the error\
    \ is due to the fact that you are taking the day as m_d\n<|/ c |>\n<| c |>\nThe\
    \ issue is that your code does not account for the leap year which was also mentioned\
    \ in the question. I am looking for an answer that is more elegant and does not\
    \ involve adding additional if-else blocks.\n<|/ c |>\n<| c |>\nI have updated\
    \ the question with another solution which works fine. I tried this before posting\
    \ my question, but I missed the case that month could be greater than 12. I was\
    \ trying to find a solution without the use of additional if-else blocks and I\
    \ came up with the solution.\n<|/ c |>\n<| c |>\nAs an aside, you don't need to\
    \ use the ternary operator. You can just say `return !date.empty() && (d >= 1\
    \ && d <= 31) && (m >= 1 && m <= 12", "{\n    stringstream ss(date);\n    int\
    \ days,months,years;\n    char m,d;\n    ss >> m >> d >> days;\n    months=0;\n\
    \    days=0;\n    years=0;\n    \n    for(auto it:months)\n    {\n        if(month>12\
    \ || month<1)\n            return false;\n        months++;\n    }\n    for(auto\
    \ it:days)\n    {\n        if(days<1 || days>31)\n            return false;\n\
    \        days++;\n    }\n    for(auto it:months)\n    {\n        if(month>12 ||\
    \ month<1)\n            return false;\n        months++;\n    }\n    for(auto\
    \ it:years)\n    {\n        if(year>20 || year<0)\n            return false;\n\
    \        years++;\n    }", "{\n    int days = 0;\n    int months = 0;\n    int\
    \ years = 0;\n    int num_days = 0;\n    int num_months = 0;\n    int num_years\
    \ = 0;\n    int month, day;\n    int month, day;\n    int year, day;\n    int\
    \ year, day;\n    string months[] = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\"\
    ,\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\"\
    ,\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\"\
    ,\"29\",\"30\",\"31\"}\n    string days[] = {\"01\",\"02\",\"03\",\"04\",\"05\"\
    ,\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\"\
    ,\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"\
    ,\"28\",\"29\",\"30\",\"31\"}\n    string years[] = {\"2000\",\"2001\",\"2002\"\
    ,\"2003\",\"2004\",\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\"\
    ,\"2012\",\"2013\",\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\"\
    ,\"2021\",\"2022\",\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\"\
    ,\"2030\",\"2031\"}\n    \n    int length = stringlen(date);\n    \n    if(length\
    \ == 0)\n    {\n        return false;\n    }\n    \n    int i = 0;\n    \n   \
    \ while(i < length)\n    {\n        if(date[i] == '-')\n        {\n          \
    \  i = i + 1;\n        }\n        \n        if(date[i] == ' ')\n        {\n  \
    \          i = i + 1;\n        }\n        \n        if(date[i] >= '0' && date[i]\
    \ <= '9')\n        {\n            i++;\n        }\n        \n        if(date[i]\
    \ != '-')\n        {\n            return false;\n        }\n        \n       \
    \ i++;\n    }\n    \n    while(i < length)\n    {\n        if(date[i] == '-')\n\
    \        {\n            i = i + 1;\n        }\n        \n        if(date[i] ==\
    \ ' ')\n        {\n            i = i + 1;\n        }\n        \n        if(date[i]\
    \ == '/')\n        {\n            i++;\n        }\n        \n        if(date[i]\
    \ == '-')\n        {\n            i = i + 1;\n        }\n        \n        if(date[i]\
    \ == '/')\n        {\n            i++;\n        }\n        \n        if(date[i]\
    \ == '-')\n        {\n            i = i + 1;\n        }\n        \n        if(date[i]\
    \ == '/')\n        {\n            i++;\n        }\n        \n        if(date[i]\
    \ == '/')", "{\n    char mm[4];\n    char dd[4];\n    char yyyy[4];\n    std.string::split(date,\
    \ mm, dd, yyyy);\n    \n    int mmn = std.string::to_int(mm);\n    int ddn = std.string::to_int(dd);\n\
    \    int yyyyn = std.string::to_int(yyyy);", "{\n    int days[] = {31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[] = {1, 3, 5, 7, 8, 10,\
    \ 12};\n    int i;\n    int day, month, year;", "{\n    map<string, int> m = date_to_month_days(date);\n\
    \    if (m.size() > 0) \n    {\n        int days_okay = m.at(\"01\") + m.at(\"\
    03\") + m.at(\"05\") + m.at(\"07\") + m.at(\"08\") + m.at(\"10\") + m.at(\"12\"\
    );\n        int months_okay = m.at(\"04\") + m.at(\"06\") + m.at(\"09\") + m.at(\"\
    11\");\n        return days_okay <= 31 && months_okay <= 12 && m.size() <= 2 &&\
    \ m.size() >= 4;\n    }\n    return false;\n}", "{\n\t/*\n\tWrite your validation\
    \ here.\n    */\n    bool isValid;\n    isValid = date.length() > 0 ;\n    isValid\
    \ &= (date.length() == 21);\n    int day[13] = { 0 };\n    int month[13] = { 0\
    \ };\n    int year = 0;\n    int day = stoi(date.substr(0, 2));\n    int month\
    \ = stoi(date.substr(2, 2));\n    int year = stoi(date.substr(4, 4));\n    for\
    \ (int i = 0; i < 12; i++)\n    {\n        day[i] = stoi(date.substr(6 + i, 2));\n\
    \        month[i] = stoi(date.substr(12 + i, 2));\n    }\n    isValid &= (year\
    \ < 1 || year > 9999);\n    isValid &= (month < 1 || month > 12);\n    isValid\
    \ &= (day < 1 || day > 31);\n    isValid &= (month[month - 1] == 0 || month[month\
    \ - 1] == 1);\n    isValid &= (day[month - 1] == 0 || day[month - 1] == 1);\n\
    \    isValid &= (year != 365);\n    isValid &= (year != 366);\n    isValid &=\
    \ (year != 30 && year != 31);\n    return isValid;\n}", "{\n    // your code goes\
    \ here\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,datetime dscore=0 |>\nThis\
    \ problem can be solved using the date library in C++. This library can parse\
    \ many formats for date and time. For example, the following code uses the date_time\
    \ library to parse the date string and convert it to the datetime type.\n<code>\n\
    #include <iostream>\n#include <string>\n#include <date_time.h>", "{\n    if(!string.empty)\n\
    \    {\n        int days = std.string.touched_days(date);\n        int month =\
    \ std.string.touched_month(date);", "{\n    if(!is_empty(date))\n    {\n     \
    \   auto d = to_string(date);\n        auto mm = d.substr(0,2);\n        auto\
    \ dd = d.substr(2,2);\n        auto yyyy = d.substr(4,4);\n        if(mm==\"02\"\
    \ || mm==\"03\" || mm==\"04\" || mm==\"05\" || mm==\"06\" || mm==\"07\" || mm==\"\
    08\" || mm==\"09\" || mm==\"10\" || mm==\"11\")\n        {\n            if(dd==\"\
    01\" || dd==\"02\" || dd==\"03\" || dd==\"04\" || dd==\"05\" || dd==\"06\" ||\
    \ dd==\"07\" || dd==\"08\" || dd==\"09\" || dd==\"10\" || dd==\"11\" || dd==\"\
    12\")\n            {\n                if(dd!=\"01\" && dd!=\"02\" && dd!=\"03\"\
    \ && dd!=\"04\" && dd!=\"05\" && dd!=\"06\" && dd!=\"07\" && dd!=\"08\" && dd!=\"\
    09\" && dd!=\"10\" && dd!=\"11\" && dd!=\"12\")\n                    return false;\n\
    \                else\n                {\n                    if(mm==\"01\" ||\
    \ mm==\"03\" || mm==\"05\" || mm==\"07\" || mm==\"08\" || mm==\"10\" || mm==\"\
    12\" || mm==\"02\" || mm==\"04\" || mm==\"06\" || mm==\"09\" || mm==\"11\")\n\
    \                    {\n                        if(dd!=\"01\" && dd!=\"02\" &&\
    \ dd!=\"03\" && dd!=\"04\" && dd!=\"05\" && dd!=\"06\" && dd!=\"07\" && dd!=\"\
    08\" && dd!=\"09\" && dd!=\"10\" && dd!=\"11\" && dd!=\"12\")\n              \
    \              return false;\n                        else\n                 \
    \       {\n                            if(yyyy==\"00\" || yyyy==\"11\")\n    \
    \                            return true;\n                            else\n\
    \                            {\n                                if(yyyy==\"01\"\
    \ || yyyy==\"02\" || yyyy==\"03\" || yyyy==\"04\" || yyyy==\"05\" || yyyy==\"\
    06\" || yyyy==\"07\" || yyyy==\"08\" || yyyy==\"09\" || yyyy==\"10\" || yyyy==\"\
    11\" || yyyy==\"12\")\n                                {\n                   \
    \                 if(dd!=\"01\" && dd!=\"02\" && dd!=\"03\" && dd!=\"04\" && dd!=\"\
    05\" && dd!=\"06\" && dd!=\"07\" && dd!=\"08\" && dd!=\"09\" && dd!=\"10\" &&\
    \ dd!=\"11\" && dd!=\"12\")\n                                        return false;\n\
    \                                    else\n                                  \
    \  {\n                                        if(mm==\"01\" || mm==\"03\" || mm==\"\
    05\" || mm==\"07\" || mm==\"08\" || mm==\"10\" || mm==\"", "{\n  if(date.empty())\n\
    \    return false;\n  if(date.length()<8 || date.length()>8)\n    return false;\n\
    \  int day_part = date[2]-'0';\n  int month_part = date[1]-'0';\n  int year_part\
    \ = date[0]-'0';\n  day_part = day_part>31? day_part:day_part<1? 1:day_part;\n\
    \  month_part = month_part>12? month_part:month_part<1? 1:month_part;\n  if(year_part>19)\n\
    \  {\n    if(day_part<1)\n      return false;\n    if(month_part<1)\n      return\
    \ false;\n    if(year_part<0 || year_part>100)\n      return false;\n  }\n  else\n\
    \  {\n    if(month_part<1 || month_part>12)\n      return false;\n    if(day_part<1)\n\
    \      return false;\n  }\n  return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nI like the use of ints for year, month and day. But the code does not compile.\
    \ I cannot find where it says that \"operator '-' cannot be applied to int and\
    \ char\" on line \"int day_part = date[2]-'0';\"\n<|/ c |>\n<| c |>\nI have updated\
    \ the code. There was a typo there and also one more typo. I have now tested it\
    \ and it works.\n<|/ c |>\n<| c |>\nThanks, it works! But I feel like it could\
    \ be more elegant, could you please add this to the code as well?\n<|/ c |>\n\
    <| c |>\nI have added it to the code. Also I added comments and corrected the\
    \ typos as well. You should take this as an example and try to implement your\
    \ own.\n<|/ c |>\n<| c |>\nYes, I see! Thanks! This was exactly what I needed.\n\
    <|/ c |>\n<| a |>\nHere is a possible solution. It can be improved, though.\n\
    <code>\nstring months[12] = {\n    \"january\",\n    \"february\",\n    \"march\"\
    ,\n    \"april\",\n    \"may\",\n    \"june\",\n    \"july\",\n    \"august\"\
    ,\n    \"september\",\n    \"october\",\n    \"november\",\n    \"december\"\n\
    };", "{\n    int year=stoi(date);\n    int month=stoi(date.substr(3,2));\n   \
    \ int day=stoi(date.substr(6,2));\n    if(!empty(date)&&(year<13&&month<13&&day<32&&month<12&&year>=0)&&day>31&&day<30)\n\
    \        return true;\n    return false;\n}\n</code>\n<|/ a tags=c++ |>\n<| a\
    \ dscore=0 |>\nYou have to check month and day for validity. \nAlso date format\
    \ should be \"YYYY-MM-DD\"\n<code>", "{\n    if (date == \"\") \n    {\n     \
    \   return false;\n    }\n    int daysInMonth(int month, int year){\n        int\
    \ months[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        if (month\
    \ == 1){\n            return 28;\n        }\n        int result = months[month-1];\n\
    \        if (year < 1 || year > 9999)\n            return result;\n        return\
    \ result;\n    }\n    int month = stoi(date.substr(0, 2));\n    int year = stoi(date.substr(3,\
    \ 5));\n    int days = stoi(date.substr(6, 2));\n    return ((month >= 1 && month\
    \ <= 12) &&\n            (days > 0 && days <= daysInMonth(month, year)) &&\n \
    \           (year > 0 && year < 9999));\n}\n</code>\n<|/ a tags=c++,c++11 dscore=2\
    \ |>\n<| c |>\nthank you, but i'm using c++11\n<|/ c |>\n<| c |>\nI think you\
    \ misunderstand what my code does. The function `daysInMonth` returns the number\
    \ of days in a given month (excluding leap years). By calling `daysInMonth(month,\
    \ year)` you can get the number of days in the given month and year. Your function\
    \ checks if the year is between 0 and 9999.\n<|/ c |>\n<| c |>\nyes i know that,\
    \ but the question is how can i do the same, but in c++11\n<|/ c |>\n<| c |>\n\
    Oh, I misinterpreted your question. You can convert the `stoi` function to the\
    \ old `stringstream` syntax by changing the line `int year = stoi(date.substr(3,\
    \ 5));` to `int year = stringstream(date.substr(3, 5)).str();`\n<|/ c |>\n<| c\
    \ |>\nthank you, but it didn't worked for me, i think that my problem is the way\
    \ that i'm declaring the variables, but i don't know how to fix it\n<|/ c |>\n\
    <| a |>\n<code>\n#include <bits/stdc++.h>\nusing namespace std;", "{\n    // TODO:\
    \ implement here\n}\n</cell>\n<cell>\n// TODO: Implement the function below\n\
    string reformatDate(string inputDate)\n{\n    // TODO: The function should return\
    \ the same format as inputDate\n}\n</cell>\n<cell>\n// TODO: Implement the function\
    \ below\nstring convertToString(int year, int month, int day)\n{\n    // TODO:\
    \ The function should return a string in the format dd-mm-yyyy\n}\n</cell>\n<cell>\n\
    // TODO: Implement the function below\nstring convertToString(DateTime time)\n\
    {\n    // TODO: The function should return a string in the format dd-mm-yyyy\n\
    }\n</cell>\n<text>\nSolution\nClick here to view the solution", "{\n     if (date.length()\
    \ == 0)\n         return false;", "{\n    if (date == \"\")\n        return false;\n\
    \    int numDays = 0;\n    int numMonths = 0;\n    int month = date[0] - '0';\n\
    \    int day = date[1] - '0';\n    int year = date[2] - '0';\n    string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    string\
    \ monthsWithLeap[13] = {\"January\", \"February\", \"March\", \"April\", \"May\"\
    , \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"\
    December\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    , \"January\"};\n    \n    numDays = days_in_month(months[month], year);\n   \
    \ if (month > 12)\n    {\n        numMonths = month - 12 + 1;\n    }\n    else\
    \ if (month > 0)\n    {\n        numMonths = month;\n    }\n    if (day > numDays)\n\
    \    {\n        return false;\n    }\n    else \n    {\n        return true;\n\
    \    }\n}\n</code>\n<|/ a tags=date,c++,validation |>\n<| c |>\nWhy not `string\
    \ months[12]` and then `months[month]` ? You also never compare the month to `12`\n\
    <|/ c |>\n<| c |>\nBecause that would make the code a bit more verbose and harder\
    \ to read.\n<|/ c |>\n<| c |>\nThat is indeed much better style. The `if` could\
    \ be avoided with `months[month-1]` though.\n<|/ c |>\n<| c |>\nThanks, but my\
    \ code still doesn't compile with that code. I know that there are plenty of other\
    \ ways to do it, but I want to use my code in the way that I've learned so far.\
    \ I'll post the code that I actually have so far as soon as possible. Thanks for\
    \ your help!\n<|/ c |>\n<| c |>\n, please post your updated code in your question\
    \ so we can see what else you did wrong.\n<|/ c |>\n<| a |>\nA very simple example\
    \ for validating dates could be something like this:\n<code>\n#include <iostream>\n\
    #include <cstring>", "{\n    Date d;\n    if(!is_valid(date)) \n        return\
    \ false;\n    d.parseFormat(\"%m-%d-%Y\");\n    int d = d.days();\n    int m =\
    \ d.months();\n    int y = d.year();", "{\n    if(date.empty())\n        return\
    \ false;", "{\n    bool valid = true;\n    if (string.IsNullOrEmpty(date))\n \
    \   {\n        valid = false;\n    }\n    string[] date = date.Split('-');\n \
    \   if (date.Length != 3)\n    {\n        valid = false;\n    }\n    int month_days[12]\
    \ = \n    {\n        0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334\n \
    \   };\n    int month = int.Parse(date[0]);\n    int day = int.Parse(date[1]);\n\
    \    int year = int.Parse(date[2]);\n    if ((month < 1) || (month > 12))\n  \
    \  {\n        valid = false;\n    }\n    if ((day < 1) || (day > month_days[month-1]))\n\
    \    {\n        valid = false;\n    }\n    if (month == 2 && day > 29)\n    {\n\
    \        valid = false;\n    }\n    if (month == 4 && day > 30)\n    {\n     \
    \   valid = false;\n    }\n    return valid;\n}\n</code>\n<|/ a tags=c# |>\n<|\
    \ c |>\nThanks for the effort but i need to do this in one method and i want to\
    \ use switch statement and also i need to do this without using arrays .\n<|/\
    \ c |>\n<| a dscore=0 tags=c# |>\n<code>\nprivate bool ValidateDate(string date)\
    \ {\n    //Check null or empty\n    if (string.IsNullOrEmpty(date))\n        return\
    \ false;\n    //Split\n    string[] date = date.Split('-');\n    //Check length\n\
    \    if (date.Length != 3)\n        return false;\n    //Check valid months\n\
    \    if (date.Length == 3 && date[0] != \"01\")\n        return false;\n    if\
    \ (date.Length == 3 && date[1] != \"01\")\n        return false;\n    if (date.Length\
    \ == 3 && date[2] != \"20\")\n        return false;", "{\n    \n    size_t length\
    \ = date.length();\n    string date_str = date;\n    bool isValid;\n    \n   \
    \ if(!length) return false;\n    \n    isValid = false;\n    \n    int days;\n\
    \    int month;\n    int year;\n    \n    sscanf(date_str.c_str(), \"%d-%d-%d\"\
    ,&day,&month,&year);\n    \n    if(!validate_day(day) || !validate_month(month)\
    \ || !validate_year(year)){\n        return false; //invalid day\n    }\n    \n\
    \    return isValid;\n}", "{\n    int dayCount;\n    int monthCount;\n    int\
    \ yearCount;\n    int days;\n    int months;\n    int year;", "{\n    if(!isNotEmpty(date))\n\
    \        return false;\n    \n    int days = getDaysInMonth(month_to_int(date[0]));\n\
    \    \n    if(days < 1 || days > 31)\n        return false;\n    \n    int daysTo31\
    \ = 31;\n    int daysTo30 = 30;\n    int daysTo29 = 31;\n    \n    for(int i=1;\
    \ i < date.size(); i++)\n    {\n        if(month_to_int(date[i]) > 12)\n     \
    \   {\n            return false;\n        }\n        if(days > daysTo31)\n   \
    \     {\n            return false;\n        }\n        if(days > daysTo30)\n \
    \       {\n            return false;\n        }\n        if(days > daysTo29)\n\
    \        {\n            return false;\n        }\n    }\n    \n    return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI did some revisions so that, instead of validating\
    \ the date, it is now validating the date and month. Also instead of using an\
    \ `int` to represent a month, i used a `string` instead. I tested this program\
    \ on my machine and it works fine.\n<|/ c |>\n<| c |>\nThis code doesn't seem\
    \ to work when input string has more then 1 month or year eg `01-15-2020` returns\
    \ true.\n<|/ c |>\n<| c |>\nPlease read the comments in the code, i explained\
    \ what each function does there.\n<|/ c |>\n<| a tags=c++,string |>\n<code>",
  "{\n    int m = date.find_first_not_of(\"-/\");\n    int d = date.find_first_of(\"\
    -\");\n    int y = date.find_first_of(\"/\");\n    \n    if ((m==-1) || (d==-1)\
    \ || (y==-1))\n        return false;\n    else\n        if (date.size() < (m+3))\
    \ \n            return false;\n        else\n            if ((date.size() > ((m+3)+(d+1)))\
    \ || (date.size() > ((m+3)+(d+2)) || (date.size() > ((m+3)+(d+3))))) \n      \
    \          return false;\n            else\n                if ((date.size() >\
    \ ((m+3)+(d+2)+(y+1))) || (date.size() > ((m+3)+(d+2)+(y+2)) || (date.size() >\
    \ ((m+3)+(d+2)+(y+3))))) \n                    return false;\n               \
    \ else\n                    if ((date.size() > ((m+3)+(d+2)+(y+2)+(m+1))) || (date.size()\
    \ > ((m+3)+(d+2)+(y+2)+(m+2)) || (date.size() > ((m+3)+(d+2)+(y+2)+(m+3))))) \n\
    \                        return false;\n                    else\n           \
    \             if (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+1))) \n          \
    \                  return false;\n                        else\n             \
    \               if (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)) || (date.size()\
    \ > ((m+3)+(d+2)+(y+2)+(m+2)+(d+3))))) \n                                return\
    \ false;\n                            else\n                                if\
    \ (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)+(y+1))) \n                   \
    \                 return false;\n                                else\n      \
    \                              if (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)+(y+2))\
    \ || (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)+(y+3))))) \n              \
    \                          return false;\n                                   \
    \ else\n                                        if (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)+(y+2)+(m+1)))\
    \ \n                                            return false;\n              \
    \                          else\n                                            if\
    \ (date.size() > ((m+3)+(d+2)+(y+2)+(m+2)+(d+2)+(y+2)+(m+2)) || (date.size", "{\n\
    \    auto days_valid = date.size() != 0;\n    auto months_valid = (date.size()\
    \ == 10) ? !is_month(date.front(), date.back()) : true;\n    auto date_in_correct_format\
    \ = (date.size() == 10 && is_valid_date(date)) ? true : false;", "{\n    int days;\n\
    \    int months;\n    int years;\n    \n    days = std.atoi(date);\n    \n   \
    \ if(days > 31 && days < 1) \n        return false;\n    \n    months = std.atoi(date);\n\
    \    \n    if(months > 12 || months < 1)\n        return false;\n    \n    years\
    \ = std.atoi(date);\n    \n    if(years > 21 && years < 1) \n        return false;\n\
    \    \n    return true;\n}", "{\n    date_component = std.string.subarray(date,\
    \ 2, 5);\n    month = std.string.subarray(date, 2, 5);\n    day = std.string.subarray(date,\
    \ 1, 2);\n    year = std.string.subarray(date, 0, 4);", "{\n    if (date == \"\
    \") return false;\n    int day1 = get_day(date);\n    int month1 = get_month(date);\n\
    \    int year1 = get_year(date);", "{\n\tif(date == \"\")\n\t{\n\t\treturn false;\n\
    \t}\n\telse\n\t{\n\t\tconst auto year = std.atoi(date.substr(0, 4));\n\t\tconst\
    \ auto month = std.atoi(date.substr(5, 2));\n\t\tconst auto day = std.atoi(date.substr(8,\
    \ 2));\n\t\tconst auto date_str = std.string(month) + \"-\" + std.string(day)\
    \ + \"-\" + std.string(year);\n\t\tconst auto dd = std.chrono.parse_date(date_str);\n\
    \t\tconst auto date_days = std.chrono.date2td(dd);\n\t\tif(date_days == 1)\n\t\
    \t{\n\t\t\treturn true;\n\t\t}\n\t\telse if(date_days < 31&&date_days >= 30)\n\
    \t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if(date_days < 29)\n\t\t{\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}", "{\n   \
    \ // Write your code here\n    int day;\n    char month;\n    string daymonth;\n\
    \    int days;\n    int daymonths[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};", "{\n    vector<int> day_count = {31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n    vector<int> month_count = {1, 3, 5, 7, 8, 10, 12};\n \
    \   vector<int> year_month_count = {4, 6, 9, 11};\n    vector<int> fourth_year_count\
    \ = {0};\n    bool valid = false;\n    int temp;\n    int month = stoi(date.substr(0,\
    \ 2));\n    int day = stoi(date.substr(3, 2));\n    int year = stoi(date.substr(6,\
    \ 4));\n    int yearmonth = stoi(date.substr(10, 4));\n    int yearfour = stoi(date.substr(14,\
    \ 4));\n    \n    for (int i = 0; i < 4; i++) \n    {\n        if (i != 0 && i\
    \ == month)\n        {\n            temp += month_count[i] + day + (i < year_month_count[i]\
    \ ? 1 : 0);\n        }\n        else if (i != 0)\n        {\n            temp\
    \ += day_count[i];\n        }\n    }\n    valid = (temp <= (year + (yearfour ==\
    \ 0 || yearfour == 4)? 29 : 30)) && temp >= 1;\n    return valid;\n}\n</code>\n\
    <|/ a tags=algorithm,c++,date,validation,string |>\n<| a dscore=0 tags=algorithm,c++,date,validation,string\
    \ |>\nHere's my answer in python:\n<code>\ndef is_date(s):\n    if len(s) < 7:\n\
    \        return False\n    d = int(s[0:2])\n    m = int(s[3:5])\n    y = int(s[6:10])\n\
    \    if y < 1899 or y > 2000:\n        return False\n    if m < 1 or m > 12:\n\
    \        return False\n    if d < 1 or d > 31:\n        return False\n    if m\
    \ == 1:\n        if d > 31 or d < 0:\n            return False\n    else:\n  \
    \      if d > 30 or d < 0:\n            return False\n    return True\n</code>\n\
    <|/ a |>\n<| a tags=algorithm,c++,date,validation,string |>\n<code>\nfunction\
    \ checkdate($date){\n$checkdates = array(\"01-01-1900\",\"01-01-1910\",\"01-01-1920\"\
    ,\"01-01-1930\",\"01-01-1940\",\"01-01-1950\",\"01-01-1960\",\"01-01-1970\",\"\
    01-01-1980\",\"01-01-1981\",\"01-01-1982\",\"01-01-1983\",\"01-01-1984\",\"01-01-1985\"\
    ,\"01-01-1986\",\"01-01-1987\",\"01-01-1988\",\"01-01-1989\",\"01-01-1990\",\"\
    01-01-1991\",\"01-01-1992\",\"01-01-1993\",\"01-01-1994\",\"01-01-1995\",\"01-01-1996\"\
    ,\"01-01-1997\",\"01-01-1", "{\n    date += \",\";\n    int days = 0;\n    std.string\
    \ months[12];\n    std.string months_check[12];\n    string day_check;", "{\n\
    \    vector<int> months = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"\
    ,\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    vector<int>\
    \ days = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\n        \"12\"};\n\
    \    vector<int> months_days = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\",\n \
    \       \"12\"};\n    vector<int> days_months = {\"1\", \"4\", \"6\", \"9\", \"\
    11\", \"2\"};\n    string months[12];\n    string days[12];\n    int date_days[12];\n\
    \    int month;\n    int day;\n    int year;\n    int i = 0;\n    int j = 0;\n\
    \    char months_character = '\\0';\n    char days_character = '\\0';\n    char\
    \ months_characters[12];\n    char days_characters[12];", "{\n    if(date == \"\
    \")\n    {\n        return false;\n    }\n    int len = date.length();\n    if(len\
    \ < 3 || len > 12)\n    {\n        return false;\n    }\n    stringstream ss;\n\
    \    string months[12] = { \"January\", \"February\", \"March\", \"April\", \"\
    May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\" };\n    int days[12] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31 };\n    int month = 0;\n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(!isdigit(date[i]))\n        {\n            return false;\n       \
    \ }\n        else\n        {\n            ss.clear();\n            ss.str(date[i]);\n\
    \            ss >> month;\n            ss.clear();\n            ss.str(date[i]);\n\
    \            ss >> day;\n            if(month < 1 || month > 12)\n           \
    \ {\n                return false;\n            }\n            if(day < 1 || day\
    \ > days[month])\n            {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}", "{\n    char dateString[32];\n    std.conv.string(date,dateString,31);\n\
    \    if(!std.typecons.ischar(dateString))\n    {\n        return false;\n    }\n\
    \    char dayString[32];\n    int days;\n    std.conv.string(dateString[0],dayString,2);\n\
    \    days = std.string.trim(dayString);\n    if(days<0 || days>31)\n    {\n  \
    \      return false;\n    }\n    char monthString[32];\n    int month;\n    std.conv.string(dateString[1],monthString,2);\n\
    \    month = std.string.trim(monthString);\n    if(month<1 || month>12)\n    {\n\
    \        return false;\n    }\n    char yearString[32];\n    int year;\n    std.conv.string(dateString[2],yearString,4);\n\
    \    year = std.string.trim(yearString);\n    if(year>0)\n    {\n        if(year<100\
    \ || year>3000)\n        {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "{\n    int day;\n    int month;\n    int year;", "{\n    size_t\
    \ pos = 0;\n    string months[12] = {\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\"\
    ,\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"};\n    size_t days_1\
    \ = 0, days_2 = 0, days_3 = 0, days_4 = 0, days_5 = 0, days_6 = 0, days_7 = 0,\
    \ days_8 = 0, days_9 = 0, days_10 = 0, days_11 = 0, days_12 = 0;\n    size_t day_of_month\
    \ = 0;\n    size_t days_in_month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n    size_t month = 0;", "{\n\tstring pattern = \"^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$\";\n\tregex date_regex = regex(pattern);",
  "{\n    if(!isEmpty(date))\n    {\n        if(to<int32_t>(days)<=1 & to<int32_t>(days)>=31\
    \ & to<int32_t>(months)<=1)\n        {\n            if(to<int32_t>(days)<=1 &\
    \ to<int32_t>(days)>=30 & to<int32_t>(months)<=1)\n            {\n           \
    \     if(to<int32_t>(days)<=1 & to<int32_t>(days)>=29 & to<int32_t>(months)<=1)\n\
    \                {\n                    return true;\n                }\n    \
    \            else\n                {\n                    return false;\n    \
    \            }\n            }\n            else\n            {\n             \
    \   return false;\n            }\n        }\n        else\n        {\n       \
    \     return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nHey thanks for your reply. I want to know\
    \ how do you write this code please? I'm new to coding.\n<|/ c |>\n<| c |>\nI\
    \ edited my answer, but you have to write your code yourself, just copy paste\
    \ my code and then modify it by your own.\n<|/ c |>\n<| c |>\nThanks for your\
    \ help again. I will try your method.\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ show you how to get this done with std lib.\n<|/ c |>\n<| c |>\nThanks for your\
    \ help. I will try your method later on.\n<|/ c |>\n<| a dscore=0 tags=c++ |>\n\
    I wrote some code that is simple and should help you\n<code>\n#include<iostream>\n\
    #include<stdlib.h>\n#include<ctime>\n#include<cstdio>\nusing namespace std;",
  "{\n    if(!date.empty()) \n    {\n        if(date.size() != 10) return false; \n\
    \        string months[3] = {1,2,3,4,5,6,7,8,9,10}; //array of month names\n \
    \       string days[3] = {1,2,3,4,5,6,7,8,9,10};\n        vector<string> date_split(split(date,'-'));\n\
    \        if(date_split.size() != 3) \n        {\n            return false;\n \
    \       }\n        date_t date_days = date_parse(date_split[0],date_split[1],date_split[2]);\n\
    \        if(date_days == (date_t)-1) return false;\n        \n        for(int\
    \ i = 0; i<3; i++) \n        {\n            if(months[i].empty()) \n         \
    \   {\n                return false;\n            }\n            if(days[i].empty())\n\
    \            {\n                return false;\n            }\n            int\
    \ days_month=days[i].size();\n            if(days_month<1 || days_month>31)\n\
    \            {\n                return false;\n            }\n            if(days[i].size()>30)\n\
    \            {\n                return false;\n            }\n            int\
    \ month_day=months[i].size(); //get the number of days in a month\n          \
    \  if(month_day<1 || month_day>12)\n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}", "{\n    return !(date.isEmpty()\
    \ || \n            date.find(\"01\") != string::npos || \n            date.find(\"\
    03\") != string::npos || \n            date.find(\"05\") != string::npos || \n\
    \            date.find(\"07\") != string::npos || \n            date.find(\"08\"\
    ) != string::npos || \n            date.find(\"10\") != string::npos || \n   \
    \         date.find(\"12\") != string::npos || \n            date.find(\"04\"\
    ) != string::npos || \n            date.find(\"06\") != string::npos || \n   \
    \         date.find(\"09\") != string::npos || \n            date.find(\"11\"\
    ) != string::npos || \n            date.find(\"02\") != string::npos);", "{\n\t\
    if (date.length()==0) \n\t{\n\t\tcout << \"The date string is empty.\";\n\t\t\
    return false;\n\t}\n\t\n\tint months[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \tint days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\tint year = 0;\n\t\
    int dayofmonth = 0;\n\t\n\tint monthnum = std.atoi(date.substr(0,2));\n\t\n\t\
    if (monthnum<1 || monthnum>12)\n\t{\n\t\tcout << \"The month number should be\
    \ between 1 and 12.\";\n\t\treturn false;\n\t}\n\t\n\tint dayofyear = std.atoi(date.substr(2,2));\n\
    \t\n\tif (dayofyear<1 || dayofyear>365)\n\t{\n\t\tcout << \"The date should be\
    \ in the format: mm-dd-yyyy.\";\n\t\treturn false;\n\t}\n\t\n\tstring monthstr;\n\
    \t\n\tif (monthnum == 2)\n\t{\n\t\tmonthstr = date.substr(3,3);\n\t\tif (monthstr==\"\
    04\" || monthstr==\"06\" || monthstr==\"09\" || monthstr==\"11\" || monthstr==\"\
    04\" || monthstr==\"06\" || monthstr==\"09\" || monthstr==\"11\")\n\t\t{\n\t\t\
    \tdays[2] = 29;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"The date string should\
    \ have either 04, 06, 09, 11, 04, 06, 09, 11, or 12.\";\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\telse\n\t{\n\t\tmonthstr = date.substr(2,2);\n\t\tdays[monthnum-1]\
    \ = std.atoi(monthstr.substr(0,2));\n\t}\n\t\n\tif (dayofmonth < 1 || dayofmonth\
    \ > days[monthnum-1])\n\t{\n\t\tcout << \"The date string should have between\
    \ 1 and \" << days[monthnum-1];\n\t\treturn false;\n\t}\n\t\n\tint year = std.atoi(date.substr(4,4));\n\
    \t\n\tif (year < 2000)\n\t{\n\t\tcout << \"The date should be in the format: mm-dd-yyyy.\"\
    ;\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}", "{\n    if((date.length() ==\
    \ 0) || (date.find_first_not_of(\" \\t\",0) == -1))\n        return false;\n \
    \   int date_day = std.atoi(date.substr(0,2));\n    int date_month = std.atoi(date.substr(2,2));\n\
    \    int date_year = std.atoi(date.substr(4,4));\n    int days_in_month = std.monthdays[std.months[date_month]];\n\
    \    if(date_day < 1 || (date_day > days_in_month) || (date_month < 1 || (date_month\
    \ > 12)))\n        return false;\n    if(date_year < 1850 || date_year > 2100)\n\
    \        return false;\n    return true;\n}", "{\n    if(date == \"\" || date.size()\
    \ == 0) {\n        cout << \"invalid date\\n\";\n        return false;\n    }\n\
    \    int dateParts[3] = { 0 };\n    int months[3] = {0 };\n    int days[3] = {0\
    \ };", "{\n    int day,month,year;\n    char month_string[10];\n    sscanf(date,\"\
    %d-%d-%d\",&day,&month,&year);\n    switch(month)\n    {\n        case 1: if(day<=1\
    \ || day>31) return false; break;\n        case 3: if(day<=1 || day>30) return\
    \ false; break;\n        case 5: if(day<=1 || day>29) return false; break;\n \
    \       case 7: if(day<=1 || day>28) return false; break;\n        case 8: if(day<=1\
    \ || day>31) return false; break;\n        case 10: if(day<=1 || day>30) return\
    \ false; break;\n        case 12: if(day<=1 || day>29) return false; break;\n\
    \        default: return false;\n    }\n    sprintf(month_string,\"%c\",month);\n\
    \    if(strlen(month_string)<1 || strlen(month_string)>12) return false;\n   \
    \ if(!is_valid_date(day,month_string,year)) return false;\n    return true;\n\
    }\n</code>\n<|/ a tags=c++,c |>\n<| c |>\nIf anyone is confused about the purpose\
    \ of function valid_date() then refer to this comment on my answer: https://stackoverflow.com/a/59373312/15358262\n\
    <|/ c |>\n<| a |>\nHere's a solution in C. \n<code>\n#include <stdio.h>\n#include\
    \ <stdlib.h>\n#include <stdbool.h>", "{\n    Date date;\n    \n    string s =\
    \ date + \" 00:00:00\";\n    \n    int d1 = date_to_day(s);\n    int d2 = date_to_day(date);\n\
    \    \n    if(d1 <= 1 || d1 > 31) {\n        return false;\n    }\n    \n    if(d2\
    \ <= 1 || d2 > 30) {\n        return false;\n    }\n    \n    int d3 = date_to_day(date\
    \ + \" 00:00:00\");\n    \n    if(d3 <= 1 || d3 > 29) {\n        return false;\n\
    \    }\n    \n    int d4 = date_to_day(date + \" 23:59:59\");\n    \n    if(d4\
    \ <= 1 || d4 > 29) {\n        return false;\n    }\n    \n    return true;\n}",
  "{\n    if(date == \"\")\n        return false;", "{\n    bool validated = false;\n\
    \    try\n    {\n        //get the number of days from month string\n        int\
    \ days = 31;\n        switch (date[1])\n        {\n            case '1':\n   \
    \             days = 31;\n                break;\n            case '3':\n    \
    \            days = 30;\n                break;\n            case '5':\n     \
    \           days = 29;\n                break;\n            case '7':\n      \
    \          days = 28;\n                break;\n            case '8':\n       \
    \         days = 31;\n                break;\n            case '10':\n       \
    \         days = 30;\n                break;\n            case '12':\n       \
    \         days = 31;\n                break;\n            case '4':\n        \
    \        days = 30;\n                break;\n            case '6':\n         \
    \       days = 31;\n                break;\n            case '9':\n          \
    \      days = 30;\n                break;\n            case '11':\n          \
    \      days = 31;\n                break;\n            case '2':\n           \
    \     days = 28;\n                break;\n        }", "{\n    string::size_type\
    \ pos = date.find_first_of(\"-\");\n    \n    if (pos == date.npos)\n        return\
    \ false;\n    \n    pos = date.find_first_of(\"/\");", "{\n    if (date.length()==0)\n\
    \    {\n        return false;\n    }", "{\n    stringstream ss(date);\n    string\
    \ input;\n    \n    getline(ss, input, '-');\n    unsigned month;\n    unsigned\
    \ day;\n    unsigned year;\n    \n    ss >> month >> day >> year;\n    \n    bool\
    \ valid = true;\n    if ( month < 1 || month > 12 ) valid = false;\n    if ( day\
    \ < 1 || day > 31 ) valid = false;\n    if ( year < 0 || year > 9999 ) valid =\
    \ false;\n    \n    if ( !valid ) cout << \"Invalid Date\" << endl;\n    \n  \
    \  return valid;\n}\n</code>\n<|/ a dscore=0 tags=c++,datetime |>\n<| a tags=c++,datetime\
    \ |>\nHere is a version using std::chrono::parse_date with a std::tm and a std::istringstream\
    \ to parse the date string.\nThe first thing that we need to do is to convert\
    \ our \"mm-dd-yyyy\" date into a std::tm with the help of std::tm from the header\
    \ <ctime> and from the header <chrono>.  Then we can use std::chrono::parse_date\
    \ to parse it into a std::chrono::time_point.\nTo get the year from the std::tm\
    \ we need to use std::time_t which is an alias for std::chrono::time_point and\
    \ the std::tm object will tell us what time it is but std::chrono::time_point\
    \ will not let us extract the year.  So, we need to use std::time_t to extract\
    \ it from the std::tm object.\nWe need the following headers:\n<code>\n#include\
    \ <iostream>\n#include <sstream>\n#include <chrono>\n#include <ctime>\n</code>\n\
    Now we will create a function which takes our date string and parses it.  If the\
    \ parsing is successful it returns the std::chrono::time_point or else it returns\
    \ false.\n<code>\nstd::chrono::time_point getTimePoint(const std::string& dateStr)\n\
    {\n    std::tm tm;\n    std::istringstream ss{dateStr};", "{\n    \n    if (date\
    \ == \"\") \n    {\n        return false;\n    }", "{\n    \n    \n    \n    \n\
    \    \n    // Check whether the date given is not empty\n    if (!(date != \"\"\
    )) \n    {\n        return false;\n    }\n    \n    // Checks for wrong date format\n\
    \    struct tm dateInfo;\n    string wrongFormat = \"Invalid Date Format\";\n\
    \    \n    // convert string date into struct tm \n    strptime(date.c_str(),\"\
    %d-%m-%Y\",&dateInfo);\n    \n    \n    \n    // Check for wrong number of days\
    \ in month\n    int numberOfDays = dateInfo.tm_mday;\n    if (numberOfDays < 1\
    \ || numberOfDays > 31) \n    {\n        return false;\n    }\n    \n    // Check\
    \ for wrong number of days in month\n    int numberOfDays = dateInfo.tm_mon;\n\
    \    if (numberOfDays < 1 || numberOfDays > 12) \n    {\n        return false;\n\
    \    }\n    \n    // Check for wrong number of days in month\n    int numberOfDays\
    \ = dateInfo.tm_wday;\n    if (numberOfDays < 1 || numberOfDays > 30) \n    {\n\
    \        return false;\n    }\n    \n    // Check for wrong number of days in\
    \ month\n    int numberOfDays = dateInfo.tm_yday;\n    if (numberOfDays < 1 ||\
    \ numberOfDays > 29) \n    {\n        return false;\n    }\n    \n    \n    \n\
    \    \n    return true;\n}", "{\n    if(!is_empty(date))\n    {\n        int day\
    \ = std.string.toint(date[4]);\n        int month = std.string.toint(date[6]);\n\
    \        int year = std.string.toint(date[8]);\n        if(day < 1 || day > 31\
    \ || month < 1 || month > 12 || month == 2)\n        {\n            return false;\n\
    \        }\n        if(month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12)\n        {\n            if(day < 1\
    \ || day > 30)\n            {\n                return false;\n            }\n\
    \        }\n        else\n        {\n            if(day < 1 || day > 29)\n   \
    \         {\n                return false;\n            }\n        }\n       \
    \ if(year < 1 || year > 3000)\n        {\n            return false;\n        }\n\
    \        return true;\n    }\n    else\n    {\n        return false;\n    }\n\
    }\n</code>\n<|/ a |>\n<| a tags=python |>\nIn your else statement, if the month\
    \ is not 1, 2, 3, 4, 5, 6, 7, 8, 10, or 12, then you return false. But you also\
    \ have to return false if the day is not between 1 and 30.\n<code>\ndef valid_date(date):\n\
    \    if not is_empty(date):\n        day_of_week = date.split()[0]\n        month,\
    \ day = date.split()[1].split('-')\n        year = int(date.split()[2])\n    \
    \    if day_of_week not in [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\
    , \"Sun\"]:\n            return False\n        if int(month) < 1 or int(month)\
    \ > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n\
    \            return False\n        if int(month) == 2 and int(day) < 1:\n    \
    \        return False\n        if int(month) == 2 and int(day) > 30:\n       \
    \     return False\n        if int(month) == 4 and int(day) < 1:\n           \
    \ return False\n        if int(month) == 4 and int(day) > 29:\n            return\
    \ False\n        if int(month) == 6 and int(day) < 1:\n            return False\n\
    \        if int(month) == 6 and int(day) > 29:\n            return False\n   \
    \     if int(month) == 9:\n            if int(day) < 1 or int(day) > 30:\n   \
    \             return False\n        if int(month) == 10:\n            if int(day)\
    \ < 1 or int(day) > 31:\n                return False\n        if int(month) ==\
    \ 11:\n            if int(day) < 1 or int(day) > 30:\n                return False\n\
    \        return True\n    else:\n        return False\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI have also written an algorithm to validate a given date in python\
    \ [here](https://stackoverflow.com/a/64327744/8156343)\n<|/ c |>\n<| a tags=python\
    \ dscore=0 |>\nThe code below will validate the date entered in a user-friendly\
    \ way (also validates leap years and non-", "{\n    auto result = true;\n    auto\
    \ [day,month,year] = string::split_on_chars(date,'-');\n    \n    if(month==\"\
    01\"||month==\"03\"||month==\"05\"||month==\"07\"||month==\"08\"||month==\"10\"\
    ||month==\"12\")\n    {\n        if(day<=1||day>31)\n        {\n            result\
    \ = false;\n        }\n    }\n    else if(month==\"04\"||month==\"06\"||month==\"\
    09\"||month==\"11\")\n    {\n        if(day<=1||day>30)\n        {\n         \
    \   result = false;\n        }\n    }\n    else if(month==\"02\")\n    {\n   \
    \     if(day<=1||day>29)\n        {\n            result = false;\n        }\n\
    \    }\n    \n    if(!result)\n    {\n        return false;\n    }\n    \n   \
    \ year = string::to_string(year,'-');\n    auto day = string::to_string(day,'-');\n\
    \    \n    return ((string::len(date)>0)&&(day == year));\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't do quite what OP asked for. He asked for something that\
    \ works \"between 1 and 31\" and then \"between 1 and 30\". Your code returns\
    \ \"false\" for that.\n<|/ c |>\n<| c |>\nThe OP mentioned `date string is not\
    \ empty`\n<|/ c |>\n<| c |>\nAnd he also mentioned that he needs to check date\
    \ in **MM-DD-YYYY** format which is invalid if month is **01**,**02** or **03**.\n\
    <|/ c |>\n<| c |>\n`04-01-2040` and `06-04-2020` would be valid dates in that\
    \ format right?\n<|/ c |>\n<| c |>\nNope, those are valid dates. `04-01-2040`\
    \ would be invalid dates in that format because `04-01-2040` doesn't contain `-`\
    \ character. So `04-01-2040` would be `04-01-2020` which is an invalid date.\n\
    <|/ c |>\n<| a |>\nTo check date between 1 and 31 you can use regex:\n<code>\n\
    let isDateValid = (date) => {\n    const regex = /^(0?[1-9]|[12][0-9]|3[01])\\\
    /(0?[1-9]|1[012])\\/(19[0-9]{2})$/;\n    return regex.test(date);\n}\n</code>\n\
    <|/ a dscore=1 tags=c++ |>\n<| a dscore=1 |>\nWe can try using regex to validate\
    \ a date:", "{\n    \n    stringstream ss(date);\n    int day;\n    int month;\n\
    \    int year;\n    char days[2];\n    char months[12];\n    string temp;\n  \
    \  ss >> day >> temp >> days[0] >> month >> temp >> months[0] >> year >> temp\
    \ >> months[1] >> year;", "{\n    if(date==\"\")\n        return false;\n    int\
    \ day=1;\n    int month=1;\n    for(int i=0; i<date.size(); ++i)\n    {\n    \
    \    if(date[i]>='0' && date[i]<='9')\n        {\n            day+=date[i]-'0';\n\
    \        }\n        else if(date[i]>='a' && date[i]<='z')\n        {\n       \
    \     month+=date[i]-'a'+10;\n        }\n        else\n        {\n           \
    \ return false;\n        }\n    }\n    if(day<1 || day>31)\n        return false;\n\
    \    if(month<1 || month>12)\n        return false;\n    if(day<1 || day>30)\n\
    \        return false;\n    if(month<1 || month>12)\n        return false;\n \
    \   if(day<1 || day>29)\n        return false;\n    return true;\n}\n/*\n Write\
    \ a program to display the date on the console with days in each month.\n \n You\
    \ have to write a program to display the date on the console with days in each\
    \ month.\n \n You have to write a program to display the date on the console with\
    \ days in each month.\n \n Input date format should be in mm-dd-yyyy format.\n\
    \ \n Output should be in the following format:\n \n Month-Day-Year\n \n Here are\
    \ valid date formats:\n \n    03-11-2000\n    15-01-2012\n    04-0-2040\n    06-04-2020\n\
    \    06/04/2020\n \n \n \n Output for valid date formats:\n \n    Month-Day-Year\n\
    \    \n    \n    \n    \n \n \n Output for invalid date formats:\n \n    Invalid\
    \ date format\n    \n    \n    \n    \n*/", "{\n    //validate the date\n    int\
    \ day_of_month=date.length()-2;\n    bool is_valid_month=true;\n    bool is_valid_day=true;\n\
    \    bool is_valid_year=true;\n    for(int i=0;i<=day_of_month;i++)\n    {\n \
    \       char c=date[i];\n        if((c<'0')||(c>'9'))\n        {\n           \
    \ is_valid_month=false;\n        }\n        else if((c<='0')&&(c>'9')&&(c!='-'))\n\
    \        {\n            is_valid_day=false;\n        }\n        else\n       \
    \ {\n            is_valid_year=false;\n        }\n    }\n    if(is_valid_month&&is_valid_day&&is_valid_year)\n\
    \        return true;\n    else\n        return false;\n}", "{\n    if(date.empty())\n\
    \    {\n        return false;\n    }\n    int months[12] = { 0,1,2,3,4,5,6,7,8,9,10,11,12};\n\
    \    int days[12] = { 0,31,30,31,30,31,30,31,30,31,30,31 };\n    int years[4]\
    \ = { 2000,2001,2002,2003 };\n    string tmp;\n    int day = atoi(date.substr(0,2));\n\
    \    int month = atoi(date.substr(3,2));\n    int year = atoi(date.substr(6,4));",
  "{\n    if (!is_empty(date))\n    {\n        auto day = std.atoi(date.substr(0,\
    \ 2));\n        auto month = std.atoi(date.substr(2, 2));\n        auto year =\
    \ std.atoi(date.substr(4, 4));", "{\n    \n    /*\n    Write code here\n    */\n\
    \    if(date.length() <1)\n    {\n        return false;\n    }\n    \n    auto\
    \ dateParts = dateToParts(date);\n    \n    if(dateParts.getMonth() > 12 || dateParts.getYear()\
    \ > 2030 || dateParts.getMonth() < 1 || dateParts.getMonth() > 12)\n    {\n  \
    \      return false;\n    }\n    \n    if(dateParts.getDay() < 1 || dateParts.getDay()\
    \ > 30)\n    {\n        return false;\n    }\n    \n    return true;\n}\n</code>\n\
    <|/ a tags=c++,algorithm,datetime dscore=1 |>\n<| a tags=c++,algorithm,datetime\
    \ |>\n<code>\nstruct date\n{\n    int m_day, m_month, m_year;\n};\nstruct date2\
    \ \n{\n    int m_day, m_month, m_year;\n};", "{\n    if(!is_empty(date))\n   \
    \ {\n        int days_in_year = 365;\n        int month_days[12] = { 0,31,28,31,30,31,30,31,31,30,31,30,31\
    \ };", "{\n    unsigned short int month_days[12] = {0,31,28,31,30,31,30,31,30,31,30,31};\n\
    \    int dateInt[11] = {0,0,0,1,1,1,4,4,4,6,6};\n    int days[12];\n    int months[12]\
    \ = {0,31,28,31,30,31,30,31,30,31,30,31};\n    int year = -1;\n    \n    int month\
    \ = -1;\n    int day = -1;\n    for(int i = 0; i < date.length(); i++)\n    {\n\
    \        if(date[i] == '-')\n        {\n            year = date[i + 1];\n    \
    \        i = i + 2;\n        }\n        else if(date[i] == '/')\n        {\n \
    \           month = date[i + 1] - '0';\n            day = date[i + 2];\n     \
    \       i = i + 3;\n        }\n    }\n    \n    if(date == \"\" || date == \"\
    -\")\n        return false;", "{\n    \n    string pattern = \"^[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]$\"\
    ;\n    size_t pos = 0;\n    size_t pos2;\n    size_t pos3;\n    int day1, day2,\
    \ day3, month1, month2, month3, year1, year2;\n    string::size_type size1;\n\
    \    string::size_type size2;\n    string::size_type size3;\n    char temp;\n\
    \    string date2;", "{\n    if(!string.IsEmpty(date))\n    {\n        try\n \
    \       {\n            DateTime(date);\n        }\n        catch(Exception e)\n\
    \        {\n            return false;\n        }\n    }\n    else return false;\n\
    \    try\n    {\n        int year = int(date[3]);\n        int month = int(date[4]);\n\
    \        int day = int(date[5]);\n    }\n    catch(Exception e)\n    {\n     \
    \   return false;\n    }\n    if(month < 1 || month > 12)\n    {\n        return\
    \ false;\n    }\n    if(day < 1 || day > 31)\n    {\n        return false;\n \
    \   }\n    if(day > 30)\n    {\n        return false;\n    }\n    return true;\n\
    }", "{\n    std.typecons.Date_t d = std.typecons.Date_t.fromStringSep(date,\"\
    -\",std.typecons.DateFormat::TimeFormat(\"mm-dd-yyyy\"));\n    \n    \n    bool\
    \ r1 = (date.length() > 0);\n    bool r2 = (d.days()>1 && d.days() <= 31);\n \
    \   bool r3 = (d.months()>1 && d.months() <= 12);\n    bool r4 = (d.months()>2\
    \ && d.months() <= 2);\n    \n    return (r1 && r2 && r3 && r4);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the answer to the question. Also, the\
    \ code is not C or C++.\n<|/ c |>\n<| c |>\nPlease take some time and describe\
    \ how this code actually works.\n<|/ c |>\n<| a tags=c |>\nThis is a good example\
    \ of how to work with C++ classes and templates:\n<code>\n#include <cstdio>\n\
    #include <string>\n#include <vector>\n#include <cassert>", "{\n    int day,month,year;\n\
    \    string s1,s2,s3;\n    int days1,days2,days3;\n    bool b1 = true,b2 = true,b3\
    \ = true;", "{\n    if(date.length()==0 || date.length()>31 || date.length()<7\
    \ || date.length()>31)\n        return false;\n    else if(date.length()==7 &&\
    \ date.substr(0,2)==\"06\" || date.substr(0,2)==\"04\")\n        return false;\n\
    \    else if(date.substr(0,2)==\"15\" || date.substr(0,2)==\"14\")\n        return\
    \ false;\n    else if(date.substr(0,4)==\"04\" || date.substr(0,4)==\"06\" ||\
    \ date.substr(0,4)==\"09\" || date.substr(0,4)==\"11\")\n        return false;\n\
    \    else if(date.substr(0,2)==\"02\")\n        return false;\n    else if(date.substr(0,3)==\"\
    03\")\n        return false;\n    else if(date.substr(0,3)==\"15\" || date.substr(0,3)==\"\
    14\")\n        return false;\n    else if(date.substr(0,3)==\"01\" || date.substr(0,3)==\"\
    03\" || date.substr(0,3)==\"05\" || date.substr(0,3)==\"07\" || date.substr(0,3)==\"\
    08\" || date.substr(0,3)==\"10\" || date.substr(0,3)==\"12\")\n        return\
    \ false;\n    else if(date.substr(0,2)==\"02\" || date.substr(0,2)==\"04\" ||\
    \ date.substr(0,2)==\"06\" || date.substr(0,2)==\"09\" || date.substr(0,2)==\"\
    11\" || date.substr(0,2)==\"12\")\n        return false;\n    else if(date.substr(0,3)==\"\
    04\" || date.substr(0,3)==\"06\" || date.substr(0,3)==\"09\" || date.substr(0,3)==\"\
    11\")\n        return false;\n    else if(date.substr(0,1)==\"-\")\n        return\
    \ false;\n    else\n        return true;\n}\n</code>\n<|/ a |>\n<| a tags=c++\
    \ |>\nI wrote a regex to validate a date string in C++. It's really messy but\
    \ I'm a little newbie with regex. Maybe it helps:\n<code>", "{\n    if (date.empty())\n\
    \    {\n        return false;\n    }\n    int days = 0;\n    for (int i=1; i<13;\
    \ i++)\n    {\n        days += (date.substr(0, 2).to_i()*31 - i).to_int();\n \
    \   }\n    if (days < 1 || days > 31)\n    {\n        return false;\n    }\n \
    \   \n    for (int i=4; i<13; i++)\n    {\n        days += (date.substr(0, 2).to_i()*30-i).to_int();\n\
    \    }\n    if (days < 1 || days > 30)\n    {\n        return false;\n    }",
  "{\n    int dd,mm,yyyy,monthDay;\n    string year = \"\";\n    bool valid = false;\n\
    \    int days[] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };\n    int months[]\
    \ = { 0,1,2,3,4,5,6,7,8,9,10,11 };\n    string day = \"\";\n    int month;\n \
    \   bool leapMonth(string month)\n    {\n        string monthName = month;\n \
    \       if (monthName.compare(\"February\") == 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    \n    \n    for(; date.length()>0;\
    \ date=date.erase());\n    for(; date.length()>0; date=date.erase());\n    for(;\
    \ date.length()>0; date=date.erase());\n    \n    string dateArray = date;\n \
    \   string monthName = \"\";\n    for(int i=0; i<dateArray.length(); i++)\n  \
    \  {\n        if(dateArray[i] == '-')\n        {\n            monthName = dateArray.substr(i).substr(0,2);\n\
    \            break;\n        }\n        else if(dateArray[i] == '/')\n       \
    \ {\n            monthName = dateArray.substr(i).substr(0,2);\n            break;\n\
    \        }\n    }\n    \n    for(month = 0; month < 12; month++)\n    {\n    \
    \    if(months[month] == monthName)\n        {\n            valid = true;\n  \
    \          break;\n        }\n    }\n    if(!valid)\n    {\n        return false;\n\
    \    }\n    for(day = 0; day < months[month]; day++)\n    {\n        if(months[month]\
    \ == 2 && day > 30)\n        {\n            return false;\n        }\n       \
    \ if(months[month] == 3 && day > 30)\n        {\n            return false;\n \
    \       }\n        if(months[month] == 4 && day > 30)\n        {\n           \
    \ return false;\n        }\n        if(months[month] == 5 && day > 30)\n     \
    \   {\n            return false;\n        }\n        if(months[month] == 6 &&\
    \ day > 30)\n        {\n            return false;\n        }\n        if(months[month]\
    \ == 7 && day > 30)\n        {\n            return false;\n        }\n       \
    \ if(months[month] == 8 && day > 30)\n        {\n            return false;\n \
    \       }\n        if(months[month] == 9 && day > 30)\n        {\n           \
    \ return false;\n        }\n        if(months[month] == 10 && day > 30)\n    \
    \    {\n            return false;\n        }\n        if(months[month] == 11 &&\
    \ day > 30)\n        {\n            return false;\n        }\n    }\n    for(month\
    \ = 1; month < 12; month++)\n    {\n        if(months[month] == monthName)\n \
    \       {\n            valid = true;\n            break;\n        }\n    }\n \
    \   if(!valid)\n    {\n        return false;\n    }", "{\n    //Write your code\
    \ here\n    size_t daysInMonth[13] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };\n\
    \    size_t daysInYear[13] = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };\n    string\
    \ month = date.substr(1,2);\n    string day = date.substr(3,2);\n    string year\
    \ = date.substr(6,4);\n    size_t yearNum = stoi(year);", "{\n    if (date ==\
    \ \"\") return false;\n    \n    int day_count = 1;\n    int month = stoi(date.substr(0,2));\n\
    \    int day = stoi(date.substr(2,2));", "{\n    char temp[5];\n    temp[0]='0';\n\
    \    temp[1]='\\0';\n    int days_count;\n    int months_count;\n    int years_count;",
  "{\n    if(date == \"\")\n    {\n        return false;\n    }", "{\n    if(!!date.empty())\n\
    \    {\n        auto day = stoi(date.substr(0, 2));\n        auto month = stoi(date.substr(2,\
    \ 2));\n        auto year = stoi(date.substr(4, 4));\n        if(day<1 || day>31\
    \ || month<1 || month>12)\n        {\n            return false;\n        }\n \
    \       if(day<1 || day>30)\n        {\n            auto temp = month;\n     \
    \       month += 2;\n            if(month>12)\n            {\n               \
    \ month = 1;\n                year += 1;\n            }\n            while(temp>12)\n\
    \            {\n                month += 1;\n                if(month>12)\n  \
    \              {\n                    month = 1;\n                    year +=\
    \ 1;\n                }\n                temp -= 12;\n            }\n        }\n\
    \        if(year<1 || year>2020)\n        {\n            return false;\n     \
    \   }\n        return true;\n    }\n    return false;\n}", "{\n    // TODO: your\
    \ code here\n    \n    return date != \"\" && \n        ((date.size() > 1) &&\n\
    \         ((date.size() >= 31) && (date.size() <= 30)) &&\n         ((date.size()\
    \ >= 29) && (date.size() <= 29)) &&\n         ((date.size() >= 12) && (date.size()\
    \ <= 12)) && \n         ((date.size() > 2) && (date.size() <= 21)));\n}", "{\n\
    \    int days;\n    int months;\n    char separator;\n    \n    separator = date[0][0];\n\
    \    \n    stringstream ss(date);\n    \n    if (ss.peek() == '\\0' || ss.peek()\
    \ != '-') \n    {\n        return false;\n    }", "{\n    try\n    {\n       \
    \ int day = to_integer(date, \"dd\");\n        int month = to_integer(date, \"\
    MM\");\n        int year = to_integer(date, \"yyyy\");", "{\n    auto dateSplit\
    \ = date.split('-');\n    \n    if(dateSplit.size() != 3)\n        return false;\n\
    \    \n    int32_t year = int(dateSplit[2]);\n    \n    if(year < 1000 || year\
    \ > 2100)\n        return false;\n    \n    int32_t month = int(dateSplit[0]);\n\
    \    \n    if(month < 1 || month > 12)\n        return false;\n    \n    int32_t\
    \ day = int(dateSplit[1]);\n    \n    if(day < 1 || day > 31)\n        return\
    \ false;\n    \n    return true;\n}", "{\n    if (date.length() == 0) {\n    \
    \    return false;\n    }\n    int m, d, y = 0;\n    char c = date[0];\n    if\
    \ (c == '-') {\n        c = '0';\n    }\n    else {\n        c = toupper(c);\n\
    \    }\n    int count = 0;\n    while (c != '-') {\n        if (c == '0') {\n\
    \            c = '1';\n        }\n        else {\n            c = toupper(c);\n\
    \        }\n        count++;\n    }\n    if (c == '-') {\n        c = toupper(c);\n\
    \        count--;\n    }\n    count++;\n    if (count < 2) {\n        return false;\n\
    \    }\n    m = 0;\n    while (count > 0) {\n        c = toupper(c);\n       \
    \ m = (m * 10) + (c - '0');\n        count--;\n    }\n    count--;\n    if (count\
    \ > 2) {\n        return false;\n    }\n    while (count > 0) {\n        c = toupper(c);\n\
    \        d = (d*10) + c - '0';\n        count--;\n    }\n    count--;\n    if\
    \ (count > 2) {\n        return false;\n    }\n    count++;\n    while (count\
    \ > 0) {\n        c = toupper(c);\n        y = y + d;\n        d = d - 1;\n  \
    \      count--;\n    }\n    count--;\n    if (count > 2) {\n        return false;\n\
    \    }\n    if (m < 1 || m < 3 || m < 5 || m < 7 || m < 9 || m < 11 || m < 13\
    \ || m < 15 || m < 17 || m < 19 || m < 21 || m < 23 || m < 25 || m < 27 || m <\
    \ 29) {\n        return false;\n    }\n    if (d < 1 || d < 31 && d > 30) {\n\
    \        return false;\n    }\n    if (y < 1 || y > 12) {\n        return false;\n\
    \    }\n    if (m == 2) {\n        if (d < 1 || d > 29) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a |>\nHere's another solution which I believe is simpler and easier to\
    \ read:\n<code>\n#include <iostream>\n#include <vector>", "{\n    \n    if(date.empty())\
    \ return false;\n    \n    int days;\n    int months;", "{\n    bool isValid =\
    \ false;\n    stringstream ss(date);\n    string month;\n    int day, year;\n\
    \    \n    if(!getline(ss, month, \" \") || !getline(ss, day, \" \") || !getline(ss,\
    \ year, \" \"))\n    {\n        return isValid;\n    }", "{\n   if(!date.empty()\
    \ && date.size()>8 && date.size()<15 && \n       (date.size()>9 && date.size()<17\
    \ || date.size()>10 && date.size()<19) && \n       (date.size()>11 && date.size()<21)\
    \ && \n       (date.size()>12 && date.size()<23)) \n   {\n      size_t position=date.find(\"\
    -\");\n      if(position!=string::npos&&date.substr(position,2)==\"-\"&&\n   \
    \       date.length()>4&&\n          string::npos != (position+4).find(\"-\")&&\n\
    \          string::npos != (position+4).find(\".\")&&\n          date[position+1]=='1'&&\n\
    \          date[position+2]=='3'&&\n          date[position+3]=='5'&&\n      \
    \    date[position+4]=='7'&&\n          date[position+5]=='8'&&\n          date[position+6]=='10'&&\n\
    \          date[position+7]=='12')\n         {\n           return true;\n    \
    \     }\n   }\n   return false;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>", "{\n    bool result = true;\n    if(date.empty())\n\
    \    {\n        result = false;\n    }\n    else\n    {\n        size_t day =\
    \ date.find_first_of(\"-\");\n        if(day == string::npos)\n        {\n   \
    \         result = false;\n        }\n        else\n        {\n            string\
    \ month(date.substr(0,day));\n            size_t month = month.find_first_of(\"\
    -\");\n            month = month.substr(0,2);\n            string year(date.substr(day+1));\n\
    \            size_t year = year.find_first_of(\"-\");\n            if(month.size()==1\
    \ & day.size()==1 & year.size()==2)\n            {\n                vector<int>\
    \ days = {31,28,31,30,31,30,31,30,31,30,31,30,31};\n                vector<int>\
    \ months = {4,6,9,11};\n                vector<int> years = {2000, 2001, 2002,\
    \ 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012};\n             \
    \   int m = stoi(month);\n                int d = stoi(day);\n               \
    \ int y = stoi(year);\n                if(m != 2 && m != 6 & m != 9 & m != 11)\n\
    \                {\n                    result = false;\n                }\n \
    \               else if(m == 2)\n                {\n                    if(d >\
    \ days[m - 1])\n                    {\n                        result = false;\n\
    \                    }\n                }\n                else if(m == 6)\n \
    \               {\n                    if(d > days[m - 1])\n                 \
    \   {\n                        result = false;\n                    }\n      \
    \          }\n                else if(m == 9)\n                {\n           \
    \         if(d > days[m - 1])\n                    {\n                       \
    \ result = false;\n                    }\n                }\n                else\
    \ if(m == 11)\n                {\n                    if(d > days[m - 1])\n  \
    \                  {\n                        result = false;\n              \
    \      }\n                }\n                else if(m == 1)\n               \
    \ {\n                    if(d > days[m - 1])\n                    {\n        \
    \                result = false;\n                    }\n                }\n \
    \               else if(m == 3)\n                {\n                    if(d >\
    \ days[m - 1])\n                    {\n                        result = false;\n\
    \                    }\n                }\n                else if(m == 5)\n \
    \               {\n                    if(d > days[m - 1])\n                 \
    \   {\n                        result = false;\n                    }\n      \
    \          }\n                else if(m == 7)\n                {\n           \
    \         if(d > days[m - 1])\n                    {\n                       \
    \ result = false;\n                    }\n                }\n                else\
    \ if(m == 8)\n                {\n                    if(d > days[m - 1])\n   \
    \                 {\n                        result = false;\n               \
    \     }\n                }\n                else if(m == 10)\n               \
    \ {\n                    if(d > days[m - 1])\n                    {\n        \
    \                result = false;\n                    }\n                }\n \
    \               else if(m == 12)\n                {\n                    if(d\
    \ > days[m - ", "{\n    size_t date;\n    bool valid;", "{\n    if(date == \"\"\
    \ || date.size() == 0) return false;\n    int days = 0;\n    int months = 12;\n\
    \    int years = 0;\n    bool check = false;\n    \n    stringstream ss1(date);\n\
    \    string dateStr;\n    ss1 >> dateStr;\n    \n    for(int i=0; i < dateStr.size();\
    \ i++)\n    {\n        char letter = dateStr[i];\n        \n        if(isdigit(letter))\n\
    \        {\n            days += (dateStr[i] - '0') * 31;\n        }\n        else\n\
    \        {\n            days += (dateStr[i] - '0') * 30;\n        }\n    }", "{\n\
    \    // 1. Check the length of the date\n    if(date.size() == 0) {\n        return\
    \ false;\n    }\n    \n    // 2. Check days\n    if(date.size() > 10) {\n    \
    \    return false;\n    }\n    \n    string dateStr = date;\n    \n    size_t\
    \ pos = 0;\n    \n    // Get day\n    pos = dateStr.find_first_of(\"-\");\n  \
    \  \n    if(pos == string::npos) {\n        return false;\n    }\n    \n    string\
    \ day = dateStr.substr(0, pos);\n    \n    pos = dateStr.find_first_of(\"-\",\
    \ pos);\n    \n    if(pos == string::npos) {\n        return false;\n    }\n \
    \   \n    string month = dateStr.substr(pos + 1, 2);\n    \n    pos = dateStr.find_first_of(\"\
    -\", pos);\n    \n    if(pos == string::npos) {\n        return false;\n    }\n\
    \    \n    string year = dateStr.substr(pos + 1, 4);\n    \n    // Convert to\
    \ int\n    int dayNum = 0;\n    \n    size_t pos = day.find_first_of(\"-\");\n\
    \    \n    if(pos == string::npos) {\n        return false;\n    }\n    \n   \
    \ dayNum = std.atoi(day.substr(0, pos));\n    \n    int monthNum = 0;\n    \n\
    \    pos = month.find_first_of(\"-\");\n    \n    if(pos == string::npos) {\n\
    \        return false;\n    }\n    \n    monthNum = std.atoi(month.substr(0, pos));\n\
    \    \n    if(dayNum < 1 || dayNum > 31) {\n        return false;\n    }\n   \
    \ \n    if(monthNum < 1 || monthNum > 12) {\n        return false;\n    }\n  \
    \  \n    if(dayNum > 30 || monthNum > 12) {\n        return false;\n    }\n  \
    \  \n    // Convert to datetime\n    \n    DateTime dateTime;\n    \n    dateTime.month(monthNum);\n\
    \    dateTime.day(dayNum);\n    dateTime.year(year);\n    \n    // Check if valid\
    \ date\n    \n    if(dateTime.year() > 2020 || dateTime.year() < 1920) {\n   \
    \     return false;\n    }\n    \n    if(dateTime.month() > 12 || dateTime.month()\
    \ < 1) {\n        return false;\n    }\n    \n    if(dateTime.day() > 28 || dateTime.day()\
    \ < 1) {\n        return false;\n    }\n    \n    return true;\n}", "{\n    //write\
    \ your code here", "{\n    //check date not empty\n    if(date == \"\") return\
    \ false; \n    //check number of days in month\n    if(!isdigit(date[0]) || date[0]\
    \ < '1' || date[0] > '12') return false;\n    //check number of days in month\n\
    \    if(!isdigit(date[1]) || date[1] < '1' || date[1] > '31') return false;\n\
    \    //check number of days in month\n    if(!isdigit(date[2]) || date[2] < '1'\
    \ || date[2] > '30') return false;\n    //check number of days in month\n    if(!isdigit(date[3])\
    \ || date[3] < '1' || date[3] > '29') return false;\n    //check number of days\
    \ in month\n    if(!isdigit(date[4]) || date[4] < '1' || date[4] > '31') return\
    \ false;\n    //check number of days in month\n    if(!isdigit(date[5]) || date[5]\
    \ < '1' || date[5] > '30') return false;\n    //check number of days in month\n\
    \    if(!isdigit(date[6]) || date[6] < '1' || date[6] > '31') return false;\n\
    \    //check number of days in month\n    if(!isdigit(date[7]) || date[7] < '1'\
    \ || date[7] > '30') return false;\n    //check number of days in month\n    if(!isdigit(date[8])\
    \ || date[8] < '1' || date[8] > '31') return false;\n    //check number of days\
    \ in month\n    if(!isdigit(date[9]) || date[9] < '1' || date[9] > '30') return\
    \ false;\n    //check number of days in month\n    if(!isdigit(date[10]) || date[10]\
    \ < '1' || date[10] > '31') return false;\n    //check number of days in month\n\
    \    if(!isdigit(date[11]) || date[11] < '1' || date[11] > '30') return false;\n\
    \    return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,c++11,boost-date-time\
    \ |>\nTry below code:\n<code>\n#include <iostream>\n#include <string>", "{\n \
    \   if(!date.empty())\n    {\n        // Checking if the number of days is between\
    \ 1 and 31\n        if(date.size() == 9 && date[1] == '-' && date[2] == '-' &&\n\
    \            date[3] != '.' && date[3] != '/' && date[4] != '.' &&\n         \
    \   date[4] != '/' && date[5] != '.' && date[5] != '/' &&\n            date[6]\
    \ != '.' && date[6] != '/' && date[7] != '.' &&\n            date[7] != '/' &&\
    \ date[8] != '.' && date[8] != '/')\n        {\n            int month = 0;\n \
    \           char day = date[6];\n            char year = 0;\n            \n  \
    \          int length = date.size();", "{\n    if (date.empty()) \n    {\n   \
    \     return false;\n    }\n    \n    size_t const mm = date.find('-');\n    \n\
    \    if (mm == string::npos)\n    {\n        return false;\n    }\n    \n    size_t\
    \ const dd = date.rfind('-');\n    \n    if (mm == string::npos || dd == string::npos)\n\
    \    {\n        return false;\n    }\n    \n    string const mmstr = date.substr(0,\
    \ mm);\n    string const ddstr = date.substr(mm + 1, dd - mm - 1);\n    \n   \
    \ if (!(mmstr == \"01\" || mmstr == \"03\" || mmstr == \"05\" || mmstr == \"07\"\
    \ || mmstr == \"08\" || mmstr == \"10\" || mmstr == \"12\" \n        || mmstr\
    \ == \"04\" || mmstr == \"06\" || mmstr == \"09\" || mmstr == \"11\" \n      \
    \  || mmstr == \"02\" || mmstr == \"05\" || mmstr == \"07\" || mmstr == \"08\"\
    \ || mmstr == \"10\" || mmstr == \"12\"\n        || mmstr == \"03\" || mmstr ==\
    \ \"06\" || mmstr == \"09\" || mmstr == \"11\" || mmstr == \"02\" || mmstr ==\
    \ \"05\" || mmstr == \"07\" || mmstr == \"08\" || mmstr == \"10\" || mmstr ==\
    \ \"12\"\n        || mmstr == \"04\" || mmstr == \"06\" || mmstr == \"09\" ||\
    \ mmstr == \"11\" || mmstr == \"02\" || mmstr == \"05\" || mmstr == \"07\" ||\
    \ mmstr == \"08\" || mmstr == \"10\" || mmstr == \"12\"\n        || mmstr == \"\
    03\" || mmstr == \"06\" || mmstr == \"09\" || mmstr == \"11\" || mmstr == \"02\"\
    \ || mmstr == \"05\" || mmstr == \"07\" || mmstr == \"08\" || mmstr == \"10\"\
    \ || mmstr == \"12\"\n        || mmstr == \"04\" || mmstr == \"06\" || mmstr ==\
    \ \"09\" || mmstr == \"11\" || mmstr == \"02\" || mmstr == \"05\" || mmstr ==\
    \ \"07\" || mmstr == \"08\" || mmstr == \"10\" || mmstr == \"12\"\n        ||\
    \ mmstr == \"03\" || mmstr == \"06\" || mmstr == \"09\" || mmstr == \"11\" ||\
    \ mmstr == \"02\" || mmstr == \"05\" || mmstr == \"07\" || mmstr == \"08\" ||\
    \ mmstr == \"10\" || mmstr == \"12\"\n        || mmstr == \"04\" || mmstr == \"\
    06\" || mmstr == \"09\" || mmstr == \"11\" || mmstr == \"02\" || mmstr == \"05\"\
    \ || mmstr == \"07\" || mmstr == \"08\" || mmstr == \"10\" || mmstr == \"12\"",
  "{\n  int day,month,year;\n  if(!empty(date))\n  {\n    stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    if(month<1 || month>12)\n      return\
    \ false;\n    \n    if(day<1 || day>31)\n      return false;\n    \n    if(day>30)\n\
    \      return false;\n    \n    \n    if(month==1 && day==31) return false;\n\
    \    \n    if(month==2 && day>29) return false;\n    \n    if(month==1 && day>31)\
    \ return false;\n    \n    if(month==2 && day<1) return false;\n    \n    if(month==3\
    \ && day>31) return false;\n    \n    if(month==3 && day<1) return false;\n  \
    \  \n    if(month==4 && day>30) return false;\n    \n    if(month==4 && day<1)\
    \ return false;\n    \n    if(month==5 && day>31) return false;\n    \n    if(month==5\
    \ && day<1) return false;\n    \n    if(month==6 && day>30) return false;\n  \
    \  \n    if(month==6 && day<1) return false;\n    \n    if(month==7 && day>31)\
    \ return false;\n    \n    if(month==7 && day<1) return false;\n    \n    if(month==8\
    \ && day>31) return false;\n    \n    if(month==8 && day<1) return false;\n  \
    \  \n    if(month==9 && day>31) return false;\n    \n    if(month==9 && day<1)\
    \ return false;\n    \n    if(month==10 && day>31) return false;\n    \n    if(month==10\
    \ && day<1) return false;\n    \n    if(month==11 && day>30) return false;\n \
    \   \n    if(month==11 && day<1) return false;\n    \n    if(month==12 && day>31)\
    \ return false;\n    \n    if(month==12 && day<1) return false;\n    \n    return\
    \ true;\n  }\n  return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIt seems\
    \ that you've given me the solution. Thanks.\n<|/ c |>\n<| c |>\nHi, I tried your\
    \ solution and it didn't work. I think the problem is that the months have different\
    \ number of days.\n<|/ c |>\n<| c |>\nThanks for pointing out the error. The answer\
    \ has been updated.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I did not\
    \ notice that. Sorry about that.\n<|/ c |>\n<| c |>\nHi, I tried to run your code\
    \ again but I don't think it works. I got an error in the third if statement.\
    \ if(", "{\n    \n    string pattern = \"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    ;\n    auto result = std::regex_match(date, std::regex(pattern));\n    if(!result)\n\
    \    {\n        return false;\n    }\n    int day = int(std::stoi(std::submatch(1).str()));\n\
    \    int month = int(std::stoi(std::submatch(2).str()));\n    int year = int(std::stoi(std::submatch(3).str()));",
  "{\n    if(date.length() == 0)\n        return false;\n    int daysInMonths[] =\
    \ {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    stringstream ss(date);\n\
    \    int day, month, year;\n    \n    ss >> day >> month >> year;\n    if(month\
    \ < 1 || month > 12)\n        return false;\n    if(day < 1 || day > daysInMonths[month])\n\
    \        return false;\n    if(year < 1900 || year > 2100)\n        return false;\n\
    \    \n    int newYear = year;\n    int newMonth = month;\n    if(month == 2 &&\
    \ day > 28)\n    {\n        newMonth = 1;\n        newYear += 1;\n    }\n    \n\
    \    return (day == daysInMonths[newMonth] && newYear == year);\n}\n</code>\n\
    <|/ a tags=c++,string,date dscore=0 |>\n<| c |>\nThe OP seems to want dates in\
    \ a certain range.  Though this answer seems somewhat relevant.\n<|/ c |>\n<|\
    \ c |>\nThank you for the solution. However, I do not understand the last part\
    \ where it says newMonth = 1. Why would that be necessary? I am sorry if this\
    \ is a stupid question, I am new to C++.\n<|/ c |>\n<| c |>\nYou have to account\
    \ for February.  Month is 0-based, so if February is the month (i.e. month==2)\
    \ you have to change month to 1.  I didn't consider leap years, but that is easy\
    \ enough to do.\n<|/ c |>\n<| c |>\nYou don't need `newMonth` at all.  Just `if(month==2)\
    \ daysInMonth[1] = 29;`\n<|/ c |>\n<| c |>\nI see. Thank you very much for helping\
    \ me out!\n<|/ c |>\n<| a |>\nThe answer is in the original question:\n<code>",
  "{\n    map<int, int> months;\n    months[0]=1;months[1]=3;months[2]=5;months[3]=7;months[4]=8;months[5]=10;months[6]=12;months[7]=4;\n\
    \    months[8]=6;months[9]=9;months[10]=11;months[11]=0;\n    if (date.empty()){\n\
    \        return false;\n    }\n    int d=stoi(date);\n    if (d<1 ||  d>31)\n\
    \        return false;\n    if (d>29 ||  d<1)\n        return false;\n    int\
    \ year=d%100;\n    int month=d/100;\n    int day=d%100;\n    \n    if (month<1\
    \ || month>12 || day<1 || day>31)\n        return false;\n    \n    if (month==1\
    \ && day<31-month)\n        return false;\n    \n    if (month==2 && day<30-month)\n\
    \        return false;\n    \n    if (month==3 && day<29-month)\n        return\
    \ false;\n    \n    return true;\n}", "{\n    if(date == \"\" || date.Length <\
    \ 2){\n        return false;\n    }\n    int m, d, y;\n    string[] strArr = date.Split('-');\n\
    \    bool isValid = false;\n    int strLen = strArr.Length;\n    if(strLen !=\
    \ 3) return isValid;\n    string[] monthStr = { \"1\", \"3\", \"5\", \"7\", \"\
    8\", \"10\", \"12\" };\n    bool isM = true;\n    int strM = Convert.ToInt32(strArr[0]);\n\
    \    for(int i = 0; i < monthStr.Length; i++){\n        if(strM == Convert.ToInt32(monthStr[i])){\n\
    \            isM = true;\n            break;\n        }\n        else isM = false;\n\
    \    }\n    if(isM == false){\n        return false;\n    }\n    string[] dayStr\
    \ = { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\" };\n    bool isD = true;\n    int strD = Convert.ToInt32(strArr[1]);\n\
    \    for(int i = 0; i < dayStr.Length; i++){\n        if(strD == Convert.ToInt32(dayStr[i])){\n\
    \            isD = true;\n            break;\n        }\n        else isD = false;\n\
    \    }\n    if(isD == false){\n        return false;\n    }\n    if(strArr[2]\
    \ == \"19\"){\n        isValiad = true;\n    }\n    else {\n        DateTime dt\
    \ = Convert.ToDateTime(strArr[2]);\n        int y = Convert.ToInt32(strArr[2])\
    \ - 2099;\n        int m = Convert.ToInt32(strArr[1]);\n        int d = Convert.ToInt32(strArr[0]);\n\
    \        if(isM == true && isD == true){\n            if(dt.Day > 31 || dt.Month\
    \ > 12 || dt.Year > y){\n                isValid = false;\n            }\n   \
    \     }\n        else if(isM == false && isD == true){\n            if(dt.Day\
    \ > 30 || dt.Month > 12 || dt.Year > y){\n                isValid = false;\n \
    \           }\n        }\n        else if(isM == true && isD == false){\n    \
    \        if(dt.Day > 29 || dt.Month > 12 || dt.Year > y){\n                isValid\
    \ = false;\n            }\n        }\n        else if(isM == false && isD == false){\n\
    \            if(dt.Month > 12 || dt.Year > y){\n                isValid = false;\n\
    \            }\n        }\n    }\n    return isValid;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nI know that this is an old post but here is a possible solution.\n<code>\n\
    static bool CheckDate(string input)\n    {\n        DateTime dateTime;", "{\n\
    \    if(!date.empty()) \n    {\n        map<int,int> validMonth = {1,2,3,4,5,6,7,8,9,10,11,12};\n\
    \        map<int,int> validDay = {31,30,29,28,31,30,31,30,31,30,31};\n       \
    \ map<int,int> validYear = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \        int mm, dd;\n        unsigned int dyear, month, day;\n        stringstream\
    \ ss(date);\n        if(!ss || ss.fail()) return false;\n        ss(date);\n \
    \       ss >> mm >> dd >> dyear;\n        if(mm<1 || mm>12 || dd<1 || dd>validDay[mm-1])\
    \ return false;\n        if(dyear < validYear[mm-1]) return false;\n        month\
    \ = mm-1;\n        day = dd;\n        dyear -= mm-1;\n        for(;;)\n      \
    \  {\n            if((dyear % 4 == 0) && (dyear % 100 != 0) || (dyear % 400 ==\
    \ 0)) \n            {\n                if(month == 2) \n                {\n  \
    \                  if(day > 29) return false;\n                }\n           \
    \     else \n                {\n                    if(day > 28) return false;\n\
    \                }\n            }\n            else \n            {\n        \
    \        if(month == 2) \n                {\n                    if(day > 29)\
    \ return false;\n                }\n                else \n                {\n\
    \                    if(day > 28) return false;\n                }\n         \
    \   }\n            month--;\n            dyear /= 4;\n            if(month ==\
    \ 0) month = 12;\n        }\n    }\n    return true;\n}", "{\n    int month,day;\n\
    \    if(!std.isnothing(date))\n    {\n        date = std.tointeger(date);\n  \
    \      month = date / 100;\n        day = date % 100;\n        month = month/1;\n\
    \        day = day/1;\n        if(month<1 || month>12)\n        {\n          \
    \  return false;\n        }\n        if(day<1 || day>31 || day>30)\n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=c++,date,validation dscore=2 |>\n<| c |>\nThis answer fails to account\
    \ for leap years, i.e. leap years are 366 days not 365.\n<|/ c |>\n<| a dscore=2\
    \ tags=c++,date,validation |>\nIn case anyone comes across this thread looking\
    \ for an answer using C++20 date/time library from here (which has a number of\
    \ benefits over standard library date-time lib). \n<code>\n#include <chrono>\n\
    #include <iostream>", "{\n    if(!empty(date))\n    {\n        //the date is valid.\n\
    \        \n        //day validation\n        auto day = (int)str::find_first(\"\
    0123456789\", date);\n        if(day != string::npos)\n        {\n           \
    \ int dayValue = (int)std.typecons.atoi[date[day + 1]];\n            if(dayValue\
    \ >= 1 && dayValue <= 31)\n            {\n                return true;\n     \
    \       }\n            else\n            {\n                return false;\n  \
    \          }\n        }\n        //month validation\n        auto month = (int)str::find_first(\"\
    012\", date);\n        if(month != string::npos)\n        {\n            int monthValue\
    \ = (int)std.typecons.atoi[date[month + 1]];\n            if(monthValue >= 1 &&\
    \ monthValue <= 12)\n            {\n                return true;\n           \
    \ }\n            else\n            {\n                return false;\n        \
    \    }\n        }\n        //year validation\n        auto year = (int)str::find_first(\"\
    -\", date);\n        if(year != string::npos)\n        {\n            int yearValue\
    \ = (int)std.typecons.atoi[date[year + 1]];\n            if(yearValue >= 1 &&\
    \ yearValue <= 50)\n            {\n                return true;\n            }\n\
    \            else\n            {\n                return false;\n            }\n\
    \        }\n    }\n    return false;\n}", "{\n\tif(date.length() == 0)\n\t\treturn\
    \ false;", "{\n    if (date.empty())\n    {\n        return false;\n    }\n  \
    \  \n    int month = stoi(date.substr(0, 2));\n    int day = stoi(date.substr(3,\
    \ 2));\n    int year = stoi(date.substr(6, 4));", "{\n    char day[10] ;\n   \
    \ int month_num ;\n    int year ;\n    \n    string::size_type pos = 0;\n    \n\
    \    pos = date.find_first_not_of(\"0123456789-\");\n    \n    day = date.substr(0,pos);\n\
    \    month_num = atoi(date.substr(pos+1,2));\n    year = atoi(date.substr(pos+3,4));\n\
    \    \n    switch(month_num)\n    {\n        case 1:\n        case 3:\n      \
    \  case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n\
    \            if ( (day < 1 || day > 31) && (day < 1 || day > 30) && (day < 1 ||\
    \ day > 29) ) return false;\n            else return true;\n        case 4:\n\
    \        case 6:\n        case 9:\n        case 11:\n            if ( (day < 1\
    \ || day > 31) && (day < 1 || day > 30) && (day < 1 || day > 29) ) return false;\n\
    \            else return true;\n        case 2:\n            if ( (day < 1 ||\
    \ day > 31) && (day < 1 || day > 30) && (day < 1 || day > 29) ) return false;\n\
    \            else return true;\n        default:\n            return false;\n\
    \    }\n}\n</code>\n<|/ a tags=c++ dscore=1 |>\n<| a tags=c++ |>\nThe code below\
    \ will return the day of month. \n<code>", "{\n    if ( date == \"\" ) {\n   \
    \     return false;\n    }\n    \n    int day = int(date[4] - '0');\n    int month\
    \ = int(date[3] - '0');\n    int year = int(date[6] - '0');\n    \n    int days\
    \ = days_in_month( month, year );\n    int months = months_in_year( year );\n\
    \    \n    if ( date != \"\" ) {\n        if ( days < 1 || days > 31 ) {\n   \
    \         return false;\n        }\n        if ( months < 1 || months > 12 ) {\n\
    \            return false;\n        }\n        if ( days == 31 && month == 2 )\
    \ {\n            return false;\n        }\n        if ( days == 29 && month ==\
    \ 2 ) {\n            return false;\n        }\n        if ( day < 1 || day > 31\
    \ ) {\n            return false;\n        }\n    }\n    return true;\n}", "{\n\
    \    \n    int month;\n    \n    int day;\n    \n    int year;\n    \n    \n \
    \   month = std.atoi(date.substr(0,2));\n    \n    day = std.atoi(date.substr(2,2));\n\
    \    \n    year = std.atoi(date.substr(4,4));\n    \n    \n    if (year < 1 ||\
    \ year > 9999)\n    {\n        return false;\n    }\n    \n    if (month < 1 ||\
    \ month > 12)\n    {\n        return false;\n    }\n    \n    if (day < 1 || day\
    \ > std.daysPerMonth(month))\n    {\n        return false;\n    }\n    \n    return\
    \ true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your response. I need\
    \ to check if the date is valid before i add it to my database or do i need to\
    \ use isValid?\n<|/ c |>\n<| c |>\nYou can use isValid to check if date is valid.\
    \ And then add it to your database.\n<|/ c |>\n<| c |>\nYes but i need to check\
    \ if the date is not empty and validate it before i insert it to my database.\
    \ So can i use isValid to do this?\n<|/ c |>\n<| c |>\nYes you can use isValid\n\
    <|/ c |>\n<| c |>\nThank you so much i really appreciate your help\n<|/ c |>\n\
    <| a dscore=0 |>\nThis function returns true if given date is not valid else false\n\
    <code>", "{\n    if(!date || date.length()==0)\n        return false;", "{\n \
    \   \n    // your code goes here\n    \n    \n    int daysInMonth[13] = {0, 31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int currentDayOfMonth;\n \
    \   int currentYear;\n    string currentMonth;\n    \n    currentDayOfMonth =\
    \ stoi(date[3]);\n    currentYear = stoi(date[4]);\n    currentMonth = date[5];\n\
    \    \n    if(date.length()<6 || date.length()>10) return false; \n    \n    for(int\
    \ i = 1; i < 6; ++i){\n        if(date[i]<'0' || date[i]>'9') return false; \n\
    \    }\n    \n    if((stoi(date[1]) >0 && stoi(date[1]) <13 && stoi(date[1])==stoi(date[2])\
    \ && stoi(date[1])==stoi(date[3]))||\n       (stoi(date[1]) >12 && stoi(date[1])\
    \ <13 && stoi(date[1])==stoi(date[2]) && stoi(date[2])==stoi(date[3]))){\n   \
    \     \n        if(stoi(date[1])>0 && stoi(date[1])<13){\n            if(stoi(date[2])>0\
    \ && stoi(date[2])<daysInMonth[stoi(date[1])-1]){\n                if(stoi(date[3])>0\
    \ && stoi(date[3])<daysInMonth[stoi(date[1])-1]){\n                    if(stoi(date[4])>0\
    \ && stoi(date[4])<currentYear){\n                        return true;\n     \
    \               }\n                }\n            }\n        }\n        \n   \
    \     if(stoi(date[1])>12 && stoi(date[1])<13){\n            if(stoi(date[2])>0\
    \ && stoi(date[2])<daysInMonth[stoi(date[1])-1]){\n                if(stoi(date[3])>0\
    \ && stoi(date[3])<daysInMonth[stoi(date[1])-1]){\n                    if(stoi(date[4])>0\
    \ && stoi(date[4])<currentYear){\n                        return true;\n     \
    \               }\n                }\n            }\n        }\n        \n   \
    \     if(stoi(date[1])==stoi(date[2])){\n            if(stoi(date[1])>0 && stoi(date[1])<13){\n\
    \                if(stoi(date[3])>0 && stoi(date[3])<daysInMonth[stoi(date[1])-1]){\n\
    \                    if(stoi(date[4])>0 && stoi(date[4])<currentYear){\n     \
    \                   return true;\n                    }\n                }\n \
    \           }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nA simple function which returns true if a date falls in\
    \ a particular month. Feel free to modify the code if you want to add more "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
