name: HumanEval_23_strlen
language: d
prompt: "import std.math;\n/*\n Return length of given string\n    >>> strlen(\"\"\
  )\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
  \ \n"
tests: "unittest\n{\n    alias candidate = strlen;\n\n    assert(candidate(\"\") ==\
  \ 0L);\n    assert(candidate(\"x\") == 1L);\n    assert(candidate(\"asdasnakj\"\
  ) == 9L);\n}\nvoid main(){}"
completions: ["{\n  int i=0;\n  while (string[i] != 0) i++;\n  return i;\n}", "{\n\
    \tlong len = 0L;\n\t\n\tfor(auto i : string) \n\t{\n\t\tlen++L;\n\t}\n\t\n\treturn\
    \ len;\n}\n/*\n Return index of first occurrence of given substring\n    >>> strfind(\"\
    abc\", \"bc\")\n    2L\n    >>> strfind(\"abc\", \"zbc\")\n    0L\n    \n*/\n\
    long strfind(string haystack, string needle)\n{\n\tlong idx = 0L;\n\t\n\tfor(auto\
    \ i : haystack) \n\t{\n\t\tif(needle == i) \n\t\t{\n\t\t\tidx = i;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t\n\treturn idx;\n}\n/*\n Return index of last occurrence of given\
    \ substring\n    >>> strrfind(\"abc\", \"bc\")\n    3L\n    >>> strrfind(\"abc\"\
    , \"zbc\")\n    0L\n    \n*/\nlong strrfind(string haystack, string needle)\n\
    {\n\tlong idx = 0L;\n\t\n\tfor(auto i : haystack) \n\t{\n\t\tif(needle == i) \n\
    \t\t{\n\t\t\tidx = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn idx;\n}\n/*\n Return\
    \ true if given string contains given substring\n    >>> strcontains(\"abc\",\
    \ \"bc\")\n    True\n    >>> strcontains(\"abc\", \"zbc\")\n    False\n    \n\
    */", "{\n\tlong length = 0;\n\tint i = 0;\n\twhile(i != string.size - 1) \n\t\
    {\n\t\tlength += 1;\n\t\ti = i + 1;\n\t}\n\treturn length;\n}\n/*\n Check if given\
    \ string equal \"\"\n    >>> \"\" == \"\"\n    True\n    \n*/", "{\n    long result\
    \ = 0;\n    \n\tfor(int i = 0; i < string.length; i++)\n\t{\n\t\tresult += 1;\n\
    \t}\n\t\n\treturn result;\n}", "{\n\tint cnt = 0;\n\tchar ch;\n\twhile (cnt <\
    \ string.length()) {\n\t\tch = string[cnt];\n\t\tcnt++;\n\t}\n\treturn cnt;\n}",
  "{\n\tint i = 0;\n\tfor(i = 0; i < string.size; i++) {\n\t\tif(i == (string.size-1))\n\
    \t\t\treturn string.size(i);\n\t}\n\treturn string.size(i);\n}\nstring substr(string\
    \ string, int start, int len) {\n\treturn string.substr(start, len);\n}\nstring\
    \ substring(string string, int start, int len) {\n\treturn string.substring(start,\
    \ len);\n}\nstring append(string string, string stringToAppend) {\n\treturn string.append(stringToAppend);\n\
    }\nstring append(string string, string stringToAppend, string stringToAppend2)\
    \ {\n\treturn string.append(stringToAppend, stringToAppend2);\n}\nstring append(string\
    \ string, string stringToAppend, string stringToAppend2, string stringToAppend3)\
    \ {\n\treturn string.append(stringToAppend, stringToAppend2, stringToAppend3);\n\
    }\nstring append(string string, string stringToAppend, string stringToAppend2,\
    \ string stringToAppend3, string stringToAppend4) {\n\treturn string.append(stringToAppend,\
    \ stringToAppend2, stringToAppend3, stringToAppend4);\n}\nstring append(string\
    \ string, string stringToAppend, string stringToAppend2, string stringToAppend3,\
    \ string stringToAppend4, string stringToAppend5) {\n\treturn string.append(stringToAppend,\
    \ stringToAppend2, stringToAppend3, stringToAppend4, stringToAppend5);\n}\nstring\
    \ append(string string, string stringToAppend, string stringToAppend2, string\
    \ stringToAppend3, string stringToAppend4, string stringToAppend5, string stringToAppend6)\
    \ {\n\treturn string.append(stringToAppend, stringToAppend2, stringToAppend3,\
    \ stringToAppend4, stringToAppend5, stringToAppend6);\n}\nstring append(string\
    \ string, string stringToAppend, string stringToAppend2, string stringToAppend3,\
    \ string stringToAppend4, string stringToAppend5, string stringToAppend6, string\
    \ stringToAppend7) {\n\treturn string.append(stringToAppend, stringToAppend2,\
    \ stringToAppend3, stringToAppend4, stringToAppend5, stringToAppend6, stringToAppend7);\n\
    }\nstring append(string string, string stringToAppend, string stringToAppend2,\
    \ string stringToAppend3, string stringToAppend4, string stringToAppend5, string\
    \ stringToAppend6, string stringToAppend7, string stringToAppend8) {\n\treturn\
    \ string.append(stringToAppend, stringToAppend2, stringToAppend3, stringToAppend4,\
    \ stringToAppend5, stringToAppend6, stringToAppend7, stringToAppend8);\n}\nstring\
    \ append(string string, string stringToAppend, string stringToAppend2, string\
    \ stringToAppend3, string stringToAppend4, string ", "{\n\tlong result = 0;\n\t\
    auto len = string.length();\n\tfor(auto i=0;i<len;++i){\n\t\tresult += std.math::abs(string.data()[i]-'0');\n\
    \t}\n\treturn result;\n}\n/*\n Return number of characters in given string\n \
    \   >>> strlen(\"abc\")\n    3L\n    \n*/\nsize_t strlen(string string) \n{\n\t\
    size_t result = 0;\n\tauto len = string.length();\n\tfor(auto i=0;i<len;++i){\n\
    \t\tresult += std.math::abs(string.data()[i]-'0');\n\t}\n\treturn result;\n}",
  "{\n\tauto l = string.length();\n\treturn l;\n}", "{\n    int i, n = 1;\n    \n\
    \    for (i = 0; i < string.size(); ++i)\n        if (string[i] != 0)\n      \
    \      n = 1 + n;\n    \n    return n;\n}", "{\n    long l;\n    for (l = 0; l\
    \ < string.length; ++l)\n        if (!isalpha(string[l]))\n            break;\n\
    \    return l;\n}", "{\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length;\
    \ ++i)\n    {\n        if(string.charAt(i) != '\\0')\n            ++length;\n\
    \    }\n    return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n\
    \    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n            ++length;\n    }\n   \
    \ return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n  \
    \  0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n            ++length;\n    }\n   \
    \ return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n  \
    \  0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n            ++length;\n    }\n   \
    \ return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n  \
    \  0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n            ++length;\n    }\n   \
    \ return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n  \
    \  0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n            ++length;\n    }\n   \
    \ return length;\n}\n/*\n Return length of given string\n    >>> strlen()\n  \
    \  0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\n\
    {\n    long length = 0L;\n    int i;\n    for(i=0; i<string.length; ++i)\n   \
    \ {\n        if(string.charAt(i) != '\\0')\n", "{ \n\tint i = 0;\n\twhile (string[i])\
    \ \n\t\t++i;\n\treturn i;\n}", "{\n    long length;\n    const char *p;\n    for(p\
    \ = string.data; p != string.data + string.size; p++)\n    {\n        if(*p ==\
    \ '\\0')\n        {\n            length = p - string.data;\n            break;\n\
    \        }\n        else\n        {\n            length++;\n        }\n    }\n\
    \    return length;\n}\n/*\n Return string with specified length cut off from\
    \ the end.\n    >>> strrchr(\"abc\", 0)\n    'abc'\n    >>> strrchr(\"abc\", 0)\n\
    \    'abc'\n    >>> strrchr(\"abc\", 3)\n    'cb'\n    >>> strrchr(\"abc\", 3)\n\
    \    'cb'\n    >>> strrchr(\"abc\", 3)\n    'cb'\n*/\nstring strrchr(string string,\
    \ long length) \n{\n    long i;\n    string s;\n    for(i = string.size - 1, s\
    \ = string; i >= 0; i--)\n    {\n        if(string.data[i] == length)\n      \
    \  {\n            s.data = string.data + i;\n            s.size = i - 1;\n   \
    \         return s;\n        }\n    }\n    s.data = string.data;\n    s.size =\
    \ 0;\n    return s;\n}\n/*\n Return string with specified length cut off from\
    \ the beginning.\n    >>> strlchr(\"abc\", 0)\n    'abc'\n    >>> strlchr(\"abc\"\
    , 0)\n    'abc'\n    >>> strlchr(\"abc\", 3)\n    'ab'\n    >>> strlchr(\"abc\"\
    , 3)\n    'ab'\n*/\nstring strlchr(string string, long length) \n{\n    long i;\n\
    \    string s;\n    for(i = 0; i < string.size; i++)\n    {\n        if(string.data[i]\
    \ == length)\n        {\n            s.data = string.data;\n            s.size\
    \ = i;\n            return s;\n        }\n    }\n    s.data = string.data;\n \
    \   s.size = 0;\n    return s;\n}\n/*\n Compare string with specified length\n\
    \    >>> strncmp(\"abc\", \"abc\", 1)\n    0L\n    >>> strncmp(\"abc\", \"abc\"\
    , 2)\n    0L\n    >>> strncmp(\"abc\", \"abc\", 3)\n    1L\n*/", "{\n    long\
    \ len = 0;\n    \n    for(char i : string) \n    {\n        len += 1;\n    }\n\
    \    \n    return len;\n}", "{\n\tint n;\n\tlong len=0;\n\tfor(n=0;n<(string.length());n++)\n\
    \t\tlen++;\n\treturn len;\n}\n/*\n Convert given string from UTF-8 to Unicode\n\
    \    >>> str(u\"a\")\n    'a'\n    >>> str(u\"abc\")\n    'abc'\n*/\nstring str(string\
    \ string)\n{\n\tint n=0,i;\n\tstring temp;\n\tfor(i=0;i<(string.length());i++)\n\
    \t{\n\t\tif(string.at(i)<0x80)\n\t\t\ttemp+=string[i];\n\t\telse\n\t\t{\n\t\t\t\
    if(temp.length()>0)\n\t\t\t\tn+=utf8tounicode(n,temp);\n\t\t\ttemp=\"\";\n\t\t\
    \tn++;\n\t\t}\n\t}\n\tif(temp.length()>0)\n\t\tn+=utf8tounicode(n,temp);\n\treturn\
    \ n;\n}\n/*\n Convert given string from UTF-8 to Unicode\n    >>> str(u\"a\")\n\
    \    'a'\n    >>> str(u\"abc\")\n    'abc'\n*/\nstring unicode(string string)\n\
    {\n\tint n=0,i;\n\tstring temp;\n\tfor(i=0;i<(string.length());i++)\n\t{\n\t\t\
    if(string.at(i)<0x80)\n\t\t\ttemp+=string[i];\n\t\telse\n\t\t{\n\t\t\tif(temp.length()>0)\n\
    \t\t\t\tn+=unicodetoutf8(n,temp);\n\t\t\ttemp=\"\";\n\t\t\tn++;\n\t\t}\n\t}\n\t\
    if(temp.length()>0)\n\t\tn+=unicodetoutf8(n,temp);\n\treturn n;\n}\n/*\n Convert\
    \ given string to UTF-8\n    >>> utf8(\"a\")\n    'a'\n    >>> utf8(\"abc\")\n\
    \    'abc'\n*/\nstring utf8(string string)\n{\n\tint i;\n\tint n=0;\n\tstring\
    \ temp=\"\";\n\tfor(i=0;i<(string.length());i++)\n\t{\n\t\tif(string.at(i)<0x80)\n\
    \t\t\ttemp+=string.at(i);\n\t\telse\n\t\t{\n\t\t\tif(temp.length()>0)\n\t\t\t\t\
    n+=utf8tounicode(n,temp);\n\t\t\ttemp=\"\";\n\t\t\tn++;\n\t\t}\n\t}\n\tif(temp.length()>0)\n\
    \t\tn+=utf8tounicode(n,temp);\n\treturn n;\n}\n/*\n Convert given string to Unicode\n\
    \    >>> unicode(\"a\")\n    'a'\n    >>> unicode(\"abc\")\n    'abc'\n*/\nstring\
    \ unicode(string string)\n{\n\tint i;\n\tint n=0;\n\tstring temp=\"\";\n\tfor(i=0;i<(string.length());i++)\n\
    \t{\n\t\tif(string.at(i)<0x80)\n\t\t\ttemp+=string.at(i);\n\t\telse\n\t\t{\n\t\
    \t\tif(temp.length()>0)\n\t\t\t\t", "{\n\tsize_t length = 0 ;\n\tfor (auto c :\
    \ string)\n\t{\n\t\tlength++;\n\t}\n\treturn length;\n}", "{\n    string newString\
    \ = string;\n    size_t len = 0;\n    size_t pos = 0;\n    while ( newString[pos]\
    \ ) {\n        ++len;\n        ++pos;\n    }\n    return len;\n}", "{\n    long\
    \ result = 0;\n\t\n    for(long i = 0; i < string.length; ++i)\n        result\
    \ += (string.charAt(i) == '\\0' ? 0 : 1L);\n        \n    return result;\n}",
  "{\n    long i = 0;\n    while (i < string.length) \n        ++i;\n    return i;\n\
    }\n</code>\nThis algorithm is O(n), which means it's very fast and you don't have\
    \ to worry about memory management.  This is basically the same algorithm that\
    \ you'd have to write if you wanted to write your own string copy function.\n\
    <|/ a tags=string,string-length,stl,c++ dscore=3 |>\n<| a tags=string,string-length,stl,c++\
    \ |>\nIt's easy enough to write your own string length function using std::strlen().\
    \ \nIf you don't want to do that, you could use std::getline() and std::stoi()\
    \ to find the end of line. Something like this:\n<code>\nstd::string s1(1000000,\
    \ \"a\");\nstd::string s2(1000000, \"a\");\nstd::cout << s1 << std::endl;\nstd::cout\
    \ << s2 << std::endl;\nstd::string::size_type i = 0;\nstd::string::size_type j\
    \ = 0;", "{\n\tint i=0;\n\twhile (string[i]!='\\0') \n\t{\n\t\ti++;\n\t}\n\treturn\
    \ i;\n}\n/*\n Convert string to uppercase.\n >>> toupper(\"abc\")\n    'ABC'\n\
    */\nstring toupper(string string) \n{\n\tfor (int i=0; i<string.length(); i++)\
    \ {\n\t\tstring[i] = toupper(string[i]);\n\t}\n\treturn string;\n}", "{\n    long\
    \ i;\n    \n    for (i = 0; string[i] != '\\0'; i++) {\n        ;\n    }\n   \
    \ \n    return i;\n}", "{\n\tlong length;\n\t\n\tstring=trimright(string);\n\t\
    \n\tlength = 0;\n\t\n\tfor(string::iterator it = string.begin(); it != string.end();\
    \ ++it) {\n\t\tif (*it != ' ' && tolower(*it) != '\\0') {\n\t\t\t++length;\n\t\
    \t}\n\t}\n\t\n\treturn length;\n}", "{\n    auto len = string.length();\n    \n\
    \    if (len == 0) {\n        return 0L;\n    }\n    \n    return len;\n}", "{\
    \ \n\tlong len = -1L;\n\t\n\tif (string == null) return len;\n\t\n\tfor (len =\
    \ 0; (string[len] != 0) && (string[len] != 10) && (string[len] != 13) && (string[len]\
    \ != 10);) len++;\n\t\n\treturn len; \n}", "{\n\tlong len = string.length;\n\t\
    \n\tfor (len = 0; len < string.length; ++len)\n\t\tif (!string.charCodeAt(len))\
    \ {\n\t\t\tbreak;\n\t\t}\n\t\n\treturn len;\n}", "{\n\tint i, length = 0;\n\t\n\
    \tfor(i=0; i<string.length(); i++)\n\t{\n\t\tif(string.at(i) == 0)\n\t\t{\n\t\t\
    \tbreak;\n\t\t}\n\t\tlength++;\n\t}\n\t\n\treturn length;\n}\n/*\n Return length\
    \ of given string\n    >>> strlen(\"abc\")\n    3L\n    >>> strlen(\"ab\")\n \
    \   2L\n    \n*/", "{\n\tint i = 0;\n\twhile(string.data[i])\n\t\ti++;\n\treturn\
    \ i;\n}", "{\n  return length;\n}\n/*\n Return substring of given string\n   \
    \ >>> substr(\"abracadabra\", 0, 6)\n    \"abracad\"\n    >>> substr(\"abracadabra\"\
    , 3, 9)\n    \"abracadabra\"\n    \n*/\nstring substr(string string, long startIndex,\
    \ long length)\n{\n  return string.substr(startIndex, length);\n}\n/*\n Return\
    \ length of substring\n    >>> strlen(\"abracadabra\")\n    10L\n    \n*/\nlong\
    \ substrlen(string string, long startIndex, long length) \n{\n  return string.substrlen(startIndex,\
    \ length);\n}\n/*\n Return reverse of given string\n    >>> strrev(\"abracadabra\"\
    )\n    \"rabadabrac\"\n    \n*/\nstring strrev(string string)\n{\n  string result;\n\
    \  string temp = string.data;\n  \n  while (!string.eof()) {\n    result.push_back(temp[string.rpos()]);\n\
    \  }\n  return result;\n}\n/*\n Return count of first occurrence of substring\
    \ in string\n    >>> strstr(\"abracadabra\", \"abracad\")\n    4L\n    >>> strstr(\"\
    abracadabra\", \"raba\")\n    0L\n    \n*/\nlong strstr(string string, string\
    \ substring) \n{\n  return string.strstr(substring);\n}\n/*\n Return index of\
    \ first occurrence of substring in string\n    >>> strindex(\"abracadabra\", \"\
    abracad\")\n    4L\n    >>> strindex(\"abracadabra\", \"raba\")\n    -1L\n   \
    \ \n*/\nlong strindex(string string, string substring) \n{\n  return string.strindex(substring);\n\
    }\n/*\n Return index of first occurrence of substring in string\n    >>> strrindex(\"\
    abracadabra\", \"abracad\")\n    8L\n    >>> strrindex(\"abracadabra\", \"raba\"\
    )\n    -1L\n    \n*/\nlong strrindex(string string, string substring) \n{\n  return\
    \ string.strrindex(substring);\n}\n/*\n Convert string to lower case\n    >>>\
    \ strtolower(\"Abracadabra\")\n    \"abracadabra\"\n    \n*/\nstring strtolower(string\
    \ string)\n{\n  return string.strtolower();\n}\n/*\n Convert string to upper case\n\
    \    >>> strtoupper(\"abracadabra\")\n    \"ABRACADABRA\"\n    \n*/\nstring strtoupper(",
  "{\n\tif (string == \"\")\n\t{\n\t\treturn 0L;\n\t}\n\telse\n\t{\n\t\tsize_t len\
    \ = string.size();\n\t\t\n\t\tif (len <= MAX_STR_SIZE)\n\t\t\treturn len + sizeof(char);\n\
    \t\t\n\t\tstring newString = \"\";\n\t\tint i = 0;\n\t\t\n\t\twhile(i < len &&\
    \ newString.size() < MAX_STR_SIZE)\n\t\t{\n\t\t\tnewString += string[i];\n\t\t\
    \t++i;\n\t\t}\n\t\t\n\t\tstring newString2 = \"\";\n\t\tint j = 0;\n\t\t\n\t\t\
    while(j < MAX_STR_SIZE)\n\t\t{\n\t\t\tnewString2 += newString[j];\n\t\t\t++j;\n\
    \t\t}\n\t\t\n\t\treturn newString2.size();\n\t}\n}", "{\n    long len = 0;\n \
    \   if (string) {\n        len = (string).len;\n    }\n    return len;\n}\n/*\n\
    \ Convert string to lower case\n    >>> strlower(\"Hello world\")\n    \"hello\
    \ world\"\n*/\nstring strlower(string string) \n{\n    char temp[string.length];\n\
    \    memcpy (temp, string.data, string.length);\n    string.data = temp;\n   \
    \ return string;\n}\n/*\n Convert string to upper case\n    >>> strupper(\"Hello\
    \ world\")\n    \"HELLO WORLD\"\n*/\nstring strupper(string string) \n{\n    char\
    \ temp[string.length];\n    memcpy (temp, string.data, string.length);\n    temp[0]\
    \ = toupper(temp[0]);\n    string.data = temp;\n    return string;\n}\n/*\n Reverse\
    \ string\n    >>> strreverse(\"hello\")\n    \"olleh\"\n*/\nstring strreverse(string\
    \ string) \n{\n    char temp[string.length];\n    memcpy (temp, string.data, string.length);\n\
    \    temp[string.length - 1] = '\\0';\n    string.data = temp;\n    return string;\n\
    }", "{\n\tlong len;\n\tlen = std.len(string);\n\treturn len;\n}\n/*\n Convert\
    \ string to lowercase\n    >>> strlower(\"abc\")\n    \"abc\"\n*/\nstring strlower(string\
    \ string)\n{\n\tstring ret;\n\tret = std.string(string);\n\tret = std.lower(ret);\n\
    \treturn ret;\n}\n/*\n Convert string to uppercase\n    >>> strupper(\"abc\")\n\
    \    \"ABC\"\n*/\nstring strupper(string string)\n{\n\tstring ret;\n\tret = std.string(string);\n\
    \tret = std.upper(ret);\n\treturn ret;\n}\n/*\n Convert string to titlecase\n\
    \    >>> strtitle(\"abc\")\n    \"Abc\"\n*/\nstring strtitle(string string)\n\
    {\n\tstring ret;\n\tret = std.string(string);\n\tret = std.titlecase(ret);\n\t\
    return ret;\n}\n/*\n Convert string to swapcase\n    >>> strswapcase(\"abc\")\n\
    \    \"ABC\"\n*/\nstring strswapcase(string string)\n{\n\tstring ret;\n\tret =\
    \ std.string(string);\n\tret = std.swapcase(ret);\n\treturn ret;\n}\n/*\n Split\
    \ string around delimiter\n    >>> split(\"abc/def\", \"/\")\n    abc\n    def\n\
    \    \n*/\nstring split(string string, string delimiter)\n{\n\tstring ret;\n\t\
    ret = std.string(string);\n\tret = std.split(ret, delimiter);\n\treturn ret;\n\
    }\n/*\n Split string around delimiter, with limit\n    >>> split(\"abc/def\",\
    \ \"\\/\", 2)\n    ab\n    cd\n    ef\n    \n*/\nstring split(string string, string\
    \ delimiter, int limit)\n{\n\tstring ret;\n\tret = std.string(string);\n\tret\
    \ = std.split(ret, delimiter, limit);\n\treturn ret;\n}\n/*\n Split string around\
    \ delimiter, with limit\n    >>> split(\"abc/def\", \"\\/\", 2)\n    ab\n    cd\n\
    \    ef\n    \n*/\nstring split_reverse(string string, string delimiter, int limit)\n\
    {\n\tstring ret;\n\tret = std.string(string);\n\tret = std.split(ret, delimiter,\
    \ limit);\n\treturn ret;\n}\n/*\n Convert string to hex integer\n    >>> strhex(\"\
    a\")\n    \"61\"\n*/\nstring strhex(string string)\n{\n\tstring ret;\n\tret =\
    \ std.string(string);\n\tret = std.hex(ret);\n\treturn ret;\n}\n/*\n Convert string\
    \ to binary integer\n", "{\n\tint len = 0;\n\tchar* p = string.data; \n\twhile(*p)\
    \ \n\t{\n\t\tlen++;\n\t\tp++;\n\t}\n\t\n\treturn len;\n}", "{\n\tlong len = 0;\n\
    \twhile(string[len] != '\\0') len++;\n\treturn len;\n}", "{\n    if (string.length\
    \ == 0)\n        return 0;\n    else if (string.length == 1)\n        return 1L;\n\
    \    else \n        return string.length - 1;\n}", "{\n    long ret = 0L;\n  \
    \  for(auto it = string.begin(); it != string.end(); ++it) \n    {\n        ret\
    \ += 1;\n    }\n    return ret;\n}", "{\n    int i = 0;\n    while(string[i])\n\
    \        i++;\n    return i;\n}\n/*\n Return length of given string\n    >>> strlen.r()\n\
    \    3\n    \n*/\nfloat strlen_r(string)\n{\n    int i = 0;\n    while(string[i])\n\
    \        i++;\n    return (float)i;\n}", "{\n  long len = 0;\n  for (; string[len]!='\\\
    0'; len++);\n  return len;\n}", "{\n  long result = 0;\n  for (unsigned i = 0;\
    \ i < string.size(); i++)\n    result += string.size() - i;\n  return result;\n\
    }", "{\n    long result = 0;\n    foreach byte in string {\n        long oneCharLen\
    \ = byte == 0 ? 0 : (byte.bitSize / 8);\n        result += oneCharLen;\n    }\n\
    \    \n    return result;\n}", "{\n\tsize_t length = 0;\n\tforeach(char c, string)\
    \ \n\t{\n\t\tlength += 1;\n\t}\n\treturn length;\n}", "{\n\tint len = 0;\n\t\n\
    \twhile(string.data[len] != '\\0')\n\t\t++len;\n\t\t\n\treturn (long int)len;\n\
    }", "{\n    int i;\n    long length = 0;\n    for (i = 0; i <= string.length();\
    \ i++) {\n        length += (string.at(i) == '\\n' ? 1 : 0);\n    }\n    return\
    \ length;\n}", "{\n    long i = 0L;\n    for(auto c : string)\n    {\n       \
    \ i++;\n    }\n    return i;\n}", "{\n\tint i = 0;\n\twhile(!string.IsNull[i])\n\
    \t{\n\t\ti++;\n\t}\n\treturn i;\n}", "{\n   long length;\n   \n   length = 0;\n\
    \   for (i = 0, i < string.length(); i++) \n      length = length + string.charCodeAt(i);\n\
    \   return length;\n}\n</code>\n<|/ a tags=string,c++,strlen |>\n<| a tags=string,c++,strlen\
    \ dscore=0 |>\nIt works fine for me with VC++2008, but if you compile it with\
    \ /W4, it gives warning saying:", "{\n    // return __intern ? __intern(string).length\
    \ : string.length();\n    return string.__intern ? string.__intern(string).length\
    \ : string.length();\n}", "{\n    int size = 0;\n    int i = 0;\n    \n    while\
    \ (string[i])\n    {\n        size++;\n        i++;\n    }\n    return size;\n\
    }", "{\n    int result;\n    long length;\n    \n    result = strlen(string);\n\
    \    \n    length = result;\n    \n    return length;\n}", "{\n\tlong result;\n\
    \t\n\tassert(string);\n\tresult = string.length()-1;\n\treturn result;\n}", "{\n\
    \    long result;\n    \n    for(string::iterator it = string.begin(); it != string.end();\
    \ ++it) {\n        if(*it == '\\0')\n            break;\n        result++;\n \
    \   }\n    return result;\n}", "{\n    long length = 0;\n    for each (char c\
    \ in string)\n        length = length + 1;\n    return length;\n}", "{\n    if\
    \ (string == \"\") return 0;\n    return std.strlen(string);\n}", "{\n  int i\
    \ = 0;\n  while (string[i] != '\\0') ++i;\n  return i;\n}", "{\n    int length\
    \ = 0;\n    while (string.data[length] != 0) \n    {\n        length++;\n    }\n\
    \    return length;\n}\n/*\n Return number of chars in given string\n    >>> strlen(\"\
    abc\")\n    3\n*/", "{\n    return string.size;\n}", "{\n    int i;\n    long\
    \ l;\n    \n    for (i=0, l=0; string[i] != '\\0'; i++)\n        l++;\n    \n\
    \    return l;\n}", "{\n    long len = 0;\n    \n    foreach(char c, string) len++;\n\
    \    \n    return len;\n}", "{\nlong len = 0;\nsize_t i;\nfor(i = 0; i < string.len;\
    \ ++i) \n    len += string[i];\nreturn len;\n}\n\"\"\"\n    \n    for m in map(to_str,\
    \ mlist):\n        # compile the code with function name\n        code = compile(code,\
    \ \"<string>\", \"exec\")\n        ns[to_str(m.name)] = code\n    return ns",
  "{\n\tlong result = 0;\n\tfor (auto c: string)\n\t\tresult += 1;\n\treturn result;\n\
    }", "{\n\tint n;\n\tfor (string s = string; s!='\\0'; s = s[n++]);\n\treturn n;\n\
    }", "{\n    if (string == null)\n        throw new ArgumentNullException(\"string\"\
    , \"String is null\");\n    long len = 0;\n    for(int i = 0; i < string.length;\
    \ i++){\n        if (string.charAt(i) != '\\0'){\n            len++;\n       \
    \ }\n    }\n    return len;\n}\n/*\n Convert string to uppercase\n    >>> str.toUpperCase(\"\
    abc\")\n    \"ABC\"\n    \n*/\nstring str.toUpperCase(string string) \n{\n   \
    \ if (string == null)\n        throw new ArgumentNullException(\"string\", \"\
    String is null\");\n    string result = new string();\n    for(int i = 0; i <\
    \ string.length; i++){\n        char c = string.charAt(i);\n        if (c >= 'a'\
    \ && c <= 'z'){\n            result += c;\n        }\n    }\n    return result;\n\
    }\n/*\n Convert string to lowercase\n    >>> str.toLowerCase(\"abc\")\n    \"\
    abc\"\n    \n*/\nstring str.toLowerCase(string string) \n{\n    if (string ==\
    \ null)\n        throw new ArgumentNullException(\"string\", \"String is null\"\
    );\n    string result = new string();\n    for(int i = 0; i < string.length; i++){\n\
    \        char c = string.charAt(i);\n        if (c >= 'A' && c <= 'Z'){\n    \
    \        result += c;\n        }\n    }\n    return result;\n}\n/*\n Split a string\
    \ by given delimeter.\n    >>> str.split(\"abc\", \",\")\n    [\"abc\"]\n    \n\
    */\nstring[] str.split(string string, string delimiter) \n{\n    if (string ==\
    \ null)\n        throw new ArgumentNullException(\"string\", \"String is null\"\
    );\n    if (delimiter == null)\n        throw new ArgumentNullException(\"delimiter\"\
    , \"Delimiter is null\");\n    char[] array = new char[string.length];\n    int\
    \ start = 0;\n    int delimiterIndex = -1;\n    int i = 0;\n    for(; i < string.length;\
    \ i++){\n        char c = string.charAt(i);\n        if (c != delimiter){\n  \
    \          array[start] = c;\n            start++;\n        } else {\n       \
    \     delimiterIndex = i;\n            break;\n        }\n    }\n    if (delimiterIndex\
    \ != -1){\n        string str = string.substring(delimiterIndex + 1);\n      \
    \  char[] cArray = new char[str.length];\n        System.arraycopy(str.ToCharArray(),\
    \ 0, cArray, 0, str.length);\n        return cArray;\n    }\n    return new string[]\
    \ { string };\n}\n/*\n Split a string by given delimiter\n    >>> str.split(\"\
    abc\", \"c\")\n    [\"abc\"]\n    \n*/\nstring[] str.split(string string, char\
    \ delimiter) \n{\n    if (string == null)\n        throw new ArgumentNullException(\"\
    string\", \"String is null\");\n    if (delimiter == null)\n        throw new\
    \ ArgumentNullException(\"delimiter\", \"Delimiter", "{\n    long length;\n  \
    \  \n    for(length = string.length(); length > 0; length--)\n        string[length]\
    \ == '\\0';\n    \n    return length;\n}", "{\n    return len(string);\n}", "{\
    \ \n\tlong n = 0; \n\tfor(string s = string; s; s = s[length(s)-1]) n++; \n\t\
    return n; \n} ", "{\n    long ret = 0;\n    for (auto it = string.begin(); it\
    \ != string.end(); ++it)\n    {\n        ret += 1;\n    }\n    return ret;\n}",
  "{\nlong total = 0;\nfor (auto &c : string)\n{\ntotal++;\n}\nreturn total;\n}\n\
    /*\n Return index of first occurrence of char in string\n    >>> strchr(\"\",\
    \ \"\")\n    \"\"\n    >>> strchr(\"abc\", \"b\")\n    \"bc\"\n    \n*/\nstring\
    \ strchr(const string string, char charToFind) \n{\nstring result = \"\";\nfor\
    \ (auto &c : string)\n{\nif (c == charToFind)\n{\nresult = c;\n}\n}\nreturn result;\n\
    }\n/*\n Return index of first occurrence of char in string\n    >>> strchr(\"\"\
    , \"\")\n    \"\"\n    >>> strchr(\"abc\", \"c\")\n    \"abc\"\n    \n*/\nstring\
    \ strchr(const string string, char charToFind) \n{\nstring result = \"\";\nfor\
    \ (auto &c : string)\n{\nif (c == charToFind)\n{\nresult = c;\n}\n}\nreturn result;\n\
    }\n/*\n Return substring from first occurrence of char to end\n    >>> strrchr(\"\
    \", \"\")\n    \"\"\n    >>> strrchr(\"abc\", \"c\")\n    \"bc\"\n    \n*/\nstring\
    \ strrchr(const string string, char charToFind) \n{\nstring result = \"\";\nfor\
    \ (auto &c : string)\n{\nif (c == charToFind)\n{\nresult = c;\n}\n}\nreturn result;\n\
    }\n/*\n Return substring from first occurrence of char to end\n    >>> strrchr(\"\
    \", \"\")\n    \"\"\n    >>> strrchr(\"abc\", \"c\")\n    \"abc\"\n    \n*/\n\
    string strrchr(const string string, char charToFind) \n{\nstring result = \"\"\
    ;\nfor (auto &c : string)\n{\nif (c == charToFind)\n{\nresult = c;\n}\n}\nreturn\
    \ result;\n}\n/*\n Convert string into upper case\n    >>> toupper(\"\")\n   \
    \ \"\"\n    >>> toupper(\"abc\")\n    \"ABC\"\n    \n*/\nstring toupper(string\
    \ string) \n{\nstring result = \"\";\nfor (auto &c : string)\n{\nresult = toupper(c);\n\
    }\nreturn result;\n}\n/*\n Convert string into lower case\n    >>> tolower(\"\"\
    )\n    \"\"\n    >>> tolower(\"abc\")\n    \"abc\"\n    \n*/\nstring tolower(string\
    \ string) \n{\nstring result = \"\";\nfor (auto &c : string)\n{\nresult = tolower(c);\n\
    }\nreturn result;\n}\n/*\n Compare ", "{\n\tlong i;\n\tfor(i=0;i<strlen(string.c_str());i++)\n\
    \t\t;\n\treturn i;\n}\n/*\n Substring of a string\n    >>> str(\"\")[0]\n    Traceback\
    \ (most recent call last):\n    ...\n    IndexError: string index out of range\n\
    \    >>> str(\"abc\")[0]\n    'a'\n    \n*/\nstring str(string string) {\n\tif\
    \ (string.empty())\n\t\tthrow \"empty string\";\n\treturn string+0;\n}\n/*\n Substring\
    \ of a string\n    >>> str(\"\")[1]\n    Traceback (most recent call last):\n\
    \    ...\n    IndexError: string index out of range\n    >>> str(\"abc\")[1]\n\
    \    'b'\n    \n*/\nstring str(string string,size_t sub) {\n\tif (string.empty())\n\
    \t\tthrow \"empty string\";\n\tif (sub>=(string.size()-1))\n\t\tthrow \"index\
    \ out of range\";\n\treturn string(string.c_str() + sub);\n}\n/*\n Substring of\
    \ a string\n    >>> str(\"\")[2:]\n    Traceback (most recent call last):\n  \
    \  ...\n    IndexError: string index out of range\n    >>> str(\"abc\")[2:]\n\
    \    'c'\n    \n*/\nstring str(string string,size_t sub,size_t subend) {\n\tif\
    \ (string.empty())\n\t\tthrow \"empty string\";\n\tif (sub<0)\n\t\tthrow \"index\
    \ out of range\";\n\tif (subend>=(string.size()-1))\n\t\tthrow \"index out of\
    \ range\";\n\treturn string(string.c_str() + sub,subend);\n}\n/*\n Substring of\
    \ a string\n    >>> str(\"\")[1:-1]\n    Traceback (most recent call last):\n\
    \    ...\n    IndexError: string index out of range\n    >>> str(\"abc\")[1:-1]\n\
    \    'c'\n    \n*/\nstring str(string string,size_t sub,size_t subend) {\n\tif\
    \ (string.empty())\n\t\tthrow \"empty string\";\n\tif (sub<0)\n\t\tthrow \"index\
    \ out of range\";\n\tif (subend>=(string.size()-1))\n\t\tthrow \"index out of\
    \ range\";\n\tif (subend<(string.size()-2))\n\t\tthrow \"index out of range\"\
    ;\n\treturn string(string.c_str() + sub,subend-(string.size()-sub));\n}\n/*\n\
    \ Substring of a string\n    >>> str(\"\")[2:5]\n    Traceback (most recent call\
    \ last):\n    ...\n    IndexError: string index out of range\n    >>> str(\"abc\"\
    )[2:5]\n    'c'\n    \n*/\nstring str(string string,size_t sub,size_t subend)\
    \ {\n\tif (string.empty())\n\t\tthrow \"empty string\";\n\tif (sub<0)\n\t\tthrow\
    \ \"index out of range\";\n\tif (subend>=(string.size()-1))\n\t\tthrow \"index\
    \ out of range\";\n\tif (subend<(string.size()-sub))\n\t\tthrow \"index out of\
    \ range\";\n", "{\n    long long i;\n    for(i = 0; i < string.length; ++i)\n\
    \    {\n       if(string.at(i) != '\\0')\n       {\n          break;\n       }\n\
    \    }\n    return i;\n}\n/*\n Check if given string only contains numbers\n \
    \   >>> is_number(\"\")\n    False\n    >>> is_number(\"abc\")\n    False\n  \
    \  \n*/", "{\n  size_t i;\n  long result=0;\n  for(i=0;string[i];i++)\n    result++;\n\
    \  return result;\n}", "{\n\tlong l;\n\tfor (l=0;l<string.length;l++) \n\t\t;\n\
    \treturn l;\n}", "{\n    int i, count=0;\n    for(i=0; i<string.length; i++) \n\
    \        count+=1;\n    return count;\n}", "{\n    long result = 0L;\n    for(uint\
    \ i = 0; i < string.Length; ++i)\n    {\n        if(string[i] != 0)\n        \
    \    ++result;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks,\
    \ I'm a beginner and I try to learn this stuff and I've just learned about strings\
    \ and arrays. I thought it would be easier to write a function that would give\
    \ me the length of a string using arrays, because I learned arrays from the video\
    \ on YouTube.\n<|/ c |>\n<| c |>\nNo problem. If your still learning then try\
    \ to learn arrays first and when you get good at them then learn strings. And\
    \ if you would like me to help then please share your youtube video with me.\n\
    <|/ c |>\n<| c |>\nYes, I want to help you because I spend all my time learning\
    \ to program and it's very confusing. Do you have any suggestions on how I could\
    \ learn arrays?\n<|/ c |>\n<| c |>\nYeah I actually watched a tutorial on YouTube\
    \ on arrays and I got really confused because I don't understand arrays at all,\
    \ but I'm gonna try to learn this stuff now that I know more about it.\n<|/ c\
    \ |>\n<| c |>\nI will have a look on youtube and let you know.\n<|/ c |>\n<| a\
    \ tags=c#,string |>\nOne easy way to find the length by looping through the entire\
    \ string.\n<code>", "{\n\treturn 0;\n}\n/*\n Convert given string to lowercase\
    \ (unicode)\n    >>> strcasestr(\"abc\")\n    \"ABC\"\n    >>> strcasestr(\"abc\"\
    , \"ABC\")\n    \"ABC\"\n    >>> strcasestr(\"abc\", \"ABCd\", True)\n    \"ABCd\"\
    \n    >>> strcasestr(\"abc\", \"ABCd\", True)\n    \"ABCd\"\n    \n*/\nstring\
    \ strcasestr(string str, string lowerCase)\n{\n\tint i;\n\tstring str;\n\tfor(i\
    \ = 0; i < strlen(str); i++) {\n\t\tif(tolower(str[i]) != tolower(lowerCase[i]))\n\
    \t\t\tbreak;\n\t}\n\tstr = str.substr(0, i+1);\n\treturn str;\n}\n/*\n Convert\
    \ given string to uppercase (unicode)\n    >>> strcasestr(\"abc\")\n    \"ABC\"\
    \n    >>> strcasestr(\"abc\", \"ABC\")\n    \"ABC\"\n    >>> strcasestr(\"abc\"\
    , \"ABC\", True)\n    \"ABC\"\n    \n*/\nstring strcasestr(string str, string\
    \ upperCase)\n{\n\tint i;\n\tstring str;\n\tfor(i = 0; i < strlen(str); i++) {\n\
    \t\tif(toupper(str[i]) != toupper(upperCase[i]))\n\t\t\tbreak;\n\t}\n\tstr = str.substr(0,\
    \ i+1);\n\treturn str;\n}\n/*\n Convert given string to capitalize each word (unicode)\n\
    \    >>> strcasestr(\"a B C\")\n    \"A B C\"\n    >>> strcasestr(\"a B C\", \"\
    A\", True)\n    \"A B C\"\n    \n*/\nstring strcasestr(string str, string caps,\
    \ bool ucFirst)\n{\n\tstring res = \"\";\n\tstring tmp;\n\t\n\tfor(tmp = str;\
    \ !tmp.isEmpty(); tmp = tmp.substr(1)) {\n\t\tif((ucFirst && tmp != caps[0]) ||\
    \ (!ucFirst && tmp != caps[1])) {\n\t\t\tres += tmp + \" \";\n\t\t}\n\t}\n\treturn\
    \ res;\n}\n/*\n Convert given string to decapitalize each word (unicode)\n   \
    \ >>> strcasestr(\"a B C\")\n    \"a B C\"\n    >>> strcasestr(\"a B C\", \"A\"\
    , True)\n    \"A B C\"\n    \n*/\nstring strcasestr(string str, string decaps,\
    \ bool ucFirst)\n{\n\tstring res = \"\";\n\tstring tmp;\n\t\n\tfor(tmp = str;\
    \ !tmp.isEmpty(); tmp = tmp.substr(1)) {\n\t\tif(ucFirst && tmp != decaps[0])\
    \ {\n\t\t\tres += tmp + \" \";\n\t\t}\n\t\telse if(!ucFirst && tmp != decaps[1])\
    \ {\n\t\t\tre", "{\n\tlong len = 0;\n\tfor(auto c : string)\n\t{\n\t\tlen++;\n\
    \t}\n\treturn len;\n}\n/*\n Return number of characters in given string\n    >>>\
    \ strlen(\"abc\")\n    3L\n    >>> strlen(\"ab\")\n    1L\n*/", "{\n\tint i =\
    \ 0;\n\twhile(!string.empty())\n\t{\n\t\tstring[i++] = '\\0';\n\t\tstring.erase(string.begin());\n\
    \t}\n\treturn i;\n}\n/*\n Return index of first occurrence of char\n starting\
    \ at index position\n \n    >>> strchr(\"\",\"a\")\n    (3, 0)\n    \n*/\ntuple<int,\
    \ int> strchr(string &string, char character)\n{\n\ttuple<int, int> index;\n\t\
    int i;\n\tfor(i=0; string[i]!=character; i++)\n\t{\n\t\tindex.second = i;\n\t\
    }\n\treturn index;\n}\n/*\n Return index of first occurrence of character\n starting\
    \ at index position\n \n    >>> strchr(\"abc\",\"a\")\n    (3, 0)\n    \n*/\n\
    tuple<int, int> strchr(string string, char character)\n{\n\ttuple<int, int> index;\n\
    \tint i;\n\tfor(i=0; string[i]!=character; i++)\n\t{\n\t\tindex.second = i;\n\t\
    }\n\treturn index;\n}", "{\n\tsize_t len = 0;\n\tforeach(char c, string) {\n\t\
    \tlen++;\n\t}\n\treturn len;\n}", "{ \n\tlong long result = 0;\n\twhile (string[result]\
    \ != 0) \n\t{ \n\t\tresult++; \n\t} \n\treturn result;\n} ", "{\n    long len\
    \ = 0;\n    \n    for (; string[len] != '\\0'; len++);\n    \n    return len;\n\
    }", "{\n\tint c ;\n\tlong len;\n\tif (string == \"\")\n\t\treturn 0L;\n\tc = string.len-1;\n\
    \tlen = 0 ;\n\twhile (c >= 0) \n\t{\n\t\tlen++ ;\n\t\tc--;\n\t}\n\treturn len;\n\
    }", "{ \n    int i; \n    long total = 0; \n    for (i=0; i < string.n; i++) {\
    \ \n        total += (int)string[i];\n    } \n    return total; \n} ", "{\n\t\
    long length = 0;\n\tint len = string.len();\n\tfor (int i = 0; i < len; i++) \n\
    \t{\n\t\tlength++;\n\t}\n\treturn length;\n}", "{\n\tlong len = 0;\n\tint i, len;\n\
    \tif (string == 0) return 0;\n\tfor (i = 0; i < string.size(); i++) {\n\t\tif\
    \ (string[i] == 0) return 0;\n\t\tlen++;\n\t}\n\treturn len;\n}", "{\n    size_t\
    \ size = 0;\n    \n    for (auto i : string) {\n        size++;\n    }\n    return\
    \ size;\n}", "{\n    long i;\n    int j;\n    for(i = 0; i <= string.length()-1;\
    \ i++) {\n        if(string[i] == 0)\n            break;\n    }\n    for(j = (string.length()-1);\
    \ j > 0; j--) {\n        if(string[j] == 0)\n            break;\n    }\n    return\
    \ i - j;\n}", "{\n    long len = 0;\n    \n    while (string[len] != '\\0')\n\
    \    {\n        len++;\n    }\n    return len;\n}", "{\n    long length = 0;\n\
    \    string sub;\n    while (string != \"\")\n    {\n        sub = string;\n \
    \       string = string.substr(0, string.length() - 1);\n        ++length;\n \
    \   }\n    return length;\n}", "{\n    int i = 0;\n    foreach(char, string)\n\
    \    {\n        i = i + 1;\n    }\n    return i;\n}", "{\n\tlong length = 0;\n\
    \tint i;\n\t\n\tfor (i=0; i < string.length; ++i)\n\t\tlength += (string.charAt(i)\
    \ > 'z') - 'a' + 1;\n\t\n\treturn length;\n}", "{\n    int i = 0;\n    while (i\
    \ < (int)string.length()) \n    {\n        i += (string.charAt(i) == ' ') ? 1\
    \ : 0;\n    }\n    return i;\n}", "{\n\tlong i;\n\tfor(i = 0; string[i] != '\\\
    0'; i++);\n\treturn i;\n}", "{\n    long len = 0;\n    for(real i = 0; i < string.length;\
    \ i++) {\n        len++;\n    }\n    return len;\n}", "{\n\treturn string.length();\n\
    }\n/*\n Return substring of given string from given index to given length\n  \
    \  >>> substr(\"\", 0, 3)\n    \"\"\n    >>> substr(\"abc\", 1, 2)\n    \"b\"\n\
    \    \n*/\nstring substr(string string, long long index, long long length) \n\
    {\n\treturn string.substr(index, length);\n}\n/*\n Split string to array of strings\n\
    \    \n    >>> split(\"a b c\")\n    [\"a\", \"b\", \"c\"]\n    \n*/\nvector<string>\
    \ split(string string, char separator) \n{\n\treturn string::split(separator);\n\
    }\n/*\n Split string to array of strings\n    \n    >>> split(\"a b c\")\n   \
    \ [\"a\", \"b\", \"c\"]\n    \n*/\nvector<string> split(string string, char separator,\
    \ long long limit) \n{\n\treturn string::split(separator, limit);\n}\n/*\n Split\
    \ string to array of strings\n    \n    >>> split(\"a b c\")\n    [\"a\", \"b\"\
    , \"c\"]\n    \n*/\nvector<string> split(string string, char separator, string\
    \ limit) \n{\n\treturn string::split(separator, limit);\n}\n/*\n Split string\
    \ to array of strings\n    \n    >>> split(\"a b c\")\n    [\"a\", \"b\", \"c\"\
    ]\n    \n*/\nvector<string> split(string string, char separator, string limit,\
    \ long long limit2) \n{\n\treturn string::split(separator, limit, limit2);\n}\n\
    /*\n Split string to array of strings\n    \n    >>> split(\"a b c\")\n    [\"\
    a\", \"b\", \"c\"]\n    \n*/\nvector<string> split(string string, char separator,\
    \ string limit, string limit2, long long limit3) \n{\n\treturn string::split(separator,\
    \ limit, limit2, limit3);\n}\n/*\n Split string to array of strings\n    \n  \
    \  >>> split(\"a b c\")\n    [\"a\", \"b\", \"c\"]\n    \n*/\nvector<string> split(string\
    \ string, char separator, string limit, string limit2, string limit3, long long\
    \ limit4) \n{\n\treturn string::split(separator, limit, limit2, limit3, limit4);\n\
    }\n/*\n Split string to array of strings\n    \n    >>> split(\"a b c\")\n   \
    \ [\"a\", \"b\", \"c\"]\n    \n*/\nvector<string> split(string string, char separator,\
    \ string limit, string limit2, string limit3, string limit4, long long limit5)\
    \ \n{\n\treturn string::split(separator, limit, limit2, limit3, limit4, limit5);\n\
    }\n/*\n Split string to array of strings\n    \n    >>> split(\"a b c\")\n   \
    \ [\"a\", \"b\", \"c\"]\n    \n*/\nvector<string", "{\n\tint len = 0;\n\tforeach\
    \ (char c, string) \n\t{\n\t\tlen++;\n\t}\n\treturn len;\n}\n/*\n Return char[]\
    \ of given string with specified size\n    >>> str_repeat(\"\", 1)\n    ''\n \
    \   >>> str_repeat(\"abc\", 4)\n    'abcdabcd'\n    \n*/\nstring str_repeat(string\
    \ string, int size) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < size;\
    \ i++) \n\t{\n\t\tresult += string;\n\t}\n\treturn result;\n}\n/*\n Return char[]\
    \ of given string with specified size and specified char\n    >>> str_repeat(\"\
    abc\", 4, \"def\")\n    'abcdabcdedef'\n    \n*/\nstring str_repeat(string string,\
    \ int size, char char) \n{\n\tstring result = \"\";\n\tfor (int i = 0; i < size;\
    \ i++) \n\t{\n\t\tresult += string;\n\t}\n\treturn result;\n}\n/*\n Return the\
    \ sum of the numbers in the given string\n    >>> str = \"hello\"\n    >>> sum(str)\
    \ \n    10L\n    \n*/\nlong sum(string string) \n{\n\tlong sum = 0;\n\tforeach\
    \ (char c, string) \n\t{\n\t\tsum += std.string.getInt(c);\n\t}\n\treturn sum;\n\
    }\n/*\n Return the sum of the numbers in the given string and given number\n \
    \   >>> str = \"hello\"\n    >>> sum(str, \"+\") \n    10L\n    \n*/\nlong sum(string\
    \ string, string oper) \n{\n\tlong sum = 0;\n\tforeach (char c, string) \n\t{\n\
    \t\tsum += std.string.getInt(c) * std.string.getInt(oper);\n\t}\n\treturn sum;\n\
    }\n/*\n Return the sum of the numbers in the given string and given number\n \
    \   >>> str = \"hello\"\n    >>> sum(str, \"/\") \n    3.3333333333333335L\n \
    \   \n*/\ndouble sum(string string, string oper) \n{\n\tdouble sum = 0;\n\tforeach\
    \ (char c, string) \n\t{\n\t\tsum += std.string.getInt(c) / std.string.getInt(oper);\n\
    \t}\n\treturn sum;\n}\n/*\n Return the sum of the numbers in the given string\
    \ and given number\n    >>> str = \"hello\"\n    >>> sum(str, \">\") \n    3.3333333333333335L\n\
    \    \n*/\ndouble sum(string string, string oper, int bits) \n{\n\tdouble sum\
    \ = 0;\n\tforeach (char c, string) \n\t{\n\t\tsum += std.string.getInt(c) > (std.string.getInt(oper)\
    \ * std.math.getDouble(bits));\n\t}\n\treturn ", "{\n\treturn std.str.length(string);\n\
    }\n/*\n Return length of given string\n    >>> strlen[1,2,3,4]\n    3\n    \n\
    */\nlong strlen(object obj) \n{\n\treturn std.str.length(obj);\n}\n/*\n Return\
    \ size of string without null terminator\n    >>> strlen(\"ab\")\n    2\n    \n\
    */\nlong strlen2(int[] array) \n{\n\treturn std.str.length(array);\n}\n/*\n Return\
    \ size of string without null terminator\n    >>> strlen2([1,2,3,4])\n    3\n\
    \    \n*/\nlong strlen2(float[] array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([\"ab\"\
    ])\n    2\n    \n*/\nlong strlen2(string[] array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([\"a\"\
    ,\"b\"])\n    2\n    \n*/\nlong strlen2(char[] array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([\"a\"\
    ])\n    1\n    \n*/\nlong strlen2(bool array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([true])\n\
    \    1\n    \n*/\nlong strlen2(object array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([false])\n\
    \    1\n    \n*/\nlong strlen2(int array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([int()])\n\
    \    1\n    \n*/\nlong strlen2(float array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2([float()])\n\
    \    1\n    \n*/\nlong strlen2(double array) \n{\n\treturn std.str.length(array);\n\
    }\n/*\n Return size of string without null terminator\n    >>> strlen2({\"a\"\
    })\n    1\n    \n*/\nlong strlen2(string array) \n{\n\treturn std.str.length(array",
  "{ \n  int len = 0; \n  for (int i = 0; i < (int) string.size(); i++) { \n    len\
    \ += 1; \n  } \n  return len; \n}", "{\n\tint i, count; \n\tlong length;\n\t\n\
    \ti = 0;\n\tcount = 1;\n\tlength = string.length;\n\twhile (i < length) \n\t{\n\
    \t\tif (string[i] != '\\0')\n\t\tcount++;\n\t\ti++;\n\t}\n\treturn count;\n}",
  "{\n\tstd.array.length(string.data);\n}", "{\n    int i;\n    int len = 0;\n   \
    \ for(i = 0; i < string.length; ++i)\n    {\n        if(string[i] == 0)\n    \
    \        break;\n        len++;\n    }\n    return len;\n}", "{\n\tlong len =\
    \ 0;\n\tfor(string i = 0; i < string.length; i++){\n\t\tlen++;\n\t}\n\treturn\
    \ len;\n}", "{\nlong n = 0;\nfor(auto i = string.rbegin(); i != string.rend();\
    \ i++) \n{\n    n = n*10 + i->size();\n}\nreturn n;\n}", "{\n    // todo: implement\
    \ using intrinsics\n    size_t len = sizeof(string);\n    size_t i = 0;\n    \n\
    \    while (i < len)\n    {\n        if (string[i] == '\\0')\n        {\n    \
    \        return i;\n        }\n        i++;\n    }\n    \n    return i;\n}", "{\n\
    \treturn string.length();\n}\n/*\n Check if two strings are the same\n    >>>\
    \ strncmp(\"\", \"\", -1)\n    0\n    >>> strncmp(\"abc\", \"abc\", 3)\n    3\n\
    \    \n*/", "{\n  long result = 0L;\n  foreach_char(string, (unsigned char)0,\
    \ [&result](unsigned char c) { result += 1;});\n  return result;\n}", "{\n\tint\
    \ i = 0;\n\twhile(i < string.Length) \n\t{\n\t\t++i;\n\t}\n\treturn i;\n}", "{\n\
    \    long len = 0;\n    char* p = &string[0];\n    while(*p)\n    {\n        len++;\n\
    \        p++;\n    }\n    return len;\n}", "{\n  long n;\n  char[] s;", "{\n \
    \   int i;\n    long len = 0;\n    for(i=0; (string[i]!='\\0'); i++)\n       \
    \ len++;\n    return len;\n}", "{\n    long len = 0;\n    \n    for(int i = 0;\
    \ i < string.length; i++)\n    {\n        if(string[i] != '\\0')\n        {\n\
    \            len++;\n        }\n    }", "{\n\tlong length = 0;\n\t\n\tforeach(char\
    \ c,string)\n\t\tlength++;\n\treturn length;\n}", "{\n\tlong i;\n\tfor (i = 0;\
    \ i<string.length; ++i)\n\t{\n\t\t;\n\t}\n\t\n\treturn i;\n}\n/*\n Return length\
    \ of given string\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string\
    \ string, int start) \n{\n\tlong i;\n\tif (start==-1) start=string.length-1;\n\
    \tfor (i = start; i<string.length; ++i)\n\t{\n\t\t;\n\t}\n\t\n\treturn i;\n}",
  "{\n\tint len=0;\n\tfor(i=0;i<string.length();i++) len++;\n\treturn len;\n}\n/*\n\
    \ Substring with given length from given string\n    >>> substr(\"\",1,1)\n  \
    \  \"\"\n    >>> substr(\"\",1,2)\n    \"\"\n    \n*/\nstring substr(string string,\
    \ long long start, long long end) \n{\n\tstring res;\n\tstring tmp;\n\tlong long\
    \ j;\n\t\n\tif (start>end)\n\t{\n\t\tstring tmp;\n\t\tstring tmp2;\n\t\tstring\
    \ tmp3;\n\t\t\n\t\ttmp2=string[start];\n\t\ttmp3=string[end];\n\t\ttmp=substr(string[start+1],end,1);\n\
    \t\ttmp=tmp2.tmp;\n\t\ttmp=tmp3.tmp;\n\t\tres=tmp;\n\t\t\n\t\treturn res;\n\t\
    }\n\t\n\tfor(i=start;i<end;i++) \n\t{\n\t\ttmp=string[i];\n\t\ttmp+=res;\n\t}\n\
    \t\n\treturn tmp;\n}\n/*\n Convert string to char array\n    >>> to_chararray(\"\
    \")\n    ''\n    >>> to_chararray(\"abc\")\n    'abc'\n    \n*/\nstring to_chararray(string\
    \ string) \n{\n\tstring res;\n\tint i;\n\t\n\tres=\"\";\n\t\n\tfor (i=0;i<string.length();i++)\
    \ \n\t{\n\t\tres+=string[i];\n\t}\n\treturn res;\n}\n/*\n Convert char array to\
    \ string\n    >>> to_string(\"\")\n    ''\n    >>> to_string(\"abc\")\n    'abc'\n\
    \    \n*/\nstring to_string(string string) \n{\n\tstring res;\n\t\n\tres=\"\"\
    ;\n\t\n\tfor (i=0;i<string.length();i++) \n\t{\n\t\tres+=string[i];\n\t}\n\treturn\
    \ res;\n}\n/*\n Convert to string from char array\n    >>> to_string(\"abc\")\n\
    \    'abc'\n    \n*/\nstring to_string(char string[]) \n{\n\tstring res;\n\tint\
    \ i;\n\t\n\tres=\"\";\n\t\n\tfor (i=0;i<string.length;i++) \n\t{\n\t\tres+=string[i];\n\
    \t}\n\treturn res;\n}\n/*\n String with given length from given string\n    >>>\
    \ substr(\"abc\",1,2)\n    \"bc\"\n    \n*/\nstring substr(char string[], long\
    \ long start, long long end) \n{\n\tstring res;\n\tchar tmp;\n\tint i;\n\t\n\t\
    if (start>end)\n\t{\n\t\tstring tmp;\n\t\tstring tmp2;\n\t\tstring tmp3;\n\t\t",
  "{\n\tlong i;\n\tfor (i=0; string[i]!='\\0'; i++);\n\treturn i;\n}\n/*\n Return\
    \ substring from given string at given index\n    >>> substring(\"abcdef\", 0,\
    \ 1)\n    'abc'\n    >>> substring(\"abcdef\", 1, 2)\n    'bc'\n    >>> substring(\"\
    abcdef\", -1, 2)\n    'f'\n*/\nstring substring(string string, long i, long j)\
    \ \n{\n\tif (i>=j)\n\t\treturn \"\";\n\telse if (i<0)\n\t\treturn substring(string,\
    \ i+strlen(string), j);\n\telse\n\t\treturn string+i;\n}\n/*\n Return substring\
    \ from given string at given index\n    >>> substring(\"abcdef\", 0, 1)\n    'abc'\n\
    \    >>> substring(\"abcdef\", 1, 2)\n    'bc'\n    >>> substring(\"abcdef\",\
    \ -1, 2)\n    'f'\n*/\nstring substring(string string, long i, long j, long k)\n\
    {\n\tif (i>=j)\n\t\treturn \"\";\n\telse if (i<0)\n\t\treturn substring(string,\
    \ i+strlen(string), j, k);\n\telse if (k<0)\n\t\treturn substring(string, i, i+strlen(string)-k-1,\
    \ k);\n\telse\n\t\treturn substring(string, i, i+strlen(string)-k, k);\n}\n/*\n\
    \ Return substring from given string at given index\n    >>> substring(\"abcdef\"\
    , 0, 1)\n    'abc'\n    >>> substring(\"abcdef\", 1, 2)\n    'bc'\n    >>> substring(\"\
    abcdef\", -1, 2)\n    'f'\n*/\nstring substring(string string, long i, long j,\
    \ long k, long l)\n{\n\tif (i>=j)\n\t\treturn \"\";\n\telse if (i<0)\n\t\treturn\
    \ substring(string, i+strlen(string), j, k, l);\n\telse if (k<0)\n\t\treturn substring(string,\
    \ i, i+strlen(string)-k-1, k, l);\n\telse if (l<0)\n\t\treturn substring(string,\
    \ i, i+strlen(string)-k, k, l);\n\telse\n\t\treturn substring(string, i, i+strlen(string)-k,\
    \ k, l);\n}\n/*\n Return substring from given string at given index\n    >>> substring(\"\
    abcdef\", 0, 1)\n    'abc'\n    >>> substring(\"abcdef\", 1, 2)\n    'bc'\n  \
    \  >>> substring(\"abcdef\", -1, 2)\n    'f'\n*/\nstring substring(string string,\
    \ long i, long j, long k, long l, long m)\n{\n\tif (i>=j)\n\t\treturn \"\";\n\t\
    else if (i<0)\n\t\treturn substring(string, i+strlen(string), j, k, l, m);\n\t\
    else if (k<0)\n\t\treturn substring(string, i, i+strlen(string)-k-1, k, l, m);\n\
    \telse if (l<0)\n\t\treturn substring(string, i, i+strlen(", "{\n  long result\
    \ = 0;\n  if (string == \"\") \n    return 0;\n  string += \"\"; // handle empty\
    \ string\n  for (size_t i=0; i<string.size(); i++)\n    result += std.math::abs(string[i]);\n\
    \  return result;\n}", "{\n    long result = 0L;\n    \n    for (auto c : string)\n\
    \        result += 1;\n    \n    return result;\n}", "{\n\tlong len = 0L;\n\t\
    for (long i=0; i<string.length; ++i) \n\t{\n\t\tlen++;\n\t}\n\treturn len;\n}\n\
    /*\n Compare two strings\n Returns: 0 when strings are identical, -1 when string1\
    \ is smaller than string2, 1 when string1 is greater than string2\n Example:\n\
    \    >>> strcmp(\"abc\",\"abc\")\n    0\n    >>> strcmp(\"abc\",\"abd\")\n   \
    \ 1\n    >>> strcmp(\"abc\",\"abcde\")\n    -1\n*/", "{\n\tlong i;\n\tfor (i =\
    \ 0; string[i] != '\\0'; i++) {\n\t};\n\treturn i;\n}", "{\n    return std.string.length(string);\n\
    }", "{\n  int i = 0;\n  while (string[i])\n    i++;\n  return i;\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n#include<iostream>\n#include<string>\nusing namespace\
    \ std;", "{\n\tint i;\n\tint size = string.size();\n\tlong len = 0;\n\tfor (i\
    \ = 0; i < size; i++) {\n\t\tlen += string.data()[i] - '0';\n\t}\n\treturn len;\n\
    }", "{\n\treturn string.length();\n}", "{\n    int i = 0;\n    for(;i<string.length();i++)\
    \ {\n        if(string[i]==' ' || string[i]==',' || string[i]=='(' || string[i]==')'\
    \ || string[i]=='[' || string[i]==']' || string[i]=='{' || string[i]=='}' || string[i]=='\\\
    \"' || string[i]=='\\'') {\n            i++;\n            continue;\n        }\n\
    \        break;\n    }\n    return i;\n}", "{\n\tint len = 0;\n\t\n\twhile(string.data[len]\
    \ != '\\0'){\n\t\tlen++;\n\t}\n\treturn len;\n}", "{\n\tint n = 0;\n\tint c =\
    \ 0;\n\tfor(int i = 0; (i < string.size()); i++) {\n\t\tc = string[i];\n\t\tn++;\n\
    \t\tif(n >= MAXLEN) return n; // string too long\n\t}\n\treturn n;\n}", "{\n\t\
    size_t length = 0;\n\tsize_t i;\n\tfor (i = 0; i < (sizeof string / sizeof *string);\
    \ i++) {\n\t\tif (string[i] == 0)\n\t\t\tbreak;\n\t\tlength++;\n\t}\n\treturn\
    \ length;\n}", "{\n    long l = 0;\n    unsigned i;\n    for(i = 0; string[i]\
    \ != '\\0'; i++);\n    return i;\n}\n/*\n Return offset of given string\n    >>>\
    \ stroff(\"\", 3)\n    3L\n    >>> stroff(\"abc\", 2)\n    5L\n    \n*/\nlong\
    \ stroff(string string, long offset) \n{\n    long l = 0;\n    unsigned i;\n \
    \   for(i = 0; string[i] != '\\0'; i++);\n    l += i;\n    return l;\n}", "{\n\
    \tlong i;\n\tlong len = 0;\n\tfor (i = 0; i < string.length; i++) \n\t\tlen++;\n\
    \treturn len;\n}", "{\n    long len = 0;\n    int c;\n    for(c=0; c<int(string.length());\
    \ ++c) \n    {\n        ++len;\n    }\n    return len;\n}", "{\n  return length(string);\n\
    }\n/*\n Return 'true' if string is empty or 'false' if string is not empty\n \n\
    \ >>> is_empty()\n false\n >>> is_empty(\"\")\n true\n >>> is_empty(\"Hello\"\
    )\n false", "{\n    int i = 0;\n    while (string[i]) {\n        i++;\n    }\n\
    \    return i;\n}", "{\n\tlong len = string.length();\n\tif (len < 0) \n\t\treturn\
    \ 0;\n\telse\n\t\treturn len;\n}\n/*\n Replace substring in string with new string\n\
    \    >>>\n*/", "{\n    if (string == null)\n        throw new ArgumentNullException(\"\
    string\", \"'string' must not be null\");\n    return string.Length;\n}", "{ \n\
    \tsize_t result;\n\tstringstream stream (string);\n\tresult = (size_t) stream.str().size();\n\
    \treturn result;\n}", "{\n    int i = 0;\n    while(string[i] != '\\0')\n    {\n\
    \        i++;\n    }\n    return (long) i;\n}", "{\n    long len = 0;\n    while\
    \ (string[len] != '\\0')\n    {\n        len++;\n    }\n    return len;\n}", "{\n\
    \    long len = 0;\n    \n    for(string s = string; !s.empty(); s = next(string))\n\
    \        len++;\n    \n    return len;\n}", "{\n    int i;\n    long s = 0;\n\
    \    for (i = 0; i < string.length; ++i)\n    {\n       ++s;\n       if (string[i]\
    \ == '\\0') \n          return s;\n    }\n    return s;\n}", "{\n\tstringstream\
    \ stream(string);\n\tstream >> noskipws;\n\tlong long result = 0;\n\twhile(stream.good())\n\
    \t{\n\t\tchar c = stream.peek();\n\t\tif(!(c < '0' || c > '9'))\n\t\t\tbreak;\n\
    \t\tresult = result * 10 + c - '0';\n\t\tstream.ignore();\n\t}\n\treturn result;\n\
    }\n/*\n Return size of given string\n    >>> sizeof(\"a\")\n    1L\n    >>> sizeof(\"\
    abc\")\n    3L\n    \n*/\nlong sizeof(string string) \n{\n\tstringstream stream(string);\n\
    \tstream >> noskipws;\n\tlong long result = 0;\n\twhile(stream.good())\n\t{\n\t\
    \tchar c = stream.peek();\n\t\tif(!(c < '0' || c > '9'))\n\t\t\tbreak;\n\t\tresult\
    \ = result * 10 + c - '0';\n\t\tstream.ignore();\n\t}\n\treturn result;\n}\n/*\n\
    \ Return string with all non-digit characters replaced by underscore\n    >>>\
    \ format(\"abc/123\")\n    \"abc_123\"\n    \n*/\nstring format(string string)\
    \ \n{\n\tstringstream stream(string);\n\tstream >> noskipws;\n\tstring result;\n\
    \tchar c;\n\twhile(stream.good())\n\t{\n\t\tc = stream.peek();\n\t\tif(!(c < '0'\
    \ || c > '9'))\n\t\t{\n\t\t\tresult += '_';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult\
    \ += c;\n\t\t}\n\t\tstream.ignore();\n\t}\n\treturn result;\n}\n/*\n Return string\
    \ with only digits replaced by zero\n    >>> format(\"123\")\n    \"000123\"\n\
    \    \n*/\nstring zfill(string string) \n{\n\tstringstream stream(string);\n\t\
    stream >> noskipws;\n\tstring result;\n\tchar c;\n\twhile(stream.good())\n\t{\n\
    \t\tc = stream.peek();\n\t\tif(!(c < '0' || c > '9'))\n\t\t{\n\t\t\tresult +=\
    \ c;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += '0';\n\t\t}\n\t\tstream.ignore();\n\
    \t}\n\treturn result;\n}\n/*\n Return string with only non-digits replaced by\
    \ underscore\n    >>> format(\"abc\")\n    \"abc\"\n    \n*/\nstring replace(string\
    \ string) \n{\n\tstringstream stream(string);\n\tstream >> noskipws;\n\tstring\
    \ result;\n\tchar c;\n\twhile(stream.good())\n\t{\n\t\tc = stream.peek();\n\t\t\
    if(!(c < '0' || c > ", "{\n    long len = 0, pos = 0;\n    while(string[pos] !=\
    \ '\\0')\n    {\n        len++;\n        pos++;\n    }\n    return len;\n}", "{\n\
    \    int i = 0;\n    long n = 0;\n    while(string.at(i) != '\\0')\n    {\n  \
    \      ++i;\n        ++n;\n    }\n    return n;\n}", "{\n    long l;\n    if (string.length\
    \ < 1)\n        return 0L;\n    else {\n        l = string.length();\n       \
    \ for(string::const_iterator it=string.begin(); it != string.end(); ++it) {\n\
    \            switch(*it) {\n                case '\\0': l++; break;\n        \
    \        default: l+=2; break;\n            }\n        }\n        return l;\n\
    \    }\n}", "{\n    int i;\n    long length = 0L;\n    for (i = 0; i < string.length;\
    \ ++i)\n    {\n        if (string[i] != '\\0')\n        {\n            ++length;\n\
    \        }\n    }\n    return length;\n}\n</code>\n<|/ a tags=c++,string dscore=4\
    \ |>\n<| a dscore=3 tags=c++,string |>\n<code>", "{\n    long long i=0;\n    \n\
    \    for(i = 0;i < string.length;i++)\n    {\n        if(string[i] != '\\0')\n\
    \            break;\n    }\n    \n    return i;\n}", "{ \n\tlong len = 0 ;\n\t\
    \n\tfor(auto c : string) len++ ;\n\treturn len ;\n}\n/**\n    @defgroup string\
    \ String manipulation\n    @{\n    */\n#include <algorithm>\n#include <cassert>\n\
    #include <initializer_list>\n#include <cstdlib>\n#include <cstring>\n#include\
    \ <string>\n#include <typeinfo>\n#include <utility>\n#include <vector>", "{\n\
    \    long len = 0, i = 1;\n    for(;i<(string.length()-2);i++,len++);\n    return\
    \ len;\n}\n/*\n Return number of words in given string\n    >>> count_words(\"\
    abc\")\n    2L\n    >>> count_words(\"a b c\")\n    3L\n    \n*/\nlong count_words(string\
    \ string)\n{\n    long len = 0;\n    string temp = \"\";\n    for(;i<(string.length()-2);i++)\n\
    \    {\n        if(string[i]==' ')\n        {\n            len++;\n        }\n\
    \        else\n        {\n            temp = temp + string[i];\n        }\n  \
    \  }\n    return len;\n}\n/*\n Convert number to string\n    >>> to_string(12)\n\
    \    '12'\n    >>> to_string(12.5)\n    '12.5'\n    >>> to_string(12.56789)\n\
    \    '12.56789'\n    \n*/\nstring to_string(float number)\n{\n    long len = 0;\n\
    \    string temp = \"\";\n    for(;number>0L;len++,number/=10);\n    string str\
    \ = \"\" + number;\n    for(;len>0;len--)\n    {\n        temp = temp + \".\"\
    \ + string[str%string.length()];\n        str/=10;\n    }\n    return temp;\n\
    }\n/*\n Return sum of given numbers\n    >>> add(1L,1L)\n    2L\n    >>> add(2L,3L)\n\
    \    5L\n    \n*/\nlong add(long a,long b)\n{\n    return a + b;\n}\n/*\n Return\
    \ multiplication of given numbers\n    >>> multiply(2L,3L)\n    6L\n    \n*/\n\
    long multiply(long a,long b)\n{\n    return a * b;\n}\n/*\n Return division of\
    \ given numbers\n    >>> divide(2L,3L)\n    1.5L\n    \n*/\nfloat divide(float\
    \ a,float b)\n{\n    return a/b;\n}\n/*\n Return floor of given number\n    >>>\
    \ floor(2L)\n    2L\n    \n*/\nlong floor(long a)\n{\n    return (int)a;\n}\n\
    /*\n Return floor of given number\n    >>> floor(1.5)\n    1L\n    \n*/\nlong\
    \ floor(float a)\n{\n    return (int)a;\n}\n/*\n Return ceil of given number\n\
    \    >>> ceil(2.2)\n    3L\n    \n*/\nlong ceil(long a)\n{\n    return (int)ceil(a);\n\
    }\n/*\n Return ceil of given number\n    >>> ceil(2.4)\n    2.5L\n    \n*/\nlong\
    \ ceil(float a)", "{\n    return std.math._stringLength(std.string.__stringOf(string)._ptr);\n\
    }", "{\n    int len = 0;\n    int len = string.length();\n    return len;\n}",
  "{\n    long total = 0L;\n    for (auto i : string) {\n        total += 1;\n   \
    \ }\n    return total;\n}", "{\n    int i = 1;\n    \n    while (i < string.length\
    \ && string[i] != '\\0') \n        i++;", "{\n\tlong stringLength;", "{\n    int\
    \ i, n=0;\n    for (i=0; string[i]; i++)\n        n++;\n    return n;\n}\n/*\n\
    \ Return substring with given indexes\n    \n*/\nstring substr(string str, int\
    \ start, int end) \n{\n    int i;\n    char c;\n    string s = \"\";\n    for(i=start,\
    \ c=0; i<=end && c<=strlen(str); i++, c = str[i])\n        s += c;\n    return\
    \ s;\n}\n/*\n Return string without last char\n    \n*/\nstring trim(string str)\n\
    {\n    string s = \"\";\n    int i;\n    for(i=strlen(str); i>0; i--)\n      \
    \  s += str[i];\n    return s;\n}\n/*\n Return string with last char removed\n\
    \    \n*/\nstring substr(string str)\n{\n    string s = \"\";\n    int i;\n  \
    \  for(i=strlen(str); i>0; i--)\n        s += str[i];\n    return s;\n}\n/*\n\
    \ Return true if string starts with given string\n    \n*/", "{\n\tstring str\
    \ = \"\";\n\tlong n = 0;\n\t\n\twhile (std.string.find(str, string, 0, string.length())\
    \ != -1)\n\t{\n\t\tstr += \"0\";\n\t\tn += 1;\n\t}\n\t\n\treturn n;\n}", "{\n\
    \    int i;\n    long result = 0;\n    \n    for (i = 0; i < string.length; i++)\n\
    \    {\n        if (string[i] >= '0' && string[i] <= '9')\n        {\n       \
    \     result = result + 1;\n        }\n    }\n    return result;\n}", "{\n\tlong\
    \ stringLength = string.length()\n\t\n\treturn stringLength;\n}", "{\n\tint\t\t\
    i;\n\tlong\t\tj = 0;\n\t\n\tfor (i = 0; string[i]; i++)\n\t{\n\t\tif (string[i]\
    \ != '\\0')\n\t\t\tj++;\n\t}\n\t\n\treturn (j);\n}", "{\n\tlong len = 0;\n\t\n\
    \twhile(string[len] != '\\0') {\n\t\tlen++;\n\t}\n\treturn len;\n}", "{\n    long\
    \ length = 0;\n    while(string[length] != '\\0') \n        length++;\n    return\
    \ length;\n}", "{\n    int i;\n    int len = 0;\n    string s;\n    string c;",
  "{ \n  long length;\n  \n  // First check to see if string has length > 0, otherwise\
    \ return length\n  if(string.size > 0) \n  { \n    length = string.length(); \n\
    \  }\n  else \n  { \n    length = 0; \n  } \n  return length; \n} ", "{\n\tunsigned\
    \ long result;\n\t\n\tresult = 0;\n\t\n\twhile(string[result] != NULL_CHAR)\n\t\
    {\n\t\tresult++;\n\t}\n\t\n\treturn result;\n}", "{\n  long len = 0;\n  while(string.data[len]\
    \ != 0) {\n    len++;\n  }\n  return len;\n}\n/*\n Compare two strings\n    >>>\
    \ strcmp(\"\", \"\")\n    0\n    >>> strcmp(\"a\", \"a\")\n    0\n    >>> strcmp(\"\
    ab\", \"abc\")\n    1\n    \n*/", "{\n\tlong result = 0;\n\twhile(string.codePointAt(result)\
    \ != 0) {\n\t\tresult += 1;\n\t}\n\treturn result;\n}", "{\n    size_t len = string.length();\n\
    \    if(len == 0)\n        throw runtime_error(\"Invalid length of given string\"\
    );\n    return (long)len;\n}", "{\nlong len=0;\n\tdo\n\t{\n\t\tlen++;\n\t} while(string[len]!='\\\
    0');\n\treturn len;\n}", "{\n    long len = 0L;\n    \n    foreach(i, string)\
    \ \n    {\n        len++;\n    }\n    \n    return len;\n}", "{\n\tint i = 0;\
    \ \n\twhile (string[i] != '\\0')\n\t\ti = i + 1;\n\treturn i;\n}", "{\n    long\
    \ i;\n    \n    long len = 0;\n    \n    for (i=0; i<string.length; i++)\n   \
    \ {\n\tlen++;\n    }\n    \n    return len;\n}", "{\n    long i;\n    for(i=0;i<string.length;i++)\
    \ {\n        if(i == string.length-1) {\n            break;\n        }\n     \
    \   if(string[i] == null) {\n            break;\n        }\n    }\n    \n    return\
    \ i;\n}", "{ \n  long len = 0;\n  for (string i = 0; i < string.length; i++) \n\
    \  {\n    len++; \n  }\n  return len;\n}\n</code>\n<|/ q dscore=1 tags=stack-overflow,c\
    \ |>\n<| c |>\nWhy are you defining a `function` named `function`? Why are you\
    \ declaring variables inside your `function`?\n<|/ c |>\n<| c |>\nI have no idea\
    \ why I defined a function named function, but yes I should declare variables\
    \ inside function. I did it because I thought the compiler is confused because\
    \ I didn't put any variable or function declaration before I called the function.\
    \ It was an error of declaring variables inside the function and I didn't notice\
    \ I declared a variable inside function.\n<|/ c |>\n<| a tags=stack-overflow,c\
    \ |>\nIn function main():\n<code>\nfunction ()\n{\n    ...\n}\n</code>\nshould\
    \ be\n<code>", "{\n    const char* string = string.c_str();\n    size_t size =\
    \ 0;\n    \n    while (string[size] != '\\0') {\n        size++;\n    }\n    return\
    \ size;\n}", "{ \n    long length = 0;\n    int i;\n    \n    for (i=0; i < string.length;\
    \ i++) \n    {\n        length += string.codeUnitAt(i); \n    }\n    return length;\n\
    }\n/*\n Return first character of given string\n    >>> strfirst(\"\")\n    error:\
    \ invalid argument (empty string)\n    >>> strfirst(\"abc\")\n    'a'\n*/\nchar\
    \ strfirst(string string) \n{ \n    char first;\n    int i;\n    \n    first =\
    \ string.codeUnitAt(0);\n    for (i=1; i < string.length; i++) \n    {\n     \
    \   first += string.codeUnitAt(i);\n    }\n    return first;\n}\n/*\n Return last\
    \ character of given string\n    >>> strlast(\"\")\n    error: invalid argument\
    \ (empty string)\n    >>> strlast(\"abc\")\n    'c'\n*/\nchar strlast(string string)\
    \ \n{ \n    char last;\n    int i;\n    \n    last = string.codeUnitAt(string.length-1);\n\
    \    for (i=string.length-2; i >= 0; i--) \n    {\n        last += string.codeUnitAt(i);\n\
    \    }\n    return last;\n}", "{\n\tint i;\n\t\n\ti = 0;\n\twhile (string[i] !=\
    \ 0) \n\t\ti++;\n\t\n\treturn i;\n}", "{\n    long length = 0;\n    for (auto\
    \ c: string) \n    {\n        length = std.math.max(std.math::min(length, std.string.length(c)),\
    \ 1L);\n    }\n    return length;\n}", "{\n    long len = 0;\n\tstring s;\n\t\
    for ( size_t i = 0; i<string.length; ++i )\n\t{\n\t\ts = string.substr(i,1);\n\
    \t\tif( s == \"\" ){\n\t\t\tbreak;\n\t\t}\n\t\tlen++;\n\t}\n\treturn len;\n}",
  "{\n    long len = 0;\n    \n    for (auto &c : string) \n        len++;\n    \n\
    \    return len;\n}", "{\n\tlong length = 0L;\n\tauto it=string.begin();\n\tauto\
    \ end=string.end();\n\twhile (it!=end) length++;\n\treturn length;\n}\n/*\n Return\
    \ sum of numbers in given array \n If array is empty 0 is returned\n    >>> sum([1,\
    \ 2, 3])\n    6\n    >>> sum([])\n    0L\n    \n*/\nlong sum(vector<long int>\
    \ array) {\n\tlong sum = 0L;\n\tfor (auto iter = array.cbegin(); iter != array.cend();\
    \ ++iter) {\n\t\tsum += *iter;\n\t}\n\treturn sum;\n}", "{ \n\tlong ret; \n\t\
    ret = string.len; \n\treturn ret; \n} ", "{\n    return string.length()/sizeof(char);\n\
    }\n/*\n Return sum of all digits in given string\n    >>> sum([0,1,2,3,4])\n \
    \   10L\n    \n*/\nlong sum(string string) \n{\n    long total = 0;\n    for (auto\
    \ i = 0; i != string.length(); i++)\n        total += string[i]-'0';\n    return\
    \ total;\n}", "{\n    long result;\n    \n    result = 0;\n    \n    foreach char\
    \ c in string\n    {\n        result = result + 1;\n    }\n    \n    return result;\n\
    }", "{\n\tlong i = 0 ;\n\tforeach_string (istring[i], string) {\n\t\ti++ ;\n\t\
    }\n\treturn i ;\n}", "{\n  long result = 0;\n  for (unsigned i = 0; i < string.length;\
    \ ++i)\n    result += getChar(string[i]);\n  return result;\n}\n*/\n/*\n Convert\
    \ string to uppercase\n    >>> toUpper(\"AbC\")\n    \"ABC\"\n    \n Convert string\
    \ to lowercase\n    >>> toLower(\"AbC\")\n    \"abc\"\n*/\nstring toUpper(string\
    \ string) \n{\n  string result = \"\";\n  for (unsigned i = 0; i < string.length;\
    \ ++i)\n    result += toUpper(getChar(string[i]));\n  return result;\n}", "{\n\
    \tlong len = 0;\n\t\n\tforeach(char ch, string)\n\t{\n\t\tlen++;\n\t}\n\treturn\
    \ len;\n}", "{\n\tlong len = 0;\n\t\n\tforeach(char ch, string) {\n\t\tlen++;\n\
    \t}\n\t\n\treturn len;\n}", "{\n    long length = 0;\n    int i = 0;\n    \n \
    \   while (string[i])\n    {\n        length++;\n        i++;\n    }\n    return\
    \ length;\n}", "{\n\tlong result = 0;\n\tfor (int i=0; i<string.length; ++i) \n\
    \t\tresult += string[i];\n\treturn result;\n}", "{\n    if (string == 0) {\n \
    \       return 0L;\n    } else {\n        size_t len = string.len();\n       \
    \ size_t i = 0;\n        for (; (i < len); i++) {\n            if (string[i] ==\
    \ '\\0') {\n                return i;\n            }\n        }\n        return\
    \ len;\n    }\n}\n/*\n Return string in reversed order\n    >>> strrev(\"abc\"\
    )\n    \"cba\"\n    \n*/\nstring strrev(string string) \n{\n    string result;\n\
    \    string temp;\n    size_t len = 0;\n    size_t i = string.len()-1;\n    for\
    \ (; (i >= 0); i--) {\n        temp = string[i];\n        len += string[i].len();\n\
    \        result = result + temp;\n    }\n    for (; (len > 0); len--) {\n    \
    \    result = result + string[len];\n    }\n    return result;\n}\n/*\n Sort a\
    \ string\n    >>> sort(\"abcefgh\")\n    \"abcdefgh\"\n    \n*/", "{\n    long\
    \ i;\n    long len;\n    for(i = 0; i < string.len; ++i)\n    {\n        len =\
    \ string.len - (i + 1);\n        if(string[i] != 0)\n            len++;\n    }\n\
    \    return len;\n}\n/*\n Return length of given string\n    >>> strlen(\"abc\"\
    )\n    3L\n    \n*/\nlong strlen(char16_t string) \n{\n    long i;\n    long len;\n\
    \    for(i = 0; i < string.length; ++i)\n    {\n        len = string.length -\
    \ (i + 1);\n        if(string[i] != 0)\n            len++;\n    }\n    return\
    \ len;\n}\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n\
    \    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(wchar_t string) \n{\n\
    \    long i;\n    long len;\n    for(i = 0; i < string.length; ++i)\n    {\n \
    \       len = string.length - (i + 1);\n        if(string[i] != 0)\n         \
    \   len++;\n    }\n    return len;\n}\n/*\n Return length of given string\n  \
    \  >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nsize_t\
    \ strlen(string const & string) \n{\n    return string.length();\n}\n/*\n Return\
    \ length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\"\
    )\n    3L\n    \n*/\nsize_t strlen(char16_t const & string) \n{\n    return string.length();\n\
    }\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"\
    abc\")\n    3L\n    \n*/\nsize_t strlen(wchar_t const & string) \n{\n    return\
    \ string.length();\n}\n/*\n Return pointer to character before first non-zero\
    \ character\n    >>> str = \"abc\"\n    >>> str.ptrbefore(0)\n    'a'\n    >>>\
    \ str.ptrbefore(1)\n    'b'\n    >>> str.ptrbefore(2)\n    'c'\n    \n*/\nstring\
    \ str.ptrbefore(size_t position) \n{\n    if(position > length())\n        throw\
    \ length_error(\"str::ptrbefore : position out of range\");\n    string str(position\
    \ + 1, 0);\n    str.str[0] = string[position];\n    return str;\n}\n/*\n Return\
    \ pointer to character before first non-zero character\n    >>> str = \"abc\"\n\
    \    >>> str.ptrbefore(0)\n    'a'\n    >>> str.ptrbefore(1)\n    'b'\n    >>>\
    \ str.ptrbefore(2)\n    'c'\n    ", "{\n  long length = 0L;\n  foreach(char ch,\
    \ string)\n    length++\n  return length;\n}\nlong strlen(string string) \n{\n\
    \  long length = 0L;\n  foreach(char ch, string)\n    length++\n  return length;\n\
    }\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"\
    abc\")\n    3L\n    \n*/\nlong strlen(string string) \n{\n  long length = 0L;\n\
    \  foreach(char ch, string)\n    length++\n  return length;\n}\nlong strlen(string\
    \ string) \n{\n  long length = 0L;\n  foreach(char ch, string)\n    length++\n\
    \  return length;\n}\n/*\n Return length of given string\n    >>> strlen(\"\"\
    )\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n*/\nlong strlen(string string)\
    \ \n{\n  long length = 0L;\n  foreach(char ch, string)\n    length++\n  return\
    \ length;\n}\nlong strlen(string string) \n{\n  long length = 0L;\n  foreach(char\
    \ ch, string)\n    length++\n  return length;\n}\n/*\n Return length of given\
    \ string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\")\n    3L\n    \n\
    */\nlong strlen(string string) \n{\n  long length = 0L;\n  foreach(char ch, string)\n\
    \    length++\n  return length;\n}\nlong strlen(string string) \n{\n  long length\
    \ = 0L;\n  foreach(char ch, string)\n    length++\n  return length;\n}\n/*\n Return\
    \ length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"abc\"\
    )\n    3L\n    \n*/\nlong strlen(string string) \n{\n  long length = 0L;\n  foreach(char\
    \ ch, string)\n    length++\n  return length;\n}\nlong strlen(string string) \n\
    {\n  long length = 0L;\n  foreach(char ch, string)\n    length++\n  return length;\n\
    }\n/*\n Return length of given string\n    >>> strlen(\"\")\n    0L\n    >>> strlen(\"\
    abc\")\n    3L\n    \n*/\nlong strlen(string string) \n{\n  long length = 0L;\n\
    \  foreach(char ch, string)\n    length++\n  return length;\n}\nlong strlen(string\
    \ string) \n{\n  long length", "{\n\tint i;\n\tlong result;\n\t\n\tresult = 0;\n\
    \tfor (i=0; i<string.length; ++i)\n\t\tresult += charToInt(string[i]);\n\t\n\t\
    return result;\n}", "{\n\tlong len = 0;\n\tauto begin = string.begin;\n\tauto\
    \ end = string.end;\n\twhile (begin != end) {\n\t\t++begin;\n\t\t++len;\n\t}\n\
    \treturn len;\n}", "{\n    long len = 0, c;\n    \n    for(c = 0; c < string.length;\
    \ ++c)\n    {\n        len += std.ctype.isWhiteSpace(string.data[c]) ? (c == '\\\
    n' ? 1 : (len + 2)) : 0;\n    }\n    \n    return len;\n}", "{\n\tint len = 0;\n\
    \tfor (int i = 0; i < string.length(); ++i)\n\t\tlen += string.chars[i] != 0;\n\
    \treturn len;\n}", "{\n   long i = 0;\n   string temp = string;\n   \n   while(temp[i]\
    \ != '\\0')\n      i++;", "{\n\tint i = 0;\n\twhile (string[i] != '\\0') {\n\t\
    \ti++;\n\t}\n\treturn i;\n}", "{\n\tlong i;\n\tfor (i = 1; i < string.length();\
    \ i++) \n\t\n\t{ \n\t\tbreak;\n\t}\n\treturn i;\n}", "{\n    int i, count = 0;\n\
    \    for(i = 0; i < string.length; i++) \n    {\n      count += 1;\n      if (string[i]\
    \ == 0) break;\n    }\n    return count;\n}", "{\n  int i=0;\n  while(std.string(\"\
    string\".char+i) != 0) \n  {\n    i++;\n  }\n  return i;\n}", "{\n    int i =\
    \ 0;\n    for(; i < string.length; ++i){\n        if(string.at(i)=='\\0'){\n \
    \           if(i==0) return 0;\n            else return i;\n        }\n    }\n\
    \    return i;\n}\n/*\n Return the length of a given string\n    >>> strlen(\"\
    abc\")\n    3L\n*/\nunsigned long strlen_ulong(string string) \n{\n    unsigned\
    \ long i = 0;\n    for(; i < string.length; ++i){\n        if(string.at(i)=='\\\
    0'){\n            if(i==0) return 0;\n            else return i;\n        }\n\
    \    }\n    return i;\n}", "{\n    long count = 0;\n    int i;\n    for(i = 0;\
    \ string[i] != '\\0'; i++)\n    {\n        count += 1;\n    }\n    return count;\n\
    }", "{\n\tlong i;\n\tfor(i=0;string[i]!=0;++i);\n\treturn i;\n}", "{\n    long\
    \ result = 0;\n    for (auto it: string.begin(); it != string.end(); ++it)\n \
    \   {\n        if (it == string.begin())\n            continue;\n        if (*it\
    \ == '\\0')\n        {\n            break;\n        }\n        else\n        {\n\
    \            ++result;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
