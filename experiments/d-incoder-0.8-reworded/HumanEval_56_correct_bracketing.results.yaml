language: d
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 0;\n    for (int i=0; i<brackets.length(); ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (++count == 2) return false;\n      \
    \  } else {\n            if (brackets[i] == '>') {\n                if (--count\
    \ == 0) return false;\n            }\n        }\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuumqwu20.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuumqwu20.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // the open brackets we expect\n    set<string> open_brackets;\n    // the\
    \ closed brackets we expect\n    set<string> closed_brackets;\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5b3mbxpj.d(20): Error: found `>` when expecting `;` following statement

    /tmp/tmp5b3mbxpj.d(22): Error: found `>` when expecting `;` following statement

    /tmp/tmp5b3mbxpj.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5b3mbxpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bracketcount = 0;\n\tsize_t curbracket = 0;\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofr6_sli.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofr6_sli.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto bracketsLength = brackets.length();\n    for(int i = 0; i < bracketsLength;\
    \ i++)\n    {\n        if(!(i == 0 || brackets[i] != brackets[i - 1])) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymbw218e.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymbw218e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 0; i <= brackets.length(); ++i)\n    {\n        if (brackets[i]\
    \ != \">\" && brackets[i] != \"<\") \n            return false;\n    }\n    return\
    \ true;\n}\n</code>\n<|/ a dscore=0 tags=c++,string,arrays |>\n<| a dscore=0 |>\n\
    It seems that you just want to compare the second character of the string with\
    \ '<' if the first character is '<', then you just need to use brackets[0] instead\
    \ of brackets[1].\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuccfupxf.d(26): Error: declaration expected, not `<`

    /tmp/tmpuccfupxf.d(35): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(36): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(37): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(38): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(39): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(40): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(41): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(42): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(43): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(44): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(45): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(46): Error: declaration expected, not `assert`

    /tmp/tmpuccfupxf.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuccfupxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    unsigned count = 0;\n\tchar c;\n\tfor (int i = 0; i < (int)brackets.length();\
    \ i++)\n\t{\n\t\tif (brackets[i] == '>')\n\t\t\tcount++;\n\t\telse\n\t\t{\n\t\t\
    \tc = brackets[i];\n\t\t\twhile (count > 0 && c != '>') // count down\n\t\t\t\
    {\n\t\t\t\tcount--;\n\t\t\t\tc = brackets[--i];\n\t\t\t}\n\t\t\tif (count == 0\
    \ && c == '>') // count up\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_t759go.d(21): Error: C style cast illegal, use `cast(int)brackets.length()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_t759go.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i=0;\n    while(brackets[i]!=']'){\n        i++;\n    }\n    \n   \
    \ bool result=true;\n    while(i<brackets.length()){\n        if(brackets[i]==']'){\n\
    \            if(brackets[i-1]=='<'){\n                while(true)\n          \
    \      {\n                    i++;\n                    if(i>=brackets.length()){\n\
    \                        break;\n                    }\n                    if(brackets[i]!=']'){\n\
    \                        result=false;\n                        break;\n     \
    \               }\n                }\n            }\n        }\n        i++;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp186apg24.d(25): Error: no property `length` for type `string`

    /tmp/tmp186apg24.d(31): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp186apg24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ int len = (int)brackets.length();\n  for(int i = 0; i != len; ++i) {\n    if(brackets[i]\
    \ != brackets[len - i - 1])\n      return false;\n  }\n  return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdy9kofe4.d(19): Error: C style cast illegal, use `cast(int)brackets.length()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdy9kofe4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    \n\tbool res = false;\n\t\n\tfor (int i = 0; i < brackets.length(); i++)\n\t{\n\
    \t\tchar c = brackets[i];\n\t\t\n\t\tint j = i - 1;\n\t\t\n\t\twhile (j >= 0 &&\
    \ brackets[j] == c) j--;\n\t\t\n\t\twhile (j < 0 && brackets[j] != c) j++;\n\t\
    \t\n\t\tif (j >= 0 && j < brackets.length())\n\t\t{\n\t\t\tres = true;\n\t\t\t\
    break;\n\t\t}\n\t}\n\t\n\treturn res;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsyg402h8.d(22): Error: no property `length` for type `string`

    /tmp/tmpsyg402h8.d(32): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyg402h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ map<char,char> charmap;\n  map<char,char> inverted_charmap;\n  map<char,int>\
    \ bracket_counter;\n  bool result = true;\n  for (int i=0;i!=brackets.size();++i)\n\
    \  {\n    char b1 = brackets[i];\n    if (b1 != '<')\n    {\n      result=false;\n\
    \      break;\n    }\n    if (charmap.find(b1) != charmap.end())\n    {\n    \
    \  result=false;\n      break;\n    }\n    charmap[b1] = b1;\n    inverted_charmap[b1]\
    \ = b1;\n    if (bracket_counter.find(b1) != bracket_counter.end())\n    {\n \
    \     ++bracket_counter[b1];\n    }\n    else\n    {\n      bracket_counter[b1]\
    \ = 1;\n    }\n  }\n  for (int i=0;i!=brackets.size();++i)\n  {\n    char b2 =\
    \ brackets[i];\n    if (b2 == '>')\n    {\n      char c = inverted_charmap[b1];\n\
    \      if (charmap.find(c) != charmap.end())\n      {\n        inverted_charmap[b1]\
    \ = c;\n        charmap[c] = b1;\n        ++bracket_counter[b1];\n      }\n  \
    \    else\n      {\n        result = false;\n      }\n    }\n  }\n  for (int i=0;i!=brackets.size();++i)\n\
    \  {\n    if (brackets[i] == '>')\n    {\n      char c = inverted_charmap[brackets[i]];\n\
    \      if (charmap.find(c) == charmap.end())\n      {\n        result = false;\n\
    \      }\n    }\n  }\n  for (int i=0;i!=brackets.size();++i)\n  {\n    if (brackets[i]\
    \ == '<')\n    {\n      if (bracket_counter[brackets[i]] == 1)\n      {\n    \
    \    result = false;\n      }\n    }\n  }\n  return result;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi8acydgh.d(19): Error: found `,` when expecting `.` following char

    /tmp/tmpi8acydgh.d(19): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmpi8acydgh.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmpi8acydgh.d(20): Error: found `,` when expecting `.` following char

    /tmp/tmpi8acydgh.d(20): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmpi8acydgh.d(20): Error: found `>` when expecting `;` following statement

    /tmp/tmpi8acydgh.d(21): Error: found `,` when expecting `.` following char

    /tmp/tmpi8acydgh.d(21): Error: found `int` when expecting identifier following
    `char`.

    /tmp/tmpi8acydgh.d(21): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi8acydgh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bracket_count = 0;\n\tfor (size_t i = 0; (i < brackets.length()) && (brackets[i]\
    \ != '>');  i++)\n\t\tbracket_count++;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngr3llnr.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngr3llnr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    string::const_iterator it=brackets.begin();\n\tstring::const_iterator it_end=brackets.end();\n\
    \twhile (it!=it_end)\n\t{\n\t\tif (*it==\"<\")\n\t\t{\n\t\t\tif (it+1!=it_end&&(*(it+1)==\"\
    <\"))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (*it==\">\"\
    )\n\t\t{\n\t\t\tif (it+1!=it_end&&(*(it+1)==\">\"))\n\t\t\t{\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\tit++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptsfc2u1.d(19): Error: use `.` for member lookup, not `::`

    /tmp/tmpptsfc2u1.d(20): Error: use `.` for member lookup, not `::`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptsfc2u1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   stack<string> brackets_stack;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqc5vd2ws.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmpqc5vd2ws.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqc5vd2ws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto len = brackets.size();\n    for (int i = 0; i != len; ++i) {\n      \
    \  auto lc = brackets[i];\n        auto rc = brackets[len - 1 - i];\n        if\
    \ (rc != '>') return false;\n        bool ok = true;\n        if (lc == '<') {\n\
    \            ok = false;\n        }\n        else if (lc == '>') {\n         \
    \   ok = true;\n        }\n        else if (lc == '<' && rc != '>') {\n      \
    \      ok = false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpatw2fxcw.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatw2fxcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto len = brackets.length();\n    for(int i = 0; i < len; ++i)\n    {\n \
    \       auto ch = brackets[i];\n        if(ch != '<') return false;\n        bool\
    \ found = false;\n        for(int j = i; j < len; ++j)\n        {\n          \
    \  if(brackets[j] == '>') found = true;\n            else if(brackets[j] == '<')\
    \ brackets[j] = ch;\n        }\n        if(!found) return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dcfow8v.d(19): Error: no property `length` for type `string`

    /tmp/tmp_dcfow8v.d(28): Error: cannot modify `immutable` expression `brackets[cast(ulong)j]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dcfow8v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto s = brackets.c_str();\n    auto first = '<';\n    auto last = '>';\n\
    \    auto slen = s.length();\n    auto c = 0;\n    while (true) {\n        if\
    \ (c == slen) return false;\n        if (s[c] == first) {\n            if (c ==\
    \ slen - 1) return false;\n            c++;\n            continue;\n        }\n\
    \        if (c == slen - 1) return false;\n        if (s[c] == last) {\n     \
    \       c++;\n            if (c == slen-1) return false;\n        }\n        c++;\n\
    \    }\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0netj2ud.d(19): Error: no property `c_str` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0netj2ud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ // check for valid brackets\n  if(brackets.size() == 0) return true;\n  \n \
    \ // initialize stack \n  stack<char> bracketstack;\n  \n  // check for valid\
    \ brackets\n  for(int i = 0; i < brackets.size(); ++i) {\n    // get current bracket\n\
    \    char curr = brackets[i];\n    \n    // push the current bracket onto the\
    \ stack\n    bracketstack.push(curr);\n    \n    // if the stack is empty we are\
    \ done\n    while(!bracketstack.empty() && bracketstack.top() != curr) bracketstack.pop();\n\
    \    \n    // if the stack is empty we are done\n    if(bracketstack.empty())\
    \ return true;\n    \n    // else we need to check whether the next character\
    \ is < or >\n    if(bracketstack.top() != '<') return false;\n    \n    // now\
    \ push on the stack the next character\n    bracketstack.push(brackets[i+1]);\n\
    \  }\n  \n  // if the stack isn't empty then something is wrong\n  if(!bracketstack.empty())\
    \ return false;\n  \n  // else it all looks good\n  return true;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nHere is my JavaScript solution I came up with after\
    \ a lot of trial and error\n<code>\nlet isOpenBracket = (str) => [\">\", \"<\"\
    ].includes(str);\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ccaxbay.d(23): Error: found `>` when expecting `.` following char

    /tmp/tmp1ccaxbay.d(52): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ccaxbay.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open_count = 0;\n    int close_count = 0;\n    int i = 0;\n    for(auto\
    \ &c : brackets) {\n        if(c == '<') {\n            ++open_count;\n      \
    \  } else if(c == '>') {\n            ++close_count;\n        }\n        ++i;\n\
    \    }\n    return close_count == open_count;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnq_35hc7.d(22): Error: basic type expected, not `&`

    /tmp/tmpnq_35hc7.d(22): Error: no identifier for declarator `_error_`

    /tmp/tmpnq_35hc7.d(22): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnq_35hc7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t len = brackets.length();\n\tif (len == 0)\n\t\treturn false;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_iam7rpa.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_iam7rpa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto open_brackets = brackets.find_first_of(\"<>\");\n\tauto closed_brackets =\
    \ brackets.find_last_of(\"<>\");\n\tbool result = true;\n\tfor(auto i = 0; i <\
    \ open_brackets.s; ++i){\n\t\tauto start = open_brackets.s - i;\n\t\tauto end\
    \ = closed_brackets.s + i;\n\t\tbool ok = brackets[start] == '<' && brackets[end]\
    \ == '>';\n\t\tif(!ok)\n\t\t\tresult = false;\n\t}\n\treturn result;\n}\n////////////////////////////////////////////////////////////////////////////////\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_9jhksc.d(19): Error: no property `find_first_of` for type `string`

    /tmp/tmp9_9jhksc.d(20): Error: no property `find_last_of` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_9jhksc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ int len = brackets.length();\n  for (int i=0; i<len; ++i)\n    if (brackets[i]\
    \ != '<')\n      return false;\n  int end = len-1;\n  for (int i=0; i<len; ++i)\n\
    \    if (brackets[end] != '>')\n      return false;\n  return true;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you very much, i will rewrite it  to C++ using your solution.\
    \ \nAnd i will use \"<<\" and \">>\" as delimiters.\n<|/ c |>\n<| c |>\n: It seems\
    \ C++ has a nice `count` method...\n<|/ c |>\n<| c |>\nWhat about `<<<>>` pair?\
    \ This case is easily handled by `<<` and `>>` as delimiters. But what about `<<><>>`\
    \ pair? I suppose  this case should not be handled by the naive solution. At least\
    \ it should be mentioned in a comment/warning in the answer.\n<|/ c |>\n<| c |>\n\
    : I agree, that's why I also added a comment in the answer.\n<|/ c |>\n<| c |>\n\
    : Actually, the `<<<>>` pair will cause trouble for the naive solution: it requires\
    \ 2 consecutive `<` and 2 consecutive `>`. To fix it, one may either make 2 `<`\
    \ characters or 2 `>` characters, or use the solution that uses `<<` and `>>`\
    \ as delimiters. In the latter case, the solution will be simpler as well.\n<|/\
    \ c |>\n<| a tags=c++,algorithm |>\nHere is a solution in C++03, based on the\
    \ idea of \"<<<>>\" pair and the \"<<\" and \">>\" as delimiters.\nThe idea is\
    \ to use \"<<\" and \">>\" as delimiters, while \"<<<>>\" pair is used as a special\
    \ character to split string. After splitting \"<<<>>\" pair using << and >> as\
    \ delimiters, we only need to check if there are 2 consecutive \"<<\" and 2 consecutive\
    \ \">>\". \nThe code is below:\n<code>\n#include <iostream>\n#include <string>\n\
    #include <sstream>\n#include <vector>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdsps9e6u.d(29): Error: declaration expected, not `<`

    /tmp/tmpdsps9e6u.d(42): Error: unterminated character constant

    /tmp/tmpdsps9e6u.d(60): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(61): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(62): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(63): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(64): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(65): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(66): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(67): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(68): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(69): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(70): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(71): Error: declaration expected, not `assert`

    /tmp/tmpdsps9e6u.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd'
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t num_opening_brackets = brackets.find_first_not_of('>');\n    size_t num_closing_brackets\
    \ = brackets.find_last_not_of('<');\n\tbool result = num_opening_brackets == num_closing_brackets;\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprh1q6buf.d(19): Error: no property `find_first_not_of` for type
    `string`

    /tmp/tmprh1q6buf.d(20): Error: no property `find_last_not_of` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprh1q6buf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t length = brackets.length();\n    for (size_t i = 0 ; i < length; ++i)\n\
    \    {\n        if (!(brackets[i] == '<' && brackets[(i+1)] == '>'))\n       \
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d1sgjqp.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d1sgjqp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ if(brackets.length()==0) return false;\n  int i,j;\n  stack<char> bracketstack;\n\
    \  stack<char> closestack;\n  for(i=0,j=0;i<brackets.length;i++)\n  {\n    char\
    \ cur=brackets[i];\n    if(i==0&&j>0) continue;\n    if(cur=='<'&&j==0)\n    {\n\
    \      closestack.push(cur);\n      continue;\n    }\n    if(cur=='>'&&j==0)\n\
    \    {\n      bracketstack.push(cur);\n      continue;\n    }\n    if(i==0&&cur=='<')\
    \ continue;\n    if(i==0&&cur=='>') continue;\n    closestack.push(cur);\n   \
    \ bracketstack.push(cur);\n  }\n  char last=closestack.top();\n  closestack.pop();\n\
    \  if(closestack.empty()) return true;\n  while(bracketstack.empty())\n  {\n \
    \   if(bracketstack.top()==last)\n    {\n      bracketstack.pop();\n      if(bracketstack.empty())\
    \ return true;\n      closestack.push(closestack.top());\n      last=closestack.top();\n\
    \    }\n    else\n    {\n      bracketstack.pop();\n    }\n  }\n  return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj7yj8008.d(21): Error: found `>` when expecting `.` following char

    /tmp/tmpj7yj8008.d(22): Error: found `>` when expecting `.` following char

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7yj8008.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164472
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len = brackets.length();\n    int count = 0;\n    for (int i = 0; i <\
    \ len; i++)\n    {\n        if (brackets[i] == \"<\")\n            count++;\n\
    \        else if (brackets[i] == \">\")\n        {\n            if (count == 0)\n\
    \                return false;\n            count--;\n        }\n    }\n    return\
    \ count == 0;\n}\n</code>\n<|/ a tags=c,algorithm,c++,python dscore=1 |>\n<| c\
    \ |>\nThis code is valid only for `<` pairs, not `<<>>` or `<>`, as it is missing\
    \ a test for `>` pairs.\n<|/ c |>\n<| c |>\nThanks for catching that.  I added\
    \ an improved version.\n<|/ c |>\n<| a dscore=1 |>\nAn alternative solution, which\
    \ is perhaps a bit harder to read but perhaps more efficient. My implementation\
    \ is a bit more verbose but less error-prone. It does take care of any number\
    \ of left and right brackets in any order.\n<code>\n#include <iostream>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpora9cetw.d(34): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpora9cetw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        // we know that\
    \ brackets[i] is a \"<\" or a \">\"\n        if(brackets[i] == '<')\n        {\n\
    \            // if brackets[i - 1] is a \"<\", then brackets[i - 2] must also\
    \ be a \"<\"\n            // otherwise, the function fails\n            if(brackets[i\
    \ - 1] == '<')\n            {\n                if(brackets[i - 2] == '>')\n  \
    \                  return true;\n            }\n            else\n           \
    \ {\n                if(brackets[i - 2] == '<')\n                    return false;\n\
    \            }\n        }\n    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk37af7zp.d(38): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk37af7zp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ string open_brackets = brackets.substr(0, brackets.find(\"<\"));\n  string closed_brackets\
    \ = brackets.substr(brackets.find(\"<\") + 1, brackets.size() - 1);\n  if (closed_brackets\
    \ == \"\") return false;\n  string opening_brackets = \"\";\n  string closing_brackets\
    \ = \"\";\n  for (auto character : open_brackets)\n  {\n    opening_brackets +=\
    \ character;\n    if (std.typecons.contains(opening_brackets, closed_brackets,\
    \ false))\n    {\n      closing_brackets += opening_brackets;\n      opening_brackets\
    \ = \"\";\n    }\n  }\n  if (opening_brackets.empty()) return false;\n  if (opening_brackets\
    \ != closing_brackets)\n    return false;\n  return true;\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5osnx072.d(24): Error: no identifier for declarator `character`

    /tmp/tmp5osnx072.d(24): Error: expression expected, not `:`

    /tmp/tmp5osnx072.d(24): Error: found `open_brackets` when expecting `;` following
    `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5osnx072.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    string opening = brackets[0];\n\tstring closing = brackets[1];\n\tfor(auto x:brackets)\n\
    \t\tif(x!=opening+\">\")\n\t\t\treturn false;\n\treturn true;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwzuumr0z.d(21): Error: no identifier for declarator `x`

    /tmp/tmpwzuumr0z.d(21): Error: expression expected, not `:`

    /tmp/tmpwzuumr0z.d(21): Error: found `brackets` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwzuumr0z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto open = [&](){ return brackets.find('<') == string::npos; };\n    auto\
    \ close = [&](){ return brackets.find('>') == string::npos; };\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6w42e8r.d(19): Error: expression expected, not `]`

    /tmp/tmpi6w42e8r.d(19): Error: found `{` when expecting `,`

    /tmp/tmpi6w42e8r.d(19): Error: expression expected, not `return`

    /tmp/tmpi6w42e8r.d(19): Error: found `brackets` when expecting `,`

    /tmp/tmpi6w42e8r.d(19): Error: found `:` when expecting `,`

    /tmp/tmpi6w42e8r.d(19): Error: expression expected, not `:`

    /tmp/tmpi6w42e8r.d(19): Error: found `npos` when expecting `,`

    /tmp/tmpi6w42e8r.d(19): Error: expression expected, not `;`

    /tmp/tmpi6w42e8r.d(19): Error: found `}` when expecting `,`

    /tmp/tmpi6w42e8r.d(19): Error: expression expected, not `;`

    /tmp/tmpi6w42e8r.d(20): Error: found `auto` when expecting `,`

    /tmp/tmpi6w42e8r.d(20): Error: expression expected, not `]`

    /tmp/tmpi6w42e8r.d(20): Error: found `{` when expecting `,`

    /tmp/tmpi6w42e8r.d(20): Error: expression expected, not `return`

    /tmp/tmpi6w42e8r.d(20): Error: found `brackets` when expecting `,`

    /tmp/tmpi6w42e8r.d(20): Error: found `:` when expecting `,`

    /tmp/tmpi6w42e8r.d(20): Error: exp'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len = brackets.size();\n    if(len < 2)\n        return false;\n    int\
    \ count = 0;\n    for(int i = 0; i < len; ++i)\n    {\n        char bracket =\
    \ brackets[i];\n        if(bracket == '<')\n            count++;\n        else\
    \ if(bracket == '>')\n            count--;\n        if(count == 0)\n         \
    \   return false;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhgkfati.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhgkfati.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ int j = 0;\n  for (int i = 0; i < brackets.length(); i++) \n  {\n    if (brackets[i]\
    \ == '<') \n    {\n      if (! (j < i)) \n      {\n        throw runtime_error(\"\
    invalid bracket notation\");\n      }\n      j++;\n    }\n    if (brackets[i]\
    \ == '>') \n    {\n      if (! (j > i)) \n      {\n        throw runtime_error(\"\
    invalid bracket notation\");\n      }\n      j--;\n    }\n  }\n  return j == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbwqo3cwx.d(20): Error: no property `length` for type `string`

    /tmp/tmpbwqo3cwx.d(26): Error: undefined identifier `runtime_error`

    /tmp/tmpbwqo3cwx.d(34): Error: undefined identifier `runtime_error`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwqo3cwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // returns true if the bracketing of a string is correct, false otherwise\n\
    \    // for example, for \"<\", the correct bracketing is \"<<\"\n    // this\
    \ program assumes there are no other brackets besides \"<\" and \">\"\n    //\
    \ brackets are separated by spaces.\n    \n    int count = 0;\n    for (int i\
    \ = 0; i < brackets.length(); ++i)\n    {\n        if ( brackets[i] == '<' )\n\
    \        {\n            ++count;\n        }\n        else if ( brackets[i] ==\
    \ '>' )\n        {\n            if ( count == 0 )\n            {\n           \
    \     return false;\n            }\n            --count;\n        }\n    }\n \
    \   if ( count != 0 )\n    {\n        return false;\n    }\n    \n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9vpr1hbf.d(25): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vpr1hbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ for(int i = 0; i < brackets.length(); ++i) {\n    if (brackets[i] != '>') return\
    \ false;\n  }\n  return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadcndf9p.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadcndf9p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   pair<bool, int> paren_count = parens_count(brackets);\n    bool has_opening_bracket\
    \ = paren_count.first == false;\n    bool has_closing_bracket = paren_count.second\
    \ == 0;\n    return has_opening_bracket && has_closing_bracket;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmc_ygj4y.d(19): Error: found `,` when expecting `.` following bool

    /tmp/tmpmc_ygj4y.d(19): Error: found `int` when expecting identifier following
    `bool`.

    /tmp/tmpmc_ygj4y.d(19): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmc_ygj4y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if (brackets.length() != 2)\n        return false;\n    bool opening = brackets[0]\
    \ == '<';\n    bool closing = brackets[1] == '>';\n    if (!opening && !closing)\n\
    \        return false;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfq815bh3.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfq815bh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   return equal(brackets, \"<>\") || equal(brackets, \"<\") || equal(brackets,\
    \ \">\");\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnn75mjcn.d(19): Error: undefined identifier `equal`

    /tmp/tmpnn75mjcn.d(19): Error: undefined identifier `equal`

    /tmp/tmpnn75mjcn.d(19): Error: undefined identifier `equal`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnn75mjcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets.size() < 2) return false;\n    for(size_t i=0; i<brackets.size();\
    \ ++i)\n        if(brackets[i] != '<' && brackets[i] != '>') return false;\n \
    \   return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere are my solutions,\
    \ based on answers. \nThe code uses only string functions and doesn't use anything\
    \ from std.\nI hope it helps someone.\n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudy5juq_.d(24): Error: declaration expected, not `<`

    /tmp/tmpudy5juq_.d(28): Error: unterminated character constant

    /tmp/tmpudy5juq_.d(35): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(36): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(37): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(38): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(39): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(40): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(41): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(42): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(43): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(44): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(45): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(46): Error: declaration expected, not `assert`

    /tmp/tmpudy5juq_.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for (size_t i = 0; i < len; i++ ) {\n\
    \        char ch = brackets[i];\n        if (ch != \">\") {\n            continue;\n\
    \        }\n        string next = \"<\";\n        for (size_t j = i + 1; j < len;\
    \ j++ ) {\n            char ch2 = brackets[j];\n            if (ch2 != \">\")\
    \ {\n                break;\n            }\n            next += ch2;\n       \
    \ }\n        size_t len = next.length();\n        for (size_t j = len - 1; j >=\
    \ 0; j-- ) {\n            char ch = next[j];\n            if (ch != \"<\") {\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4bnud8_8.d(19): Error: no property `length` for type `string`

    /tmp/tmp4bnud8_8.d(22): Error: incompatible types for `(ch) != (">")`: `char`
    and `string`

    /tmp/tmp4bnud8_8.d(28): Error: incompatible types for `(ch2) != (">")`: `char`
    and `string`

    /tmp/tmp4bnud8_8.d(31): Error: slice `next` is not mutable

    /tmp/tmp4bnud8_8.d(33): Error: no property `length` for type `string`

    /tmp/tmp4bnud8_8.d(33): Error: variable `len` is shadowing variable `tmp4bnud8_8.correct_bracketing.len`

    /tmp/tmp4bnud8_8.d(35): Error: variable `ch` is shadowing variable `tmp4bnud8_8.correct_bracketing.ch`

    /tmp/tmp4bnud8_8.d(36): Error: incompatible types for `(ch) != ("<")`: `char`
    and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4bnud8_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.size();\n    if (brackets_size < 2) return\
    \ false;\n    if (brackets_size % 2) return false; // must have an even number\
    \ of brackets\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    \n    for (size_t i=0; i < brackets.size(); ++i)\n    {\n        const\
    \ char c = brackets[i];\n        if (c == '<') ++opening_brackets;\n        else\
    \ if (c == '>') ++closing_brackets;\n        else\n            return false;\n\
    \    }\n    if (opening_brackets != closing_brackets) return false;\n    \n  \
    \  return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzzdfuq5q.d(19): Error: no property `size` for type `string`

    /tmp/tmpzzdfuq5q.d(25): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzzdfuq5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for(int i = 0; i < brackets.length(); i++){\n   \
    \     string opening = brackets[i];\n        string closing = brackets[brackets.length()\
    \ - 1 - i];\n        if(opening != closing){\n            result = false;\n  \
    \          break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nYou can do this: \n<code>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ntcz4o4.d(30): Error: declaration expected, not `<`

    /tmp/tmp1ntcz4o4.d(39): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(40): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(41): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(42): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(43): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(44): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(45): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(46): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(47): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(48): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(49): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(50): Error: declaration expected, not `assert`

    /tmp/tmp1ntcz4o4.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ntcz4o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto pos = 0;\n    for(auto i = 0; i<brackets.size();i++)\n    {\n       \
    \ if(brackets[i] == '<')\n        {\n            pos++;\n        }\n        if(brackets[i]\
    \ == '>')\n        {\n            pos++;\n        }\n        if(pos != brackets.size())\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzup8a4a.d(20): Error: no property `size` for type `string`

    /tmp/tmpnzup8a4a.d(30): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzup8a4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto lbrackets = brackets.find(\"<\");\n\tauto rbrackets = brackets.find(\">\"\
    );\n\t\n\tif (lbrackets == string::npos || rbrackets == string::npos)\n\t\treturn\
    \ false;\n\t\n\tfor (auto bracket = lbrackets; bracket < rbrackets; bracket++)\n\
    \t{\n\t\tfor (auto opener = bracket; opener < brackets.size() - 1; opener++)\n\
    \t\t{\n\t\t\tif (brackets[opener] == brackets[opener + 1]) \n\t\t\t\treturn false;\n\
    \t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpto5iihfs.d(22): Error: found `:` when expecting `)`

    /tmp/tmpto5iihfs.d(22): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpto5iihfs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int i;\n\tbool ans = false;\n\tfor(i = 0; i < brackets.length(); ++i)\n\t{\n\t\
    \tif(brackets[i] == '<' && brackets[i+1] == '>')\n\t\t\tans = true;\n\t}\n\treturn\
    \ ans;\n}\n/*\n inBrackets returns true if the string \"bracketed\" has some \"\
    bracketing\" in the middle.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiy1j4dvy.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiy1j4dvy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // If the string has no characters, it is trivially correct\n    if(brackets.length()\
    \ == 0)\n        return true;\n    \n    // Find the index of the first opening\
    \ bracket\n    int open_bracket = brackets.find('<');\n    // Find the index of\
    \ the last closing bracket\n    int close_bracket = brackets.rfind('>');\n   \
    \ \n    // If no brackets exist in the string, it is trivially correct\n    if(open_bracket\
    \ == -1 || close_bracket == -1)\n        return true;\n    \n    // Count the\
    \ number of opening brackets\n    int open_count = brackets.length() - open_bracket;\n\
    \    // Count the number of closing brackets\n    int close_count = close_bracket\
    \ - brackets.length();\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxfwswal8.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxfwswal8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (auto c : brackets)\n        if (c == '<' && c != '=' && c != '>')\n \
    \           return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjipms5b.d(19): Error: no identifier for declarator `c`

    /tmp/tmpsjipms5b.d(19): Error: expression expected, not `:`

    /tmp/tmpsjipms5b.d(19): Error: found `brackets` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjipms5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool ret = !(brackets.length() == 0);\n    \n    for (auto c : brackets) {\n\
    \        if (c != \"<\" && c != \">\") {\n            ret = false;\n         \
    \   break;\n        }\n    }\n    \n    return ret;\n}\n'''\n    return code\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9bj59sz.d(21): Error: no identifier for declarator `c`

    /tmp/tmpc9bj59sz.d(21): Error: expression expected, not `:`

    /tmp/tmpc9bj59sz.d(21): Error: found `brackets` when expecting `;` following `for`
    condition

    /tmp/tmpc9bj59sz.d(30): Error: unterminated character constant

    /tmp/tmpc9bj59sz.d(30): Error: declaration expected, not `63U`

    /tmp/tmpc9bj59sz.d(30): Error: unterminated character constant

    /tmp/tmpc9bj59sz.d(36): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(37): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(38): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(39): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(40): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(41): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(42): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(43): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(44): Error: declaration expected, not `assert`

    /tmp/tmpc9bj59sz.d(45): '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++) \n\t{\n\t\tif (brackets[i] != '<')\
    \ return false;\n\t\ti++;\n\t\twhile (i < brackets.length() && !brackets[i] ==\
    \ '>')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tif (i >= brackets.length()) return false;\
    \ \n\t\ti--;\n\t\tif (brackets[i] != '>') return false;\n\t}\n\treturn true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbtkc1r85.d(19): Error: no property `length` for type `string`

    /tmp/tmpbtkc1r85.d(23): Error: no property `length` for type `string`

    /tmp/tmpbtkc1r85.d(27): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtkc1r85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i;\n    for (i = 0; i < brackets.length(); i++) {\n        char c = brackets[i];\n\
    \        if (c == '>') {\n            int j = i;\n            while (j != brackets.length()\
    \ - 1) {\n                if (brackets[j] != '<') {\n                    break;\n\
    \                }\n                j++;\n            }\n            if (j !=\
    \ brackets.length() - 1) {\n                return false;\n            }\n   \
    \     } else if (c == '<') {\n            int j = i;\n            while (j !=\
    \ brackets.length() - 1) {\n                if (brackets[j] != '>') {\n      \
    \              break;\n                }\n                j++;\n            }\n\
    \            if (j != brackets.length() - 1) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=regex,c++,algorithm\
    \ dscore=0 |>\n<| c |>\nThanks for the quick reply.\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrkg76oe.d(48): Error: declaration expected, not `<`

    /tmp/tmpkrkg76oe.d(56): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(57): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(58): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(59): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(60): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(61): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(62): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(63): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(64): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(65): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(66): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(67): Error: declaration expected, not `assert`

    /tmp/tmpkrkg76oe.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrkg76oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ != \"<\")\n            return false;\n        if(brackets[i + 1] != \">\")\n\
    \            return false;\n    }\n    return true;\n}\n/*\n brackets is a string\
    \ of \"<\" and \">\".\n    find the first bracket in the string that isn't part\
    \ of a larger bracket.\n    returns -1 if there are no such brackets.\n    returns\
    \ the index of the closing bracket if one exists.\n    returns -1 if the brackets\
    \ are not in order.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoy_sgs35.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoy_sgs35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++) {\n        char a = brackets[i];\n\
    \        char b = brackets[(i + 1) % brackets.length()];\n        if (a==b) {\n\
    \            continue;\n        }\n        if (a>b) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l9eey2b.d(19): Error: no property `length` for type `string`

    /tmp/tmp5l9eey2b.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l9eey2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ pair<string,string> opening = brackets.find_first_of(\"<>\");\n  pair<string,string>\
    \ closing = brackets.find_first_of(\"<\");\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9cg8xlv9.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cg8xlv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    string bracket_pairs = brackets + brackets;\n\tint len = brackets.length();\n\t\
    for (int i = 0; i < len; i++)\n\t{\n\t\tif (brackets[i] == '<')\n\t\t{\n\t\t\t\
    int j = i+1;\n\t\t\twhile(j < len && brackets[j] != '>') j++;\n\t\t\tif (brackets[j]\
    \ == '>') return false;\n\t\t}\n\t\telse if (brackets[i] == '>')\n\t\t{\n\t\t\t\
    int j = i+1;\n\t\t\twhile(j < len && brackets[j] != '>') j++;\n\t\t\tif (brackets[j]\
    \ != '<') return false;\n\t\t}\n\t}\n\treturn true;\n}\n/*\n bracket_pair_count\
    \ is a string of \"<\" and \">\".\n    return the number of opening brackets,\
    \ including those inside brackets.\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpewex072v.d(38): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewex072v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length();\n    if (n<2)\n        return true;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        int j = brackets.find_first_of('<', i);\n\
    \        if (j == string::npos)\n            j = brackets.find_first_of('>', i);\n\
    \        if (j == string::npos)\n            j = i;\n        if (i != j)\n   \
    \         return false;\n        i = j+1;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjf5ifwjh.d(25): Error: found `:` when expecting `)`

    /tmp/tmpjf5ifwjh.d(25): Error: found `:` instead of statement

    /tmp/tmpjf5ifwjh.d(27): Error: found `:` when expecting `)`

    /tmp/tmpjf5ifwjh.d(27): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf5ifwjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int bracketcount = brackets.length();\n    for (int i = 0; i < bracketcount;\
    \ i++)\n    {\n\tstring start = brackets.substr(0, i);\n\tstring end = brackets.substr(i+1,\
    \ bracketcount);\n\tstring start = start.tolower();\n\tstring end = end.tolower();\n\
    \tstring s = \"\";\n        string e = \"\";\n\tif (start == \"<\")\n\t{\n\t \
    \   s = \">\";\n\t}\n\tif (end == \">\")\n\t{\n\t    e = \"<\";\n\t}\n\tif (!s.compare(e))\n\
    \t{\n\t    return false;\n\t}\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvinjufsn.d(19): Error: no property `length` for type `string`

    /tmp/tmpvinjufsn.d(22): Error: no property `substr` for type `string`

    /tmp/tmpvinjufsn.d(23): Error: no property `substr` for type `string`

    /tmp/tmpvinjufsn.d(24): Error: no property `tolower` for type `string`

    /tmp/tmpvinjufsn.d(24): Error: declaration `tmpvinjufsn.correct_bracketing.start`
    is already defined

    /tmp/tmpvinjufsn.d(25): Error: no property `tolower` for type `string`

    /tmp/tmpvinjufsn.d(25): Error: declaration `tmpvinjufsn.correct_bracketing.end`
    is already defined

    /tmp/tmpvinjufsn.d(36): Error: no property `compare` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvinjufsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t pos = 0;\n    size_t close_bracket = brackets.length() - 1;\n    bool\
    \ result = true;\n    while (pos < brackets.length()) {\n        if (brackets[pos]\
    \ == '<') {\n            if (pos == 0) result = false;\n            if (brackets[pos+1]\
    \ != '>') {\n                result = false;\n            }\n            pos++;\n\
    \        } else if (brackets[pos] == '>') {\n            if (pos == close_bracket)\
    \ result = false;\n            if (brackets[pos-1] != '>') {\n               \
    \ result = false;\n            }\n            pos--;\n        } else {\n     \
    \       pos++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp12b6nj7o.d(20): Error: no property `length` for type `string`

    /tmp/tmp12b6nj7o.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp12b6nj7o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracketSize = brackets.length();\n    bool correct = true;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzywrlqoy.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzywrlqoy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // TODO: if string is empty return true\n    return brackets.length() == 0\
    \ || brackets.find(\"<\") == brackets.find(\">\");\n}\n</code>\n<|/ a tags=java,algorithm,string\
    \ |>\n<| c |>\nThis fails for `<` or `>` as these do not have corresponding `<`\
    \ or  `>`.\n<|/ c |>\n<| c |>\nYes, I didn't think about those. I'll edit.\n<|/\
    \ c |>\n<| c |>\nThanks, that was much cleaner! I added a more general version\
    \ in another answer for anyone else who might need it.\n<|/ c |>\n<| a dscore=1\
    \ tags=java,algorithm,string |>\nI wrote a JavaScript implementation based on\
    \ Donald Knuth's TAOCP 94, which I believe is the fastest algorithm to find a\
    \ longest increasing subsequence.\n<code>\nfunction lcs(A, S){\n  var i,\n   \
    \   j = 0,\n      m = A.length,\n      n = S.length,\n      L = new Array(m+1),\n\
    \      C = new Array(n+1),\n      A0,\n      S0,\n      L,\n      C;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnuctmbiq.d(22): Error: declaration expected, not `<`

    /tmp/tmpnuctmbiq.d(28): Error: unterminated character constant

    /tmp/tmpnuctmbiq.d(28): Error: unterminated character constant

    /tmp/tmpnuctmbiq.d(34): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnuctmbiq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    vector<string> tokens;\n\tstringstream str(brackets);\n\tstring token;\n\twhile(getline(str,\
    \ token, '>'))\n\t\ttokens.push_back(token);\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgvzee9rw.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmpgvzee9rw.d(24): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgvzee9rw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ if(brackets.length() < 1) return false;\n  // initialize stack\n  stack<string>\
    \ brackets;\n  // loop through string in reverse\n  for(int i = brackets.length()-1;\
    \ i>0; i--)\n  {\n    string curr = brackets.substr(i, 1);\n    // push the last\
    \ char of the current bracket\n    brackets.push(reverse(curr));\n    if(curr\
    \ == \">\")\n    {\n      while(!brackets.empty())\n      {\n        // pop the\
    \ top bracket\n        string temp = brackets.top();\n        // if we are at\
    \ the end of brackets, we are done\n        if(temp == \">\") return true;\n \
    \       // if not the last, we are done\n        if(temp != \"<\") return false;\n\
    \        // if we are not at the end of the string, then we have an opening bracket\n\
    \        // now push the next char\n        string nextChar = brackets.peek();\n\
    \        brackets.push(nextChar);\n      }\n    }\n  }\n  return false;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5rsjq031.d(21): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rsjq031.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len = brackets.length();\n    for (int i = 0; i < len; ++i)\n    {\n \
    \       if (brackets[i] != brackets[len - 1])\n            return false;\n   \
    \ }\n    return true;\n}\n</code>\n<code>\nimport std.log;\nimport std.range;\n\
    import std.array;\nimport std.conv;\nimport std.array;\nimport std.typecons;\n\
    import std.math;\n/*\n brackets is a string of \"<\" and \">\".\n    return true\
    \ if every opening bracket has a corresponding closing bracket.\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_4skgxz.d(27): Error: declaration expected, not `<`

    /tmp/tmpk_4skgxz.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_4skgxz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    while(brackets[i] != '\\0') {\n        if(brackets[i] == '<')\n\
    \            ++i;\n        else if(brackets[i] == '>')\n            ++i;\n   \
    \     else if(brackets[i] == '<')\n            ++i;\n        else if(brackets[i]\
    \ == '>')\n            ++i;\n        else\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphelqu5i8.d(20): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42806e]

    ??:? bool tmphelqu5i8.correct_bracketing(immutable(char)[]) [0x427a35]

    ??:? void tmphelqu5i8.__unittest_L34_C1() [0x427b4f]

    ??:? void tmphelqu5i8.__modtest() [0x427d3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd57]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd7d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43022c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd09]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abc1]

    ??:? runModuleUnitTests [0x42bb2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern ('
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t len = brackets.length();\n\tfor(size_t i = 0; i < len; ++i)\n\t{\n\t\t\
    bool found = false;\n\t\tfor(size_t j = 0; j < len; ++j)\n\t\t{\n\t\t\tif(brackets[i]\
    \ == brackets[j])\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t\tif(!found)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsxoo3z_0.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsxoo3z_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i=0; i<brackets.length(); i+=2)\n    {\n        string opening = brackets[i];\n\
    \        string closing = brackets[i+1];\n        if(opening.length() != closing.length())\n\
    \        {\n            return false;\n        }\n        else\n        {\n  \
    \          for(int j=0; j<opening.length(); j++)\n            {\n            \
    \    if(!std.isCharNumber(opening[j]))\n                {\n                  \
    \  return false;\n                }\n            }\n            for(int j=0; j<closing.length();\
    \ j++)\n            {\n                if(!std.isCharNumber(closing[j]))\n   \
    \             {\n                    return false;\n                }\n      \
    \      }\n        }\n    }\n    return true;\n}\n/*\n    brackets is a string\
    \ of \"<\" and \">\".\n    return true if every opening bracket has a corresponding\
    \ closing bracket.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpojkiw948.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpojkiw948.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] ==\
    \ '<')\n        {\n            if (brackets[i - 1] != '>')\n                return\
    \ false;\n        }\n        else if (brackets[i] == '>')\n        {\n       \
    \     if (brackets[i + 1] != '>')\n                return false;\n        }\n\
    \    }\n    return true;\n}\n/*\n parse an expression string like \"(1 + 2 * 3\
    \ + 4 * 5 + 6)\".\n    return null if the string is invalid, otherwise return\
    \ the parsed expression\n*/\nexpr_ty parse(string s) {\n    /*\n     initialize\
    \ result with an empty expression\n     brackets is an array of \"<\" and \">\"\
    \n     stack is an array of expressions (with brackets removed) \n     */\n  \
    \  expr_ty result = expr_ty();\n    vector<char> brackets = { '<' };\n    stack_ty\
    \ stack({ result });\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqg7au7v.d(44): Error: found `>` when expecting `.` following char

    /tmp/tmpzqg7au7v.d(44): Error: found `}` when expecting `;` following statement

    /tmp/tmpzqg7au7v.d(44): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpzqg7au7v.d(45): Error: found `stack` when expecting `;` following statement

    /tmp/tmpzqg7au7v.d(45): Error: found `}` when expecting `;` following statement

    /tmp/tmpzqg7au7v.d(45): Error: found `)` instead of statement

    /tmp/tmpzqg7au7v.d(46): Error: found `unittest` instead of statement

    /tmp/tmpzqg7au7v.d(45): Error: found `void` when expecting `)`

    /tmp/tmpzqg7au7v.d(63): Error: found `main` when expecting `;` following statement

    /tmp/tmpzqg7au7v.d(63): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpzqg7au7v.d(63): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpzqg7au7v.d(63): Error: found `End of File` when expecting `;` following
    statement

    /tmp/tmpzqg7au7v.d(63): Error: found `End of File` when expecting `}` '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ for(auto it = brackets.begin(); it != brackets.end(); it++) {\n    if(*it ==\
    \ '<') {\n      if(!brackets.empty() && *(it - 1) == '<') return false; \n   \
    \ }\n    if(*it == '>') {\n      if(!brackets.empty() && *(it + 1) == '<') return\
    \ false; \n    }\n  }\n  return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp55oo75d4.d(19): Error: no property `begin` for type `string`

    /tmp/tmp55oo75d4.d(19): Error: no property `end` for type `string`

    /tmp/tmp55oo75d4.d(21): Error: no property `empty` for type `string`

    /tmp/tmp55oo75d4.d(24): Error: no property `empty` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55oo75d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t size = brackets.size();\n    for (size_t i = 0; i < size; ++i)\n  \
    \  {\n        if (brackets[i] != \">\" && brackets[i] != \"<\")\n            return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3j4yznft.d(19): Error: no property `size` for type `string`

    /tmp/tmp3j4yznft.d(22): Error: incompatible types for `(brackets[i]) != (">")`:
    `immutable(char)` and `string`

    /tmp/tmp3j4yznft.d(22): Error: incompatible types for `(brackets[i]) != ("<")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3j4yznft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int len = brackets.length();\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar open\
    \ = brackets[i];\n\t\tchar close = brackets[i+1];\n\t\tif (open != '<' || close\
    \ != '>')\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn86enp03.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn86enp03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto first_opening_index = brackets.find(\"<\");\n    auto last_closing_index\
    \ = brackets.find(\">\");\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int pos = 0;\n    while (brackets.substr(pos).find(\"<\") == string::npos)\n\
    \    {\n        pos += 1;\n    }\n    if (brackets.substr(pos).find(\"<\") ==\
    \ string::npos)\n    {\n        return false;\n    }\n    string bracket = brackets.substr(pos,\
    \ brackets.length() - pos);\n    for (int i = 0; i < bracket.length(); i++)\n\
    \    {\n        if ( bracket[i] != brackets[pos + i] )\n        {\n          \
    \  return false;\n        }\n    }\n    pos += bracket.length();\n    while (pos\
    \ < brackets.length())\n    {\n        string leftBracket = brackets.substr(pos,\
    \ brackets.length() - pos);\n        if ( brackets.substr(pos + 1, brackets.length()\
    \ - pos - 1).find(\"<\") == string::npos)\n        {\n            return false;\n\
    \        }\n        for (int i = 0; i < leftBracket.length(); i++)\n        {\n\
    \            if ( leftBracket[i] != brackets[pos + i] )\n            {\n     \
    \           return false;\n            }\n        }\n        pos += leftBracket.length();\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppr1hwt_g.d(20): Error: found `:` when expecting `)`

    /tmp/tmppr1hwt_g.d(20): Error: found `:` instead of statement

    /tmp/tmppr1hwt_g.d(24): Error: declaration expected, not `if`

    /tmp/tmppr1hwt_g.d(27): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr1hwt_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0; \n    int j = 0;\n    int len = 0;\n    bool result = true;\n \
    \   while (j < brackets.size()) {\n        if (brackets[j] == '<') {\n       \
    \     if (brackets[++j] != '>') {\n                result = false;\n         \
    \       break;\n            }\n        } else {\n            if (brackets[++j]\
    \ != '>') {\n                result = false;\n                break;\n       \
    \     }\n        }\n        len++;\n    }\n    result = result && len > 0;\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1prquzdi.d(23): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1prquzdi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len=0;\n    int i = 0;\n    for(i = 0; i < brackets.length(); i++)\n \
    \   {\n        if (brackets[i] == '<')\n        {\n            len++;\n      \
    \  }\n        else if (brackets[i] == '>')\n        {\n            len--;\n  \
    \      }\n    }\n    return len == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpehmsdk7t.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehmsdk7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int bracketCount = 0;\n\tfor(int i = 0; i < brackets.length(); i++)\n\t{\n\t\t\
    if(brackets[i] == '<')\n\t\t{\n\t\t\tbracketCount++;\n\t\t}\n\t\telse if(brackets[i]\
    \ == '>')\n\t\t{\n\t\t\tbracketCount--;\n\t\t}\n\t\t\n\t\tif(bracketCount != 0)\n\
    \t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmyy_czts.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyy_czts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    bool result = true;\n\tfor(int i = 0; i < brackets.length(); i++)\n\t{\n\t\tif(brackets[i]\
    \ != \"<\")\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(brackets[i\
    \ + 1] == \"<\")\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\n A function returning an iterator over all the substrings in\
    \ the string \n s[start:end].\n    \n A function returning an iterator over all\
    \ the substrings in the string \n s[start:end] that contain the specified substring\
    \ substr.\n    \n A function returning an iterator over all the substrings in\
    \ the string \n s[start:end] that contains substr but does not contain otherSubstr.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtd4zhi6.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtd4zhi6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto pos = brackets.find(\"<\");\n    auto end = brackets.find(\">\");\n \
    \   if (pos == string::npos || end == string::npos) {\n        return false;\n\
    \    }\n    auto startPos = (pos < end) ? pos : end;\n    \n    auto leftBracketCount\
    \ = brackets.find(brackets[startPos]);\n    auto rightBracketCount = brackets.find(brackets[startPos\
    \ + 1]);\n    if (leftBracketCount != string::npos) {\n        if (rightBracketCount\
    \ != string::npos) {\n            // The closing brackets have a corresponding\
    \ opening bracket.\n            // Remove both of the brackets\n            auto\
    \ leftBracketEndPos = brackets.find('>', leftBracketCount);\n            auto\
    \ rightBracketEndPos = brackets.find('<', rightBracketCount);\n            brackets.erase(leftBracketCount+1,\
    \ rightBracketCount-1 + 1);\n            brackets.erase(leftBracketEndPos, rightBracketEndPos);\n\
    \        }\n        else {\n            // Only one opening bracket, remove it\n\
    \            auto leftBracketEndPos = brackets.find('>', leftBracketCount);\n\
    \            brackets.erase(leftBracketEndPos);\n        }\n    }\n    else {\n\
    \        auto leftBracketEndPos = brackets.find('<', startPos);\n        if (leftBracketEndPos\
    \ == string::npos) {\n            // No closing brackets, remove the entire bracket\n\
    \            brackets.erase(startPos, 1);\n        }\n        else {\n       \
    \     // Two closing brackets, remove only the opening bracket\n            brackets.erase(leftBracketEndPos);\n\
    \        }\n    }\n    return true;\n}\n// [[[cog\n// import cog\n// from std.cout;\n\
    // from std.string;\n// from std.algorithm;\n// from std.algorithm;\n// from std.array;\n\
    // from std.range;\n// from std.algorithm;\n// from std.range;\n// from std.string;\n\
    // from std.algorithm;\n// from std.array;\n// from std.algorithm;\n// from std.array;\n\
    // from std.string;\n// from std.algorithm;\n// from std.array;\n// from std.algorithm;\n\
    // from std.range;\n// from std.algorithm;\n// from std.range;\n// from std.string;\n\
    // from std.algorithm;\n// from std.algorithm;\n// from std.array;\n// from std.algorithm;\n\
    // from std.array;\n\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfc77eyg0.d(21): Error: found `:` when expecting `)`

    /tmp/tmpfc77eyg0.d(21): Error: found `:` instead of statement

    /tmp/tmpfc77eyg0.d(28): Error: declaration expected, not `if`

    /tmp/tmpfc77eyg0.d(34): Error: unexpected `(` in declarator

    /tmp/tmpfc77eyg0.d(34): Error: found `+` when expecting `)`

    /tmp/tmpfc77eyg0.d(34): Error: no identifier for declarator `brackets.erase(leftBracketCount)`

    /tmp/tmpfc77eyg0.d(34): Error: semicolon expected following function declaration

    /tmp/tmpfc77eyg0.d(34): Error: declaration expected, not `1`

    /tmp/tmpfc77eyg0.d(35): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpfc77eyg0.d(35): Error: no identifier for declarator `brackets.erase(leftBracketEndPos,
    rightBracketEndPos)`

    /tmp/tmpfc77eyg0.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfc77eyg0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 0; i < brackets.length(); i++)\n    {\n        if (brackets[i]\
    \ == '<')\n        {\n            // if we are at the first bracket, return false\n\
    \            if (i == 0)\n                return false;\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppr1n6iw7.d(26): Error: found `unittest` instead of statement

    /tmp/tmppr1n6iw7.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmppr1n6iw7.d(43): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr1n6iw7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto it = brackets.begin();\n    auto end = brackets.end();\n    bool ret\
    \ = true; \n    for(; it != end; ++it)\n    {\n        if (*it != *it)\n     \
    \   {\n            ret = false;\n            break;\n        }\n    }\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_3yo094.d(19): Error: no property `begin` for type `string`

    /tmp/tmpl_3yo094.d(20): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_3yo094.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, int> op_bracket;\n    map<string, int> op_bracket2;\n    map<string,\
    \ int> op_bracket3;\n    for(int i = 0; i< brackets.length(); i++)\n    {\n  \
    \      string b = \"<\"+brackets[i]+\">\";\n        if(op_bracket.find(b) == op_bracket.end())\n\
    \        {\n            op_bracket[b] = i;\n            op_bracket2[b] = i;\n\
    \            op_bracket3[b] = i;\n        }\n        else\n        {\n       \
    \     if(i != op_bracket[b])\n                return false;\n        }\n    }\n\
    \    if(!(op_bracket2.find(\"<\") == op_bracket2.end() && op_bracket2.find(\"\
    >\") == op_bracket2.end() && op_bracket2.find(\"<<\"==op_bracket2.end())))\n \
    \       return false;\n    if(!(op_bracket3.find(\">\") == op_bracket3.end() &&\
    \ op_bracket3.find(\"<<\") == op_bracket3.end() && op_bracket3.find(\">>\"==op_bracket3.end())))\n\
    \        return false;\n    return true;\n}\n/* \n brackets2 are strings of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnmfpn75e.d(19): Error: found `>` when expecting `.` following int

    /tmp/tmpnmfpn75e.d(20): Error: found `>` when expecting `.` following int

    /tmp/tmpnmfpn75e.d(21): Error: found `>` when expecting `.` following int

    /tmp/tmpnmfpn75e.d(43): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnmfpn75e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (auto it = brackets.begin(); it != brackets.end(); it++)\n    {\n    \
    \    if (*it != *(brackets.rbegin() + it))\n        {\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc71rcayz.d(19): Error: no property `begin` for type `string`

    /tmp/tmpc71rcayz.d(19): Error: no property `end` for type `string`

    /tmp/tmpc71rcayz.d(21): Error: no property `rbegin` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc71rcayz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bracket_pos = 0;\n\tsize_t next_pos = 0;\n\tsize_t next_open_bracket =\
    \ 0;\n\tsize_t next_close_bracket = 0;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe6ll4qp.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe6ll4qp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0, e = brackets.length(); i < e; ++i)\n    {\n        if (brackets[i]\
    \ != \"<\") return false;\n    }\n    \n    for (int i = 0, e = brackets.length();\
    \ i < e; ++i)\n    {\n        if (brackets[i] != \">\") return false;\n    }\n\
    \    \n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_qg2aco.d(19): Error: no property `length` for type `string`

    /tmp/tmp6_qg2aco.d(21): Error: incompatible types for `(brackets[cast(ulong)i])
    != ("<")`: `immutable(char)` and `string`

    /tmp/tmp6_qg2aco.d(24): Error: no property `length` for type `string`

    /tmp/tmp6_qg2aco.d(26): Error: incompatible types for `(brackets[cast(ulong)i])
    != (">")`: `immutable(char)` and `string`

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    // TODO: handle bracketing < and >\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrei2sdp.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrei2sdp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // TODO: check that brackets has two characters and that both are \"<\"\n\
    \    \n    bool result = false;\n    for(int i=0; i<brackets.length()-1; ++i)\
    \ \n    {\n        if(brackets[i] != brackets[i+1]) \n        {\n            result\
    \ = true;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7txrp_4.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7txrp_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int nbrackets = brackets.length();\n    if(nbrackets > 0)\n    {\n       \
    \ // scan the brackets and record the number of open brackets\n        int numopens\
    \ = 0;\n        for(int i = 0; i < nbrackets; i++)\n        {\n            char\
    \ c = brackets[i];\n            if(c == '<')\n                numopens++;\n  \
    \          else\n                numopens--;\n        }\n        // for each closing\
    \ bracket, make sure there is an opening bracket\n        for(int i = 0; i < nbrackets;\
    \ i++)\n        {\n            char c = brackets[i];\n            if(c == '>')\n\
    \            {\n                if(numopens < 0)\n                    return false;\n\
    \                numopens--;\n            }\n            else\n            {\n\
    \                if(numopens < 0)\n                    return false;\n       \
    \     }\n        }\n    }\n    else\n    {\n        // no brackets\n        return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpihrbbr8l.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpihrbbr8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   unsigned i, j, k;\n    for (i=0; i<brackets.length(); i++) {\n\tstring cur\
    \ = brackets[i];\n\tfor (j=0; j<cur.length(); j++) {\n\t    if (cur[j] == '<')\
    \ {\n\t\tk = cur.find_first_of(\"<>\", j+1);\n\t\tif (k != string::npos) {\n\t\
    \t    cur.replace(k,2,\"<>\");\n\t\t}\n\t    }\n\t    else if (cur[j] == '>')\
    \ {\n\t\tk = cur.find_last_of(\"<>\");\n\t\tif (k != string::npos) {\n\t\t   \
    \ cur.replace(k, 2, \"<>\");\n\t\t}\n\t    }\n\t}\n    }\n    return brackets\
    \ == string(\"<<><>>\");\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2o5aqo3_.d(25): Error: found `:` when expecting `)`

    /tmp/tmp2o5aqo3_.d(25): Error: found `:` instead of statement

    /tmp/tmp2o5aqo3_.d(29): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp2o5aqo3_.d(31): Error: found `:` when expecting `)`

    /tmp/tmp2o5aqo3_.d(31): Error: found `:` instead of statement

    /tmp/tmp2o5aqo3_.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2o5aqo3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   string opening, closing;\n    bool result = true;\n    for (auto it = brackets.rbegin();\
    \ it != brackets.rend(); ++it)\n    {\n        opening = *it;\n        closing\
    \ = brackets[it.base() - 1];\n        if (!opening.compare(closing))\n       \
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i;\n    size_t j;\n    bool valid = true;\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadriia78.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadriia78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto bracket = brackets.c_str();\n\tint open_count = 1;\n\tint close_count = 1;\n\
    \tfor(int i = 0; i < bracket.length(); ++i) {\n\t\tswitch(bracket[i]) {\n\t\t\
    case '<': --open_count; break;\n\t\tcase '>': ++close_count; break;\n\t\t}\n\t\
    }\n\treturn open_count + close_count == bracket.length();\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqmydw12.d(19): Error: no property `c_str` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqmydw12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i++) \n\t{\n\t\tstring closeBracket = brackets.substring(i,i+1);\n\
    \t\tif (closeBracket.length() != 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\
    string openBracket = brackets.substring(0,i);\n\t\tif (!std.typecons.is_operator_symbol(openBracket))\
    \ \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5qfsbld.d(19): Error: no property `length` for type `string`

    /tmp/tmpr5qfsbld.d(21): Error: no property `substring` for type `string`

    /tmp/tmpr5qfsbld.d(22): Error: no property `length` for type `string`

    /tmp/tmpr5qfsbld.d(26): Error: no property `substring` for type `string`

    /tmp/tmpr5qfsbld.d(27): Error: undefined identifier `is_operator_symbol` in module
    `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5qfsbld.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    size_t size = brackets.size();\n    for( size_t i\
    \ = 0; i < size; i++ ) {\n        char bracket = brackets[i];\n        if( bracket\
    \ == '<' )\n            continue;\n        if( bracket == '>' )\n            result\
    \ &= !has_valid_closing_bracket(brackets + i + 1, brackets + size);\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| c |>\nYour algorithm is correct,\
    \ but it's far from being efficient (O(n^2)). Better solutions are possible here,\
    \ and they depend on the OP's actual data.\n<|/ c |>\n<| c |>\nO(n) is good enough\
    \ for my problem, but it's still far from being efficient. I was just hoping for\
    \ a better solution (no matter how hard it may be), but thank you very much for\
    \ mentioning this.\n<|/ c |>\n<| c |>\n: Indeed. I was just suggesting something\
    \ that would be more efficient.\n<|/ c |>\n<| a tags=c++,algorithm,arrays |>\n\
    You can use recursive call:\n<code>\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeo0ok_z8.d(30): Error: declaration expected, not `<`

    /tmp/tmpeo0ok_z8.d(33): Error: unterminated character constant

    /tmp/tmpeo0ok_z8.d(33): Error: unterminated character constant

    /tmp/tmpeo0ok_z8.d(36): Error: unterminated character constant

    /tmp/tmpeo0ok_z8.d(48): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(49): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(50): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(51): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(52): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(53): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(54): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(55): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(56): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(57): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(58): Error: declaration expected, not `assert`

    /tmp/tmpeo0ok_z8.d(59): Error: declaration expec'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i=0;\n    size_t num_open_brackets = 0;\n    size_t num_closing_brackets\
    \ = 0; \nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf5l8z27a.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5l8z27a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int openbrackets = 0;\n\tfor(int i = 0; i < brackets.length(); ++i) {\n\t\tif(brackets[i]\
    \ == '<') {\n\t\t\t++openbrackets;\n\t\t} else {\n\t\t\topenbrackets = 0;\n\t\t\
    }\n\t\tif((brackets[i] == '>') && openbrackets == 0) {\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn (openbrackets == brackets.length() - 1);\n}\n/*\n \n \n */\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ztzeqg3.d(20): Error: no property `length` for type `string`

    /tmp/tmp9ztzeqg3.d(30): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ztzeqg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (size_t i = 0; i < brackets.length(); i++)\n        if (brackets[i] !=\
    \ '<' || brackets[i] != '>')\n        {\n            error(\"Brackets are not\
    \ balanced.\");\n            return false;\n        }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuv_vhkt4.d(19): Error: no property `length` for type `string`

    /tmp/tmpuv_vhkt4.d(22): Error: undefined identifier `error`, did you mean class
    `Error`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv_vhkt4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bracketSize = brackets.length();\n\tsize_t bracketCount = 0;\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr_lvifow.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr_lvifow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i=0;i<brackets.length();i++)\n        if(!(brackets[i]==\"<\" && brackets[i+1]==\"\
    <\"))\n            return false;\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeypn07zo.d(19): Error: no property `length` for type `string`

    /tmp/tmpeypn07zo.d(20): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpeypn07zo.d(20): Error: incompatible types for `(brackets[cast(ulong)(i
    + 1)]) == ("<")`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeypn07zo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 1; i < brackets.length() - 1; i++) {\n        if (brackets[i]\
    \ == brackets[i - 1]) {\n            // two consecutive matching brackets are\
    \ not allowed\n            return false;\n        }\n    }\n    return true;\n\
    }\n// end namespace\n</code>\n<|/ a dscore=0 |>\n<| c |>\nYour algorithm is pretty\
    \ good, but it is missing a closing bracket, which can be solved with a simple\
    \ `if (brackets[i] == '>') return false;`\n<|/ c |>\n<| a |>\nYou can easily check\
    \ all brackets combinations just by using recursion.\n<code>\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgh0iuxg0.d(28): Error: declaration expected, not `<`

    /tmp/tmpgh0iuxg0.d(40): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(41): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(42): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(43): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(44): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(45): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(46): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(47): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(48): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(49): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(50): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(51): Error: declaration expected, not `assert`

    /tmp/tmpgh0iuxg0.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgh0iuxg0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto p = brackets.c_str();\n\tstring opening_brackets[32];\n\tsize_t num = 0;\n\
    \tfor(auto i = 0; i < 32; ++i)\n\t{\n\t\tchar c = *p++;\n\t\tif(isalnum(c) ||\
    \ c == '_' || c == '.' || c == '-' || c == '(' || c == ')')\n\t\t{\n\t\t\topening_brackets[num]\
    \ = c;\n\t\t\t++num;\n\t\t}\n\t}\n\tif(!num)\n\t\treturn false;\n\tfor(auto i\
    \ = 0; i < num; ++i)\n\t{\n\t\tif(!isalnum(*p) || !isalnum(brackets[1 + i]))\n\
    \t\t\treturn false;\n\t}\n\t\n\tstring closing_brackets[32];\n\tnum = 0;\n\tfor(auto\
    \ i = 0; i < 32; ++i)\n\t{\n\t\tchar c = *p++;\n\t\tif(isalnum(c) || c == '_'\
    \ || c == '.' || c == '-' || c == '(' || c == ')')\n\t\t{\n\t\t\tclosing_brackets[num]\
    \ = c;\n\t\t\t++num;\n\t\t}\n\t}\n\tfor(auto i = 0; i < num; ++i)\n\t{\n\t\tif(!isalnum(*p)\
    \ || !isalnum(brackets[1 + num + i]))\n\t\t\treturn false;\n\t}\n\t\n\tfor(auto\
    \ i = 0; i < num; ++i)\n\t{\n\t\tif(opening_brackets[i] != closing_brackets[i])\n\
    \t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnlsrua7.d(20): Deprecation: instead of C-style syntax, use D-style
    syntax `string[32] opening_brackets`

    /tmp/tmpvnlsrua7.d(39): Deprecation: instead of C-style syntax, use D-style syntax
    `string[32] closing_brackets`

    /tmp/tmpvnlsrua7.d(19): Error: no property `c_str` for type `string`

    /tmp/tmpvnlsrua7.d(25): Error: undefined identifier `isalnum`

    /tmp/tmpvnlsrua7.d(27): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmpvnlsrua7.d(35): Error: undefined identifier `isalnum`

    /tmp/tmpvnlsrua7.d(35): Error: undefined identifier `isalnum`

    /tmp/tmpvnlsrua7.d(44): Error: undefined identifier `isalnum`

    /tmp/tmpvnlsrua7.d(46): Error: cannot implicitly convert expression `c` of type
    `char` to `string`

    /tmp/tmpvnlsrua7.d(52): Error: undefined identifier `isalnum`

    /tmp/tmpvnlsrua7.d(52): Error: undefined identifier `isalnum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnlsrua7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // TODO: make this work for nested brackets\n    bool result = true;\n   \
    \ int length = brackets.length();\n    int length = brackets.length();\n    string\
    \ subString;\n    int i = 0;\n    int count = 0;\n    char c;\n    // loop through\
    \ all the characters in the string\n    for (i=0; i<length; i++)\n    {\n    \
    \    c = brackets.at(i);\n        switch (c)\n        {\n        case '<':\n \
    \           subString = \"<<\";\n            break;\n        case '>':\n     \
    \       subString = \">>\";\n            break;\n        case '[':\n         \
    \   subString = \"[\";\n            break;\n        case ']':\n            subString\
    \ = \"]\";\n            break;\n        default:\n            result = false;\n\
    \        }\n        // find the next character\n        if (i != length)\n   \
    \     {\n            if (brackets.at(i+1) != c)\n            {\n             \
    \   count = length-i-1;\n                break;\n            }\n            else\n\
    \            {\n                count++;\n            }\n        }\n        else\n\
    \        {\n            count++;\n        }\n    }\n    if (count != length)\n\
    \    {\n        result = false;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjqow7u7y.d(21): Error: no property `length` for type `string`

    /tmp/tmpjqow7u7y.d(22): Error: no property `length` for type `string`

    /tmp/tmpjqow7u7y.d(22): Error: declaration `tmpjqow7u7y.correct_bracketing.length`
    is already defined

    /tmp/tmpjqow7u7y.d(30): Error: no property `at` for type `string`

    /tmp/tmpjqow7u7y.d(51): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqow7u7y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    int j = 1;\n    int len = brackets.length();\n    while (i\
    \ < len && j < len) {\n        if (brackets[i] == \"<\") {\n            if (brackets[j]\
    \ != \">\") {\n                return false;\n            }\n            i++;\n\
    \            j++;\n        } else if (brackets[j] == \">\") {\n            if\
    \ (brackets[i] != \"<\") {\n                return false;\n            }\n   \
    \         j++;\n        } else {\n            return false;\n        }\n    }\n\
    \    return (i == len || j == len);\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftu46cpg.d(21): Error: no property `length` for type `string`

    /tmp/tmpftu46cpg.d(23): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpftu46cpg.d(24): Error: incompatible types for `(brackets[cast(ulong)j])
    != (">")`: `immutable(char)` and `string`

    /tmp/tmpftu46cpg.d(29): Error: incompatible types for `(brackets[cast(ulong)j])
    == (">")`: `immutable(char)` and `string`

    /tmp/tmpftu46cpg.d(30): Error: incompatible types for `(brackets[cast(ulong)i])
    != ("<")`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftu46cpg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int bracketCount = 1;\n    int openingBracketCount = brackets.find(\"<\");\n\
    \    while (openingBracketCount != string::npos) {\n        bracketCount++;\n\
    \        openingBracketCount = brackets.find(\"<\", openingBracketCount + 1);\n\
    \    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc93q0uzc.d(21): Error: found `:` when expecting `)`

    /tmp/tmpc93q0uzc.d(21): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc93q0uzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int i;\n\tfor (i=0; i<brackets.length(); i++) {\n\t\tif(brackets[i] == '<')\n\t\
    \t\tif(brackets[i+1] == '>')\n\t\t\t\treturn true;\n\t}\n\treturn false;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvplnx86v.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvplnx86v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(uint i = 0; i < brackets.length(); i++)\n    {\n        if (brackets[i]\
    \ == brackets[brackets.length()-1])\n        {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3602_fn7.d(19): Error: no property `length` for type `string`

    /tmp/tmp3602_fn7.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3602_fn7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   string s = brackets;\n    if (s.length() < 2) return false;\n    string openingBrackets\
    \ = \"()[]{}\";\n    size_t count = 0;\n    size_t last = 0;\n    bool found =\
    \ false;\n    while (last < s.length()) {\n\tsize_t next = s.find(openingBrackets,\
    \ last);\n\tsize_t closingBracketSize = next - last;\n\tif (next == string::npos)\
    \ return false;\n\t\n\tstring openingBracket = s.substr(last, next - last);\n\t\
    string closingBracket = s.substr(next, closingBracketSize);\n\t\n\tbool valid\
    \ = true;\n\tif (openingBracket != closingBracket) {\n\t    valid = false;\n\t\
    }\n\t\n\tif (valid) {\n\t    count++;\n\t    last = next;\n\t}\n    }\n    \n\
    \    return (count >= 3);\n}\n/*\n brackets is a string of \"<\" and \">\".\n\
    \    returns a string with all of the brackets balanced.\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpht73t969.d(28): Error: found `:` when expecting `)`

    /tmp/tmpht73t969.d(28): Error: found `:` instead of statement

    /tmp/tmpht73t969.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpht73t969.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   const char *cp1, *cp2;\n    for(cp1=brackets.c_str(); *cp1; cp1++)\n    {\n\
    \        if(*cp1 == '<')\n        {\n            for(cp2=cp1+1; *cp2; cp2++)\n\
    \            {\n                if(*cp2 == '>')\n                {\n         \
    \           return true;\n                }\n            }\n            return\
    \ false;\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjetl55ih.d(19): Error: multiple declarations must have the same
    type, not `char*` and `char**`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjetl55ih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   string::const_iterator beg = brackets.begin();\n    string::const_iterator\
    \ end = brackets.end();\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgz1hpow.d(19): Error: use `.` for member lookup, not `::`

    /tmp/tmpmgz1hpow.d(20): Error: use `.` for member lookup, not `::`

    /tmp/tmpmgz1hpow.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmgz1hpow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto opening = brackets.find(\"<\");\n    auto closing = brackets.find(\"\
    >\");\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpev9hpw4m.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev9hpw4m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t i;\n\tfor(i = 0; i < brackets.length(); i++)\n\t{\n\t\tif(brackets[i] ==\
    \ '>')\n\t\t{\n\t\t\twhile(brackets[i+1] != '<')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\
    \tif(brackets[i] == '>')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebvcnmlu.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebvcnmlu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto bracket = brackets.size();\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiftfspwl.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiftfspwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int brackets_size = brackets.size();\n    for(int i = 0; i < brackets_size;\
    \ i++)\n    {\n        int open_bracket_index = brackets[i];\n        int close_bracket_index\
    \ = brackets[open_bracket_index + 1];\n        if(open_bracket_index != close_bracket_index)\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcyuddp8r.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcyuddp8r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets.length() == 0)\n        return true;\n    int count = 0; \n  \
    \  for (int i = 0; i < brackets.length(); i++)\n    {\n        if(brackets[i]\
    \ == '<') count++;\n        else if(brackets[i] == '>') count--;\n        if (count\
    \ == 0) return false;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgnkvl4eb.d(19): Error: no property `length` for type `string`

    /tmp/tmpgnkvl4eb.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnkvl4eb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    if (brackets == \"\")\n\t{\n\t\treturn true;\n\t}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprm7ymite.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprm7ymite.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int open_bracket = 1, close_bracket = 1;\n    string opening, closing, test;\n\
    \    bool ret = false;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd70ahmr4.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd70ahmr4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t brackets_size = brackets.length();\n    size_t i1 = 0, i2 = 0, i3 =\
    \ 0; \n    size_t end_i1 = 0, end_i2 = 0;\n    bool has_left = false;\n    bool\
    \ has_right = false;\n    bool left = false;\n    bool right = false;\n    for(size_t\
    \ i = 0; i < brackets_size; i++)\n    {\n        if (brackets[i] == '<')\n   \
    \     {\n            has_left = true;\n            i1++;\n            end_i2 =\
    \ i1;\n        }\n        else\n        {\n            has_right = true;\n   \
    \         i2++;\n            end_i1 = i2;\n        }\n        if (brackets[i]\
    \ == '>')\n        {\n            if (has_left && has_right)\n               \
    \ return false;\n            if (has_left)\n                left = true;\n   \
    \         if (has_right)\n                right = true;\n            has_left\
    \ = false;\n            has_right = false;\n        }\n    }\n    return left\
    \ && right;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n   \
    \ assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx11jd1rx.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx11jd1rx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ for(string::iterator i=brackets.begin();\n      i!=brackets.end();\n      ++i){\n\
    \    if(*i!=*(i+1)){\n      return false;\n    }\n  }\n  return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyaw1ja4a.d(19): Error: use `.` for member lookup, not `::`

    /tmp/tmpyaw1ja4a.d(19): Error: found `i` when expecting `;` following `for` condition

    /tmp/tmpyaw1ja4a.d(19): Error: expression expected, not `=`

    /tmp/tmpyaw1ja4a.d(19): Error: found `brackets` when expecting `)`

    /tmp/tmpyaw1ja4a.d(21): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyaw1ja4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets.length() != 0)\n    {\n        int count = 0;\n        for(int\
    \ i = 0; i < brackets.length(); i++)\n        {\n            if(brackets[i] ==\
    \ \"<\")\n            {\n                count++;\n            }\n           \
    \ else if(brackets[i] == \">\")\n            {\n                count--;\n   \
    \         }\n        }\n        if(count != 0)\n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a tags=c++ |>\n\
    <| a dscore=2 |>\nIf you really want a recursive solution which does it by just\
    \ counting the number of < and > characters, you can write it like this:\n<code>\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3lako2se.d(40): Error: declaration expected, not `<`

    /tmp/tmp3lako2se.d(49): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(50): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(51): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(52): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(53): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(54): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(55): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(56): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(57): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(58): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(59): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(60): Error: declaration expected, not `assert`

    /tmp/tmp3lako2se.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3lako2se.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for(int i=0; i<brackets.length(); i++)\n\t{\n\t\tif(brackets[i] == '>')\n\t\t\t\
    return ((brackets[i+1] == '<') || (brackets[i+1] == '>'));\n\t\tif(brackets[i]\
    \ == '<')\n\t\t\treturn ((brackets[i+1] == '>') || (brackets[i+1] == '<'));\n\t\
    }\n\treturn false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rhhl_vb.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rhhl_vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t opening_brackets = brackets.length();\n    size_t closing_brackets\
    \ = 0;\n    size_t opening_pos = 0;\n    size_t closing_pos = 0;\n    for(size_t\
    \ i = 0; i < opening_brackets; ++i)\n    {\n        opening_pos = brackets.find(brackets[i],\
    \ opening_pos);\n        if(opening_pos == string::npos)\n            return false;\n\
    \        opening_pos += 1;\n        closing_brackets += 1;\n    }\n    for(size_t\
    \ i = 0; i < closing_brackets; ++i)\n    {\n        closing_pos = brackets.rfind(brackets[i],\
    \ closing_pos + 1);\n        if(closing_pos == string::npos)\n            return\
    \ false;\n        closing_pos -= 1;\n    }\n    if(closing_pos != opening_brackets)\n\
    \        return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhomtt5n.d(26): Error: found `:` when expecting `)`

    /tmp/tmpjhomtt5n.d(26): Error: found `:` instead of statement

    /tmp/tmpjhomtt5n.d(34): Error: found `:` when expecting `)`

    /tmp/tmpjhomtt5n.d(34): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhomtt5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t size = brackets.length();\n    string closed = \"\";\n    string opened\
    \ = \"\";\n    for (size_t i = 0; i < size; ++i)\n    {\n        if (brackets[i]\
    \ == \"<\")\n        {\n            if (i + 1 < size && brackets[i+1] == \"<\"\
    ) \n            {\n                closed = brackets.substr(i, 2); \n        \
    \        opened = \"<\";\n            }\n            else\n            {\n   \
    \             closed = brackets.substr(i, 1);\n            }\n        }\n    \
    \    else if (brackets[i] == \">\")\n        {\n            if (i + 1 < size &&\
    \ brackets[i+1] == \">\") \n            {\n                closed = brackets.substr(i,\
    \ 2); \n                opened = \">\";\n            }\n            else\n   \
    \         {\n                closed = brackets.substr(i, 1);\n            }\n\
    \        }\n    }\n    return closed == opened;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7yubzgco.d(19): Error: no property `length` for type `string`

    /tmp/tmp7yubzgco.d(24): Error: incompatible types for `(brackets[i]) == ("<")`:
    `immutable(char)` and `string`

    /tmp/tmp7yubzgco.d(26): Error: incompatible types for `(brackets[i + 1LU]) ==
    ("<")`: `immutable(char)` and `string`

    /tmp/tmp7yubzgco.d(28): Error: no property `substr` for type `string`

    /tmp/tmp7yubzgco.d(33): Error: no property `substr` for type `string`

    /tmp/tmp7yubzgco.d(36): Error: incompatible types for `(brackets[i]) == (">")`:
    `immutable(char)` and `string`

    /tmp/tmp7yubzgco.d(38): Error: incompatible types for `(brackets[i + 1LU]) ==
    (">")`: `immutable(char)` and `string`

    /tmp/tmp7yubzgco.d(40): Error: no property `substr` for type `string`

    /tmp/tmp7yubzgco.d(45): Error: no property `substr` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7yubzgco.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int len = brackets.length();\n    for(int i = 0; i < len; ++i)\n        if(brackets[i]\
    \ != brackets[len - i - 1]) return false;\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qz46zvm.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qz46zvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<int, int> counts;\n    int current_bracket_pos = 0;\nunittest\n{\n   \
    \ alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp18sndbom.d(19): Error: found `,` when expecting `.` following int

    /tmp/tmp18sndbom.d(19): Error: found `int` when expecting identifier following
    `int`.

    /tmp/tmp18sndbom.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmp18sndbom.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18sndbom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    assert (brackets.size() % 2 == 0);\n\t\n\tfor (auto const &c : brackets) {\n\t\
    \tauto i = brackets.find(c);\n\t\tif (i == brackets.end()) return false;\n\t\t\
    auto j = brackets.find(c, i + 1);\n\t\tif (j != brackets.end()) return false;\n\
    \t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpwibhpc.d(21): Error: basic type expected, not `&`

    /tmp/tmpxpwibhpc.d(21): Error: no identifier for declarator `_error_`

    /tmp/tmpxpwibhpc.d(21): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpwibhpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   foru( i = 0; i < brackets.length; i++ )\n    {\n        string opening = brackets[i];\n\
    \        if( brackets[i+1] != \">\" )\n        {\n            return false;\n\
    \        }\n    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb95kg9bm.d(19): Error: found `;` when expecting `,`

    /tmp/tmpb95kg9bm.d(19): Error: found `;` when expecting `,`

    /tmp/tmpb95kg9bm.d(20): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb95kg9bm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   string::iterator it;\n    for (it=brackets.begin(); it != brackets.end();\
    \ ++it)\n        if (*it != '>') return true;\n    return false;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjz2i32l6.d(19): Error: use `.` for member lookup, not `::`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjz2i32l6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    auto ib = brackets.rfind('>');\n\tauto il = brackets.rfind('<');\n\tif (ib ==\
    \ string::npos || il == string::npos)\n\t{\n\t\treturn false;\n\t}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpww_qr787.d(21): Error: found `:` when expecting `)`

    /tmp/tmpww_qr787.d(21): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww_qr787.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   unsigned len = brackets.length();\n    for (unsigned i = 0; i < len; ++i)\
    \ {\n        string open = brackets[i];\n        string close = brackets[len -\
    \ i - 1];\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdvd8_0xm.d(23): Error: found `unittest` instead of statement

    /tmp/tmpdvd8_0xm.d(40): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdvd8_0xm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t length = brackets.length();\n    bool result = true;\n    size_t i;\n\
    \    for(i = 0; i < length; ++i)\n    {\n        char c = brackets.charAt(i);\n\
    \        if((c == '<') && (!((i == 0) || (brackets.charAt(i - 1) != '<'))))\n\
    \        {\n            result += false;\n            break;\n        }\n    \
    \    else if((c == \">\") && !((i == length - 1) || (brackets.charAt(i + 1) !=\
    \ '>')))\n        {\n            result += false;\n            break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_zahn2zu.d(19): Error: no property `length` for type `string`

    /tmp/tmp_zahn2zu.d(24): Error: no property `charAt` for type `string`

    /tmp/tmp_zahn2zu.d(25): Error: no property `charAt` for type `string`

    /tmp/tmp_zahn2zu.d(27): Error: operation not allowed on `bool` `result += false`

    /tmp/tmp_zahn2zu.d(30): Error: incompatible types for `(c) == (">")`: `char` and
    `string`

    /tmp/tmp_zahn2zu.d(30): Error: no property `charAt` for type `string`

    /tmp/tmp_zahn2zu.d(32): Error: operation not allowed on `bool` `result += false`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zahn2zu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int n = 0;\n    \n    // count the number\
    \ of opening brackets\n    while (i < brackets.length() && brackets[i] == '<')\
    \ {\n        i++;\n    }\n    n = i;\n    \n    // count the number of closing\
    \ brackets\n    while (j < brackets.length() && brackets[j] == '>') {\n      \
    \  j++;\n    }\n    \n    return n == j;\n}\n</code>\nNote that I have not verified\
    \ that this works. I am just writing this off the top of my head. There are probably\
    \ a few bugs in it. Feel free to correct me if I missed anything.\n<|/ a |>\n\
    <| c |>\nThank you, that seems like it could work.  I'll give it a shot.\n<|/\
    \ c |>\n<| c |>\nAs an update, it worked.  I still had a few tests to run, but\
    \ I think it will.  Thank you for all the help!\n<|/ c |>\n<| c |>\nYou don't\
    \ need the second `while` loop. You could just do: `bool correct = brackets.length()\
    \ == n-brackets.length();`\n<|/ c |>\n<| c |>\nTrue. Since `brackets.length()\
    \ == n-brackets.length()` will always return `TRUE` if `n-brackets.length()` is\
    \ equal to `brackets.length()`, I think it's more readable, but I suppose that\
    \ it is also functionally equivalent.\n<|/ c |>\n<| a tags=c#,parsing,algorithm\
    \ |>\nI suggest that you do not use regular expressions for this. It's likely\
    \ to be faster, and probably safer, than a DFA parser. Also, you don't need a\
    \ full blown parsing library. \nThe trick is to break your input up into tokens,\
    \ and then you can easily handle them one by one. Here's a C# example that does\
    \ it without using regular expressions:\n<code>\nstring input = \"<<><>>\";\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4lbje_2.d(36): Error: declaration expected, not `<`

    /tmp/tmpd4lbje_2.d(40): Error: unterminated character constant

    /tmp/tmpd4lbje_2.d(46): Error: unterminated character constant

    /tmp/tmpd4lbje_2.d(49): Error: unterminated character constant

    /tmp/tmpd4lbje_2.d(52): Error: unterminated character constant

    /tmp/tmpd4lbje_2.d(52): Error: unterminated character constant

    /tmp/tmpd4lbje_2.d(53): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4lbje_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    string current = \"\";\n\tbool brackets_closed = brackets.find_first_of(\">\"\
    ) == string::npos;\n\tstring current_pos = brackets.find_first_of(\">\");\n\t\
    if (current_pos != string::npos) \n\t{\n\t\tcurrent = brackets.substr(0, current_pos);\n\
    \t\tbrackets = brackets.substr(current_pos + 1);\n\t}\n\telse\n\t{\n\t\tcurrent\
    \ = brackets;\n\t}\n\tif (current.length() > 0) \n\t{\n\t\tbool prev_open = false;\n\
    \t\tbool next_open = false;\n\t\tfor (int i = 0; i < current.length(); i++) \n\
    \t\t{\n\t\t\tchar c = current.at(i);\n\t\t\tbool open_prev = !prev_open && !is_open_bracket(c);\n\
    \t\t\tbool open_next = !next_open && !is_open_bracket(c);\n\t\t\tif (open_prev\
    \ && !open_next) \n\t\t\t{\n\t\t\t\tstring close = get_close_bracket(c);\n\t\t\
    \t\tif (close.size() > 0 && close.at(0) == c) \n\t\t\t\t{\n\t\t\t\t\tprev_open\
    \ = is_open_bracket(close.at(0));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (open_next &&\
    \ !open_prev) \n\t\t\t{\n\t\t\t\tstring close = get_close_bracket(c);\n\t\t\t\t\
    if (close.size() > 0 && close.at(0) == c) \n\t\t\t\t{\n\t\t\t\t\tnext_open = is_open_bracket(close.at(0));\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn brackets_closed && prev_open && next_open;\n\
    \t}\n\treturn false;\n}\n/*\n returns a pair of the string \"open\" or \"closed\"\
    \ based on the char c in brackets.\n    opens are \"<\" and closes are \">\"\n\
    \    returns \"open\" if c=\"<\", otherwise \"closed\"\n    returns empty string\
    \ if c=\"<\" or c=\">\", otherwise \"open\" or \"closed\"\n*/\nstring get_open_bracket(char\
    \ c)\n{\n\tstring open = get_close_bracket(c);\n\tif (open.size() > 0 && open.at(0)\
    \ == c) \n\t{\n\t\treturn \"open\";\n\t}\n\treturn \"\";\n}\nstring get_close_bracket(char\
    \ c)\n{\n\tif (c == '<') \n\t{\n\t\treturn \">\";\n\t}\n\treturn \"\";\n}\n/*\n\
    \ is_open_bracket returns true if c=\"<\", false otherwise\n*/\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyb4rh_gz.d(20): Error: semicolon expected, not `:`

    /tmp/tmpyb4rh_gz.d(20): Error: found `:` instead of statement

    /tmp/tmpyb4rh_gz.d(22): Error: found `:` when expecting `)`

    /tmp/tmpyb4rh_gz.d(22): Error: found `:` instead of statement

    /tmp/tmpyb4rh_gz.d(27): Error: declaration expected, not `else`

    /tmp/tmpyb4rh_gz.d(30): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyb4rh_gz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int i, j, k;\n\tfor(i=0, j=0, k=brackets.length()-1; ; i++, k--) \n\t{\n\t\tswitch(brackets[i])\
    \ \n\t\t{\n\t\t\tcase '<': \n\t\t\t\tj++; \n\t\t\t\tbreak;\n\t\t\tcase '>': \n\
    \t\t\t\tj--; \n\t\t\t\tbreak;\n\t\t}\n\t\tif(j<0)\n\t\t\treturn false;\n\t}\n\t\
    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n  \
    \  assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkn9z_98c.d(20): Error: no property `length` for type `string`

    /tmp/tmpkn9z_98c.d(22): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkn9z_98c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    if (brackets.length() <= 1)\n\t\treturn true;\n\tbool valid = true;\n\tint openings\
    \ = brackets.find_first('<');\n\tint closings = brackets.find_first('>');\n\t\
    if (openings <= closings)\n\t{\n\t\tfor (int opening = openings; opening < brackets.length();\
    \ opening++)\n\t\t{\n\t\t\tchar c = brackets[opening];\n\t\t\tif (c != '>') valid\
    \ = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int opening = openings; opening\
    \ < closings; opening++)\n\t\t{\n\t\t\tchar c = brackets[opening];\n\t\t\tif (c\
    \ != '<') valid = false;\n\t\t}\n\t}\n\treturn valid;\n}\n*/\n/*\n brackets is\
    \ a string of \"<\" and \">\".\n    return a list of all the brackets in the input\
    \ string\n    \n    >>> correct_bracketing(\"<\")\n    []\n    >>> correct_bracketing(\"\
    <>\")\n    []\n    >>> correct_bracketing(\"<<><>>\")\n    []\n    >>> correct_bracketing(\"\
    ><<>\")\n    []\n*/\nvector<string> correct_bracketing(string brackets) \n{\n\t\
    if (brackets.length() <= 1)\n\t\treturn vector<string>();\n\tvector<string> brackets;\n\
    \tint openings = brackets.find_first('<');\n\tint closings = brackets.find_first('>');\n\
    \tif (openings <= closings)\n\t{\n\t\tfor (int opening = openings; opening < brackets.length();\
    \ opening++)\n\t\t{\n\t\t\tchar c = brackets[opening];\n\t\t\tif (c != '>') \n\
    \t\t\t\tbrackets.push_back(c);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int opening\
    \ = openings; opening < closings; opening++)\n\t\t{\n\t\t\tchar c = brackets[opening];\n\
    \t\t\tif (c != '<') \n\t\t\t\tbrackets.push_back(c);\n\t\t}\n\t}\n\treturn brackets;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmdwpx9td.d(42): Error: declaration expected, not `*`

    /tmp/tmpmdwpx9td.d(60): Error: no identifier for declarator `vector`

    /tmp/tmpmdwpx9td.d(60): Error: declaration expected, not `<`

    /tmp/tmpmdwpx9td.d(63): Error: declaration expected, not `if`

    /tmp/tmpmdwpx9td.d(65): Error: no identifier for declarator `opening`

    /tmp/tmpmdwpx9td.d(65): Error: declaration expected, not `<`

    /tmp/tmpmdwpx9td.d(65): Error: no identifier for declarator `opening`

    /tmp/tmpmdwpx9td.d(65): Error: declaration expected, not `++`

    /tmp/tmpmdwpx9td.d(68): Error: declaration expected, not `if`

    /tmp/tmpmdwpx9td.d(70): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmdwpx9td.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int count = 1;\n    for(int i=0; i < brackets.length(); i++)\n    {\n    \
    \    if(brackets[i] == '>')\n        {\n            count ++;\n        }\n   \
    \     if(brackets[i] == '<')\n        {\n            count --;\n            if(count\
    \ < 0)\n                return false;\n        }\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgs0xva2s.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgs0xva2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i=0; i<brackets.length(); i++)\n    {\n        bool match = false;\n\
    \        if(brackets[i] == '<')\n        {\n            for(int j=i; j<brackets.length();\
    \ j++)\n            {\n                if(brackets[j] == brackets[i+1])\n    \
    \            {\n                    match = true;\n                    break;\n\
    \                }\n            }\n        }\n        else if(brackets[i] == '>')\n\
    \        {\n            for(int j=i; j<brackets.length(); j++)\n            {\n\
    \                if(brackets[j] == brackets[i+1])\n                {\n       \
    \             match = true;\n                    break;\n                }\n \
    \           }\n        }\n        if(!match)\n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3df9rf1.d(19): Error: no property `length` for type `string`

    /tmp/tmpz3df9rf1.d(24): Error: no property `length` for type `string`

    /tmp/tmpz3df9rf1.d(35): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3df9rf1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int n = brackets.length();\n    bool correct = true;\n    for(int i = 0; i\
    \ < n; ++i) {\n        if(brackets[i] != '<')\n            correct = false;\n\
    \        else {\n            i++;\n            if(brackets[i] != '>') {\n    \
    \            correct = false;\n                break;\n            }\n       \
    \ }\n    }\n    return correct;\n}\n</code>\n<|/ a |>\n<| c |>\nYour program fails\
    \ to check that the input is a valid expression.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ fail; it returns `true` on all valid input. `void main() { assert(correct_bracketing(\"\
    <<><>>\")); assert(correct_bracketing(\"<\")); assert(!correct_bracketing(\"<<<\"\
    )); assert(!correct_bracketing(\"<<<><\")); assert(!correct_bracketing(\"<<<><>>\"\
    )); }` - Try it. It works.\n<|/ c |>\n<| c |>\n: Thanks, I fixed the error. Do\
    \ you see the `!` in `correct_bracketing`? It should have been `>=`, but that\
    \ means `<` gets counted as correct too...\n<|/ c |>\n<| c |>\nI thought you were\
    \ going to change `<` to `>` but it should be `<` not `<=`. By the way, the problem\
    \ with your solution was that you did not verify that the input starts and ends\
    \ with '<' and '>'.\n<|/ c |>\n<| c |>\n: The problem with your solution is that\
    \ `<` and `>` are just normal characters. Not only are they non-alphanumeric,\
    \ they are also unprintable. They're not special characters, not unprintable.\
    \ They're just characters.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n#include <iostream>\n\
    #include <string>\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpja5jz_jt.d(34): Error: declaration expected, not `<`

    /tmp/tmpja5jz_jt.d(40): Error: unterminated character constant

    /tmp/tmpja5jz_jt.d(40): Error: semicolon expected, not `"true"`

    /tmp/tmpja5jz_jt.d(40): Error: declaration expected, not `"true"`

    /tmp/tmpja5jz_jt.d(49): Error: unterminated character constant

    /tmp/tmpja5jz_jt.d(49): Error: unterminated character constant

    /tmp/tmpja5jz_jt.d(59): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(60): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(61): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(62): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(63): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(64): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(65): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(66): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(67): Error: declaration expected, not `assert`

    /tmp/tmpja5jz_jt.d(68): Error: declaration expecte'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int opens = 0;\n    int closes = 0;\n    for (int i=0; i < brackets.length();\
    \ i++)\n    {\n        if (brackets[i] == \"<\")\n            opens++;\n     \
    \   else if (brackets[i] == \">\")\n            closes++;\n        else\n    \
    \        return false;\n    }\n    return opens <= closes && opens == closes;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0zr7r67.d(21): Error: no property `length` for type `string`

    /tmp/tmpn0zr7r67.d(23): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpn0zr7r67.d(25): Error: incompatible types for `(brackets[cast(ulong)i])
    == (">")`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0zr7r67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracketpos = 0;\n    size_t bracketnum = 0;\n    for (size_t i=0, n=brackets.length();\
    \ i<n; ++i)\n    {\n        char c = brackets[i];\n        if (c == '<')\n   \
    \     {\n            ++bracketnum;\n        }\n        else if (c == '>')\n  \
    \      {\n            if (bracketnum == 0)\n            {\n                return\
    \ false;\n            }\n            else\n            {\n                --bracketnum;\n\
    \            }\n        }\n    }\n    return bracketnum == 0;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbg2zi9ww.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbg2zi9ww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(auto bracket:brackets) {\n        if(bracket != \"<\") { return false;\
    \ }\n    }\n    return true;\n}\n/*\n brackets is a string of \"<\" and \">\"\
    .\n    return true if every opening bracket has a corresponding closing bracket.\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpler0j1o3.d(19): Error: no identifier for declarator `bracket`

    /tmp/tmpler0j1o3.d(19): Error: expression expected, not `:`

    /tmp/tmpler0j1o3.d(19): Error: found `brackets` when expecting `;` following `for`
    condition

    /tmp/tmpler0j1o3.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpler0j1o3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i=0;\n    for (auto c:brackets)\n    {\n        if (!(c == '<'))\n\
    \            continue;\n        while (i < brackets.size() && !(brackets[i] ==\
    \ '<'))\n        {\n            i++;\n        }\n        if (i < brackets.size())\n\
    \        {\n            if (c != brackets[i])\n            {\n               \
    \ return false;\n            }\n            i++;\n        }\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpop_6w5nx.d(20): Error: no identifier for declarator `c`

    /tmp/tmpop_6w5nx.d(20): Error: expression expected, not `:`

    /tmp/tmpop_6w5nx.d(20): Error: found `brackets` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpop_6w5nx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i ++)\n        if(brackets[i] == '>')\n\
    \            if(brackets[i + 1] != '<')\n                return false;\n     \
    \   if(brackets[i] == '<')\n            if(brackets[i - 1] !='>')\n          \
    \      return false;\n    return true;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4lr95dql.d(19): Error: no property `length` for type `string`

    /tmp/tmp4lr95dql.d(23): Error: undefined identifier `i`

    /tmp/tmp4lr95dql.d(24): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lr95dql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    int len = 0;\n    while(i < brackets.length())\n    {\n  \
    \      char c = brackets.at(i);\n        ++len;\n        ++i;\n        if(c ==\
    \ '>')\n        {\n            if (len != 2)\n            {\n                return\
    \ false;\n            }\n            len = 0;\n        }\n        else if(c ==\
    \ '<')\n        {\n            if (len != 0)\n            {\n                return\
    \ false;\n            }\n            len = 1;\n        }\n        else\n     \
    \   {\n            len = 0;\n        }\n    }\n    return len == 0;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nHi, Thanks for your reply. Yes I already did this\
    \ but my question was how to convert this to a regex. I was unable to do it in\
    \ that way. I was trying to make it with pattern matching but that was not working.\n\
    <|/ c |>\n<| c |>\nI edited the answer to include a regex solution.  I tested\
    \ it on Python3.\n<|/ c |>\n<| c |>\nThanks, I'll try that and let you know.\n\
    <|/ c |>\n<| c |>\nHi, I tried your solution but I get an error of \n\"error:\
    \ inconsistent use of tabs and spaces in indentation\"\n<|/ c |>\n<| c |>\nThe\
    \ code works fine for me.  Are you using tabs?  You can fix that by doing Ctrl+Tab\
    \ to indent one tab more than it should be.\n<|/ c |>\n<| a tags=c++,regex |>\n\
    My attempt with regex was to match the beginning and end of the string and use\
    \ lookarounds to assert that the closing bracket is always present and if both\
    \ are present, that the number of opening brackets are the same as the number\
    \ of closing brackets. \n<code>\n^(?=(?!\\>)(?!\\<)).*\\>.*(\\<).*$\n</code>\n\
    However, this does not work. For example, it fails on this:\n<code>\n(<)\n</code>\n\
    However, it does work if you use non-greedy quantifiers (?!...) because they are\
    \ greedy by default. \n<code>\n^(?=(?!\\>)(?!\\<)).*?\\>.*(\\<).*$\n</code>\n\
    The main problem with this regex is that it only matches once and does not match\
    \ all possible bracketing combinations. \nAn alternative would be to match a closing\
    \ bracket and assert that it is not followed by the beginning of the string. \n\
    <code>\n\\<(?=[^()]*$)\n</code>\nThis works because [^()]*$ will match the end\
    \ of the string if there is another opening bracket. \nHere's some code that will\
    \ find the combination\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzpkr2u5.d(49): Error: declaration expected, not `<`

    /tmp/tmpnzpkr2u5.d(58): Error: unterminated character constant

    /tmp/tmpnzpkr2u5.d(70): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(70): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(70): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(70): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(78): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(78): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(78): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(78): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(83): Error: character ''\'' is not a valid token

    /tmp/tmpnzpkr2u5.d(86): Error: unterminated character constant

    /tmp/tmpnzpkr2u5.d(91): Error: declaration expected, not `assert`

    /tmp/tmpnzpkr2u5.d(92): Error: declaration expected, not `assert`

    /tmp/tmpnzpkr2u5.d(93): Error: declaration expected, not `assert`

    /tmp/tmpnzpkr2u5.d(94): Error: declaration ex'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto bracket_map = brackets.to<map<string, string>>();\n    for_each(bracket_map,\
    \ [](map<string, string> pair) {\n        pair[\"<\"] = \"<\";\n        pair[\"\
    >\"] = \">\";\n    });\n    \n    for_each(bracket_map, [](map<string, string>\
    \ pair) {\n        auto it = pair.find(\"<\");\n        auto start = pair.find(\"\
    <\", it + 1);\n        auto stop = pair.find(\">\", start);\n        pair.erase(start,\
    \ stop);\n    });\n    \n    bool result = true;\n    \n    for(auto it=bracket_map.begin();\
    \ it!=bracket_map.end(); ++it) {\n        for(auto it2=it->second.rbegin(); it2!=it->second.rend();\
    \ ++it2) {\n            auto next = it->second.find(*it2);\n            if(it->second.compare(it2->first,\
    \ \"<\") == 0) {\n                it->second.erase(it2->first);\n            \
    \    it2->second = it2->second->first;\n            }\n            else if(it->second.compare(it2->first,\
    \ \">\") == 0) {\n                it->second.erase(it2->first);\n            \
    \    it2->second = it2->second->first;\n            }\n            else {\n  \
    \              result = false;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 tags=c++14,c++ |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <fstream>\n#include <string>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdsswoob.d(19): Error: semicolon expected following auto declaration,
    not `<`

    /tmp/tmpjdsswoob.d(19): Error: found `<` instead of statement

    /tmp/tmpjdsswoob.d(20): Error: found `{` when expecting `,`

    /tmp/tmpjdsswoob.d(21): Error: found `;` when expecting `,`

    /tmp/tmpjdsswoob.d(22): Error: found `;` when expecting `,`

    /tmp/tmpjdsswoob.d(23): Error: expression expected, not `}`

    /tmp/tmpjdsswoob.d(25): Error: found `{` when expecting `,`

    /tmp/tmpjdsswoob.d(26): Error: expression expected, not `auto`

    /tmp/tmpjdsswoob.d(26): Error: found `it` when expecting `,`

    /tmp/tmpjdsswoob.d(26): Error: expression expected, not `=`

    /tmp/tmpjdsswoob.d(26): Error: found `pair` when expecting `,`

    /tmp/tmpjdsswoob.d(26): Error: found `;` when expecting `,`

    /tmp/tmpjdsswoob.d(27): Error: expression expected, not `auto`

    /tmp/tmpjdsswoob.d(27): Error: found `start` when expecting `,`

    /tmp/tmpjdsswoob.d(27): Error: expression expected, not `=`

    /tmp/tmpjdsswoob.d(27): Error: found `pair` when expecting `,`

    /tmp/tmpjdsswoob.d('
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<char, int> counts;\n    \n    for(int i = 0; i < brackets.length(); i++)\
    \ {\n        char c = brackets[i];\n        if(c != '>') {\n            counts[c]\
    \ = counts[c] + 1;\n        } else {\n            if(!counts[brackets[i+1]]) {\n\
    \                return false;\n            }\n            counts[c] = counts[c]\
    \ - 1;\n        }\n    }\n    return counts['>'] == 0 && counts['<'] == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfhegdvng.d(19): Error: found `,` when expecting `.` following char

    /tmp/tmpfhegdvng.d(19): Error: found `int` when expecting identifier following
    `char`.

    /tmp/tmpfhegdvng.d(19): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfhegdvng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto pos = brackets.find(brackets[0]);\n    if (pos == string::npos) return\
    \ false;\n    auto pos2 = brackets.find(brackets[pos]);\n    return (pos2 != string::npos);\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6tf7rtq.d(20): Error: found `:` when expecting `)`

    /tmp/tmpp6tf7rtq.d(20): Error: found `:` instead of statement

    /tmp/tmpp6tf7rtq.d(22): Error: found `:` when expecting `)`

    /tmp/tmpp6tf7rtq.d(22): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmpp6tf7rtq.d(22): Error: found `)` when expecting `;` following statement

    /tmp/tmpp6tf7rtq.d(22): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6tf7rtq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ if(brackets.length() % 2 != 0)\n    return false;\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw5u8e9__.d(21): Error: found `unittest` instead of statement

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool ok = true;\n    for (auto c : brackets)\n        ok &= (c == '<' || c\
    \ == '>');\n    return ok;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_zas5kz.d(20): Error: no identifier for declarator `c`

    /tmp/tmps_zas5kz.d(20): Error: expression expected, not `:`

    /tmp/tmps_zas5kz.d(20): Error: found `brackets` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_zas5kz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   string closed;\n    int i = 0;\n    bool has_closed = false;\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprl_hrapw.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprl_hrapw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   char opening_brackets = brackets[0];\n    char closing_brackets = brackets[1];\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2sn6qj3b.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2sn6qj3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++) {\n        char open = brackets[i];\n\
    \        if(open != '<') return false;\n        for(int j = i + 1; j < brackets.length();\
    \ j++) {\n            char close = brackets[j];\n            if(close != '>')\
    \ return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0\
    \ tags=c++,java,c |>\n<| a tags=c++,java,c |>\nI guess it's possible in C++ using\
    \ templates and lambdas. \nThe example below uses std::is_same to compare char\
    \ types and std::is_same to compare char and char const*.\n<code>\n#include <iostream>\n\
    #include <type_traits>\n#include <cassert>\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp53bwihxt.d(29): Error: declaration expected, not `<`

    /tmp/tmp53bwihxt.d(32): Error: unterminated character constant

    /tmp/tmp53bwihxt.d(42): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(43): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(44): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(45): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(46): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(47): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(48): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(49): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(50): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(51): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(52): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(53): Error: declaration expected, not `assert`

    /tmp/tmp53bwihxt.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5'
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int i = 0;\n    int j = 0;\n    while (i<brackets.length())\n    {\n     \
    \   if (brackets[i]==\"<\")\n        {\n            if (brackets[j] != \"<\")\
    \ return false;\n            ++j;\n        }\n        else if (brackets[i]==\"\
    >\")\n        {\n            if (brackets[j] != \">\") return false;\n       \
    \     ++j;\n        }\n        else if (brackets[i]==\"<\")\n        {\n     \
    \       ++j;\n        }\n        ++i;\n    }\n    return j==brackets.length();\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnem_wvwd.d(21): Error: no property `length` for type `string`

    /tmp/tmpnem_wvwd.d(23): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpnem_wvwd.d(25): Error: incompatible types for `(brackets[cast(ulong)j])
    != ("<")`: `immutable(char)` and `string`

    /tmp/tmpnem_wvwd.d(28): Error: incompatible types for `(brackets[cast(ulong)i])
    == (">")`: `immutable(char)` and `string`

    /tmp/tmpnem_wvwd.d(30): Error: incompatible types for `(brackets[cast(ulong)j])
    != (">")`: `immutable(char)` and `string`

    /tmp/tmpnem_wvwd.d(33): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpnem_wvwd.d(39): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnem_wvwd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t bracket_count = 0;\n    for (auto i : brackets)\n    {\n        if\
    \ (i == '>')\n            bracket_count++;\n        else if (i == '<')\n     \
    \   {\n            if (bracket_count > 0)\n            {\n                --bracket_count;\n\
    \            }\n        }\n        else if (bracket_count == 0)\n        {\n \
    \           return false;\n        }\n    }\n    \n    return bracket_count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqf3cn_y.d(20): Error: no identifier for declarator `i`

    /tmp/tmpdqf3cn_y.d(20): Error: expression expected, not `:`

    /tmp/tmpdqf3cn_y.d(20): Error: found `brackets` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqf3cn_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164473
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (size_t i = 0; i < brackets.length(); i++) {\n        if ((brackets[i]\
    \ != '<') && (brackets[i] != '>'))\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1uax5tr9.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1uax5tr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); i += 2) {\n\t\tif (brackets[i + 1] != brackets[i])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzztyc4e1.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzztyc4e1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 0; i < brackets.length(); i++)\n    {\n        if (brackets[i]\
    \ != \"<\")\n            return false;\n        brackets[i] = \"<\";\n    }\n\
    \    for (int i = brackets.length(); i > 0; i--)\n    {\n        if (brackets[i]\
    \ != \">\")\n            return false;\n        brackets[i] = \">\";\n    }\n\
    \    return true;\n}\n/*\n split_string takes a string and splits it up into an\
    \ array of strings,\n separated by delimiter.\n    \n    >>> split_string(\"<a>b<c>d\"\
    , \">\")\n    [\"a\", \"b\", \"c\"]\n    >>> split_string(\"<a>b<c>d\", \"<\"\
    )\n    [\"<\", \"a\", \"b\", \"c\", \"d>\"]\n*/\nvector<string> split_string(string\
    \ str, string delimiter)\n{\n    vector<string> result;\n    stringstream ss(str);\n\
    \    string token;\n    while (getline(ss, token, delimiter))\n        result.push_back(token);\n\
    \    return result;\n}\n/*\n convert_index_to_key takes a string representing\
    \ the index of some \n item and returns a string representing the key.\n    \n\
    \    >>> convert_index_to_key(\"a\")\n    \"a\"\n    >>> convert_index_to_key(\"\
    1\")\n    \"1\"\n*/\nstring convert_index_to_key(string index)\n{\n    return\
    \ index.substr(0, 1);\n}\n/*\n convert_key_to_index takes a string representing\
    \ the key of an item\n and returns the index of that item.\n    \n    >>> convert_key_to_index(\"\
    a\")\n    \"1\"\n    >>> convert_key_to_index(\"1\")\n    \"a\"\n*/\nstring convert_key_to_index(string\
    \ key)\n{\n    return key.substr(1, 1);\n}\n/*\n compare_key_sort takes a string\
    \ representing a key, and returns a \n string representing the same key sorted\
    \ in alphabetical order.\n    \n    >>> compare_key_sort(\"a\")\n    \"a\"\n \
    \   >>> compare_key_sort(\"b\")\n    \"b\"\n*/\nstring compare_key_sort(string\
    \ key)\n{\n    char keyToCompare = convert_key_to_index(key);\n    int first =\
    \ convert_index_to_key(convert_index_to_key(keyToCompare));\n    return convert_index_to_key(convert_index_to_key(keyToCompare))\
    \ + \n        compare_key_sort(convert_index_to_key(first + 1));\n}\n/*\n compare_key_sort_by_index\
    \ takes a string representing a key, and \n returns a string representing the\
    \ same key sorted in alphabetical order.\n    \n    >>> compare_key_sort_by_index(\"\
    a\")\n    \"a\"\n    >>> compare_key_sort_by_index(\"b\")\n    \"b\"\n*/\nstring\
    \ compare_key_sort_by_index(string key)\n{\n    char keyToCompare = convert_key_to_index(key);\n\
    \    int first = convert_index_\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kcyd4gp.d(42): Error: no identifier for declarator `vector`

    /tmp/tmp8kcyd4gp.d(42): Error: declaration expected, not `<`

    /tmp/tmp8kcyd4gp.d(47): Error: declaration expected, not `while`

    /tmp/tmp8kcyd4gp.d(49): Error: declaration expected, not `return`

    /tmp/tmp8kcyd4gp.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kcyd4gp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (int i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] !=\
    \ '<' || brackets[i + 1] != '<') {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr30wv0bk.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr30wv0bk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto bracket = brackets.front();\n    auto bracketlen = bracket.length();\n\
    \    for (auto i = 1; i < bracketlen; ++i) {\n        if (bracket != brackets.at(i))\
    \ \n            return false;\n    }\n    return bracketlen == brackets.length();\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ string result;\n  bool has_bracket;\n  for (int i = 0; i < brackets.length();\
    \ i++) {\n    has_bracket = false;\n    for (int j = 0; j < brackets.length();\
    \ j++) {\n      if (brackets[i] == '<' && brackets[j] == '>') {\n        has_bracket\
    \ = true;\n      }\n    }\n    if (!has_bracket)\n      return false;\n  }\n \
    \ return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4wgppg1i.d(21): Error: no property `length` for type `string`

    /tmp/tmp4wgppg1i.d(23): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4wgppg1i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int bracketcount = brackets.size();\n    for(int i = 0; i < bracketcount;\
    \ ++i)\n    {\n        if(brackets[i] != '<')\n            return false;\n   \
    \     else if(brackets[i+1] != '>')\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgyjx2kpi.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgyjx2kpi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    char opening_brackets[] = {'<', '<', '>', '>'}; \n\tauto n = brackets.length();\n\
    \tfor (int i=0; i<n; i++) {\n\t\tif (brackets[i] != opening_brackets[i]) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg10zan8z.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `char[] opening_brackets`

    /tmp/tmpg10zan8z.d(19): Error: a struct is not a valid initializer for a `char[]`

    /tmp/tmpg10zan8z.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg10zan8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto opening = brackets.find(\"<\");\n    auto closing = brackets.find(\"\
    >\");\n    \n    if (opening == string::npos || closing == string::npos)\n   \
    \     error(\"Bracketing\", \"missing opening/closing brackets\");\n    \n   \
    \ if (closing < opening)\n        error(\"Bracketing\", \"closing bracket should\
    \ be greater than the opening bracket\");\n    \n    if (opening > brackets.size()\
    \ - 1)\n        error(\"Bracketing\", \"opening bracket should be greater than\
    \ the closing bracket\");\n    \n    return opening+1 != closing;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkafkj5hd.d(22): Error: found `:` when expecting `)`

    /tmp/tmpkafkj5hd.d(22): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkafkj5hd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if(brackets == \"\") {\n        return false;\n    }\n    int opening_brackets\
    \ = brackets.length();\n    for(int i = 0; i < opening_brackets; ++i) {\n    \
    \    if(brackets[i] != '<') {\n            return false;\n        }\n    }\n \
    \   for(int i = 0; brackets[i] != '<'; ++i) {\n        if(brackets[i] != '>')\
    \ {\n            return false;\n        }\n    }\n    for(int i = opening_brackets-1;\
    \ i >= 0; --i) {\n        if(brackets[i] != '<') {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuvg2e90r.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuvg2e90r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool result = true;\n    for (unsigned i = 0; i < brackets.length(); ++i)\n\
    \    {\n        if ( brackets[i] != \"<\" )\n        {\n            result = false;\n\
    \            break;\n        }\n        if (brackets[i] == \">\")\n        {\n\
    \            for (unsigned j = i + 1; j < brackets.length(); ++j)\n          \
    \  {\n                if ( brackets[j] != \">\" )\n                {\n       \
    \             result = false;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjnk98mb.d(20): Error: undefined identifier `unsigned`, did you
    mean `uint`?

    /tmp/tmpnjnk98mb.d(20): Error: no property `length` for type `string`

    /tmp/tmpnjnk98mb.d(29): Error: undefined identifier `unsigned`, did you mean `uint`?

    /tmp/tmpnjnk98mb.d(29): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjnk98mb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int left = 0;\n    int right = 0;\n    for(int i = 0; i < brackets.length();\
    \ i ++) {\n        if(brackets[i] == \"<\") {\n            left ++;\n        }\n\
    \        else if(brackets[i] == \">\") {\n            right ++;\n        }\n \
    \       else {\n            assert(0);\n        }\n        if(left >= right) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc90_qzq.d(21): Error: no property `length` for type `string`

    /tmp/tmpvc90_qzq.d(22): Error: incompatible types for `(brackets[cast(ulong)i])
    == ("<")`: `immutable(char)` and `string`

    /tmp/tmpvc90_qzq.d(25): Error: incompatible types for `(brackets[cast(ulong)i])
    == (">")`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc90_qzq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (auto it = brackets.cbegin(); it != brackets.cend(); ++it) {\n       \
    \ if ((*it) != '<') return false;\n        auto next = brackets.find(\">\", it);\n\
    \        if (next == string::npos) return false;\n        string openingBracket,\
    \ closingBracket;\n        auto openingBracketPos = brackets.find(*it, next);\n\
    \        auto closingBracketPos = brackets.find(*it, next);\n        if (openingBracketPos\
    \ == string::npos || closingBracketPos == string::npos) return false;\n      \
    \  openingBracket = brackets.substr(openingBracketPos, openingBracketPos - it);\n\
    \        closingBracket = brackets.substr(closingBracketPos, closingBracketPos\
    \ - it);\n        next = brackets.find(\">\", next);\n        if (next == string::npos)\
    \ return false;\n        auto closingBracketPos = brackets.find(*it, next);\n\
    \        if (closingBracketPos == string::npos) return false;\n        openingBracket\
    \ = brackets.substr(openingBracketPos, openingBracketPos - it);\n        closingBracket\
    \ = brackets.substr(closingBracketPos, closingBracketPos - it);\n        next\
    \ = brackets.find(\">\", next);\n        if (next == string::npos) return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6zdzzht.d(22): Error: found `:` when expecting `)`

    /tmp/tmp_6zdzzht.d(22): Error: found `:` instead of statement

    /tmp/tmp_6zdzzht.d(26): Error: found `:` when expecting `)`

    /tmp/tmp_6zdzzht.d(26): Error: found `:` instead of statement

    /tmp/tmp_6zdzzht.d(30): Error: found `:` when expecting `)`

    /tmp/tmp_6zdzzht.d(30): Error: found `:` instead of statement

    /tmp/tmp_6zdzzht.d(32): Error: found `:` when expecting `)`

    /tmp/tmp_6zdzzht.d(32): Error: found `:` instead of statement

    /tmp/tmp_6zdzzht.d(36): Error: found `:` when expecting `)`

    /tmp/tmp_6zdzzht.d(36): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6zdzzht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto findbracket = [&](char c) {\n        return c == '>' || c == '<';\n \
    \   };\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkoift72g.d(19): Error: expression expected, not `]`

    /tmp/tmpkoift72g.d(19): Error: found `c` when expecting `.` following char

    /tmp/tmpkoift72g.d(19): Error: found `)` when expecting identifier following `char`.

    /tmp/tmpkoift72g.d(19): Error: found `{` when expecting `,`

    /tmp/tmpkoift72g.d(20): Error: expression expected, not `return`

    /tmp/tmpkoift72g.d(20): Error: found `c` when expecting `,`

    /tmp/tmpkoift72g.d(20): Error: expression expected, not `==`

    /tmp/tmpkoift72g.d(20): Error: found `62U` when expecting `,`

    /tmp/tmpkoift72g.d(20): Error: expression expected, not `||`

    /tmp/tmpkoift72g.d(20): Error: found `c` when expecting `,`

    /tmp/tmpkoift72g.d(20): Error: expression expected, not `==`

    /tmp/tmpkoift72g.d(20): Error: found `60U` when expecting `,`

    /tmp/tmpkoift72g.d(20): Error: expression expected, not `;`

    /tmp/tmpkoift72g.d(21): Error: found `}` when expecting `,`

    /tmp/tmpkoift72g.d(21): Error: expression expected, not `;`

    /tmp/tmpkoift72g.d(22): Error: found `unittest` when expecting `,`

    /tmp/'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int len = brackets.length();\n\tfor (int i = 0; i < len; ++i) {\n\t\tif (!isalnum(brackets[i])\
    \ && brackets[i] != ' ') \n\t\t\treturn false;\n\t}\n\t\n\tfor (int i = 0; i <\
    \ len; ++i) {\n\t\tif (brackets[i] == '>') {\n\t\t\tif (brackets[len - i - 1]\
    \ != '>') \n\t\t\t\treturn false;\n\t\t} else if (brackets[i] == '<') {\n\t\t\t\
    if (brackets[len - i - 1] != '<') \n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t\
    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n  \
    \  assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzm1xbpq5.d(19): Error: no property `length` for type `string`

    /tmp/tmpzm1xbpq5.d(21): Error: undefined identifier `isalnum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzm1xbpq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // initialize to true\n    bool res = true;\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5j7gb9eh.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5j7gb9eh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t i = 0;\n    for (; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            continue;\n        }\n        for (size_t j = i + 1;\
    \ j < brackets.length(); j++) {\n            if (brackets[j] != '>') {\n     \
    \           break;\n            }\n        }\n        if (j == brackets.length()\
    \ || brackets[i] != brackets[j]) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gotc13v.d(20): Error: no property `length` for type `string`

    /tmp/tmp9gotc13v.d(24): Error: no property `length` for type `string`

    /tmp/tmp9gotc13v.d(29): Error: undefined identifier `j`

    /tmp/tmp9gotc13v.d(29): Error: no property `length` for type `string`

    /tmp/tmp9gotc13v.d(29): Error: undefined identifier `j`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gotc13v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bstart = 0;\n\tsize_t bend = 0;\n\tsize_t estart = 0;\n\tsize_t eend =\
    \ 0;\n\tbool valid = false;\n\tfor (size_t i = 0;; ++i) {\n\t\tsize_t j = brackets.find('<',\
    \ i);\n\t\tif (j != string::npos) {\n\t\t\tbstart = i;\n\t\t\tvalid = true;\n\t\
    \t}\n\t\tj = brackets.find('>', i);\n\t\tif (j != string::npos) {\n\t\t\tbend\
    \ = i;\n\t\t\tvalid = true;\n\t\t}\n\t\ti = j;\n\t\tif (!valid) break;\n\t}\n\t\
    if (!valid) return false;\n\tif (estart > bend) return true;\n\tif (eend < bstart)\
    \ return true;\n\tstring left  = brackets.substr(0, bstart);\n\tstring right =\
    \ brackets.substr(bend+1, (bend+2)-bstart);\n\tstring middle = brackets.substr(bend+2,\
    \ (bend+3)-bstart);\n\t\n\tif (estart+1 < bstart+2) {\n\t\tif (brackets.compare(bstart+1,\
    \ bend+2, \"><\", 2) != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (brackets.compare(bstart+3,\
    \ bend+2, \"<>\", 2) != 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif (brackets.compare(bstart+1,\
    \ bend+1, \">\", 2) != 0) {\n\t\treturn false;\n\t}\n\tif (brackets.compare(bstart+1,\
    \ bend+2, \"<>\", 2) != 0) {\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\n\
    // TODO: use std::pair for an arbitrary number of arguments\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// NOTE: this currently\
    \ only checks the first opening bracket\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfp6qhogi.d(26): Error: found `:` when expecting `)`

    /tmp/tmpfp6qhogi.d(26): Error: found `:` instead of statement

    /tmp/tmpfp6qhogi.d(31): Error: found `:` when expecting `)`

    /tmp/tmpfp6qhogi.d(31): Error: found `:` instead of statement

    /tmp/tmpfp6qhogi.d(35): Error: no identifier for declarator `i`

    /tmp/tmpfp6qhogi.d(35): Error: declaration expected, not `=`

    /tmp/tmpfp6qhogi.d(36): Error: declaration expected, not `if`

    /tmp/tmpfp6qhogi.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfp6qhogi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, int> map;\n    int count = 0;\n    for (int i = 0; i < brackets.length();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            map[brackets.substr(0,\
    \ i)] = count;\n        }\n        else if (brackets[i] == '>') {\n          \
    \  if (map[brackets.substr(0, i)] == count) {\n                return false;\n\
    \            }\n        }\n        ++count;\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeyxnivk7.d(19): Error: found `>` when expecting `.` following int

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeyxnivk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (unsigned i=0, n=brackets.length(); i<n; ++i)\n        if (brackets[i]\
    \ != '<') return false;\n    \n    for (unsigned i=0, n=brackets.length(); i<n;\
    \ ++i)\n        if (brackets[i] == '>') return true;\n    \n    return false;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05jeeyru.d(19): Error: undefined identifier `unsigned`, did you
    mean `uint`?

    /tmp/tmp05jeeyru.d(19): Error: undefined identifier `unsigned`, did you mean `uint`?

    /tmp/tmp05jeeyru.d(19): Error: no property `length` for type `string`

    /tmp/tmp05jeeyru.d(22): Error: undefined identifier `unsigned`, did you mean `uint`?

    /tmp/tmp05jeeyru.d(22): Error: undefined identifier `unsigned`, did you mean `uint`?

    /tmp/tmp05jeeyru.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05jeeyru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ map<char,char> lookup;\n  for(int i = 0; i < brackets.length(); ++i)\n  {\n\
    \    lookup[brackets[i]]\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 tags=stack,c++\
    \ |>\nI wrote a very simple solution to this. \nIt just checks if the last char\
    \ of the input is \"</\" then it will return false\n<code>\nstring input;\ncin\
    \ >> input;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr49lvstm.d(19): Error: found `,` when expecting `.` following char

    /tmp/tmpr49lvstm.d(19): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmpr49lvstm.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmpr49lvstm.d(23): Error: found `}` when expecting `;` following statement

    /tmp/tmpr49lvstm.d(25): Error: found `<` instead of statement

    /tmp/tmpr49lvstm.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr49lvstm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for (size_t i = 0; i < len; i++)\n  \
    \  {\n        char b = brackets.at(i);\n        if (b == '<')\n        {\n   \
    \         if (brackets.at(i - 1) == '<') return false;\n            else\n   \
    \         {\n                if (brackets.at(i - 2) == '<') return false;\n  \
    \              else i++;\n            }\n        }\n        else if (b == '>')\n\
    \        {\n            if (brackets.at(i - 1) == '<') return false;\n       \
    \     else if(brackets.at(i - 2) == '>')\n            {\n                if (brackets.at(i\
    \ - 3) == '<') return false;\n                else i++;\n            }\n     \
    \   }\n    }\n    return true;\n}\n</code>\n<|/ a tags=regex,c++,algorithm |>\n\
    <| a tags=regex,c++,algorithm |>\nIf we are only concerned about correct bracketing,\
    \ then I suggest using std::vector/std::list to store the strings (instead of\
    \ recursion), but then we only need to worry about correct bracketing, which can\
    \ be done with a simple loop using std::find() to find and remove the '<'/'> at\
    \ the index where the next '<' should appear.\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqgtpefh.d(44): Error: declaration expected, not `<`

    /tmp/tmpiqgtpefh.d(47): Error: unterminated character constant

    /tmp/tmpiqgtpefh.d(57): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(58): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(59): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(60): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(61): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(62): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(63): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(64): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(65): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(66): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(67): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(68): Error: declaration expected, not `assert`

    /tmp/tmpiqgtpefh.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t len = brackets.length();\n    for(int i = 0;  i < len; ++ i)\n    {\n\
    \        char curr = brackets.at(i);\n        bool curr = curr.isdigit();\n  \
    \      if(curr && i < (len - 1))\n        {\n            char next = brackets.at(i\
    \ + 1);\n            bool next = next.isdigit();\n            if(curr && next\
    \ && curr && next)\n                return false;\n            else\n        \
    \        return true;\n        }\n        \n        if(!curr)\n            return\
    \ true;\n    }\n    \n    return true;\n}\n</code>\n<|/ a tags=c++,string |>\n\
    <| c |>\n`correct_bracketing(\"><<>\")` returns true.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ return true. Your if statement will exit immediately when it finds a closing\
    \ bracket. Hence the function returns true.\n<|/ c |>\n<| a tags=c++,string |>\n\
    This is what I came up with. It checks for all types of brackets.\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpytpwfhnh.d(40): Error: declaration expected, not `<`

    /tmp/tmpytpwfhnh.d(46): Error: unterminated character constant

    /tmp/tmpytpwfhnh.d(55): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(56): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(57): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(58): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(59): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(60): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(61): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(62): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(63): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(64): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(65): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(66): Error: declaration expected, not `assert`

    /tmp/tmpytpwfhnh.d(67): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   auto b = brackets.begin();\n    auto e = brackets.end();\n    while (b !=\
    \ e)\n    {\n        if (*b++ != *e--) return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5don5mx.d(19): Error: no property `begin` for type `string`

    /tmp/tmpc5don5mx.d(20): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5don5mx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int size = brackets.length();\n    int i;\n    int j = 0;\n    bool result\
    \ = (j == size);\n    for (i = 0; i < size; ++i)\n    {\n        if ((brackets[i]\
    \ == '<') && (j < i))\n        {\n            result = false;\n            break;\n\
    \        }\n    }\n    for (++i; i < size; ++i)\n    {\n        if ((brackets[i]\
    \ == '>') && (j > i))\n        {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I'm surprised this gets so many upvotes.  It seems so horrible to me, to be honest.\
    \  Just to say that I've never been a fan of algorithms based on simple comparisons.\n\
    <|/ c |>\n<| c |>\nI agree, your solution is much better. I just wanted to be\
    \ sure I hadn't missed anything.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvr3omzjf.d(41): Error: declaration expected, not `<`

    /tmp/tmpvr3omzjf.d(44): Error: unterminated character constant

    /tmp/tmpvr3omzjf.d(44): Error: unterminated character constant

    /tmp/tmpvr3omzjf.d(47): Error: unterminated character constant

    /tmp/tmpvr3omzjf.d(55): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(56): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(57): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(58): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(59): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(60): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(61): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(62): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(63): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(64): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(65): Error: declaration expected, not `assert`

    /tmp/tmpvr3omzjf.d(66): Error: declaration expec'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   bool isRightBracket = brackets.at(0) < brackets.at(1);\n    int length = (int)brackets.size();\n\
    \    for(int i=1; i<length; i++)\n    {\n        if(brackets.at(i) != brackets.at(i-1))\n\
    \        {\n            if(brackets.at(i) == \">\")\n            {\n         \
    \       if(brackets.at(i-1) == \"<\")\n                    isRightBracket = false;\n\
    \            }\n            else if(brackets.at(i) == \"<\")\n            {\n\
    \                if(brackets.at(i-1) == \">\")\n                    isRightBracket\
    \ = true;\n            }\n        }\n    }\n    return isRightBracket;\n}\n</code>\n\
    <|/ a |>\n<| a tags=c++,c dscore=0 |>\nThe following code can check whether there\
    \ is an open parenthesis in a given string. Although it can be optimized to use\
    \ less loops, but it will do for now. Also, note that this will check whether\
    \ there is any parenthesis present or not.\n<code>\n#include<iostream>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\n \
    \   assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpac5oljpx.d(20): Error: C style cast illegal, use `cast(int)brackets.size()`

    /tmp/tmpac5oljpx.d(39): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac5oljpx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i=0; i<brackets.length(); i+=2)\n        if(brackets[i] != brackets[i+1])\n\
    \            return false;\n    return true;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nA little more detail on how it works would be helpful\n<|/ c |>\n<| c\
    \ |>\nI added some detail to the answer.\n<|/ c |>\n<| c |>\nThe first for loop\
    \ checks if all characters in brackets are the same, while the second checks if\
    \ they are all the same.\n<|/ c |>\n<| a tags=c,algorithm |>\nHere's a simple\
    \ implementation in python for parsing brackets:\n<code>\ndef balanced_brackets(brackets,\
    \ bracket='}'):\n    \"\"\"\n    >>> balanced_brackets(\"\")\n    {}\n    >>>\
    \ balanced_brackets(\"{}\")\n    {}\n    >>> balanced_brackets(\"{}{}\")\n   \
    \ {{}}\n    >>> balanced_brackets(\"{{}{}{}{}}\")\n    {{{}}{}{}}\n    >>> balanced_brackets(\"\
    {{}{{}}}\")\n    {{{}}{{{}}}}\n    >>> balanced_brackets(\"{{}{}{{}}}\")\n   \
    \ {{{}}{}{{}}}\n    >>> balanced_brackets(\"{{{}{}}}\")\n    {{{}}{}}\n    >>>\
    \ balanced_brackets(\"{{{}{{}}}}\") # unbalanced\n    >>> balanced_brackets(\"\
    {{{}{}{{}}}}\") # unbalanced\n    >>> balanced_brackets(\"{{{}}}\")\n    >>> balanced_brackets(\"\
    {{{}}}\")\n    >>> balanced_brackets(\"{}\")\n    >>> balanced_brackets(\"{}\"\
    )\n    >>> balanced_brackets(\"}}\")\n    >>> balanced_brackets(\"}}\")\n    >>>\
    \ balanced_brackets(\"}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa_zsde3a.d(24): Error: declaration expected, not `<`

    /tmp/tmpa_zsde3a.d(36): Error: unterminated character constant

    /tmp/tmpa_zsde3a.d(67): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(68): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(69): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(70): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(71): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(72): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(73): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(74): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(75): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(76): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(77): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(78): Error: declaration expected, not `assert`

    /tmp/tmpa_zsde3a.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(size_t i = 0; i < brackets.length(); ++i)\n    {\n        auto s = brackets[i];\n\
    \        if(!is_open_bracket(s))\n            return false;\n        if(i != brackets.length()\
    \ - 1)\n            if(brackets[i + 1] != is_close_bracket(s))\n             \
    \   return false;\n    }\n    return true;\n}\n/*\n is_open_string returns true\
    \ if s is a string that's immediately followed by a closing bracket.\n*/\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86_4sbwj.d(19): Error: no property `length` for type `string`

    /tmp/tmp86_4sbwj.d(22): Error: undefined identifier `is_open_bracket`

    /tmp/tmp86_4sbwj.d(24): Error: no property `length` for type `string`

    /tmp/tmp86_4sbwj.d(25): Error: undefined identifier `is_close_bracket`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86_4sbwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    for (int i = 0; i < brackets.length(); ++i)\n\t{\n\t\tint next = brackets[i +\
    \ 1];\n\t\tif (next == '<' || next == '>')\n\t\t{\n\t\t\tif (!brackets.startsWith(brackets.substring(i)))\n\
    \t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1_g9agn.d(19): Error: no property `length` for type `string`

    /tmp/tmpv1_g9agn.d(24): Error: no property `startsWith` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1_g9agn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<string, int> m;\n    // find position of every opening bracket\n    for\
    \ (auto b = brackets.cbegin(); b != brackets.cend(); b++)\n        m[*b] = 1;\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    <>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    string open_brackets, close_brackets;\n\t\n\tfor (int i = 0; i < brackets.length();\
    \ i++)\n\t{\n\t\tif (brackets[i] != '<')\n\t\t\treturn true;\n\t\t\n\t\topen_brackets\
    \ += brackets[i];\n\t}\n\t\n\tfor (int i = 0; i < brackets.length(); i++)\n\t\
    {\n\t\tif (brackets[i] != '>')\n\t\t\treturn true;\n\t\t\n\t\tclose_brackets +=\
    \ brackets[i];\n\t}\n\t\n\tfor (int i = 0; i < open_brackets.length(); i++)\n\t\
    {\n\t\tif (open_brackets.find(\"<\", i) == string::npos || close_brackets.find(\"\
    >\", i) == string::npos)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptp9t_64v.d(39): Error: found `:` when expecting `)`

    /tmp/tmptp9t_64v.d(39): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptp9t_64v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   if (brackets.length() == 0)\n    {\n        return true;\n    }\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibr6lkdz.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibr6lkdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for (size_t i = 0 ; i < brackets.length ; i++)\n    {\n        if (brackets[i]\
    \ != '<')\n            return false;\n    }\n    for (size_t i = 0 ; i < brackets.length\
    \ ; i++)\n    {\n        if (brackets[i] != '>')\n            return false;\n\
    \    }\n    return true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnybkhr9i.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f35]

    ??:? void tmpnybkhr9i.__unittest_L31_C1() [0x427ae2]

    ??:? void tmpnybkhr9i.__modtest() [0x427cb8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bccf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcf5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc81]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab39]

    ??:? runModuleUnitTests [0x42baa5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i=0;i<brackets.length();i++) {\n        int c = brackets[i];\n   \
    \     if (c == '<') {\n            if(brackets[i+1] == ' ') {\n              \
    \  return false;\n            } else {\n                if(brackets[i+2] == '>')\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    return true;\n}\n</code>\n<|/ a tags=java,parsing,language-design\
    \ |>\n<| a tags=java,parsing,language-design |>\nA simple solution could be to\
    \ replace \">>>\" with \"<<\" before parsing them.\n<|/ a dscore=2 |>\n<| a |>\n\
    I propose a very simple approach: use String.replace().  \n<code>\nString input\
    \ = \"<><<>>\";\nString noBrackets = input.replace(\">>\", \"<\");\n</code>\n\
    <|/ a tags=java,parsing,language-design dscore=2 |>\n<| a dscore=2 |>\nI would\
    \ first replace all brackets with \"\", then parse it character by character:\n\
    <code>\nString originalString = \"<><<>>\";\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8mo51m9.d(33): Error: declaration expected, not `<`

    /tmp/tmpw8mo51m9.d(43): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8mo51m9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int length = brackets.length();\n    for(int i = 0; i < length; i++)\n   \
    \ {\n        if(!brackets[i]) \n        {\n            length--;\n           \
    \ if(length == 0) \n            {\n                return false;\n           \
    \ }\n        }\n        else \n        {\n            char ch = brackets[i+1];\n\
    \            for(int j = i + 2; j < length; j++)\n            {\n            \
    \    if(ch == brackets[j]) \n                {\n                    length--;\n\
    \                    if(length == 0) \n                    {\n               \
    \         return false;\n                    }\n                    else\n   \
    \                 {\n                        i = j + 1;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuecvsyen.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuecvsyen.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int last = 0;\n    map<int, bool> bracketing;\n    for (int i = 0; i < brackets.length();\
    \ ++i)\n    {\n        if (brackets[i] == '<') \n        {\n            if (bracketing.find(i)\
    \ == bracketing.end())\n            {\n                bracketing[i] = true;\n\
    \                last = i;\n            }\n            else\n            {\n \
    \               return false;\n            }\n        }\n        else if (brackets[i]\
    \ == '>')\n        {\n            if (bracketing.find(i) == bracketing.end())\n\
    \            {\n                return false;\n            }\n            else\
    \ if (bracketing.find(last) == bracketing.end())\n            {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is a really good solution, thank you. However, the problem\
    \ was with my C++ knowledge. Your answer is really good, but my question was more\
    \ specific, I only needed the solution to find the brackets correctly.\n<|/ c\
    \ |>\n<| c |>\n: If you think your question was specific enough it would be great\
    \ to rephrase it so that it becomes answerable.\n<|/ c |>\n<| c |>\nI rephrased\
    \ my question to be more specific.\n<|/ c |>\n<| c |>\n: No problem and good luck\
    \ with your program!\n<|/ c |>\n<| a dscore=2 |>\nThe string you have provided\
    \ is not a good candidate for using a trie, because it is very unbalanced, thus\
    \ un-optimal for usage as a trie.\nA trie will solve this problem for you.  Instead\
    \ of storing the string as a sequence of chars, you should store it as an ordered\
    \ set of integers corresponding to each character in the string.  Each node of\
    \ the trie would store the next node to visit, plus the current character in the\
    \ string.  Then when looking up a node, you can find out which characters follow\
    \ the current; you can also find out the depth of the trie as you descend the\
    \ trie.\nThis approach will also avoid some redundancy in the trie structure.\n\
    Here's a simple trie data structure (in C++) that uses this approach.\n<code>\n\
    class Trie\n{\n  public:\n    void insert(char ch)\n    {\n      currentDepth++;\n\
    \      if(table[ch] == nullptr) {\n        table[ch] = new Trie();\n      }\n\
    \      currentNode = table[ch];\n    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpthl2kmer.d(20): Error: found `,` when expecting `.` following int

    /tmp/tmpthl2kmer.d(20): Error: found `bool` when expecting identifier following
    `int`.

    /tmp/tmpthl2kmer.d(20): Error: found `>` when expecting `;` following statement

    /tmp/tmpthl2kmer.d(49): Error: declaration expected, not `<`

    /tmp/tmpthl2kmer.d(65): Error: semicolon expected, not `also`

    /tmp/tmpthl2kmer.d(65): Error: semicolon expected, not `out`

    /tmp/tmpthl2kmer.d(65): Error: declaration expected, not `out`

    /tmp/tmpthl2kmer.d(67): Error: unterminated character constant

    /tmp/tmpthl2kmer.d(75): Error: declaration expected, not `if`

    /tmp/tmpthl2kmer.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthl2kmer.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t n = 0;\n    bool result = true;\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7warn75x.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7warn75x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int len = brackets.length();\n\tfor (int i = 0; i < len; i++)\n\t\tif (brackets[i]\
    \ == '<') {\n\t\t\tfor (int j = i+1; j < len; j++)\n\t\t\t\tif (brackets[j] ==\
    \ '>')\n\t\t\t\t\treturn false;\n\t\t\tbreak;\n\t\t}\n\treturn true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplf8dc4tm.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplf8dc4tm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    assert(brackets.length() == 2);\n\tassert(brackets[0] == '<');\n\tassert(brackets[1]\
    \ == '>');\n\tint count = 0;\n\tfor (int i = 0; i < brackets.length(); i++)\n\t\
    {\n\t\tif (brackets[i] == '>')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == '<')\n\t\t{\n\t\t\tcount--;\n\t\t}\n\t\telse assert(brackets[i] == brackets[i-1]);\n\
    \t}\n\treturn count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4q4v43mi.d(19): Error: no property `length` for type `string`

    /tmp/tmp4q4v43mi.d(23): Error: no property `length` for type `string`

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    /*\n\t\tThis function returns true if every opening bracket has a corresponding\
    \ closing bracket.\n\t*/\n\tint i = 0;\n\twhile (i < brackets.size())\n\t{\n\t\
    \tif (brackets[i] == '>')\n\t\t{\n\t\t\tint j = i + 1;\n\t\t\twhile (j < brackets.size()\
    \ && brackets[j] != '<')\n\t\t\t\tj++;\n\t\t\tif (j == brackets.size())\n\t\t\t\
    \treturn true;\n\t\t}\n\t\telse if (brackets[i] == '<')\n\t\t{\n\t\t\tint j =\
    \ i + 1;\n\t\t\twhile (j < brackets.size() && brackets[j] != '>')\n\t\t\t\tj++;\n\
    \t\t\tif (j == brackets.size())\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\
    \treturn true;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n\
    \    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") == true);\n\
    \    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ala7ln5.d(23): Error: no property `size` for type `string`

    /tmp/tmp7ala7ln5.d(28): Error: no property `size` for type `string`

    /tmp/tmp7ala7ln5.d(30): Error: no property `size` for type `string`

    /tmp/tmp7ala7ln5.d(36): Error: no property `size` for type `string`

    /tmp/tmp7ala7ln5.d(38): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ala7ln5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   map<char,char> m;\n    for(size_t i = 0;i < brackets.length(); ++i)\n    {\n\
    \        char c = brackets[i];\n        if(c == '>')\n            m[c] = '>';\n\
    \        else if(c == '<')\n            m[c] = '<';\n        else\n          \
    \  m[c] = c;\n    }\n    \n    for(size_t i = 0;i < brackets.length(); ++i)\n\
    \    {\n        char c = brackets[i];\n        if(!m.count(c))\n        {\n  \
    \          if(brackets.size() > 1)\n                return false;\n          \
    \  else //this is the last bracket, no more correction necessary\n           \
    \     return true;\n        }\n    }\n    \n    //bracketing was not correct for\
    \ the last bracket\n    return false;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zmxswlf.d(19): Error: found `,` when expecting `.` following char

    /tmp/tmp6zmxswlf.d(19): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmp6zmxswlf.d(19): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zmxswlf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    size_t bStart=0, bEnd=0;\n\twhile(bStart!=string::npos && bEnd!=string::npos)\
    \ {\n\t\tbStart=brackets.find(\"<\", bEnd);\n\t\tbEnd=brackets.find(\">\", bStart);\n\
    \t\tif(bStart==string::npos)\n\t\t\tbStart=0;\n\t\tif(bEnd==string::npos)\n\t\t\
    \tbEnd=0;\n\t\tif(brackets[bStart]!=brackets[bEnd])\n\t\t\treturn false;\n\t}\n\
    \treturn true;\n}\n//#endif\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzg8d8kg.d(20): Error: found `:` when expecting `)`

    /tmp/tmpfzg8d8kg.d(20): Error: found `:` instead of statement

    /tmp/tmpfzg8d8kg.d(23): Error: found `:` when expecting `)`

    /tmp/tmpfzg8d8kg.d(23): Error: found `:` instead of statement

    /tmp/tmpfzg8d8kg.d(25): Error: found `:` when expecting `)`

    /tmp/tmpfzg8d8kg.d(25): Error: found `:` instead of statement

    /tmp/tmpfzg8d8kg.d(30): Error: declaration expected, not `return`

    /tmp/tmpfzg8d8kg.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzg8d8kg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ int num = 0;\n  for (int i = 0; i < brackets.length(); i++) {\n    if (brackets[i]\
    \ == '<') {\n      num++;\n    }\n    else if (brackets[i] == '>') {\n      num--;\n\
    \    }\n    else {\n      return false;\n    }\n    if (num < 0) {\n      return\
    \ false;\n    }\n  }\n  return num == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4adoicn3.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4adoicn3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   stack<string> st;\n    map<char, int> bracket_count;\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdj7fljd8.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmpdj7fljd8.d(20): Error: found `,` when expecting `.` following char

    /tmp/tmpdj7fljd8.d(20): Error: found `int` when expecting identifier following
    `char`.

    /tmp/tmpdj7fljd8.d(20): Error: found `>` when expecting `;` following statement

    /tmp/tmpdj7fljd8.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdj7fljd8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(uint i=0; i<brackets.length(); i++)\n    {\n        if(brackets[i] ==\
    \ \"<\")\n        {\n            uint close = brackets.find_last_of(\"<>\");\n\
    \            if(close == string::npos)\n                return false;\n      \
    \      uint open_i = brackets.find_first_not_of(\"<>\", close);\n            assert(open_i\
    \ != string::npos);\n            if(open_i == 0)\n                return false;\n\
    \            while(brackets[open_i-1] == \"<\")\n                open_i--;\n \
    \           while(brackets[close+1] == \">\")\n                close++;\n    \
    \        if(open_i < close || brackets[open_i] != brackets[close])\n         \
    \       return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n  \
    \  alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3jl3i8pv.d(24): Error: found `:` when expecting `)`

    /tmp/tmp3jl3i8pv.d(24): Error: found `:` instead of statement

    /tmp/tmp3jl3i8pv.d(27): Error: found `:` when expecting `)`

    /tmp/tmp3jl3i8pv.d(27): Error: found `:` when expecting `;` following statement

    /tmp/tmp3jl3i8pv.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmp3jl3i8pv.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jl3i8pv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int brackets_count=brackets.length();\n\tint count=0;\n\tfor(int i=0;i<brackets_count;i++)\n\
    \t{\n\t\tif(brackets[i]=='<')\n\t\t{\n\t\t\tcount++;\n\t\t\tif(brackets[i+1]!='>')\n\
    \t\t\t{\n\t\t\t\tprintf(\"bracket count is not %d\\n\",count);\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(brackets[i]!='>')\n\t\t\t\
    {\n\t\t\t\tprintf(\"bracket count is not %d\\n\",count);\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tcount--;\n\t\t}\n\t}\n\t\n\t\n\t\n\treturn true;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") ==\
    \ true);\n    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"\
    <><><<><>><>\") == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) == true);\n    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"\
    ><<>\") == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprigjdewi.d(19): Error: no property `length` for type `string`

    /tmp/tmprigjdewi.d(28): Error: `printf` is not defined, perhaps `import core.stdc.stdio;`
    is needed?

    /tmp/tmprigjdewi.d(36): Error: `printf` is not defined, perhaps `import core.stdc.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprigjdewi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   size_t blen = brackets.length();\n    for (size_t i=0; i<blen; ++i)\n    \
    \    if (brackets[i] != '<')\n            return false;\n    size_t elen = blen\
    \ - 1;\n    for (size_t i=0; i<elen; ++i)\n        if (brackets[len-i] != '>')\n\
    \            return false;\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgnt84878.d(19): Error: no property `length` for type `string`

    /tmp/tmpgnt84878.d(25): Error: undefined identifier `len`, did you mean variable
    `blen`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnt84878.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   for(int i = 0; i < brackets.length(); i++) {\n        char c = brackets[i];\n\
    \        if(c == '<') continue;\n        if(c == '>') {\n            if (brackets[i-1]\
    \ != '<') return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nGood point! However, I'm going to need a lot of brackets around\
    \ my string, so this would result in very large amount of code.\n<|/ c |>\n<|\
    \ c |>\nYou could easily write a program that would read your input file line\
    \ by line and output the line with the brackets if it needed them.\n<|/ c |>\n\
    <| a tags=string,c++ |>\nYou might want to look into regular expressions.\nThere\
    \ are libraries that support this kind of thing in C++.\nhttp://www.boost.org/doc/libs/1_47_0/libs/regex/doc/html/index.html\n\
    <|/ a dscore=0 |>\n<| c |>\nIf you're going to recommend a library, you should\
    \ mention which one. Boost is an awful library.\n<|/ c |>\n<| c |>\nYeah, I know\
    \ it is. This is actually a C++ assignment, and I'm only allowed to use boost\
    \ libraries. Also, I can't use any external libraries.\n<|/ c |>\n<| a |>\nYou\
    \ can try this approach as well:\n<code>\n#include <iostream>\n#include <stack>\n\
    using namespace std;\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4xdytk2.d(28): Error: declaration expected, not `<`

    /tmp/tmpd4xdytk2.d(31): Error: unterminated character constant

    /tmp/tmpd4xdytk2.d(42): Error: unterminated character constant

    /tmp/tmpd4xdytk2.d(45): Error: unterminated character constant

    /tmp/tmpd4xdytk2.d(45): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4xdytk2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   int opening_brackets = 0;\n    for(int i = 0; i < brackets.length(); ++i)\
    \ {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n    \
    \    }\n        else if (brackets[i] == '>') {\n            if (opening_brackets\
    \ > 0) {\n                opening_brackets--;\n            }\n            else\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ opening_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"<<><>>\") ==\
    \ true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxm28dn8.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxm28dn8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n\t\
    int len = brackets.length();\n\tif (len < 1) return false;\n\tint bracketcount\
    \ = 0, openbracketcount = 0;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tchar ch\
    \ = brackets[i];\n\t\tif (ch == '<')\n\t\t{\n\t\t\tif (openbracketcount > 0) return\
    \ false;\n\t\t\tbracketcount++;\n\t\t}\n\t\telse if (ch == '>')\n\t\t{\n\t\t\t\
    if (bracketcount > 0) return false;\n\t\t\tbracketcount++;\n\t\t}\n\t\telse\n\t\
    \t{\n\t\t\tif (ch == '{' || ch == '}') return false;\n\t\t}\n\t\topenbracketcount++;\n\
    \t}\n\treturn bracketcount == openbracketcount;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwflnj2_t.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwflnj2_t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \   // first test that all the brackets are in the correct place\n    if(brackets.length()\
    \ == 0)\n    {\n        return true;\n    }\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n    assert(candidate(\"\
    <<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\") == true);\n    assert(candidate(\"\
    <><><<<><><>><>><<><><<>>>\") == true);\n    assert(candidate(\"<<<><>>>>\") ==\
    \ false);\n    assert(candidate(\"><<>\") == false);\n    assert(candidate(\"\
    <\") == false);\n    assert(candidate(\"<<<<\") == false);\n    assert(candidate(\"\
    >\") == false);\n    assert(candidate(\"<<>\") == false);\n    assert(candidate(\"\
    <><><<><>><>><<>\") == false);\n    assert(candidate(\"<><><<><>><>>><>\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cbor6pi.d(24): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cbor6pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    <\" and \">\".\n    return true if every opening bracket has a corresponding closing\
    \ bracket.\n\n    >>> correct_bracketing(\"<\")\n    false\n    >>> correct_bracketing(\"\
    <>\")\n    true\n    >>> correct_bracketing(\"<<><>>\")\n    true\n    >>> correct_bracketing(\"\
    ><<>\")\n    false\n    \n*/\nbool correct_bracketing(string brackets) \n{\n \
    \ // find out how many opening and closing brackets are in this string\n  int\
    \ opens = brackets.find_first_not_of(\"<>\");\n  int closes = brackets.find_last_not_of(\"\
    <>\");\n  // check if we have the same number of opening and closing brackets\n\
    \  return opens == closes && opens == brackets.size() - 2;\n}\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"<>\") == true);\n\
    \    assert(candidate(\"<<><>>\") == true);\n    assert(candidate(\"<><><<><>><>\"\
    ) == true);\n    assert(candidate(\"<><><<<><><>><>><<><><<>>>\") == true);\n\
    \    assert(candidate(\"<<<><>>>>\") == false);\n    assert(candidate(\"><<>\"\
    ) == false);\n    assert(candidate(\"<\") == false);\n    assert(candidate(\"\
    <<<<\") == false);\n    assert(candidate(\">\") == false);\n    assert(candidate(\"\
    <<>\") == false);\n    assert(candidate(\"<><><<><>><>><<>\") == false);\n   \
    \ assert(candidate(\"<><><<><>><>>><>\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlxo4oy8.d(20): Error: no property `find_first_not_of` for type
    `string`

    /tmp/tmpxlxo4oy8.d(21): Error: no property `find_last_not_of` for type `string`

    /tmp/tmpxlxo4oy8.d(23): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlxo4oy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
