language: d
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    \n    //Make sure the length\
    \ of operator array is equal to the length of operand array minus one.\n    assert(operator.length\
    \ > 0 && operator.length == operand.length -1);\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwiq7ky3s.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwiq7ky3s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long ops = 0;\n    long maxOps = operator.length;\n\
    \    for(int i = 0; i < maxOps; i++){\n        if(operator[i] == '+'){\n     \
    \       result += operand[i];\n        }\n        else if(operator[i] == '*'){\n\
    \            result *= operand[i];\n        }\n        else if(operator[i] ==\
    \ '-'){\n            result -= operand[i];\n        }\n        else if(operator[i]\
    \ == '//'){\n            result /= operand[i];\n        }\n        else if(operator[i]\
    \ == '**'){\n            ops *= operand[i];\n        }\n    }\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7kqnws_.d(43): Error: unterminated character constant

    /tmp/tmpu7kqnws_.d(43): Error: unterminated character constant

    /tmp/tmpu7kqnws_.d(43): Error: found `{` when expecting `)`

    /tmp/tmpu7kqnws_.d(46): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpu7kqnws_.d(46): Error: unterminated character constant

    /tmp/tmpu7kqnws_.d(46): Error: unterminated character constant

    /tmp/tmpu7kqnws_.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7kqnws_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i,j;\n    long result = 0;\n    int lenOperator = operator.length;\n\
    \    int lenOperand = operand.length;\n    \n    //If the operand array has less\
    \ than 2 elements. Return -1\n    if(lenOperand < 2)\n    {\n        printf(\"\
    ERROR: operand array must have at least 2 elements\\n\");\n        return -1;\n\
    \    }\n    \n    //If the operator array has less than 1 elements. Return -1\n\
    \    if(lenOperator < 1)\n    {\n        printf(\"ERROR: operator array must have\
    \ at least 1 element\\n\");\n        return -1;\n    }\n    \n    // Initialize\
    \ the result to 0\n    result = 0;\n    \n    \n    for(i = 0; i < lenOperand\
    \ - lenOperator + 1; i++)\n    {\n        for(j = 0; j< lenOperator - 1; j++)\n\
    \        {\n            switch(operator[j])\n            {\n                case\
    \ '+':\n                    result += operand[i+j];\n                    break;\n\
    \                case '-':\n                    result -= operand[i+j];\n    \
    \                break;\n                case '*':\n                    result\
    \ *= operand[i+j];\n                    break;\n                case '/':\n  \
    \                  result /= operand[i+j];\n                    break;\n     \
    \           case '//':\n                    result /= operand[i+j];\n        \
    \            break;\n                case '**':\n                    result *=\
    \ operand[i+j];\n                    result *= operand[i+j];\n               \
    \     break;\n                default:\n                    printf(\"ERROR: operator\
    \ not recognized\");\n                    return -1;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe function needs\
    \ to be rewritten to accommodate the operators. Also, you should use the switch\
    \ statement to prevent typos.\n<|/ c |>\n<| c |>\nI have updated the code, to\
    \ accommodate the operators.\n<|/ c |>\n<| c |>\nPlease edit your answer instead\
    \ of posting a new one. Also, your code is buggy: it produces an unresolved reference\
    \ error, and does not properly handle negative numbers in the input.\n<|/ c |>\n\
    <| c |>\nI did not know that this is possible, thank you very much.\n<|/ c |>\n\
    <| a dscore=1 tags=java,arrays |>\nThe first and easiest way to do this would\
    \ be to use a 2D array. You'd just need to loop through it and compare the operators\
    \ to each other. For example:\n<code>\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfxmbbr7_.d(71): Error: unterminated character constant

    /tmp/tmpfxmbbr7_.d(71): Error: unterminated character constant

    /tmp/tmpfxmbbr7_.d(72): Error: found `result` when expecting `:`

    /tmp/tmpfxmbbr7_.d(72): Error: found `/=` instead of statement

    /tmp/tmpfxmbbr7_.d(74): Error: unterminated character constant

    /tmp/tmpfxmbbr7_.d(74): Error: unterminated character constant

    /tmp/tmpfxmbbr7_.d(75): Error: found `result` when expecting `:`

    /tmp/tmpfxmbbr7_.d(75): Error: found `*=` instead of statement

    /tmp/tmpfxmbbr7_.d(86): Error: declaration expected, not `<`

    /tmp/tmpfxmbbr7_.d(101): Error: unterminated character constant

    /tmp/tmpfxmbbr7_.d(107): Error: declaration expected, not `assert`

    /tmp/tmpfxmbbr7_.d(108): Error: declaration expected, not `assert`

    /tmp/tmpfxmbbr7_.d(109): Error: declaration expected, not `assert`

    /tmp/tmpfxmbbr7_.d(110): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfxmbbr7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int opr = 0, opr_count = 1;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnnu2dre4.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnnu2dre4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int op_length = operator.length;\n    int op_pos = 0;\n  \
    \  int result_pos = 0;\n    long result = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4k_1wjav.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4k_1wjav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    \n    for(int i = 0; i <  operator.length;\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '//':\n            \
    \    result = result / operand[i];\n                break;\n            case '**':\n\
    \                result = result ** operand[i];\n                break;\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplesmfxwq.d(48): Error: unterminated character constant

    /tmp/tmplesmfxwq.d(48): Error: unterminated character constant

    /tmp/tmplesmfxwq.d(49): Error: found `result` when expecting `:`

    /tmp/tmplesmfxwq.d(49): Error: found `=` instead of statement

    /tmp/tmplesmfxwq.d(51): Error: unterminated character constant

    /tmp/tmplesmfxwq.d(51): Error: unterminated character constant

    /tmp/tmplesmfxwq.d(52): Error: found `result` when expecting `:`

    /tmp/tmplesmfxwq.d(52): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplesmfxwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp;\n    \n    for(int i = 0;\
    \ i < operator.size(); ++i)\n    {\n        switch(operator[i])\n        {\n \
    \           case '+': \n                result += operand[i];\n              \
    \  break;\n            case '-': \n                result -= operand[i];\n   \
    \             break;\n            case '*': \n                result *= operand[i];\n\
    \                break;\n            case '//': \n                result = (result\
    \ / operand[i])%10;\n                break;\n            case '**':\n        \
    \        temp = result;\n                for(long j = result; temp != 0; temp\
    \ = temp / (operand[i] - j))\n                    j++;\n                result\
    \ =  temp%operand[i];\n                break;\n            default:\n        \
    \        throw runtime_error(\"invalid operator\");\n        }\n    }\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn56mbu2f.d(46): Error: unterminated character constant

    /tmp/tmpn56mbu2f.d(46): Error: unterminated character constant

    /tmp/tmpn56mbu2f.d(47): Error: found `result` when expecting `:`

    /tmp/tmpn56mbu2f.d(47): Error: found `=` instead of statement

    /tmp/tmpn56mbu2f.d(49): Error: unterminated character constant

    /tmp/tmpn56mbu2f.d(49): Error: unterminated character constant

    /tmp/tmpn56mbu2f.d(50): Error: found `temp` when expecting `:`

    /tmp/tmpn56mbu2f.d(50): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn56mbu2f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // TODO: Implement function here\n    int index = 0;\n   \
    \ long result = 0;\n    \n    int op_size = sizeof(operator)/sizeof(string);\n\
    \    int op_size = sizeof(operator)/sizeof(string);\n    \n    while(op_size--)\
    \ \n    {\n        switch (operator[index])\n        {\n            case '+':\
    \ result = result + operand[index]; break;\n            case '-': result = result\
    \ - operand[index]; break;\n            case '*': result = result * operand[index];\
    \ break;\n            case '/': result = result / operand[index]; break;\n   \
    \         case '//': result = result / operand[index]; break;\n            case\
    \ '**': result = result ** operand[index]; break;\n            default: \n   \
    \             break;\n        }\n        index++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwg5yrmb3.d(45): Error: unterminated character constant

    /tmp/tmpwg5yrmb3.d(45): Error: unterminated character constant

    /tmp/tmpwg5yrmb3.d(45): Error: found `result` when expecting `:`

    /tmp/tmpwg5yrmb3.d(45): Error: found `=` instead of statement

    /tmp/tmpwg5yrmb3.d(46): Error: unterminated character constant

    /tmp/tmpwg5yrmb3.d(46): Error: unterminated character constant

    /tmp/tmpwg5yrmb3.d(46): Error: found `result` when expecting `:`

    /tmp/tmpwg5yrmb3.d(46): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwg5yrmb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpez37ax1a.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez37ax1a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    string operatorString;\n    for (int\
    \ i = 0; i < operator.Length; i++)\n    {\n        operatorString = operator[i];\n\
    \        switch (operatorString)\n        {\n            case \"+\": result +=\
    \ operand[i]; break;\n            case \"-\": result -= operand[i]; break;\n \
    \           case \"*\": result *= operand[i]; break;\n            case \"/\":\
    \ result /= operand[i]; break;\n            case \"//\": result //= operand[i];\
    \ break;\n            case \"**\": result **= operand[i]; break;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzc8b9ehb.d(42): Error: found `case` when expecting `;` following
    statement

    /tmp/tmpzc8b9ehb.d(42): Error: found `:` when expecting `;` following statement

    /tmp/tmpzc8b9ehb.d(42): Error: expression expected, not `*=`

    /tmp/tmpzc8b9ehb.d(42): Error: found `operand` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzc8b9ehb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        result = std.math[funcs.operators[operator[i]](operand[0], operand[1])];\n\
    \    }\n    return result;\n}\n</code>\nFor your case you can do this:\n<code>\n\
    var result = do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\n</code>\nThe result will\
    \ be 9\n<|/ a dscore=1 |>\n<| c |>\nThank you for your response! Please see my\
    \ comment above.\n<|/ c |>\n<| a tags=math,c++,c++11 |>\nThis is my attempt at\
    \ solving your problem. \n<code>\n#include <iostream>\n#include <map>\n#include\
    \ <vector>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s8ub1s0.d(36): Error: declaration expected, not `<`

    /tmp/tmp1s8ub1s0.d(40): Error: declaration expected, not `<`

    /tmp/tmp1s8ub1s0.d(56): Error: declaration expected, not `assert`

    /tmp/tmp1s8ub1s0.d(57): Error: declaration expected, not `assert`

    /tmp/tmp1s8ub1s0.d(58): Error: declaration expected, not `assert`

    /tmp/tmp1s8ub1s0.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s8ub1s0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.lenth -\
    \ 1; i++){\n        if(operator[i] == '+' || operator[i] == '-'){\n          \
    \  result = result + operand[i];\n        }else if(operator[i] == '*' || operator[i]\
    \ == '/'){\n            result = result * operand[i];\n        }else if(operator[i]\
    \ == '%'){\n            result /= operand[i];\n        }else if(operator[i] ==\
    \ '^'){\n            result = result ** operand[i];\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nIt's not actually a homework, the OP\
    \ is trying to learn how to write a program in Haskell and get stuck at some point.\n\
    <|/ c |>\n<| c |>\nYour `do_algebra` function should be `do`.\n<|/ c |>\n<| c\
    \ |>\nIt's really weird how Haskell is so overly complicated for such a seemingly\
    \ simple problem. I'm sure there is some sort of fundamental problem with Haskell\
    \ that is so complex that programmers don't understand it.\n<|/ c |>\n<| c |>\n\
    I agree with you, that is why I tried to explain how it works and also tried to\
    \ explain how it can be solved with Haskell without having to use the C `do_algebra`\
    \ function. I will edit my answer to make it more clear.\n<|/ c |>\n<| c |>\n\
    : This may be a stupid question, but how come we get to `do_algebra operator operand`?\
    \ Shouldn't we be getting `do_algebra (operator, operand)`?\n<|/ c |>\n<| a |>\n\
    This is my solution.\n<code>\nimport Data.List\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ts_tps8.d(44): Error: declaration expected, not `<`

    /tmp/tmp1ts_tps8.d(47): Error: unterminated character constant

    /tmp/tmp1ts_tps8.d(53): Error: unterminated character constant

    /tmp/tmp1ts_tps8.d(53): Error: unterminated character constant

    /tmp/tmp1ts_tps8.d(53): Error: unterminated character constant

    /tmp/tmp1ts_tps8.d(59): Error: unterminated character constant

    /tmp/tmp1ts_tps8.d(69): Error: declaration expected, not `assert`

    /tmp/tmp1ts_tps8.d(70): Error: declaration expected, not `assert`

    /tmp/tmp1ts_tps8.d(71): Error: declaration expected, not `assert`

    /tmp/tmp1ts_tps8.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ts_tps8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0;\n    bool is_equal = false;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pwld7bb.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pwld7bb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long operator_position = 0, operand_position\
    \ = 0;\n    for (long i = 0; i < operator.length; i++) \n    {\n        operator_position\
    \ = i;\n        operand_position = operator.length - 1 - i;\n        result =\
    \ std.math.eval(operator[operator_position] + \" \" + std.math.format(operand[operand_position]));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_pddh9n.d(36): Error: undefined identifier `eval` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_pddh9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = 0;\n    long size = operator.length;\n    for (int\
    \ i = 0; i < size - 1; i++){\n        switch(operator[i]){\n            case \"\
    +\": res = res + operand[i];\n            break;\n            case \"-\": res\
    \ = res - operand[i];\n            break;\n            case \"*\": res = res *\
    \ operand[i];\n            break;\n            case \"/\": res = res / (operand[i]\
    \ * operand[i]);\n            break;\n            case \"^\": res = res ** operand[i];\n\
    \            break;\n        }\n    }\n    return res;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ |>\n<| c |>\nThanks for the reply. This is a very interesting solution. However,\
    \ I'm not sure how the `switch` statement works. What would be the purpose of\
    \ it? I'm curious to understand it better. Thanks again\n<|/ c |>\n<| c |>\nI\
    \ added the explanation to the code above. The switch statement just says, look\
    \ at operator and operand, determine the operation to be performed and assign\
    \ the result of that operation to res. There are so many different ways to accomplish\
    \ this and this is just the most concise. It does assume that the number of operands\
    \ is at least 2.\n<|/ c |>\n<| c |>\nHmm, thank you. I haven't thought of it that\
    \ way. The solution looks very clean. I will look into it more. Thanks!\n<|/ c\
    \ |>\n<| a dscore=0 tags=java,arrays,algorithm |>\nIt looks like you need a more\
    \ dynamic approach. Here's a solution that should work for any number of operands\
    \ and operators.\n<code>\nstatic long eval(String operation, long... operands)\
    \ {\n  long result = 0;\n  for (int i = 0; i < operands.length - 1; i++) {\n \
    \   switch(operation) {\n      case \"+\":\n        result += (operands[i] & operands[i\
    \ + 1] & ~(operands[i + 1] << i));\n        break;\n      case \"-\":\n      \
    \  result -= (operands[i] & operands[i + 1] & ~(operands[i + 1] << i));\n    \
    \    break;\n      case \"*\":\n        result += (operands[i] & operands[i +\
    \ 1] & ~(operands[i + 1] << i));\n        break;\n      case \"/\":\n        result\
    \ += (operands[i] & operands[i + 1] & ~(operands[i + 1] << i));\n        break;\n\
    \      case \"^\":\n        result += (operands[i] & operands[i + 1] & ~(operands[i\
    \ + 1] << i));\n        break;\n    }\n  }\n  return result;\n}\n</code>\nI haven't\
    \ tested it, but I believe it works (and should give you the right idea).\n<|/\
    \ a |>\n<| c |>\nHmm, \nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwiccjwfc.d(48): Error: declaration expected, not `<`

    /tmp/tmpwiccjwfc.d(51): Error: unterminated character constant

    /tmp/tmpwiccjwfc.d(51): Error: unterminated character constant

    /tmp/tmpwiccjwfc.d(57): Error: unterminated character constant

    /tmp/tmpwiccjwfc.d(60): Error: unterminated character constant

    /tmp/tmpwiccjwfc.d(64): Error: declaration expected, not `for`

    /tmp/tmpwiccjwfc.d(64): Error: no identifier for declarator `i`

    /tmp/tmpwiccjwfc.d(64): Error: declaration expected, not `<`

    /tmp/tmpwiccjwfc.d(64): Error: no identifier for declarator `i`

    /tmp/tmpwiccjwfc.d(64): Error: declaration expected, not `++`

    /tmp/tmpwiccjwfc.d(68): Error: declaration expected, not `break`

    /tmp/tmpwiccjwfc.d(69): Error: declaration expected, not `case`

    /tmp/tmpwiccjwfc.d(71): Error: declaration expected, not `break`

    /tmp/tmpwiccjwfc.d(72): Error: declaration expected, not `case`

    /tmp/tmpwiccjwfc.d(74): Error: declaration expected, not `break`

    /tmp/tmpwiccjwfc.d(75): Error: declaration expected, not `case`

    /tmp/tmpwi'
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result = 0;\n  \n  for (int i = 0; i < operator.length;\
    \ i++) \n  {\n    long temp_result = eval_binary_operation(operator[i], operand[i\
    \ - 1]);\n    if (temp_result != 0) \n      result += (operand[i - 1] / temp_result)\
    \ * temp_result;\n  }\n  \n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpws723vfl.d(34): Error: undefined identifier `eval_binary_operation`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpws723vfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    // The length of operator array is equal\
    \ to the length of operand array minus one.\n    if (operator.Length != operand.Length)\
    \ \n    {\n        throw new Exception(\"Operator and operand array length is\
    \ not equal\");\n    }\n    for (int i = 0; i < operator.Length; ++i)\n    {\n\
    \        switch (operator[i])\n        {\n            case '+':\n            \
    \    result += operand[i];\n                break;\n            case '-':\n  \
    \              result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '^':\n                result %= operand[i];\n              \
    \  break;\n        }\n    }\n    return result;\n}\n/*\n    Given two arrays operator,\
    \ and operand. The first array has basic algebra operations, and \n    the second\
    \ array is an array of integers. Use the two given arrays to build the algebric\
    \ \n    expression and return the evaluation of this expression.\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2snsj_bl.d(59): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2snsj_bl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0, i = 0;\n    for(i = 0; i < operator.length;\
    \ ++i)\n    {\n        switch(operator[i])\n        {\n            case '+': \n\
    \                result += operand[i]; break;\n            case '-': \n      \
    \          result -= operand[i]; break;\n            case '*': \n            \
    \    result *= operand[i]; break;\n            case '/': \n                result\
    \ /= operand[i]; break;\n            case '^': \n                result %= operand[i];\
    \ break;\n            case '**': \n                result **= operand[i]; break;\n\
    \            default: return \"ERROR\";\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3wkmctri.d(45): Error: unterminated character constant

    /tmp/tmp3wkmctri.d(45): Error: unterminated character constant

    /tmp/tmp3wkmctri.d(46): Error: found `result` when expecting `:`

    /tmp/tmp3wkmctri.d(46): Error: expression expected, not `*=`

    /tmp/tmp3wkmctri.d(46): Error: found `operand` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wkmctri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //TODO: Implement the algebric expression\n    return -1;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpspeo2pdb.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x428d81]

    ??:? void tmpspeo2pdb.__unittest_L33_C1() [0x427e0b]

    ??:? void tmpspeo2pdb.__modtest() [0x427f6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d863]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428a5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a509]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a598]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a495]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428a35]

    ??:? runModuleUnitTests [0x42d639]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4291d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0;\n    long index = 0;\n    boolean isAdd\
    \ = false;\n    boolean isSubtract = false;\n    boolean isMultiply = false;\n\
    \    boolean isFloorDivide = false;\n    boolean isExponent = false;\n    \n \
    \   for (index = 0; index < operator.length && index < operand.length; ++index)\
    \ \n    { \n        string op = operator[index];\n        long operand1 = operand[index];\n\
    \        long operand2 = operand[index + 1];\n        \n        switch (op) \n\
    \        { \n            case '+': \n                result = result + operand1;\
    \ \n                break; \n            case '-': \n                result =\
    \ result - operand1; \n                break; \n            case '*': \n     \
    \           result = result * operand1; \n                break; \n          \
    \  case '/': \n                result = result / operand1; \n                break;\
    \ \n            case '%': \n                result = result % operand1; \n   \
    \             break; \n            case '^': \n                result = result\
    \ ^ operand1; \n                break; \n            case '**': \n           \
    \     result = result ** operand1; \n                break; \n            case\
    \ '&': \n                result = result & operand1; \n                break;\
    \ \n            case '|': \n                result = result | operand1; \n   \
    \             break; \n            case '>>': \n                result = result\
    \ >> operand1; \n                break; \n            case '<<': \n          \
    \      result = result << operand1; \n                break; \n            default:\
    \ \n                break; \n        } \n    } \n    return isAdd ? result : result\
    \ + 1; \n}\n</code>\n<|/ a dscore=1 tags=algorithm,java,arrays,string |>\n<| a\
    \ tags=algorithm,java,arrays,string |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.function.Function;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzbupggvh.d(64): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(64): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(65): Error: found `result` when expecting `:`

    /tmp/tmpzbupggvh.d(65): Error: found `=` instead of statement

    /tmp/tmpzbupggvh.d(73): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(73): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(74): Error: found `result` when expecting `:`

    /tmp/tmpzbupggvh.d(74): Error: found `=` instead of statement

    /tmp/tmpzbupggvh.d(76): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(76): Error: unterminated character constant

    /tmp/tmpzbupggvh.d(77): Error: found `result` when expecting `:`

    /tmp/tmpzbupggvh.d(77): Error: found `=` instead of statement

    /tmp/tmpzbupggvh.d(85): Error: declaration expected, not `<`

    /tmp/tmpzbupggvh.d(90): Error: identifier expected following `package`

    /tmp/tmpzbupggvh.d(90): Error: `;` expected

    /tmp/tmpzbupggvh.d(90): Error: no identifier for declarator `.Function`

    Failed: ["dmd", "'
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = operator.lenght, j = operand.lenght;\n    long result\
    \ = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgmxef7i1.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmxef7i1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    for(i = 0; i < operator.length;\
    \ i++)\n        result += operator[i](operand[i -1], operand[i]);\n    return\
    \ result;\n}\n/*\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_l5u9gd.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_l5u9gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int length = operator.length;\n    int\
    \ index = 0;\n    int index_1 = 0; \n    int index_2 = 1; // Two operands \n \
    \   int operation; //Operator to perform \n    \n    for (index; index < length;\
    \ index++) {\n        //The index will increment after each iteration of the loop.\n\
    \        operation = operation; //Reset operation to what operation was last set\
    \ to.\n        index_1 = index; // Keep track of the current index of the operand\
    \ array \n        index_2 = index_1 + 1; //The second operand is one index further\
    \ than the first.\n        //If an operation is encountered which is not in the\
    \ operator array, the loop will end.\n        switch (operator[index]) {\n   \
    \         case (\"+\"): \n                result = result + operand[index_1] +\
    \ operand[index_2]; \n                break;\n            case (\"-\"):\n    \
    \            result = result - operand[index_1] - operand[index_2]; \n       \
    \         break;\n            case (\"*\"):\n                result = result *\
    \ operand[index_1] * operand[index_2]; \n                break;\n            case\
    \ (\"/\"):\n                result = result / operand[index_1] / operand[index_2];\
    \ \n                break;\n            case (\"//\"):\n                result\
    \ = result / operand[index_1] / operand[index_2]; \n                break;\n \
    \           case (\"**\"):\n                result = result * operand[index_1]\
    \ * operand[index_2]; \n                break;\n            default:\n       \
    \         //Do nothing - this operation is not in the operator array.\n      \
    \          break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java,math\
    \ |>\n<| a dscore=2 tags=java,math |>\nI used a StringTokenizer with math operators\
    \ and operands as delimiters\n<code>\nprivate static int evaluate(String input){\n\
    \    int result = 0;\n    StringTokenizer st = new StringTokenizer(input, \"+-*///**\"\
    , true);\n    int count = 0;\n    while (st.hasMoreTokens()) {\n        String\
    \ token = st.nextToken();\n        if (count == 0) {\n            result += Integer.parseInt(token);\n\
    \        } else if (token.startsWith(\"+\")) {\n            result += (Integer.parseInt(token));\n\
    \        } else if (token.startsWith(\"-\")) {\n            result -= (Integer.parseInt(token));\n\
    \        } else if (token.startsWith(\"*\")) {\n            result *= (Integer.parseInt(token));\n\
    \        } else if (token.startsWith(\"/\")) {\n            result /= (Integer.parseInt(token));\n\
    \        } else if (token.startsWith(\"//\")) {\n            result /= (Integer.parseInt(token));\n\
    \        } else if (token.startsWith(\"**\")) {\n            result *= (Integer.parseInt(token));\n\
    \        } else {\n            break;\n        }\n        count++;\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=java,math |>\nI made\
    \ a little method \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptir4ly58.d(69): Error: declaration expected, not `<`

    /tmp/tmptir4ly58.d(78): Error: declaration expected, not `while`

    /tmp/tmptir4ly58.d(80): Error: declaration expected, not `if`

    /tmp/tmptir4ly58.d(82): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptir4ly58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong temp;\n\tfor (int i = 0; i < operator.length && operand.length\
    \ - 1 >= i; i++)\n\t{\n\t\tswitch(operator[i])\n\t\t{\n\t\t\tcase '+':\n\t\t\t\
    \ttemp = operand[i] - operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t\
    temp = operand[i] - operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\ttemp\
    \ = operand[i] * operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\ttemp\
    \ = operand[i] / operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\ttemp\
    \ = operand[i] ** operand[i+1];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow\
    \ new IllegalArgumentException(\"Unexpected operator\");\n\t\t}\n\t\toperand[i+1]\
    \ = temp;\n\t}\n\treturn operand[1];\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgm194xmz.d(47): Error: unterminated character constant

    /tmp/tmpgm194xmz.d(47): Error: unterminated character constant

    /tmp/tmpgm194xmz.d(48): Error: found `temp` when expecting `:`

    /tmp/tmpgm194xmz.d(48): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgm194xmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long index = 0;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pwenwwx.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pwenwwx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // base cases\n    if(operator.lenght == 1)\n    {\n     \
    \   return operand[0];\n    }\n    if(operand.lenght == 0)\n    {\n        throw\
    \ new Exception(\"Invalid operation: No operand\");\n    }\n    if(operator.lenght\
    \ == operand.lenght - 1)\n    {\n        // special case for the multiplication\
    \ operator\n        if(operator.lenght == 2)\n        {\n            return do_multiplication(operator,\
    \ operand);\n        }\n        throw new Exception(\"Invalid operation: No operand\"\
    );\n    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwt8j3qmy.d(48): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwt8j3qmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = 0;\n    int i, j, k;\n    bool firstOperand =\
    \ true;\n    for (i = 0, j = 0, k = -1; i < operator.length && j + 1 < operand.length;\
    \ i++, j++, k++)\n    {\n        string opCode = operator[i];\n        string\
    \ op1 = operand[j];\n        string op2 = operand[k];\n        long op1Value;\n\
    \        long op2Value;\n        if (opCode == \"+\")\n        {\n           \
    \ op1Value = op1;\n            op2Value = op2;\n        }\n        else if (opCode\
    \ == \"-\")\n        {\n            op1Value = op1;\n            op2Value = op2;\n\
    \        }\n        else if (opCode == \"*\")\n        {\n            if (op1.Length\
    \ > 0)\n            {\n                op1Value = op1;\n            }\n      \
    \      else\n            {\n                op1Value = 1;\n            }\n   \
    \         if (op2.Length > 0)\n            {\n                op2Value = op2;\n\
    \            }\n            else\n            {\n                op2Value = 1;\n\
    \            }\n        }\n        else if (opCode == \"/\")\n        {\n    \
    \        if (op1.Length > 0)\n            {\n                op1Value = op1;\n\
    \            }\n            else\n            {\n                op1Value = 1;\n\
    \            }\n            if (op2.Length > 0)\n            {\n             \
    \   op2Value = op2;\n            }\n            else\n            {\n        \
    \        op2Value = 1;\n            }\n        }\n        else\n        {\n  \
    \          string op2Value = op2;\n            long op1Value = op1;\n        \
    \    if (op1Value < op2Value)\n            {\n                op1Value = op2Value;\n\
    \            }\n            else\n            {\n                op2Value = op1Value;\n\
    \            }\n        }\n        if (firstOperand)\n        {\n            firstOperand\
    \ = false;\n            total += op1Value;\n        }\n        else\n        {\n\
    \            total -= op1Value;\n        }\n    }\n    return total;\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwtv9sjm.d(36): Error: cannot implicitly convert expression `operand[cast(ulong)j]`
    of type `long` to `string`

    /tmp/tmpmwtv9sjm.d(37): Error: cannot implicitly convert expression `operand[cast(ulong)k]`
    of type `long` to `string`

    /tmp/tmpmwtv9sjm.d(42): Error: cannot implicitly convert expression `op1` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(43): Error: cannot implicitly convert expression `op2` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(47): Error: cannot implicitly convert expression `op1` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(48): Error: cannot implicitly convert expression `op2` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(52): Error: no property `Length` for type `string`

    /tmp/tmpmwtv9sjm.d(54): Error: cannot implicitly convert expression `op1` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(60): Error: no property `Length` for type `string`

    /tmp/tmpmwtv9sjm.d(62): Error: cannot implicitly convert expression `op2` of type
    `string` to `long`

    /tmp/tmpmwtv9sjm.d(71): Error: no proper'
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int size = operand.length;\n    long result = 0;\n    long\
    \ temp = 0;\n    int i = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsnu3f3h.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsnu3f3h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = 0;\n    for(int i = 0; i < operator.length; i++)\
    \ {\n        long temp_sum = 0;\n        for(int j = 0; j < operand.length; j++)\
    \ {\n            switch(operator[i]) {\n                case '+': temp_sum +=\
    \ operand[j];\n                        break;\n                case '-': temp_sum\
    \ -= operand[j];\n                        break;\n                case '*': temp_sum\
    \ *= operand[j];\n                        break;\n                case '/': temp_sum\
    \ /= operand[j];\n                        break;\n                case '//': temp_sum\
    \ = (int)Math.floor(operand[j] / operand[j]);\n                        break;\n\
    \                case '**': temp_sum = std.math.pow(operand[j], operand[j]);\n\
    \                        break;\n            }\n        }\n        sum += temp_sum;\n\
    \    }\n    return sum;\n}\n</code>\n<|/ a dscore=1 tags=arrays,c |>\n<| a tags=arrays,c\
    \ |>\nYou can easily find the operator in first array and perform that operation.\
    \ Also you can find out the length of array and you can store the result in another\
    \ array (I called it result array) also you can return it. You can do this using\
    \ 2 for loops. I tried to explain with some sample code.\n<code>\n#include <stdio.h>\n\
    #include <math.h>\n#include <string.h>\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vr8z0px.d(43): Error: unterminated character constant

    /tmp/tmp0vr8z0px.d(43): Error: unterminated character constant

    /tmp/tmp0vr8z0px.d(43): Error: found `temp_sum` when expecting `:`

    /tmp/tmp0vr8z0px.d(43): Error: found `=` instead of statement

    /tmp/tmp0vr8z0px.d(45): Error: unterminated character constant

    /tmp/tmp0vr8z0px.d(45): Error: unterminated character constant

    /tmp/tmp0vr8z0px.d(45): Error: found `temp_sum` when expecting `:`

    /tmp/tmp0vr8z0px.d(45): Error: found `=` instead of statement

    /tmp/tmp0vr8z0px.d(53): Error: declaration expected, not `<`

    /tmp/tmp0vr8z0px.d(65): Error: declaration expected, not `assert`

    /tmp/tmp0vr8z0px.d(66): Error: declaration expected, not `assert`

    /tmp/tmp0vr8z0px.d(67): Error: declaration expected, not `assert`

    /tmp/tmp0vr8z0px.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vr8z0px.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    \n    for(unsigned int i = 0; i < operator.length;\
    \ ++i)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '^':\n                result = std.pow(operand[i],\
    \ operand[i]);\n                break;\n            default:\n               \
    \ throw(-1);\n                break;\n        }\n    }\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_7py3w5.d(32): Error: found `int` when expecting `;` following
    statement

    /tmp/tmpn_7py3w5.d(32): Error: found `;` when expecting `)`

    /tmp/tmpn_7py3w5.d(32): Error: found `)` when expecting `;` following statement

    /tmp/tmpn_7py3w5.d(56): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_7py3w5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while (i < operand.length)\n\
    \    {\n        switch (operator[i])\n        {\n            case '+': result\
    \ += operand[i]; break;\n            case '-': result -= operand[i]; break;\n\
    \            case '*': result *= operand[i]; break;\n            case '/': result\
    \ /= operand[i]; break;\n            case '//': result /= operand[i]; break;\n\
    \            case '^': result *= operand[i]; break;\n        }\n        ++i;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,arrays,multidimensional-array,matrix\
    \ dscore=0 |>\n<| a |>\n<code>\nimport java.util.Scanner;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lbva4h3.d(40): Error: unterminated character constant

    /tmp/tmp8lbva4h3.d(40): Error: unterminated character constant

    /tmp/tmp8lbva4h3.d(40): Error: found `result` when expecting `:`

    /tmp/tmp8lbva4h3.d(40): Error: found `/=` instead of statement

    /tmp/tmp8lbva4h3.d(47): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lbva4h3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int opCount;\n    int operandCount;\n    int currentOperand;\n\
    \    int lastOperand;\n    int operatorCount;\n    int i;\n    int firstArrayIndex\
    \ = 0;\n    int secondArrayIndex = 0;\n    int thirdArrayIndex = 0;\n    long\
    \ result = 1;\n    long operandArrayValue = 0;\n    long operatorArrayValue =\
    \ 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp53zhjwbm.d(42): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp53zhjwbm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = operand.length - 1;\n    long result;\n    long i;\n\
    \    bool flag = true;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevi1srwv.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevi1srwv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    int index = 0; \n    long result = operand[0]; \n    for\
    \ (int i = 0; i < operator.size(); ++i) \n    { \n        long op1 = operand[index];\
    \ \n        long op2 = operand[index + 1]; \n        switch (operator[i]) \n \
    \       { \n            case '+': result += op1; break; \n            case '-':\
    \ result -= op1; break; \n            case '*': result *= op1; break; \n     \
    \       case '//': result /= op1; break; \n            case '^': result **= op1;\
    \ break; \n            default: assert(false); \n        } \n        index +=\
    \ 2; \n    } \n    return result; \n} \n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ so much for your answer! I really appreciate it. I am having some trouble understanding\
    \ your code. \nFirst of all, why do you use both operand and operator as vectors?\
    \ I thought you just used the operator array as your operand. \nSecond, why do\
    \ you use switch case instead of if/else statements? \nFinally, what does \"operand\"\
    \ mean? Where is this variable coming from? \nThank you so much once again!\n\
    <|/ c |>\n<| c |>\n`operator` and `operand` represent the operands of the given\
    \ expression. By convention, the first operand is assumed to be the constant value\
    \ 1, and the last operand is the constant value 0. The number of operands can\
    \ be smaller than the number of operators. I didn't use switch statements because\
    \ it would be very tedious to code for each operator. And, I used vectors instead\
    \ of arrays because the length of the vector can be modified, while the size of\
    \ array can't. I hope this helps.\n<|/ c |>\n<| c |>\nYour code has two flaws:\
    \ (1) It doesn't handle division by zero, and (2) it isn't threadsafe.\n<|/ c\
    \ |>\n<| c |>\nThanks! You're right. I fixed it. I think I should add another\
    \ solution that handles division by zero.\n<|/ c |>\n<| c |>\n`//` and `^` are\
    \ not basic algebra operations. `*`, `/`, and `%` are basic operations. Also,\
    \ `+` and `-` are the only basic operations.\n<|/ c |>\n<| a tags=algorithm,c++,math,string\
    \ |>\nYou can do this using recursion \n<code>\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35m4ij9r.d(41): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(41): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(41): Error: found `result` when expecting `:`

    /tmp/tmp35m4ij9r.d(41): Error: found `/=` instead of statement

    /tmp/tmp35m4ij9r.d(42): Error: expression expected, not `*=`

    /tmp/tmp35m4ij9r.d(42): Error: found `op1` when expecting `;` following statement

    /tmp/tmp35m4ij9r.d(42): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp35m4ij9r.d(49): Error: declaration expected, not `<`

    /tmp/tmp35m4ij9r.d(59): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(59): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(62): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(62): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(65): Error: unterminated character constant

    /tmp/tmp35m4ij9r.d(77): Error: declaration expected, not `assert`

    /tmp/tmp35m4ij9r.d(78): Error: declaration expected, not `assert`

    /tmp/tmp35m4ij9r.d(79): Error: declarati'
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tint i, j;\n\tlong result, temp, power, result;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ok22qh3.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ok22qh3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int num_operator = operator.length;\n\
    \    int num_operand = operand.length - 1; // Because of the subtraction before\
    \ floor.\n    int i = 0;\n    long temp;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigk0njcf.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigk0njcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long op = 0;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic_s0a8i.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic_s0a8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcxnztkzf.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcxnztkzf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long i;\n    int j;\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq5l_gbsu.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq5l_gbsu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long size = operand.length - 1;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk47xks14.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk47xks14.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int pos = 0, result = 0, length = operator.length, op_length\
    \ = operator.length;\n    long total = 0;\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1ye6ara.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1ye6ara.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  int i = 0, j = 0, lenop = operator.length;\n  long result;\n\
    \  \n  while(i < lenop && j<lenop-1) \n  {\n    if(operator[i] == operator[j])\
    \ \n    {\n      int temp = operand[i];\n      operand[i] = operand[j];\n    \
    \  operand[j] = temp;\n      i++;\n      j++;\n    }\n    else \n    {\n     \
    \ int temp = operand[i];\n      operand[i] = operand[j];\n      operand[j] = temp;\n\
    \      i++;\n      j++;\n    }\n  }\n  \n  if(j == lenop-1) \n  {\n    if(operator[i]\
    \ == operator[0]) \n    {\n      int temp = operand[i];\n      operand[i] = operand[0];\n\
    \      operand[0] = temp;\n    }\n  }\n  else if(j == lenop-2) \n  {\n    if(operator[i]\
    \ == operator[j]) \n    {\n      int temp = operand[i];\n      operand[i] = operand[j];\n\
    \      operand[j] = temp;\n    }\n  }\n  result = operand[0];\n  for(int k = 1;\
    \ k < lenop; k++) \n  {\n    result += operand[k];\n  }\n  return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcxoweb_.d(30): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    /tmp/tmpwcxoweb_.d(37): Error: cannot implicitly convert expression `operand[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpwcxoweb_.d(45): Error: cannot implicitly convert expression `operand[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpwcxoweb_.d(57): Error: cannot implicitly convert expression `operand[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpwcxoweb_.d(66): Error: cannot implicitly convert expression `operand[cast(ulong)i]`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcxoweb_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0;\n    long result = 0;\n    bool foundOperator\
    \ = false;\n    bool foundOperand = false;\n    bool foundOperandValue = false;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7drl9el3.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7drl9el3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // TODO: Implement here\n    return 0;\n}\n</code>\n<|/ q\
    \ tags=algorithm,java |>\n<| c |>\nThis looks like a homework question so I will\
    \ not give an answer but should give you some hints. Basically, if you can find\
    \ the correct operator (+, -, *, /, //) between the two operands you can build\
    \ the algebra expression by using those operators (you can do this by using the\
    \ `operator` array and storing operators in `variable`. Now you just have to write\
    \ down the variables and their values. You might have to rethink this if your\
    \ algorithm is not 100% accurate (e.g. you cannot have multiple operators between\
    \ operands etc.).\n<|/ c |>\n<| c |>\nThe question was more about the approach\
    \ of finding out if that algebra expression is valid. I am not asking for an answer.\
    \ Thanks for the help though!\n<|/ c |>\n<| c |>\nCan you give an example of what\
    \ an input will look like?\n<|/ c |>\n<| c |>\n: Example added\n<|/ c |>\n<| a\
    \ dscore=2 tags=algorithm,java |>\nI hope this solves your problem.\n<code>\n\
    public boolean isAlgebraic(double[] operands, String operator){\n    Stack<Double>\
    \ s = new Stack<Double>();\n    for(int i = 0; i < operands.length; i++)\n   \
    \     s.push(operands[i]);\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqaoibv37.d(33): Error: declaration expected, not `<`

    /tmp/tmpqaoibv37.d(52): Error: declaration expected, not `for`

    /tmp/tmpqaoibv37.d(52): Error: no identifier for declarator `i`

    /tmp/tmpqaoibv37.d(52): Error: declaration expected, not `<`

    /tmp/tmpqaoibv37.d(52): Error: no identifier for declarator `i`

    /tmp/tmpqaoibv37.d(52): Error: declaration expected, not `++`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqaoibv37.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong result, i, temp;\n\t\n\tif (operator.length < 1 || operand.length\
    \ < 2)\n\t{\n\t\terror(\"Error: No operator or operand to do!\");\n\t\treturn\
    \ 0;\n\t}\n\t\n\tresult = operand[0];\n\t\n\tfor (i = 1; i < operand.length; ++i)\n\
    \t{\n\t\ttemp = operator[i - 1];\n\t\t\n\t\tif (temp == '+')\n\t\t\tresult +=\
    \ operand[i];\n\t\telse if (temp == '-')\n\t\t\tresult -= operand[i];\n\t\telse\
    \ if (temp == '*')\n\t\t\tresult *= operand[i];\n\t\telse if (temp == '/')\n\t\
    \t{\n\t\t\tif (operand[i] == 0)\n\t\t\t{\n\t\t\t\terror(\"Error: division by zero!\"\
    );\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult /= operand[i];\n\t\t}\n\t\
    \telse if (temp == '**')\n\t\t{\n\t\t\tif (operand[i] == 0)\n\t\t\t{\n\t\t\t\t\
    error(\"Error: division by zero!\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\t\
    \tresult **= operand[i];\n\t\t}\n\t\telse\n\t\t\terror(\"Error: invalid operator!\"\
    );\n\t}\n\t\n\treturn result;\n}\n/*\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49nwxrhq.d(60): Error: unterminated character constant

    /tmp/tmp49nwxrhq.d(60): Error: unterminated character constant

    /tmp/tmp49nwxrhq.d(61): Error: found `{` when expecting `)`

    /tmp/tmp49nwxrhq.d(68): Error: expression expected, not `*=`

    /tmp/tmp49nwxrhq.d(68): Error: found `operand` when expecting `;` following statement

    /tmp/tmp49nwxrhq.d(70): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp49nwxrhq.d(74): Error: declaration expected, not `return`

    /tmp/tmp49nwxrhq.d(75): Error: unrecognized declaration

    /tmp/tmp49nwxrhq.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49nwxrhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int size = operand.length-1;\n    if(operator.length != operand.length-1)\
    \ \n        throw new Exception(\"Invalid Input: Operator and Operand arrays should\
    \ be of same length.\");\nunittest\n{\n    alias candidate = do_algebra;\n\n \
    \   assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfbrtg81h.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbrtg81h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //initialize to 1\n    long result = 1;\n    int i=0;\n  \
    \  for(; i<operator.length; i++){\n        switch(operator[i])\n        {\n  \
    \          case \"+\": result = result + operand[i];\n            break;\n   \
    \         case \"-\": result = result - operand[i];\n            break;\n    \
    \        case \"*\": result = result * operand[i];\n            break;\n     \
    \       case \"//\": result = result // operand[i];\n            break;\n    \
    \        case \"**\": result = result ** operand[i];\n            break;\n   \
    \         default:\n                System.out.println(\"Unrecognized operator:\
    \ \" + operator[i]);\n                break;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java,switch-statement,arrays,math dscore=0 |>\n<| a tags=java,switch-statement,arrays,math\
    \ |>\nI got this to work by creating a hashmap of all the possible operators to\
    \ their functions. Then I loop through the operator array and call the function\
    \ stored in the hashmap for that operator.\n<code>\npackage com.company;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjgddxamx.d(43): Error: found `break` when expecting `;` following
    statement

    /tmp/tmpjgddxamx.d(43): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpjgddxamx.d(47): Error: identifier expected following `.`, not `out`

    /tmp/tmpjgddxamx.d(53): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgddxamx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    // Write your code here. \n    int op = 0; \n    long res\
    \ = 0; \n    long temp = 0; \n    bool isZero = false; \nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp774qtyvt.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp774qtyvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i, j;\n    long result = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmperw1np6f.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperw1np6f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.Length != operand.Length - 1)\n    {\n      \
    \  throw new ArgumentException(\"The length of operator array is equal to the\
    \ length of operand array minus one. Operand is an array of of non-negative integers.\"\
    );\n    }\n    long sum = 0;\n    for (int i = 0; i < operator.Length; i++)\n\
    \    {\n        sum += operand[i] * operator[i];\n    }\n    return sum;\n}\n\
    /*\n    Given a binary tree of integers, return the value of the root.\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpes_ouwil.d(41): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpes_ouwil.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = 0;\n    long pow = 1;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4sd21h2.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4sd21h2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = operator.Length;\n    long result = 0;\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        switch (operator[i])\n        {\n       \
    \     case '+': result += operand[i]; break;\n            case '-': result -=\
    \ operand[i]; break;\n            case '*': result *= operand[i]; break;\n   \
    \         case '/': result /= operand[i]; break;\n            case '**': result\
    \ *= operand[i]; result *= operand[i]; break;\n            default: throw new\
    \ Exception(\"Unknown operator\");\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpszk1yiqw.d(40): Error: unterminated character constant

    /tmp/tmpszk1yiqw.d(40): Error: unterminated character constant

    /tmp/tmpszk1yiqw.d(40): Error: found `result` when expecting `:`

    /tmp/tmpszk1yiqw.d(40): Error: found `*=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpszk1yiqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operand.length < 2) return 0;\n    long sum = 0;\n   \
    \ for(int i = 0; i < operator.length - 1; i++){\n        if (operator[i] != operator[i+1])\
    \ {\n            sum += operand[i] * operand[i+1];\n        } else {\n       \
    \     sum += operand[i];\n        }\n    }\n    return sum;\n}\n</code>\nThis\
    \ works fine if the operators follow the mathematical conventions of the given\
    \ operators. If the operators need to follow the more generic rule of non-commutative\
    \ expressions, one needs to add another array with the rule of non-commutative\
    \ expressions and a third array with the operands.\n<code>\nlong do_algebra(string[]\
    \ operator, long[] operand, string[] non_commutative, long[] operands){\n    long\
    \ sum = 0;\n    for(int i = 0; i < operator.length - 1; i++){\n        if (operator[i]\
    \ != operator[i+1]) {\n            sum += operands[i] * operands[i+1];\n     \
    \   } else {\n            sum += operands[i];\n        }\n    }\n    return sum;\n\
    }\n</code>\nThis allows one to add more non-commutative expressions by adding\
    \ more arrays with operands and non-commutative expressions.\n<|/ a dscore=1 tags=java,recursion,expression\
    \ |>\n<| a dscore=0 |>\nYou can use the recursive descent parser in Java. Here\
    \ is the code I wrote for you (it might not be perfectly optimized, I tried to\
    \ keep it simple). \n<code>\nimport java.util.ArrayList;\nimport java.util.List;\n\
    import java.util.Stack;\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmkk6y7w.d(41): Error: declaration expected, not `<`

    /tmp/tmpdmkk6y7w.d(46): Error: declaration expected, not `for`

    /tmp/tmpdmkk6y7w.d(46): Error: no identifier for declarator `i`

    /tmp/tmpdmkk6y7w.d(46): Error: declaration expected, not `<`

    /tmp/tmpdmkk6y7w.d(46): Error: no identifier for declarator `i`

    /tmp/tmpdmkk6y7w.d(46): Error: declaration expected, not `++`

    /tmp/tmpdmkk6y7w.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmkk6y7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for (int i = 0; i < operator.Length;\
    \ i++) \n    {\n        if (i == 0) \n        {\n            if (operator[i] ==\
    \ \"+\") \n            {\n                result = result + operand[0];\n    \
    \        }\n            else if (operator[i] == \"*\") \n            {\n     \
    \           result = result * operand[0];\n            }\n            else if\
    \ (operator[i] == \"-\") \n            {\n                result = result - operand[0];\n\
    \            }\n            else if (operator[i] == \"//\") \n            {\n\
    \                result = result / operand[0];\n            }\n            else\
    \ if (operator[i] == \"**\") \n            {\n                result = result\
    \ ** operand[0];\n            }\n        }\n        else if (i == operator.length\
    \ - 1) \n        {\n            if (operator[i] == \"+\") \n            {\n  \
    \              result = result + operand[1];\n            }\n            else\
    \ if (operator[i] == \"*\") \n            {\n                result = result *\
    \ operand[1];\n            }\n            else if (operator[i] == \"-\") \n  \
    \          {\n                result = result - operand[1];\n            }\n \
    \           else if (operator[i] == \"//\") \n            {\n                result\
    \ = result / operand[1];\n            }\n            else if (operator[i] == \"\
    **\") \n            {\n                result = result ** operand[1];\n      \
    \      }\n        }\n        else if (operator[i] == \"+\" ) \n        {\n   \
    \         result = result + operand[i];\n        }\n        else if (operator[i]\
    \ == \"-\" ) \n        {\n            result = result - operand[i];\n        }\n\
    \        else if (operator[i] == \"*\" ) \n        {\n            result = result\
    \ * operand[i];\n        }\n        else if (operator[i] == \"//\" ) \n      \
    \  {\n            result = result / operand[i];\n        }\n        else if (operator[i]\
    \ == \"**\" ) \n        {\n            result = result ** operand[i];\n      \
    \  }\n    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,math,arrays,c#\
    \ dscore=0 |>\n<| a tags=algorithm,math,arrays,c# |>\nThis program will help you\
    \ to solve a problem with n number of variables and m number of operations.\n\
    <code>\n#include<stdio.h>\n#include<stdlib.h>\n#define MAX 10000\nmain()\n{\n\
    \    int exp[MAX],op[MAX],n=0,m=0;\n    scanf(\"%d%d\",&n,&m);\n    int x;\n \
    \   for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&exp[i]);\n    }\n    for(int\
    \ i=0;i<m;i++)\n    {\n        scanf(\"%d\",&op[i]);\n    }\n    for(int i=0;i<m;i++)\n\
    \    {\n        if(op[i]=='+')\n        {\n            for(int j=0;j<n;j++)\n\
    \            {\n                exp[j]+=exp[j+1];\n            }\n        }\n\
    \        else if(op[i]=='-')\n        {\n            for(int j=0;j\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplfpvk_d2.d(102): Error: declaration expected, not `<`

    /tmp/tmplfpvk_d2.d(113): Error: unexpected `(` in declarator

    /tmp/tmplfpvk_d2.d(113): Error: basic type expected, not `"%d%d"`

    /tmp/tmplfpvk_d2.d(113): Error: found `"%d%d"` when expecting `)`

    /tmp/tmplfpvk_d2.d(113): Error: no identifier for declarator `scanf(_error_)`

    /tmp/tmplfpvk_d2.d(113): Error: semicolon expected following function declaration

    /tmp/tmplfpvk_d2.d(113): Error: declaration expected, not `,`

    /tmp/tmplfpvk_d2.d(115): Error: declaration expected, not `for`

    /tmp/tmplfpvk_d2.d(115): Error: no identifier for declarator `i`

    /tmp/tmplfpvk_d2.d(115): Error: declaration expected, not `<`

    /tmp/tmplfpvk_d2.d(115): Error: no identifier for declarator `i`

    /tmp/tmplfpvk_d2.d(115): Error: declaration expected, not `++`

    /tmp/tmplfpvk_d2.d(118): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplfpvk_d2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    // Variables \n    long result = 0; \n    long temp = 0;\
    \ \n    int i = 0; \n    int j = 0;\n    // Looping through the operand array\
    \ \n    for (i = 0; i < operand.length - 1; i++) { \n        temp = operand[i];\
    \ \n        for (j = i + 1; j < operand.length; j++) { \n            if (operator[j]\
    \ == operator[i]) { \n                temp += operand[j]; \n                break;\
    \ \n            } \n        } \n        result = temp; \n    } \n    return result;\
    \ \n}\n</code>\n<|/ a dscore=1 tags=c,arrays,string |>\n<| a tags=c,arrays,string\
    \ |>\nYou need two nested loops.\n<code>\nchar operator[] = {'+', '-', '*', '/',\
    \ '^'};\nchar* expression[] = {\"1+2-3-4-5\", \"4*5\", \"6^2-1\", \"1-5\", NULL};\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbpnj2kmd.d(48): Error: declaration expected, not `<`

    /tmp/tmpbpnj2kmd.d(54): Deprecation: instead of C-style syntax, use D-style syntax
    `char*[] expression`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbpnj2kmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 1; i < operand.length; i++)\n\
    \        result += operator[0] * operand[i];\n    return result / operator[1];\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0s7qp_y.d(32): Error: incompatible types for `(operator[0]) *
    (operand[cast(ulong)i])`: `string` and `long`

    /tmp/tmpo0s7qp_y.d(33): Error: incompatible types for `(result) / (operator[1])`:
    `long` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0s7qp_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++)\n\
    \    {\n        if(operand[i] == 0)\n        {\n            break;\n        }\n\
    \        result += operand[i] * operator[i]; // addition\n        result -= operand[i]\
    \ * operator[i]; // subtraction\n    }\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaaa6sv8.d(40): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaaa6sv8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt6gru0f4.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt6gru0f4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    if (operator.Length != operand.Length-1) return -1;\n   \
    \ int i = 0;\n    long result = 0;\n    while (i < operator.Length && i < operand.Length)\
    \ {\n        switch(operator[i]) {\n            case '+': \n                result\
    \ += operand[i];\n                i++;\n                break;\n            case\
    \ '-': \n                result -= operand[i];\n                i++;\n       \
    \         break;\n            case '*': \n                result *= operand[i];\n\
    \                i++;\n                break;\n            case '/': \n      \
    \          result /= operand[i];\n                i++;\n                break;\n\
    \            case '%': \n                result %= operand[i];\n             \
    \   i++;\n                break;\n            case '**': \n                result\
    \ = result*result;\n                i++;\n                break;\n           \
    \ default: \n                return -1; \n        }\n    } \n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYour code works and is very clean, however\
    \ the result should be `9` not `9j`\n<|/ c |>\n<| c |>\nGood catch! I just made\
    \ a change to my post. The code has been updated.\n<|/ c |>\n<| c |>\nStill doesn't\
    \ work. Do you know why it's so weird?\n<|/ c |>\n<| c |>\nIt works now. I made\
    \ a mistake by not including a return when switching case operators. All works\
    \ now thanks so much. One more question: How would you rewrite the function, so\
    \ you don't have to write each case statement manually?\n<|/ c |>\n<| c |>\nYou\
    \ can use a switch case statement to loop through all of the operators and perform\
    \ the appropriate operation. I'll update my post to reflect that.\n<|/ c |>\n\
    <| a dscore=1 |>\nOne more possibility: using recursion. Basically, your problem\
    \ boils down to calculating a product of two numbers, where a product of any number\
    \ with itself is just that number multiplied by itself. So to solve your problem,\
    \ you can write a function with two parameters, operand1 and operand2, where both\
    \ are positive numbers. The function would recursively calculate the product of\
    \ operand1 and operand2, until either operand1 or operand2 is zero, and then it\
    \ would return the product of the two numbers. Something like this:\n<code>\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpox14a4nq.d(55): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(55): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(56): Error: found `result` when expecting `:`

    /tmp/tmpox14a4nq.d(56): Error: found `=` instead of statement

    /tmp/tmpox14a4nq.d(65): Error: declaration expected, not `<`

    /tmp/tmpox14a4nq.d(74): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(74): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(77): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(80): Error: unterminated character constant

    /tmp/tmpox14a4nq.d(89): Error: declaration expected, not `assert`

    /tmp/tmpox14a4nq.d(90): Error: declaration expected, not `assert`

    /tmp/tmpox14a4nq.d(91): Error: declaration expected, not `assert`

    /tmp/tmpox14a4nq.d(92): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpox14a4nq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 1; i < operand.length;\
    \ i++)\n    {\n        switch (operator[i])\n        {\n            case '+':\n\
    \                result += operand[i];\n                break;\n            case\
    \ '-':\n                result -= operand[i];\n                break;\n      \
    \      case '*':\n                result *= operand[i];\n                break;\n\
    \            case '/':\n                result /= operand[i];\n              \
    \  break;\n            case '%':\n                result %= operand[i];\n    \
    \            break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n            case '**':\n                result *= operand[i];\n\
    \                result *= operand[i];\n                break;\n        }\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI am confused...the code\
    \ seems perfectly reasonable to me. Did you try running it?\n<|/ c |>\n<| c |>\n\
    I didn't, but I thought that maybe the OP was having trouble understanding how\
    \ to use a switch statement, and so I provided an explanation.\n<|/ c |>\n<| c\
    \ |>\nI did try running it. Unfortunately, the code did not work. My array length\
    \ is always 3, so I had to use switch with 3 cases.\n<|/ c |>\n<| c |>\nI believe\
    \ I fixed it. See my edits. I forgot to initialize result to 0. It should work\
    \ now.\n<|/ c |>\n<| a dscore=0 tags=java |>\nYou have to pass the operator string\
    \ and the two arrays to the function as parameters.\n<code>\npublic class JavaPractice\
    \ {\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeg71k2vn.d(53): Error: unterminated character constant

    /tmp/tmpeg71k2vn.d(53): Error: unterminated character constant

    /tmp/tmpeg71k2vn.d(54): Error: found `result` when expecting `:`

    /tmp/tmpeg71k2vn.d(54): Error: found `*=` instead of statement

    /tmp/tmpeg71k2vn.d(61): Error: declaration expected, not `<`

    /tmp/tmpeg71k2vn.d(67): Error: unterminated character constant

    /tmp/tmpeg71k2vn.d(83): Error: declaration expected, not `assert`

    /tmp/tmpeg71k2vn.d(84): Error: declaration expected, not `assert`

    /tmp/tmpeg71k2vn.d(85): Error: declaration expected, not `assert`

    /tmp/tmpeg71k2vn.d(86): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeg71k2vn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int index = 0;\n    while (index < operator.Length\
    \ - 1)\n    {\n        int numOperators = operator.Length - index - 1;\n     \
    \   int numOperands = operand.Length - index - 1;\n        if (operand[numOperands\
    \ - 1] == 0 && operator.Length - index == 1)\n        {\n            result +=\
    \ operand[index] * operand[numOperands - 1];\n            index += 1;\n      \
    \  }\n        else if (operand[numOperands - 1] == 0 && operator.Length - index\
    \ > 1)\n        {\n            result += operand[index] * operand[numOperands\
    \ - 1];\n            index += 1;\n        }\n        else if (operand[numOperands\
    \ - 1] != 0 && operator.Length - index > 1)\n        {\n            result +=\
    \ operand[index] * operand[numOperands - 1];\n            index += 1;\n      \
    \  }\n        else if (operand[numOperands - 1] != 0 && operator.Length - index\
    \ == 1)\n        {\n            result += operand[index] * operand[numOperands\
    \ - 1];\n            index += 1;\n        }\n        else if (operand[numOperands\
    \ - 1] == 0 && operator.Length - index > 1)\n        {\n            result +=\
    \ operand[index] * operand[numOperands - 1];\n            index += 1;\n      \
    \  }\n        else\n        {\n            long rightOperand = operand[numOperands\
    \ - 1];\n            long leftOperand = operand[index];\n            long operatorLeft\
    \ = operator[index];\n            if (operatorLeft == '/')\n            {\n  \
    \              result = std.math['/'](leftOperand, rightOperand);\n          \
    \      index += 1;\n            }\n            else\n            {\n         \
    \       if (operatorLeft == '*')\n                {\n                    result\
    \ = std.math['*'](leftOperand, rightOperand);\n                    index += 1;\n\
    \                }\n                else\n                {\n                \
    \    if (operatorLeft == '+')\n                    {\n                       \
    \ result = std.math['+'](leftOperand, rightOperand);\n                       \
    \ index += 1;\n                    }\n                    else\n             \
    \       {\n                        if (operatorLeft == '-')\n                \
    \        {\n                            result = std.math['-'](leftOperand, rightOperand);\n\
    \                            index += 1;\n                        }\n        \
    \                else\n                        {\n                           \
    \ if (operatorLeft == '^')\n                            {\n                  \
    \              result = std.math['^'](leftOperand, rightOperand);\n          \
    \                      index += 1;\n                            }\n          \
    \                  else\n                            {\n                     \
    \           if (operatorLeft == '//')\n                                {\n   \
    \                                 result = std.math['/'](leftOperand, rightOperand);\n\
    \                                    index += 1;\n                           \
    \     }\n                                else\n                              \
    \  {\n                                    if (operatorLeft \nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41m5ubzg.d(101): Error: unterminated character constant

    /tmp/tmp41m5ubzg.d(101): Error: unterminated character constant

    /tmp/tmp41m5ubzg.d(102): Error: found `{` when expecting `)`

    /tmp/tmp41m5ubzg.d(106): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp41m5ubzg.d(117): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41m5ubzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = 0, j = 0; \n    long result = 0; \n    int size =\
    \ operand.length - 1; \nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaz55y5_q.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaz55y5_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\n    int i = 0;\n    \n    // Check the operands\
    \ and operators to make sure they are valid.\n    if (operand.length != operator.length-1)\n\
    \    {\n        throw new Exception(\"Bad operand size\");\n    }\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4b3cg12f.d(38): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4b3cg12f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    string operation = operator[0];\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyvshasll.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyvshasll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    bool isOperator = false;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpll0t5lgg.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpll0t5lgg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < operator.length - 1;\
    \ i++ )\n\t{\n\t\tresult += operator[i](operand[i], operand[i+1]);\n\t}\n\t\n\t\
    for (int i = 0; i < operator.length - 1; i++ )\n\t{\n\t\tresult -= operator[i](operand[i],\
    \ operand[i+1]);\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mproh71.d(33): Error: function expected before `()`, not `operator[cast(ulong)i]`
    of type `string`

    /tmp/tmp0mproh71.d(38): Error: function expected before `()`, not `operator[cast(ulong)i]`
    of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mproh71.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int operator_length = operator.length;\n\
    \    int operand_length = operand.length - 1;\n    \n    if (operator_length <\
    \ operand_length)\n    {\n        string temp = \"\";\n        \n        for (int\
    \ i = 0; i < operator_length; i++)\n        {\n            temp += operator[i];\n\
    \        }\n        \n        for (int i = 0; i < operand_length; i++)\n     \
    \   {\n            result += operand[operand_length - i - 1];\n        }\n   \
    \     \n        result = std.math.sqrt(temp) * result;\n    }\n    else \n   \
    \ {\n        string temp = \"\";\n        \n        for (int i = 0; i < operator_length;\
    \ i++)\n        {\n            temp += operator[i];\n        }\n        \n   \
    \     for (int i = 0; i < operand_length; i++)\n        {\n            result\
    \ += operand[operand_length - i - 1];\n        }\n        \n        result = result\
    \ * std.math.pow(temp, -1);\n    }\n    \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpue8g4sxf.d(31): Error: cannot implicitly convert expression `operator.length`
    of type `ulong` to `int`

    /tmp/tmpue8g4sxf.d(32): Error: cannot implicitly convert expression `operand.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmpue8g4sxf.d(40): Error: slice `temp` is not mutable

    /tmp/tmpue8g4sxf.d(48): Error: none of the overloads of `sqrt` are callable using
    argument types `(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):        `std.math.sqrt(float
    x)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1851):        `std.math.sqrt(double
    x)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):        `std.math.sqrt(real
    x)`

    /home/a.guha/repos/spack/opt/spack/linux'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // TODO: Complete the function.\n    long result = 0;\n  \
    \  for (int i = 0; i < operator.lenght; i++) {\n        switch (operator[i]) {\n\
    \            case \"+\":\n                result = result + operand[i];\n    \
    \            break;\n            case \"-\":\n                result = result\
    \ - operand[i];\n                break;\n            case \"*\":\n           \
    \     result = result * operand[i];\n                break;\n            case\
    \ \"//\":\n                result = result / operand[i];\n                break;\n\
    \            case \"**\":\n                result = result ** operand[i];\n  \
    \              break;\n            default:\n                throw (\"Error operator\"\
    );\n                break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nthanks for the help, but i think i will stick with\
    \ the solution i already have.\n<|/ c |>\n<| a dscore=1 tags=c++,function,arrays,string,algorithm\
    \ |>\nIn Java you could use:\n<code>\nimport java.util.Arrays;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqirrqh9h.d(56): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqirrqh9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if(operand.length < 2) return 0;\n    int nOperators = operator.Length;\n\
    \    int nOperands = operand.Length - 1;\n    if(nOperators == 0 || nOperands\
    \ == 0) return 0;\n    long result = 0;\n    for(int i = 0; i < nOperators; i++)\n\
    \    {\n        switch(operator[i])\n        {\n            case '+': result +=\
    \ operand[i]; break;\n            case '-': result -= operand[i]; break;\n   \
    \         case '*': result *= operand[i]; break;\n            case '//': result\
    \ /= operand[i]; break;\n            case '**': result **= operand[i]; break;\n\
    \            default: return 0;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 tags=c#,algorithm |>\n<| c |>\nI do not see how this algorithm\
    \ can work. Could you give an example of \"operation\" which is \"**\" but operands\
    \ are \"1\" and \"2\"?\n<|/ c |>\n<| c |>\nCan you please give a sample input\
    \ for which this algorithm fails?\n<|/ c |>\n<| c |>\n: I have added a test case.\
    \ Hope that helps.\n<|/ c |>\n<| c |>\n: Added test case to my answer.\n<|/ c\
    \ |>\n<| c |>\n: Thank you for adding this. I have updated my answer. I have also\
    \ added a test case to my answer.\n<|/ c |>\n<| a dscore=1 tags=c#,algorithm |>\n\
    Here is my solution:\n<code>\npublic long DoAlgebra(string[] operators, long[]\
    \ operands)\n{\n    int nOperators = operators.Length;\n    int nOperands = operands.Length\
    \ - 1;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qeacglf.d(42): Error: unterminated character constant

    /tmp/tmp7qeacglf.d(42): Error: unterminated character constant

    /tmp/tmp7qeacglf.d(42): Error: found `result` when expecting `:`

    /tmp/tmp7qeacglf.d(42): Error: found `/=` instead of statement

    /tmp/tmp7qeacglf.d(43): Error: unterminated character constant

    /tmp/tmp7qeacglf.d(43): Error: unterminated character constant

    /tmp/tmp7qeacglf.d(43): Error: found `result` when expecting `:`

    /tmp/tmp7qeacglf.d(43): Error: expression expected, not `*=`

    /tmp/tmp7qeacglf.d(43): Error: found `operand` when expecting `;` following statement

    /tmp/tmp7qeacglf.d(49): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qeacglf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length != operand.length - 1) return -1;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqzgt7w70.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqzgt7w70.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for (int i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+': \n           \
    \     result += operand[i];\n                break;\n            case '-':\n \
    \               result -= operand[i];\n                break;\n            case\
    \ '*': \n                result *= operand[i];\n                break;\n     \
    \       case '/': \n                result /= operand[i];\n                break;\n\
    \            case '//': \n                result /= operand[i];\n            \
    \    break;\n            case '**':\n                result *= operand[i];\n \
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    thanks for sharing the code, I see what you did here, but I dont think its the\
    \ most efficient solution. I was thinking more like (from memory) a function that\
    \ would take in 2 arrays of characters, and return 2 arrays of longs. Does that\
    \ make sense? But even then, its the math that I need to figure out.\n<|/ c |>\n\
    <| c |>\nI updated my answer with a solution, please take a look\n<|/ c |>\n<|\
    \ c |>\nthank you very much, this is really close! I edited your solution slightly:\
    \ `String [] operator = { \"+\", \"-\", \"*\", \"/\", \"**\" };\n  long [] operand\
    \ = { 2, 3, 4, 5 };\n  \n  long result = do_algebra(operator, operand);\n  System.out.println(result);`\n\
    <|/ c |>\n<| c |>\nyes, I guess your solution is better, I thought you could do\
    \ the same with the array given by the OP using your solution. I updated my answer.\n\
    <|/ c |>\n<| a dscore=1 tags=java,math,arrays,algorithm |>\nI wrote a solution\
    \ to your problem:\n<code>\n    public class Math {\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_g_rstic.d(45): Error: unterminated character constant

    /tmp/tmp_g_rstic.d(45): Error: unterminated character constant

    /tmp/tmp_g_rstic.d(46): Error: found `result` when expecting `:`

    /tmp/tmp_g_rstic.d(46): Error: found `/=` instead of statement

    /tmp/tmp_g_rstic.d(48): Error: unterminated character constant

    /tmp/tmp_g_rstic.d(48): Error: unterminated character constant

    /tmp/tmp_g_rstic.d(49): Error: found `result` when expecting `:`

    /tmp/tmp_g_rstic.d(49): Error: found `*=` instead of statement

    /tmp/tmp_g_rstic.d(54): Error: declaration expected, not `<`

    /tmp/tmp_g_rstic.d(80): Error: declaration expected, not `assert`

    /tmp/tmp_g_rstic.d(81): Error: declaration expected, not `assert`

    /tmp/tmp_g_rstic.d(82): Error: declaration expected, not `assert`

    /tmp/tmp_g_rstic.d(83): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_g_rstic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if(operator.length != operand.length)\n        throw new Exception(\"\
    Operator and operand array lengths don't match.\");\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc2z9op_p.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2z9op_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    boolean isOperator =\
    \ false;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3flzmzt.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3flzmzt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while (i < operand.length)\
    \ {\n        if (operator[i] == \"+\") {\n            result += operand[i];\n\
    \        } else if (operator[i] == \"-\") {\n            result -= operand[i];\n\
    \        } else if (operator[i] == \"*\") {\n            result *= operand[i];\n\
    \        } else if (operator[i] == \"//\") {\n            result /= operand[i];\n\
    \        } else if (operator[i] == \"**\") {\n            result *= operand[i];\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpj9m4_g_9.d(33): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x429186]

    ??:? long tmpj9m4_g_9.do_algebra(immutable(char)[][], long[]) [0x427dd3]

    ??:? void tmpj9m4_g_9.__unittest_L48_C1() [0x42812c]

    ??:? void tmpj9m4_g_9.__modtest() [0x428340]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a8d1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a960]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a85d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e05]

    ??:? runModuleUnitTests [0x42da01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int lenOperator = operator.Length;\n    int lenOperand = operand.Length;\n\
    \    long result = operand[0];\n    for(int i=1; i<lenOperator; i++)\n    {\n\
    \        int idx = i;\n        if(idx == 0)\n            result = operand[idx]\
    \ + operand[idx-1];\n        else if(idx == lenOperand-1)\n            result\
    \ = operand[idx] - operand[idx-1];\n        else\n            result = operand[idx]\
    \ * operand[idx-1] + operand[idx];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvzrvkj7w.d(30): Error: no property `Length` for type `string[]`

    /tmp/tmpvzrvkj7w.d(31): Error: no property `Length` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvzrvkj7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0; \n    \n    for (int i = 0; i < operator.size();\
    \ i++) \n    { \n        result += operand[operator.size() - i - 1] * std.math[operator[i]];\
    \ \n    } \nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_bkzif8.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_bkzif8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    long\
    \ temp_result = 0;\n    while(i < operand.length && j < operator.length) {\n \
    \       switch(operator[j]) {\n            case '+': result += operand[i]; break;\n\
    \            case '-': result -= operand[i]; break;\n            case '*': result\
    \ *= operand[i]; break;\n            case '/': result /= operand[i]; break;\n\
    \            case '%': result %= operand[i]; break;\n            case '^': result\
    \ ^= operand[i]; break;\n            case ',': result <<= operand[i]; break;\n\
    \            case '.': result >>= operand[i]; break;\n            case '~': result\
    \ ^= operand[i]; break;\n            default:\n                throw new Exception(\"\
    Invalid operator: \" + operator[j]);\n        }\n        i++;\n        j++;\n\
    \    }\n    return temp_result;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThank\
    \ you. This is really cool. I will try to implement this one! :)\n<|/ c |>\n<|\
    \ c |>\nIt's also good to point out that you can pass any number of arrays in\
    \ Java.  You don't need to create one array of operators and one array of operands.\n\
    <|/ c |>\n<| c |>\nThanks, this is really cool! It's also a very good idea, because\
    \ I can pass any number of arrays to it. But I still have a problem. How do I\
    \ call the method and put those arrays to it?\n<|/ c |>\n<| c |>\nOkay, I figured\
    \ it out! :) Thanks so much! It really helped me! I really appreciate your effort!\
    \ I marked your answer as accepted :) Thanks! :)\n<|/ c |>\n<| c |>\n: You shouldn't\
    \ use float/double for this kind of calculations. Use BigDecimal. Floating point\
    \ arithmetic is not exact, and it's very slow.\n<|/ c |>\n<| a tags=math,operator-precedence,arrays,java\
    \ |>\nThere are a lot of ways you can do this, and there are even easier ways\
    \ than what I suggested. The following method will take two arrays, one containing\
    \ the operators and one containing the operands and return the result of the calculation.\
    \ It uses binary operations to evaluate the expression. \n<code>\n    public static\
    \ long evaluate(String[] operator, long[] operand) {\n        long result = 0;\n\
    \        for(int i = 0; i<operand.length; i++)\n            switch(operator[i])\
    \ {\n                case '+':\n                    result = result + operand[i];\n\
    \                    break;\n                case '-':\n                    result\
    \ = result - operand[i];\n                    break;\n                case '*':\n\
    \                    result = result * operand[i];\n                    break;\n\
    \                case '/\nunittest\n{\n    alias candidate = do_algebra;\n\n \
    \   assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9o75ycan.d(53): Error: declaration expected, not `<`

    /tmp/tmp9o75ycan.d(59): Error: unterminated character constant

    /tmp/tmp9o75ycan.d(59): Error: unterminated character constant

    /tmp/tmp9o75ycan.d(62): Error: unterminated character constant

    /tmp/tmp9o75ycan.d(68): Error: unterminated character constant

    /tmp/tmp9o75ycan.d(68): Error: unterminated character constant

    /tmp/tmp9o75ycan.d(75): Error: declaration expected, not `for`

    /tmp/tmp9o75ycan.d(75): Error: no identifier for declarator `i`

    /tmp/tmp9o75ycan.d(75): Error: declaration expected, not `<`

    /tmp/tmp9o75ycan.d(75): Error: no identifier for declarator `i`

    /tmp/tmp9o75ycan.d(75): Error: declaration expected, not `++`

    /tmp/tmp9o75ycan.d(79): Error: declaration expected, not `break`

    /tmp/tmp9o75ycan.d(80): Error: declaration expected, not `case`

    /tmp/tmp9o75ycan.d(82): Error: declaration expected, not `break`

    /tmp/tmp9o75ycan.d(83): Error: declaration expected, not `case`

    /tmp/tmp9o75ycan.d(85): Error: declaration expected, not `break`

    /tmp/tmp9o7'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int lenops = operator.Length;\n    int lenopse = operand.Length;\n\
    \    int i;\n    long result = 0;\n    for (i = 0; i < lenopse; i++)\n    {\n\
    \        long val1 = get_operand(operator, operand, i);\n        long val2 = get_operand(operator,\
    \ operand, i + 1);\n        int operate = operator[i];\n        switch(operate)\n\
    \        {\n            case '+':\n                result += (val1 + val2);\n\
    \                break;\n            case '-':\n                result += (val1\
    \ - val2);\n                break;\n            case '*':\n                result\
    \ += (val1 * val2);\n                break;\n            case '/':\n         \
    \       if (val2 != 0)\n                    result += (val1 / val2);\n       \
    \         break;\n            case '%':\n                result += (val1 % val2);\n\
    \                break;\n            case '^':\n                if (val2 == 0)\n\
    \                    result = 1;\n                else\n                    result\
    \ = Math.Pow(val1, val2);\n                break;\n            default:\n    \
    \            Console.WriteLine(\"Unknown operator. Operator: [{0}], Operand: [{1}]\"\
    , operate, val1);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuscgq1li.d(30): Error: no property `Length` for type `string[]`

    /tmp/tmpuscgq1li.d(31): Error: no property `Length` for type `long[]`

    /tmp/tmpuscgq1li.d(36): Error: undefined identifier `get_operand`

    /tmp/tmpuscgq1li.d(37): Error: undefined identifier `get_operand`

    /tmp/tmpuscgq1li.d(38): Error: cannot implicitly convert expression `operator[cast(ulong)i]`
    of type `string` to `int`

    /tmp/tmpuscgq1li.d(61): Error: undefined identifier `Math`

    /tmp/tmpuscgq1li.d(64): Error: undefined identifier `Console`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuscgq1li.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int pos = 0;\n    long result = 0;\n    int operator_size\
    \ = 0;\n    int i, k, j;\n    bool valid = false;\n    string temp;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrukkpnk.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrukkpnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length -\
    \ 1; i++)\n    {\n        result += operator[i](operand[i], operand[i + 1]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1mwmfhi.d(33): Error: function expected before `()`, not `operator[cast(ulong)i]`
    of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1mwmfhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long current_value = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8v4uvcn.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8v4uvcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int result_size = 0;\n    int index_operator = 0;\n    int\
    \ index_operand = 0;\n    long result = 0;\n    long[] result_array = new long[result_size];\n\
    \    \n    for (int i = 0; i < operator.lenght; i++)\n    {\n        switch(operator[index_operator])\n\
    \        {\n            case \"+\":\n                result += operand[index_operand];\n\
    \                index_operand++;\n                break;\n            case \"\
    -\":\n                result -= operand[index_operand];\n                index_operand++;\n\
    \                break;\n            case \"*\":\n                result *= operand[index_operand];\n\
    \                index_operand++;\n                break;\n            case \"\
    //\":\n                result /= operand[index_operand];\n                index_operand++;\n\
    \                break;\n            case \"**\":\n                result **=\
    \ operand[index_operand];\n                index_operand++;\n                break;\n\
    \        }\n        index_operator++;\n    }\n    result_array[result_size] =\
    \ result;\n    return result;\n}\n</code>\n<|/ a tags=c,java,algorithm |>\n<|\
    \ c |>\nI like this approach, but how will it handle negative numbers?\n<|/ c\
    \ |>\n<| c |>\nI believe your `**` operator should be `^` instead - otherwise\
    \ it looks like exponentiation in math, but in C it's XOR.\n<|/ c |>\n<| c |>\n\
    : It will handle negative numbers by converting them to positive numbers when\
    \ doing arithmetic, and converting them back to negative numbers when doing exponentiation.\
    \ Although I guess you could also just check if `operand[index_operand]` is zero\
    \ before dividing.\n<|/ c |>\n<| c |>\n: Thanks, I've fixed the mistake.\n<|/\
    \ c |>\n<| c |>\n\"The length of operator array is equal to the length of operand\
    \ array minus one\" this does not work\n<|/ c |>\n<| a tags=c,java,algorithm |>\n\
    I wrote a quick function for you, maybe it can be improved - especially if you\
    \ have more than 2 operands or operators:\n<code>\npublic static void main(String[]\
    \ args) {\n    long[] array = new long[]{2,3,4,5};\n    System.out.print(calcExpression(array));\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_w48s1p4.d(57): Error: expression expected, not `*=`

    /tmp/tmp_w48s1p4.d(57): Error: found `operand` when expecting `;` following statement

    /tmp/tmp_w48s1p4.d(66): Error: declaration expected, not `<`

    /tmp/tmp_w48s1p4.d(72): Error: unterminated character constant

    /tmp/tmp_w48s1p4.d(78): Error: unterminated character constant

    /tmp/tmp_w48s1p4.d(88): Error: identifier expected following `.` instead of `out`

    /tmp/tmp_w48s1p4.d(88): Error: no identifier for declarator `System`

    /tmp/tmp_w48s1p4.d(88): Error: declaration expected, not `out`

    /tmp/tmp_w48s1p4.d(89): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_w48s1p4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0;\n    long result = 0;\n    long currentOp =\
    \ 0;\n    long currentVal = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80j802hu.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80j802hu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i;\n    long result = 0;\n    for(i = 0; i < operand.length;\
    \ i++)\n    {\n        long operand2 = operand[operand.length - i - 1];\n    \
    \    string operator_name = operator[operand.length - i - 1];\n        \n    \
    \    long temp_result = eval(operand[i], operator_name, operand2);\n        result\
    \ += (temp_result >= 0) ? temp_result : -(temp_result);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7ugrt9b.d(37): Error: undefined identifier `eval`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7ugrt9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int size = (int) operand.Length;\n    if (size < 1) \n   \
    \ {\n        return 0;\n    }\n    int index = 0;\n    long total = 0;\n    while\
    \ (index < size)\n    {\n        long op1 = 0, op2 = 0;\n        string op = operator[index];\n\
    \        int i = 0;\n        while (i < size) \n        {\n            switch\
    \ (op)\n            {\n                case \" \": \n                    op2 =\
    \ operand[i];\n                    break;\n                case \"+\": \n    \
    \                op1 = op1 + operand[i];\n                    break;\n       \
    \         case \"-\": \n                    op1 = op1 - operand[i];\n        \
    \            break;\n                case \"*\": \n                    op1 = op1\
    \ * operand[i];\n                    break;\n                case \"//\": \n \
    \                   op1 = op1 // operand[i];\n                    break;\n   \
    \             case \"**\": \n                    op1 = op1 ** operand[i];\n  \
    \                  break;\n            }\n            i++;\n        }\n      \
    \  switch (op)\n        {\n            case \" \": \n                op2 = operand[index\
    \ + 1];\n                break;\n            case \"+\": \n                total\
    \ = total + op2;\n                index++;\n                break;\n         \
    \   case \"-\": \n                total = total - op2;\n                index++;\n\
    \                break;\n            case \"*\": \n                total = total\
    \ * op2;\n                index++;\n                break;\n            case \"\
    //\": \n                total = total // op2;\n                index++;\n    \
    \            break;\n            case \"**\": \n                total = total\
    \ ** op2;\n                index++;\n                break;\n        }\n    }\n\
    \    return total;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=c#,algorithm |>\n\
    In addition to the other answers, here is a version that uses LINQ to simplify\
    \ the logic:\n<code>\npublic class Expression\n{\n    public string Operator {\
    \ get; set; }\n    public long[] Operands { get; set; }\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyxc6oro.d(30): Error: C style cast illegal, use `cast(int)operand.Length`

    /tmp/tmpdyxc6oro.d(60): Error: found `break` when expecting `;` following statement

    /tmp/tmpdyxc6oro.d(60): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdyxc6oro.d(86): Error: found `index` when expecting `;` following statement

    /tmp/tmpdyxc6oro.d(86): Error: expression expected, not `;`

    /tmp/tmpdyxc6oro.d(87): Error: found `break` when expecting `;` following statement

    /tmp/tmpdyxc6oro.d(87): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdyxc6oro.d(96): Error: declaration expected, not `<`

    /tmp/tmpdyxc6oro.d(103): Error: no identifier for declarator `set`

    /tmp/tmpdyxc6oro.d(103): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyxc6oro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0; \n    int operation; \nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5qi50j2a.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qi50j2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0, i = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnl4tlxvp.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnl4tlxvp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i; \n    int j;\n    for (j = 0;\
    \ j < operator.length; j++) \n    {\n        switch(operator[j]) {\n         \
    \   case '*': \n                for (i = j + 1; i < operator.length; i++) \n \
    \               {\n                    result = result + operand[i] * operand[j];\n\
    \                }\n                break;\n            case '/': \n         \
    \       for (i = j + 1; i < operator.length; i++) \n                {\n      \
    \              result = result + (operand[i] > 0)? operand[i]: operand[i] * -1;\n\
    \                }\n                break;\n            case '-': \n         \
    \       for (i = j + 1; i < operator.length; i++) \n                {\n      \
    \              result = result + operand[i] - operand[j];\n                }\n\
    \                break;\n            case '+': \n                for(i = j + 1;\
    \ i < operator.length; i++) \n                {\n                    result =\
    \ result + operand[i];\n                }\n                break;\n          \
    \  case '^': \n                for (i = j + 1; i < operator.length; i++) \n  \
    \              {\n                    result = result + operand[i] * operand[i];\
    \ \n                }\n                break;\n            case '%': \n      \
    \          for (i = j + 1; i < operator.length; i++) \n                {\n   \
    \                 result = result + (operand[i] > 0)? operand[i] : operand[i]\
    \ * -1; \n                }\n                break;\n            case '=': \n\
    \                result = operand[j];\n                break;\n            default:\n\
    \                throw new RuntimeException(\"Unknown operator\");\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThe above code gave\
    \ me an runtime error. After debugging, I noticed that there was a small typo\
    \ in the code (wrong case statement in the switch statement). After correcting\
    \ that, the code worked perfectly fine. Thanks for all the help. This was a good\
    \ learning experience for me.\n<|/ c |>\n<| c |>\nGreat! Glad to hear it helped.\n\
    <|/ c |>\n<| a tags=java,algorithm,string,arrays |>\nI wrote this in javascript\
    \ and just used the regular expression /^([*\\/+-])([0-9]+)$/ to capture the operators\
    \ and numbers. I then replaced the first character in the string with the operator\
    \ and used a switch statement to do the work. I've used a variable numOfOperands\
    \ to keep track of the number of operands I have.\n<code>\nfunction evalString(str){\n\
    \    var operators = /^([*\\/+-])([0-9]+)$/;\n    var numOfOperators = str.match(operators).length;\
    \ // get the number of operators in this string\n    var numOfOperands = 0;\n\
    \    var result = \"\";\n    var operator;\n    for(var i = 1; i < str.length;\
    \ i++){\n        operator = str.charAt(i-1); // get the operator\n\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjt66f2al.d(81): Error: declaration expected, not `<`

    /tmp/tmpjt66f2al.d(90): Error: character ''\'' is not a valid token

    /tmp/tmpjt66f2al.d(90): Error: unterminated /+ +/ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjt66f2al.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    \n    for(int i = 0; i < operator.size();\
    \ i++) \n    {\n        switch(operator[i]) \n        {\n            case \"+\"\
    : result = result + operand[i]; break;\n            case \"-\": result = result\
    \ - operand[i]; break;\n            case \"*\": result = result * operand[i];\
    \ break;\n            case \"//\": result = result / operand[i]; break;\n    \
    \        case \"**\": result = result ** operand[i]; break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\nIt works for the\
    \ given example, but doesn't work if you add another operator like `-`. For example,\
    \ `operator['+', '-', '*']` won't work\n<|/ c |>\n<| a |>\nYou can use std::array\
    \ or std::vector to achieve your goal. \nTo illustrate this, I wrote a template\
    \ function which I hope will be of use to you. Here is a demo: https://ideone.com/9R6O4S\n\
    <code>\n#include <iostream>\n#include <array>\n#include <string>\n#include <vector>\n\
    #include <iterator>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx1ycwlb6.d(45): Error: declaration expected, not `<`

    /tmp/tmpx1ycwlb6.d(48): Error: unterminated character constant

    /tmp/tmpx1ycwlb6.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx1ycwlb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0, sign = 1;\n    long result = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzw10ptn.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzw10ptn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong op1=0, op2=0, result=0;\n\tfor(int i = 0; i < operator.length;\
    \ i++)\n\t{\n\t\tswitch(operator[i])\n\t\t{\n\t\t\tcase '+': op1 += operand[i];\
    \ break;\n\t\t\tcase '-': op1 -= operand[i]; break;\n\t\t\tcase '*': op1 *= operand[i];\
    \ break;\n\t\t\tcase '/': op1 = op1==0?1:operand[i]; op2 = op2==0?1:operand[i];\
    \ break;\n\t\t\tcase '%': op1 = op1==0?1:operand[i]; op2 = op2==0?1:operand[i];\
    \ result = op1 % op2; break;\n\t\t\tcase '^': op1 = op1==0?1:operand[i]; op2 =\
    \ op2==0?1:operand[i]; result = op1^op2; break;\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpatwjruvx.d(35): Error: cannot implicitly convert expression `''+''`
    of type `char` to `const(string)`

    /tmp/tmpatwjruvx.d(36): Error: cannot implicitly convert expression `''-''` of
    type `char` to `const(string)`

    /tmp/tmpatwjruvx.d(37): Error: cannot implicitly convert expression `''*''` of
    type `char` to `const(string)`

    /tmp/tmpatwjruvx.d(38): Error: cannot implicitly convert expression `''/''` of
    type `char` to `const(string)`

    /tmp/tmpatwjruvx.d(39): Error: cannot implicitly convert expression `''%''` of
    type `char` to `const(string)`

    /tmp/tmpatwjruvx.d(40): Error: cannot implicitly convert expression `''^''` of
    type `char` to `const(string)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatwjruvx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i, len = operand.length - 1;\n    long res = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo79e5w9w.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo79e5w9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = operator.Length - 1;\n    long result = 0;\n    if\
    \ (operand.Length > 2) {\n        while(i >= 0)\n        {\n            switch(operator[i])\n\
    \            {\n                case \"+\":\n                    result += operand[i];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[i];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[i];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[i];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[i];\n                    result *= operand[i];\n                \
    \    break;\n            }\n            i--;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nI recommend using a dictionary to store your operations\
    \ like so:\n<code>\npublic static Dictionary<string, Func<long, long, long>> operations\
    \ = new Dictionary<string, Func<long, long, long>>()\n{\n    { \"+\", (a,b) =>\
    \ a + b},\n    { \"-\", (a,b) => a - b},\n    { \"*\", (a,b) => a * b},\n    {\
    \ \"//\", (a,b) => a / b},\n};\n</code>\nThen you can use it like this:\n<code>\n\
    long result = operations[operator](operand1,operand2);\n</code>\n<|/ a tags=c#\
    \ dscore=1 |>\n<| a dscore=1 tags=c# |>\nThe best way is to use switch statement.\
    \ Other way would be using reflection.\n<code>\npublic static long EvalExpression(string[]\
    \ operators, long[] operands)\n{\n    Dictionary<string, Func<long, long, long>>\
    \ operators = new Dictionary<string, Func<long, long, long>>()\n    {\n      \
    \  {\"+\", (a, b) => a + b},\n        {\"-\", (a, b) => a - b},\n        {\"*\"\
    , (a, b) => a * b},\n        {\"//\", (a, b) => a / b},\n    };\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcfz3820j.d(59): Error: declaration expected, not `<`

    /tmp/tmpcfz3820j.d(71): Error: declaration expected, not `<`

    /tmp/tmpcfz3820j.d(75): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfz3820j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 1;\n    long temp;\n    long operatorIndex =\
    \ 0;\n    int operandIndex = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphrui4_38.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphrui4_38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int operatorIndex = 0;\n    int operandIndex\
    \ = 0;\n    for(operandIndex = 0; operandIndex < operand.length - 1; operandIndex++){\n\
    \        while(operatorIndex < operator.length){\n            switch(operator[operatorIndex]){\n\
    \                case '+':\n                    result = result + operand[operandIndex];\n\
    \                    break;\n                case '-':\n                    result\
    \ = result - operand[operandIndex];\n                    break;\n            \
    \    case '*':\n                    result = result * operand[operandIndex];\n\
    \                    break;\n                case '/':\n                    if(operand[operandIndex]\
    \ == 0){\n                        throw runtime_error(\"division by zero\");\n\
    \                    }\n                    result = result / operand[operandIndex];\n\
    \                    break;\n                case '**':\n                    result\
    \ = result ** operand[operandIndex];\n                    break;\n           \
    \ }\n            operatorIndex++;\n        }\n        while(operandIndex < operand.length\
    \ - 1){\n            operandIndex++;\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 tags=c#,algebra |>\n<| c |>\nIt's a good idea, but doesn't\
    \ the OP just want to do addition, subtraction, multiplication and division? Not\
    \ exponentiation?\n<|/ c |>\n<| c |>\nThis is what OP wants. I did not do exponentiation.\
    \ OP wants to do addition, subtraction, multiplication and division operations.\n\
    <|/ c |>\n<| c |>\nI see. But what is the use of the second `while` loop? It doesn't\
    \ do anything except add one to `operandIndex`.\n<|/ c |>\n<| c |>\nIn case of\
    \ a division expression, the next loop will handle the other operators and operands.\
    \ Though I do not recommend doing so.\n<|/ c |>\n<| c |>\nSo what is the purpose\
    \ of the second loop? The first loop seems to handle all the operators, including\
    \ the ones in the expression. Though I do not recommend doing so as I mentioned\
    \ earlier.\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution using Recursion:\n\
    <code>\n    static void Main(string[] args)\n    {\n        string[] operators\
    \ = { \"*\", \"/\", \"+\", \"-\" };\n        int[] operands = { 1, 2, 3, 4 };\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6mjv9nor.d(51): Error: unterminated character constant

    /tmp/tmp6mjv9nor.d(51): Error: unterminated character constant

    /tmp/tmp6mjv9nor.d(52): Error: found `result` when expecting `:`

    /tmp/tmp6mjv9nor.d(52): Error: found `=` instead of statement

    /tmp/tmp6mjv9nor.d(63): Error: declaration expected, not `<`

    /tmp/tmp6mjv9nor.d(66): Error: unterminated character constant

    /tmp/tmp6mjv9nor.d(66): Error: unterminated character constant

    /tmp/tmp6mjv9nor.d(72): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6mjv9nor.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int len = operand.length-1;\n    int index = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp39630ihf.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp39630ihf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length-1;\
    \ i++)\n    {\n        if(operator[i] == '+') result += operand[i];\n        if(operator[i]\
    \ == '-') result -= operand[i];\n        if(operator[i] == '*') result *= operand[i];\n\
    \        if(operator[i] == '/' && operand[i] != 0) result /= operand[i];\n   \
    \     if(operator[i] == '//' && operand[i] != 0) result /= operand[i];\n     \
    \   if(operator[i] == '**' && operand[i] != 0) result **= operand[i];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nFor those who want\
    \ to have more fun with the problem, I wrote a functional solution. I used map\
    \ to transform the operator arrays to binary functions, and reduced to apply the\
    \ functions in order. This will work with any number of operands (though it won't\
    \ be as pretty as the other solutions). I'm sure this can be written much more\
    \ concisely, but I'm not sure how to do that. I did a little bit of research but\
    \ didn't find an implementation of this in the standard library.\n<code>\nimport\
    \ std.stdio;\nimport std.conv;\nimport std.array;\nimport std.algorithm;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgg6l394r.d(37): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(37): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(38): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(38): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(38): Error: expression expected, not `*=`

    /tmp/tmpgg6l394r.d(38): Error: found `operand` when expecting `;` following statement

    /tmp/tmpgg6l394r.d(42): Error: declaration expected, not `<`

    /tmp/tmpgg6l394r.d(45): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(45): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(45): Error: unterminated character constant

    /tmp/tmpgg6l394r.d(45): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgg6l394r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    for (int i = 1; i < operator.Length;\
    \ i++) \n    {\n        long temp;\n        if (operator[i].Equals(\"+\"))\n \
    \           temp = (result + operand[i]);\n        else if (operator[i].Equals(\"\
    *\"))\n            temp = (result * operand[i]);\n        else if (operator[i].Equals(\"\
    -\"))\n            temp = (result - operand[i]);\n        else if (operator[i].Equals(\"\
    //\"))\n            temp = (result / operand[i]);\n        else if (operator[i].Equals(\"\
    **\"))\n            temp = (result * operand[i]);\n        else\n            break;\n\
    \        result = temp;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,algorithm,c# |>\nI propose you to use the function eval\
    \ of the C# language to achieve this. The code would look like this:\n<code>\n\
    static long eval(string op, long[] arr)\n{\n    int idx = op.IndexOf('+');\n \
    \   if (idx > 0)\n        return arr[idx] + eval(op, arr.Skip(idx).ToArray());\n\
    \    else if (op.Contains(\"-\"))\n        return arr[idx] - eval(op, arr.Skip(idx\
    \ + 1).ToArray());\n    else if (op.Contains(\"*\"))\n        return arr[idx]\
    \ * eval(op, arr.Skip(idx + 1).ToArray());\n    else if (op.Contains(\"//\"))\n\
    \        return arr[idx] / eval(op, arr.Skip(idx + 1).ToArray());\n    else if\
    \ (op.Contains(\"**\"))\n        return arr[idx] * eval(op, arr.Skip(idx + 1).ToArray());\n\
    \    return arr[idx];\n}\n</code>\nThe code is not optimized at all but you should\
    \ get the idea.\n<|/ a dscore=1 |>\n<| a |>\nI wanted to write code similar to\
    \ what suggested but I think I missed something, so here is my code. \n<code>\n\
    \ public static void Main(string[] args)\n        {\n            int n = Convert.ToInt32(Console.ReadLine());\n\
    \            string op = string.Empty;\n            int exp = Convert.ToInt32(Console.ReadLine());\n\
    \            long[] arr1 = new long[n];\n            long[] arr2 = new long[n];\n\
    \            for (int i = 0; i < n; i++)\n            {\n                arr1[i]\
    \ = Convert.ToInt64(Console.ReadLine());\n            }\n            for (int\
    \ i = 0; i < n; i++)\n            {\n                arr2[i] = Convert.ToInt64(Console.ReadLine());\n\
    \            }\n            while (op == \"+\" || op == \"-\")\n            {\n\
    \                op = Console.ReadLine();\n                exp--;\n          \
    \  }\n            while (exp == 0)\n            {\n                op = Console.ReadLine();\n\
    \                exp--;\n            }\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qqqhm0d.d(50): Error: declaration expected, not `<`

    /tmp/tmp1qqqhm0d.d(58): Error: declaration expected, not `if`

    /tmp/tmp1qqqhm0d.d(60): Error: declaration expected, not `else`

    /tmp/tmp1qqqhm0d.d(62): Error: declaration expected, not `else`

    /tmp/tmp1qqqhm0d.d(64): Error: declaration expected, not `else`

    /tmp/tmp1qqqhm0d.d(66): Error: declaration expected, not `else`

    /tmp/tmp1qqqhm0d.d(68): Error: declaration expected, not `return`

    /tmp/tmp1qqqhm0d.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qqqhm0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong res = 0;\n\tfor (long i = 0; i < operand.length-1; i++)\
    \ \n\t{\n\t\tres = res + eval(operator, operand[i]);\n\t}\n\treturn res;\n}\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpmizvzc.d(33): Error: undefined identifier `eval`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpmizvzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshujvlmt.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshujvlmt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 1;\n    \n    //Calculate the number of operands\n\
    \    int num_operands = operand.length-1;\n    \n    //Calculate the number of\
    \ operators\n    int num_operators = operator.length-1;\n    \n    for(int i =\
    \ 0; i < num_operands; i++)\n    {\n        for(int j = 0; j < num_operators;\
    \ j++)\n        {\n            result = result * operand[i] + (double) operator[j];\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ dscore=1 |>\n<| c |>\nI ran your test cases and it failed the second case. Your\
    \ code has a flaw in that it ignores the `+` operator when building the expression.\n\
    <|/ c |>\n<| c |>\nThank you! I just realized the error and fixed it. I forgot\
    \ to remove the `+1` in the loop condition. Edited the answer.\n<|/ c |>\n<| a\
    \ |>\nThis would be much more easier in python, because you can use list comprehensions\
    \ in it. But here is the solution in java:\n<code>\npublic static long eval(String[]\
    \ operator, long[] operand) {\n    int operatorLen = operator.length - 1;\n  \
    \  int operandLen = operand.length - 1;\n    long result = 0;\n    for (int i\
    \ = 0; i < operandLen; i++) {\n        long leftOperand = operand[i];\n      \
    \  for (int j = 0; j < operatorLen; j++) {\n            if (operator[j] == '+')\
    \ {\n                leftOperand += operand[i + 1];\n            } else if (operator[j]\
    \ == '-') {\n                leftOperand -= operand[i + 1];\n            } else\
    \ if (operator[j] == '*') {\n                leftOperand *= operand[i + 1];\n\
    \            } else if (operator[j] == '/') {\n                leftOperand /=\
    \ operand[i + 1];\n            } else if (operator[j] == '%') {\n            \
    \    leftOperand %= operand[i + 1];\n            } else if (operator[j] == '^')\
    \ {\n                leftOperand ^= operand[i + 1];\n            } else {\n  \
    \              throw new IllegalArgumentException(String.format(\"Not supported\
    \ operation '%s'\", operator[j]));\n            }\n        }\n        result +=\
    \ leftOperand;\n    }\n    return result;\n}\n</code>\nYou can check it like this:\n\
    <code>\npublic static void main(String[] args) {\n    String[] operators = {\"\
    +\", \"-\", \"*\", \"/\", \"^\", \"%\"};\n    long[] operands = {1, 4, 2, 8, 3,\
    \ 2};\n    System.out.println(eval(operators, operands));\n}\n</code>\n<|/ a tags=java,arrays,algorithm\
    \ dscore=1 |>\n<| c |>\nI tested your solution and it failed for the second case.\
    \ I posted the correct answer below.\n<|/ c |>\n<| a |>\nI tested the solutions\
    \ provided and they failed the second test case. \nI modified \nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd1w0g1qc.d(42): Error: C style cast illegal, use `cast(double)operator[j]`

    /tmp/tmpd1w0g1qc.d(48): Error: declaration expected, not `<`

    /tmp/tmpd1w0g1qc.d(63): Error: declaration expected, not `for`

    /tmp/tmpd1w0g1qc.d(63): Error: no identifier for declarator `i`

    /tmp/tmpd1w0g1qc.d(63): Error: declaration expected, not `<`

    /tmp/tmpd1w0g1qc.d(63): Error: no identifier for declarator `i`

    /tmp/tmpd1w0g1qc.d(63): Error: declaration expected, not `++`

    /tmp/tmpd1w0g1qc.d(65): Error: declaration expected, not `for`

    /tmp/tmpd1w0g1qc.d(65): Error: no identifier for declarator `j`

    /tmp/tmpd1w0g1qc.d(65): Error: declaration expected, not `<`

    /tmp/tmpd1w0g1qc.d(65): Error: no identifier for declarator `j`

    /tmp/tmpd1w0g1qc.d(65): Error: declaration expected, not `++`

    /tmp/tmpd1w0g1qc.d(68): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd1w0g1qc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    int opr = 0; // operand\n    int ops = 0; // operator\n \
    \   long result = 0; // result\n    int index = 0;\n    long sum = 0;\n    long\
    \ prod = 1;\n    \n    while(index < operator.length && index < operand.length)\n\
    \    { \n        switch (operator[index])\n        {\n            case \"+\":\n\
    \                sum += operand[opr];\n                opr++;\n              \
    \  break;\n            case \"-\":\n                sum -= operand[opr];\n   \
    \             opr++;\n                break;\n            case \"*\":\n      \
    \          sum *= operand[opr];\n                opr++;\n                break;\n\
    \            case \"/\":\n                if (operand[opr] % 2 == 0)\n       \
    \         {\n                    sum = (sum * operand[opr] / 2) / 2;\n       \
    \             opr++;\n                }\n                else\n              \
    \  {\n                    sum = sum / operand[opr];\n                    opr++;\n\
    \                }\n                break;\n            case \"**\":\n       \
    \         prod = prod * operand[opr];\n                opr++;\n              \
    \  break;\n            default:\n                System.out.println(\"Invalid\
    \ Operator\");\n        }\n        index++;\n    }\n    \n    if (operator.length\
    \ == operand.length) // valid algebraic expression\n    {\n        switch (operator[0])\n\
    \        {\n            case \"+\":\n                result = sum;\n         \
    \       break;\n            case \"-\":\n                result = sum;\n     \
    \           break;\n            case \"*\":\n                result = sum;\n \
    \               break;\n            case \"/\":\n                result = sum;\n\
    \                break;\n            case \"**\":\n                result = sum;\n\
    \                break;\n            default:\n                System.out.println(\"\
    Invalid Operator\");\n        }\n    }\n    else\n    {\n        System.out.println(\"\
    Invalid Length\");\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThe code is perfectly valid, and also much more readable than mine.\n\
    <|/ c |>\n<| a |>\n<code>\npublic static void main(String[] args) throws IOException\
    \ {\n    String line = null;\n    String[] operators = { \"+\", \"-\", \"*\",\
    \ \"*\", \"+\" };\n    String[] operands = { \"2\", \"3\", \"4\", \"5\" };\n \
    \   String[] operatorsAndOperands = { operators[0], operators[1], operators[2],\
    \ operands[0], operands[1] };\n    \n    for(String opr : operatorsAndOperands)\
    \ {\n        long result = do_algebra(opr, operands);\n        System.out.println(String.format(\"\
    %s = %s\", opr, result));\n    }\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpx9l2mp.d(70): Error: identifier expected following `.`, not `out`

    /tmp/tmpdpx9l2mp.d(95): Error: identifier expected following `.`, not `out`

    /tmp/tmpdpx9l2mp.d(100): Error: identifier expected following `.`, not `out`

    /tmp/tmpdpx9l2mp.d(105): Error: declaration expected, not `<`

    /tmp/tmpdpx9l2mp.d(118): Error: declaration expected, not `for`

    /tmp/tmpdpx9l2mp.d(120): Error: identifier expected following `.` instead of `out`

    /tmp/tmpdpx9l2mp.d(120): Error: no identifier for declarator `System`

    /tmp/tmpdpx9l2mp.d(120): Error: declaration expected, not `out`

    /tmp/tmpdpx9l2mp.d(121): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpx9l2mp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0; \n    \n    // Check that the length of\
    \ operator and operand arrays are equal\n    if(operator.Length == operand.Length\
    \ - 1) \n    {\n        // Loop through operator array\n        for(int i = 0;\
    \ i < operator.Length; i++) \n        { \n            // Get current operator\n\
    \            string current_operator = operator[i]; \n            // Get current\
    \ operand\n            long current_operand = operand[i]; \n            // Get\
    \ the next operator\n            string next_operator = operator[i + 1]; \n  \
    \          // Get the next operand\n            long next_operand = operand[i\
    \ + 1]; \n            \n            // Calculate the value of the current operator\n\
    \            switch(current_operator) \n            { \n                case \"\
    +\": \n                    result += current_operand; \n                    break;\
    \ \n                case \"-\": \n                    result -= current_operand;\
    \ \n                    break; \n                case \"*\": \n              \
    \      result *= current_operand; \n                    break; \n            \
    \    case \"/\": \n                    result /= current_operand; \n         \
    \           break; \n                case \"//\": \n                    result\
    \ /= current_operand; \n                    break; \n                case \"**\"\
    : \n                    result *= (long)Math.Pow(current_operand, (long)2); \n\
    \                    break; \n            } \n        } \n    } \n    // Return\
    \ the result\n    return result; \n} \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp787s8tgz.d(66): Error: C style cast illegal, use `cast(long)2`

    /tmp/tmp787s8tgz.d(66): Error: C style cast illegal, use `cast(long)Math.Pow(current_operand,
    cast(long)2)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp787s8tgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0]; //Initialize result to first operand\n\
    \    int op;\n    long op1;\n    for (int i = 1; i < operator.Length; i++)\n \
    \   {\n        op = operator[i]; //Get operator at i index\n        op1 = operand[i];\
    \ //Get operand at i index\n        switch (op)\n        {\n            case \"\
    +\":\n                result += op1;\n                break;\n            case\
    \ \"-\":\n                result -= op1;\n                break;\n           \
    \ case \"*\":\n                result *= op1;\n                break;\n      \
    \      case \"/\":\n                if (op1 == 0)\n                {\n       \
    \             throw new Exception(\"Division by zero is not allowed.\");\n   \
    \             }\n                result /= op1;\n                break;\n    \
    \        case \"**\":\n                result *= op1;\n                result\
    \ *= op1;\n                break;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI don't think you need to handle `operator['+', '**']`,\
    \ as that would be handled as a straightforward `result = op1`.\n<|/ c |>\n<|\
    \ c |>\nI actually do want to handle ** as a straightforward operation. But my\
    \ code doesn't handle ** as a straightforward operation. Thank you for your answer\
    \ though, it helped me a lot!\n<|/ c |>\n<| c |>\nI've just added support for\
    \ that.\n<|/ c |>\n<| c |>\nJust because you accepted this answer doesn't mean\
    \ that it's correct. Your code won't handle `2 ** 0` correctly.\n<|/ c |>\n<|\
    \ c |>\nThe code handles it correctly and does what it needs to do which is to\
    \ evaluate the expression. So I'm not sure what you're asking about.\n<|/ c |>\n\
    <| a tags=c#,algorithm,math |>\nI have just updated my answer to include support\
    \ for power and ** as well.\n<code>\nusing System;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkij6d0p7.d(63): Error: declaration expected, not `<`

    /tmp/tmpkij6d0p7.d(66): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(69): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(72): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(75): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(75): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(75): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(78): Error: unterminated character constant

    /tmp/tmpkij6d0p7.d(78): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkij6d0p7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for (int i = 0; i < operator.length\
    \ - 1; i++)\n    {\n        result += operand[i] * operator[i + 1];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis won't work since the operator\
    \ array is of the wrong length. `operator.length` should return `operand.length\
    \ - 1` minus 1.\n<|/ c |>\n<| c |>\nYes, you're correct. I didn't see that. I\
    \ will edit my answer to use your suggestion.\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static long evaluate(char[] operators, long[] operands) {\n\
    \    long result = 0;\n    for (int i = 0; i < operators.length; i++) {\n    \
    \    result += (operands[i] - operators[i]) * operands[i - 1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvg76p6d.d(37): Error: declaration expected, not `<`

    /tmp/tmpjvg76p6d.d(40): Error: unterminated character constant

    /tmp/tmpjvg76p6d.d(43): Error: unterminated character constant

    /tmp/tmpjvg76p6d.d(43): Error: unterminated character constant

    /tmp/tmpjvg76p6d.d(49): Error: declaration expected, not `for`

    /tmp/tmpjvg76p6d.d(49): Error: no identifier for declarator `i`

    /tmp/tmpjvg76p6d.d(49): Error: declaration expected, not `<`

    /tmp/tmpjvg76p6d.d(49): Error: no identifier for declarator `i`

    /tmp/tmpjvg76p6d.d(49): Error: declaration expected, not `++`

    /tmp/tmpjvg76p6d.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvg76p6d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong result = 0;\n\tfor (int i = 0; i < operator.length; i++)\
    \ \n\t{\n\t\tswitch(operator[i])\n\t\t{\n\t\t\tcase '+': result += operand[i];\
    \ break;\n\t\t\tcase '-': result -= operand[i]; break;\n\t\t\tcase '*': result\
    \ *= operand[i]; break;\n\t\t\tcase '/': result /= operand[i]; break;\n\t\t\t\
    case '^': result %= operand[i]; break;\n\t\t}\n\t}\n\treturn result;\n}\n/*\n\
    \    This function is to find the GCD of the given numbers.\nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbavr1p2e.d(44): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbavr1p2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    \n    if(operator.length\
    \ != operand.length - 1)\n    {\n        throw new IllegalArgumentException(\"\
    Incorrect input size\");\n    }\n    \n    //The first operator is the operation\
    \ symbol, the second is the second operand.\n    while(i < operator.length)\n\
    \    {\n        switch(operator[i])\n        {\n        case '+':\n          \
    \  result += operand[i + 1];\n            i += 2;\n            break;\n      \
    \  case '-':\n            result -= operand[i + 1];\n            i += 2;\n   \
    \         break;\n        case '*':\n            result *= operand[i + 1];\n \
    \           i += 2;\n            break;\n        case '/':\n            if(operand[i\
    \ + 1] != 0) //If it divided by zero it will throw an exception\n            {\n\
    \                result /= operand[i + 1];\n                i += 2;\n        \
    \    }\n            else\n            {\n                throw new ArithmeticException(\"\
    Division by zero\");\n            }\n            break;\n        case '^':\n \
    \           result ^= operand[i + 1];\n            i += 2;\n            break;\n\
    \        default:\n            throw new IllegalArgumentException(\"Incorrect\
    \ operator type\");\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=java\
    \ dscore=1 |>\n<| a |>\n<code>\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\
    import java.io.InputStreamReader;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hsr82b0.d(76): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hsr82b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long temp_result = 0;\n    int count\
    \ = 0;\n    for(long i=0;i<operator.length;i++)\n    {\n        temp_result =\
    \ 0;\n        if(count%2 == 0)\n        {\n            for(int j=0;j<operand.length-1;j++)\n\
    \            {\n                if(operator[i] == \"-\")\n                {\n\
    \                    temp_result -= operand[j];\n                }\n         \
    \       else if(operator[i] == \"*\")\n                {\n                   \
    \ temp_result *= operand[j];\n                }\n                else if(operator[i]\
    \ == \"/\")\n                {\n                    temp_result /= operand[j];\n\
    \                }\n                else if(operator[i] == \"//\")\n         \
    \       {\n                    temp_result /= operand[j];\n                }\n\
    \                else if(operator[i] == \"**\")\n                {\n         \
    \           temp_result *= operand[j];\n                }\n            }\n   \
    \     }\n        else\n        {\n            for(int j=0;j<operand.length-1;j++)\n\
    \            {\n                if(operator[i] == \"-\")\n                {\n\
    \                    temp_result += operand[j];\n                }\n         \
    \       else if(operator[i] == \"*\")\n                {\n                   \
    \ temp_result *= operand[j];\n                }\n                else if(operator[i]\
    \ == \"/\")\n                {\n                    temp_result /= operand[j];\n\
    \                }\n                else if(operator[i] == \"//\")\n         \
    \       {\n                    temp_result /= operand[j];\n                }\n\
    \                else if(operator[i] == \"**\")\n                {\n         \
    \           temp_result *= operand[j];\n                }\n            }\n   \
    \     }\n        result += temp_result;\n        count++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprajnwjhm.d(97): unittest failure

    ----------------

    ??:? _d_unittestp [0x429415]

    ??:? void tmprajnwjhm.__unittest_L93_C1() [0x42847f]

    ??:? void tmprajnwjhm.__modtest() [0x42867c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42df6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42916e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aca0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ab9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429145]

    ??:? runModuleUnitTests [0x42dd41]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4298d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result; \n    long i = 0, j = 0; \nunittest\n{\n   \
    \ alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeivwk1gn.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeivwk1gn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i, j, k, len, operatorIndex = 0;\n    long eval = 0;\n\
    \    len = operator.length - 1;\n    // For all elements of operator except the\
    \ last\n    // Operator must have one operator\n    if (len < 1)\n        throw\
    \ new IllegalArgumentException();\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnb33ytf2.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnb33ytf2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    int i = 0, j = 0, sum = 0, product\
    \ = 0;\n    int size = operand.length;\n    while(i < size)\n    {\n        int\
    \ a = operand[i], b = operand[i+1];\n        while(j < size && operator[j] ==\
    \ '-')\n        {\n            sum += (a-b)*(b+1);\n            j++;\n       \
    \ }\n        while(j < size && operator[j] == '*')\n        {\n            product\
    \ += (a-b)*(b+1);\n            j++;\n        }\n        i++;\n    }\n    return\
    \ sum == 0 && product == 0 ? 0 : sum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nHere is my code :\n<code>\npackage main\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyf5t5jm0.d(50): Error: declaration expected, not `<`

    /tmp/tmpyf5t5jm0.d(60): Error: declaration expected, not `assert`

    /tmp/tmpyf5t5jm0.d(61): Error: declaration expected, not `assert`

    /tmp/tmpyf5t5jm0.d(62): Error: declaration expected, not `assert`

    /tmp/tmpyf5t5jm0.d(63): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyf5t5jm0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Check array length\n    long result = 0;\n    if (operator.Length\
    \ != operand.Length) \n    {\n        throw new ArgumentException(\"Operator and\
    \ Operand array lengths are not equal\");\n    }\n    // Loop over the operator\
    \ array\n    for (long i = 0; i < operator.Length; i++) \n    {\n        switch\
    \ (operator[i]) \n        {\n            case \"+\": result += operand[i]; break;\n\
    \            case \"-\": result -= operand[i]; break;\n            case \"*\"\
    : result *= operand[i]; break;\n            case \"/\": result /= operand[i];\
    \ break;\n            case \"//\": result /= operand[i]; break;\n            case\
    \ \"**\": result = result * operand[i]; break;\n            default: throw new\
    \ ArgumentException(\"Invalid operator \" + operator[i]);\n        }\n    }\n\
    \    // Return result if operator array contains only '**'\n    if (operator.Length\
    \ > 1 && operator.Contains(\"**\")) \n    {\n        return result;\n    }\n \
    \   else \n    {\n        return 0;\n    }\n}\n</code>\nThe output of this program\
    \ is 10, and you can easily compare this with the output of yours.\n<|/ a |>\n\
    <| c |>\nThank you for your help!\n<|/ c |>\n<| a |>\nThis is a really tough problem\
    \ to solve in general. Here's an algorithm I devised. It has a worst-case running\
    \ time of O(N*M) where N is the length of the integer array and M is the length\
    \ of the operator array. It uses dynamic programming to solve the problem in O(N+M)\
    \ time.\n<code>\nfunction compute(operators, values)\n{\n    // Define variables\
    \ to track the state of the program\n    var maxCount = -1;\n    var stack = Array();\n\
    \    var ans = -1;\n    \n    // Step 1: Determine which operator has the highest\
    \ precedence. \n    // If both have the same precedence, use the one with lowest\
    \ precedence.\n    var maxPrecedence = -1;\n    var maxPrecedenceOperator = -1;\n\
    \    var maxPrecedenceValue = -1;\n    var maxPrecedenceValue;\n    var maxPrecedenceOperator;\n\
    \    \n    for (var i = 0; i < operators.length; i++)\n    {\n        stack.push(operators[i]);\n\
    \        \n        // Step 2: Determine which operator has the highest precedence\
    \ using dynamic programming. \n        // If the value of the current operator\
    \ equals the maximum value of the current operator, \n        // then update the\
    \ value of the operator and the max value of the current operator. \n        //\
    \ If the value of the current operator does not equal the maximum value of the\
    \ current operator, \n        // then update the value of the current operator,\
    \ max value of the current operator, and \n        // push the current operator\
    \ on to the stack again. \n        \n        // Get the current operator\n   \
    \     var currentOperator = stack[stack.length - 1];\n        var currentOperator\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuqsri7eo.d(60): Error: declaration expected, not `<`

    /tmp/tmpuqsri7eo.d(67): Error: unterminated character constant

    /tmp/tmpuqsri7eo.d(84): Error: declaration expected, not `for`

    /tmp/tmpuqsri7eo.d(84): Error: no identifier for declarator `i`

    /tmp/tmpuqsri7eo.d(84): Error: declaration expected, not `<`

    /tmp/tmpuqsri7eo.d(84): Error: no identifier for declarator `i`

    /tmp/tmpuqsri7eo.d(84): Error: declaration expected, not `++`

    /tmp/tmpuqsri7eo.d(98): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuqsri7eo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long total = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2c8r38v4.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2c8r38v4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0, i;\n    for (i = 0; i < operator.size();\
    \ i++) \n    {\n        if (i < operator.size() - 1) \n        {\n           \
    \ if (operand[i] > 0) \n            {\n                result = result + operator[i]\
    \ * operand[i];\n            }\n            else if (operand[i] == 0 && operator[i]\
    \ == '+') \n            {\n                result = result + operand[i];\n   \
    \         }\n            else \n            {\n                if (operator[i]\
    \ == '-') \n                {\n                    result = result - operand[i];\n\
    \                }\n                else if (operator[i] == '*') \n          \
    \      {\n                    result = result * operand[i];\n                }\n\
    \                else if (operator[i] == '/') \n                {\n          \
    \          if (operand[i] == 0) \n                    {\n                    \
    \    throw new ArithmeticException(\"divide by zero error\");\n              \
    \      }\n                    result = result / operand[i];\n                }\n\
    \                else if (operator[i] == '^') \n                {\n          \
    \          result = result ** operand[i];\n                }\n               \
    \ else\n                {\n                    throw new ArithmeticException(\"\
    operator error\");\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,algorithm |>\n<| c |>\ni see that you are\
    \ using the arrays to do math, but i want to get my own math operation to do this\n\
    <|/ c |>\n<| c |>\nYou asked for the math, my code is for you to use your own\
    \ math operation. Just replace the operators you want to use.\n<|/ c |>\n<| a\
    \ tags=java,algorithm |>\nI suggest you use a switch statement because I think\
    \ it makes your program easier to read:\n<code>\npublic static void main(String[]\
    \ args) {\n    String[] operators = {\"+\", \"-\", \"*\", \"/\", \"^\"};\n   \
    \ String[] operands = {1,2,3,4,5};\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtom4zxc.d(74): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtom4zxc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int n = operand.length;\n    long result = 0;\n    for(int\
    \ i = 0; i < n - 1; i++)\n    {\n        switch(operator[i])\n        {\n    \
    \        case '+':\n                result += operand[i];\n                break;\n\
    \            case '-':\n                result -= operand[i];\n              \
    \  break;\n            case '*':\n                result *= operand[i];\n    \
    \            break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '^':\n                result ^= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=algorithm,java,c,math |>\n<| c |>\nI really appreciate your effort. Its\
    \ always nice to see people trying to help you and to learn something new.\n<|/\
    \ c |>\n<| c |>\nYou're welcome :) My answer is just to show a working code snippet,\
    \ not to provide a full-blown solution (which is actually quite complicated).\n\
    <|/ c |>\n<| c |>\nThis one doesn't work for negative operands. I suggest replacing\
    \ `i` by `i+1` when switching on `operator[i]`.\n<|/ c |>\n<| c |>\nYou're right.\
    \ I've fixed it and it works now.\n<|/ c |>\n<| c |>\nNow it works for all operands\
    \ and operators. Thanks!\n<|/ c |>\n<| a tags=algorithm,java,c,math |>\nHere's\
    \ a possible approach for you. I would recommend you to look at the solution by\
    \ user1529545. I just tried to follow a similar approach as him.\n<code>\nimport\
    \ java.util.Arrays;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz58fzvfi.d(55): Error: declaration expected, not `<`

    /tmp/tmpz58fzvfi.d(61): Error: unterminated character constant

    /tmp/tmpz58fzvfi.d(64): Error: unterminated character constant

    /tmp/tmpz58fzvfi.d(67): Error: unterminated character constant

    /tmp/tmpz58fzvfi.d(67): Error: unterminated character constant

    /tmp/tmpz58fzvfi.d(73): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz58fzvfi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int j = 0;\n    long result = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7zoziqui.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7zoziqui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tint i = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmposa0dbbp.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmposa0dbbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int idx;\n    //add +, *, - \n    for(idx\
    \ = 0; idx < operator.length; idx++)\n    {\n        //get two operations\n  \
    \      string op1 = operator[idx];\n        string op2 = operator[idx + 1];\n\
    \        //get two operands\n        long a = operand[idx];\n        long b =\
    \ operand[idx + 1];\n        //add two operations\n        switch(op1)\n     \
    \   {\n            case \"+\": result = a + b; break;\n            case \"*\"\
    : result = a * b; break;\n            case \"-\": result = a - b; break;\n   \
    \     }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you so much! This is exactly what I was trying to do. Works just fine!\n<|/\
    \ c |>\n<| c |>\nGlad I could help. If you consider this the correct answer, please\
    \ click the checkmark next to this answer, so this question can be closed.\n<|/\
    \ c |>\n<| c |>\nI did it, but it said to wait 7 minutes before accepting answer\n\
    <|/ c |>\n<| c |>\nThe `break`s after the `switch` statements look wrong, but\
    \ I don't think that's an issue - it shouldn't affect the code. I'm guessing you're\
    \ talking about the `break` statements after `case '+': result = a + b; break;`\
    \ and so on, because otherwise it looks like the program will always return the\
    \ first operand.\n<|/ c |>\n<| c |>\nAh okay, I thought it didn't matter that\
    \ much as long as I only had one expression like \"1 + 2\". I'll edit it out.\
    \ Thanks!\n<|/ c |>\n<| a tags=java,switch-statement,arrays,algorithm |>\nYou\
    \ can do it as follows:\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc87cfxsg.d(51): Error: declaration expected, not `<`

    /tmp/tmpc87cfxsg.d(63): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(63): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(63): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(63): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(63): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(66): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(66): Error: unterminated character constant

    /tmp/tmpc87cfxsg.d(74): Error: declaration expected, not `assert`

    /tmp/tmpc87cfxsg.d(75): Error: declaration expected, not `assert`

    /tmp/tmpc87cfxsg.d(76): Error: declaration expected, not `assert`

    /tmp/tmpc87cfxsg.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc87cfxsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\n    int oper = 0;\n    int temp = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe6n0qrv.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe6n0qrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) {\n        switch(operator[i]) {\n            case '+':\n             \
    \   result = result + operand[i];\n                break;\n            case '-':\n\
    \                result = result - operand[i];\n                break;\n     \
    \       case '*':\n                result = result * operand[i];\n           \
    \     break;\n            case '/':\n                result = result / operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result * operand[i];\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=math,java,algorithm |>\n<| c |>\nThanks for your effort, but I cannot\
    \ figure out why my code does not produce the same result as yours (see my edit)\n\
    <|/ c |>\n<| c |>\nBecause in your code you are not doing integer division instead\
    \ you are doing floating point division.\n<|/ c |>\n<| c |>\nAnd for doing floating\
    \ point division, use this: `result = (int)(result * operand[i] / 10.0)`\n<|/\
    \ c |>\n<| a tags=math,java,algorithm |>\nI have written a java code which uses\
    \ recursion in order to evaluate the expression. \n<code>\nimport java.util.*;\n\
    public class Calc {\npublic static void main(String[] args) {\n    Scanner input\
    \ = new Scanner(System.in);\n    System.out.print(\"Enter expression: \");\n \
    \   String exp = input.nextLine();\n    Scanner sc = new Scanner(exp);\n    while(sc.hasNext())\
    \ {\n        String op = sc.next();\n        int op1 = sc.nextInt();\n       \
    \ int op2 = sc.nextInt();\n        System.out.println(op + \" \" + op1 + \" \"\
    \ + op2);\n        System.out.println(cal(op,op1,op2));\n    }\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprr4jfoua.d(45): Error: unterminated character constant

    /tmp/tmprr4jfoua.d(45): Error: unterminated character constant

    /tmp/tmprr4jfoua.d(46): Error: found `result` when expecting `:`

    /tmp/tmprr4jfoua.d(46): Error: found `=` instead of statement

    /tmp/tmprr4jfoua.d(48): Error: unterminated character constant

    /tmp/tmprr4jfoua.d(48): Error: unterminated character constant

    /tmp/tmprr4jfoua.d(49): Error: found `result` when expecting `:`

    /tmp/tmprr4jfoua.d(49): Error: found `=` instead of statement

    /tmp/tmprr4jfoua.d(57): Error: declaration expected, not `<`

    /tmp/tmprr4jfoua.d(74): Error: identifier expected following `.`, not `in`

    /tmp/tmprr4jfoua.d(75): Error: identifier expected following `.`, not `out`

    /tmp/tmprr4jfoua.d(82): Error: identifier expected following `.`, not `out`

    /tmp/tmprr4jfoua.d(83): Error: identifier expected following `.`, not `out`

    /tmp/tmprr4jfoua.d(94): Error: `}` expected following members in `class` declaration
    at /tmp/tmprr4jfoua.d(72)

    Failed: ["dmd", "-unittest", "-v", "-o-", "'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong result = 0;\n\tlong base;\n\tlong op1;\n\tlong op2;\n\t\
    for(int i = 0; i < operator.length-1; i++) {\n\t\tbase = operand[i];\n\t\top1\
    \ = operand[i+1];\n\t\top2 = operand[i+2];\n\t\tswitch(operator[i]) {\n\t\tcase\
    \ '+':\n\t\t\tresult += op1 + op2;\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tresult\
    \ -= op1 - op2;\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tresult *= op1 * op2;\n\t\t\
    \tbreak;\n\t\tcase '//':\n\t\t\tresult = result / op1;\n\t\t\tbreak;\n\t\tcase\
    \ '**':\n\t\t\tresult = result ** op2;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp65rgpx41.d(48): Error: unterminated character constant

    /tmp/tmp65rgpx41.d(48): Error: unterminated character constant

    /tmp/tmp65rgpx41.d(49): Error: found `result` when expecting `:`

    /tmp/tmp65rgpx41.d(49): Error: found `=` instead of statement

    /tmp/tmp65rgpx41.d(51): Error: unterminated character constant

    /tmp/tmp65rgpx41.d(51): Error: unterminated character constant

    /tmp/tmp65rgpx41.d(52): Error: found `result` when expecting `:`

    /tmp/tmp65rgpx41.d(52): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp65rgpx41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0;\n    long result = 0;\n    for (index = 0;\
    \ index < operator.length; index++) {\n        if (index == 0) {\n           \
    \ result += operand[index];\n        } else if (index == operator.length - 1)\
    \ {\n            result -= operand[index];\n        } else {\n            result\
    \ *= operand[index];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis is a pretty interesting approach with some nice logic.\
    \ I\u2019m going to have to study it to get a firm understanding of it. The only\
    \ problem I\u2019m having is my array is static and constantly changing. I will\
    \ have to figure out how to do this in Java.\n<|/ c |>\n<| a |>\nThis is my first\
    \ time answering a question on Stack Overflow, so I'm hoping I can help you out.\n\
    You want to make a new function that accepts an array (Array) and a string (String).\n\
    The function should return the result of the array + the string. For example,\
    \ the function should return \"6 - 5\", since 6 is the value of a + b + c, whereas\
    \ 5 is the value of d.\nHere's a solution that doesn't require a loop. The trick\
    \ is to make a new function and pass it the existing function, then you just call\
    \ that new function within the existing function.\n<code>\npublic int add(String\
    \ array, int a, int b, int c) {\n    String d = \"5\";\n    String mathExpression\
    \ = a + b + c;\n    \n    return Integer.parseInt(array) + Integer.parseInt(d);\n\
    }\n</code>\nYou then call the new function in your existing function\n<code>\n\
    public String addition(int a, int b, int c) {\n    int d = 5;\n    String array\
    \ = \"a\";\n    \n    add(array, a, b, c);\n}\n</code>\n<|/ a tags=java dscore=0\
    \ |>\n<| c |>\nThank you for the help! I didn't think to create a new function.\
    \ That worked perfectly.\n<|/ c |>\n<| a dscore=0 |>\nTry this solution for addition\
    \ operation:\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l8pe4dh.d(43): Error: declaration expected, not `<`

    /tmp/tmp5l8pe4dh.d(46): Error: char 0x2019 not allowed in identifier

    /tmp/tmp5l8pe4dh.d(46): Error: character 0x2019 is not a valid token

    /tmp/tmp5l8pe4dh.d(46): Error: char 0x2019 not allowed in identifier

    /tmp/tmp5l8pe4dh.d(46): Error: character 0x2019 is not a valid token

    /tmp/tmp5l8pe4dh.d(49): Error: unterminated character constant

    /tmp/tmp5l8pe4dh.d(52): Error: unterminated character constant

    /tmp/tmp5l8pe4dh.d(52): Error: unterminated character constant

    /tmp/tmp5l8pe4dh.d(58): Error: declaration expected, not `return`

    /tmp/tmp5l8pe4dh.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l8pe4dh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int count = 0;\n    int flag;\n    \n\
    \    while (count < operand.length) {\n        flag = 1;\n        for (int i =\
    \ 0; i < operator.length; i++) {\n            switch (operator[i]) {\n       \
    \         case '+':\n                    result += operand[count];\n         \
    \           break;\n                case '-':\n                    result -= operand[count];\n\
    \                    break;\n                case '*':\n                    result\
    \ *= operand[count];\n                    break;\n                case '/':\n\
    \                    result /= operand[count];\n                    break;\n \
    \               case '^':\n                    result **= operand[count];\n  \
    \                  break;\n            }\n            if (operand[count] < 0)\n\
    \                flag = 0;\n        }\n        if (flag == 1)\n            throw\
    \ new ArithmeticException();\n        count++;\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nIt would be better to use `int` instead of `long`\
    \ here (`int` is an alias to `int` and is guaranteed to be large enough for all\
    \ numbers OP wants to use).\n<|/ c |>\n<| a dscore=3 tags=algorithm,java |>\n\
    Here's a solution using loops and array index variables:\n<code>\npublic class\
    \ MyClass {\n    static long evaluate(String[] operators, long[] operands) {\n\
    \        long result = 0;\n        for (int i = 0; i < operators.length; i++)\
    \ {\n            switch (operators[i]) {\n                case \"+\":\n      \
    \              result += operands[i];\n                    break;\n          \
    \      case \"-\":\n                    result -= operands[i];\n             \
    \       break;\n                case \"*\":\n                    result *= operands[i];\n\
    \                    break;\n                case \"/\":\n                   \
    \ result /= operands[i];\n                    break;\n                case \"\
    ^\":\n                    result **= operands[i];\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n}\n</code>\n<|/ a |>\n\
    <| c |>\n+1 for the most terse solution. Thanks for the answers guys!\n<|/ c |>\n\
    <| c |>\nBut what happens when you try to perform an operation with two operands\
    \ that are out of range?\n<|/ c |>\n<| c |>\n: Yes, `ArrayIndexOutOfBoundsException`\
    \ will be thrown.\n<|/ c |>\n<| c |>\nThanks for the catch! I updated my answer.\n\
    <|/ c |>\n<| c |>\n: I agree that using arrays is more readable than using loops,\
    \ but I find this approach more flexible because it does not rely on knowing how\
    \ many elements are in each array.  Also, it makes the code easier to understand\
    \ for other people that may read it.  Also, note that you can still call `MyClass.evaluate()`\
    \ without passing any operands.  It just won't do anything with the return value.\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95rvw7m4.d(51): Error: expression expected, not `*=`

    /tmp/tmp95rvw7m4.d(51): Error: found `operand` when expecting `;` following statement

    /tmp/tmp95rvw7m4.d(63): Error: declaration expected, not `<`

    /tmp/tmp95rvw7m4.d(69): Error: unterminated character constant

    /tmp/tmp95rvw7m4.d(74): Error: declaration expected, not `for`

    /tmp/tmp95rvw7m4.d(74): Error: no identifier for declarator `i`

    /tmp/tmp95rvw7m4.d(74): Error: declaration expected, not `<`

    /tmp/tmp95rvw7m4.d(74): Error: no identifier for declarator `i`

    /tmp/tmp95rvw7m4.d(74): Error: declaration expected, not `++`

    /tmp/tmp95rvw7m4.d(78): Error: declaration expected, not `break`

    /tmp/tmp95rvw7m4.d(79): Error: declaration expected, not `case`

    /tmp/tmp95rvw7m4.d(81): Error: declaration expected, not `break`

    /tmp/tmp95rvw7m4.d(82): Error: declaration expected, not `case`

    /tmp/tmp95rvw7m4.d(84): Error: declaration expected, not `break`

    /tmp/tmp95rvw7m4.d(85): Error: declaration expected, not `case`

    /tmp/tmp95rvw7m4.d(87): Error: declaration expected,'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    bool valid_operands = false;\n    int\
    \ valid_operators = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n   \
    \ assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvy5jcti.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvy5jcti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int idx;\n    long result = 0;\n    for ( idx = 0; idx < operand.length;\
    \ idx++ )\n    {\n        if ( operator[idx] == '+' )\n            result = result\
    \ + operand[idx];\n        else if ( operator[idx] == '-' )\n            result\
    \ = result - operand[idx];\n        else if ( operator[idx] == '*' )\n       \
    \     result = result * operand[idx];\n        else if ( operator[idx] == '/'\
    \ )\n            result = result / operand[idx];\n        else if ( operator[idx]\
    \ == '%' )\n            result = result % operand[idx];\n        else if ( operator[idx]\
    \ == '^' )\n            result = result ^ operand[idx];\n    }\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz5e49vi.d(47): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz5e49vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0; \n    int i = 0; \n    while(i < operand.length)\
    \ \n    { \n        switch(operator[i]) \n        { \n            case \"+\":\
    \ \n                result += operand[i]; \n                i++; \n          \
    \      break; \n            case \"-\": \n                result -= operand[i];\
    \ \n                i++; \n                break; \n            case \"*\": \n\
    \                result *= operand[i]; \n                i++; \n             \
    \   break; \n            case \"/\": \n                if(operand[i] % 2 == 0)\
    \ \n                { \n                    result /= operand[i]; \n         \
    \       } \n                else \n                { \n                    result\
    \ /= operand[i]; \n                    result += 1; \n                } \n   \
    \             i++; \n                break; \n            case \"^\": \n     \
    \           result *= operand[i]; \n                result %= operand.length;\
    \ \n                i++; \n                break; \n            default: \n  \
    \              throw new Exception(\"operator not supported yet\"); \n       \
    \ } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'object.Exception@/tmp/tmpow3_czbl.d(66): operator not supported yet

    ----------------

    ??:? long tmpow3_czbl.do_algebra(immutable(char)[][], long[]) [0x428209]

    ??:? void tmpow3_czbl.__unittest_L71_C1() [0x4282e0]

    ??:? void tmpow3_czbl.__modtest() [0x42870c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e25f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ae09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ae98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ad95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291d5]

    ??:? runModuleUnitTests [0x42e035]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4le3r2xm.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4le3r2xm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = 0;\n    int i, j, k;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpehqi7mb_.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpehqi7mb_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 1;\n    int index = 0;\n    long temp = 0;\n\
    \    long j = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9jr5z7_r.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9jr5z7_r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Your code goes here\n    long result = 0;\n    for(int\
    \ i = 0; i<operator.size()-1; i++)\n    {\n        switch(operator[i].toUpperCase())\n\
    \        {\n            case \"+\": result = result + operand[i]; break;\n   \
    \         case \"-\": result = result - operand[i]; break;\n            case \"\
    *\": result = result * operand[i]; break;\n            case \"//\": result = result\
    \ / operand[i]; break;\n            case \"**\": result = result ** operand[i];\
    \ break;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nI believe that the most effective solution for evaluating an algebraic\
    \ expression like this is to write a recursive descent parser that can be used\
    \ with any expression syntax that you define, and it will generate the code for\
    \ evaluating the expression for you.  In your case, a recursive descent parser\
    \ is a good way to solve this problem.  A simple recursive descent parser will\
    \ basically parse the string into sub-expressions that can be evaluated, and then\
    \ you can combine those sub-expressions using the binary operators you defined.\
    \  A recursive descent parser is also a good way to learn about how parsers work.\n\
    Here is another way to go about solving the problem using recursion:\nFirst, define\
    \ some binary operators:\n<code>\npublic enum BinaryOp {\n    PLUS(\"+\"),\n \
    \   MINUS(\"-\"),\n    MUL(\"*\"),\n    DIV(\"/\"),\n    POW(\"**\");\n}\n</code>\n\
    Second, define the grammar for the expression language:\n<code>\npublic enum Token\
    \ {\n    INTEGER,\n    OPERATOR,\n    RPAREN(\")\"),\n    EOF(\"\");\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8kocfy7.d(46): Error: declaration expected, not `<`

    /tmp/tmpc8kocfy7.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8kocfy7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = operand[0];\n    int i;\n    int op_length =\
    \ operator.length;\n    for (i = 1; i < operand.length; i++) \n    {\n       \
    \ result = std.math[func[funcInd](operator, operand)];\n    }\n    return result;\n\
    }\n/*\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3upw34q.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3upw34q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int operator_length = operator.length;\n    int operand_length\
    \ = operand.length - 1;\n    long result = 0;\n    int i;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp429_ufo.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp429_ufo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int operandSize = operand.length;\n    int operatorSize =\
    \ operator.length;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmczgi1ut.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmczgi1ut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int size = operator.Length, size2 = operand.Length - 1;\n\
    \    long sum = 0;\n    long temp = 0;\n    bool first = true;\n    int last =\
    \ 0;\n    int startIndex = 0;\n    int startIndex2 = 0;\n    bool found = false;\n\
    \    int foundIndex = -1;\n    string op = \"\";\n    long result = long.MaxValue;\n\
    \    int resultIndex = 0;\n    bool done = false;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28jwct8d.d(43): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28jwct8d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnse3wh36.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnse3wh36.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0, operatorIndex = 0;\n    //initialize result\
    \ to the first element of operand array\n    result = operand[0];\n    \n    while(operatorIndex\
    \ < operator.length) \n    {\n        switch(operator[operatorIndex]) \n     \
    \   {\n            case '+':\n                result += operand[operatorIndex\
    \ + 1];\n                operatorIndex += 2;\n                break;\n       \
    \     case '-':\n                result -= operand[operatorIndex + 1];\n     \
    \           operatorIndex += 2;\n                break;\n            case '*':\n\
    \                result *= operand[operatorIndex + 1];\n                operatorIndex\
    \ += 2;\n                break;\n            case '/':\n                if(operand[operatorIndex\
    \ + 1] == 0) \n                {\n                    throw invalid_operation();\n\
    \                }\n                result /= operand[operatorIndex + 1];\n  \
    \              operatorIndex += 2;\n                break;\n            case '%':\n\
    \                result %= operand[operatorIndex + 1];\n                operatorIndex\
    \ += 2;\n                break;\n            case '^':\n                result\
    \ ^= operand[operatorIndex + 1];\n                operatorIndex += 2;\n      \
    \          break;\n            case '**':\n                result *= operand[operatorIndex\
    \ + 1];\n                operatorIndex += 2;\n                break;\n       \
    \     default:\n                throw invalid_operation();\n                break;\n\
    \        }\n    }\n    return result;\n}\n</code>\nOutput:\n<code>\n./test\nEnter\
    \ operator and operand: +, 3\nEnter operator and operand: *, 4\nEnter operator\
    \ and operand: - \nEnter operator and operand: + 2\nEnter operator and operand:\
    \ * \nEnter operator and operand: - \nEnter operator and operand: - \nEnter operator\
    \ and operand: * \nEnter operator and operand: + 3\nEnter operator and operand:\
    \ + \nEnter operator and operand: + \nEnter operator and operand: + \nEnter operator\
    \ and operand: + \nEnter operator and operand: + \nEnter operator and operand:\
    \ + \nEnter operator and operand: + \nEnter operator and operand: + \nEnter operator\
    \ and operand: + \nEnter operator and operand: + \nEnter operator and operand:\
    \ + \nEnter operator and operand: * \nEnter operator and operand: * \nEnter operator\
    \ and operand: + \nEnter operator and operand: + \nEnter operator and operand:\
    \ + \nEnter operator and operand: + \nEnter operator and operand: + \nEnter operator\
    \ and operand: * \nEnter operator and operand: * \nEnter operator and operand:\
    \ * \nEnter operator and operand: * \nEnter operator and operand: * \nEnter operator\
    \ and operand: * \nEnter operator and operand: * \nEnter operator and operand:\
    \ * \nEnter operator and operand: * \nEnter operator and operand: * \nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpby5qka2t.d(66): Error: unterminated character constant

    /tmp/tmpby5qka2t.d(66): Error: unterminated character constant

    /tmp/tmpby5qka2t.d(67): Error: found `result` when expecting `:`

    /tmp/tmpby5qka2t.d(67): Error: found `*=` instead of statement

    /tmp/tmpby5qka2t.d(77): Error: declaration expected, not `<`

    /tmp/tmpby5qka2t.d(122): Error: declaration expected, not `assert`

    /tmp/tmpby5qka2t.d(123): Error: declaration expected, not `assert`

    /tmp/tmpby5qka2t.d(124): Error: declaration expected, not `assert`

    /tmp/tmpby5qka2t.d(125): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpby5qka2t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\n    long i = 0;\n    long total = 0;\n    string\
    \ temp_operator = \"\";\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfeb8_mu.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfeb8_mu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    string\
    \ current_operator = \"\";\n    while(i < operator.length && j < operand.length)\
    \ {\n        if (operator[i].equals(\"-\")) {\n            current_operator =\
    \ \"-\";\n            i++;\n        } else if (operator[i].equals(\"+\")) {\n\
    \            current_operator = \"+\";\n            i++;\n        } else if (operator[i].equals(\"\
    *\")) {\n            current_operator = \"*\";\n            i++;\n        } else\
    \ if (operator[i].equals(\"/\")) {\n            current_operator = \"/\";\n  \
    \          i++;\n        } else if (operator[i].equals(\"**\")) {\n          \
    \  current_operator = \"**\";\n            i++;\n        } else {\n          \
    \  current_operator = \"\";\n        }\n        if (j + 1 >= operand.length ||\
    \ current_operator.equals(\"\")) {\n            throw new RuntimeException(\"\
    Operator \" + operator[i] + \" not found in operand \" + operand[j] + \"!\");\n\
    \        }\n        j++;\n        if (current_operator.equals(\"+\")) {\n    \
    \        result += operand[j];\n        } else if (current_operator.equals(\"\
    *\")) {\n            result *= operand[j];\n        } else if (current_operator.equals(\"\
    /\")) {\n            result /= operand[j];\n        } else if (current_operator.equals(\"\
    **\")) {\n            result *= operand[j];\n            while (operand[j] > 0)\
    \ {\n                result *= operand[j--];\n            }\n        } else if\
    \ (current_operator.equals(\"-\")) {\n            result -= operand[j];\n    \
    \    } else {\n            throw new RuntimeException(\"Operator \" + operator[i]\
    \ + \" not found in operand \" + operand[j] + \"!\");\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=math,java,algorithm |>\n<| a |>\nFor a slightly\
    \ different approach, without having to reinvent the wheel:\n<code>\npublic static\
    \ void main(String[] args) {\n    System.out.println(doMath(args));\n}\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjo1u4gi.d(76): Error: declaration expected, not `<`

    /tmp/tmpfjo1u4gi.d(83): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjo1u4gi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Declare variables we will need\n    long result;\n    long\
    \ i;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2q2dpg4.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2q2dpg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Your code goes here\n    long result = 0;\n    int index;\n\
    \    long operandSum = 0;\n    for(index = 0; index < operator.length; index++)\
    \ {\n        operandSum = operand[index];\n        switch(operator[index]) {\n\
    \            case \"+\":\n                result += operandSum;\n            \
    \    break;\n            case \"-\":\n                result -= operandSum;\n\
    \                break;\n            case \"*\":\n                result *= operandSum;\n\
    \                break;\n            case \"//\":\n                result /= operandSum;\n\
    \                break;\n            case \"**\":\n                result = Math.pow(operandSum,\
    \ result);\n                break;\n            default:\n                throw\
    \ new InvalidOperationException(\"The operator is not valid!\");\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,performance,algorithm,math\
    \ |>\n<| c |>\nWhat happens if you take into account integer overflow? This can\
    \ happen when multiplying or dividing two very large numbers, eg `result = 2 *\
    \ Math.Pow(operandSum, Integer.MaxValue - 1);` results in `-2147483648`.\n<|/\
    \ c |>\n<| c |>\n: Good point! I have added a `long` type specifier to the `result`\
    \ declaration and it works even with that overflow. I will update the answer.\n\
    <|/ c |>\n<| c |>\n: Yes, that would have worked. I was still thinking of a situation\
    \ when two very large numbers were involved.\n<|/ c |>\n<| c |>\n: You are right.\
    \ After testing this I found that with my initial algorithm (before updating the\
    \ question) the overflow did not occur.\n<|/ c |>\n<| a dscore=1 |>\nI think I\
    \ misunderstood the problem. You want to compute something like\n<code>\nresult\
    \ = x * (x + 1) * (x + 2) ... * x\n</code>\nwhere x is a variable and you want\
    \ to compute this without using a loop over x (except you use loops, but then\
    \ you're using an algorithm which uses loops).\nI think I understand now.\nThe\
    \ naive algorithm would be to evaluate the expression for each value of x and\
    \ then multiply them together at the end:\n<code>\nresult = x * Math.Pow(x, 2)\
    \ + x * (x * Math.Pow(x, 2) + ... * Math.Pow(x, 2))\n</code>\nThis works, but\
    \ the problem is that the number of evaluations grows very quickly (each multiplication\
    \ has an evaluation of O(log(x) where x is the number of terms)). I believe that\
    \ some dynamic programming could be used to reduce the number of evaluations.\n\
    <|/ a tags=c#,performance,algorithm,math |>\n<| c |>\nThat works but will result\
    \ in overflow\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprhxybmrr.d(58): Error: declaration expected, not `<`

    /tmp/tmprhxybmrr.d(77): Error: unterminated character constant

    /tmp/tmprhxybmrr.d(91): Error: declaration expected, not `assert`

    /tmp/tmprhxybmrr.d(92): Error: declaration expected, not `assert`

    /tmp/tmprhxybmrr.d(93): Error: declaration expected, not `assert`

    /tmp/tmprhxybmrr.d(94): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhxybmrr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++) \n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[i];\n                break;\n            case '^':\n             \
    \   result = result ^ operand[i];\n                break;\n            default:\n\
    \                throw(\"Operator must be one of the following:\");\n        \
    \        throw(\"+\");\n                throw(\"-\");\n                throw(\"\
    *\");\n                throw(\"/\");\n                throw(\"^\");\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,recursion,java\
    \ |>\nYou could implement this with a recursive function and an accumulator:\n\
    <code>\npublic int calculate(String operator, int left, int right, char op){\n\
    \    if( left == right ){\n        switch( op ){\n            case '+':\n    \
    \            return left + right;\n            case '-':\n                return\
    \ left - right;\n            case '*':\n                return left * right;\n\
    \            case '/':\n                return left / right;\n            case\
    \ '^':\n                return left ^ right;\n        }\n    }\n    int ret =\
    \ calculate(operator, left+1, right, op);\n    if( right == 0 ) return ret;\n\
    \    switch( op ){\n        case '+':\n            return ret + right;\n     \
    \   case '-':\n            return ret - right;\n        case '*':\n          \
    \  return ret * right;\n        case '/':\n            return ret / right;\n \
    \       case '^':\n            return ret ^ right;\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease don't give only code as an answer, try to add some explanation\
    \ and details to it.\n<|/ c |>\n<| c |>\nThis is not working for `calculate('+',\
    \ 100, 0, '+')`. Also you can replace `left == right` by `left != right` and get\
    \ rid of the recursive call.\n<|/ c |>\n<| a dscore=0 |>\nJust to help out anyone\
    \ who might stumble upon this.\nRecursive solution is much more intuitive, and\
    \ in my opinion is more readable and understandable than a for loop:\n<code>\n\
    public int calculateAscendingOrder(char[] operator, int[] operand){\n    switch(operator[0]){\n\
    \        case '+':\n            return calculateAscendingOrder(operator, operand);\n\
    \        case '-':\n            return calculateAscendingOrder(operator, operand);\n\
    \        case '*':\n            return calculateAscending\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyomsakz.d(61): Error: declaration expected, not `<`

    /tmp/tmpiyomsakz.d(71): Error: declaration expected, not `case`

    /tmp/tmpiyomsakz.d(73): Error: declaration expected, not `case`

    /tmp/tmpiyomsakz.d(75): Error: declaration expected, not `case`

    /tmp/tmpiyomsakz.d(77): Error: declaration expected, not `case`

    /tmp/tmpiyomsakz.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyomsakz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tlong result = 0;\n\tint i;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2_kcfs31.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2_kcfs31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\n    int index;\n    int operandIndex;\n    bool\
    \ isOperandEqualToOperator = false;\n    bool isOperatorEqualToOperator = false;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzesdp6v.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzesdp6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int lenOfOp = operator.length;\n    int lenOfOper = operand.length\
    \ - 1;\n    long result = 0;\n    long opResult = 0;\n    int opPos = 0;\n   \
    \ int numOfOp = 0;\n    int numOfOper = 0;\n    int i = 0;\n    \n    for (int\
    \ j = 0; j < lenOfOp; j++) \n    {\n        if (operator[j] == '+') \n       \
    \ {\n            opResult = std.math.addExact(operand[j], operand[++numOfOper]);\n\
    \            numOfOp++;\n            i += 2;\n        }\n        else if (operator[j]\
    \ == '-') \n        {\n            opResult = std.math.subExact(operand[j], operand[++numOfOper]);\n\
    \            numOfOp++;\n            i += 2;\n        }\n        else if (operator[j]\
    \ == '*') \n        {\n            opResult = std.math.mulExact(operand[j], operand[++numOfOper]);\n\
    \            numOfOp++;\n            i += 2;\n        }\n        else if (operator[j]\
    \ == '/') \n        {\n            opResult = std.math.divExact(operand[j], operand[++numOfOper]);\n\
    \            numOfOp++;\n            i += 2;\n        }\n        else if (operator[j]\
    \ == '//') \n        {\n            opResult = std.math.floorDivide(operand[j],\
    \ operand[++numOfOper]);\n            numOfOp++;\n            i += 2;\n      \
    \  }\n        else if (operator[j] == '**') \n        {\n            opResult\
    \ = std.math.pow(operand[j], operand[++numOfOper]);\n            numOfOp++;\n\
    \            i += 2;\n        }\n    }\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4e7ziyzb.d(65): Error: unterminated character constant

    /tmp/tmp4e7ziyzb.d(65): Error: unterminated character constant

    /tmp/tmp4e7ziyzb.d(66): Error: found `{` when expecting `)`

    /tmp/tmp4e7ziyzb.d(71): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp4e7ziyzb.d(71): Error: unterminated character constant

    /tmp/tmp4e7ziyzb.d(71): Error: unterminated character constant

    /tmp/tmp4e7ziyzb.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4e7ziyzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    int length = operator.length; \n    if (length <= 1)\n  \
    \  { \n        return 0; \n    } \n    long result = 0; \n    for (int i = 1;\
    \ i < operand.length - 1; i++) \n    { \n        if (operator[length - 1] == '+')\
    \ \n        { \n            result += operand[i - 1]; \n        } \n        else\
    \ if (operator[length - 1] == '-') \n        { \n            result -= operand[i\
    \ - 1]; \n        } \n        else if (operator[length - 1] == '*') \n       \
    \ { \n            result *= operand[i - 1]; \n        } \n        else if (operator[length\
    \ - 1] == '/') \n        { \n            result = std.math.floor_div(result, operand[i\
    \ - 1]); \n        } \n        else if (operator[length - 1] == '^') \n      \
    \  { \n            result **= operand[i - 1]; \n        } \n        else \n  \
    \      { \n            break; \n        } \n    } \n    return result; \n} \n\
    /*\n    \n    Get number of operands for the given operator.\nunittest\n{\n  \
    \  alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvusrdefi.d(56): Error: expression expected, not `*=`

    /tmp/tmpvusrdefi.d(56): Error: found `operand` when expecting `;` following statement

    /tmp/tmpvusrdefi.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvusrdefi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length; i++){\n\
    \        result += operator[0] * (operand[i] - operand[operand.length - 1 - i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=java,binary-tree,algorithm\
    \ |>\n<| a |>\nIn case you still need it, here is a solution in O(n), where n\
    \ is the number of elements in the operand array. \n<code>\npublic static long\
    \ compute(String[] operator, long[] operand) {\n  if (operator.length != operand.length\
    \ - 1)\n    throw new RuntimeException(\"Invalid input\");\n  long result = 0;\n\
    \  for (int i = 0; i < operand.length - 1; i++) {\n    result += operator[0] *\
    \ (operand[i] - operand[operand.length - 1 - i]);\n  }\n  return result;\n}\n\
    </code>\n<|/ a dscore=0 tags=java,binary-tree,algorithm |>\n<| a tags=java,binary-tree,algorithm\
    \ |>\nI did it in O(n) complexity:\n<code>\nprivate long doAlgebra(String[] operator,\
    \ long[] operand) {\n    long result = 0;\n    long lastOperand = 0;\n    for\
    \ (int i = 0; i < operand.length - 1; i++) {\n        lastOperand = operand[i];\n\
    \        for (int j = 0; j < operator.length; j++) {\n            result += operator[j]\
    \ * lastOperand;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=java,binary-tree,algorithm |>\nMy solution, time complexity is\
    \ O(n).\n<code>\npublic static long getValue(String[] operator, long[] operand){\n\
    \    long result = 0;\n    for (int i = 0; i < operand.length - 1; i++) {\n  \
    \      for (int j = 0; j < operator.length; j++) {\n            result += operator[j]\
    \ * operand[i];\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\npublic class Solution {\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rdnnmik.d(36): Error: declaration expected, not `<`

    /tmp/tmp7rdnnmik.d(45): Error: declaration expected, not `for`

    /tmp/tmp7rdnnmik.d(45): Error: no identifier for declarator `i`

    /tmp/tmp7rdnnmik.d(45): Error: declaration expected, not `<`

    /tmp/tmp7rdnnmik.d(45): Error: no identifier for declarator `i`

    /tmp/tmp7rdnnmik.d(45): Error: declaration expected, not `++`

    /tmp/tmp7rdnnmik.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rdnnmik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // Write your code here\n    long result = 0;\n    long operator_index\
    \ = 0;\n    long index = 0;\n    long operand_index = 0;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3d1xoxf.d(35): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3d1xoxf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int length = operator.length;\n    int index = 0;\n    long\
    \ result = operand[0];\n    \n    while(index < length) \n    {\n        switch(operator[index])\n\
    \        {\n            case \"+\": result += operand[index]; break;\n       \
    \     case \"-\": result -= operand[index]; break;\n            case \"*\": result\
    \ *= operand[index]; break;\n            case \"//\": result /= operand[index]\
    \ / operand[index]; break;\n            case \"**\": result *= operand[index];\
    \ result *= operand[index]; break;\n            default: throw new Exception(\"\
    Invalid operator\");\n        }\n        index ++;\n    }\n    \n    return result;\n\
    }\n</code>\n}\n<|/ a dscore=1 |>\n<| a tags=java,stack,arrays,recursion,linked-list\
    \ dscore=1 |>\n<code>\nimport java.util.*;\npublic class Main {\n    public static\
    \ void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\
    \        int N = scan.nextInt();\n        scan.nextLine();\n        int[] P =\
    \ new int[N];\n        for(int i = 0; i<P.length; i++)\n        {\n          \
    \  P[i] = scan.nextInt();\n        }\n        scan.nextLine();\n        int Q\
    \ = scan.nextInt();\n        scan.nextLine();\n        int[] Qs = new int[Q];\n\
    \        for(int i = 0; i<Qs.length; i++)\n        {\n            Qs[i] = scan.nextInt();\n\
    \        }\n        scan.close();\n        \n        int n = P.length;\n     \
    \   Queue<Integer> queue = new LinkedList<Integer>();\n        for(int i = 0;\
    \ i < n; i++)\n        {\n            queue.offer(P[i]);\n        }\n        while(!queue.isEmpty())\n\
    \        {\n            int x = queue.poll();\n            int y = Qs[0];\n  \
    \          for(int i = 0; i < n; i++)\n            {\n                if(y > Qs[i])\n\
    \                {\n                    y--;\n                    if(y > Qs[i])\n\
    \                    {\n                        queue.offer(P[i]);\n         \
    \           }\n                    else\n                    {\n             \
    \           queue.offer(P[i]-1);\n                    }\n                }\n \
    \           }\n        }\n        \n        System.out.println(queue.size());\n\
    \    }\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nYou don't need to use recursion.\
    \ Your algorithm looks like a depth first search.\n<|/ a tags=java,stack,arrays,recursion,linked-list\
    \ |>\n<| a tags=java,stack,arrays,recursion,linked-list |>\nThis problem can be\
    \ solved by using recursion and a while loop. Think about how you would solve\
    \ this problem using pencil and paper (\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75gznoku.d(50): Error: declaration expected, not `<`

    /tmp/tmp75gznoku.d(58): Error: identifier expected following `.`, not `in`

    /tmp/tmp75gznoku.d(77): Error: found `>` when expecting `;` following statement

    /tmp/tmp75gznoku.d(77): Error: found `>` when expecting `;` following statement

    /tmp/tmp75gznoku.d(77): Error: expression expected, not `)`

    /tmp/tmp75gznoku.d(77): Error: found `;` when expecting `)`

    /tmp/tmp75gznoku.d(78): Error: found `for` when expecting `;` following statement

    /tmp/tmp75gznoku.d(78): Error: found `i` when expecting `.` following int

    /tmp/tmp75gznoku.d(78): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp75gznoku.d(78): Error: found `0` when expecting `)`

    /tmp/tmp75gznoku.d(78): Error: found `)` when expecting `;` following statement

    /tmp/tmp75gznoku.d(103): Error: identifier expected following `.`, not `out`

    /tmp/tmp75gznoku.d(106): Error: declaration expected, not `<`

    /tmp/tmp75gznoku.d(109): Error: unterminated character constant

    /tmp/tmp75gznoku.d(117): Error: declaration expected, not `assert`

    /tmp/tmp75gznoku.d(118): Error: declaration expected, not `assert`

    /tmp/tmp75gznoku.d(119): Error: declaration expected, not `assert`

    /tmp/tmp75gznoku.d(120): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75gznoku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_64ydhw.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_64ydhw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int j = 0;\n    long result = 0;\n    string operator = operator[j];\n\
    \    long[] operand = operand;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4ok63js.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4ok63js.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index;\n    long result = 0;\n    \n    for (int i=0;\
    \ i<operator.length; i++) \n    {\n        index = i;\n        while (index >=\
    \ 0)\n        {\n            index = operator[index].IndexOf(operator[index-1]);\n\
    \            if (index == -1)\n                break;\n            else\n    \
    \        {\n                index--;\n            }\n        }\n        result\
    \ += operand[index] * operand[index];\n    }\n    return result + operand[index];\n\
    }\n</code>\n<|/ a tags=string,c#,arrays,algorithm dscore=1 |>\n<| a tags=string,c#,arrays,algorithm\
    \ |>\nThis problem isn't as simple as it first appears. There are a number of\
    \ issues with your current approach:\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpab_rb56f.d(50): Error: declaration expected, not `<`

    /tmp/tmpab_rb56f.d(53): Error: unterminated character constant

    /tmp/tmpab_rb56f.d(58): Error: declaration expected, not `assert`

    /tmp/tmpab_rb56f.d(59): Error: declaration expected, not `assert`

    /tmp/tmpab_rb56f.d(60): Error: declaration expected, not `assert`

    /tmp/tmpab_rb56f.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpab_rb56f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result, num1, num2, i = 0, j = 0;\n    string op;\n \
    \   \n    // Validate input\n    while(i < operator.length && j < operand.length)\
    \ \n    {\n        op = operator[i];\n        num1 = operand[j];\n        num2\
    \ = operand[j+1];\n        switch(op) \n        {\n            case \"+\":\n \
    \               result = num1 + num2;\n                break;\n            case\
    \ \"-\":\n                result = num1 - num2;\n                break;\n    \
    \        case \"*\":\n                result = num1 * num2;\n                break;\n\
    \            case \"/\":\n                result = num1 / num2;\n            \
    \    break;\n            case \"//\":\n                result = num1 & num2;\n\
    \                break;\n            case \"**\":\n                result = pow(num1,\
    \ num2);\n                break;\n        }\n        operand[j+1] = result;\n\
    \        i++;\n        j++;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c,algorithm,c++,arrays,algorithm\
    \ |>\n<| a tags=c,algorithm,c++,arrays,algorithm dscore=1 |>\nI implemented this\
    \ algorithm in Python, but it's essentially the same in C / C++, just some syntax\
    \ tweaks:\n<code>\ndef do_algebra(operator, operand):\n    operators = ['+', '-',\
    \ '*', '/', '//', '**']\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4d13j8xg.d(66): Error: declaration expected, not `<`

    /tmp/tmp4d13j8xg.d(69): Error: unterminated character constant

    /tmp/tmp4d13j8xg.d(72): Error: unterminated character constant

    /tmp/tmp4d13j8xg.d(72): Error: unterminated character constant

    /tmp/tmp4d13j8xg.d(72): Error: unterminated character constant

    /tmp/tmp4d13j8xg.d(72): Error: unterminated character constant

    /tmp/tmp4d13j8xg.d(77): Error: declaration expected, not `assert`

    /tmp/tmp4d13j8xg.d(78): Error: declaration expected, not `assert`

    /tmp/tmp4d13j8xg.d(79): Error: declaration expected, not `assert`

    /tmp/tmp4d13j8xg.d(80): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4d13j8xg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result;\n    long i;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfz60e5hc.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfz60e5hc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.size();\
    \ i++)\n    {\n        switch(operator[i])\n        {\n            case '+':\n\
    \                result = result + operand[i];\n                break;\n     \
    \       case '-':\n                result = result - operand[i];\n           \
    \     break;\n            case '*':\n                result = result * operand[i];\n\
    \                break;\n            case '//':\n                result = result\
    \ / operand[i];\n                break;\n            case '**':\n            \
    \    result = result ** operand[i];\n                break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nPlease can you also provide\
    \ the code for function do_algebra?\n<|/ c |>\n<| c |>\nThank you for your answer\
    \ and the time spent trying to solve my problem. But my problem is that the solution\
    \ must be done in the given method `do_algebra`. I am not allowed to use any other\
    \ method.\n<|/ c |>\n<| c |>\n- I've added the function definition of `do_algebra`.\n\
    <|/ c |>\n<| c |>\nThank you for your answer, but my problem is that the solution\
    \ must be done in the `do_algebra` method. I cant use any other method.\n<|/ c\
    \ |>\n<| c |>\n- I've added the `do_algebra` method implementation.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nimport java.util.*;\npublic class Main {\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp31cv2la.d(44): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(44): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(45): Error: found `result` when expecting `:`

    /tmp/tmpp31cv2la.d(45): Error: found `=` instead of statement

    /tmp/tmpp31cv2la.d(47): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(47): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(48): Error: found `result` when expecting `:`

    /tmp/tmpp31cv2la.d(48): Error: found `=` instead of statement

    /tmp/tmpp31cv2la.d(54): Error: declaration expected, not `<`

    /tmp/tmpp31cv2la.d(63): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(69): Error: unterminated character constant

    /tmp/tmpp31cv2la.d(83): Error: `}` expected following members in `class` declaration
    at /tmp/tmpp31cv2la.d(74)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp31cv2la.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = 0;\n    long result = operand[0];\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmou6vy_2.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmou6vy_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = -1;\n    long result = operand[0];\n    for (int\
    \ i = 0; i < operator.Length; i++)\n    {\n        index += 1;\n        switch\
    \ (operator[i])\n        {\n            case '+': result = result + operand[index];\
    \ break;\n            case '-': result = result - operand[index]; break;\n   \
    \         case '*': result = result * operand[index]; break;\n            case\
    \ '/': result = result / operand[index]; break;\n            case '^': result\
    \ = result ** operand[index]; break;\n        }\n    }\n    return result;\n}\n\
    /*\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4rr9y4ml.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4rr9y4ml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long res = 0;\n    int i = 0, j = 0;\n    for(i = 0; i < operand.length\
    \ - 1; i++)\n    {\n        if(operand[i] == 0 && operand[i + 1] == 0)\n     \
    \   {\n            //zero \n            return 0;\n        }\n        else if(operator[i]\
    \ == operator[j])\n        {\n            if(operand[i + 1] == 0)\n          \
    \  {\n                //operand and operator are of different length\n       \
    \         return -1;\n            }\n            else\n            {\n       \
    \         switch(operator[i])\n                {\n                    case '+':\n\
    \                        res = res + operand[j + 1];\n                       \
    \ break;\n                    case '*':\n                        res = res * operand[j\
    \ + 1];\n                        break;\n                    case '-':\n     \
    \                   res = res - operand[j + 1];\n                        break;\n\
    \                    case '/':\n                        if(operand[j + 1] == 0)\n\
    \                        {\n                            //operand and operator\
    \ are of different length\n                            return -1;\n          \
    \              }\n                        else\n                        {\n  \
    \                          res = res / operand[j + 1];\n                     \
    \   }\n                        break;\n                    case '^':\n       \
    \                 res = res ^ operand[j + 1];\n                        break;\n\
    \                }\n                \n            }\n            \n        }\n\
    \        else if(operator[i] != operator[j])\n        {\n            //invalid\
    \ operation\n            return -1;\n        }\n        j++;\n        \n    }\n\
    \    return res;\n}\n</code>\n<|/ a |>\n<| c |>\nI have added the full code. Would\
    \ be great if you can please take a look at it and tell me what I am missing.\
    \ Thanks\n<|/ c |>\n<| c |>\nThe `operator` array is not in alphabetical order.\
    \ That was my first assumption (which was wrong), but I have tried it myself and\
    \ it still doesn't work.\n<|/ c |>\n<| c |>\nThanks for your time. But it still\
    \ is not working. I have added some more test cases as well that I have tried\
    \ and the output that I am getting. Can you please have a look at that? Thanks\
    \ :)\n<|/ c |>\n<| c |>\nI have updated my answer with the code of program (that\
    \ I have written) which I have tested. Please take a look at that and tell me\
    \ what I am doing wrong. Thanks :)\n<|/ c |>\n<| a dscore=0 |>\nThanks for the\
    \ responses. I managed to get it working. Here's what I have ended up doing. \n\
    <code>\npublic long do_algebra(String [] operator, long [] operand) \n{\n    long\
    \ res = 0;\n    int i = 0, j = 0;\n    for(i = 0; i < operand.length - 1; i++)\n\
    \    {\n        if(operand[i] == 0 && operand[i + 1] == 0)\n        {\n      \
    \      //zero \n            return 0;\n        }\n        else if(operator[i]\
    \ == operator[j])\n        {\n            if(\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8ze4zl0.d(88): Error: declaration expected, not `<`

    /tmp/tmps8ze4zl0.d(94): Error: unterminated character constant

    /tmp/tmps8ze4zl0.d(103): Error: unterminated character constant

    /tmp/tmps8ze4zl0.d(109): Error: declaration expected, not `for`

    /tmp/tmps8ze4zl0.d(109): Error: no identifier for declarator `i`

    /tmp/tmps8ze4zl0.d(109): Error: declaration expected, not `<`

    /tmp/tmps8ze4zl0.d(109): Error: no identifier for declarator `i`

    /tmp/tmps8ze4zl0.d(109): Error: declaration expected, not `++`

    /tmp/tmps8ze4zl0.d(115): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8ze4zl0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n\tint j;\n\tint operator_count = operator.length;\n\tlong result\
    \ = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn34bmypb.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn34bmypb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    if (operator.length > 1) \n    {\n        // Calculate the\
    \ number of operands used \n        int num_operands = operand.length;\n     \
    \   // Calculate the number of operators used \n        int num_operators = operator.length\
    \ - 1;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyeiwci93.d(36): Error: found `unittest` instead of statement

    /tmp/tmpyeiwci93.d(44): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyeiwci93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long sum = 0;\n    for (long i = 0; i < operand.length - 1;\
    \ i++) {\n        if (operator.length < operand.length - 1) break;\n        switch\
    \ (operator[i]) {\n            case '*': sum += operand[i] * operand[i + 1]; break;\n\
    \            case '/': sum += operand[i] / operand[i + 1]; break;\n          \
    \  case '+': sum += operand[i] + operand[i + 1]; break;\n            case '-':\
    \ sum += operand[i] - operand[i + 1]; break;\n        }\n    }\n    return sum;\n\
    }\n</code>\n<|/ a |>\n<| a tags=java,algorithm dscore=0 |>\n<code>\nclass Main\
    \ {\n    public static void main(String args[]) {\n        String[] operators\
    \ = {\"+\",\"*\",\"-\",\"/\"};\n        String[] operands = {\"2\",\"3\",\"4\"\
    ,\"5\"};\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphf9scz33.d(42): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphf9scz33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 1;\n    for(int i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] == operator.length - 1)\n            result +=\
    \ operand[i];\n        else\n            result *= operand[i - 1];\n        result\
    \ += operand[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw3tj1kp6.d(32): Error: incompatible types for `(operator[cast(ulong)i])
    == (operator.length - cast(ulong)1)`: `string` and `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3tj1kp6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int counter = 0;\n    \n    for (int\
    \ i = 0; i < operator.length; ++i) \n    {\n        switch (operator[i]) \n  \
    \      {\n            case '+':\n                result = result + operand[counter];\n\
    \                counter++;\n                break;\n            case '-':\n \
    \               result = result - operand[counter];\n                counter++;\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[counter];\n                counter++;\n                break;\n  \
    \          case '/':\n                result = result / operand[counter];\n  \
    \              counter++;\n                break;\n            case '^':\n   \
    \             result = result ** operand[counter];\n                counter++;\n\
    \                break;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm |>\n<| c |>\nThis works well except for negative numbers.\
    \ I think it can be easily corrected. Thank you.\n<|/ c |>\n<| c |>\nThe original\
    \ problem was to find the sum of two numbers with some non-negative operands.\
    \ So how did you handle negatives?\n<|/ c |>\n<| c |>\nI used the negative numbers\
    \ just to show some examples. When you write negative numbers in an expression,\
    \ the result is obviously wrong.\n<|/ c |>\n<| c |>\nThe given solution works\
    \ perfectly well for me, but when I run it on an online judge, it gives wrong\
    \ answers. Any idea what might be the reason?\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't work for `operator = ['+', '-', '/', '*']` and `operand = [7, 12, 3]`.\
    \ Expected result is `-49`, but your code outputs `5`.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\npublic static int doMath(String [] op, long[] num1, long[] num2){\n\
    \    int ans=0;\n    int i=0;\n    while(true){\n        int j=0;\n        while(true){\n\
    \            if(j==0){\n                j++;\n                break;\n       \
    \     }\n            if(op[i].equals(op[j])){\n                i++;\n        \
    \        j++;\n            }else if(op[i].equals(\"+\") && op[j].equals(\"-\"\
    )){\n                ans=ans+(num1[i]+num2[i]);\n                i++;\n      \
    \          j++;\n            }else if(op[i].equals(\"+\") && op[j].equals(\"*\"\
    )){\n                ans=ans+(num1[i]*num2[i]);\n                i++;\n      \
    \          j++;\n            }else if(op[i].equals(\"+\") && op[j].equals(\"/\"\
    )){\n                ans=ans+(num1[i]/num2[i]);\n\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp37kpaqy5.d(61): Error: declaration expected, not `<`

    /tmp/tmp37kpaqy5.d(76): Error: unterminated character constant

    /tmp/tmp37kpaqy5.d(83): Error: declaration expected, not `while`

    /tmp/tmp37kpaqy5.d(85): Error: declaration expected, not `while`

    /tmp/tmp37kpaqy5.d(88): Error: declaration expected, not `break`

    /tmp/tmp37kpaqy5.d(89): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37kpaqy5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    while(i < operand.length\
    \ && operator[i].length() > operand[i]) {\n        switch(operator[i]) {\n   \
    \         case \"+\":\n                result = result + operand[i];\n       \
    \         break;\n            case \"-\":\n                result = result - operand[i];\n\
    \                break;\n            case \"*\":\n                result = result\
    \ * operand[i];\n                break;\n            case \"/\":\n           \
    \     result = result / operand[i];\n                break;\n            case\
    \ \"**\":\n                result = result ** operand[i];\n                break;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ysjrzgk.d(32): Error: no property `length` for type `string`

    /tmp/tmp1ysjrzgk.d(47): Error: can only `*` a pointer, not a `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ysjrzgk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = long.MaxValue;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2_isdve.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2_isdve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    \n    // If no operator in operator\
    \ array then return 0.\n    if (operator.length == 0) {\n        return 0;\n \
    \   }\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbk3hayod.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbk3hayod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long operation = 0;\nunittest\n{\n \
    \   alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"\
    ], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L,\
    \ 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) ==\
    \ 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp339omgg2.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp339omgg2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int i = 1;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    long result = 0;\n    int flag = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74rdwznj.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74rdwznj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n\tint size = operand.Length - 1;\n\t\n\tlong result = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9zaols0o.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9zaols0o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n  long result;\n  long op1;\n  long op2;\n  long op1_len = operator.length;\n\
    \  long op2_len = operand.length - 1;\n  long i = 0;\n  long j = 0;\n  long len\
    \ = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpui4z6so0.d(38): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpui4z6so0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int operatorIndex = 0;\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbeytgot4.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbeytgot4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 1;\n    while(i<operand.length){\n\
    \        int a = operator[i] == '-' ? -operand[i-1] : operand[i-1];\n        int\
    \ b = operator[i] == '-' ? -operand[i++] : operand[i++];\n        result = eval(result,\
    \ a, b, operator[i]);\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for the detailed response! I have tried running the above program and\
    \ it worked. However when I tried to do the same with the assignment operator\
    \ from my assignment it did not work. Can you tell me what the issue could be?\n\
    <|/ c |>\n<| c |>\nI don't have your assignment operator, so I can't test it.\n\
    <|/ c |>\n<| c |>\nHere is the problem:\n<|/ c |>\n<| c |>\nHere you go:\n<|/\
    \ c |>\n<| c |>\nI got it: it only support binary operations, like +, -, *, /,\
    \ ^\n<|/ c |>\n<| a |>\nThanks for all the responses! \nI managed to solve the\
    \ problem! I was using int instead of long int and I was using the wrong loop\
    \ to read the input. Here is the full program that works.\n<code>\n#include <stdio.h>\n\
    #include <string.h>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6r6k35a5.d(39): Error: declaration expected, not `<`

    /tmp/tmp6r6k35a5.d(45): Error: unterminated character constant

    /tmp/tmp6r6k35a5.d(45): Error: unterminated character constant

    /tmp/tmp6r6k35a5.d(66): Error: declaration expected, not `assert`

    /tmp/tmp6r6k35a5.d(67): Error: declaration expected, not `assert`

    /tmp/tmp6r6k35a5.d(68): Error: declaration expected, not `assert`

    /tmp/tmp6r6k35a5.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6r6k35a5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // initialize result with 0\n    long result = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgk93leqk.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgk93leqk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    if (operator.length > 1 )\n    {\n \
    \       string op_1, op_2;\n        for(int i = 0; i < operator.length; i++)\n\
    \        {\n            op_1 = operator[i];\n            op_2 = operator[++i];\n\
    \            switch (op_1)\n            {\n                case '+':\n       \
    \             result += (operand[i] - operand[++i]);\n                    break;\n\
    \                case '*':\n                    result += (operand[i] - operand[++i])\
    \ * (operand[++i] - operand[++i]);\n                    break;\n             \
    \   case '-':\n                    result += (operand[i] - operand[++i]);\n  \
    \                  break;\n                case '/':\n                    if (operand[++i]\
    \ % operand[++i] == 0)\n                        result += (operand[i] - operand[++i]);\n\
    \                    else\n                        result = -1;\n            \
    \        break;\n                case '^':\n                    result += (operand[i]\
    \ - operand[++i]) * (operand[++i] - operand[++i]) / Math.pow(operand[++i], operand[++i]);\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,algorithm,optimization |>\nTry this (I did not test it):\n\
    <code>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfmacg_2.d(65): Error: declaration expected, not `<`

    /tmp/tmpsfmacg_2.d(74): Error: declaration expected, not `assert`

    /tmp/tmpsfmacg_2.d(75): Error: declaration expected, not `assert`

    /tmp/tmpsfmacg_2.d(76): Error: declaration expected, not `assert`

    /tmp/tmpsfmacg_2.d(77): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfmacg_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0;\n    long result = 0;\n    int op;\n    \n\
    \    for(int i = 0; i < operator.Length - 1; i++){\n        op = operator[i];\
    \ //store the operator into op\n        index = operand[i]; //store the index\
    \ into index\n        switch (op)\n        {\n            case '+':\n        \
    \        result = result + operand[index];\n                break;\n         \
    \   case '-':\n                result = result - operand[index];\n           \
    \     break;\n            case '*':\n                result = result * operand[index];\n\
    \                break;\n            case '/':\n                result = result\
    \ / operand[index];\n                break;\n            case '**':\n        \
    \        result = result ** operand[index];\n                break;\n        \
    \    default:\n                Console.WriteLine(\"Invalid operator\");\n    \
    \            break;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for this solution. I tried it and was able to implement\
    \ it. However, as I stated in my question, I have an additional restriction. I\
    \ cannot modify the operator array and operand array given to me and I do not\
    \ know how big the arrays will be. The program should be able to handle any given\
    \ number of arrays of any size.\n<|/ c |>\n<| c |>\nI updated my solution. Just\
    \ change your variable `operator` to `string[] operators` instead of `string[]\
    \ operator`.\n<|/ c |>\n<| c |>\nThanks for the help. I apologize for my delayed\
    \ response. Unfortunately, I have been working on another task for too long. I\
    \ have been unable to implement your solution. The code is not producing any output\
    \ and I am not quite sure why. Thank you for the help nonetheless.\n<|/ c |>\n\
    <| c |>\nI updated the code and the program works on my end. Let me know if you\
    \ have any questions regarding it.\n<|/ c |>\n<| c |>\nI realized that my original\
    \ question was probably poorly worded. I apologize for this. I changed my wording\
    \ to better reflect what I am trying to accomplish. I tried your solution again\
    \ and was unable to get it to work. I am going to keep working on it. Thanks for\
    \ the help either way!\n<|/ c |>\n<| a dscore=0 |>\nHere is the final solution\
    \ I came up with. It uses recursion.\n<code>\nstatic void Main(string[] args)\n\
    \    {\n        Console.WriteLine(Calculate(\"2 + 3 * 4 - 5\", new string[] {\
    \ \"+\", \"*\", \"-\", \"/\" }));\n        Console.WriteLine(Calculate(\"2 * 3\
    \ - 4\", new string[] { \"+\", \"*\", \"/\" }));\n        Console.WriteLine(Calculate(\"\
    2 * 3 - 4 * 5\", new string[] { \"-\", \"*\", \"/\" }));\n        Console.WriteLine(Calculate\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2qxitu3k.d(51): Error: unterminated character constant

    /tmp/tmp2qxitu3k.d(51): Error: unterminated character constant

    /tmp/tmp2qxitu3k.d(52): Error: found `result` when expecting `:`

    /tmp/tmp2qxitu3k.d(52): Error: found `=` instead of statement

    /tmp/tmp2qxitu3k.d(61): Error: declaration expected, not `<`

    /tmp/tmp2qxitu3k.d(84): Error: unexpected `(` in declarator

    /tmp/tmp2qxitu3k.d(84): Error: unexpected `(` in declarator

    /tmp/tmp2qxitu3k.d(84): Error: basic type expected, not `"2 * 3 - 4"`

    /tmp/tmp2qxitu3k.d(84): Error: found `"2 * 3 - 4"` when expecting `)`

    /tmp/tmp2qxitu3k.d(84): Error: basic type expected, not `new`

    /tmp/tmp2qxitu3k.d(84): Error: found `new` when expecting `)`

    /tmp/tmp2qxitu3k.d(84): Error: no identifier for declarator `Console.WriteLine(Calculate(_error_),
    _error_)`

    /tmp/tmp2qxitu3k.d(84): Error: semicolon expected following function declaration

    /tmp/tmp2qxitu3k.d(84): Error: no identifier for declarator `string[]`

    /tmp/tmp2qxitu3k.d(84): Error: declaration expected, not `{`

    /tmp'
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i;\n    \n    for (i = 0; i < operator.length\
    \ - 1; i++) \n    {\n        result += (operator[i] == '+') ? operand[i] : -operand[i];\n\
    \    }\n    \n    return result;\n}\n</code>\nNow you can call do_algebra like\
    \ this:\n<code>\n// Initializing the two arrays \nlong[] operator = { '+', '*',\
    \ '-', '//', '**' };\nlong[] operand = { 2, 4, 6, 8, 10, 12 };\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_rgg3e74.d(40): Error: declaration expected, not `<`

    /tmp/tmp_rgg3e74.d(44): Error: unterminated character constant

    /tmp/tmp_rgg3e74.d(44): Error: unterminated character constant

    /tmp/tmp_rgg3e74.d(44): Error: unterminated character constant

    /tmp/tmp_rgg3e74.d(44): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_rgg3e74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operator.Length;\
    \ i++) {\n        long operand1 = operand[i - operator.Length];\n        long\
    \ operand2 = operand[i - 1];\n        long operator1 = operator[i];\n        long\
    \ operator2 = operator[i];\nunittest\n{\n    alias candidate = do_algebra;\n\n\
    \    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n   \
    \ assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevgaep9e.d(36): Error: found `unittest` instead of statement

    /tmp/tmpevgaep9e.d(44): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevgaep9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for (int i = 0; i < operand.Length;\
    \ i++) \n    {\n        for (int j = 0; j < operator.Length; j++) \n        {\n\
    \            switch (operator[j]) \n            {\n                case \"+\"\
    : result += operand[i]; break;\n                case \"-\": result -= operand[i];\
    \ break;\n                case \"*\": result *= operand[i]; break;\n         \
    \       case \"/\": result /= operand[i]; break;\n                case \"//\"\
    : result /= operand[i]; break;\n                case \"**\": result *= operand[i];\
    \ break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ljdirc_.d(31): Error: no property `Length` for type `long[]`

    /tmp/tmp0ljdirc_.d(33): Error: no property `Length` for type `string[]`

    /tmp/tmp0ljdirc_.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ljdirc_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    long power;\nunittest\n{\n    alias\
    \ candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L,\
    \ 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L,\
    \ 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphi_zyghf.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi_zyghf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    long result = 0;\n    for(int i = 0; i < operator.length;\
    \ i++)\n        result = operator[i] + operand[i] + result; \n    return result;\n\
    } \n/*\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpducptnv9.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpducptnv9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkf_6frt.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkf_6frt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160740
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\n    int j = 0;\n    long\
    \ temp = 0;\n    for(j = 0; j < operand.length; j++)\n    {\n        result =\
    \ result + (operand[j] * pow(operator[i], operand[j + 1])); // floor division\
    \ \n        i += 1;\n    }\n    return result;\n}\n// ======================================================================================================================\n\
    // do_algebra implementation\n// ======================================================================================================================\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxyj6a1e9.d(36): Error: template `std.math.pow` cannot deduce function
    from argument types `!()(string, long)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(6975):        `std.math.pow(F,
    G)(F x, G n) if (isFloatingPoint!F && isIntegral!G)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(7087):        `std.math.pow(F,
    G)(F x, G n) if (isIntegral!F && isIntegral!G)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(7144):        `std.math.pow(I,
    F)(I x, F y) if (isIntegral!I && isFloatingPoint!F)`

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(7201):        `std.math.pow(F,
    G)('
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    \n    // Check if all the operands have\
    \ the same amount of operators.\n    if (operator.Length != operand.Length - 1)\
    \ return -1;\n    \n    for (int i = 0; i < operator.Length; i++) \n    {\n  \
    \      if (operator[i] == '+') result = result + operand[i]; \n        else if\
    \ (operator[i] == '-') result = result - operand[i]; \n        else if (operator[i]\
    \ == '*') result = result * operand[i]; \n        else if (operator[i] == '/')\
    \ result = result / operand[i]; \n        else if (operator[i] == '//') result\
    \ = result / operand[i]; \n        else if (operator[i] == '**') result = result\
    \ ** operand[i]; \n        else return -1;\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 tags=c# |>\n<| a dscore=0 tags=c# |>\nA simple recursive function\
    \ would do\n<code>\nclass Program\n{\n    static void Main(string[] args)\n  \
    \  {\n        string[] operator = new string[] { \"+\", \"*\" };\n        long[]\
    \ operand = new long[] { 2, 3, 4, 5 };\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3inh413k.d(41): Error: unterminated character constant

    /tmp/tmp3inh413k.d(41): Error: unterminated character constant

    /tmp/tmp3inh413k.d(41): Error: found `result` when expecting `)`

    /tmp/tmp3inh413k.d(41): Error: found `=` instead of statement

    /tmp/tmp3inh413k.d(42): Error: unterminated character constant

    /tmp/tmp3inh413k.d(42): Error: unterminated character constant

    /tmp/tmp3inh413k.d(42): Error: found `result` when expecting `)`

    /tmp/tmp3inh413k.d(42): Error: found `=` instead of statement

    /tmp/tmp3inh413k.d(47): Error: declaration expected, not `<`

    /tmp/tmp3inh413k.d(57): Error: semicolon expected, not `{`

    /tmp/tmp3inh413k.d(57): Error: declaration expected, not `{`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3inh413k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int num_ops = operator.Length - 1;\n    int num_operands =\
    \ operand.Length - 1;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjsjt0pr.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjsjt0pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplk9h_1tb.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk9h_1tb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //TODO - complete this function\n    long result = 1;\n  \
    \  int i = 0, j = 0;\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsn7rsblo.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsn7rsblo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // initialize sum\n    long sum = 0;\n    // perform the algebra\n\
    \    for (int i = 0; i < operator.length; i++)\n    {\n        switch (operator[i])\n\
    \        {\n            case \"+\":\n                sum += operand[i];\n    \
    \            break;\n            case \"*\":\n                sum *= operand[i];\n\
    \                break;\n            case \"-\":\n                sum -= operand[i];\n\
    \                break;\n            case \"//\":\n                sum /= operand[i];\n\
    \                break;\n            case \"**\":\n                sum = (long)\
    \ (Math.pow(operand[i], sum));\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return sum;\n}\n/*\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpji6ju2_q.d(50): Error: C style cast illegal, use `cast(long)Math.pow(operand[i],
    sum)`

    /tmp/tmpji6ju2_q.d(58): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpji6ju2_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int count = 0;\n    long result = 0;\n    string sOperator;\n\
    \    string sOperand;\n    while (count < operand.length-1)\n    {\n        sOperand\
    \ = operand[count];\n        sOperator = operator[count];\n        result = (long)\
    \ eval(operand[count], sOperator, operand[count+1]);\n        operand[count+1]\
    \ = result;\n        count = count+2;\n    }\n    return result;\n}\n</code>\n\
    <|/ q tags=java,string dscore=0 |>\n<| c |>\nWhat does `eval` do? Can you share\
    \ the code?\n<|/ c |>\n<| c |>\nWe can't really help you without seeing what `eval`\
    \ does, but we also need to know how you call `eval`. If you are passing in a\
    \ String parameter that is actually a character code like `+` or `*`, then you\
    \ should be using the `charAt` method to retrieve the character from the String.\
    \ See [this answer](https://stackoverflow.com/a/4709183/5221149) for an example.\n\
    <|/ c |>\n<| c |>\nAnd what is the `operand.length` returning? Is it returning\
    \ the expected value? If so, are you sure that all characters in `operator` have\
    \ the same ASCII value? Maybe you're not converting them correctly.\n<|/ c |>\n\
    <| c |>\nI added the code to the original question. Thanks for the help!\n<|/\
    \ c |>\n<| c |>\nOkay, and what is the value of `sOperator` at the time of assignment?\n\
    <|/ c |>\n<| a |>\nI see that your eval function returns an int, so you might\
    \ want to try using the Character.digit method in your eval function instead,\
    \ which returns the int value of the first character of the string.\nExample:\n\
    <code>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppr2b54ry.d(38): Error: C style cast illegal, use `cast(long)eval(operand[count],
    sOperator, operand[count + 1])`

    /tmp/tmppr2b54ry.d(44): Error: declaration expected, not `<`

    /tmp/tmppr2b54ry.d(50): Error: unterminated character constant

    /tmp/tmppr2b54ry.d(53): Error: unterminated character constant

    /tmp/tmppr2b54ry.d(69): Error: declaration expected, not `assert`

    /tmp/tmppr2b54ry.d(70): Error: declaration expected, not `assert`

    /tmp/tmppr2b54ry.d(71): Error: declaration expected, not `assert`

    /tmp/tmppr2b54ry.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppr2b54ry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int length = operator.length - 1;\n    long result = 0;\n\
    \    long i = 0;\n    for(i = 0; i < length; i++){\n        if(operator[i] !=\
    \ '/'){\n            if(operand[i] < 0)\n                result -= operand[i];\n\
    \            else if(operand[i] == 0)\n                result -= operand[i];\n\
    \            else \n                result += operand[i];\n        }\n       \
    \ else if(operator[i] == '/'){\n            if(operand[length - 1] < 0)\n    \
    \            result /= operand[length - 1];\n            else if(operand[length\
    \ - 1] == 0)\n                result /= operand[length - 1];\n            else\
    \ \n                result /= operand[i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,java,divide-by-zero |>\n<| a dscore=1 tags=algorithm,java,divide-by-zero\
    \ |>\nAnother possible solution without recursion is as follows (in Java):\n<code>\n\
    private static long divide_without_div(String[] op, long[] nums) {\n    long result\
    \ = 0;\n    int i = 0;\n    while(i < op.length - 1) {\n        if(op[i] == '/'\
    \ && op[i + 1] == 0) {\n            result /= nums[--i];\n        } else if(op[i]\
    \ == '*' && op[i + 1] == 0) {\n            result *= nums[--i];\n        } else\
    \ {\n            result += nums[--i];\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a tags=algorithm,java,divide-by-zero |>\n<code>\npublic\
    \ static long evaluate(String[] operator, long[] operand){\n    long result=0;\n\
    \    int k=0;\n    for(int i=operator.length-1;i>=0;i--){\n        if(operator[i].equals(\"\
    +\")){\n            result+=operand[k++];\n        }\n        else if(operator[i].equals(\"\
    -\")){\n            result-=operand[k++];\n        }\n        else if(operator[i].equals(\"\
    *\")){\n            result*=operand[k++];\n        }\n        else if(operator[i].equals(\"\
    /\")){\n            if(operand[k]==0){\n                result/=operand[k-1];\n\
    \            }\n            else{\n                result/=operand[k];\n     \
    \       }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=algorithm,java,divide-by-zero |>\nThe following works too, and I think\
    \ it might be faster (though I haven't tried it yet):\n<code>\nlong doMath(string[]\
    \ operators, long[] values) {\n    long result = values[0];\n    for (int i =\
    \ 1; i < values.length; i++)\n        switch (operators[i - 1]) {\n          \
    \  case '+':\n                result += values[i];\n                break;\n \
    \           case '-':\n                result -= values[i];\n                break;\n\
    unittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\"\
    , \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\"\
    , \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L,\
    \ 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp43ph4ejx.d(53): Error: declaration expected, not `<`

    /tmp/tmp43ph4ejx.d(61): Error: declaration expected, not `while`

    /tmp/tmp43ph4ejx.d(64): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp43ph4ejx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int operator_index = 0;\nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps_cwq6lk.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps_cwq6lk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    // The number of operands minus one. \n    int operandsMinusOne\
    \ = operand.length - 1;\nunittest\n{\n    alias candidate = do_algebra;\n\n  \
    \  assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"\
    +\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"\
    *\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp88xhxb3b.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp88xhxb3b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    for(int i = 0; i < operand.length -\
    \ 1; i++)\n    {\n        switch(operator[i])\n        {\n            case(\"\
    +\"):\n                result += operand[i];\n                break;\n       \
    \     case(\"-\"):\n                result -= operand[i];\n                break;\n\
    \            case(\"*\"):\n                result *= operand[i];\n           \
    \     break;\n            case(\"//\"):\n                result /= operand[i];\n\
    \                break;\n            case(\"**\"):\n                result **=\
    \ operand[i];\n                break;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=arrays,java |>\n<| c |>\nThis answer is really great, thank\
    \ you so much for your help!\n<|/ c |>\n<| a dscore=2 |>\nYou can use java.util.Arrays.asList().\n\
    Here you go:\n<code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnvepyyl5.d(48): Error: expression expected, not `*=`

    /tmp/tmpnvepyyl5.d(48): Error: found `operand` when expecting `;` following statement

    /tmp/tmpnvepyyl5.d(54): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvepyyl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    //TODO: implement this\n    long result = 0;\n    for (int\
    \ i = 0; i < operator.length; ++i) \n    {\n        long operand1 = operand[i];\n\
    \        long operand2 = operand[i + 1];\n        switch (operator[i]) {\n   \
    \         case '+': result += operand1; break;\n            case '-': result -=\
    \ operand1; break;\n            case '*': result *= operand1; break;\n       \
    \     case '/': result /= operand1; break;\n            case '**': result **=\
    \ operand1; break;\n            default:\n                throw new Exception(\"\
    Invalid operator: \" + operator[i]);\n        }\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=java,algorithm |>\n<| c |>\nCould you please comment your\
    \ code? Why/how does it work? And what is the benefit of using the switch statement\
    \ over if/else statement? Thank you.\n<|/ c |>\n<| c |>\n: Please see the [doc](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html)\
    \ for `switch` statement. Also note the benefit of using switch statement over\
    \ `if-else` statement. `switch` statement is better than `if-else` statement because\
    \ it is simpler code. For example when you have `if` statements, you can easily\
    \ refactor the code with some IDE tools to make it simpler and more efficient.\n\
    <|/ c |>\n<| c |>\n: Please note that you can also have `switch` statement in\
    \ Java. It is just a Java sugar.\n<|/ c |>\n<| c |>\n: I have just edited my answer\
    \ with the code snippet for the implementation of your algorithm.\n<|/ c |>\n\
    <| c |>\nI didn't know that `switch` statement can be used in Java, thanks! I've\
    \ learned something new today. :)\n<|/ c |>\n<| a |>\nThis is for C and is probably\
    \ different for Java, but the algorithm is essentially the same (I'm assuming\
    \ that operator[] is an array of chars, and the first element is the operator):\n\
    <code>\nunittest\n{\n    alias candidate = do_algebra;\n\n    assert(candidate([\"\
    **\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\",\
    \ \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"\
    ], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7fqd2ac.d(41): Error: unterminated character constant

    /tmp/tmpq7fqd2ac.d(41): Error: unterminated character constant

    /tmp/tmpq7fqd2ac.d(41): Error: found `result` when expecting `:`

    /tmp/tmpq7fqd2ac.d(41): Error: expression expected, not `*=`

    /tmp/tmpq7fqd2ac.d(41): Error: found `operand1` when expecting `;` following statement

    /tmp/tmpq7fqd2ac.d(41): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpq7fqd2ac.d(48): Error: declaration expected, not `<`

    /tmp/tmpq7fqd2ac.d(63): Error: unterminated character constant

    /tmp/tmpq7fqd2ac.d(63): Error: unterminated character constant

    /tmp/tmpq7fqd2ac.d(66): Error: unterminated character constant

    /tmp/tmpq7fqd2ac.d(72): Error: declaration expected, not `assert`

    /tmp/tmpq7fqd2ac.d(73): Error: declaration expected, not `assert`

    /tmp/tmpq7fqd2ac.d(74): Error: declaration expected, not `assert`

    /tmp/tmpq7fqd2ac.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7fqd2ac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{ \n    int i = 0, j = 0;\n    int size = operand.length; // operand.size()\
    \ returns length of array\n    long res = 0;\n    long temp = 0; \nunittest\n\
    {\n    alias candidate = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"\
    +\"], [2L, 3L, 4L, 5L]) == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"],\
    \ [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L])\
    \ == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphjumr36a.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjumr36a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    int index = 0;\n    int i = 0;\n    int j = 0;\n    int op_index\
    \ = 0;\n    int op_index2 = 0;\n    int op_len = 0;\n    long result = 0;\n  \
    \  \n    op_len = operator.length;\n    \n    \n    \n    \n    while (index <\
    \ op_len)\n    {\n        switch (operator[index])\n        {\n            case\
    \ \"+\":\n                result = result + operand[index];\n                index++;\n\
    \                break;\n            case \"-\":\n                result = result\
    \ - operand[index];\n                index++;\n                break;\n      \
    \      case \"*\":\n                result = result * operand[index];\n      \
    \          index++;\n                break;\n            case \"/\":\n       \
    \         result = result / operand[index];\n                index++;\n      \
    \          break;\n            case \"%\":\n                result = result %\
    \ operand[index];\n                index++;\n                break;\n        \
    \    case \"^\":\n                result = result ^ operand[index];\n        \
    \        index++;\n                break;\n            case \"**\":\n        \
    \        result = result ** operand[index];\n                index++;\n      \
    \          break;\n            default:\n                return -1;\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthanks for\
    \ your answer! I've been struggling with it for a day and your solution was really\
    \ helpful. I did a complete re-write of the code, and now its working as expected!\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\nIn Java, there is nothing like for loops in\
    \ Python where you can iterate over an array.\nThe equivalent syntax for loops\
    \ in Python is the following:\n<code>\nfor i in [1, 2, 3]:\n    print(i)\n</code>\n\
    It will print out\n<code>\n1\n2\n3\n</code>\nThe equivalent syntax for a for loop\
    \ in C++ would be:\n<code>\nfor(int i = 1; i < 3; ++i){\n    std::cout << i <<\
    \ std::endl;\n}\n</code>\nHowever, in Java the equivalent syntax would be:\n<code>\n\
    for (int i = 1; i < 3; ++i) {\n    System.out.println(i);\n}\n</code>\nIn your\
    \ code, instead of doing the above for loops, you can iterate over each element\
    \ of the array. The following code should do the trick:\n<code>\nlong result =\
    \ do_algebra(operator, operand);\n</code>\n<|/ a tags=algorithm,java |>\n<| a\
    \ dscore=0 |>\nIt looks like you need a for loop. \n<code>\n    long[] operands\
    \ = new long[]{3,5,6,7};\n    String[] operators = new String[]{\"+\", \"-\",\
    \ \"*\", \"/\", \"%\", \"^\", \"**\"};\nunittest\n{\n    alias candidate = do_algebra;\n\
    \n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L]) == 37L);\n  \
    \  assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n    assert(candidate([\"\
    //\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60tp086_.d(81): Error: declaration expected, not `<`

    /tmp/tmp60tp086_.d(84): Error: unterminated character constant

    /tmp/tmp60tp086_.d(101): Error: no identifier for declarator `i`

    /tmp/tmp60tp086_.d(101): Error: declaration expected, not `<`

    /tmp/tmp60tp086_.d(101): Error: declaration expected, not `++`

    /tmp/tmp60tp086_.d(103): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60tp086_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given two arrays operator, and operand. The\
    \ first array has basic algebra operations, and \n    the second array is an array\
    \ of integers. Use the two given arrays to build the algebric \n    expression\
    \ and return the evaluation of this expression.\n\n    The basic algebra operations:\n\
    \    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator array is equal to the length\
    \ of operand array minus one.\n        Operand is an array of of non-negative\
    \ integers.\n        Operator array has at least one operator, and operand array\
    \ has at least two operands.\n\n    \n*/\nlong do_algebra(string[] operator, long[]\
    \ operand) \n{\n    long result = 0;\n    int i = 0;\nunittest\n{\n    alias candidate\
    \ = do_algebra;\n\n    assert(candidate([\"**\", \"*\", \"+\"], [2L, 3L, 4L, 5L])\
    \ == 37L);\n    assert(candidate([\"+\", \"*\", \"-\"], [2L, 3L, 4L, 5L]) == 9L);\n\
    \    assert(candidate([\"//\", \"*\"], [7L, 3L, 4L]) == 8L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplk9h_1tb.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk9h_1tb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660160741
