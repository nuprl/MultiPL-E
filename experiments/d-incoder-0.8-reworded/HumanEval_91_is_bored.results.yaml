language: d
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    \n    for (int i=0; i<S.length();\
    \ i++)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      \
    \      boredoms++;\n    }\n    return boredoms;\n}\n</cell>\n<cell>\n//checks\
    \ number of boredoms\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    Exercise 3.2: String searching and counting\nTask: Implement function count_substring(string\
    \ S, string pattern) that counts the number of times the substring pattern occurs\
    \ in string S. \nThe substring pattern is delimited by '.', '?' or '!'\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp25m03b31.d(26): Error: declaration expected, not `<`

    /tmp/tmp25m03b31.d(42): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(43): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(44): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(45): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(46): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(47): Error: declaration expected, not `assert`

    /tmp/tmp25m03b31.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25m03b31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164069
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int boredoms = 0;\n    string sentence;\n   \
    \ size_t i, k;\n    string word;\n    string boredom;\n    \n    for(i = S.length()\
    \ - 1; i >= 0; i--)\n    {\n        if (S[i] == '.') boredom += S[i];\n      \
    \  else if (S[i] == '?' || S[i] == '!')\n        {\n            boredom += S[i];\n\
    \            word = \"\";\n            k = i;\n            while(k >= 0)\n   \
    \         {\n                word += S[k];\n                k--;\n           \
    \ }\n            if (boredom == word)\n            {\n                boredoms\
    \ += 1;\n            }\n            boredom = \"\";\n        }\n    }\n    return\
    \ boredoms;\n}\n/* \n    Task 4: Write a function that takes a vector of strings\
    \ and prints\n    the unique number of words (all strings must consist of only\
    \ letters \n    and spaces) that appear in the strings.\n*/\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4pkiq3jj.d(23): Error: no property `length` for type `string`

    /tmp/tmp4pkiq3jj.d(25): Error: slice `boredom` is not mutable

    /tmp/tmp4pkiq3jj.d(28): Error: slice `boredom` is not mutable

    /tmp/tmp4pkiq3jj.d(33): Error: slice `word` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4pkiq3jj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    \n    int j = 0;\n    for(auto &w : S) \n   \
    \ {\n        if(w == '.' || w == '!' || w == '?')\n            ++j;\n    }\n \
    \   \n    return j;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp35xq082b.d(19): Error: basic type expected, not `&`

    /tmp/tmp35xq082b.d(19): Error: no identifier for declarator `_error_`

    /tmp/tmp35xq082b.d(19): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp35xq082b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    size_t pos = 0;\n    for\
    \ (string i : S) {\n        if ((pos == 0) || i == '!') \n            pos += 1;\n\
    \        else if (i == '?' || i == '.') \n            pos += 2;\n        else\
    \ {\n            result += pos;\n            pos = 0;\n        }\n    }\n    result\
    \ += pos;\n    return result;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7t82524.d(19): Error: found `i` when expecting `;` following statement

    /tmp/tmpu7t82524.d(19): Error: expression expected, not `:`

    /tmp/tmpu7t82524.d(19): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7t82524.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 1;\n    int j;\n    for (j = 0; j<S.length();\
    \ j++) {\n        if (S[j] == '.' || S[j] == '?' || S[j] == '!') {\n         \
    \   n = n*10;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpim7prm4z.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpim7prm4z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(int i = 0; i < S.length();\
    \ i++)\n    {\n        if(S[i] == 'I')\n        {\n            boredoms = boredoms\
    \ + 1;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu8pu1s5.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu8pu1s5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tfor (auto i = 0; i < S.length();\
    \ i++) {\n\t\tif (S[i] == '.' || (S[i] == '?' || S[i] == '!')) {\n\t\t\tboredoms\
    \ = boredoms + 1;\n\t\t}\n\t}\n\treturn boredoms;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl3uwqi18.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl3uwqi18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int boredoms = 0;\n    \n    foreach(string sentence,\
    \ split(S))\n    {\n        if (sentence==\"I\")\n            boredoms++;\n  \
    \  }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaln3am1.d(19): Error: function declaration without return type.
    (Note that constructors are always named `this`)

    /tmp/tmpzaln3am1.d(19): Error: no identifier for declarator `split(S)`

    /tmp/tmpzaln3am1.d(19): Error: found `)` when expecting `;`

    /tmp/tmpzaln3am1.d(24): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaln3am1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long counter = 0;\n    for (long i = 0; i < S.length();\
    \ i += 1)\n    {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n   \
    \     {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe4938wsg.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe4938wsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num_boredoms = 0;\n    \n    foreach(auto\
    \ word, split(S, ' '))\n    {\n        if(word == \"I\")\n        {\n        \
    \    num_boredoms += 1;\n        }\n    }\n    \n    return num_boredoms;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164069
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong result = 0L;\n\tfor(int i = 0 ; i < S.length()\
    \ ; i++) \n\t{\n\t\tif(S[i] == '.' || S[i] == '?' || S[i] == '!') \n\t\t{\n\t\t\
    \tresult = result + 1L;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n  \
    \  alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiayedndz.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiayedndz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ret = 0;\n    for (auto iter = S.cbegin();\
    \ iter != S.cend(); ++iter) {\n        if (*iter == '.') ++ret;\n        else\
    \ if (*iter == '?') ++ret;\n        else if (*iter == '!') ++ret;\n        else\
    \ break;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcolcdj_.d(18): Error: no property `cbegin` for type `string`

    /tmp/tmpjcolcdj_.d(18): Error: no property `cend` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcolcdj_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ans = 0;\n    map<string,long> boredom;\n\
    \    boredom[\"I\"] = 0;\n    map<string,long>::iterator it = boredom.begin();\n\
    \    for(;it!=boredom.end();++it) {\n        string word = it->first;\n      \
    \  if(S.substr(0,word.length())==word) {\n            ans += it->second;\n   \
    \     }\n    }\n    return ans;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you! This worked for me. Also thanks for providing the explanation of how this\
    \ code works\n<|/ c |>\n<| c |>\nHi, I have tried your solution, and it seems\
    \ to work on small inputs but on larger inputs it gives me the wrong answer. For\
    \ example, input is: `\"hello world, hello world, hello world hello\"` and the\
    \ correct answer is 5 (which is what I get). If I try to use larger inputs like\
    \ `inputs = \"hello world hello world hello world\"` the output is still 5.\n\
    <|/ c |>\n<| c |>\nYes, I noticed this after I tested on smaller inputs. The problem\
    \ is that the boredoms are being checked from left to right, so once a boredom\
    \ is found, it won't be checked for the next one. Since `hello world` starts with\
    \ `h`, it is not counted as a boredom, because `hello world` has a boredom of\
    \ `h i l l o` but `hello world` doesn't have it.\n<|/ c |>\n<| c |>\nIt works\
    \ in that case, but it's still incorrect if you include \"a\" \"the\" etc. There\
    \ are some cases where a boredom starts with an \"a\" but this doesn't happen\
    \ in this problem and so I believe that solution wouldn't work. I think this problem\
    \ can be solved by changing the string comparison to look for uppercase letters\
    \ as well as lowercase. Would that be right?\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I will edit the code to do so, but that would make the code a little\
    \ complicated.\n<|/ c |>\n<| a |>\nThe solution with two nested loops will work,\
    \ but a more efficient solution exists. To find the boredoms, we only need to\
    \ count the boredoms that begin with the first letter of the sentence. To do this,\
    \ we only need to look for the first letter. We'll first construct a map from\
    \ the first letter to the number of boredoms that begin with that letter. Then\
    \ we loop through the sentence, checking if the first letter of the first word\
    \ is a key in the map. If it is, we can increment the number of bo\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgw0uc35r.d(18): Error: found `>` when expecting `.` following long

    /tmp/tmpgw0uc35r.d(20): Error: found `>` when expecting `.` following long

    /tmp/tmpgw0uc35r.d(20): Error: found `:` when expecting identifier following `long`.

    /tmp/tmpgw0uc35r.d(20): Error: found `:` when expecting `;` following statement

    /tmp/tmpgw0uc35r.d(22): Error: use `.` for member lookup, not `->`

    /tmp/tmpgw0uc35r.d(24): Error: use `.` for member lookup, not `->`

    /tmp/tmpgw0uc35r.d(29): Error: declaration expected, not `<`

    /tmp/tmpgw0uc35r.d(38): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(38): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(41): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(41): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(41): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(47): Error: unterminated character constant

    /tmp/tmpgw0uc35r.d(52): Error: declaration expected, not `assert`

    /tmp/tmpgw0uc35r.d(53): Error: declaration expected, not `assert`

    /tmp'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int boredom_cnt=0;\n    for(size_t i=0; i<S.length();\
    \ ++i)\n    {\n        if(S[i]=='I'&&S[i+1]=='O'&&S[i+2]=='R'&&S[i+3]=='E')\n\
    \            boredom_cnt++;\n    }\n    return boredom_cnt;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7s5khm8.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7s5khm8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long count = 0;\n  for (auto iter = S.rbegin();\
    \ iter != S.rend(); ++iter)\n    {\n      if (*iter == '.' || *iter == '?' ||\
    \ *iter == '!')\n\tcount++;\n    }\n  return count;\n}\n#endif\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv70z0mo1.d(25): Error: declaration expected, not `#`

    /tmp/tmpv70z0mo1.d(30): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(31): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(32): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(33): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(34): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(35): Error: declaration expected, not `assert`

    /tmp/tmpv70z0mo1.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv70z0mo1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong i, j, n, count = 0, n1 = 0;\n\tvector<string>\
    \ v;\n\tstring word = S;\n\t\n\tv.push_back(word);\n\t\n\twhile((v.size() > 0)\
    \ && v.back() != \"I\")\n\t{\n\t\tv.erase(v.back());\n\t}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqvavc0pa.d(18): Error: found `>` when expecting `;` following statement

    /tmp/tmpqvavc0pa.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqvavc0pa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\t\n\tint i,j,k;\n\tint bored = 0;\n\tint boredom\
    \ = 0;\n\t\n\tk = 0;\n\tfor(i=0;i<S.length();i++) \n\t{\n\t\tif(S[i] == '.')\n\
    \t\t{\n\t\t\tfor(j = i;j<S.length();j++)\n\t\t\t{\n\t\t\t\tif(S[j] == '.') \n\t\
    \t\t\t{\n\t\t\t\t\tfor(k = j;k<S.length();k++) \n\t\t\t\t\t{\n\t\t\t\t\t\tif(S[k]\
    \ == ' ' || S[k] == '?' || S[k] == '!')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbored++;\n\
    \t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse \n\t\t\t\t\t\t\tbored =\
    \ 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse bored = 0;\n\t\t\t\
    }\n\t\t}\n\t\telse bored = 0;\n\t}\n\t\n\treturn bored; \n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdj6_vcat.d(23): Error: no property `length` for type `string`

    /tmp/tmpdj6_vcat.d(27): Error: no property `length` for type `string`

    /tmp/tmpdj6_vcat.d(31): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdj6_vcat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong bored = 0;\n\tfor (int i = 0; i <= S.length()\
    \ - 2; i++)\n\t{\n\t\tif (S[i] == '.' && S[i + 1] == '?' && S[i + 2] == '!')\n\
    \t\t{\n\t\t\tbored++;\n\t\t}\n\t}\n\treturn bored;\n}\n</cell>\n<code language=.net-csharp>\n\
    string input;\nlong bored = 0;\nwhile (true)\n{\n\tinput = Console.ReadLine();\n\
    \tif (string.IsNullOrWhiteSpace(input))\n\t{\n\t\tbreak;\n\t}\n\tbored = is_bored(input);\n\
    }\nConsole.WriteLine(bored);\n</cell>\n<text>\nExercise 1: Count word lengths\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8n4cm4oq.d(27): Error: declaration expected, not `<`

    /tmp/tmp8n4cm4oq.d(31): Error: declaration expected, not `while`

    /tmp/tmp8n4cm4oq.d(34): Error: declaration expected, not `if`

    /tmp/tmp8n4cm4oq.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8n4cm4oq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    for (auto i = S.begin();\
    \ i != S.end(); i++)\n    {\n        if (i[0] == 'I')\n        {\n           \
    \ boredom++;\n        }\n    }\n    return boredom;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgaywziou.d(18): Error: no property `begin` for type `string`

    /tmp/tmpgaywziou.d(18): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgaywziou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    foreach (char c in S)\n\
    \        if (c == '.' || c == '?' || c == '!')\n            count++;\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your response but\
    \ i dont want to use for. I am supposed to use for each loop and i also want to\
    \ avoid using string's functions\n<|/ c |>\n<| c |>\n\"I am supposed to use for\
    \ each loop\" Then you should probably ask that as a separate question, because\
    \ that sounds like a homework question that would probably benefit from some explanation\
    \ from your teacher.\n<|/ c |>\n<| c |>\n\"I want to use for\" Then it would be\
    \ helpful to post what you've tried.\n<|/ c |>\n<| c |>\n\"I want to avoid using\
    \ string's functions\" Then you should ask that as a separate question, because\
    \ that sounds like a homework question that would probably benefit from some explanation\
    \ from your teacher.\n<|/ c |>\n<| a dscore=0 tags=algorithm,java,c++,c,string\
    \ |>\nOne simple way to solve this would be to first split your string into an\
    \ array of characters, then iterate through those characters to check if they\
    \ are a bored character. Like so:\n<code>\n public int bored(String s) {\n   int\
    \ bored = 0;\n   for (char c : s.toCharArray())\n     if (bored == 0)\n      \
    \ if (c == '.' || c == '?' || c == '!')\n         bored++;\n   return bored;\n\
    \ }\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. I am not supposed to use\
    \ any string functions. The teacher said that he wants us to use for each loop\
    \ and he also said that he doesnt want to use charAt()\n<|/ c |>\n<| c |>\nAh...\
    \ then you have to implement your own `for` loop. I'm not that good at Java so\
    \ I can't give you a code example, but in pseudocode it'll look something like\
    \ this:\n`for (int i = 0; i < length; i++) char c = arr[i];`\n<|/ c |>\n<| c |>\n\
    Well, you can use a `for` loop as such, but you'll need to use an array (or a\
    \ string). Once you have that array in place, you can use a `for` loop to iterate\
    \ through the array and check each element against `'.'`, `'?'`, `'!'`. I'll edit\
    \ my answer to include a simple example.\n<|/ c |>\n<| a tags=algorithm,java,c++,c,string\
    \ |>\nIt can be done by following code as well.\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxp8kw7zl.d(18): Error: found `in` when expecting `;`

    /tmp/tmpxp8kw7zl.d(23): Error: declaration expected, not `<`

    /tmp/tmpxp8kw7zl.d(26): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(32): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(42): Error: declaration expected, not `for`

    /tmp/tmpxp8kw7zl.d(46): Error: declaration expected, not `return`

    /tmp/tmpxp8kw7zl.d(47): Error: unrecognized declaration

    /tmp/tmpxp8kw7zl.d(54): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(54): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(54): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(58): Error: unterminated character constant

    /tmp/tmpxp8kw7zl.d(58): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp8kw7zl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    foreach(char a in S)\
    \ {\n        if (a == '.') boredoms += 1;\n        else if (a == '?') boredoms\
    \ += 1;\n        else if (a == '!') boredoms += 1;\n        else boredoms += 0;\n\
    \    }\n    return boredoms;\n}\n</cell>\n<cell>\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtvie7yf.d(18): Error: found `in` when expecting `;`

    /tmp/tmprtvie7yf.d(26): Error: declaration expected, not `<`

    /tmp/tmprtvie7yf.d(32): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(33): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(34): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(35): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(36): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(37): Error: declaration expected, not `assert`

    /tmp/tmprtvie7yf.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtvie7yf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string delimiter = \"\
    . ? !\";\n    \n    for(int i = 0; i< length(S); i++)\n    {\n        if(S[i]\
    \ == \"i\")\n            boredoms = boredoms + 1;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebxfvz9_.d(20): Error: undefined identifier `length`

    /tmp/tmpebxfvz9_.d(22): Error: incompatible types for `(S[cast(ulong)i]) == ("i")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebxfvz9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto n = count_boredom(S.begin(),S.end(),0);\n\
    \    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdh0u8z6.d(17): Error: undefined identifier `count_boredom`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdh0u8z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tsize_t start = 0;\n\tsize_t\
    \ end = 0;\n\tsize_t i = 0;\n\tstring delimiters = \" .,?!\";\n\t\n\twhile (start\
    \ <= S.size())\n\t{\n\t\tstart = S.find(\"I\", start);\n\t\tend = S.find(\".\"\
    , start);\n\t\t\n\t\tif (end == string::npos)\n\t\t\tend = S.size();\n\t\t\n\t\
    \ti++;\n\t\t\n\t\tif (start == string::npos)\n\t\t\tcontinue;\n\t\t\n\t\tif (S[start]\
    \ == 'I')\n\t\t\tboredoms += 1;\n\t\t\n\t\tstart = end + 1;\n\t}\n\t\n\treturn\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c3hpibb.d(28): Error: found `:` when expecting `)`

    /tmp/tmp7c3hpibb.d(28): Error: found `:` instead of statement

    /tmp/tmp7c3hpibb.d(33): Error: found `:` when expecting `)`

    /tmp/tmp7c3hpibb.d(33): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c3hpibb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count_occurrences(S,\"(?i)^I\");\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn8d5o6bf.d(17): Error: undefined identifier `count_occurrences`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn8d5o6bf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return length(S) - S.indexOf(\".\") + S.indexOf(\"\
    ?\");\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9do4139.d(17): Error: undefined identifier `length`

    /tmp/tmpg9do4139.d(17): Error: no property `indexOf` for type `string`

    /tmp/tmpg9do4139.d(17): Error: no property `indexOf` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9do4139.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long boredoms = 0;\n  string currentLine;\n  long\
    \ currentLineLength;\n  string::iterator it;\n  long currentLineBoredoms = 0;\n\
    \  \n  for (it = S.begin(); it != S.end(); it++)\n  {\n    currentLine = *it;\n\
    \    currentLineLength = currentLine.length();\n    \n    if (currentLineLength\
    \ > 0)\n    {\n      if (currentLine[0] == 'I')\n      {\n        boredoms = boredoms\
    \ + 1;\n        currentLineBoredoms = boredoms;\n      }\n    }\n  }\n  \n  return\
    \ boredoms;\n}\n</cell>\n<cell>\n%timeit is_bored(\"Hello world\")\n</cell>\n\
    <cell>\n%timeit is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nProblem 2: How many syllables (words) are in \"The sun is\
    \ shining?\"\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_ffxfsj.d(20): Error: use `.` for member lookup, not `::`

    /tmp/tmpj_ffxfsj.d(40): Error: declaration expected, not `<`

    /tmp/tmpj_ffxfsj.d(53): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(54): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(55): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(56): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(57): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(58): Error: declaration expected, not `assert`

    /tmp/tmpj_ffxfsj.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_ffxfsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    string token = stringToTokens(S);\n\
    \    for(uint i=0; i<token.size(); ++i)\n    {\n        if(token[i][0] == 'I')\n\
    \        {\n            bored++;\n        }\n    }\n    return bored;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work for the sentence \"I love\
    \ this weather\". Isn't the answer 2L?\n<|/ c |>\n<| c |>\nIt does work. See the\
    \ edit I just made to my answer.\n<|/ c |>\n<| c |>\nAh ha. I missed the part\
    \ about not counting \"I love this weather\" as a boredom :). Thanks for the clarification!\n\
    <|/ c |>\n<| c |>\nYour `is_bored` implementation does not correctly recognize\
    \ sentences starting with punctuation. For example, `is_bored(\"This was a bore!\"\
    )` should return `0`, not `1`.\n<|/ c |>\n<| c |>\nBut it does recognize `The\
    \ sky is blue. The sun is shining. I love this weather` as the boredom `1` according\
    \ to OP's rules. It also recognizes `the sky is blue. The sun is shining. I love\
    \ this weather because` as the boredom `2`.\n<|/ c |>\n<| a |>\nMy version doesn't\
    \ use a recursive call and uses iterative techniques:\n<code>\nlong long boredoms(string\
    \ s) {\n    int n = s.length();\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgnix68uz.d(28): Error: declaration expected, not `<`

    /tmp/tmpgnix68uz.d(31): Error: unterminated character constant

    /tmp/tmpgnix68uz.d(31): Error: unterminated character constant

    /tmp/tmpgnix68uz.d(43): Error: unterminated character constant

    /tmp/tmpgnix68uz.d(46): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnix68uz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long i;\n  for (i = 0; i < length(S); ++i) \n \
    \ {\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      return 1L;\n  }\n\
    \  return 0L;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvy3pnwnq.d(18): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvy3pnwnq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for (int i = 0; i < S.length();\
    \ i++)\n    {\n        if (S[i] == 'I' || S[i] == '.')\n        {\n          \
    \  boredoms += 1;\n        }\n    }\n    return boredoms;\n}\n</cell>\n<cell>\n\
    %pycat solution.py\n</cell>\n<cell>\nfrom nose.tools import assert_equal\nassert_equal(is_bored(\"\
    Hello world\"), 0)\nassert_equal(is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\"), 1)\n</cell>\n<text>\nThe Solution Space\nThe main part\
    \ of our program is inside is_bored(). We want to give it a lot of input data\
    \ and see what we get. That means we want to see what different output values\
    \ might look like. To do this we write a new version of is_bored() called count_boredoms().\
    \ This function takes one argument, which is the data set we want to count. Since\
    \ we don't want to run the program too long, we don't want to run it for too long.\
    \ How do we stop it running for too long?\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpadu2x9fj.d(27): Error: declaration expected, not `<`

    /tmp/tmpadu2x9fj.d(38): Error: unterminated character constant

    /tmp/tmpadu2x9fj.d(38): Error: unterminated character constant

    /tmp/tmpadu2x9fj.d(43): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(44): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(45): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(46): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(47): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(48): Error: declaration expected, not `assert`

    /tmp/tmpadu2x9fj.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpadu2x9fj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom_count = 0;\n    foreach(S) {\n \
    \       if(S[0] == 'I') {\n            boredom_count++;\n        }\n    }\n  \
    \  return boredom_count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7wa7ukvb.d(18): Error: no identifier for declarator `S`

    /tmp/tmp7wa7ukvb.d(18): Error: found `)` when expecting `;`

    /tmp/tmp7wa7ukvb.d(23): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7wa7ukvb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0L;\n    \n    for (int i = 0; i\
    \ < (int)S.size(); ++i) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n            bored++;\n        }\n    }\n    return bored;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps7q982_2.d(19): Error: C style cast illegal, use `cast(int)S.size()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7q982_2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for(auto c: S)\n    {\n\
    \        if(c =='.' ||\n            c=='?' ||\n            c=='!')\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpie19wj.d(18): Error: no identifier for declarator `c`

    /tmp/tmpdpie19wj.d(18): Error: expression expected, not `:`

    /tmp/tmpdpie19wj.d(18): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpie19wj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong cnt = 0;\n\tfor (auto x : S) \n\t\tif (x ==\
    \ '.') \n\t\t\tcnt += 1;\n\t\telse if (x == '?') \n\t\t\tcnt += 1;\n\t\telse if\
    \ (x == '!') \n\t\t\tcnt += 1;\n\treturn cnt;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduy59dx8.d(18): Error: no identifier for declarator `x`

    /tmp/tmpduy59dx8.d(18): Error: expression expected, not `:`

    /tmp/tmpduy59dx8.d(18): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduy59dx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    for(int i = 0; i < S.length();\
    \ i++) {\n        if(S[i] != '.' && S[i] != '?' && S[i] != '!')\n            bored++;\n\
    \    }\n    return bored;\n}\n</code>\n<|/ a |>\n<| c |>\nAren't you supposed\
    \ to use `std::cin` to read input from stdin?\n<|/ c |>\n<| c |>\nyes, `cin` is\
    \ better than `getline`, but i thought the question was about `string` input.\n\
    <|/ c |>\n<| c |>\n`getline` doesn't return a `std::string` so it doesn't help.\
    \  It is actually a C++ function that reads a line from a `std::istream`.  `getline`\
    \ will do that for you if you pass it a `std::istream&`.\n<|/ c |>\n<| a |>\n\
    I'm guessing you are new to C++, but I thought I'd just throw my solution out\
    \ there. Since you're working with strings, I figured you might want to try something\
    \ simple to start with. The idea is to use a char[] and an int to keep track of\
    \ your boredoms counter.\n<code>\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ve3xkzs.d(24): Error: declaration expected, not `<`

    /tmp/tmp6ve3xkzs.d(27): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(33): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(33): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(36): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(36): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(36): Error: unterminated character constant

    /tmp/tmp6ve3xkzs.d(42): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(43): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(44): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(45): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(46): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(47): Error: declaration expected, not `assert`

    /tmp/tmp6ve3xkzs.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ve3xkzs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if (S.find(\"I\") != 0) return 0L;\n    return\
    \ std.count(S,\"I\");\n}\n</code>\n<|/ a tags=algorithm,performance,c++ dscore=1\
    \ |>\n<| a |>\nI believe this is one of the rare cases where a hash table should\
    \ be used. \nFirst, construct a hash table from the array of words, using each\
    \ word as the key into the hash table. \nNext, scan the string for \"I\" character\
    \ and increment the value in the hash table for each key that equals I. \nFinally,\
    \ return the size of the hash table. \nHere's some pseudocode:\n<code>\nhashTable\
    \ = CreateHashTable(words)\nsize = 0\nfor each word w in words:\n    if hashTable[w]\
    \ == 'I':\n        size += 1\nreturn size\n</code>\n<|/ a dscore=1 tags=algorithm,performance,c++\
    \ |>\n<| a tags=algorithm,performance,c++ |>\nI would do it the following way\
    \ (assuming that the word array is sorted):\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <vector>\n#include <algorithm>\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj7wk5wd9.d(20): Error: declaration expected, not `<`

    /tmp/tmpj7wk5wd9.d(27): Error: unterminated character constant

    /tmp/tmpj7wk5wd9.d(48): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(49): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(50): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(51): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(52): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(53): Error: declaration expected, not `assert`

    /tmp/tmpj7wk5wd9.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7wk5wd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int boredoms = 0;\n    for(uint i = 0; i < S.length();\
    \ i++)\n    {\n        if(S[i] == '.')\n        {\n            if(S[i+1] == '?'\
    \ || S[i+1] == '!')\n            {\n                boredoms += 1;\n         \
    \   }\n        }\n    }\n    return boredoms;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| a tags=string,c++,arrays |>\nA solution in O(n) time using std::next_permutation\
    \ function from <algorithm> header. \n<code>\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuitd2bqv.d(30): Error: declaration expected, not `<`

    /tmp/tmpuitd2bqv.d(39): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(40): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(41): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(42): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(43): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(44): Error: declaration expected, not `assert`

    /tmp/tmpuitd2bqv.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuitd2bqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint counter=0;\n\tfor (int i=0;i<S.size();++i)\n\
    \t{\n\t\tchar c = S[i];\n\t\tif (c=='I')\n\t\t\tcounter++;\n\t}\n\treturn counter;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dkga20h.d(18): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dkga20h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint i, count = 0;\n\tfor(i = 0; i < S.size(); i++)\n\
    \t{\n\t\tif (S[i] == 'I') count++;\n\t\tif (S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!') count++;\n\t\tif (S[i] == '.' && S[i+1] == '.') count++;\n\t}\n\treturn\
    \ count;\n}\n/* \n    These are the tests we use to determine if the solution\
    \ is correct.\n    You can add your own at the bottom, but they are otherwise\
    \ not editable!\n*/\n#define false 1\n#define true 0\n#define unreachable() do\
    \ { printf(\"[FATAL] unreachable\\n\"); exit(2); } while (0)\n#define isdigit(c)\
    \ ((c) >= '0' && (c) <= '9')\n#define isprint(c) \\\n\t(isascii(c) || (c) == '\
    \ ' || c == '\\n' || c == '\\t' || c == '\\v' || c == '\\f'|| c == '\\r'|| c ==\
    \ '\\v')\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l7qam1d.d(30): Error: declaration expected, not `#`

    /tmp/tmp5l7qam1d.d(32): Error: unexpected `(` in declarator

    /tmp/tmp5l7qam1d.d(32): Error: basic type expected, not `2`

    /tmp/tmp5l7qam1d.d(32): Error: found `2` when expecting `)`

    /tmp/tmp5l7qam1d.d(32): Error: no identifier for declarator `exit(_error_)`

    /tmp/tmp5l7qam1d.d(32): Error: semicolon expected following function declaration

    /tmp/tmp5l7qam1d.d(32): Error: declaration expected, not `)`

    /tmp/tmp5l7qam1d.d(32): Error: unrecognized declaration

    /tmp/tmp5l7qam1d.d(34): Error: character ''\'' is not a valid token

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l7qam1d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // TODO: implement the count function\n    return\
    \ 0L;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4ygl5k5d.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp4ygl5k5d.__unittest_L20_C1() [0x427a7a]

    ??:? void tmp4ygl5k5d.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  int result=0;\n  for (int i=0;i<S.size();i++)\n\
    \  {\n    if(S[i]==\"I\")\n    {\n      result++;\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpalos9wht.d(18): Error: no property `size` for type `string`

    /tmp/tmpalos9wht.d(20): Error: incompatible types for `(S[cast(ulong)i]) == ("I")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalos9wht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    for(int i = 0; i < S.length();\
    \ i++)\n    {\n        if (S[i] == \"i\")\n        {\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1bzx07s.d(18): Error: no property `length` for type `string`

    /tmp/tmpy1bzx07s.d(20): Error: incompatible types for `(S[cast(ulong)i]) == ("i")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1bzx07s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 1L;\n    string temp;\n    temp\
    \ = S;\n    while(!temp.empty()) {\n        if(temp[0] == 'I') {\n           \
    \ temp += '.';\n        }\n        else if(temp[0] == '?') {\n            temp\
    \ += '.';\n        }\n        else if(temp[0] == '!') {\n            temp += '.';\n\
    \        }\n        else {\n            temp += '.';\n        }\n        result\
    \ += 1;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c++,string |>\n<| c\
    \ |>\nThis doesn't address the question of how to count all boredoms\n<|/ c |>\n\
    <| a |>\n<code>\n#include <string>\n#include <iostream>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpazf5psy_.d(37): Error: declaration expected, not `<`

    /tmp/tmpazf5psy_.d(40): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazf5psy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  \n  long boredoms = 0;\n  bool isTrue;\n  \n  foreach(char,S)\n\
    \    {\n      if (isTrue=std.string.startsWith(\"I\",S))\n        {\n        \
    \  boredoms++;\n        }\n    }\n  \n  return boredoms;\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe985mt8g.d(21): Error: no identifier for declarator `char`

    /tmp/tmpe985mt8g.d(21): Error: no identifier for declarator `S`

    /tmp/tmpe985mt8g.d(21): Error: found `)` when expecting `;`

    /tmp/tmpe985mt8g.d(29): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe985mt8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint i;\n\tint count_boredom = 0;\n\t\n\tvector<string>\
    \ boredom;\n\tboredom.push_back(\"I\");\n\t\n\tfor(i = 0; i< S.length(); i++){\n\
    \t\tif(boredom[0]== S[i]){\n\t\t\tboredom.push_back(S[i]);\n\t\t}\n\t\t\n\t\t\
    if(S[i] == '.'){\n\t\t\tboredom.push_back(S[i]);\n\t\t}\n\t\tif(S[i] == '?'){\n\
    \t\t\tboredom.push_back(S[i]);\n\t\t}\n\t\tif(S[i] == '!'){\n\t\t\tboredom.push_back(S[i]);\n\
    \t\t}\n\t}\n\t\n\t\n\tfor(i = 0 ; i<S.length(); i++){\n\t\tif(S[i] == '.'){\n\t\
    \t\tcount_boredom += 1;\n\t\t}\n\t}\n\treturn count_boredom;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg767fcmt.d(20): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg767fcmt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int cnt=0;\n    for(int i=0;i<S.length();i++)\n\
    \    {\n        if(S[i]=='I')\n        {\n            cnt++;\n        }\n    }\n\
    \    return cnt;\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP wants the length of the\
    \ boredom in the string, not how many times \"I\" appears in that string. For\
    \ example, this code would return 1 for \"The sky is blue. The sun is shining.\
    \ I love this weather\", while it would be 0 for \"Hello world\".\n<|/ c |>\n\
    <| c |>\n: yes. I fixed it.\n<|/ c |>\n<| c |>\nI did try your code but I am getting\
    \ a lot of errors. I have updated the code and the errors. Can you please have\
    \ a look and help me?\n<|/ c |>\n<| a dscore=0 |>\nIt is a bit of a hack but this\
    \ should work\n<code>\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmagh2zr.d(27): Error: declaration expected, not `<`

    /tmp/tmpxmagh2zr.d(45): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(46): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(47): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(48): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(49): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(50): Error: declaration expected, not `assert`

    /tmp/tmpxmagh2zr.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmagh2zr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    \n    long boredoms = 0;\n    for(int i=0; i<S.length();\
    \ i++)\n    {\n        if(S[i]==\"I\")\n        {\n            boredoms++;\n \
    \       }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7t8ukvy_.d(19): Error: no property `length` for type `string`

    /tmp/tmp7t8ukvy_.d(21): Error: incompatible types for `(S[cast(ulong)i]) == ("I")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7t8ukvy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if ( S.empty() )\n        return 0;\n    \n \
    \   size_t len = S.size();\n    \n    // Search for \"I\" start symbol\n    for\
    \ ( size_t i = 0; i < len; ++i )\n    {\n        if ( S[i] == 'I' )\n        {\n\
    \            // Found it, now search for \".\", \"?\", or \"!\"\n            if\
    \ ( S[i + 1] == '.' )\n            {\n                if ( S[i + 2] == '?' )\n\
    \                {\n                    if ( S[i + 3] == '!' )\n             \
    \       {\n                        ++bored_count;\n                    }\n   \
    \                 else\n                    {\n                        return\
    \ 0L;\n                    }\n                }\n                else\n      \
    \          {\n                    return 0L;\n                }\n            }\n\
    \            else\n            {\n                return 0L;\n            }\n\
    \        }\n    }\n    \n    return 0L;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphitrez93.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphitrez93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count=0;\n    int i=0;\n    while(S.length>i)\n\
    \    {\n        if(S[i]=='I')\n        {\n            if(S[i+1]=='O'||S[i+1]=='I'||S[i+1]=='A'||S[i+1]=='E'||S[i+1]=='E')\n\
    \            {\n                count++;\n            }\n            i+=2;\n \
    \       }\n        else \n        {\n            i++;\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4l4m7oz8.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmp4l4m7oz8.__unittest_L36_C1() [0x427be2]

    ??:? void tmp4l4m7oz8.__modtest() [0x427c74]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc8f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab22]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcb5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430164]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc41]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]

    ??:? runModuleUnitTests [0x42ba65]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283b8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // TODO: Write code here\n    long num = 0;\n\
    \    for(int i = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'i' || S[i]\
    \ == 'I' || S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n          \
    \  num ++;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ws2vx0d.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ws2vx0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0L;\n    foreach (char c in S)\n\
    \    {\n        if (c == '.')\n        {\n            if (boredoms == 0) boredoms\
    \ = 1L;\n            else\n            {\n                boredoms *= 2L;\n  \
    \          }\n        }\n        else if (c == '?')\n        {\n            boredoms\
    \ *= 2L;\n        }\n        else if (c == '!')\n        {\n            boredoms\
    \ *= 3L;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeiis8pc9.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeiis8pc9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int length = string.length(S);\n\
    \    bool boredom_found = false;\n    \n    for(int i = 0; i < length; i++)\n\
    \    {\n        string character = S[i];\n        \n        if(character == '.'\
    \ || character == '?' || character == '!')\n        {\n            boredom_found\
    \ = true;\n            boredoms = boredoms + 1L;\n        }\n    }\n    \n   \
    \ if(boredom_found == true)\n    {\n        return boredoms;\n    }\n    else\n\
    \    {\n        return 0L;\n    }\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuspkepcy.d(18): Error: no property `length` for type `string`

    /tmp/tmpuspkepcy.d(23): Error: cannot implicitly convert expression `S[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpuspkepcy.d(25): Error: incompatible types for `(character) == (''.'')`:
    `string` and `char`

    /tmp/tmpuspkepcy.d(25): Error: incompatible types for `(character) == (''?'')`:
    `string` and `char`

    /tmp/tmpuspkepcy.d(25): Error: incompatible types for `(character) == (''!'')`:
    `string` and `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuspkepcy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i;\n    \n    long bored = 0;\n    \n   \
    \ for (i = 0; S[i] != '\\0'; ++i)\n    {\n        if (S[i] == '.')\n        {\n\
    \            if (S[i-1] == 'I')\n            {\n                ++bored;\n   \
    \         }\n        }\n    }\n    \n    return bored;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7pnxzwia.d(21): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427efe]

    ??:? long tmp7pnxzwia.is_bored(immutable(char)[]) [0x427a2a]

    ??:? void tmp7pnxzwia.__unittest_L34_C1() [0x427ad3]

    ??:? void tmp7pnxzwia.__modtest() [0x427bd0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa51]

    ??:? runModuleUnitTests [0x42b9bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num = 0;\n    string boredoms[] = {\"I\"\
    , \".\", \"?\", \"!\"};\n    for (auto s : boredoms)\n    {\n        if (S.substr(0,\
    \ s.length()) == s)\n        {\n            num++;\n        }\n    }\n    return\
    \ num;\n}\n</code>\n<|/ a tags=performance,string,c++ dscore=2 |>\n<| c |>\nThanks,\
    \ I have implemented the code. The code was too long to post here. Is there a\
    \ way I can contact you via email?\n<|/ c |>\n<| c |>\n, there are plenty of online\
    \ forums that you can use.  Just search on here and on google for \"c++ string\
    \ split\"\n<|/ c |>\n<| a dscore=2 |>\nThis is not an optimal solution, but a\
    \ short one. It has two problems:\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dwcs83d.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] boredoms`

    /tmp/tmp0dwcs83d.d(19): Error: no identifier for declarator `s`

    /tmp/tmp0dwcs83d.d(19): Error: expression expected, not `:`

    /tmp/tmp0dwcs83d.d(19): Error: found `boredoms` when expecting `;` following `for`
    condition

    /tmp/tmp0dwcs83d.d(28): Error: declaration expected, not `<`

    /tmp/tmp0dwcs83d.d(42): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(43): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(44): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(45): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(46): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(47): Error: declaration expected, not `assert`

    /tmp/tmp0dwcs83d.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dwcs83d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    foreach(char c in S) \n\
    \    {\n        if(c == 'I') bored += 1;\n    }\n    return bored;\n}\n/*\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6s_qbgp.d(18): Error: found `in` when expecting `;`

    /tmp/tmpl6s_qbgp.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6s_qbgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tint i,j;\n\tfor (i=0; i<=length(S);\
    \ ++i)\n\t{\n\t\tj = i + 1;\n\t\twhile (j < length(S) && S[j] == '.' || S[j] ==\
    \ '?' || S[j] == '!')\n\t\t\t++j;\n\t\tif (S[i] == 'I' && S[j-1] == '.')\n\t\t\
    \t++boredoms;\n\t}\n\treturn boredoms;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpird9d0s8.d(19): Error: undefined identifier `length`

    /tmp/tmpird9d0s8.d(22): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpird9d0s8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    \n    for (int i = 0;\
    \ i < S.length(); i++) \n    {\n        if (isupper(S[i])) \n        {\n     \
    \       if (S[i] == 'I') boredom++; // found 'I'\n        }\n        else \n \
    \       {\n            if (S[i] == '.') boredom++;\n            else if (S[i]\
    \ == '?') boredom++;\n            else if (S[i] == '!') boredom++;\n        }\n\
    \    }\n    \n    return boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ldf28mi.d(19): Error: no property `length` for type `string`

    /tmp/tmp_ldf28mi.d(21): Error: undefined identifier `isupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ldf28mi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(S, \"I\");\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nI did this in Haskell and it works perfectly:\n<code>\n\
    -- count number of boredoms \nboredCounter :: String -> Int\nboredCounter s =\
    \ length $ filter (== \"I\") s\n</code>\n<|/ a tags=string,haskell,filtering,count\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a |>\nI'm going to show you the simplest possible\
    \ way, and I'll leave it to you to translate to Haskell\n<code>\nboredCount =\
    \ \"I\" `count` \"I\"\n</code>\n<|/ a tags=string,haskell,filtering,count dscore=0\
    \ |>\n<| c |>\n`count` does not work on lists (well, `Data.List` has `count` but\
    \ it's not in `Prelude` but in `Data.List.Instances`)\n<|/ c |>\n<| c |>\n: Actually\
    \ it does work fine in lists.  Try it on `count'`: `count' \"abc\" 'a' :: Int;\
    \ -- returns 1`\n<|/ c |>\n<| c |>\nOh right ok, I just thought it didn't. My\
    \ mistake.\n<|/ c |>\n<| a tags=string,haskell,filtering,count |>\n<code>\nboredCount\
    \ :: String -> Int\nboredCount s = length $ filter (== 'I') s\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nboredCount :: String -> Int\nboredCount\
    \ str = length . filter (== 'I') $ str\n</code>\n<|/ a tags=string,haskell,filtering,count\
    \ |>\n<| a tags=string,haskell,filtering,count |>\nThe solution above doesn't\
    \ work if you want to count '0' as a bored sentence, which is impossible to have\
    \ a boredom sentence start with a '0'. Also, it would return incorrect results\
    \ if you wanted to count a \nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6yauis51.d(19): Error: declaration expected, not `<`

    /tmp/tmp6yauis51.d(33): Error: unterminated character constant

    /tmp/tmp6yauis51.d(33): Error: unterminated character constant

    /tmp/tmp6yauis51.d(39): Error: unterminated character constant

    /tmp/tmp6yauis51.d(45): Error: unterminated character constant

    /tmp/tmp6yauis51.d(60): Error: unterminated character constant

    /tmp/tmp6yauis51.d(65): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(66): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(67): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(68): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(69): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(70): Error: declaration expected, not `assert`

    /tmp/tmp6yauis51.d(71): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6yauis51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long cnt = 0;\n    foreach(char c in S) {\n \
    \       if(c == '.' || c == '?' || c == '!') {\n            cnt++;\n        }\n\
    \    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj1svpyz8.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj1svpyz8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    map<string, long> boredoms = stringToMap(S);\n\
    \    return length(boredoms);\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1_oy6ion.d(17): Error: found `>` when expecting `.` following long

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_oy6ion.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long num = 0;\n    int pos = 0;\n    char prev;\n\
    \    for (pos=0; pos < S.length(); pos++)\n    {\n        prev = S[pos];\n   \
    \     \n        if ((prev == \".\" || prev == \"?\" || prev == \"!\")\n      \
    \      && (S[pos+1] == \"I\" || S[pos+1] == \"I'\" || S[pos+1] == \"i\")) \n \
    \       {\n            num++;\n        }\n    }\n    return num;\n}\n</code>\n\
    <|/ a tags=c++ |>\n<| c |>\nThanks so much! this was very helpful. Can you explain\
    \ the logic behind how you arrived at the solution?\n<|/ c |>\n<| c |>\n- I added\
    \ some explanation, I hope it helps.\n<|/ c |>\n<| c |>\nOne thing I noticed is\
    \ that you used the || operator in the if statement for \".\" and \"?\" and \"\
    !\" but you used the && operator in the if statement for \"I\" and \"i'\".\n<|/\
    \ c |>\n<| c |>\n- That's because I used `||` when comparing the previous character\
    \ with the next character. It works like a binary operator, meaning that both\
    \ operands must be true to be in the if statement. If one operand is false, then\
    \ the statement is false. So if `.` or `!` are false, `&&` is true, `||` is false\
    \ and so on. Since `\"I\"` matches `\"I\"` and `\"i'\"`, `||` was the right operator\
    \ to use.\n<|/ c |>\n<| a |>\nHere's my solution:\n<code>\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1c1mivy.d(32): Error: declaration expected, not `<`

    /tmp/tmpw1c1mivy.d(44): Error: unterminated character constant

    /tmp/tmpw1c1mivy.d(47): Error: unterminated character constant

    /tmp/tmpw1c1mivy.d(53): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(54): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(55): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(56): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(57): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(58): Error: declaration expected, not `assert`

    /tmp/tmpw1c1mivy.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1c1mivy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tauto boredom_count = (long)0;\n\t\n\tauto first_word_finder\
    \ = find(S, ' ');\n\t\n\tauto first_word = first_word_finder;\n\t\n\tfirst_word_finder\
    \ = find(S, ' ');\n\t\n\tif(first_word_finder != string::npos)\n\t{\n\t\tauto\
    \ second_word_finder = find(S, '.');\n\t\t\n\t\tauto second_word = second_word_finder;\n\
    \t\t\n\t\tsecond_word_finder = find(S, '.');\n\t\t\n\t\tif(second_word_finder\
    \ != string::npos)\n\t\t{\n\t\t\tauto third_word_finder = find(S, '?');\n\t\t\t\
    \n\t\t\tauto third_word = third_word_finder;\n\t\t\t\n\t\t\tthird_word_finder\
    \ = find(S, '!');\n\t\t\t\n\t\t\tauto fourth_word = third_word_finder;\n\t\t\t\
    \n\t\t\tboredom_count = (long)0;\n\t\t\t\n\t\t\twhile(first_word != string::npos)\n\
    \t\t\t{\n\t\t\t\tif(S[first_word] == 'I')\n\t\t\t\t{\n\t\t\t\t\tboredom_count++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfirst_word++;\n\t\t\t}\n\t\t\t\n\
    \t\t\twhile(second_word != string::npos)\n\t\t\t{\n\t\t\t\tif(S[second_word] ==\
    \ 'I')\n\t\t\t\t{\n\t\t\t\t\tboredom_count++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t\t\n\t\t\t\tsecond_word++;\n\t\t\t}\n\t\t\t\n\t\t\twhile(third_word != string::npos)\n\
    \t\t\t{\n\t\t\t\tif(S[third_word] == 'I')\n\t\t\t\t{\n\t\t\t\t\tboredom_count++;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthird_word++;\n\t\t\t}\n\t\t\t\n\
    \t\t\twhile(fourth_word != string::npos)\n\t\t\t{\n\t\t\t\tif(S[fourth_word] ==\
    \ 'I')\n\t\t\t\t{\n\t\t\t\t\tboredom_count++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t\t\n\t\t\t\tfourth_word++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn boredom_count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg8nobx2i.d(17): Error: C style cast illegal, use `cast(long)0`

    /tmp/tmpg8nobx2i.d(25): Error: found `:` when expecting `)`

    /tmp/tmpg8nobx2i.d(25): Error: found `:` instead of statement

    /tmp/tmpg8nobx2i.d(33): Error: found `:` when expecting `)`

    /tmp/tmpg8nobx2i.d(33): Error: found `:` instead of statement

    /tmp/tmpg8nobx2i.d(43): Error: C style cast illegal, use `cast(long)0`

    /tmp/tmpg8nobx2i.d(45): Error: found `:` when expecting `)`

    /tmp/tmpg8nobx2i.d(45): Error: found `:` instead of statement

    /tmp/tmpg8nobx2i.d(53): Error: no identifier for declarator `first_word`

    /tmp/tmpg8nobx2i.d(53): Error: declaration expected, not `++`

    /tmp/tmpg8nobx2i.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8nobx2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count=0L;\n    long pos=0;\n    for(int\
    \ i=0;i<S.length();i++){\n        if(S[i]==\"I\"){\n            count=count+1;\n\
    \            pos=i;\n        }\n        else if(S[i]==\".\" || S[i]==\"?\" ||\
    \ S[i]==\"!\"){\n            count=count+1;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a dscore=1 tags=algorithm,c++,string |>\n<| c |>\nIt's a very\
    \ bad idea to reuse your index `i`. I would suggest using `std::find` instead.\n\
    <|/ c |>\n<| c |>\nYes, it's true. I didn't notice that it would conflict with\
    \ the index `i`. I edited the answer now.\n<|/ c |>\n<| a |>\nUse a map to store\
    \ the bored words. You can then perform lookups in constant time using unordered_map\
    \ and string::find (linear time):\n<code>\nunordered_map<string, int> bored;\n\
    string word;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfiqfr2o.d(30): Error: declaration expected, not `<`

    /tmp/tmpvfiqfr2o.d(33): Error: unterminated character constant

    /tmp/tmpvfiqfr2o.d(36): Error: unterminated character constant

    /tmp/tmpvfiqfr2o.d(36): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfiqfr2o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i;\n    long count = 0;\n    for(i=0; i<S.length();\
    \ i++)\n    {\n        if(S[i] == 'I')\n        {\n            count++;\n    \
    \    }\n    }\n    return count;\n}\n/* Testing: you can use this code snippet\
    \ in your code */\nlong test(int num_test_cases)\n{\n    string bored = \"\";\n\
    \    int i;\n    for(i=0; i<num_test_cases; i++)\n    {\n        string sentence\
    \ = readLine(\"Please enter a sentence: \");\n        bored += sentence + \" \"\
    ;\n    }\n    bored += \".\";\n    long result = is_bored(bored);\n    writeln(result);\n\
    \    return 0;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpflller2m.d(19): Error: no property `length` for type `string`

    /tmp/tmpflller2m.d(35): Error: undefined identifier `readLine`

    /tmp/tmpflller2m.d(36): Error: invalid array operation `sentence + " "` (possible
    missing [])

    /tmp/tmpflller2m.d(38): Error: slice `bored` is not mutable

    /tmp/tmpflller2m.d(40): Error: `writeln` is not defined, perhaps `import std.stdio;`
    is needed?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflller2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tif (S==nil)\n\t\tL = 0;\n\telse\n\t\tif (S[0L]=='I')\n\
    \t\t\tL = count_boredoms(S);\n\t\telse\n\t\t\tL = count_boredoms(S)+1;\n\t\n\t\
    return L;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15_ocs1f.d(17): Error: undefined identifier `nil`

    /tmp/tmp15_ocs1f.d(18): Error: undefined identifier `L`

    /tmp/tmp15_ocs1f.d(21): Error: undefined identifier `L`

    /tmp/tmp15_ocs1f.d(23): Error: undefined identifier `L`

    /tmp/tmp15_ocs1f.d(25): Error: undefined identifier `L`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15_ocs1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    int index = 0;\n    bool\
    \ isboredom = false;\n    while(index < S.length()) {\n        char c = S.charAt(index);\n\
    \        if(isdigit(c)){\n            isboredom = false;\n        }\n        else\
    \ if(index==0){\n            isboredom = true;\n        }\n        else if(isalpha(c)){\n\
    \            isboredom = true;\n        }\n        else if(isboredom){\n     \
    \       if(S.charAt(index-1)=='.' || S.charAt(index-1)=='?' || S.charAt(index-1)=='!'){\n\
    \                count++;\n            }\n            isboredom = false;\n   \
    \     }\n        index++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprf0vbwtr.d(20): Error: no property `length` for type `string`

    /tmp/tmprf0vbwtr.d(21): Error: no property `charAt` for type `string`

    /tmp/tmprf0vbwtr.d(22): Error: undefined identifier `isdigit`

    /tmp/tmprf0vbwtr.d(28): Error: undefined identifier `isalpha`

    /tmp/tmprf0vbwtr.d(32): Error: no property `charAt` for type `string`

    /tmp/tmprf0vbwtr.d(32): Error: no property `charAt` for type `string`

    /tmp/tmprf0vbwtr.d(32): Error: no property `charAt` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprf0vbwtr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0L;\n    int i = S.find(\"I\");\n\
    \    while(i!=string::npos)\n    {\n        string temp = S.substr(0,i);\n   \
    \     if(temp.find(\".\")!=string::npos ||\n           temp.find(\"?\")!=string::npos\
    \ ||\n           temp.find(\"!\")!=string::npos)\n        {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThe return type of `find` is `size_t` and not `int`, so that will\
    \ cause an overflow when `i` is greater than `0`.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n#include<iostream>\n#include<string>\nusing namespace std;\nlong boredom(string\
    \ str)\n{\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpycsgeo0w.d(19): Error: found `:` when expecting `)`

    /tmp/tmpycsgeo0w.d(19): Error: found `:` instead of statement

    /tmp/tmpycsgeo0w.d(22): Error: found `:` when expecting `)`

    /tmp/tmpycsgeo0w.d(22): Error: found `:` instead of statement

    /tmp/tmpycsgeo0w.d(28): Error: no identifier for declarator `i`

    /tmp/tmpycsgeo0w.d(28): Error: declaration expected, not `++`

    /tmp/tmpycsgeo0w.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycsgeo0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return sum(startsWith(\"I\", S)) - length(S.split(\"\
    .\"))/2 - length(S.split(\"?\"))/2 - length(S.split(\"!\"))/2;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_nxz8kyb.d(17): Error: undefined identifier `sum`

    /tmp/tmp_nxz8kyb.d(17): Error: undefined identifier `length`

    /tmp/tmp_nxz8kyb.d(17): Error: undefined identifier `length`

    /tmp/tmp_nxz8kyb.d(17): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_nxz8kyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0L;\n    foreach (i, S) \n    {\n\
    \        if (i == 'I') count++;\n    }\n    return count;\n}\n</code>\n<|/ a dscore=1\
    \ tags=java,c++ |>\n<| a dscore=1 |>\n<code>\npublic int isBored(String sentence)\
    \ {\n    int boredom = 0;\n    for(int i = 1 ; i < sentence.length() ; i++) {\n\
    \        if(sentence.charAt(i) == 'I') {\n            boredom++;\n        }\n\
    \    }\n    return boredom;\n}\n</code>\n<|/ a tags=java,c++ |>\n<| a tags=java,c++\
    \ |>\n<code>\nclass BoredomCounter{\n    public static long isBored(String s)\
    \ {\n        long boredom = 0L;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (s.charAt(i) == 'I') {\n                boredom++;\n     \
    \       }\n        }\n        return boredom;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,c++ |>\nYou can use this code \n<code>\npublic class boredom\
    \ {\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2__ld972.d(18): Error: no identifier for declarator `S`

    /tmp/tmp2__ld972.d(18): Error: found `)` when expecting `;`

    /tmp/tmp2__ld972.d(22): Error: found `return` when expecting `)`

    /tmp/tmp2__ld972.d(24): Error: declaration expected, not `<`

    /tmp/tmp2__ld972.d(30): Error: declaration expected, not `for`

    /tmp/tmp2__ld972.d(30): Error: no identifier for declarator `i`

    /tmp/tmp2__ld972.d(30): Error: declaration expected, not `<`

    /tmp/tmp2__ld972.d(30): Error: no identifier for declarator `i`

    /tmp/tmp2__ld972.d(30): Error: declaration expected, not `++`

    /tmp/tmp2__ld972.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2__ld972.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int N = length(S);\n    \n    long boredoms =\
    \ 0;\n    int i,j,k; \n    \n    // boredom 1\n    for(i = 0; i < N; ++i)\n  \
    \  {\n        if(S[i] == 'I') \n        {\n            boredoms += 1;\n      \
    \      for(j = i; j < N; ++j)\n                if(S[j] == 'I' || S[j] == '.' ||\
    \ S[j] == '!') \n                    break;\n        }\n    }\n    \n    // boredom\
    \ 2\n    for(i = 0; i < N; ++i)\n    {\n        if(S[i] == '.' || S[i] == '?'\
    \ || S[i] == '!')\n        {\n            for(j = i; j < N; ++j)\n           \
    \     if(S[j] != '.' && S[j] != '?' && S[j] != '!') \n                    break;\n\
    \            boredoms += 1;\n        }\n    }\n    \n    return boredoms;\n}\n\
    </code>\n<|/ a tags=string,algorithm,c |>\n<| c |>\nThis is nice but I'm wondering\
    \ if you can explain what it does and why it works.\n<|/ c |>\n<| c |>\nSure,\
    \ I added some explanation.\n<|/ c |>\n<| c |>\nNice. Thank you very much. I just\
    \ need some time to understand the code.\n<|/ c |>\n<| c |>\nI added some comments,\
    \ including one explanation about how it works.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if a sentence starts with an I. For example, `is_bored(\"Hello world\"\
    )` returns `0`, instead of `1`.\n<|/ c |>\n<| a tags=string,algorithm,c |>\nI\
    \ see three easy ways to do this:\n1) The easiest is to use strchr and memcmp:\n\
    <code>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudvjed51.d(48): Error: declaration expected, not `<`

    /tmp/tmpudvjed51.d(51): Error: unterminated character constant

    /tmp/tmpudvjed51.d(63): Error: unterminated character constant

    /tmp/tmpudvjed51.d(76): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(77): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(78): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(79): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(80): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(81): Error: declaration expected, not `assert`

    /tmp/tmpudvjed51.d(82): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudvjed51.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong bored = 0;\n\tfor (int i=0; i< S.size(); i++)\
    \ {\n\t\tstring word = S[i];\n\t\tif (word==\"I\") {\n\t\t\tbored++;\n\t\t}\n\t\
    }\n\treturn bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvc73uab0.d(18): Error: no property `size` for type `string`

    /tmp/tmpvc73uab0.d(19): Error: cannot implicitly convert expression `S[cast(ulong)i]`
    of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc73uab0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string boredoms[] = {\"I\", \"am\", \"are\",\
    \ \"you\", \"you're\", \"i'm\", \"i've\",\n                       \"you've\",\
    \ \"we\", \"us\", \"our\", \"ours\", \"ourselves\", \"you\", \"your\",\n     \
    \                  \"yours\", \"yourself\", \"yourselves\", \"he\", \"him\", \"\
    his\",\n                       \"himself\", \"she\", \"her\", \"hers\", \"herself\"\
    , \"it\", \"its\",\n                       \"itself\", \"they\", \"them\", \"\
    their\", \"theirs\", \"themselves\",\n                       \"what\", \"which\"\
    , \"who\", \"whom\", \"this\", \"that\", \"these\",\n                       \"\
    those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\",\n     \
    \                  \"being\", \"have\", \"has\", \"had\", \"having\", \"do\",\
    \ \"does\",\n                       \"did\", \"doing\", \"a\", \"an\", \"the\"\
    , \"and\", \"but\", \"if\",\n                       \"or\", \"because\", \"as\"\
    , \"until\", \"while\", \"of\", \"at\",\n                       \"by\", \"for\"\
    , \"with\", \"about\", \"against\", \"between\",\n                       \"into\"\
    , \"through\", \"during\", \"before\", \"after\", \"above\",\n               \
    \        \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\"\
    ,\n                       \"off\", \"over\", \"under\", \"again\", \"further\"\
    , \"then\",\n                       \"once\", \"here\", \"there\", \"when\", \"\
    where\", \"why\", \"how\",\n                       \"all\", \"any\", \"both\"\
    , \"each\", \"few\", \"more\", \"most\",\n                       \"other\", \"\
    some\", \"such\", \"no\", \"nor\", \"not\", \"only\",\n                      \
    \ \"own\", \"same\", \"so\", \"than\", \"too\", \"very\", \"s\", \"t\",\n    \
    \                   \"can\", \"will\", \"just\", \"don\", \"should\", \"now\"\
    };\n    vector<string> words;\n    stringstream ss(S);\n    string word;\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjn9c87j.d(17): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] boredoms`

    /tmp/tmpzjn9c87j.d(36): Error: found `>` when expecting `;` following statement

    /tmp/tmpzjn9c87j.d(39): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjn9c87j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tbool boredom;\n\tsize_t i;\n\tlong count = 0;\n\
    \t\n\tboredom = true;\n\tfor(i = 0; i<S.length(); i++){\n\t\tif(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!'){\n\t\t\tboredom = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif (boredom)\n\t\tcount++;\n\t\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvzzsml7.d(22): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvzzsml7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    size_t start = 0;\n    size_t\
    \ end = S.length();\n    \n    while (start < end)\n    {\n        while (S[start]\
    \ == '.')\n            start++;\n        \n        while (S[end] == '.')\n   \
    \         end--;\n        \n        while (S[start] == '?' && S[end] == '?')\n\
    \            start++;\n        \n        while (S[end] == '!')\n            end--;\n\
    \        \n        if (S[start] == 'I' && S[end] == '!')\n            count++;\n\
    \        \n        start++;\n        end--;\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3jfqq0hc.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3jfqq0hc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string result = \"\";\n    int count = 0;\n \
    \   int i;\n    \n    for(i = 0; i < S.length(); i++)\n    {\n        if(S[i]\
    \ != '.' && S[i] != '?' && S[i] != '!')\n        {\n            result += S[i];\n\
    \        }\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n\
    \            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzi1qnt5m.d(21): Error: no property `length` for type `string`

    /tmp/tmpzi1qnt5m.d(25): Error: slice `result` is not mutable

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzi1qnt5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0; //count how many boredom sentences\n\
    \    \n    for (int i=0; i<length(S); i++)\n    {\n        if (S[i]==\"I\")\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphsdoytab.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphsdoytab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto words=S.split('.');\n    long bored=0;\n\
    \    foreach(string word,words)\n    {\n        if(word==\"I\")\n            bored+=1;\n\
    \    }\n    return bored;\n}\n</code>\n<|/ a tags=string,char,arrays,count,c++\
    \ |>\n<| c |>\nI'm pretty sure this doesn't work because `string words[]` creates\
    \ a *new* `string` on each iteration, so `words[]` will be unchanged by the next\
    \ iteration. In fact, it won't compile.\n<|/ c |>\n<| c |>\nMy apologies. I did\
    \ not notice the missing `=` on the definition of `words`. Edited the answer to\
    \ correct this. Thanks for the catch.\n<|/ c |>\n<| a dscore=2 tags=string,char,arrays,count,c++\
    \ |>\nHere is my solution:\n<code>\n#include <iostream>\n#include <string>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppgku75et.d(19): Error: no identifier for declarator `words`

    /tmp/tmppgku75et.d(19): Error: found `)` when expecting `;`

    /tmp/tmppgku75et.d(24): Error: found `return` when expecting `)`

    /tmp/tmppgku75et.d(26): Error: declaration expected, not `<`

    /tmp/tmppgku75et.d(29): Error: unterminated character constant

    /tmp/tmppgku75et.d(29): Error: unterminated character constant

    /tmp/tmppgku75et.d(29): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppgku75et.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    \n    for (auto i = S.begin();\
    \ i != S.end(); ++i)\n    {\n        switch (*i)\n        {\n            case\
    \ 'I':\n                bored += 1;\n                break;\n            case\
    \ '?':\n            case '!':\n                bored += 1;\n        }\n    }\n\
    \    \n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpziag2nap.d(19): Error: no property `begin` for type `string`

    /tmp/tmpziag2nap.d(19): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpziag2nap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    foreach(const char c, S)\n\
    \    {\n        if (c == '.' || c == '?' || c == '!')\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdczggfox.d(18): Error: no identifier for declarator `S`

    /tmp/tmpdczggfox.d(18): Error: found `)` when expecting `;`

    /tmp/tmpdczggfox.d(23): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdczggfox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom_count = 0;\n    for(auto it=S.begin();\
    \ it!=S.end(); ++it) {\n        bool first_word_in_sentence = true;\n        for(auto\
    \ cit = it; cit!=S.end(); cit++) {\n            if(cit == S.begin() || cit ==\
    \ S.end()) {\n                continue;\n            }\n            if(*cit !=\
    \ '.' && *cit != '?' && *cit != '!') {\n                continue;\n          \
    \  }\n            if(first_word_in_sentence) {\n                first_word_in_sentence\
    \ = false;\n                boredom_count++;\n            } else {\n         \
    \       boredom_count = 0;\n            }\n        }\n    }\n    return boredom_count;\n\
    }\n/*\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcgdauyu.d(37): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcgdauyu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    \n    auto i = S.find(\"\
    I\");\n    if (i != string::npos)\n    {\n        boredoms += 1;\n        i +=\
    \ 3;\n        while ((i = S.find('.',i)) != string::npos)\n            i += 2;\n\
    \        \n        while ((i = S.find('!',i)) != string::npos)\n            i\
    \ += 2;\n        \n        while ((i = S.find('?',i)) != string::npos)\n     \
    \       i += 2;\n    }\n    \n    return boredoms;\n}\n</code>\nThe tricky part\
    \ is finding the correct locations to split the string into sentences. You want\
    \ to split the string into sentences while ignoring the following characters '.','!',\
    \ '?' and stopping when \"I\" appears. A naive approach would be to split the\
    \ string on the spaces character by character, until you encounter an \"I\" character.\
    \ However this would leave the \".\" character at the end of the sentence and\
    \ a following \"!\" character which would be undesired.\nA better approach would\
    \ be to split the string on the punctuation characters '.','!', '?' and 'I' then\
    \ remove the spaces.\nA third approach would be to find a library that will parse\
    \ the string for you and return the sentence strings. You can then count the sentences.\n\
    <|/ a dscore=0 |>\n<| a tags=c++ |>\nYou have to iterate over every char of the\
    \ string and check if it is '.','!', '?' or ' '. If it is one of those then you\
    \ have found a new sentence. Otherwise the sentence is not finished.\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=c++ |>\nSince you know the length of the original string\
    \ then you can use a simple for loop. Using str[i] to loop over the characters\
    \ in the string. If the character is one of .!?, then you have found a new sentence.\
    \ If it is the space, then you have found a new sentence.\n<|/ a |>\n<| c |>\n\
    That is *not* the simplest way!\n<|/ c |>\n<| c |>\nIt is. If you look carefully\
    \ at my answer, you see that I pointed out that using a `for` loop will almost\
    \ certainly be faster than using any algorithm that involves searching through\
    \ the string more than once.\n<|/ c |>\n<| c |>\nBut it isn't simple. Why do you\
    \ think it's faster? Why should you use it? What is simplest and what is \"the\
    \ fastest way\"? Do you think any algorithm can be as simple as \"loop over the\
    \ string\"? No. Your proposed solution is too complicated and slow and not even\
    \ the simplest.\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpec8id1uk.d(20): Error: found `:` when expecting `)`

    /tmp/tmpec8id1uk.d(20): Error: found `:` instead of statement

    /tmp/tmpec8id1uk.d(24): Error: found `:` when expecting `)`

    /tmp/tmpec8id1uk.d(24): Error: found `:` instead of statement

    /tmp/tmpec8id1uk.d(27): Error: found `:` when expecting `)`

    /tmp/tmpec8id1uk.d(27): Error: found `:` instead of statement

    /tmp/tmpec8id1uk.d(30): Error: found `:` when expecting `)`

    /tmp/tmpec8id1uk.d(30): Error: found `:` instead of statement

    /tmp/tmpec8id1uk.d(34): Error: declaration expected, not `return`

    /tmp/tmpec8id1uk.d(35): Error: unrecognized declaration

    /tmp/tmpec8id1uk.d(54): Error: unterminated character constant

    /tmp/tmpec8id1uk.d(54): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpec8id1uk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long bored = 0;\n  stringstream ss(S);\n  string\
    \ word;\n  while(ss)\n  {\n    getline(ss, word, '.?!');\n    if(word == \"I\"\
    )\n      bored++;\n  }\n  return bored;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9ja1uoo.d(22): Error: unterminated character constant

    /tmp/tmp_9ja1uoo.d(22): Error: unterminated character constant

    /tmp/tmp_9ja1uoo.d(22): Error: found `;` when expecting `:`

    /tmp/tmp_9ja1uoo.d(23): Error: expression expected, not `if`

    /tmp/tmp_9ja1uoo.d(24): Error: found `bored` when expecting `,`

    /tmp/tmp_9ja1uoo.d(24): Error: expression expected, not `;`

    /tmp/tmp_9ja1uoo.d(25): Error: found `}` when expecting `,`

    /tmp/tmp_9ja1uoo.d(26): Error: expression expected, not `return`

    /tmp/tmp_9ja1uoo.d(26): Error: found `bored` when expecting `,`

    /tmp/tmp_9ja1uoo.d(26): Error: expression expected, not `;`

    /tmp/tmp_9ja1uoo.d(27): Error: found `}` when expecting `,`

    /tmp/tmp_9ja1uoo.d(28): Error: expression expected, not `unittest`

    /tmp/tmp_9ja1uoo.d(29): Error: found `{` when expecting `,`

    /tmp/tmp_9ja1uoo.d(30): Error: expression expected, not `alias`

    /tmp/tmp_9ja1uoo.d(30): Error: found `candidate` when expecting `,`

    /tmp/tmp_9ja1uoo.d(30): Error: expression expected, not `=`

    /tmp/tmp_9ja1uoo.d(30): E'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredom_count = 0;\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjj7tmhd2.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjj7tmhd2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int i = 0;\n    char\
    \ current = S[i];\n    while (i < S.length()-1) \n    {\n        if (current ==\
    \ '.' || current == '!' || current == '?') \n        {\n            current =\
    \ S[i + 1];\n            boredoms = boredoms + 1L;\n        }\n        current\
    \ = S[i + 1];\n        i++;\n    }\n    return boredoms;\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtb0pwcr.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtb0pwcr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    long idx = 0;\n    string\
    \ w;\n    for (auto w : strings::words) {\n        if (S[idx] == \".\" && S[idx+1]\
    \ == \".\" && S[idx+2] == \"!\") {\n            bored++;\n        }\n        idx+=3;\n\
    \    }\n    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8pjq12r.d(20): Error: no identifier for declarator `w`

    /tmp/tmpv8pjq12r.d(20): Error: expression expected, not `:`

    /tmp/tmpv8pjq12r.d(20): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpv8pjq12r.d(20): Error: expression expected, not `:`

    /tmp/tmpv8pjq12r.d(20): Error: found `:` when expecting `)`

    /tmp/tmpv8pjq12r.d(20): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8pjq12r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong num=0L;\n\t\n\tfor (int i=0; i<S.length();\
    \ i++)\n\t{\n\t\tif(S[i]==\".\"){\n\t\t\tint j=i;\n\t\t\twhile(S[j]!=S[i])\n\t\
    \t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tnum+=j-i;\n\t\t}\n\t\telse if(S[i]==\"?\"\
    ){\n\t\t\tint j=i;\n\t\t\twhile(S[j]!=S[i])\n\t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\
    \t\tnum+=j-i;\n\t\t}\n\t\telse if(S[i]==\"!\"){\n\t\t\tint j=i;\n\t\t\twhile(S[j]!=S[i])\n\
    \t\t\t{\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tnum+=j-i;\n\t\t}\n\t\telse\n\t\t\tnum++;\n\
    \t}\n\treturn num;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnifl_jqs.d(19): Error: no property `length` for type `string`

    /tmp/tmpnifl_jqs.d(21): Error: incompatible types for `(S[cast(ulong)i]) == (".")`:
    `immutable(char)` and `string`

    /tmp/tmpnifl_jqs.d(29): Error: incompatible types for `(S[cast(ulong)i]) == ("?")`:
    `immutable(char)` and `string`

    /tmp/tmpnifl_jqs.d(37): Error: incompatible types for `(S[cast(ulong)i]) == ("!")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnifl_jqs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (auto i: S) {\n    \
    \    if (!i == '.' && !i == '?' && !i == '!') {\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ls51jzc.d(18): Error: no identifier for declarator `i`

    /tmp/tmp9ls51jzc.d(18): Error: expression expected, not `:`

    /tmp/tmp9ls51jzc.d(18): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ls51jzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    foreach(char c in S)\n\
    \    {\n        if(c == '.' || c == '?' || c == '!')\n        {\n            boredom++;\n\
    \        }\n    }\n    return boredom;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvxr__4pg.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvxr__4pg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for(int i = 0; i < S.length;\
    \ i++)\n    {\n        if(S[i] == \"I\")\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n</code>\nThe output will be:\n<code>\n\
    [cfati@CFATI-5510-0:e:\\Work\\Dev\\StackOverflow\\q056463295]> r\nStarting program:\
    \ e:\\Work\\Dev\\VStudio\\Tests\\q056463295\\q056463295 \nHello world\nThe sky\
    \ is blue. The sun is shining. I love this weather\n0L\n</code>\n<|/ a tags=c++,c\
    \ |>\n<| c |>\nI did some research on that. I found the function `strchr` from\
    \ the standard C library to be a good way to find a specific string in a string\
    \ array (without looping). But my question is how to identify a certain character\
    \ in a string. For example, if I had a string, I could  use strchr function to\
    \ find \"Hello\", but what if I need to find \"I\"? I wanted to make use of the\
    \ `find` function from std library but I don't think I can use the `std` library\
    \ for my assignment (it is an introductory C++ course so I can't use things like\
    \ `string` or `vector`). Any suggestions?\n<|/ c |>\n<| c |>\nYeah this is definitely\
    \ a nice way to do it, and it does work but I'm still not sure how to use the\
    \ `find` function from std library so I'm sticking with my original method. Thank\
    \ you!\n<|/ c |>\n<| c |>\nYou're welcome. Since you accepted my answer, I think\
    \ you can consider upvoting it. I believe it's a better way. :-)\n<|/ c |>\n<|\
    \ c |>\nI upvoted the answer but since I don't have enough reputation, I don't\
    \ have 15 reputation. Once I get 15 reputation I will be able to upvote it :)\n\
    <|/ c |>\n<| c |>\nAh, I see. Thank you anyway.\n<|/ c |>\n<| a tags=c++,c |>\n\
    Use strchr(). \n<code>\nstrchr(const char *s, int c)\n</code>\nfinds the first\
    \ occurrence of c in s, returning a pointer to the character.\n<|/ a dscore=0\
    \ |>\n<| c |>\nI did some research on that. I found the function `strchr` from\
    \ the standard C library to be a good way to find a specific string in a string\
    \ array (without looping). But my question is how to identify \nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf_1sldkr.d(27): Error: declaration expected, not `<`

    /tmp/tmpf_1sldkr.d(30): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(30): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(30): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(30): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(31): Error: character ''\'' is not a valid token

    /tmp/tmpf_1sldkr.d(38): Error: unterminated character constant

    /tmp/tmpf_1sldkr.d(38): Error: unterminated character constant

    /tmp/tmpf_1sldkr.d(41): Error: unterminated character constant

    /tmp/tmpf_1sldkr.d(41): Error: unterminated character constant

    /tmp/tmpf_1sldkr.d(44): Error: unterminated charact'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 1;\n    for(auto s : S)\n   \
    \ {\n        if(s == \"I\")\n        {\n            boredoms += 1;\n        }\n\
    \    }\n    return boredoms;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your\
    \ answer. I tried to implement it with my own code, but I keep getting the error\
    \ \"[Error] invalid operands of types 'char' and 'const char*' to binary 'operator+'\"\
    \n<|/ c |>\n<| c |>\nI modified my post to show you the code that I wrote based\
    \ on your code, and I still get the same error.\n<|/ c |>\n<| c |>\nI did modify\
    \ my post and added a complete working example\n<|/ c |>\n<| c |>\nThanks, I think\
    \ I got it now. I'll try to figure out how to make the code work with the long\
    \ data type instead of int. Thanks for your help and patience.\n<|/ c |>\n<| c\
    \ |>\nI updated the code to use `long long int` and also added a working example\
    \ that also works with `string`\n<|/ c |>\n<| a dscore=2 tags=char,string,c++,int\
    \ |>\nYou can count boredoms by iterating the string and counting the number of\
    \ times the word starts with I. \nA simple example using your code:\n<code>\n\
    #include <iostream>\n#include <string>\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgcfx8icx.d(18): Error: no identifier for declarator `s`

    /tmp/tmpgcfx8icx.d(18): Error: expression expected, not `:`

    /tmp/tmpgcfx8icx.d(18): Error: found `S` when expecting `;` following `for` condition

    /tmp/tmpgcfx8icx.d(27): Error: declaration expected, not `<`

    /tmp/tmpgcfx8icx.d(39): Error: unterminated character constant

    /tmp/tmpgcfx8icx.d(54): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(55): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(56): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(57): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(58): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(59): Error: declaration expected, not `assert`

    /tmp/tmpgcfx8icx.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgcfx8icx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i,j,k;\n    long cnt = 0;\n    for(i = 0;i\
    \ < S.size();i++){\n        j = i;\n        while((j < S.size())&&(S(j)=='?' ||\
    \ S(j)=='!'))\n            j++;\n        k = j;\n        while((k < S.size())&&(S(k)=='.'))\n\
    \            k++;\n        if(k == j)\n            continue;\n        cnt++;\n\
    \    }\n    return cnt;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,c++ |>\n\
    Here is an implementation for C++:\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy95myaa5.d(32): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy95myaa5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    \n    for (int i = 0;\
    \ i < S.length(); i++)\n    {\n        if (S[i] == \"I\")\n        {\n       \
    \     boredom++;\n        }\n    }\n    \n    return boredom;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfv1uhc9d.d(19): Error: no property `length` for type `string`

    /tmp/tmpfv1uhc9d.d(21): Error: incompatible types for `(S[cast(ulong)i]) == ("I")`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfv1uhc9d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count=0;\n    for(int i=0;i<S.length();i++)\n\
    \    {\n        if(S[i] == '.')\n        {\n            count++;\n        }\n\
    \        if(S[i]=='?')\n        {\n            count++;\n        }\n        if(S[i]=='!')\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nHe wants to count the `.`, `?` and `!` separately,\
    \ not all of them in one string as in the question.\n<|/ c |>\n<| a |>\nAs I commented\
    \ above, the solution with for loops is probably the best one in terms of execution\
    \ time, although the execution time depends on the number of characters in the\
    \ string. There are two methods to optimize the performance with for loops, depending\
    \ on your compiler and the size of the input string:\n<code>\nstring str = \"\
    Hello world\";\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rs8c3uw.d(35): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rs8c3uw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(int i = 0; i < S.length;\
    \ i++) \n    {\n        if(S[i] == 'I' && S[i+1] == '.') \n        {\n       \
    \     boredoms += 1;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx_sn0g86.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e15]

    ??:? void tmpx_sn0g86.__unittest_L27_C1() [0x427b06]

    ??:? void tmpx_sn0g86.__modtest() [0x427b98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa42]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430084]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb61]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa19]

    ??:? runModuleUnitTests [0x42b985]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0, boredom_cnt = 0;\n    \n \
    \   for(int i = 0; i < S.length(); i++)\n    {\n        if( S[i] == 'I')\n   \
    \     {\n            boredom_cnt++;\n            if(boredom_cnt == 2)\n      \
    \      {\n                boredoms ++;\n                boredom_cnt = 0;\n   \
    \         }\n        }\n    }\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6b5k8ckn.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6b5k8ckn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int I = 0;\n    long N = sizeOf(S);\n    for(\
    \ int i=0; i < N; i++)\n    {\n        if(S[i] == 'I')\n        {\n          \
    \  I++;\n        }\n    }\n    return I;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugbrw7rp.d(18): Error: undefined identifier `sizeOf`, did you mean
    alias `size_t`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugbrw7rp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return length(string(_,\"\",\"\")-string(S,\"\
    ?\",\"\"))+1;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks ! I wasn't expecting to get\
    \ an answer like this ! Your answer was really helpful\n<|/ c |>\n<| a tags=python,string\
    \ dscore=0 |>\nTo explain what is happening, I will first explain what a Python\
    \ list is, and how lists work.\nA list is defined as a sequence of objects or\
    \ values that can be accessed via their index number. For example:\n<code>\na\
    \ = [1, 2, 3]\n</code>\nThe object above has 3 items, each of which is an int.\
    \ Lists are indexed using square brackets, so a[0] will return the value of the\
    \ first item, and a[1] will return the value of the second item, and so on. \n\
    To create a list, we simply put values inside of it:\n<code>\na = [1, 2, 3]\n\
    </code>\nTo make a new list, we simply put the values inside of it:\n<code>\n\
    a = [1, 2, 3]\nb = list(a)\nprint(b)\n</code>\nThis code will print a list with\
    \ the value [1, 2, 3].\nSo why does this work?\nWhen we try to print a list, Python\
    \ will automatically iterate over the list and print out the values of the list\
    \ using the following print statement format: print(value).\nThe print function\
    \ has the following specification:\n<code>\nprint(*objects, sep=' ', end='\\n',\
    \ file=sys.stdout, flush=False)\n</code>\nIt will take any number of objects and\
    \ print them out by printing them one by one, separated by the sep argument (default\
    \ is a space).\nWhat happened in your code?\nYou didn't create a list, you created\
    \ a tuple, which is a single comma-separated value.  As such, you can't print\
    \ it as a list!\nHow to fix it?\nUse square brackets to create a list instead:\n\
    <code>\na = [1, 2, 3]\n</code>\nNow, we can print it out as a list:\n<code>\n\
    print(a)\n>>> [1, 2, 3]\n</code>\nWhy is the answer so complicated?\nWhen you\
    \ put a string with commas in it, it automatically creates a tuple. That's why\
    \ the answer uses many unnecessary brackets. \nHow to fix it? \nWhen you have\
    \ a string, you can use the split function to split it into an array. Split splits\
    \ the string into a list using the given character to split at.  You can then\
    \ use len to get the number of elements in the array:\n<code>\nprint(len(a.split(\"\
    ,\")))\n</code>\n<|/ a |>\n<| c |>\nWhile I agree that lists are probably the\
    \ best way to go about solving this, I'm a fan of how your answer answers the\
    \ question of \"Why does this code work?\" rather than \"How to fix it?\"\n<|/\
    \ c |>\n<| \nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i = 0; \n    long bored = 0;\n    string\
    \ word = \"\";\n    string::iterator it_S = S.begin();\n    while(it_S != S.end())\n\
    \    {\n        if(*it_S == '.')\n        {\n            if(word == \"I\") \n\
    \            { \n                bored++; \n            }\n            word =\
    \ \"\";\n        }\n        else if(*it_S == '?' || \n                *it_S ==\
    \ '!' ||\n                *it_S == '.') \n        {\n            if(word == \"\
    I\")\n            {\n                bored++;\n            }\n            else\n\
    \            {\n                word += *it_S;\n            }\n        }\n   \
    \     else\n        {\n            word += *it_S;\n        }\n        ++it_S;\n\
    \    }\n    return bored;\n}\n</code>\n<|/ a tags=c++,c |>\n<| c |>\nThanks for\
    \ the reply. How would you go about counting the number of boredoms in a sentence\
    \ and outputting the number of boredoms on the same line?\n<|/ c |>\n<| c |>\n\
    I updated my answer to count the number of boredoms.\n<|/ c |>\n<| c |>\nAwesome\
    \ thanks! If you're feeling inclined, could you explain to me the logic of how\
    \ the code works? Like where and why bored is declared?\n<|/ c |>\n<| c |>\nbored\
    \ is just a long long variable. bored += 1 means \"add 1 to bored\". It's a shorthand\
    \ way of saying bored = bored + 1. In addition to using long long int you can\
    \ also use long long unsigned int or even unsigned long long int.\n<|/ c |>\n\
    <| a |>\nI suppose you can use the string algorithm find function to locate your\
    \ string \"I\" and count the number of occurrences.\n<|/ a dscore=1 tags=c++,c\
    \ |>\n<| c |>\nI did try using find but I wasn't able to get it to work. Could\
    \ you give me an example?\n<|/ c |>\n<| c |>\n: I cannot remember any example\
    \ code. My recommendation is to use a regex library (e.g. Boost) to help you with\
    \ the regex.\n<|/ c |>\n<| a tags=c++,c |>\n<code>\n#include <string.h>\n#include\
    \ <stdio.h>\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaiqxqgec.d(20): Error: use `.` for member lookup, not `::`

    /tmp/tmpaiqxqgec.d(52): Error: declaration expected, not `<`

    /tmp/tmpaiqxqgec.d(61): Error: unterminated character constant

    /tmp/tmpaiqxqgec.d(64): Error: unterminated character constant

    /tmp/tmpaiqxqgec.d(70): Error: unterminated character constant

    /tmp/tmpaiqxqgec.d(83): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(84): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(85): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(86): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(87): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(88): Error: declaration expected, not `assert`

    /tmp/tmpaiqxqgec.d(89): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiqxqgec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint i;\n\tint count = 0;\n\t\n\tfor(i = 0; i <\
    \ S.length(); i++) {\n\t\tif(S[i] == 'I' || S[i] == '.' || S[i] == '?' || S[i]\
    \ == '!')\n\t\t\tcount++;\n\t}\n\t\n\treturn count;\n}\n\"\"\"\n</cell>\n<cell>\n\
    ## Test your code\nassert(is_bored(\"Hello world\") == 0)\nassert(is_bored(\"\
    The sky is blue.\") == 1)\nassert(is_bored(\"The sun is shining?\") == 1)\nassert(is_bored(\"\
    Love this weather forever.\") == 0)\n</cell>\n<text>\nWrite a Python program to\
    \ find the longest word in a given string. \nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppx02kcw9.d(27): Error: declaration expected, not `""`

    /tmp/tmppx02kcw9.d(47): Error: unterminated string constant starting at /tmp/tmppx02kcw9.d(47)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppx02kcw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i, j, bored_count = 0;\n    \n    for(i =\
    \ 0; i < (int) S.size(); i++)\n    {\n        if(S[i] == 'I')\n        {\n   \
    \         for(j = (int) S.size() - 1; j > i; j--)\n            {\n           \
    \     if(S[j] != 'I' && S[j] != '!' && S[j] != '.')\n                {\n     \
    \               bored_count++;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return bored_count;\n}\nunittest\n{\n  \
    \  alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3nbo8bd.d(19): Error: C style cast illegal, use `cast(int)S.size()`

    /tmp/tmpg3nbo8bd.d(23): Error: C style cast illegal, use `cast(int)S.size()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3nbo8bd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long cnt = 0L;\n  \n  int start = 0;\n  int end\
    \ = 0;\n  bool flag = false;\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbj9fsry8.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbj9fsry8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // TODO:Declare a variable bored_count and assign\
    \ it the value of 0.\n    // Write your code here\n    long bored_count = 0;\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprbc_guz_.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbc_guz_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return sum(map(is_bored_word,S.split('.')));\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbayrdn15.d(17): Error: undefined identifier `sum`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbayrdn15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    \n    long bored = 0;\n    string delimiters\
    \ = {\".\", \"?\", \"!\"};\n    \n    for (auto s : S )\n    {\n        bool found\
    \ = false;\n        for (int i = 0; i < delimiters.size(); i++)\n        {\n \
    \           if (s.find(delimiters[i]) != string::npos)\n            {\n      \
    \          found = true;\n                break;\n            }\n        }\n \
    \       if(!found)\n            bored++;\n    }\n    \n    return bored;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32grcay3.d(21): Error: no identifier for declarator `s`

    /tmp/tmp32grcay3.d(21): Error: expression expected, not `:`

    /tmp/tmp32grcay3.d(21): Error: found `S` when expecting `;` following `for` condition

    /tmp/tmp32grcay3.d(26): Error: found `:` when expecting `)`

    /tmp/tmp32grcay3.d(26): Error: found `:` instead of statement

    /tmp/tmp32grcay3.d(36): Error: declaration expected, not `return`

    /tmp/tmp32grcay3.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32grcay3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 1;\n    foreach(char c in S) \n\
    \    {\n        if(c == '.' || c == '?' || c == '!') \n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I did it this way in C#, and it's just not working. Thank you for your suggestions.\n\
    <|/ c |>\n<| c |>\n, I've added some more code that will help you get started.\n\
    <|/ c |>\n<| a dscore=2 tags=java |>\n<code>\npublic static void main(String[]\
    \ args) {\n        String s=\"the sky is blue\";\n        System.out.println(count(\"\
    I\",s));\n    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyaj5kk01.d(18): Error: found `in` when expecting `;`

    /tmp/tmpyaj5kk01.d(27): Error: declaration expected, not `<`

    /tmp/tmpyaj5kk01.d(30): Error: unterminated character constant

    /tmp/tmpyaj5kk01.d(33): Error: unterminated character constant

    /tmp/tmpyaj5kk01.d(39): Error: identifier expected following `.` instead of `out`

    /tmp/tmpyaj5kk01.d(39): Error: no identifier for declarator `System`

    /tmp/tmpyaj5kk01.d(39): Error: declaration expected, not `out`

    /tmp/tmpyaj5kk01.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyaj5kk01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(S, \"I\");\n}\nunittest\n{\n   \
    \ alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxwjn7ko.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxwjn7ko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint boredom = 0;\n\tfor (int i = 0; i < S.length();\
    \ i++)\n\t\tif (S[i] == 'I' || S[i] == '.' || S[i] == '?' || S[i] == '!')\n\t\t\
    \tboredom++;\n\treturn boredom;\n}\n\t\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8nfge87.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8nfge87.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Your code here\n    map<string, long> memo;\n\
    \    long ret = 0;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpravz6vjh.d(18): Error: found `>` when expecting `.` following long

    /tmp/tmpravz6vjh.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpravz6vjh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n   long boredoms = 0;\n    \n   // Initialize array\
    \ for boredoms\n   bool[,] boredom = new bool[S.size(), S.size()];\n   \n   //\
    \ Initialize array for boredom counter\n   bool[,] boredom_counter = new bool[S.size(),\
    \ S.size()];\n   \n   // For each sentence in the string...\n   for(int i=0; i<S.size();\
    \ ++i)\n   {\n      \n      // Initialize boredom array element with default value\
    \ false\n      boredom[i,i] = false;\n      \n      // Initialize boredom counter\
    \ array element with default value 0\n      boredom_counter[i,i] = false;\n  \
    \    \n      // Initialize starting position for boredom sentence\n      int start_pos\
    \ = 0;\n      \n      // Initialize ending position for boredom sentence\n   \
    \   int end_pos = 0;\n      \n      // Initialize boredom word string\n      string\
    \ boredom_word = \"\";\n      \n      // Initialize flag for end of sentence\n\
    \      bool end_of_sentence = false;\n      \n      // Initialize flag for beginning\
    \ of next sentence\n      bool begin_sentence = false;\n      \n      // Initialize\
    \ flag for beginning of next word\n      bool begin_word = false;\n      \n  \
    \    // Initialize flag for start of new boredom\n      bool start_new_boredom\
    \ = false;\n      \n      // Initialize flag for start of new boredom\n      bool\
    \ start_new_boredom_counter = false;\n      \n      // Initialize flag for start\
    \ of new boredom\n      bool start_new_boredom_word = false;\n      \n      //\
    \ Initialize flag for start of new boredom\n      bool start_new_boredom_word_counter\
    \ = false;\n      \n      // Initialize flag for start of new boredom\n      bool\
    \ start_new_boredom_word_word = false;\n      \n      // Initialize flag for start\
    \ of new boredom\n      bool start_new_boredom_word_word_counter = false;\n  \
    \    \n      // Initialize flag for start of new boredom\n      bool start_new_boredom_word_word_word\
    \ = false;\n      \n      // Initialize flag for end of last word\n      bool\
    \ end_last_word = false;\n      \n      // Initialize flag for end of sentence\n\
    \      bool end_of_sentence_counter = false;\n      \n      // For each word in\
    \ the string...\n      for(int j=0; j<S[i].size(); ++j)\n      {\n         \n\
    \         // If the current word is a '.' we're done with the sentence\n     \
    \    if(S[i][j]=='.')\n         {\n            \n            end_of_sentence =\
    \ true;\n            \n            begin_sentence = false;\n            \n   \
    \         begin_word = false;\n            \n            start_new_boredom = false;\n\
    \            \nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwwm41sou.d(20): Error: expression expected, not `,`

    /tmp/tmpwwm41sou.d(20): Error: found `,` when expecting `]`

    /tmp/tmpwwm41sou.d(20): Error: semicolon expected, not `S`

    /tmp/tmpwwm41sou.d(20): Error: found `]` when expecting `;` following statement

    /tmp/tmpwwm41sou.d(20): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpwwm41sou.d(23): Error: expression expected, not `,`

    /tmp/tmpwwm41sou.d(23): Error: found `,` when expecting `]`

    /tmp/tmpwwm41sou.d(23): Error: semicolon expected, not `S`

    /tmp/tmpwwm41sou.d(23): Error: found `]` when expecting `;` following statement

    /tmp/tmpwwm41sou.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpwwm41sou.d(96): Error: found `unittest` instead of statement

    /tmp/tmpwwm41sou.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwwm41sou.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwwm41sou.d(107): Error: found `End of File` when expecting `}` followin'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    int i = 1;\n    for (auto\
    \ c: S) {\n        if (S[i-1] == c && S[i] == c && S[i+1] == c && S[i+2] == c\
    \ && S[i+3] == c && S[i+4] == c && S[i+5] == c && S[i+6] == c && S[i+7] == c &&\
    \ S[i+8] == c && S[i+9] == c && S[i+10] == c && S[i+11] == c && S[i+12] == c &&\
    \ S[i+13] == c && S[i+14] == c && S[i+15] == c && S[i+16] == c && S[i+17] == c\
    \ && S[i+18] == c && S[i+19] == c && S[i+20] == c && S[i+21] == c && S[i+22] ==\
    \ c && S[i+23] == c && S[i+24] == c && S[i+25] == c && S[i+26] == c && S[i+27]\
    \ == c && S[i+28] == c && S[i+29] == c && S[i+30] == c && S[i+31] == c && S[i+32]\
    \ == c && S[i+33] == c && S[i+34] == c && S[i+35] == c && S[i+36] == c && S[i+37]\
    \ == c && S[i+38] == c && S[i+39] == c && S[i+40] == c && S[i+41] == c && S[i+42]\
    \ == c && S[i+43] == c && S[i+44] == c && S[i+45] == c && S[i+46] == c && S[i+47]\
    \ == c && S[i+48] == c && S[i+49] == c && S[i+50] == c && S[i+51] == c && S[i+52]\
    \ == c && S[i+53] == c && S[i+54] == c && S[i+55] == c && S[i+56] == c && S[i+57]\
    \ == c && S[i+58] == c && S[i+59] == c && S[i+60] == c && S[i+61] == c && S[i+62]\
    \ == c && S[i+63] == c && S[i+64] == c && S[i+65] == c && S[i+66] == c && S[i+67]\
    \ == c && S[i+68] == c && S[i+69] == c && S[i+70] == c && S[i+71] == c && S[i+72]\
    \ == c && S[i+73] == c && S[i+74] == c && S[i+75] == c && S[i+76] == c && S[i+77]\
    \ == c && S[i+78] == c && \nunittest\n{\n    alias candidate = is_bored;\n\n \
    \   assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq90c5em6.d(19): Error: no identifier for declarator `c`

    /tmp/tmpq90c5em6.d(19): Error: expression expected, not `:`

    /tmp/tmpq90c5em6.d(19): Error: found `S` when expecting `;` following `for` condition

    /tmp/tmpq90c5em6.d(21): Error: expression expected, not `unittest`

    /tmp/tmpq90c5em6.d(22): Error: found `{` when expecting `)`

    /tmp/tmpq90c5em6.d(32): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq90c5em6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    string boredom = \"\"\
    ;\n    \n    int i;\n    \n    for (i = 0; i < S.length(); i++)\n    {\n     \
    \   if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n            boredoms[boredoms.length()]\
    \ = boredoms[boredoms.length()] + 1L;\n        }\n        else if (S[i] == 'I'\
    \ && boredom.length() > 0L)\n        {\n            boredoms[boredoms.length()]\
    \ = boredoms[boredoms.length()] + 1L;\n            boredom = \"\";\n        }\n\
    \        else\n        {\n            boredom = boredom + S[i];\n        }\n \
    \   }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg5l5xnn9.d(22): Error: no property `length` for type `string`

    /tmp/tmpg5l5xnn9.d(26): Error: only one index allowed to index `long`

    /tmp/tmpg5l5xnn9.d(28): Error: no property `length` for type `string`

    /tmp/tmpg5l5xnn9.d(30): Error: only one index allowed to index `long`

    /tmp/tmpg5l5xnn9.d(35): Error: incompatible types for `(boredom) + (S[cast(ulong)i])`:
    `string` and `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg5l5xnn9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(int i=0; i<S.length();\
    \ i++){\n        if(S[i]=='I'){\n            boredoms++;\n        }\n    }\n \
    \   return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xuw3_uw.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xuw3_uw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    foreach (char c in S)\n\
    \        if (c == '.' || c == '?' || c == '!')\n            boredom++;\n    return\
    \ boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8vt8_l3m.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vt8_l3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    foreach (char c in S) \n\
    \    {\n        if (c == '.') bored += 1;\n        if (c == '?') bored += 1;\n\
    \        if (c == '!') bored += 1;\n    }\n    return bored;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5r1to6_.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5r1to6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for (auto S : S) {\n\
    \        if (S == \"I\")\n            boredoms += 1;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3s_at7ox.d(18): Error: no identifier for declarator `S`

    /tmp/tmp3s_at7ox.d(18): Error: expression expected, not `:`

    /tmp/tmp3s_at7ox.d(18): Error: found `S` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3s_at7ox.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int bored = 0;\n    int i = 0;\n    for(i = 0;\
    \ i < S.size(); i++)\n    {\n        if(S[i] == '.' || S[i] == '?' || S[i] ==\
    \ '!')\n            bored++;\n    }\n    return bored;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThanks for the help! I'm still a bit new to C++ so I appreciate\
    \ the help.\n<|/ c |>\n<| c |>\nNo problem. If you think that my answer has helped\
    \ you, please consider accepting it by clicking the green tick next to it. See\
    \ [What should I do when someone answers my question?](https://stackoverflow.com/help/someone-answers)\n\
    <|/ c |>\n<| c |>\nOkay, I'll try and do that. Thanks again!\n<|/ c |>\n<| c |>\n\
    I implemented it this way but it keeps returning 0L for every string I feed it.\n\
    <|/ c |>\n<| c |>\nThe code you posted works and returns 1 for me. Are you sure\
    \ you're using a string literal `\"Hello world\"`? If you change it to `std::string\
    \ S = \"Hello world\";` it won't work.\n<|/ c |>\n<| a dscore=1 |>\nYou are looking\
    \ for isalpha\n<code>\n#include <cctype>\n#include <iostream>\nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphctu766a.d(26): Error: declaration expected, not `<`

    /tmp/tmphctu766a.d(29): Error: unterminated character constant

    /tmp/tmphctu766a.d(35): Error: unterminated character constant

    /tmp/tmphctu766a.d(41): Error: unterminated character constant

    /tmp/tmphctu766a.d(41): Error: unterminated character constant

    /tmp/tmphctu766a.d(52): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(53): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(54): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(55): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(56): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(57): Error: declaration expected, not `assert`

    /tmp/tmphctu766a.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphctu766a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ans = 0;\n    for(int i = 0; i < S.length;\
    \ ++i)\n    {\n        if(S[i] == \"I\")\n            ans++;\n    }\n    return\
    \ ans;\n}\n</code>\n<|/ a |>\n<| c |>\nThat's a great solution!\n<|/ c |>\n<|\
    \ a tags=c++,algorithm,string |>\n<code>\n#include <iostream>\n#include <cstring>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjcabttp.d(25): Error: declaration expected, not `<`

    /tmp/tmpzjcabttp.d(28): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjcabttp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return long((int)S[0] == 'I');\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogs6p6p5.d(17): Error: C style cast illegal, use `cast(int)S[0]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogs6p6p5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n   long boredom = 0;\n   for(auto const& s : S) {\n\
    \       if(s == \"I\" || s == \".\" || s == \"?\" || s == \"!\")\n           boredom++;\n\
    \   }\n   return(boredom);\n}\n</code>\n<|/ a dscore=0 tags=c++,c,string |>\n\
    <| a |>\nYou can use a map to count the number of boredom words in the given string.\n\
    <code>\n#include <iostream>\n#include <string>\n#include <unordered_map>\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3tftb82i.d(18): Error: basic type expected, not `&`

    /tmp/tmp3tftb82i.d(18): Error: no identifier for declarator `_error_`

    /tmp/tmp3tftb82i.d(18): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp3tftb82i.d(24): Error: declaration expected, not `<`

    /tmp/tmp3tftb82i.d(36): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(37): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(38): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(39): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(40): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(41): Error: declaration expected, not `assert`

    /tmp/tmp3tftb82i.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tftb82i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tint i;\n\tstring boredom_list[]\
    \ = {\"I\", \".\", \"!\", \"?\", \".\"};\n\tfor(i=0;i<S.size();i++)\n\t{\n\t\t\
    if((S[i]=='.')||(S[i]=='?')||(S[i]=='!'))\n\t\t{\n\t\t\tboredoms++;\n\t\t}\n\t\
    }\n\treturn boredoms;\n}\n//Write a program that asks the user to enter a string\
    \ of words until the\n//user inputs a \".\" and then prints out the number of\
    \ boredoms it had in\n//the string.\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqi7tra6q.d(19): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] boredom_list`

    /tmp/tmpqi7tra6q.d(19): Error: a struct is not a valid initializer for a `string[]`

    /tmp/tmpqi7tra6q.d(20): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqi7tra6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    for (auto s : S)\n      \
    \  if (s == \"I\") count++;\n    return count;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI appreciate the answer, but how do you implement this in C++? I'm not\
    \ really good with strings and vectors.\n<|/ c |>\n<| c |>\n`for (auto s : S)\
    \ { if (s == \"I\") count++; }`\n<|/ c |>\n<| c |>\nOkay so I tried it but when\
    \ I try compiling it I get \"incomplete type is not allowed\".\n<|/ c |>\n<| c\
    \ |>\nYou would have to either `#include <string>` at the top or write `for (auto\
    \ s : S) if (s == \"I\") count++;`\n<|/ c |>\n<| c |>\nThanks a lot, I added `#include\
    \ <string>` but now I get this error: *undefined reference to `is_bored'* I thought\
    \ `using namespace std;` would solve this.\n<|/ c |>\n<| a dscore=1 tags=c++,string\
    \ |>\nHere is one way to do it. The algorithm is just like the other answers except\
    \ that I'm using std::count_if instead of std::find\n<code>\n#include <algorithm>\n\
    #include <iostream>\n#include <string>\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqu595anb.d(18): Error: no identifier for declarator `s`

    /tmp/tmpqu595anb.d(18): Error: expression expected, not `:`

    /tmp/tmpqu595anb.d(18): Error: found `S` when expecting `;` following `for` condition

    /tmp/tmpqu595anb.d(22): Error: declaration expected, not `<`

    /tmp/tmpqu595anb.d(25): Error: unterminated character constant

    /tmp/tmpqu595anb.d(37): Error: unterminated string constant starting at /tmp/tmpqu595anb.d(37)

    /tmp/tmpqu595anb.d(37): Error: declaration expected, not `""`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqu595anb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count=0;\n    \n    for(int i = 0; i<S.length();\
    \ i++)\n    {\n        if(S[i] == 'I' || S[i] == '.')\n            count++;\n\
    \        else if(S[i] == '.' || S[i] == '!' || S[i] == '?')\n            count--;\n\
    \    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fnz1z_b.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fnz1z_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string w = S;\n    long boredoms = 0L;\n    int\
    \ i = 0;\n    \n    while (i != -1)\n    {\n        i = w.find(\"bore\", i);\n\
    \        if ( i == -1 )\n        {\n            return boredoms;\n        }\n\
    \        boredoms += 1;\n        \n        i += 5;\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpglwun_b4.d(23): Error: no property `find` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpglwun_b4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long N = 0;\n    for(const char& w: S) \n   \
    \ {\n        if(w == '.') \n        {\n            ++N;\n        }\n        else\
    \ if(w == '?' || w == '!') \n        {\n            ++N;\n        }\n    }\n \
    \   \n    return N;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2mfoeow.d(18): Error: no identifier for declarator `char`

    /tmp/tmpa2mfoeow.d(18): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2mfoeow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto len = S.size();\n    long boredom = 0;\n\
    \    \n    for(int i=0; i<len; i++)\n    {\n        if(S[i] == '.')\n        {\n\
    \            boredom++;\n            while(i != len-1 && S[i+1] != '.')\n    \
    \        {\n                boredom++;\n                i++;\n            }\n\
    \        }\n        else if(S[i] == '?')\n        {\n            boredom++;\n\
    \            while(i != len-1 && S[i+1] != '?')\n            {\n             \
    \   boredom++;\n                i++;\n            }\n        }\n        else if(S[i]\
    \ == '!')\n        {\n            boredom++;\n            while(i != len-1 &&\
    \ S[i+1] != '!')\n            {\n                boredom++;\n                i++;\n\
    \            }\n        }\n        else\n            boredom++;\n    }\n    return\
    \ boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy8i_eha6.d(17): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy8i_eha6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long n = 0;\n    for each (char c in S)\n   \
    \ {\n        if (c == 'I' || c == 'i')\n        {\n            n += 1;\n     \
    \   }\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmf5xb4a.d(18): Error: found `each` when expecting `(`

    /tmp/tmpdmf5xb4a.d(18): Error: found `in` when expecting `)`

    /tmp/tmpdmf5xb4a.d(18): Error: missing `{ ... }` for function literal

    /tmp/tmpdmf5xb4a.d(18): Error: found `S` when expecting `;` following statement

    /tmp/tmpdmf5xb4a.d(18): Error: expression expected, not `)`

    /tmp/tmpdmf5xb4a.d(19): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpdmf5xb4a.d(20): Error: expression expected, not `if`

    /tmp/tmpdmf5xb4a.d(21): Error: found `{` when expecting `)`

    /tmp/tmpdmf5xb4a.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmf5xb4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0, i, j, k;\n    \n    for(i\
    \ = 0; S[i]!='\\0'; ++i)\n    {\n        // We are at the start, check for boredoms\n\
    \        if(S[i]=='i' || S[i]=='i' || (S[i] == '.' && S[i+1] == '.') || (S[i]\
    \ == '.' && S[i+1] == '.' && S[i+2] == '.') || (S[i] == '.' && S[i+1] == '.' &&\
    \ S[i+2] == '.' && S[i+3] == '.') || (S[i] == '.' && S[i+1] == '.' && S[i+2] ==\
    \ '.' && S[i+3] == '.' && S[i+4] == '.') || (S[i] == '.' && S[i+1] == '.' && S[i+2]\
    \ == '.' && S[i+3] == '.' && S[i+4] == '.' && S[i+5] == '.') || (S[i] == '.' &&\
    \ S[i+1] == '.' && S[i+2] == '.' && S[i+3] == '.' && S[i+4] == '.' && S[i+5] ==\
    \ '.' && S[i+6] == '.') || (S[i] == '.' && S[i+1] == '.' && S[i+2] == '.' && S[i+3]\
    \ == '.' && S[i+4] == '.' && S[i+5] == '.' && S[i+6] == '.' && S[i+7] == '.')\
    \ || (S[i] == '.' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] == '.' && S[i+4]\
    \ == '.' && S[i+5] == '.' && S[i+6] == '.' && S[i+7] == '.' && S[i+8] == '.')\
    \ || (S[i] == '.' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] == '.' && S[i+4]\
    \ == '.' && S[i+5] == '.' && S[i+6] == '.' && S[i+7] == '.' && S[i+8] == '.' &&\
    \ S[i+9] == '.') || (S[i] == '.' && S[i+1] == '.' && S[i+2] == '.' && S[i+3] ==\
    \ '.' && S[i+4] == '.' && S[i+5] == '.' && S[i+6] == '.' && S[i+7] == '.' && S[i+8]\
    \ == '.' && S[i+9] == '.' && S[i+10] == '.') || (S[i] == '.' && S[i+1] == '.'\
    \ && S[i+2] == '.' && S[i+3] == '.' && S[i+4] == '.' && S[i+5] == '.' && S[i+6]\
    \ == '.' && S[i+7] == '.' && S[i+8] == '.' && S[i+9] == '.' && S[i+10] == '.'\
    \ && S[i+11] == '.') || (S[i] == '.' && S[i+1] == '\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long i = 0;\n    \n    for(int x = 0; x < S.length;\
    \ x++) {\n        if(S[x] == '.')\n            i++;\n        if(S[x] == '?')\n\
    \            i++;\n        if(S[x] == '!')\n            i++;\n    }\n    return\
    \ i;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdpx_97c9.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e55]

    ??:? void tmpdpx_97c9.__unittest_L29_C1() [0x427b17]

    ??:? void tmpdpx_97c9.__modtest() [0x427bd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa59]

    ??:? runModuleUnitTests [0x42b9c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428318]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    string temp;\n    size_t i = 0;\n    long boredoms\
    \ = 0;\n    temp = S;\n    while (i < temp.size() && (temp[i] != '.' || temp[i]\
    \ != '?' || temp[i] != '!'))\n        i++;\n    if (temp[i] == '.')\n        while\
    \ (i < temp.size() && temp[i] != '.')\n            i++;\n    while (i < temp.size()\
    \ && temp[i] == '.')\n    {\n        i++;\n        if (i < temp.size() && temp[i]\
    \ == '.')\n            i++;\n        if (i < temp.size() && temp[i] == '.')\n\
    \            i++;\n        if (i < temp.size() && temp[i] == '.')\n          \
    \  i++;\n        if (i < temp.size() && temp[i] == '.')\n            i++;\n  \
    \      if (i < temp.size() && temp[i] == '.')\n            i++;\n        if (i\
    \ < temp.size() && temp[i] == '.')\n            i++;\n        if (i < temp.size()\
    \ && temp[i] == '.')\n            i++;\n        if (i < temp.size() && temp[i]\
    \ == '.')\n            i++;\n        if (i < temp.size() && temp[i] == '.')\n\
    \            i++;\n        boredoms++;\n    }\n    return boredoms;\n}\n</code>\n\
    <|/ a tags=string,count,c |>\n<| a dscore=0 |>\nHere's a function that will count\
    \ the boredom in a string:\n<code>\nlong count_boredom(const char *s)\n{\n   \
    \ int n = 0;\n    while (*s != '\\0' && *s != '!' && *s != '?') {\n        if\
    \ (*s == '!') {\n            ++n;\n        } else if (*s == '?') {\n         \
    \   ++n;\n        }\n        ++s;\n    }\n    return n;\n}\n</code>\nAnd here's\
    \ one that counts the boredom in an array of chars:\n<code>\nlong count_boredom(const\
    \ char s[])\n{\n    int n = 0;\n    while (*s != '\\0') {\n        if (*s == '!')\
    \ {\n            ++n;\n        } else if (*s == '?') {\n            ++n;\n   \
    \     }\n        ++s;\n    }\n    return n;\n}\n</code>\n<|/ a tags=string,count,c\
    \ |>\n<| a dscore=0 tags=string,count,c |>\nI have used the below code to achieve\
    \ my goal. \n<code>\n #include <stdio.h>\n    #include <string.h>\n    void main()\
    \ {\n    char str[100], ch;\n    scanf(\"%s\", &str);\n    int count=0;\n    for(int\
    \ i=0; i<strlen(str); i++){\n    ch = str[i];\n    if(ch == '!' || ch == '?'){\n\
    \        count++;\n    }\n    }\n    printf(\"\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnicwba4o.d(51): Error: declaration expected, not `<`

    /tmp/tmpnicwba4o.d(54): Error: unterminated character constant

    /tmp/tmpnicwba4o.d(59): Error: declaration expected, not `while`

    /tmp/tmpnicwba4o.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnicwba4o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if (S[0] == 'I')\n    {\n        long boredom\
    \ = 0;\n        for (int i = 0; i < S.length; i++)\n        {\n            if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!')\n            {\n               \
    \ boredom++;\n            }\n        }\n        return boredom;\n    }\n    else\n\
    \    {\n        return 0;\n    }\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo2ni3w15.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpo2ni3w15.__unittest_L34_C1() [0x427b2f]

    ??:? void tmpo2ni3w15.__modtest() [0x427bec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc07]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc2d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300dc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]

    ??:? runModuleUnitTests [0x42b9dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428330]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\t// TODO\n\tlong n = 0;\n\treturn n;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7gpmrh43.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d8d]

    ??:? void tmp7gpmrh43.__unittest_L21_C1() [0x427a7a]

    ??:? void tmp7gpmrh43.__modtest() [0x427b0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bab3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a946]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fad9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff88]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]

    ??:? runModuleUnitTests [0x42b889]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count=0;\n    \n    for(int i=0;i<S.length();i++)\n\
    \    {\n        if(i==0||S[i]=='.'||S[i]=='?')\n        {\n            count=count+1;\n\
    \        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xoy7mms.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xoy7mms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long b=0;\n    int i;\n    for(i=0;i<S.length();i++)\n\
    \    {\n        if(S[i]=='i')\n            b+=1;\n    }\n    return b;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphcng3vch.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcng3vch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Your code here\n    string bored = std.string;\
    \ // string version of std.string\n    map<string, long> result;\n    \n    foreach\
    \ (char c, S) {\n        if (c == '.' || c == '?' || c == '!') {\n           \
    \ bored += c;\n        }\n    }\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwamz7q7s.d(19): Error: found `>` when expecting `.` following long

    /tmp/tmpwamz7q7s.d(21): Error: no identifier for declarator `S`

    /tmp/tmpwamz7q7s.d(21): Error: found `)` when expecting `;`

    /tmp/tmpwamz7q7s.d(26): Error: found `unittest` when expecting `)`

    /tmp/tmpwamz7q7s.d(37): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwamz7q7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tstring w = S;\n\tstring boredom = \"I\";\n\treturn\
    \ count(boredom,w,\".\",\".\",\".\",\".\",\".\",\".\",\".\");\n}\n/*\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkmy6d6y_.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmy6d6y_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int counter = 0;\n    for (auto it = S.cbegin();\
    \ it != S.cend(); ++it) \n    {\n        if (*it == ')') \n        {\n       \
    \     counter++;\n        }\n        else if (*it == '.') \n        {\n      \
    \      counter++;\n        }\n        else if (*it == '?') \n        {\n     \
    \       counter++;\n        }\n        else if (*it == '!') \n        {\n    \
    \        counter++;\n        }\n    }\n    return counter;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nIt looks like your function `is_bored` will report all\
    \ instances of a single boredom, instead of just one.\n<|/ c |>\n<| c |>\nGood\
    \ catch! I'm gonna look into it now\n<|/ c |>\n<| c |>\nI modified the code so\
    \ it would only report one. It should work now.\n<|/ c |>\n<| c |>\nI took your\
    \ updated code, it works perfectly now, thank you!\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <iterator>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmx9glwj.d(39): Error: declaration expected, not `<`

    /tmp/tmphmx9glwj.d(45): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmx9glwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int counter = 0;\n    int firstLetter = 0;\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdo7wya2j.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdo7wya2j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    for (int i = 0; i < S.length();\
    \ i++)\n    {\n        char C = S[i];\n        if ((C == '.' || C == '?' || C\
    \ == '!') && (S[i + 1] == '.' || S[i + 1] == '?' || S[i + 1] == '!'))\n      \
    \  {\n            bored++;\n        }\n    }\n    return bored;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp08xjakn4.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp08xjakn4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // The list of boredoms is defined as \"boredom\"\
    \ as a sequence of words\n    // that start with \"I\".\n    auto boredom = regex(R,\
    \ R\"(^I)\");\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi24210cm.d(19): Error: found `"(^I)"` when expecting `,`

    /tmp/tmpi24210cm.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi24210cm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (int i = 0; i < S.length();\
    \ i++)\n    {\n        if (S[i] == 'i' || S[i] == 'e' || S[i] == 'o' || S[i] ==\
    \ 'u')\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\nIn your solution you have a return statement in the for loop, which\
    \ means that after first iteration, it will never check any other characters in\
    \ your string.\nIn your solution, i will always be 0. So the if statement inside\
    \ your for loop will always be false.\n<|/ a tags=c++ |>\n<| c |>\nThat explains\
    \ the problem, but how to fix it?\n<|/ c |>\n<| c |>\nThanks, just tried that\
    \ but still the same error\n<|/ c |>\n<| c |>\nUpdated the answer, please check\
    \ that.\n<|/ c |>\n<| c |>\nWow, thank you so much, that was it, didn't know about\
    \ that\n<|/ c |>\n<| c |>\nIt would be better to use `std::string::find()` instead\
    \ of `strncmp()`.  Also - you should use `const` in your function parameters.\n\
    <|/ c |>\n<| a dscore=1 tags=c++ |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3q5lifhi.d(27): Error: declaration expected, not `<`

    /tmp/tmp3q5lifhi.d(41): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3q5lifhi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long nboredoms = 0;\n    map<string,long> boredWordsMap\
    \ = map_list_of(\"I\",0)(\"we\",0)(\"you\",0)(\"he\",0);\n    \n    for(string::iterator\
    \ ii = S.begin();ii!=S.end(); ++ii)\n    {\n        if(boredWordsMap.contains(*ii))\n\
    \        {\n            ++boredWordsMap[*ii];\n        }\n        else\n     \
    \   {\n            boredWordsMap[*ii] = 1;\n        }\n        \n        if(*ii=='?')\n\
    \        {\n            boredWordsMap[\".\"]++;\n        }\n        if(*ii=='!')\n\
    \        {\n            boredWordsMap[\"!\"]++;\n        }\n        if(*ii=='.'\
    \ || ii+1!=S.end() && *ii=='.')\n        {\n            boredWordsMap[\".\"]++;\n\
    \        }\n        if(*ii=='!' || ii+1!=S.end() && *ii=='!')\n        {\n   \
    \         boredWordsMap[\"!\"]++;\n        }\n        \n        \n        if(*ii=='.'\
    \ || ii+1!=S.end() && *ii=='.' || *ii=='!' || ii+1!=S.end() && *ii=='!')\n   \
    \     {\n            boredWordsMap[\".\"]++;\n            boredWordsMap[\"!\"\
    ]++;\n        }\n    }\n    \n    \n    \n    for(map<string,long>::iterator it\
    \ = boredWordsMap.begin();it!=boredWordsMap.end(); ++it)\n    {\n        string\
    \ word = it->first;\n        long num = it->second;\n        string word = it->first;\n\
    \        nboredoms += num;\n    }\n    \n    return nboredoms;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3i3jcck.d(18): Error: found `>` when expecting `.` following long

    /tmp/tmph3i3jcck.d(20): Error: use `.` for member lookup, not `::`

    /tmp/tmph3i3jcck.d(20): Error: found `ii` when expecting `;` following `for` condition

    /tmp/tmph3i3jcck.d(20): Error: expression expected, not `=`

    /tmp/tmph3i3jcck.d(20): Error: found `S` when expecting `)`

    /tmp/tmph3i3jcck.d(20): Error: found `)` when expecting `;` following statement

    /tmp/tmph3i3jcck.d(58): Error: found `>` when expecting `.` following long

    /tmp/tmph3i3jcck.d(58): Error: found `:` when expecting identifier following `long`.

    /tmp/tmph3i3jcck.d(58): Error: found `:` when expecting `;` following statement

    /tmp/tmph3i3jcck.d(58): Error: found `it` when expecting `;` following `for` condition

    /tmp/tmph3i3jcck.d(58): Error: expression expected, not `=`

    /tmp/tmph3i3jcck.d(58): Error: found `boredWordsMap` when expecting `)`

    /tmp/tmph3i3jcck.d(58): Error: found `)` when expecting `;` following statement

    /tmp/tmph3i3jcck.d(60): Error: use `.` for member lookup'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    \n    int i, count=0;\n    int last=S.length-1;\n\
    \    \n    for(i=0;i!=last;++i)\n    {\n        if(S[i]=='I' && S[i+1]=='o' &&\
    \ S[i+2]=='r' && S[i+3]=='e')\n        {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n*/\n// end Boredom Count\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqiqgcjrv.d(30): Error: declaration expected, not `*`

    /tmp/tmpqiqgcjrv.d(36): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(37): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(38): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(39): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(40): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(41): Error: declaration expected, not `assert`

    /tmp/tmpqiqgcjrv.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqiqgcjrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ans = 0;\n    for(int i = 0; i < S.length();\
    \ i++){\n        if (S[i] == 'I'){\n            ans++;\n        }\n    }\n   \
    \ return ans;\n}\n</code>\n<|/ a dscore=0 tags=algorithm,c++ |>\n<| a dscore=0\
    \ |>\nHere is a solution I wrote for you:\n<code>\n#include <bits/stdc++.h>\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqzwlnjv.d(25): Error: declaration expected, not `<`

    /tmp/tmpbqzwlnjv.d(35): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(36): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(37): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(38): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(39): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(40): Error: declaration expected, not `assert`

    /tmp/tmpbqzwlnjv.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqzwlnjv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0L;\n    for(int i=1; i<S.length();\
    \ i++){\n        if(S[i] == '.' || S[i] == '?' || S[i] == '!'){\n            boredoms++;\n\
    \        }\n    }\n    return boredoms;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks a lot for the answer, I really appreciate it! I'm kind of new in programming\
    \ and I don't really understand most of what you wrote... so if you could explain\
    \ to me what does exactly \"for\" do and what \"str\" means, would be really appreciate\
    \ it!\n<|/ c |>\n<| c |>\n`str` is the string that you are looping through.\n\
    <|/ c |>\n<| c |>\nThis is not a good answer. You've given no explanation, not\
    \ even the minimal code needed to solve the problem. Your answer should be complete\
    \ by all means. Not just some code.\n<|/ c |>\n<| a dscore=0 tags=string,c++,loops\
    \ |>\nSince you haven't shown us your attempt at a solution, I'll give you a hint.\n\
    The function is_bored is almost correct, but there are several problems:\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphj8bn94k.d(25): Error: declaration expected, not `<`

    /tmp/tmphj8bn94k.d(28): Error: unterminated character constant

    /tmp/tmphj8bn94k.d(28): Error: unterminated character constant

    /tmp/tmphj8bn94k.d(34): Error: unterminated character constant

    /tmp/tmphj8bn94k.d(37): Error: unterminated character constant

    /tmp/tmphj8bn94k.d(37): Error: unterminated character constant

    /tmp/tmphj8bn94k.d(43): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(44): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(45): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(46): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(47): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(48): Error: declaration expected, not `assert`

    /tmp/tmphj8bn94k.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphj8bn94k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return std.string.find(S, \"I\");\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnco7ul1q.d(17): Error: undefined identifier `string` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnco7ul1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int I=0;\n    for(string::iterator i=S.begin();i!=S.end();++i)\n\
    \        if(i==\"I\")\n            I++;\n    return I;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqhbv0obc.d(18): Error: use `.` for member lookup, not `::`

    /tmp/tmpqhbv0obc.d(18): Error: found `i` when expecting `;` following `for` condition

    /tmp/tmpqhbv0obc.d(18): Error: expression expected, not `=`

    /tmp/tmpqhbv0obc.d(18): Error: found `S` when expecting `)`

    /tmp/tmpqhbv0obc.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhbv0obc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0L;\n    \n    foreach(char c\
    \ in S)\n    {\n        if(c == 'I' || c == 'i' || c == '!' || c == '.')\n   \
    \     {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\n\
    </cell>\n<cell>\n%%solution\nfunction is_bored(S)\n    S = S.toLowerCase();\n\
    \    \n    boredoms = 0L;\n    \n    for(var i = 0; i < S.length; i++)\n     \
    \   if S[i] == 'i' || S[i] == '!' || S[i] == '.'\n            boredoms++;\n  \
    \          \n    return boredoms;\nend\n</cell>\n<cell>\n%%python\n# Test your\
    \ solution below\nS = \"Hello world\"\nassert is_bored(S) == 0\nS = \"The sky\
    \ is blue. The sun is shining. I love this weather.\"\nassert is_bored(S) == 1\n\
    </cell>\n<text>\n2) Be more Pythonic\nBe more Pythonic means use as few lines\
    \ as possible. Also, try to express your code in as much idiomatic Pythonic way\
    \ as possible.\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwcrgkvk.d(19): Error: found `in` when expecting `;`

    /tmp/tmpxwcrgkvk.d(28): Error: declaration expected, not `<`

    /tmp/tmpxwcrgkvk.d(34): Error: no identifier for declarator `boredoms`

    /tmp/tmpxwcrgkvk.d(34): Error: declaration expected, not `=`

    /tmp/tmpxwcrgkvk.d(36): Error: declaration expected, not `for`

    /tmp/tmpxwcrgkvk.d(36): Error: no identifier for declarator `i`

    /tmp/tmpxwcrgkvk.d(36): Error: declaration expected, not `<`

    /tmp/tmpxwcrgkvk.d(36): Error: no identifier for declarator `i`

    /tmp/tmpxwcrgkvk.d(36): Error: declaration expected, not `++`

    /tmp/tmpxwcrgkvk.d(40): Error: declaration expected, not `return`

    /tmp/tmpxwcrgkvk.d(42): Error: no identifier for declarator `end`

    /tmp/tmpxwcrgkvk.d(42): Error: declaration expected, not `<`

    /tmp/tmpxwcrgkvk.d(58): Error: declaration expected, not `assert`

    /tmp/tmpxwcrgkvk.d(59): Error: declaration expected, not `assert`

    /tmp/tmpxwcrgkvk.d(60): Error: declaration expected, not `assert`

    /tmp/tmpxwcrgkvk.d(61): Error: declaration expected, not `assert`'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Your code here\n    long cnt=0;\n    foreach(char\
    \ c in S)\n    {\n        if (c == 'i' || c == '.')\n            cnt++;\n    }\n\
    \    return cnt;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote this\
    \ code to get the boredom count.\n<code>\n// Returns 0 if S contains no 'boredom'\
    \ words (ex. 'i' or '!' or '!..')\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3m4z9fss.d(19): Error: found `in` when expecting `;`

    /tmp/tmp3m4z9fss.d(26): Error: declaration expected, not `<`

    /tmp/tmp3m4z9fss.d(36): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(37): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(38): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(39): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(40): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(41): Error: declaration expected, not `assert`

    /tmp/tmp3m4z9fss.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3m4z9fss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto len = S.length();\n    if(len<1) return\
    \ 0L;\n    string temp1 = S.substr(0, 1);\n    string temp2 = S.substr(0, len);\n\
    \    if(temp1 == \"I\" && temp2 == \"I\") return 1L;\n    else if(temp1 == \"\
    I\" && temp2 == \"!\") return 2L;\n    else if(temp1 == \"I\" && temp2 == \"?\"\
    ) return 3L;\n    else if(temp1 == \"!\" && temp2 == \"!\") return 1L;\n    else\
    \ if(temp1 == \"!\" && temp2 == \"?\") return 2L;\n    else if(temp1 == \"!\"\
    \ && temp2 == \"I\") return 3L;\n    else if(temp1 == \"?\" && temp2 == \"?\"\
    ) return 1L;\n    else if(temp1 == \"?\" && temp2 == \"!\") return 2L;\n    else\
    \ if(temp1 == \"?\" && temp2 == \"I\") return 3L;\n    else if(temp1 == \".\"\
    \ && temp2 == \".\") return 1L;\n    else if(temp1 == \"!\" || temp1 == \"?\"\
    \ || temp1 == \".\") return 0L;\n    else return -1L;\n}\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sjdfylj.d(17): Error: no property `length` for type `string`

    /tmp/tmp_sjdfylj.d(19): Error: no property `substr` for type `string`

    /tmp/tmp_sjdfylj.d(20): Error: no property `substr` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sjdfylj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int count = 0;\n    for(int i = 0; i < S.length();\
    \ i++)\n    {\n        if (S[i] == '.')\n        {\n            count++;\n   \
    \     }\n    }\n    return count;\n}\n/* Write a function that takes a string\
    \ and returns another string by replacing\n   all but the first and last charachters\
    \ of the string with '.'.\n   \n   Example \n   >>> replace_first_last(\"Hello,\
    \ world!\", \"Hello\", \"Bye\")\n   \"Bye.world!\" \n*/\nstring replace_first_last(string\
    \ S, string first, string last) \n{\n    string result = \"\";\n    for(int i\
    \ = 0; i < S.length(); i++)\n    {\n        if (S[i] == first && i != 0) // if\
    \ first char and is not first char\n        {\n            result = result + \"\
    .\";\n        }\n        if (S[i] == last && i != S.length() - 1) // if last char\
    \ and is not last char\n        {\n            result = result + \". \";\n   \
    \     }\n        else\n        {\n            result = result + S[i];\n      \
    \  }\n    }\n    return result;\n}\n/* Write a function that takes a string and\
    \ returns another string by replacing all\n   but the first charachters of the\
    \ string with '.' and last charachters with '.'.\n   \n   Example\n   >>> replace_first_last_dot(\"\
    Hello, world!\", \"Hello\", \"Bye\")\n   \"Bye.world.!\" \n*/\nstring replace_first_last_dot(string\
    \ S, string first, string last) \n{\n    string result = \"\";\n    for(int i\
    \ = 0; i < S.length(); i++)\n    {\n        if (S[i] == first && i != 0) // if\
    \ first char and is not first char\n        {\n            result = result + \"\
    .\";\n        }\n        if (S[i] == last && i != S.length() - 1) // if last char\
    \ and is not last char\n        {\n            result = result + \".\";\n    \
    \    }\n        else\n        {\n            result = result + S[i];\n       \
    \ }\n    }\n    return result;\n}\n/* Write a function that takes a string and\
    \ returns another string by replacing all\n   but the first and last charachters\
    \ of the string with '.' \n   \n   Example\n   >>> replace_first_last_dot_two(\"\
    Hello, world!\", \"Hello\", \"Bye\")\n   \"Bye.world.!\" \n*/\nstring replace_first_last_dot_two(string\
    \ S, string first, string last) \n{\n    string result = \"\";\n    for(int i\
    \ = 0; i < S.length(); i++)\n    {\n        if (S[i] == first && i != 0) // if\
    \ first char and is not first char\n        {\n            result = result + \"\
    .\";\n        }\n        if (S[i] == last && i != S.length() - 1) // if last char\
    \ and is not last char\n        {\n            result = result + \".\";\n    \
    \    }\n        else\n        {\n            result = result \nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvr3cto4v.d(104): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpvr3cto4v.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpvr3cto4v.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpvr3cto4v.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvr3cto4v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long b = 0;\n    \n    for (int i = 0; i < S.size();\
    \ i++)\n    {\n        char c = S[i];\n        if (c != '.')\n        {\n    \
    \        if (c == '?')\n            {\n                b++;\n            }\n \
    \           else if (c == '!')\n            {\n                b--;\n        \
    \    }\n        }\n    }\n    \n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mwlz7ce.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mwlz7ce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(string::iterator\
    \ p = S.begin(); p != S.end(); ++p)\n    {\n        if (*p == 'I')\n         \
    \   boredoms += 1;\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2jnqqmqw.d(18): Error: use `.` for member lookup, not `::`

    /tmp/tmp2jnqqmqw.d(18): Error: found `p` when expecting `;` following `for` condition

    /tmp/tmp2jnqqmqw.d(18): Error: expression expected, not `=`

    /tmp/tmp2jnqqmqw.d(18): Error: found `S` when expecting `)`

    /tmp/tmp2jnqqmqw.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2jnqqmqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tstringstream ss (S);\n\tstring word;\n\tlong count\
    \ = 0;\n\twhile (ss >> word)\n\t\tif (word == \"I\")\n\t\t\tcount ++;\n\treturn\
    \ count;\n}\n\"\"\"\n</cell>\n<text>\nExercise\nWrite a Python function is_palindrome\
    \ that tests if a string is a palindrome.\nA palindrome is a string that reads\
    \ the same backward as forward, e.g. \"racecar\" is a palindrome.\nWrite your\
    \ function so that it returns the number of palindromes \n    in a given string.\
    \  For example, \n    \n    >>> is_palindrome(\"racecar\")\n    1\n    >>> is_palindrome(\"\
    noon\")\n    0\n    \n    Here's how is_palindrome works:\n    \n    You have\
    \ a string that always reads the same forward. \n    You read a word from the\
    \ string. \n    If the word matches the same word that was read\n    forward,\
    \ you keep going. \n    When you read the last word, you know that it's not a\
    \ palindrome.\n   \n    For example, \n    >>> is_palindrome(\"racecar\")\n  \
    \  1\n    >>> is_palindrome(\"noon\")\n    0\n    \n    Here's how you might write\
    \ a function that returns the number of palindromes:\n   \n    >>> def count_palindromes(S):\n\
    \    ...     i = 0\n    ...     count = 0\n    ...     while i < len(S):\n   \
    \ ...         j = i\n    ...         while j > 0 and S[j-1] == S[j]:\n    ...\
    \             j -= 1\n    ...         if j == 0: # S[j-1] equals S[j] for the\
    \ first time, j is now 0\n    ...             count += 1\n    ...         i +=\
    \ 1\n    ...     return count\n   \n    Here's a problem with your code:\n   \n\
    \    >>> count_palindromes(\"racecar\")\n    1\n    >>> count_palindromes(\"noon\"\
    )\n    0\n    \n    You can see why this fails. When you call count_palindromes(\"\
    \"), it returns 0. It should be 1, since \"\" doesn't equal \"I\".\n    \n   \
    \ Write a function that returns the number of palindromes in a string, along with\
    \ its reverse version. \n    For example,\n   \n    >>> count_palindromes(\"racecar\"\
    )\n    (1, 'racecar')\n    >>> count_palindromes(\"noon\")\n    (0, 'noon')\n\
    \    \n    Here's how count_palindromes works:\n    \n    You have a string that\
    \ always reads the same forward. \n    You read a word from the string. \n\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9j4ktzm.d(25): Error: declaration expected, not `""`

    /tmp/tmpk9j4ktzm.d(98): Error: unterminated string constant starting at /tmp/tmpk9j4ktzm.d(98)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk9j4ktzm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto bored = 0;\n    int i = 0;\n    for (i;\
    \ i < S.length(); i++)\n    {\n        if (isalpha(s[i]) && s[i] == 'I')\n   \
    \     {\n            bored++;\n        }\n    }\n    return bored;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_877igt9.d(19): Error: `i` has no effect

    /tmp/tmp_877igt9.d(19): Error: no property `length` for type `string`

    /tmp/tmp_877igt9.d(21): Error: undefined identifier `isalpha`

    /tmp/tmp_877igt9.d(21): Error: undefined identifier `s`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_877igt9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count_boredoms(S) - 1;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0m4cw5jl.d(17): Error: undefined identifier `count_boredoms`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0m4cw5jl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if(S != \"\" && S != \"I\")\n    {\n        return\
    \ 1;\n    }\n    return 0;\n}\n/*\n    \n    \n    \n    \n    Problem 2\n   \
    \ \n    \n    \n*/\nlong is_sad(string S) \n{\n    if (S == \"\")\n    {\n   \
    \     return 1;\n    }\n    int L = length(S);\n    long n = 0;\n    for (int\
    \ i=0; i<L; i++)\n    {\n        if (S[i] == '?' || S[i] == '!')\n        {\n\
    \            n++;\n        }\n    }\n    return n;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0cjcns4r.d(50): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0cjcns4r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    \n    for(string::iterator\
    \ it = S.begin();it != S.end();++it)\n    {\n        if (*it == 'I' && (it+1)\
    \ != '!')\n        {\n            ++result;\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\nNote that I didn't do any error checking - this version\
    \ will do nothing if the string isn't long enough to contain a sentence, and it'll\
    \ crash if the string contains any characters not in the given set (I chose 'I'\
    \ here but you might want to choose something else).\n<|/ a tags=c++,c,algorithm,string\
    \ dscore=1 |>\n<| c |>\nThis doesn't work either.  It doesn't count boredoms in\
    \ a sentence that starts with \"I\" in the middle of the sentence.  Also, I think\
    \ he wants to count boredoms at the beginning of a sentence that doesn't start\
    \ with an \"I\".  For example, `is_bored(\"This was a boredom at the end.\")`\
    \ should return 0, not 1.\n<|/ c |>\n<| c |>\nOops, I missed that.  However, it\
    \ still doesn't work when there are sentences in the string that don't begin with\
    \ an \"I\".  Try `is_bored(\"Hello world\")`, which returns 1 instead of 0.\n\
    <|/ c |>\n<| c |>\nYeah, it appears I misread the question and thought he wanted\
    \ to count boredoms at the beginning of a sentence that didn't start with an \"\
    I\".  See my edited answer for a version that should work for the first example\
    \ case.\n<|/ c |>\n<| a |>\nYou can find the start of a sentence by finding the\
    \ first '.' in the string.  Then you can find the first 'I' after that '.' (either\
    \ after the first '.' or after the first '!').\nYou can then simply compare the\
    \ first character of the sentence to the first character of the string you're\
    \ counting.\n<|/ a dscore=1 tags=c++,c,algorithm,string |>\n<| a dscore=1 |>\n\
    To count boredoms, you need to find the position of the first word starting with\
    \ \"I\" in the string. Your code will fail for the first input string you gave\
    \ because 'I' is not present at the start of the string. You need to check for\
    \ that before checking the first char in the string. You also need to skip a non-\"\
    I\" word at the start. Here is how I would do it:\n<code>\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoe5gi36e.d(19): Error: use `.` for member lookup, not `::`

    /tmp/tmpoe5gi36e.d(19): Error: found `it` when expecting `;` following `for` condition

    /tmp/tmpoe5gi36e.d(19): Error: expression expected, not `=`

    /tmp/tmpoe5gi36e.d(19): Error: found `S` when expecting `)`

    /tmp/tmpoe5gi36e.d(19): Error: found `)` when expecting `;` following statement

    /tmp/tmpoe5gi36e.d(29): Error: declaration expected, not `<`

    /tmp/tmpoe5gi36e.d(30): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(30): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(30): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(33): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(33): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(33): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(36): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(36): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(39): Error: unterminated character constant

    /tmp/tmpoe5gi36e.d(43): Error: unterminate'
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint count = 0;\n\tfor(auto &c: S)\n\t{\n\t\tif(c\
    \ == '.' || c == '?' || c == '!')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n/*\n\
    \    \n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1L\n    \n*/\nlong is_bored(string S)\
    \ \n{\n\tint count = 0;\n\tfor(auto &c: S)\n\t{\n\t\tif(c == '.' || c == '?' ||\
    \ c == '!')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\n/*\n    \n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0L\n    >>> is_bored(\"The sky is blue. The sun is shining. I\
    \ love this weather\")\n    1L\n    \n*/\nlong is_bored(string S) \n{\n\tint count\
    \ = 0;\n\tfor(auto &c: S)\n\t{\n\t\tif(c == '.' || c == '?' || c == '!')\n\t\t\
    \tcount++;\n\t}\n\treturn count;\n}\n/*\n    \n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1L\n    \n*/\nlong is_bored(string S) \n{\n\tint count = 0;\n\tfor(auto\
    \ &c: S)\n\t{\n\t\tif(c == '.' || c == '?' || c == '!')\n\t\t\tcount++;\n\t}\n\
    \treturn count;\n}\n/*\n    \n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rfvju5a.d(18): Error: basic type expected, not `&`

    /tmp/tmp0rfvju5a.d(18): Error: no identifier for declarator `_error_`

    /tmp/tmp0rfvju5a.d(18): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp0rfvju5a.d(41): Error: basic type expected, not `&`

    /tmp/tmp0rfvju5a.d(41): Error: no identifier for declarator `_error_`

    /tmp/tmp0rfvju5a.d(41): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp0rfvju5a.d(64): Error: basic type expected, not `&`

    /tmp/tmp0rfvju5a.d(64): Error: no identifier for declarator `_error_`

    /tmp/tmp0rfvju5a.d(64): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp0rfvju5a.d(87): Error: basic type expected, not `&`

    /tmp/tmp0rfvju5a.d(87): Error: no identifier for declarator `_error_`

    /tmp/tmp0rfvju5a.d(87): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp0rfvju5a.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0rfvju5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint bored=0;\n\tint i=0;\n\twhile (i<S.length())\n\
    \t{\n\t\tif (S[i]=='.' || S[i]=='?' || S[i]=='!')\n\t\t\tbored++;\n\t\ti++;\n\t\
    }\n\treturn bored+1;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3njotlka.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3njotlka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long sum = 0;\n    for (int i=0; i<S.length();\
    \ ++i)\n    {\n        if (S[i] == 'I') sum += 1;\n        else if (S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!')\n            sum += 1;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmc6w4y2j.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmc6w4y2j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint num_bored = 0;\n\tfor (int i = 0; i < S.length();\
    \ i++) \n\t{\n\t\tif (S[i] == 'I') \n\t\t{\n\t\t\tnum_bored++;\n\t\t}\n\t}\n\t\
    \n\treturn num_bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibu2b1le.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibu2b1le.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint bored = 0;\n\tint i = 0;\n\twhile (i<S.length())\n\
    \t{\n\t\tstring word = S.substr(i,S.length());\n\t\tif ((word.find(\"I\")==0)\
    \ && (word.find(\".\")!=string::npos) && (word.find(\"!\")!=string::npos))\n\t\
    \t{\n\t\t\tbored = 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn bored;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_odf2qf.d(22): Error: found `:` when expecting `)`

    /tmp/tmp4_odf2qf.d(22): Error: found `:` when expecting `)`

    /tmp/tmp4_odf2qf.d(22): Error: found `)` when expecting `;` following statement

    /tmp/tmp4_odf2qf.d(22): Error: found `&&` instead of statement

    /tmp/tmp4_odf2qf.d(28): Error: declaration expected, not `return`

    /tmp/tmp4_odf2qf.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_odf2qf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    for (int i = 0; i < length(S);\
    \ i++) {\n        if (S[i] == 'I') {\n            bored++;\n        }\n    }\n\
    \    return bored;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpejjnc5_8.d(18): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejjnc5_8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    auto pos = find(begin(S, upper), end(S, upper),\
    \ 'I');\n    if (pos == end(S, upper)) {\n        return 0;\n    }\n    \n   \
    \ long result = 0;\n    for (auto i = pos + 1; i < length(S, upper); ++i) {\n\
    \        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            ++result;\n\
    \        }\n    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdohumtel.d(17): Error: undefined identifier `find`, did you mean
    function `fmod`?

    /tmp/tmpdohumtel.d(18): Error: undefined identifier `end`

    /tmp/tmpdohumtel.d(23): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdohumtel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(string::iterator\
    \ it = S.begin(); it != S.end(); ++it) \n    {\n        if(*it == 'I') boredoms++;\n\
    \    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_i721kp.d(18): Error: use `.` for member lookup, not `::`

    /tmp/tmp6_i721kp.d(18): Error: found `it` when expecting `;` following `for` condition

    /tmp/tmp6_i721kp.d(18): Error: expression expected, not `=`

    /tmp/tmp6_i721kp.d(18): Error: found `S` when expecting `)`

    /tmp/tmp6_i721kp.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6_i721kp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    vector<string> v;\n    v.push_back(\"I\");\n\
    \    return v.count_if(S);\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8ivkfwn.d(17): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8ivkfwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0L;\n    string::iterator I =\
    \ S.begin();\n    while (I != S.end()) {\n        if ((*I) == 'I') \n        \
    \    boredoms = boredoms + 1L;\n        I++;\n    }\n    return boredoms;\n}\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcuj3zf_.d(18): Error: use `.` for member lookup, not `::`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcuj3zf_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  long B;\n  B = 0;\n  string word;\n  \n  for (int\
    \ i = 0; i < S.length; i++) \n  {\n    word = S[i];\n    if (word[0] == 'I')\n\
    \    {\n      B++;\n    }\n  }\n  return B;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpftcmrimo.d(23): Error: cannot implicitly convert expression `S[cast(ulong)i]`
    of type `immutable(char)` to `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpftcmrimo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    foreach (const char &word,\
    \ S) {\n        if (word == \"I\") {\n            result += (1L);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61m16ez1.d(18): Error: no identifier for declarator `char`

    /tmp/tmp61m16ez1.d(18): Error: found `&` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61m16ez1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i = 0;\n    long bored = 0;\n    while (i<S.length())\n\
    \    {\n        if (S[i] == 'I')\n        {\n            bored++;\n        }\n\
    \        i++;\n    }\n    return bored;\n}\nunittest\n{\n    alias candidate =\
    \ is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi9gpdip5.d(19): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi9gpdip5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    foreach (char c in S)\
    \ {\n        if (c != '.' && c != '?' && c != '!')\n            boredom++;\n \
    \   }\n    return boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n\
    \    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpac04f26t.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac04f26t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    foreach(char c in S) \n\
    \    {\n        if (c == '.' || c == '?' || c == '!') boredom++;\n    }\n    return\
    \ boredom;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee_tjtjm.d(18): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee_tjtjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0;\n\tchar boredom_word[30];\n\t\
    string word;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyx5uh1my.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `char[30] boredom_word`

    /tmp/tmpyx5uh1my.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx5uh1my.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong counter = 0;\n\tauto firstWord = S.find(\"\
    I\");\n\tif (firstWord != string::npos) counter++;\n\tauto lastWord = S.find(\"\
    .\")\n\tif (lastWord != string::npos) counter++;\n\treturn counter;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcgq4wq1.d(19): Error: found `:` when expecting `)`

    /tmp/tmpjcgq4wq1.d(19): Error: found `:` instead of statement

    /tmp/tmpjcgq4wq1.d(21): Error: semicolon expected following auto declaration,
    not `if`

    /tmp/tmpjcgq4wq1.d(21): Error: found `:` when expecting `)`

    /tmp/tmpjcgq4wq1.d(21): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcgq4wq1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    map<string, long> counts;\n    string delimiters\
    \ = \". ? !\";\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcrbo_74.d(17): Error: found `>` when expecting `.` following long

    /tmp/tmpwcrbo_74.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcrbo_74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong i, j, k, boredoms = 0;\n\tfor (i=1; i<=S.length();\
    \ i++) \n\t{\n\t\tif (S[i] == '.' || S[i] == '?' || S[i] == '!')\n\t\t{\n\t\t\t\
    if (S[i-1] == 'I') \n\t\t\t{\n\t\t\t\tboredoms++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ boredoms;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqeil0s_.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqeil0s_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom_count = 0; \n    string delimiters\
    \ = \".?!\";\n    foreach(char delimiter in delimiters)\n    {\n        long delimiter_count\
    \ = 0;\n        foreach(char word in S)\n        {\n            if(word == delimiter)\n\
    \                delimiter_count++;\n        }\n        if(delimiter_count ==\
    \ 1)\n            boredom_count++;\n    }\n    return boredom_count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is wrong. For example, for input `Hello world.?` the answer\
    \ should be 3, not 2. There are 2 delimiters, one in \"Hello\" and one in \".?\"\
    .\n<|/ c |>\n<| c |>\nAh, yes, you're right. I'm thinking about it more right\
    \ now and I see what I've done.\n<|/ c |>\n<| c |>\nI'm thinking about it again\
    \ and I think a different approach would be better. Let me think about it for\
    \ a bit.\n<|/ c |>\n<| a dscore=2 |>\nIf this were your assignment, you could\
    \ just use regex:\n<code>\nunittest\n{\n    alias candidate = is_bored;\n\n  \
    \  assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtp014_b.d(19): Error: found `in` when expecting `;`

    /tmp/tmpqtp014_b.d(22): Error: found `in` when expecting `;`

    /tmp/tmpqtp014_b.d(32): Error: declaration expected, not `<`

    /tmp/tmpqtp014_b.d(38): Error: unterminated character constant

    /tmp/tmpqtp014_b.d(38): Error: unterminated character constant

    /tmp/tmpqtp014_b.d(38): Error: unterminated character constant

    /tmp/tmpqtp014_b.d(41): Error: unterminated character constant

    /tmp/tmpqtp014_b.d(50): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(51): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(52): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(53): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(54): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(55): Error: declaration expected, not `assert`

    /tmp/tmpqtp014_b.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtp014_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long result = 0;\n    bool borem = false;\n \
    \   string delimiter = \". ? !\";\n    \n    for(string::size_type i = 0; i <\
    \ S.size(); i++){\n        if(S[i] == 'I'){\n            borem = true;\n     \
    \   }\n    }\n    if(borem)\n        result += 1L;\n    return result;\n}\n/*\
    \ \nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff0ignye.d(21): Error: use `.` for member lookup, not `::`

    /tmp/tmpff0ignye.d(21): Error: found `i` when expecting `;` following `for` condition

    /tmp/tmpff0ignye.d(21): Error: expression expected, not `=`

    /tmp/tmpff0ignye.d(21): Error: found `0` when expecting `)`

    /tmp/tmpff0ignye.d(21): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmpff0ignye.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmpff0ignye.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff0ignye.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int I = 0;\n    foreach (char c in S) {\n   \
    \     switch (c) {\n        case 'I':\n            I++;\n            break;\n\
    \        }\n    }\n    return I;\n}\n</cell>\n<cell>\n%simulate is_bored\n</cell>\n\
    <cell>\n%%python\nimport std.stdio;\nimport std.string;\nimport std.math;\n/*\n\
    unittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\"\
    ) == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4mkcn_p.d(18): Error: found `in` when expecting `;`

    /tmp/tmpx4mkcn_p.d(27): Error: declaration expected, not `<`

    /tmp/tmpx4mkcn_p.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4mkcn_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int count=0;\n    for(int i=0;i<S.length();i++)\n\
    \    {\n        if(S[i]==\"I\" || S[i]==\".\")\n            count++;\n    }\n\
    \    return count;\n}\n</code>\n<|/ a |>\n<| c |>\nThis would be a great answer\
    \ if you provided an explanation as to why your code should work and why it doesn't.\n\
    <|/ c |>\n<| c |>\nHis code is counting all occurences of either \"I\" or \".\"\
    \ within the string \"S\". It isn't counting \"I\" as a sentence delimiter but\
    \ as a word delimiter. He also didn't use \".length()\" because he wanted an algorithm\
    \ as opposed to a specific function to count sentences.\n<|/ c |>\n<| c |>\nHe\
    \ didn't mention what he expects. I just gave him a general overview on what he\
    \ might expect.\n<|/ c |>\n<| a tags=string,c |>\n<code>\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpea0desct.d(25): Error: declaration expected, not `<`

    /tmp/tmpea0desct.d(28): Error: unterminated character constant

    /tmp/tmpea0desct.d(31): Error: unterminated character constant

    /tmp/tmpea0desct.d(31): Error: unterminated character constant

    /tmp/tmpea0desct.d(34): Error: unterminated character constant

    /tmp/tmpea0desct.d(42): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(43): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(44): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(45): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(46): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(47): Error: declaration expected, not `assert`

    /tmp/tmpea0desct.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpea0desct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    // Complete this function\n    size_t count =\
    \ 0;\n    size_t pos = 0;\n    size_t len = S.length();\n    \n    \n    while(pos\
    \ < len) {\n        char c = S[pos];\n        \n        if(pos == 0 || c == '.'\
    \ || c == '?' || c == '!') {\n            count++;\n        }\n        \n    \
    \    pos++;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9pzazweh.d(20): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9pzazweh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    if(S.length<3) return 0L;\n    string a = \"\"\
    ;\n    string b = \"\";\n    string c = \"\";\n    for(int i = 0; i<S.length-1;\
    \ i++){\n        char c = S[i];\n        if(isupper(c)) b+=c;\n        else a\
    \ += c;\n        if(islower(c)) c+=c;\n        else c += c;\n    }\n    long n\
    \ = 0;\n    if(S[0] == 'I'){\n        n = 1;\n    }\n    if(b.find(\"!\") != string::npos)\
    \ {\n        n++;\n    }\n    if(b.find(\"?\") != string::npos) {\n        n++;\n\
    \    }\n    if(b.find(\".\") != string::npos) {\n        n++;\n    }\n    if(b.length()>=3\
    \ && b[0] == 'I' && b[1] == 'I' && b[2] == 'I'){\n        n++;\n    }\n    if(a.length()>=3\
    \ && a[0] == 'I' && a[1] == 'I' && a[2] == 'I'){\n        n++;\n    }\n    return\
    \ n;\n}\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnbli4izk.d(32): Error: found `:` when expecting `)`

    /tmp/tmpnbli4izk.d(32): Error: found `:` instead of statement

    /tmp/tmpnbli4izk.d(35): Error: declaration expected, not `if`

    /tmp/tmpnbli4izk.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnbli4izk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long cnt = 0;\n    for (int i=0;i<S.length();i++)\
    \ {\n        if (S[i] == '.') {\n            cnt++;\n        }\n        if (S[i]\
    \ == '?') {\n            cnt++;\n        }\n        if (S[i] == '!') {\n     \
    \       cnt++;\n        }\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp50tmsxp.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp50tmsxp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n  int i, N = S.length();\n  long boredoms = 0L;\n\
    \  \n  for (i=0; i < N; i++)\n    if (S[i]=='I') \n    {\n      boredoms++;\n\
    \      break;\n    }\n  return boredoms;\n}\n</code>\n<|/ a tags=string,c++,c,arrays\
    \ dscore=0 |>\n<| c |>\nThis looks like a great solution. I'll try to get this\
    \ implemented. Thanks!\n<|/ c |>\n<| c |>\nI got it to compile but I'm getting\
    \ this error when I run it: Unhandled exception at 0x00007FFD30F4B66D in ArrayAssignments.exe:\
    \ Microsoft C++ exception: std::out_of_range at memory location 0x000000000040FEE0.\n\
    <|/ c |>\n<| c |>\nThe line `if (S[i]=='I')` was giving the error because you\
    \ were accessing the string past its capacity. By changing the line to `if (S[i]=='I'\
    \ && i<N-1)`, your program would no longer crash. Does this solve your problem?\n\
    <|/ c |>\n<| c |>\nNope, still crashes. I tried the code you suggested and the\
    \ program outputted \"I\" and still crashes. I think my problem is somewhere else.\
    \ I've posted the full code if you could take a look. Thanks for your help though!\
    \ I appreciate it.\n<|/ c |>\n<| c |>\nIt works on my machine, with your example\
    \ input.\n<|/ c |>\n<| a dscore=0 |>\nYou can use a std::vector to store all of\
    \ the sentences and then check the first element to see if it is an \"I\" with\
    \ std::find \n<code>\n#include <iostream>\n#include <string>\n#include <vector>\n\
    using namespace std;\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmpbzxf16.d(28): Error: declaration expected, not `<`

    /tmp/tmpmpbzxf16.d(31): Error: unterminated character constant

    /tmp/tmpmpbzxf16.d(34): Error: unterminated character constant

    /tmp/tmpmpbzxf16.d(34): Error: exponent required for hex float

    /tmp/tmpmpbzxf16.d(40): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmpbzxf16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    int i=0;\n    long count=0;\n    for(int i=0;i<S.length()-1;i++)\n\
    \    {\n        if(S[i]=='I')\n        {\n            count=1;\n            break;\n\
    \        }\n    }\n    return count;\n}\n</code>\n<|/ a tags=arrays,c,string,boolean\
    \ |>\n<| c |>\nthank you for providing your solution, it works as intended. Now\
    \ I can learn from it :)\n<|/ c |>\n<| c |>\nYour code is too complicated for\
    \ such a simple problem. Keep it simple.\n<|/ c |>\n<| a tags=arrays,c,string,boolean\
    \ |>\nHere's an alternate implementation that uses strspn() and strcspn() in a\
    \ single pass:\n<code>\n#include <string.h>\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgu907_kd.d(29): Error: declaration expected, not `<`

    /tmp/tmpgu907_kd.d(38): Error: unterminated character constant

    /tmp/tmpgu907_kd.d(45): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(46): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(47): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(48): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(49): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(50): Error: declaration expected, not `assert`

    /tmp/tmpgu907_kd.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgu907_kd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164070
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long count = 0;\n    for (auto &word : S) {\n\
    \        auto iter = word.find(\"i\");\n        \n        if (iter != string::npos)\
    \ count += 1;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdzehfbz.d(18): Error: basic type expected, not `&`

    /tmp/tmphdzehfbz.d(18): Error: no identifier for declarator `_error_`

    /tmp/tmphdzehfbz.d(18): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmphdzehfbz.d(21): Error: found `:` when expecting `)`

    /tmp/tmphdzehfbz.d(21): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdzehfbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong i, n, count = 0L;\n\t\n\tfor (i = 0; S[i]\
    \ != 0; i++) {\n\t\tcount++;\n\t\tif (S[i] == 'I' && S[i+1] == '.')\n\t\t\tbreak;\n\
    \t}\n\t\n\treturn count;\n}\n/*\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long bored = 0;\n    for (int i = 0; i < length(S);\
    \ i++) {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n         \
    \   bored++;\n        }\n    }\n    return bored;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmudejf63.d(18): Error: undefined identifier `length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmudejf63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long ans = 0;\n    \n    for(int i = 0; S[i]\
    \ != '\\0'; i++)\n    {\n        if (S[i] == ' ')\n        {\n            if (S[i+1]\
    \ == '.' || S[i+1] == '?' || S[i+1] == '!')\n                ans++;\n        \
    \    else\n            {\n                ans = -1;\n                break;\n\
    \            }\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=c dscore=0\
    \ |>\n<| c |>\nIf you find my answer helpful, please consider upvoting it. Thank\
    \ you\n<|/ c |>\n<| c |>\nThank you for your help. I appreciate it.\n<|/ c |>\n\
    <| a tags=c dscore=0 |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include\
    \ <string.h>\n#include <ctype.h>\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fxew2h1.d(34): Error: declaration expected, not `<`

    /tmp/tmp0fxew2h1.d(52): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(53): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(54): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(55): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(56): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(57): Error: declaration expected, not `assert`

    /tmp/tmp0fxew2h1.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fxew2h1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong bored = 0;\n\t\n\tforeach(char,S) \n\t{\n\t\
    \tif(char == 'I' || char == '.' || char == '?' || char == '!')\n\t\t{\n\t\t\t\
    bored++;\n\t\t}\n\t}\n\t\n\treturn bored;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyycf2358.d(19): Error: no identifier for declarator `char`

    /tmp/tmpyycf2358.d(19): Error: no identifier for declarator `S`

    /tmp/tmpyycf2358.d(19): Error: found `)` when expecting `;`

    /tmp/tmpyycf2358.d(21): Error: found `==` when expecting `.` following char

    /tmp/tmpyycf2358.d(21): Error: found `73U` when expecting identifier following
    `char`.

    /tmp/tmpyycf2358.d(21): Error: found `==` when expecting `.` following char

    /tmp/tmpyycf2358.d(21): Error: found `46U` when expecting identifier following
    `char`.

    /tmp/tmpyycf2358.d(21): Error: found `==` when expecting `.` following char

    /tmp/tmpyycf2358.d(21): Error: found `63U` when expecting identifier following
    `char`.

    /tmp/tmpyycf2358.d(21): Error: found `==` when expecting `.` following char

    /tmp/tmpyycf2358.d(21): Error: found `33U` when expecting identifier following
    `char`.

    /tmp/tmpyycf2358.d(27): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyycf2358.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    return count(S, \".*I\");\n}\nunittest\n{\n \
    \   alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgijlhkcn.d(17): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgijlhkcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint i,j;\n\tchar c;\n\tint bored=0;\n\t\n\tfor\
    \ (i=0,j=S.length()-1;i<S.length() && j>0;i++,j--)\n\t{\n\t\tc=S[i];\n\t\tif (c=='!'\
    \ || c=='.' || c=='?')\n\t\t\tbored++;\n\t}\n\t\n\treturn bored;\n}\n// function\
    \ not used for this task\nunittest\n{\n    alias candidate = is_bored;\n\n   \
    \ assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the sky\
    \ blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfbxpvt6p.d(21): Error: no property `length` for type `string`

    /tmp/tmpfbxpvt6p.d(21): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbxpvt6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    for(string::iterator\
    \ it = S.begin(); it != S.end(); ++it)\n    {\n        if(!((*it) == \".\" ||\
    \ (*it) == \"?\" || (*it) == \"!\"))\n        {\n            boredoms = boredoms\
    \ + 1;\n        }\n    }\n    return boredoms;\n}\nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfk8hxvzv.d(18): Error: use `.` for member lookup, not `::`

    /tmp/tmpfk8hxvzv.d(18): Error: found `it` when expecting `;` following `for` condition

    /tmp/tmpfk8hxvzv.d(18): Error: expression expected, not `=`

    /tmp/tmpfk8hxvzv.d(18): Error: found `S` when expecting `)`

    /tmp/tmpfk8hxvzv.d(18): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfk8hxvzv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong boredoms = 0L;\n\tchar boredomChar;\n\tfor\
    \ (size_t i = 0; i < length(S); ++i)\n\t{\n\t\tboredomChar = S[i];\n\t\tif (boredomChar\
    \ == '.' || boredomChar == '?' || boredomChar == '!')\n\t\t\t++boredoms;\n\t}\n\
    \treturn boredoms;\n}\n</cell>\n<cell>\n%%snakeviz\nimport std.string;\nimport\
    \ std.array;\nimport std.algorithm;\nimport std.algorithm;\nimport std.algorithm;\n\
    </cell>\n<cell>\n%%snakeviz\nstring S = \"Hello world\";\nstring S = \"The sky\
    \ is blue. The sun is shining. I love this weather\";\n</cell>\n<cell>\n%%snakeviz\n\
    is_bored(S);\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"Hello world\");\n</cell>\n\
    <cell>\n%%snakeviz\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather. \");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather .\");\n</cell>\n<cell>\n\
    %%snakeviz\nis_bored(\"The sky is blue. The sun is shining. I love this weather\
    \ ! \");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather ? \");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather ! .\");\n</cell>\n<cell>\n\
    %%snakeviz\nis_bored(\"The sky is blue. The sun is shining. I love this weather\
    \ ? .\");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather ! .\");\n</cell>\n<cell>\n%%snakeviz\nis_bored(\"\
    The sky is blue. The sun is shining. I love \nunittest\n{\n    alias candidate\
    \ = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"\
    Is the sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n \
    \   assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2L);\n    assert(candidate(\"You and\
    \ I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpax2wv3bu.d(27): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(35): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(40): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(44): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(48): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(52): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(56): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(60): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(64): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(68): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(72): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(76): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(80): Error: declaration expected, not `<`

    /tmp/tmpax2wv3bu.d(93): Error: unterminated string constant starting at /tmp/tmpax2wv3bu.d(93)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpax2wv3bu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tint count = 0;\n\tfor(int i = 0; i < (int)S.length();\
    \ i++)\n\t{\n\t\tif (S[i] == 'I')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") ==\
    \ 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukgiclhh.d(18): Error: C style cast illegal, use `cast(int)S.length()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukgiclhh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long cnt = 0;\n    \n    // Get rid of extra\
    \ spaces in the string and split it based on delimiter\n    vector<string> tokens;\n\
    \    stringstream ss(S);\n    string token;\n    while(getline(ss, token, ' '))\n\
    \    {\n        // If current word starts with I\n        if (token[0]=='I')\n\
    \            cnt++;\n    }\n    \n    return cnt;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n   \
    \ assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I love\
    \ It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp574wtr9l.d(20): Error: found `>` when expecting `;` following statement

    /tmp/tmp574wtr9l.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp574wtr9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n\tlong num_boredoms = 0;\n\tstringstream ss(S);\n\
    \    string s;\n    while(ss >> s)\n    {\n        if(s==\"I\" || s==\"i\")\n\
    \        {\n            ++num_boredoms;\n        }\n    }\n    return num_boredoms;\n\
    }\n</code>\n<|/ a dscore=2 tags=c++,string |>\n<| c |>\nThanks for this! I didn't\
    \ think of using sstream to solve this problem. I had already written my own function,\
    \ but this is much more elegant!\n<|/ c |>\n<| c |>\nYou have a good solution,\
    \ but `std::count` will be implemented as a single CPU instruction so it's actually\
    \ quite fast, especially if your strings are very large.\n<|/ c |>\n<| c |>\n\
    I believe that this is incorrect as the code doesn't handle the case where the\
    \ string starts with any other letter. For example, if the word is \"Ask\" then\
    \ the count is 1.\n<|/ c |>\n<| c |>\n: The `count` function does not check for\
    \ this case. See the documentation: http://en.cppreference.com/w/cpp/algorithm/count.\
    \ It has two overloads, one that takes a predicate and another that takes a lambda.\n\
    <|/ c |>\n<| c |>\nI didn't know that. That's good to know. Thanks!\n<|/ c |>\n\
    <| a tags=c++,string dscore=2 |>\nIf you can assume that all inputs are bored/free\
    \ then the following is simpler to code:\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\nunittest\n{\n    alias candidate = is_bored;\n\
    \n    assert(candidate(\"Hello world\") == 0L);\n    assert(candidate(\"Is the\
    \ sky blue?\") == 0L);\n    assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"\
    bIt\") == 0L);\n    assert(candidate(\"I feel good today. I will be productive.\
    \ will kill It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\"\
    ) == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp938jal5v.d(29): Error: declaration expected, not `<`

    /tmp/tmp938jal5v.d(32): Error: unterminated character constant

    /tmp/tmp938jal5v.d(35): Error: unterminated character constant

    /tmp/tmp938jal5v.d(38): Error: unterminated character constant

    /tmp/tmp938jal5v.d(44): Error: unterminated character constant

    /tmp/tmp938jal5v.d(44): Error: unterminated character constant

    /tmp/tmp938jal5v.d(56): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(57): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(58): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(59): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(60): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(61): Error: declaration expected, not `assert`

    /tmp/tmp938jal5v.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp938jal5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredoms = 0;\n    size_t i;\n    for(i\
    \ = 0; i < S.size(); i++)\n    {\n        if(S[i] == 'I')\n        {\n       \
    \     if(S[i-1] == ',')\n            {\n                boredoms++;\n        \
    \    }\n            if(S[i-1] == '.')\n            {\n                boredoms++;\n\
    \            }\n            if(S[i-1] == '?')\n            {\n               \
    \ boredoms++;\n            }\n            if(S[i-1] == '!')\n            {\n \
    \               boredoms++;\n            }\n        }\n    }\n    return boredoms;\n\
    }\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"Hello\
    \ world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"\
    I love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpay66nwia.d(19): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpay66nwia.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom=0;\n    for(int i=1; i<S.length();\
    \ i++)\n    {\n        if(S[i-1]=='i')\n            boredom++;\n    }\n    return\
    \ boredom;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/20956927)\n<|/ c\
    \ |>\n<| c |>\nIt does provide a solution to the problem. And it's one I wrote,\
    \ right? If it was written by someone else, the OP should add their name as well.\n\
    <|/ c |>\n<| c |>\nYour solution is more concise and easy to understand.\n<|/\
    \ c |>\n<| c |>\nI think it is better than mine, but I prefer the \"for loop\"\
    \ because it's more concise.\n<|/ c |>\n<| c |>\nThe \"for loop\" is better. I\
    \ would not recommend using `S[i-1]`, because that means you are doing the same\
    \ thing twice per iteration, which is not good coding.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nunittest\n{\n    alias candidate = is_bored;\n\n    assert(candidate(\"\
    Hello world\") == 0L);\n    assert(candidate(\"Is the sky blue?\") == 0L);\n \
    \   assert(candidate(\"I love It !\") == 1L);\n    assert(candidate(\"bIt\") ==\
    \ 0L);\n    assert(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2L);\n    assert(candidate(\"You and I are going for a walk\") == 0L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe8gj3otm.d(25): Error: declaration expected, not `<`

    /tmp/tmpe8gj3otm.d(31): Error: unterminated character constant

    /tmp/tmpe8gj3otm.d(37): Error: unterminated character constant

    /tmp/tmpe8gj3otm.d(48): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(49): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(50): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(51): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(52): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(53): Error: declaration expected, not `assert`

    /tmp/tmpe8gj3otm.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe8gj3otm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164071
- exit_code: 1
  program: "import std.math;\n/*\n\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0L\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1L\n    \n*/\n\
    long is_bored(string S) \n{\n    long boredom = 0;\n    int i = 0;\n    for (i\
    \ = 0; S[i] != '\\0'; i++)\n    {\n        if (S[i] == '.')\n        {\n     \
    \       boredom++;\n        }\n        else if (S[i] == '?')\n        {\n    \
    \        boredom++;\n        }\n        else if (S[i] == '!')\n        {\n   \
    \         boredom++;\n        }\n    }\n    return boredom;\n}\nunittest\n{\n\
    \    alias candidate = is_bored;\n\n    assert(candidate(\"Hello world\") == 0L);\n\
    \    assert(candidate(\"Is the sky blue?\") == 0L);\n    assert(candidate(\"I\
    \ love It !\") == 1L);\n    assert(candidate(\"bIt\") == 0L);\n    assert(candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2L);\n    assert(candidate(\"\
    You and I are going for a walk\") == 0L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpn8enrfbq.d(19): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f26]

    ??:? long tmpn8enrfbq.is_bored(immutable(char)[]) [0x427a2e]

    ??:? void tmpn8enrfbq.__unittest_L36_C1() [0x427afb]

    ??:? void tmpn8enrfbq.__modtest() [0x427bf8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc35]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa79]

    ??:? runModuleUnitTests [0x42b9e5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164071
