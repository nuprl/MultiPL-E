language: d
name: HumanEval_27_flip_case
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        char c = string[i];\n        if (islower(c))\n\
    \            string[i] = toupper(c);\n        else if (isupper(c))\n         \
    \   string[i] = tolower(c);\n    }\n    return string;\n}\n</code>\n<|/ a tags=c++\
    \ dscore=0 |>\n<| c |>\nthanks for the code, I didn't test it thoroughly but I\
    \ am wondering what are the differences between my code and the code that has\
    \ already been suggested in other answers. Also the code seems to be much slower\
    \ than the code provided by Konrad, maybe because of the use of the vector?\n\
    <|/ c |>\n<| c |>\nI don't think there are any differences between the two codes.\n\
    <|/ c |>\n<| a tags=c++ |>\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <cctype>\n#include <cstring>\nusing namespace std;\nunittest\n{\n   \
    \ alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf5hh_j8o.d(21): Error: declaration expected, not `<`

    /tmp/tmpf5hh_j8o.d(24): Error: unterminated character constant

    /tmp/tmpf5hh_j8o.d(27): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf5hh_j8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ res = string;\n    for (int i = 0; i < res.length(); i++) {\n        res[i]\
    \ = toupper(res[i]);\n        res[i] = tolower(res[i]);\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpje6yv0zt.d(11): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpje6yv0zt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char\
    \ c, string) \n    {\n        if(c>='a' && c<='z')\n            string+=toupper(c);\n\
    \        else\n            string+=tolower(c);\n    }\n    return string;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmygx7nl.d(11): Error: no identifier for declarator `string`

    /tmp/tmpmmygx7nl.d(11): Error: found `)` when expecting `;`

    /tmp/tmpmmygx7nl.d(18): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmygx7nl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ iter = string.begin();\n    string out = \"\";\n    while (iter != string.end())\
    \ {\n        out += (*iter >= 'a' && *iter <= 'z' ? (*iter - 'a' + 'A') : \n \
    \                        (*iter >= 'A' && *iter <= 'Z' ? (*iter - 'A' + 'a') :\
    \ \n                         (*iter >= '0' && *iter <= '9' ? (*iter - '0' + '0')\
    \ : *iter)));\n        iter++;\n    }\n    return out;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphg0wg2_x.d(12): Error: found `out` when expecting `;` following
    statement

    /tmp/tmphg0wg2_x.d(12): Error: found `=` instead of statement

    /tmp/tmphg0wg2_x.d(14): Error: found `out` instead of statement

    /tmp/tmphg0wg2_x.d(19): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphg0wg2_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    char c;\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu8ipba1c.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu8ipba1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    size_t i = 0;\n    while(i < string.length())\n    {\n \
    \       char c = string.at(i);\n        if((c >= 'A') && (c <= 'Z'))\n       \
    \     c = c - 'A' + 'a';\n        else if((c >= 'a') && (c <= 'z'))\n        \
    \    c = c - 'a' + 'A';\n        else\n            c = c;\n        result += c;\n\
    \        ++i;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk80fmasb.d(11): Error: `string` is used as a type

    /tmp/tmpk80fmasb.d(13): Error: no property `length` for type `string`

    /tmp/tmpk80fmasb.d(15): Error: no property `at` for type `string`

    /tmp/tmpk80fmasb.d(17): Error: cannot implicitly convert expression `cast(int)c
    - 65 + 97` of type `int` to `char`

    /tmp/tmpk80fmasb.d(19): Error: cannot implicitly convert expression `cast(int)c
    - 97 + 65` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk80fmasb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i = 0;\n    int j = 0;\n    int k = 0;\n    while(string[i] != \"\")\n    {\n\
    \        if(string[i] == string[i].toLower()) \n        {\n            string[k++]\
    \ = string[j++];\n        }\n        else if(string[i] == string[i].toUpper())\
    \ \n        {\n            string[k++] = string[j++];\n        }\n        else\n\
    \        {\n            string[k++] = string[i];\n        }\n        i++;\n  \
    \  }\n    return string(k, string[j]);\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\n\
    This works fine for all the given cases, but it fails for the string: \"HELLO\"\
    \n<|/ c |>\n<| c |>\nYeah, I forgot about that case, thanks for mentioning it.\
    \ I updated my answer accordingly.\n<|/ c |>\n<| a |>\nI implemented this using\
    \ recursion and it works for all the cases:\n<code>\nstring flip_case(string str,\
    \ int n){\n    string result;\n    if(n<0){\n        return result;\n    }\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96likslq.d(32): Error: declaration expected, not `<`

    /tmp/tmp96likslq.d(45): Error: declaration expected, not `if`

    /tmp/tmp96likslq.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96likslq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.length(); i++)\n    {\n        if(string[i] >= 'a' &&\
    \ string[i] <= 'z')\n        {\n            string[i] = string[i] - 32;\n    \
    \    }\n        else if (string[i] >= 'A' && string[i] <= 'Z')\n        {\n  \
    \          string[i] = string[i] + 32;\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgup0urd5.d(11): Error: no property `length` for type `string`

    /tmp/tmpgup0urd5.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpgup0urd5.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgup0urd5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ len = string.length;\n  int i = 0;\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7q_tlexf.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7q_tlexf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ s = string;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n\
    \        s[i] = toupper(c);\n        c = tolower(c);\n        s[i] = c;\n    }\n\
    \    return s;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small\
    \ function in C# that does this for you, it takes a string as input and returns\
    \ a string as output.\nIt first checks to see if the string has more than one\
    \ character, if it does then it will flip the characters one at a time from the\
    \ first one to the last.\nIf you want it reversed, just change the for loop to\
    \ iterate backwards. If you want it capitalized, just change the switch statement\
    \ to capitalize the first character and ignore the rest:\n<code>\npublic static\
    \ string Flip(string input) {\n  string output = \"\";\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jl_9gs1.d(20): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jl_9gs1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i=0; i < string.size(); i++)\n\t{\n\t\tif((string[i]).islower())\n\t\t\tstring[i]\
    \ = string[i].toupper();\n\t\telse if((string[i]).isupper())\n\t\t\tstring[i]\
    \ = string[i].tolower();\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnlr0tgmm.d(11): Error: no property `size` for type `string`

    /tmp/tmpnlr0tgmm.d(13): Error: no property `islower` for type `immutable(char)`

    /tmp/tmpnlr0tgmm.d(14): Error: no property `toupper` for type `immutable(char)`

    /tmp/tmpnlr0tgmm.d(15): Error: no property `isupper` for type `immutable(char)`

    /tmp/tmpnlr0tgmm.d(16): Error: no property `tolower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnlr0tgmm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        if(string[i] >= 'A' && string[i]\
    \ <= 'Z') {\n            string[i] = (char)(string[i] - 'A' + 'a');\n        }\n\
    \        if(string[i] >= 'a' && string[i] <= 'z') {\n            string[i] = (char)(string[i]\
    \ - 'a' + 'A');\n        }\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphi65j9kj.d(13): Error: C style cast illegal, use `cast(char)(string[i]
    - ''A'' + ''a'')`

    /tmp/tmphi65j9kj.d(16): Error: C style cast illegal, use `cast(char)(string[i]
    - ''a'' + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi65j9kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tmap<string,string>\
    \ map = new map<string,string>();\n\tfor(int i = 0; i < string.length(); i++)\n\
    \t{\n\t\tif(islower(string[i]))\n\t\t\tmap[string[i]] = toupper(string[i]);\n\t\
    \telse \n\t\t\tmap[string[i]] = tolower(string[i]);\n\t}\n\tstring result = \"\
    \";\n\tforeach(map,string);\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp29gsmijx.d(11): Error: expression expected, not `)`

    /tmp/tmp29gsmijx.d(11): Error: found `;` when expecting `)`

    /tmp/tmp29gsmijx.d(12): Error: found `for` when expecting `;` following statement

    /tmp/tmp29gsmijx.d(12): Error: found `i` when expecting `.` following int

    /tmp/tmp29gsmijx.d(12): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp29gsmijx.d(12): Error: found `0` when expecting `)`

    /tmp/tmp29gsmijx.d(12): Error: found `)` when expecting `;` following statement

    /tmp/tmp29gsmijx.d(20): Error: no identifier for declarator `string`

    /tmp/tmp29gsmijx.d(20): Error: found `)` when expecting `;`

    /tmp/tmp29gsmijx.d(20): Error: expression expected, not `;`

    /tmp/tmp29gsmijx.d(21): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp29gsmijx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ len = string.length();\n\tstring result;\n\tfor(int i = 0; i < len; ++i)\n\t\
    {\n\t\tresult[i] = toupper(string[i]);\n\t\tresult[i] = tolower(string[i]);\n\t\
    }\n\treturn result;\n}\n/*\n Find the index of the first occurence of a substring\
    \ in a string.\n    >>> indexOf(\"Hello\", \"llo\")\n    1\n    >>> indexOf(\"\
    Hello\", \"llo\", 1)\n    2\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqugpgkw2.d(11): Error: no property `length` for type `string`

    /tmp/tmpqugpgkw2.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqugpgkw2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ iter = string.cbegin();\n    auto end = string.cend();\n    for (auto i = iter;\
    \ i != end; ++i) {\n        auto c = *i;\n        if (c >= 'A' && c <= 'Z') {\n\
    \            *i = c ^ 'A' + 'a';\n        } else {\n            *i = c;\n    \
    \    }\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyhqf9di.d(11): Error: no property `cbegin` for type `string`

    /tmp/tmpqyhqf9di.d(12): Error: no property `cend` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyhqf9di.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i = 0, length = string.length(); i < length; i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tif (islower(c)) \n\t\t\tstring[i] = toupper(c);\n\t\telse\n\t\t\tstring[i]\
    \ = tolower(c);\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprryjs6j.d(11): Error: no property `length` for type `string`

    /tmp/tmpprryjs6j.d(15): Error: undefined identifier `islower`

    /tmp/tmpprryjs6j.d(16): Error: undefined identifier `toupper`

    /tmp/tmpprryjs6j.d(18): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprryjs6j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i = 0;\n    int length = string.length();\n    char c = string.front();\n  \
    \  string result = \"\";\n    \n    while(i<length)\n    {\n        if(c==' ')\n\
    \        {\n            result+=c;\n            i=i+1;\n            continue;\n\
    \        }\n        \n        if((int)c==(int)string.back())\n        {\n    \
    \        result+=c;\n            i=i+1;\n            continue;\n        }\n  \
    \      \n        if(c==string.front())\n        {\n            c = (char)toupper(string.front());\n\
    \            result+=c;\n            i=i+1;\n            continue;\n        }\n\
    \        \n        c = (char)tolower(c);\n        result+=c;\n        i=i+1;\n\
    \    }\n    \n    return result;\n}\n/*\n Reverse a string.\n    >>> flip_reverse(\"\
    hello\")\n    \"olleh\"\n    \n*/\nstring flip_reverse(string string) \n{\n  \
    \  int i = 0;\n    int length = string.length();\n    char c = string.front();\n\
    \    string result = \"\";\n    \n    while(i<length)\n    {\n        if(c=='\
    \ ')\n        {\n            result+=c;\n            i=i+1;\n            continue;\n\
    \        }\n        \n        if(c==string.back())\n        {\n            result+=c;\n\
    \            i=i+1;\n            continue;\n        }\n        \n        c = (char)tolower(c);\n\
    \        result+=c;\n        i=i+1;\n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2l0k86ea.d(25): Error: C style cast illegal, use `cast(int)c`

    /tmp/tmp2l0k86ea.d(25): Error: C style cast illegal, use `cast(int)string.back()`

    /tmp/tmp2l0k86ea.d(34): Error: C style cast illegal, use `cast(char)toupper(string.front())`

    /tmp/tmp2l0k86ea.d(40): Error: C style cast illegal, use `cast(char)tolower(c)`

    /tmp/tmp2l0k86ea.d(76): Error: C style cast illegal, use `cast(char)tolower(c)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2l0k86ea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.length(); i++)\n    {\n        if (string[i] >= 'a' &&\
    \ string[i] <= 'z')\n        {\n            string[i] = string[i] - 32;\n    \
    \    }\n        else if (string[i] >= 'A' && string[i] <= 'Z')\n        {\n  \
    \          string[i] = string[i] + 32;\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafcw3i6i.d(11): Error: no property `length` for type `string`

    /tmp/tmpafcw3i6i.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpafcw3i6i.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafcw3i6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor\
    \ (int i = 0; i < string.length(); i++) {\n\t\tchar c = string[i];\n\t\tstring[i]\
    \ = toupper(c);\n\t\tstring[i] = tolower(string[i]);\n\t}\n\t\n\treturn string;\n\
    }\n/*\n For a given string, flip all uppercase characters to lowercase and lowercase\
    \ to uppercase.\n    >>> flip_case_all_caps(\"HELLO\")\n    \"hello\"\n    \n\
    */\nstring flip_case_all_caps(string string) \n{\n\tfor (int i = 0; i < string.length();\
    \ i++) {\n\t\tchar c = string[i];\n\t\tif (toupper(c) == c)\n\t\t\tstring[i] =\
    \ tolower(c);\n\t}\n\t\n\treturn string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_nrchm0.d(11): Error: no property `length` for type `string`

    /tmp/tmpt_nrchm0.d(13): Error: undefined identifier `toupper`

    /tmp/tmpt_nrchm0.d(14): Error: undefined identifier `tolower`

    /tmp/tmpt_nrchm0.d(27): Error: no property `length` for type `string`

    /tmp/tmpt_nrchm0.d(29): Error: undefined identifier `toupper`

    /tmp/tmpt_nrchm0.d(30): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_nrchm0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tif (string\
    \ == null || string.empty())\n\t\treturn string;\n\t\n\tstring::iterator it =\
    \ string.begin();\n\t\n\tif (*it == L'-' || *it == L'_')\n\t{\n\t\tif (it == string.end())\
    \ \n\t\t\treturn string;\n\t\t\n\t\tit++;\n\t\tif (it == string.end())\n\t\t\t\
    return string;\n\t\t\n\t\tif (*it == L'-' || *it == L'_')\n\t\t{\n\t\t\tit++;\n\
    \t\t\tif (it == string.end())\n\t\t\t\treturn string;\n\t\t}\n\t}\n\t\n\twhile\
    \ (it != string.end())\n\t{\n\t\tchar c = *it;\n\t\tif (islower(c))\n\t\t\t*it\
    \ = toupper(c);\n\t\telse\n\t\t\t*it = tolower(c);\n\t\t\n\t\tit++;\n\t}\n\t\n\
    \treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdrka0zpf.d(14): Error: use `.` for member lookup, not `::`

    /tmp/tmpdrka0zpf.d(16): Error: found `45U` when expecting `)`

    /tmp/tmpdrka0zpf.d(16): Error: found `||` instead of statement

    /tmp/tmpdrka0zpf.d(25): Error: found `45U` when expecting `)`

    /tmp/tmpdrka0zpf.d(25): Error: found `||` instead of statement

    /tmp/tmpdrka0zpf.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdrka0zpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164047
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ n = 0;\n  int s = string.size();\n  for(int i = 0; i < s; i++)\n  {\n     char\
    \ c = string[i];\n     if(islower(c))\n        string.Replace(i, c, toupper(c));\n\
    \     if(isupper(c))\n        string.Replace(i, c, tolower(c));\n  }\n  return\
    \ string;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nJust for the fun of it, here\
    \ is an implementation of an algorithm for transforming a string from uppercase\
    \ to lowercase and vice versa using the recursive approach:\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <cctype>\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2363sd72.d(23): Error: declaration expected, not `<`

    /tmp/tmp2363sd72.d(35): Error: declaration expected, not `assert`

    /tmp/tmp2363sd72.d(36): Error: declaration expected, not `assert`

    /tmp/tmp2363sd72.d(37): Error: declaration expected, not `assert`

    /tmp/tmp2363sd72.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2363sd72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ len = string.length();\n\tauto result = \"\";\n\tfor(auto i = 0ll; i < len;\
    \ i++)\n\t{\n\t\tif(string[i] == '_') \n\t\t{\n\t\t\tresult += string[i];\n\t\t\
    }\n\t\telse \n\t\t{\n\t\t\tresult += toupper(string[i]);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvj2umtd3.d(13): Error: lower case integer suffix ''l'' is not allowed.
    Please use ''L'' instead

    /tmp/tmpvj2umtd3.d(13): Error: lower case integer suffix ''l'' is not allowed.
    Please use ''L'' instead

    /tmp/tmpvj2umtd3.d(13): Error: unrecognized token

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvj2umtd3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  if(string.size\
    \ == 0)\n    return string;\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1pn07vv.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1pn07vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i = 0;\n    int j = string.length() - 1;\n    string result = \"\";\n    while(i\
    \ < j) {\n        if(string[i] < 'a' || string[i] > 'z') {\n            if(string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n                result+= string[i] - 'A' + 1;\n\
    \            }\n            else {\n                result+= string[i] - 'a' +\
    \ 1;\n            }\n        }\n        else {\n            if(string[i] >= 'A'\
    \ && string[i] <= 'Z') {\n                result+= string[i] - 'A' + 0;\n    \
    \        }\n            else {\n                result+= string[i] - 'a' + 0;\n\
    \            }\n        }\n        i++;\n        j--;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl62q6h1q.d(12): Error: no property `length` for type `string`

    /tmp/tmpl62q6h1q.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl62q6h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ flip = make_unique<transform>(transform::lower,transform::upper,transform::upper);\n\
    \tauto copy = make_unique<transform>(transform::upper,transform::lower,transform::lower);\n\
    \tauto result = copy->exec(string,copy.get());\n\treturn flip->exec(copy.get(),result.get());\n\
    }\n/*\n Make all characters of string uppercase\n \n*/\nstring upper_case(string\
    \ string) \n{\n\tauto flip = make_unique<transform>(transform::upper,transform::upper);\n\
    \tauto copy = make_unique<transform>(transform::upper);\n\tauto result = copy->exec(string,copy.get());\n\
    \treturn flip->exec(copy.get(),result.get());\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03802r_x.d(11): Error: semicolon expected following auto declaration,
    not `>`

    /tmp/tmp03802r_x.d(11): Error: found `>` instead of statement

    /tmp/tmp03802r_x.d(12): Error: semicolon expected following auto declaration,
    not `>`

    /tmp/tmp03802r_x.d(12): Error: found `>` instead of statement

    /tmp/tmp03802r_x.d(13): Error: use `.` for member lookup, not `->`

    /tmp/tmp03802r_x.d(14): Error: use `.` for member lookup, not `->`

    /tmp/tmp03802r_x.d(22): Error: semicolon expected following auto declaration,
    not `>`

    /tmp/tmp03802r_x.d(22): Error: found `>` instead of statement

    /tmp/tmp03802r_x.d(23): Error: semicolon expected following auto declaration,
    not `>`

    /tmp/tmp03802r_x.d(23): Error: found `>` instead of statement

    /tmp/tmp03802r_x.d(24): Error: use `.` for member lookup, not `->`

    /tmp/tmp03802r_x.d(25): Error: use `.` for member lookup, not `->`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03802r_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    size_t\
    \ i;\n    string result = \"\";\n    for(i = 0; i < (string.length() - 1); i++)\n\
    \    {\n        if(string[i] >= 'a' && string[i] <= 'z')\n        {\n        \
    \    result += string[i].toUpper();\n        }\n        else if(string[i] >= 'A'\
    \ && string[i] <= 'Z')\n        {\n            result += string[i].toLower();\n\
    \        }\n        else\n        {\n            result += string[i];\n      \
    \  }\n    }\n    result += string[i];\n    return result;\n}\n/*\n Count the number\
    \ of occurences of a character in a string.\n \n Example:\n    >>> count_characters(\"\
    aabaa\", a)\n    2\n    \n*/\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpew9y535k.d(12): Error: `string` is used as a type

    /tmp/tmpew9y535k.d(13): Error: no property `length` for type `string`

    /tmp/tmpew9y535k.d(17): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpew9y535k.d(21): Error: no property `toLower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpew9y535k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ itr = string.begin();\n\twhile (itr != string.end())\n\t{\n\t\tif (*itr >= 'a'\
    \ && *itr <= 'z')\n\t\t{\n\t\t\t*itr = (*itr - 'a' + 'A');\n\t\t}\n\t\telse\n\t\
    \t{\n\t\t\t*itr = (*itr - 'A' + 'a');\n\t\t}\n\t\titr++;\n\t}\n\treturn string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxlqk_n7.d(11): Error: no property `begin` for type `string`

    /tmp/tmpmxlqk_n7.d(12): Error: no property `end` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxlqk_n7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    size_t\
    \ i;\n    char c;\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizi1l_5y.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpizi1l_5y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char\
    \ t;\n    string result = \"\";\n    foreach (char c in string) \n    {\n    \
    \    t = (char) toupper(c);\n        result += (char) t;\n    }\n    return result;\n\
    }\n</code>\n<code>\nimport std.conv;\nimport std.stdio;\nimport std.string;\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4pltc4i9.d(13): Error: found `in` when expecting `;`

    /tmp/tmp4pltc4i9.d(15): Error: C style cast illegal, use `cast(char)toupper(c)`

    /tmp/tmp4pltc4i9.d(16): Error: C style cast illegal, use `cast(char)t`

    /tmp/tmp4pltc4i9.d(20): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4pltc4i9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    bool\
    \ flip_upper = false;\n    for(int i=0;i<string.length();i++)\n    {\n       \
    \ if(string[i] == 'a') \n            string[i] = 'A';\n        if(string[i] ==\
    \ 'b') \n            string[i] = 'B';\n        if(string[i] == 'c') \n       \
    \     string[i] = 'C';\n        if(string[i] == 'd') \n            string[i] =\
    \ 'D';\n        if(string[i] == 'e') \n            string[i] = 'E';\n        if(string[i]\
    \ == 'f') \n            string[i] = 'F';\n        if(string[i] == 'g') \n    \
    \        string[i] = 'G';\n        if(string[i] == 'h') \n            string[i]\
    \ = 'H';\n        if(string[i] == 'i') \n            string[i] = 'I';\n      \
    \  if(string[i] == 'j') \n            string[i] = 'J';\n        if(string[i] ==\
    \ 'k') \n            string[i] = 'K';\n        if(string[i] == 'l') \n       \
    \     string[i] = 'L';\n        if(string[i] == 'm') \n            string[i] =\
    \ 'M';\n        if(string[i] == 'n') \n            string[i] = 'N';\n        if(string[i]\
    \ == 'o') \n            string[i] = 'O';\n        if(string[i] == 'p') \n    \
    \        string[i] = 'P';\n        if(string[i] == 'q') \n            string[i]\
    \ = 'Q';\n        if(string[i] == 'r') \n            string[i] = 'R';\n      \
    \  if(string[i] == 's') \n            string[i] = 'S';\n        if(string[i] ==\
    \ 't') \n            string[i] = 'T';\n        if(string[i] == 'u') \n       \
    \     string[i] = 'U';\n        if(string[i] == 'v') \n            string[i] =\
    \ 'V';\n        if(string[i] == 'w') \n            string[i] = 'W';\n        if(string[i]\
    \ == 'x') \n            string[i] = 'X';\n        if(string[i] == 'y') \n    \
    \        string[i] = 'Y';\n        if(string[i] == 'z') \n            string[i]\
    \ = 'Z';\n        if(string[i] == 'A') \n            string[i] = 'a';\n      \
    \  if(string[i] == 'B') \n            string[i] = 'b';\n        if(string[i] ==\
    \ 'C') \n            string[i] = 'c';\n        if(string[i] == 'D') \n       \
    \     string[i] = 'd';\n        if(string[i] == 'E') \n            string[i] =\
    \ 'e';\n        if(string[i] == 'F') \n            string[i] = 'f';\n        if(string[i]\
    \ == 'G') \n            string[i] = 'g';\n        if(string[i] == 'H') \n    \
    \        string[i] = 'h';\n        if(string[i] == 'I') \n            string[i]\
    \ = 'i';\n        if(string\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdkxs4o7q.d(85): Error: found `unittest` when expecting `)`

    /tmp/tmpdkxs4o7q.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdkxs4o7q.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdkxs4o7q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n   string\
    \ result;\n   int i;\n   \n   for (i = 0; string[i] != '\\0'; i++)\n      result[i]\
    \ = toupper(string[i]);\n   \n   for (i = 0; string[i] != '\\0'; i++)\n      result[i]\
    \ = tolower(string[i]);\n   \n   return result;\n}\n/*\n Remove leading and trailing\
    \ blanks.\n \n >>> trim_whitespace(\"  Hello WOrld   \")\n 'HelloWorld'\n \n*/\n\
    string trim_whitespace(string string) \n{\n   string result;\n   int i;\n   \n\
    \   for (i = 0; string[i] != '\\0'; i++)\n   {\n      result += string[i];\n \
    \     if (string[i] != ' ')\n         result += ' ';\n   }\n   \n   for (i = 0;\
    \ string[i] != '\\0'; i++)\n   {\n      result += string[i];\n      if (string[i]\
    \ != ' ')\n         result += ' ';\n   }\n   \n   for (i = result.length()-1;\
    \ i >= 0; i--)\n   {\n      if (result[i] == '\\n')\n         result.erase(i,\
    \ 1);\n   }\n   \n   for (i = result.length()-1; i >= 0; i--)\n   {\n      if\
    \ (result[i] == '\\r')\n         result.erase(i, 1);\n   }\n   \n   return result;\n\
    }\n/*\n Convert all uppercase letters to lowercase letters and all lowercase letters\
    \ to uppercase letters.\n \n >>> lower_case(\"HELLO\")\n 'hELLO'\n \n >>> lower_case(\"\
    HElLo\")\n 'hELLO'\n \n >>> lower_case(\"hELLO\")\n 'hELLO'\n \n >>> lower_case(\"\
    heLLo\")\n 'heLLo'\n \n >>> lower_case(\"hElLo\")\n 'hElLo'\n \n >>> lower_case(\"\
    HellO\")\n 'hellO'\n \n >>> lower_case(\"HellO\")\n 'hellO'\n \n >>> lower_case(\"\
    HellO\")\n 'hellO'\n \n >>> lower_case(\"hElLo\")\n 'hElLo'\n \n >>> lower_case(\"\
    HellO\")\n 'hellO'\n \n >>> lower_case(\"hEllO\")\n 'hEllO'\n \n >>> lower_case(\"\
    heLLo\")\n 'heLLo'\n \n >>> lower_case(\"heLlo\")\n 'heLlo'\n \n >>> lower_case(\"\
    hElLo\")\n 'hEllo'\n\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzoowk8ng.d(62): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzoowk8ng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tfor (int i = 0; i < string.len(); i++)\n\t\tresult += (char)(string[i]\
    \ + 32 - string[i].toUpper());\n\t\n\treturn result;\n}\n/*\n Return the number\
    \ of occurrences of a string in a string.\n    >>> count_substring(\u201CABC\u201D\
    , \u201CABC\u201D)\n    1\n    \n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp74if3v9y.d(13): Error: C style cast illegal, use `cast(char)(string[i]
    + 32 - string[i].toUpper())`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp74if3v9y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.len();\n    int i;\n    string result = \"\";\n    for(i = 0; i\
    \ < len; ++i)\n    {\n        string c = string.at(i);\n        if('A' <= c &&\
    \ c <= 'Z')\n            result += c;\n        else\n            result += toupper(c);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nThe shortest\
    \ solution (tested on Windows 10 x64, clang 8.1.0):\n<code>\n#include <iostream>\n\
    #include <algorithm>\n#include <cctype>\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3d1v1rx.d(24): Error: declaration expected, not `<`

    /tmp/tmpu3d1v1rx.d(36): Error: declaration expected, not `assert`

    /tmp/tmpu3d1v1rx.d(37): Error: declaration expected, not `assert`

    /tmp/tmpu3d1v1rx.d(38): Error: declaration expected, not `assert`

    /tmp/tmpu3d1v1rx.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3d1v1rx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  char[]\
    \ arr = string.toCharArray();\n  for(int i = 0; i < arr.length; i++)\n  {\n  \
    \  if(islower(arr[i]))\n    {\n      arr[i] = toupper(arr[i]);\n    }\n    if(isupper(arr[i]))\n\
    \    {\n      arr[i] = tolower(arr[i]);\n    }\n  }\n  return string(arr);\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprv6fxi2.d(11): Error: no property `toCharArray` for type `string`

    /tmp/tmpprv6fxi2.d(14): Error: undefined identifier `islower`

    /tmp/tmpprv6fxi2.d(16): Error: undefined identifier `toupper`

    /tmp/tmpprv6fxi2.d(18): Error: undefined identifier `isupper`

    /tmp/tmpprv6fxi2.d(20): Error: undefined identifier `tolower`

    /tmp/tmpprv6fxi2.d(23): Error: function expected before `()`, not `string` of
    type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprv6fxi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.length(); i++) \n    {\n        char c = string[i];\n\
    \        bool upper = !islower(c);\n        if (isupper(c)) \n        {\n    \
    \        c = toupper(c);\n        }\n        string[i] = c;\n    }\n    return\
    \ string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqgc86i0.d(11): Error: no property `length` for type `string`

    /tmp/tmpwqgc86i0.d(14): Error: undefined identifier `islower`

    /tmp/tmpwqgc86i0.d(15): Error: undefined identifier `isupper`, did you mean variable
    `upper`?

    /tmp/tmpwqgc86i0.d(17): Error: undefined identifier `toupper`, did you mean variable
    `upper`?

    /tmp/tmpwqgc86i0.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqgc86i0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ lowerCase = string.toLowerCase();\n    string upperCase = string.toUpperCase();\n\
    \    string result = lowerCase;\n    if (upperCase.length()>result.length()) result\
    \ = upperCase;\n    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaq3imjo2.d(11): Error: `string` is used as a type

    /tmp/tmpaq3imjo2.d(11): Error: no property `toLowerCase` for type `string`

    /tmp/tmpaq3imjo2.d(12): Error: `string` is used as a type

    /tmp/tmpaq3imjo2.d(12): Error: no property `toUpperCase` for type `string`

    /tmp/tmpaq3imjo2.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaq3imjo2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.len();\n    int i;\n    int j;\n    string newstring = \"\";\n\
    \    for(i = 0; i < len; i++)\n    {\n        if(string[i] == 'A' || string[i]\
    \ == 'a')\n            string[i] = 'B';\n        else if(string[i] == 'B' || string[i]\
    \ == 'b')\n            string[i] = 'a';\n        else if(string[i] == 'C' || string[i]\
    \ == 'c')\n            string[i] = 'd';\n        else if(string[i] == 'D' || string[i]\
    \ == 'd')\n            string[i] = 'c';\n        else if(string[i] == 'E' || string[i]\
    \ == 'e')\n            string[i] = 'f';\n        else if(string[i] == 'F' || string[i]\
    \ == 'f')\n            string[i] = 'e';\n        else if(string[i] == 'G' || string[i]\
    \ == 'g')\n            string[i] = 'h';\n        else if(string[i] == 'H' || string[i]\
    \ == 'h')\n            string[i] = 'g';\n        else if(string[i] == 'I' || string[i]\
    \ == 'i')\n            string[i] = 'j';\n        else if(string[i] == 'J' || string[i]\
    \ == 'j')\n            string[i] = 'i';\n        else if(string[i] == 'K' || string[i]\
    \ == 'k')\n            string[i] = 'l';\n        else if(string[i] == 'L' || string[i]\
    \ == 'l')\n            string[i] = 'k';\n        else if(string[i] == 'M' || string[i]\
    \ == 'm')\n            string[i] = 'n';\n        else if(string[i] == 'N' || string[i]\
    \ == 'n')\n            string[i] = 'm';\n        else if(string[i] == 'O' || string[i]\
    \ == 'o')\n            string[i] = 'p';\n        else if(string[i] == 'P' || string[i]\
    \ == 'p')\n            string[i] = 'o';\n        else if(string[i] == 'Q' || string[i]\
    \ == 'q')\n            string[i] = 'r';\n        else if(string[i] == 'R' || string[i]\
    \ == 'r')\n            string[i] = 'q';\n        else if(string[i] == 'S' || string[i]\
    \ == 's')\n            string[i] = 't';\n        else if(string[i] == 'T' || string[i]\
    \ == 't')\n            string[i] = 's';\n        else if(string[i] == 'U' || string[i]\
    \ == 'u')\n            string[i] = 'v';\n        else if(string[i] == 'V' || string[i]\
    \ == 'v')\n            string[i] = 'u';\n        else if(string[i] == 'W' || string[i]\
    \ == 'w')\n            string[i] = 'x';\n        else if(string[i] == 'X' || string[i]\
    \ == 'x')\n            string[i] = 'w';\n        else if(string[i] == 'Y' || string[i]\
    \ == 'y')\n            string[i] = \nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe7dc81z3.d(67): Error: expression expected, not `unittest`

    /tmp/tmpe7dc81z3.d(68): Error: found `{` when expecting `;` following statement

    /tmp/tmpe7dc81z3.d(75): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe7dc81z3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++) {\n        char\
    \ c = string[i];\n        if(c == c.tolower())\n            c = c.toupper();\n\
    \        else\n            c = c.tolower();\n        result += c;\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1emiulkx.d(11): Error: `string` is used as a type

    /tmp/tmp1emiulkx.d(12): Error: no property `length` for type `string`

    /tmp/tmp1emiulkx.d(14): Error: no property `tolower` for type `char`

    /tmp/tmp1emiulkx.d(15): Error: no property `toupper` for type `char`

    /tmp/tmp1emiulkx.d(17): Error: no property `tolower` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1emiulkx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tchar\
    \ * start = &string[0];\n\tchar * end = &string[string.size()];\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxosqn7i5.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxosqn7i5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ length = string.length();\n    for(int i = 0; i < length; ++i)\n    {\n    \
    \    if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n            string temp\
    \ = string[i] + toupper(string[i]);\n            string[i] = temp[0] - 'A';\n\
    \            string[i + 1] = temp[1] - 'A';\n            string[i + 2] = temp[2]\
    \ - 'A';\n            string[i + 3] = temp[3] - 'A';\n        }\n    }\n    return\
    \ string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp83ea9zl3.d(11): Error: no property `length` for type `string`

    /tmp/tmp83ea9zl3.d(16): Error: `string` is used as a type

    /tmp/tmp83ea9zl3.d(16): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83ea9zl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ it = string.begin();\n\twhile(it != string.end() )\n\t{\n\t\tswitch(*it)\n\t\
    \t{\n\t\tcase 'A':\n\t\tcase 'a':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'B':\n\t\
    \tcase 'b':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'C':\n\t\tcase 'c':\n\t\t\t++it;\n\
    \t\t\tbreak;\n\t\tcase 'D':\n\t\tcase 'd':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase\
    \ 'E':\n\t\tcase 'e':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'F':\n\t\tcase 'f':\n\
    \t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'G':\n\t\tcase 'g':\n\t\t\t++it;\n\t\t\tbreak;\n\
    \t\tcase 'H':\n\t\tcase 'h':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'I':\n\t\tcase\
    \ 'i':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'J':\n\t\tcase 'j':\n\t\t\t++it;\n\
    \t\t\tbreak;\n\t\tcase 'K':\n\t\tcase 'k':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase\
    \ 'L':\n\t\tcase 'l':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'M':\n\t\tcase 'm':\n\
    \t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'N':\n\t\tcase 'n':\n\t\t\t++it;\n\t\t\tbreak;\n\
    \t\tcase 'O':\n\t\tcase 'o':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'P':\n\t\tcase\
    \ 'p':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'Q':\n\t\tcase 'q':\n\t\t\t++it;\n\
    \t\t\tbreak;\n\t\tcase 'R':\n\t\tcase 'r':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase\
    \ 'S':\n\t\tcase 's':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'T':\n\t\tcase 't':\n\
    \t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'U':\n\t\tcase 'u':\n\t\t\t++it;\n\t\t\tbreak;\n\
    \t\tcase 'V':\n\t\tcase 'v':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'W':\n\t\tcase\
    \ 'w':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase 'X':\n\t\tcase 'x':\n\t\t\t++it;\n\
    \t\t\tbreak;\n\t\tcase 'Y':\n\t\tcase 'y':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase\
    \ 'Z':\n\t\tcase 'z':\n\t\t\t++it;\n\t\t\tbreak;\n\t\tcase '0':\n\t\tcase '1':\n\
    \t\tcase '2':\n\t\tcase '3':\n\t\t\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpflb4njyo.d(125): Error: found `unittest` instead of statement

    /tmp/tmpflb4njyo.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpflb4njyo.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflb4njyo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if\
    \ (string.empty())\n        return string;\n    char c = string[0];\n    string\
    \ flipped = string; // Make a copy of string\n    for (int i = 1; i < string.length();\
    \ i++) {\n        c = c != string[i] ? c ^ ('A' + i) : c ^ ('A' + i - 1);\n  \
    \      flipped += c;\n    }\n    return flipped;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoerh6mo.d(11): Error: no property `empty` for type `string`

    /tmp/tmphoerh6mo.d(14): Error: `string` is used as a type

    /tmp/tmphoerh6mo.d(15): Error: no property `length` for type `string`

    /tmp/tmphoerh6mo.d(16): Error: cannot implicitly convert expression `cast(int)c
    != cast(int)string[cast(ulong)i] ? cast(int)c ^ 65 + i : cast(int)c ^ 65 + i -
    1` of type `int` to `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoerh6mo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < string.length(); i++) {\n        char\
    \ c = string[i];\n        if (std.isUpper(c)) c = std.toLower(c);\n        else\
    \ c = std.toUpper(c);\n        result += c;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8io1fv6.d(11): Error: `string` is used as a type

    /tmp/tmpv8io1fv6.d(12): Error: no property `length` for type `string`

    /tmp/tmpv8io1fv6.d(14): Error: undefined identifier `isUpper` in package `std`

    /tmp/tmpv8io1fv6.d(14): Error: undefined identifier `toLower` in package `std`

    /tmp/tmpv8io1fv6.d(15): Error: undefined identifier `toUpper` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8io1fv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int[char]\
    \ index;\n    for(ref i in string) index[i] = to_index(i);\n    return to_string(index[to_index(string.first)]\
    \ ^ index[to_index(string.last)]);\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx9km9ex0.d(12): Error: no identifier for declarator `i`

    /tmp/tmpx9km9ex0.d(12): Error: expression expected, not `in`

    /tmp/tmpx9km9ex0.d(12): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9km9ex0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char\
    \ result = 0;\n    for (auto c : string)\n    {\n        if (c == 'a' || c ==\
    \ 'A') \n            c = toupper(c);\n        else if (c == 'b' || c == 'B') \n\
    \            c = tolower(c);\n        else \n            c = toupper(c);\n   \
    \     result += c;\n    }\n    return result + string[string.length() - 1];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your efforts :)\n<|/ c |>\n<| c |>\n\
    I understand why you posted such a code snippet but this doesn't answer the question\
    \ posed which is specifically how to do that using std library.\n<|/ c |>\n<|\
    \ c |>\nthe question was about how to do this with std library. You misunderstood\
    \ it.\n<|/ c |>\n<| c |>\nI agree with, if you just need to change one character,\
    \ the best solution would be to just use toupper and tolower.\n<|/ c |>\n<| c\
    \ |>\nI agree with you, maybe the only reason for the question is educational\
    \ reasons and people should try out different solutions to learn from them.\n\
    <|/ c |>\n<| a dscore=5 |>\nFor my case I used std::transform with lambda function.\
    \ \n<code>\n#include <iostream>\n#include <algorithm>\n#include <iterator>\n#include\
    \ <string>\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdhvgxi2.d(12): Error: no identifier for declarator `c`

    /tmp/tmpfdhvgxi2.d(12): Error: expression expected, not `:`

    /tmp/tmpfdhvgxi2.d(12): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpfdhvgxi2.d(24): Error: declaration expected, not `<`

    /tmp/tmpfdhvgxi2.d(30): Error: unterminated character constant

    /tmp/tmpfdhvgxi2.d(52): Error: declaration expected, not `assert`

    /tmp/tmpfdhvgxi2.d(53): Error: declaration expected, not `assert`

    /tmp/tmpfdhvgxi2.d(54): Error: declaration expected, not `assert`

    /tmp/tmpfdhvgxi2.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdhvgxi2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tsize_t\
    \ i = 0;\n\tsize_t length = string.length();\n\tstring result = \"\";\n\tfor(;\
    \ i < length; i++) \n\t{\n\t\tif(string[i] == ' ') { result += ' '; }\n\t\telse\
    \ { result += string[i].toUpper(); }\n\t}\n\treturn result;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnqdcezvm.d(12): Error: no property `length` for type `string`

    /tmp/tmpnqdcezvm.d(13): Error: `string` is used as a type

    /tmp/tmpnqdcezvm.d(17): Error: no property `toUpper` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnqdcezvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tchar\
    \ c;\n\t\n\tfor (int i = 0; i < (int)string.size(); ++i) \n\t{\n\t\tc = string[i];\n\
    \t\t\n\t\tif (islower(c)) \n\t\t{\n\t\t\tstring[i] = toupper(c);\n\t\t}\n\t\t\
    else \n\t\t{\n\t\t\tstring[i] = tolower(c);\n\t\t}\n\t}\n\t\n\treturn string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpujt1v2pa.d(13): Error: C style cast illegal, use `cast(int)string.size()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpujt1v2pa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char,\
    \ string) {\n        if (toupper(string[char]) != string[char]) {\n          \
    \  string[char] = toupper(string[char]);\n        }\n        else {\n        \
    \    string[char] = tolower(string[char]);\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8jwguvq8.d(11): Error: no identifier for declarator `char`

    /tmp/tmp8jwguvq8.d(11): Error: no identifier for declarator `string`

    /tmp/tmp8jwguvq8.d(11): Error: found `)` when expecting `;`

    /tmp/tmp8jwguvq8.d(12): Error: found `]` when expecting `.` following char

    /tmp/tmp8jwguvq8.d(12): Error: found `)` when expecting identifier following `char`.

    /tmp/tmp8jwguvq8.d(12): Error: found `]` when expecting `.` following char

    /tmp/tmp8jwguvq8.d(12): Error: found `)` when expecting identifier following `char`.

    /tmp/tmp8jwguvq8.d(12): Error: found `{` when expecting `,`

    /tmp/tmp8jwguvq8.d(13): Error: found `]` when expecting `.` following char

    /tmp/tmp8jwguvq8.d(13): Error: found `=` when expecting identifier following `char`.

    /tmp/tmp8jwguvq8.d(13): Error: found `toupper` when expecting `,`

    /tmp/tmp8jwguvq8.d(13): Error: found `]` when expecting `.` following char

    /tmp/tmp8jwguvq8.d(13): Error: found `)` when expecting identifier following `char`.

    /tmp/tmp8jwguvq8.d(13): Error: found `;` when expecting `,`

    /t'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ size = string.length();\n\tfor(int i = 0; i < size; i++) {\n\t\tif(string[i]\
    \ >= 'a' && string[i] <= 'z')\n\t\t\tstring[i] += 32;\n\t\telse if(string[i] >=\
    \ 'A' && string[i] <= 'Z')\n\t\t\tstring[i] -= 32;\n\t}\n\treturn string;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi0c9wccg.d(11): Error: no property `length` for type `string`

    /tmp/tmpi0c9wccg.d(14): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpi0c9wccg.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0c9wccg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\t\n\tfor(int i = 0; i < string.length(); i++) {\n\t\tchar c\
    \ = string[i];\n\t\tresult += islower(c) ? toupper(c) : tolower(c);\n\t}\n\t\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y8m4kr4.d(11): Error: `string` is used as a type

    /tmp/tmp2y8m4kr4.d(13): Error: no property `length` for type `string`

    /tmp/tmp2y8m4kr4.d(15): Error: undefined identifier `islower`

    /tmp/tmp2y8m4kr4.d(15): Error: undefined identifier `toupper`

    /tmp/tmp2y8m4kr4.d(15): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y8m4kr4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z') \n            string[i] = string[i] - 32;\n        if (string[i] >=\
    \ 'A' && string[i] <= 'Z') \n            string[i] = string[i] + 32;\n    }\n\
    \    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl4ushdpc.d(11): Error: no property `size` for type `string`

    /tmp/tmpl4ushdpc.d(13): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpl4ushdpc.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl4ushdpc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach\
    \ (char c, string)\n        switch (c)\n        {\n            case 'a':\n   \
    \         case 'e':\n            case 'i':\n            case 'o':\n          \
    \  case 'u':\n                c = toupper(c);\n                break;\n      \
    \      case 'A':\n            case 'E':\n            case 'I':\n            case\
    \ 'O':\n            case 'U':\n                c = tolower(c);\n             \
    \   break;\n        }\n    return string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiazjdici.d(11): Error: no identifier for declarator `string`

    /tmp/tmpiazjdici.d(11): Error: found `)` when expecting `;`

    /tmp/tmpiazjdici.d(12): Error: expression expected, not `switch`

    /tmp/tmpiazjdici.d(13): Error: found `{` when expecting `)`

    /tmp/tmpiazjdici.d(29): Error: declaration expected, not `return`

    /tmp/tmpiazjdici.d(30): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiazjdici.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.size();\n    if (len < 2) return string;\n    \n    for (int i\
    \ = 0; i < len; ++i)\n    {\n        if (string[i] >= 'a' && string[i] <= 'z')\n\
    \        {\n            string temp = string[i].to_upper();\n            string[i]\
    \ = temp[0];\n            string[i+len] = temp[1];\n        }\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z')\n        {\n            string temp = string[i].to_lower();\n\
    \            string[i] = temp[0];\n            string[i+len] = temp[1];\n    \
    \    }\n    }\n    return string;\n}\n</code>\nThis can be further optimized by\
    \ taking advantage of bit manipulation, but this should get you started.\n<|/\
    \ a dscore=0 tags=c++ |>\n<| c |>\nI really don't like it, but it is an interesting\
    \ problem\n<|/ c |>\n<| c |>\nYou don't need two loops: you just need one loop,\
    \ that flips every character in the string from lowercase to uppercase and vice\
    \ versa. No need for an if-else. Also, if you think about it, the code could be\
    \ even shorter by doing this: `string[i] = toupper(string[i])`.\n<|/ c |>\n<|\
    \ c |>\nThanks, I was so focused on the algorithm that forgot the simple loop\
    \ itself. I'll update my answer.\n<|/ c |>\n<| c |>\nThis is better than the algorithm\
    \ in the accepted answer because it doesn't require the use of toupper().\n<|/\
    \ c |>\n<| c |>\nYeah, it would be nice if it used the `<ctype.h>` header file,\
    \ but I can't get that to work.\n<|/ c |>\n<| a tags=c++ |>\nThis is not an exact\
    \ answer to the OP's question but it might help someone else. Below is a c# version\
    \ using Regex. Perhaps someone could translate to C++ and hopefully be more successful.\n\
    <code>\n    static public string Capitalise(string input)\n    {\n        string\
    \ output = Regex.Replace(input, @\"(?<=[A-Z])[A-Z]\", \n            match =>\n\
    \            {\n                return \"-\" + match.Value.ToUpper();\n      \
    \      });\n        output = Regex.Replace(output, @\"(?<=[a-z])[a-z]\", \n  \
    \          match =>\n            {\n                return match.Value.ToLower()\
    \ + \"+\";\n            });\n        return output.Substring(0, output.Length\
    \ - 1);\n    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++ |>\nIn C#, you can use\
    \ this:\n<code>\npublic static string CapitalizeWords(string str) {\n    str =\
    \ Regex.\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsh2_1cs8.d(31): Error: declaration expected, not `<`

    /tmp/tmpsh2_1cs8.d(35): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(38): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(41): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(44): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(47): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(50): Error: unterminated character constant

    /tmp/tmpsh2_1cs8.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsh2_1cs8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for(auto c : string) result += (char)(c >= 'A' ? (c ^ 0x20)-0x20\
    \ : (c-'a'+0x0A));\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkstf1ssj.d(12): Error: no identifier for declarator `c`

    /tmp/tmpkstf1ssj.d(12): Error: expression expected, not `:`

    /tmp/tmpkstf1ssj.d(12): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpkstf1ssj.d(12): Error: C style cast illegal, use `cast(char)(c >= ''A''
    ? (c ^ 32) - 32 : c - ''a'' + 10)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkstf1ssj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    stringstream\
    \ ss(string);\n    string word = \"\";\n    while(ss.good()) {\n        char c\
    \ = ss.peek();\n        if(islower(c)) {\n            ss.unget();\n          \
    \  ss << upcase(c);\n        }\n        else {\n            ss.unget();\n    \
    \        ss << lowercase(c);\n        }\n        word += ss.str();\n    }\n  \
    \  return word;\n}\n/*\n Reverse a string.\n    >>> reverse_case(\"hello\")\n\
    \    \"olleh\"\n*/\nstring reverse_case(string string) \n{\n    stringstream ss(string);\n\
    \    string word = \"\";\n    while(ss.good()) {\n        char c = ss.peek();\n\
    \        if(islower(c)) {\n            ss.unget();\n            ss << toupper(c);\n\
    \        }\n        else {\n            ss.unget();\n            ss << tolower(c);\n\
    \        }\n        word += ss.str();\n    }\n    return word;\n}\n/*\n Split\
    \ a string. \n    >>> split('a,b,c', ',')\n    ['a', 'b', 'c']\n*/\nvector<string>\
    \ split(string string, char splitter) \n{\n    vector<string> result;\n    stringstream\
    \ ss(string);\n    string word = \"\";\n    while(ss.good()) {\n        char c\
    \ = ss.peek();\n        if(!isspace(c)) {\n            ss.unget();\n         \
    \   word += ss.str();\n        }\n        else {\n            if(word.length()>0)\
    \ {\n                result.push_back(word);\n            }\n            word\
    \ = \"\";\n        }\n    }\n    if(word.length()>0) {\n        result.push_back(word);\n\
    \    }\n    return result;\n}\n/*\n Find a string in a string.\n    >>> find_in_str(\"\
    hello world\", \"world\")\n    2\n*/\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqghdmw_q.d(55): Error: no identifier for declarator `vector`

    /tmp/tmpqghdmw_q.d(55): Error: declaration expected, not `<`

    /tmp/tmpqghdmw_q.d(60): Error: declaration expected, not `while`

    /tmp/tmpqghdmw_q.d(62): Error: declaration expected, not `if`

    /tmp/tmpqghdmw_q.d(64): Error: no identifier for declarator `word`

    /tmp/tmpqghdmw_q.d(64): Error: declaration expected, not `+=`

    /tmp/tmpqghdmw_q.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqghdmw_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ s;\n    for(int i=0;i<string.length();i++)\n    {\n        if(string[i]>='a'\
    \ && string[i]<='z')\n        {\n            int j=i;\n            do\n      \
    \      {\n                string[j] = string[j-1];\n                j--;\n   \
    \         }\n            while(j>0 && string[j]<='z');\n            string[j]\
    \ = string[j-1];\n        }\n    }\n    return s;\n}\n/*\n Return the length of\
    \ given string\n    >>> length_of(\"Hello\")\n    6\n*/\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeaj_nmgd.d(11): Error: `string` is used as a type

    /tmp/tmpeaj_nmgd.d(12): Error: no property `length` for type `string`

    /tmp/tmpeaj_nmgd.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)j]`

    /tmp/tmpeaj_nmgd.d(23): Error: cannot modify `immutable` expression `string[cast(ulong)j]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeaj_nmgd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ flipped = \"\\0\";\n    int length = string.length;\n    int i = 0;\n    for\
    \ (; i < length; ++ i) {\n        if ((string[i]) >= 'a' && (string[i]) <= 'z')\
    \ {\n            flipped += string[i] + 'A' - 'a';\n        } else {\n       \
    \     flipped += string[i];\n        }\n    }\n    return flipped;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp45ybur_z.d(11): Error: `string` is used as a type

    /tmp/tmp45ybur_z.d(12): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45ybur_z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ i; \n\tfor (i = 0; i < string.length; i++)\n\t{\n\t\tif (string[i] >= 'a' &&\
    \ string[i] <= 'z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse\
    \ if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i]\
    \ + 32;\n\t\t}\n\t}\n\treturn string;\n}\n/*\n Flip a string from upper to lower\
    \ case and vice-versa.\n \n*/\nstring flip_case2(string string) \n{\n\tint i;\
    \ \n\tfor (i = 0; i < string.length; i++)\n\t{\n\t\tif (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t\
    }\n\t}\n\treturn string;\n}\n/*\n Flip a number from 0 to 1 while keeping its\
    \ fractional part.\n \n*/\ndouble flip_case_int(double number)\n{\n\tdouble fract\
    \ = number % 1;\n\tdouble result = (number - fract);\n\treturn result;\n}\n/*\n\
    \ Flip a number from 0 to 1 while keeping its integer part and decimals.\n \n\
    */\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6540qtd.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpp6540qtd.d(20): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpp6540qtd.d(36): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpp6540qtd.d(40): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6540qtd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i<string.length(); i++)\n    {\n        if(string[i]<'Z' && string[i]>'a')\n\
    \        {\n            char temp = string[i];\n            string[i] = string[i]\
    \ - 'a' + 'A';\n            string[i] = temp;\n        }\n        if(string[i]>'Z'\
    \ && string[i]<'a')\n        {\n            char temp = string[i];\n         \
    \   string[i] = string[i] + 26 - 'A';\n            string[i] = temp;\n       \
    \ }\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdyei45h.d(11): Error: no property `length` for type `string`

    /tmp/tmppdyei45h.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmppdyei45h.d(17): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmppdyei45h.d(22): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmppdyei45h.d(23): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdyei45h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.dup; // FIXME string.replace would be faster for cases where it's not\
    \ a regex\n}\n</cell>\n<cell>\n%doctest_mode --timings\n</cell>\n<cell>\n%timeit\
    \ flip_case(\"HELLO\")\n</cell>\n<text>\nOdd length strings\nunittest\n{\n   \
    \ alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7c3x91_d.d(13): Error: declaration expected, not `<`

    /tmp/tmp7c3x91_d.d(26): Error: declaration expected, not `assert`

    /tmp/tmp7c3x91_d.d(27): Error: declaration expected, not `assert`

    /tmp/tmp7c3x91_d.d(28): Error: declaration expected, not `assert`

    /tmp/tmp7c3x91_d.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7c3x91_d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    bool\
    \ found = true;\n    foreach(char c in string)\n    {\n        if(!islower(c))\
    \ continue;\n        found = true;\n        break;\n    }\n    if(!found) return\
    \ string;\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdofsm4tr.d(12): Error: found `in` when expecting `;`

    /tmp/tmpdofsm4tr.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdofsm4tr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if\
    \ (string.length <= 0)\n        return string;\n    char[] chars = string.ToCharArray();\n\
    \    for (int i = 0; i < chars.Length; ++i)\n    {\n        char c = chars[i];\n\
    \        if (c == '_')\n            chars[i] = '-';\n        else if (char.IsUpper(c))\n\
    \            chars[i] = char.ToLower(c);\n    }\n    return new string(chars);\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbbrzvu5.d(13): Error: no property `ToCharArray` for type `string`

    /tmp/tmpkbbrzvu5.d(14): Error: no property `Length` for type `char[]`

    /tmp/tmpkbbrzvu5.d(19): Error: no property `IsUpper` for type `char`

    /tmp/tmpkbbrzvu5.d(20): Error: no property `ToLower` for type `char`

    /tmp/tmpkbbrzvu5.d(22): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbbrzvu5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i;\n    string result = \"\";\n    for(i = 0; i < string.length; ++i)\n    {\n\
    \        if (isprint(string[i]) && islower(string[i]))\n        {\n          \
    \  result += toupper(string[i]);\n        }\n        else if (isupper(string[i]))\n\
    \        {\n            result += string[i];\n        }\n        else\n      \
    \  {\n            result += string[i];\n        }\n    }\n    return result;\n\
    }\n</cell>\n<cell>\nimport std.file;\n/*\n Create a directory that contains the\
    \ files with the given name, if it does not exist. \n    Otherwise the directory\
    \ is not created.\n If directory exists then return true. Otherwise return false.\n\
    \ Use \"myname\" as name and \"/home/myname\" as path.\n */\nunittest\n{\n   \
    \ alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8d5ycxn.d(30): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8d5ycxn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n   foreach(char\
    \ ch, string)\n   {\n      if(islower(ch))\n         ch = toupper(ch);\n     \
    \ else \n         ch = tolower(ch);\n   }\n   return string;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\n<code>\nfunction to_upper(str: String)\n  str = \"abc\".to_s\
    \ # convert string to chars\n  str.each{|c|\n      puts c if c >= 'A' and c <=\
    \ 'Z'\n      puts c if c >= 'a' and c <= 'z'\n      puts c.upcase if c >= 'a'\
    \ and c <= 'z'\n  }\nend\n</code>\n<|/ a tags=ruby dscore=2 |>\n<| a tags=ruby\
    \ |>\n<code>\ndef to_upper(str) \n str.split('').map{|c| c.upcase if c>='A' &&\
    \ c<='Z' }.join('')\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby dscore=1\
    \ |>\n<code>\ndef to_upper(string)\n  string.gsub(/[[:lower:]]/) { |m| m.upcase\
    \ }\nend\n</code>\n<|/ a |>\n<| a |>\n<code>\ndef to_upper(string)\n  string.split('').map{|c|\
    \ c.upcase if c>='A' && c<='Z' }.join('')\nend\n</code>\n<|/ a dscore=1 tags=ruby\
    \ |>\n<| a dscore=0 |>\nI prefer to use gsub to do such transformation:\n<code>\n\
    def to_upper(string)\n  string.gsub(/[[:lower:]]/) { |m| m.upcase }\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a tags=ruby |>\n<code>\n\"ABC\".map { |c| c.upcase if c\
    \ >= 'A' && c <= 'Z' }.join(\"\")\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=ruby\
    \ |>\nUse gsub to convert lowercase to uppercase and vice-versa:\n<code>\n\"abcd\"\
    .gsub(/[a-z]/) { |c| c.upcase }\n# => \"ABCD\"\n\"abcd\".gsub(/[A-Z]/) { |c| c.downcase\
    \ }\n# => \"ABCD\"\n</code>\n<|/ a |>\n<| a dscore=0 |>\nFor converting uppercase\
    \ letters to lowercase letter\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoae6qa2h.d(11): Error: no identifier for declarator `string`

    /tmp/tmpoae6qa2h.d(11): Error: found `)` when expecting `;`

    /tmp/tmpoae6qa2h.d(18): Error: found `return` when expecting `)`

    /tmp/tmpoae6qa2h.d(20): Error: declaration expected, not `<`

    /tmp/tmpoae6qa2h.d(37): Error: unterminated character constant

    /tmp/tmpoae6qa2h.d(37): Error: unterminated character constant

    /tmp/tmpoae6qa2h.d(51): Error: unterminated character constant

    /tmp/tmpoae6qa2h.d(51): Error: unterminated character constant

    /tmp/tmpoae6qa2h.d(83): Error: declaration expected, not `assert`

    /tmp/tmpoae6qa2h.d(84): Error: declaration expected, not `assert`

    /tmp/tmpoae6qa2h.d(85): Error: declaration expected, not `assert`

    /tmp/tmpoae6qa2h.d(86): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoae6qa2h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    if(string.size() >= 2) \n    {\n        char letter = string[0];\n      \
    \  string[0] = string[1];\n        string[1] = letter;\n    }\n    \n    return\
    \ string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpit1lhnb1.d(12): Error: no property `size` for type `string`

    /tmp/tmpit1lhnb1.d(15): Error: cannot modify `immutable` expression `string[0]`

    /tmp/tmpit1lhnb1.d(16): Error: cannot modify `immutable` expression `string[1]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpit1lhnb1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char:string,\
    \ char:char) {\n        if(char >= 'a' && char <= 'z')\n            char ^= 'A';\n\
    \        if(char >= 'A' && char <= 'Z')\n            char ^= 'a';\n    }\n   \
    \ return string;\n}\n</code>\n<|/ a dscore=2 tags=string,c++,algorithm |>\n<|\
    \ a dscore=2 |>\nC++ 11 Solution (With STD)\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <algorithm>\n#include <numeric>\n#include <vector>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ktnljm5.d(11): Error: no identifier for declarator `char`

    /tmp/tmp7ktnljm5.d(11): Error: found `:` when expecting `;`

    /tmp/tmp7ktnljm5.d(11): Error: found `:` when expecting `.` following char

    /tmp/tmp7ktnljm5.d(11): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmp7ktnljm5.d(12): Error: found `>=` when expecting `.` following char

    /tmp/tmp7ktnljm5.d(12): Error: found `97U` when expecting identifier following
    `char`.

    /tmp/tmp7ktnljm5.d(12): Error: found `<=` when expecting `.` following char

    /tmp/tmp7ktnljm5.d(12): Error: found `122U` when expecting identifier following
    `char`.

    /tmp/tmp7ktnljm5.d(13): Error: no identifier for declarator `char`

    /tmp/tmp7ktnljm5.d(13): Error: found `^=` instead of statement

    /tmp/tmp7ktnljm5.d(14): Error: found `>=` when expecting `.` following char

    /tmp/tmp7ktnljm5.d(14): Error: found `65U` when expecting identifier following
    `char`.

    /tmp/tmp7ktnljm5.d(14): Error: found `<=` when expecting `.` following char

    /tmp/tmp7ktnljm5.d(14): Error: found `'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    map<string,int>\
    \ mappings;\n    map<string,int>::iterator it;\n    \n    mappings[\"a\"] = 0;\n\
    \    mappings[\"b\"] = 1;\n    mappings[\"c\"] = 2;\n    mappings[\"d\"] = 3;\n\
    \    mappings[\"e\"] = 4;\n    mappings[\"f\"] = 5;\n    mappings[\"g\"] = 6;\n\
    \    mappings[\"h\"] = 7;\n    mappings[\"i\"] = 8;\n    mappings[\"j\"] = 9;\n\
    \    mappings[\"k\"] = 10;\n    mappings[\"l\"] = 11;\n    mappings[\"m\"] = 12;\n\
    \    mappings[\"n\"] = 13;\n    mappings[\"o\"] = 14;\n    mappings[\"p\"] = 15;\n\
    \    mappings[\"q\"] = 16;\n    mappings[\"r\"] = 17;\n    mappings[\"s\"] = 18;\n\
    \    mappings[\"t\"] = 19;\n    mappings[\"u\"] = 20;\n    mappings[\"v\"] = 21;\n\
    \    mappings[\"w\"] = 22;\n    mappings[\"x\"] = 23;\n    mappings[\"y\"] = 24;\n\
    \    mappings[\"z\"] = 25;\n    mappings[\"A\"] = 26;\n    mappings[\"B\"] = 27;\n\
    \    mappings[\"C\"] = 28;\n    mappings[\"D\"] = 29;\n    mappings[\"E\"] = 30;\n\
    \    mappings[\"F\"] = 31;\n    mappings[\"G\"] = 32;\n    mappings[\"H\"] = 33;\n\
    \    mappings[\"I\"] = 34;\n    mappings[\"J\"] = 35;\n    mappings[\"K\"] = 36;\n\
    \    mappings[\"L\"] = 37;\n    mappings[\"M\"] = 38;\n    mappings[\"N\"] = 39;\n\
    \    mappings[\"O\"] = 40;\n    mappings[\"P\"] = 41;\n    mappings[\"Q\"] = 42;\n\
    \    mappings[\"R\"] = 43;\n    mappings[\"S\"] = 44;\n    mappings[\"T\"] = 45;\n\
    \    mappings[\"U\"] = 46;\n    mappings[\"V\"] = 47;\n    mappings[\"W\"] = 48;\n\
    \    mappings[\"X\"] = 49;\n    mappings[\"Y\"] = 50;\n    mappings[\"Z\"] = 51;\n\
    \    mappings[\"0\"] = 52;\n    mappings[\"1\"] = 53;\n    mappings[\"2\"] = 54;\n\
    \    mappings[\"3\"] = 55;\n    mappings[\"4\"] = 56;\n    mappings[\"5\"] = 57;\n\
    \    mappings[\"6\"] = 58;\n    mappings[\"7\"] = 59;\n    mappings[\"8\"] = 60;\n\
    \    mappings[\"9\"] = 61;\n    mappings[\"/\"] = 62;\n    mappings[\" \"] = \n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5lia2gx9.d(11): Error: found `>` when expecting `.` following int

    /tmp/tmp5lia2gx9.d(12): Error: found `>` when expecting `.` following int

    /tmp/tmp5lia2gx9.d(12): Error: found `:` when expecting identifier following `int`.

    /tmp/tmp5lia2gx9.d(12): Error: found `:` when expecting `;` following statement

    /tmp/tmp5lia2gx9.d(78): Error: expression expected, not `unittest`

    /tmp/tmp5lia2gx9.d(79): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lia2gx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if(string.size()\
    \ == 0)\n        return string;\n    return string[std.algorithm.indexof(string,\
    \ 'A') + 1] + string[std.algorithm.indexof(string, 'a') - 1] + string[std.algorithm.indexof(string,\
    \ 'a')]; \n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkejn0cgz.d(11): Error: no property `size` for type `string`

    /tmp/tmpkejn0cgz.d(13): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpkejn0cgz.d(13): Error: undefined identifier `algorithm` in package `std`

    /tmp/tmpkejn0cgz.d(13): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkejn0cgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ copy = string; \n    int len = string.length(); \n    for (int i = 0; i < len;\
    \ ++i) \n    {\n        if (string[i] < 'a' || string[i] > 'z')\n        {\n \
    \           copy[i] = string[i];\n        }\n        else if (string[i] > 'Z')\n\
    \        {\n            copy[i] = string[i] - ('a' - 'A');\n        }\n      \
    \  else if (string[i] < 'a')\n        {\n            copy[i] = string[i] + ('A'\
    \ - 'a');\n        }\n    }\n    return copy;\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ tags=c++,string |>\n<code>\nstring S = \"abbb\";\nstring T = \"\";\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0t4xke2.d(30): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0t4xke2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    bool\
    \ upper = true;\n    for (int i = 0, n = string.length(); i < n; ++i) {\n    \
    \    char c = string[i];\n        if (c == '_') {\n            continue;\n   \
    \     }\n        if (upper) {\n            if (c >= 'a' && c <= 'z') {\n     \
    \           string[i] = c + 32;\n                upper = false;\n            }\
    \ else if (c >= 'A' && c <= 'Z') {\n                string[i] = c + 32;\n    \
    \            upper = true;\n            }\n        } else {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                string[i] = c + 32;\n               \
    \ upper = true;\n            } else if (c >= 'a' && c <= 'z') {\n            \
    \    string[i] = c + 32;\n                upper = false;\n            }\n    \
    \    }\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm5qhfls5.d(12): Error: no property `length` for type `string`

    /tmp/tmpm5qhfls5.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpm5qhfls5.d(22): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpm5qhfls5.d(27): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpm5qhfls5.d(30): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5qhfls5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tfor (auto &c: string)\n\t\tresult += toupper(c);\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd6cnqa_l.d(12): Error: basic type expected, not `&`

    /tmp/tmpd6cnqa_l.d(12): Error: no identifier for declarator `_error_`

    /tmp/tmpd6cnqa_l.d(12): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd6cnqa_l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ length = string.length();\n    int new_length = 0;\n    char ch;\n    char previous\
    \ = 0;\n    for(int i = 0; i < length; ++i) {\n        ch = string[i];\n     \
    \   \n        if(islower(ch)) {\n            if(!isupper(previous)) {\n      \
    \          string[new_length++] = toupper(ch);\n            } else {\n       \
    \         string[new_length++] = tolower(ch);\n            }\n        } else {\n\
    \            string[new_length++] = ch;\n        }\n        previous = ch;\n \
    \   }\n    return string(new_length, string);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyov6yow1.d(11): Error: no property `length` for type `string`

    /tmp/tmpyov6yow1.d(18): Error: undefined identifier `islower`

    /tmp/tmpyov6yow1.d(19): Error: undefined identifier `isupper`

    /tmp/tmpyov6yow1.d(20): Error: undefined identifier `toupper`

    /tmp/tmpyov6yow1.d(22): Error: undefined identifier `tolower`

    /tmp/tmpyov6yow1.d(25): Error: cannot modify `immutable` expression `string[cast(ulong)new_length++]`

    /tmp/tmpyov6yow1.d(29): Error: function expected before `()`, not `string` of
    type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyov6yow1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (auto c : string) \n    {\n        if (c == 'A') \n        {\n            string.replace(c,\
    \ 'a');\n        }\n        else if (c == 'a')\n        {\n            string.replace(c,\
    \ 'A');\n        }\n    }\n    return string;\n}\n</code>\n<|/ a tags=c,c++,c++11\
    \ |>\n<| a dscore=0 |>\nSince you didn't specify what language, I'll give you\
    \ a solution for C using standard library functions. I doubt this will give you\
    \ the correct output, but it's worth a try.\n<code>\n#include <stdio.h>\n#include\
    \ <string.h>\n#include <ctype.h>\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5pc2ico.d(11): Error: no identifier for declarator `c`

    /tmp/tmpp5pc2ico.d(11): Error: expression expected, not `:`

    /tmp/tmpp5pc2ico.d(11): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpp5pc2ico.d(24): Error: declaration expected, not `<`

    /tmp/tmpp5pc2ico.d(27): Error: unterminated character constant

    /tmp/tmpp5pc2ico.d(27): Error: unterminated character constant

    /tmp/tmpp5pc2ico.d(27): Error: unterminated character constant

    /tmp/tmpp5pc2ico.d(36): Error: declaration expected, not `assert`

    /tmp/tmpp5pc2ico.d(37): Error: declaration expected, not `assert`

    /tmp/tmpp5pc2ico.d(38): Error: declaration expected, not `assert`

    /tmp/tmpp5pc2ico.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5pc2ico.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(size_t\
    \ i = 0; i < string.size(); i++)\n    {\n        switch(string[i])\n        {\n\
    \            case 'A': string[i] = 'a'; break;\n            case 'B': string[i]\
    \ = 'b'; break;\n            case 'C': string[i] = 'c'; break;\n            case\
    \ 'D': string[i] = 'd'; break;\n            case 'E': string[i] = 'e'; break;\n\
    \            case 'F': string[i] = 'f'; break;\n            case 'G': string[i]\
    \ = 'g'; break;\n            case 'H': string[i] = 'h'; break;\n            case\
    \ 'I': string[i] = 'i'; break;\n            case 'J': string[i] = 'j'; break;\n\
    \            case 'K': string[i] = 'k'; break;\n            case 'L': string[i]\
    \ = 'l'; break;\n            case 'M': string[i] = 'm'; break;\n            case\
    \ 'N': string[i] = 'n'; break;\n            case 'O': string[i] = 'o'; break;\n\
    \            case 'P': string[i] = 'p'; break;\n            case 'Q': string[i]\
    \ = 'q'; break;\n            case 'R': string[i] = 'r'; break;\n            case\
    \ 'S': string[i] = 's'; break;\n            case 'T': string[i] = 't'; break;\n\
    \            case 'U': string[i] = 'u'; break;\n            case 'V': string[i]\
    \ = 'v'; break;\n            case 'W': string[i] = 'w'; break;\n            case\
    \ 'X': string[i] = 'x'; break;\n            case 'Y': string[i] = 'y'; break;\n\
    \            case 'Z': string[i] = 'z'; break;\n            case 'a':string[i]\
    \ = 'A'; break;\n            case 'b':string[i] = 'B'; break;\n            case\
    \ 'c':string[i] = 'C'; break;\n            case 'd':string[i] = 'D'; break;\n\
    \            case 'e':string[i] = 'E'; break;\n            case 'f':string[i]\
    \ = 'F'; break;\n            case 'g':string[i] = 'G'; break;\n            case\
    \ 'h':string[i] = 'H'; break;\n            case 'i':string[i] = 'I'; break;\n\
    \            case 'j':string[i] = 'J'; break;\n            case 'k':string[i]\
    \ = 'K'; break;\n            case 'l':string[i] = 'L'; break;\n            case\
    \ 'm':string[i] = 'M'; break;\n            case 'n':string[i] = 'N'; break;\n\
    \            case 'o':string[i] = 'O'; break;\n            case 'p':string[i]\
    \ = 'P'; break;\n            case 'q':string[i] = 'Q'; break;\n            case\
    \ 'r':string[i] = 'R'; break;\n            case 's':string[i] = 'S'; break;\n\
    \            case 't':string[i] = 'T'; break;\n            case 'u':string\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplx58926e.d(62): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmplx58926e.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmplx58926e.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmplx58926e.d(70): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplx58926e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if(string.size()\
    \ == 0)\n        return string;\n    \n    char first = string[0];\n    \n   \
    \ if(std.isLowerLetter(first))\n        string[0] = std.toUpper(first);\n    else\
    \ \n        string[0] = std.toLower(first);\n    \n    for(int i = 1; i < string.size();\
    \ ++i)\n    {\n        char c = string[i];\n        \n        if(std.isLowerLetter(c))\n\
    \        {\n            std.toUpper(c);\n        }\n        else \n        {\n\
    \            std.toLower(c);\n        }\n    }\n    \n    return string;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ctr63ve.d(11): Error: no property `size` for type `string`

    /tmp/tmp2ctr63ve.d(16): Error: undefined identifier `isLowerLetter` in package
    `std`

    /tmp/tmp2ctr63ve.d(17): Error: undefined identifier `toUpper` in package `std`

    /tmp/tmp2ctr63ve.d(19): Error: undefined identifier `toLower` in package `std`

    /tmp/tmp2ctr63ve.d(21): Error: no property `size` for type `string`

    /tmp/tmp2ctr63ve.d(25): Error: undefined identifier `isLowerLetter` in package
    `std`

    /tmp/tmp2ctr63ve.d(27): Error: undefined identifier `toUpper` in package `std`

    /tmp/tmp2ctr63ve.d(31): Error: undefined identifier `toLower` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ctr63ve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    string result = '';\n    for (auto c : string) \n    {\n        if (c >=\
    \ 'A' && c <= 'Z') \n        {\n            result += ((c - 'A') + 'a');\n   \
    \     }\n        else if (c >= 'a' && c <= 'z') \n        {\n            result\
    \ += ((c - 'a') + 'A');\n        }\n        else \n        {\n            result\
    \ += c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpox_y6_ja.d(12): Error: unterminated character constant

    /tmp/tmpox_y6_ja.d(13): Error: no identifier for declarator `c`

    /tmp/tmpox_y6_ja.d(13): Error: expression expected, not `:`

    /tmp/tmpox_y6_ja.d(13): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpox_y6_ja.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n     \
    \   if(c == 'a')\n            c = 'A';\n        else if(c == 'A')\n          \
    \  c = 'a';\n        string[i] = c;\n    }\n    return string;\n}\n/*\n For a\
    \ given string, swap uppercase and lowercase characters and vice versa.\n    >>>\
    \ swap(\"HELLO\")\n    \"heLlo\"\n    \n*/\nstring swap(string string) \n{\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(c == 'A')\n            c = 'a';\n        else if(c == 'a')\n     \
    \       c = 'A';\n        string[i] = c;\n    }\n    return string;\n}\n/*\n For\
    \ a given string, swap uppercase and lowercase characters and vice versa.\n  \
    \  >>> swap_case(\"HELLO\")\n    \"hELLo\"\n    \n*/\nstring swap_case(string\
    \ string) \n{\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(c == 'A')\n            c = 'a';\n        else if(c\
    \ == 'a')\n            c = 'A';\n        string[i] = c;\n    }\n    return string;\n\
    }\n/*\n For a given string, swap uppercase and lowercase characters and vice versa.\n\
    \    >>> flip_swap(\"HELLO\")\n    \"hELLO\"\n    \n*/\nstring flip_swap(string\
    \ string) \n{\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(c == 'a')\n            c = 'A';\n        else if(c\
    \ == 'A')\n            c = 'a';\n        if(c == 'A')\n            c = 'a';\n\
    \        if(c == 'a')\n            c = 'A';\n        string[i] = c;\n    }\n \
    \   return string;\n}\n/*\n For a given string, split on uppercase and lowercase\
    \ characters.\n    >>> split_lower(\"hello\")\n    [\"h\", \"e\", \"l\", \"l\"\
    , \"o\"]\n    \n*/\nvector<string> split_lower(string string) \n{\n    vector<string>\
    \ split;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c\
    \ = string[i];\n        if(islower(c))\n            split.push_back(string[i]);\n\
    \    }\n    return split;\n}\n/*\n For a given string, split on uppercase and\
    \ lowercase characters.\n    >>> split_upper(\"HELLO\")\n    [\"h\", \"E\", \"\
    L\", \"L\", \"O\"]\n    \n*/\nvector<string> split_upper(string string) \n{\n\
    \    vector<string> split;\n    for(int i = 0; i < string\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_475vk9g.d(89): Error: no identifier for declarator `vector`

    /tmp/tmp_475vk9g.d(89): Error: declaration expected, not `<`

    /tmp/tmp_475vk9g.d(92): Error: declaration expected, not `for`

    /tmp/tmp_475vk9g.d(92): Error: no identifier for declarator `i`

    /tmp/tmp_475vk9g.d(92): Error: declaration expected, not `<`

    /tmp/tmp_475vk9g.d(92): Error: no identifier for declarator `i`

    /tmp/tmp_475vk9g.d(92): Error: declaration expected, not `++`

    /tmp/tmp_475vk9g.d(95): Error: declaration expected, not `if`

    /tmp/tmp_475vk9g.d(97): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_475vk9g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n      \
    \  // Flip lower cases to uppercase\n        if(string[i] >= 'A' && string[i]\
    \ <= 'Z')\n            result += string[i] - 'A' + 'a';\n        // Flip uppercases\
    \ to lower cases\n        else if(string[i] >= 'a' && string[i] <= 'z')\n    \
    \        result += string[i] - 'a' + 'A';\n        // If char is neither upper\
    \ nor lower, just add it as it is\n        else\n            result += string[i];\n\
    \    }\n    return result;\n}\n</cell>\n<text>\nTest Cases\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jkc2fev.d(26): Error: declaration expected, not `<`

    /tmp/tmp0jkc2fev.d(33): Error: declaration expected, not `assert`

    /tmp/tmp0jkc2fev.d(34): Error: declaration expected, not `assert`

    /tmp/tmp0jkc2fev.d(35): Error: declaration expected, not `assert`

    /tmp/tmp0jkc2fev.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jkc2fev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char\
    \ lowcase;\n    string result = \"\";\n    for (int i = 0; i<string.length();\
    \ i++) {\n        lowcase = string[i];\n        switch(lowcase) {\n          \
    \  case 'A':\n            case 'a':\n                result += \"A\";\n      \
    \          break;\n            case 'B':\n            case 'b':\n            \
    \    result += \"B\";\n                break;\n            case 'C':\n       \
    \     case 'c':\n                result += \"C\";\n                break;\n  \
    \          case 'D':\n            case 'd':\n                result += \"D\";\n\
    \                break;\n            case 'E':\n            case 'e':\n      \
    \          result += \"E\";\n                break;\n            case 'F':\n \
    \           case 'f':\n                result += \"F\";\n                break;\n\
    \            case 'G':\n            case 'g':\n                result += \"G\"\
    ;\n                break;\n            case 'H':\n            case 'h':\n    \
    \            result += \"H\";\n                break;\n            case 'I':\n\
    \            case 'i':\n                result += \"I\";\n                break;\n\
    \            case 'J':\n            case 'j':\n                result += \"J\"\
    ;\n                break;\n            case 'K':\n            case 'k':\n    \
    \            result += \"K\";\n                break;\n            case 'L':\n\
    \            case 'l':\n                result += \"L\";\n                break;\n\
    \            case 'M':\n            case 'm':\n                result += \"M\"\
    ;\n                break;\n            case 'N':\n            case 'n':\n    \
    \            result += \"N\";\n                break;\n            case 'O':\n\
    \            case 'o':\n                result += \"O\";\n                break;\n\
    \            case 'P':\n            case 'p':\n                result += \"P\"\
    ;\n                break;\n            case 'Q':\n            case 'q':\n    \
    \            result += \"Q\";\n                break;\n            case 'R':\n\
    \            case 'r':\n                result += \"R\";\n                break;\n\
    \            case 'S':\n            case 's':\n                result += \"S\"\
    ;\n                break;\n            case 'T':\n            case 't':\n    \
    \            result += \"T\";\n                break;\n            case 'U':\n\
    \            case 'u':\n                result += \"U\";\n                break;\n\
    \            case 'V':\n            case 'v':\n                result += \"V\"\
    ;\n                break;\n            case 'W':\n            case 'w':\n    \
    \            result += \"W\";\n                break;\n            case 'X':\n\
    \            case 'x':\n                result += \"X\";\n                break;\n\
    \            case 'Y':\n            case 'y':\n                result += \"Y\"\
    ;\n                break;\n            case 'Z':\n            case 'z':\n    \
    \            result += \"Z\";\n                break;\n            default:\n\
    \                result += lowcase;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpisleo0cq.d(12): Error: `string` is used as a type

    /tmp/tmpisleo0cq.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpisleo0cq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ retstring = string;\n    for (int i = 0; i < retstring.size(); ++i)\n    {\n\
    \        char c = retstring[i];\n        if (c >= 'A' && c <= 'Z')\n        {\n\
    \            retstring[i] = (char)(c - 'A' + 'A');\n        }\n    }\n    return\
    \ retstring;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_gtowzg.d(17): Error: C style cast illegal, use `cast(char)(c
    - ''A'' + ''A'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_gtowzg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor\
    \ (int i = 0; i < string.length; i++)\n\t{\n\t\tchar c = string[i];\n\t\tif (c\
    \ >= 'a' && c <= 'z')\n\t\t{\n\t\t\tstring[i] = (char)(c - 'a' + 'A');\n\t\t}\n\
    \t\telse if (c >= 'A' && c <= 'Z')\n\t\t{\n\t\t\tstring[i] = (char)(c - 'A' +\
    \ 'a');\n\t\t}\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplk0ftdfb.d(16): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + ''A'')`

    /tmp/tmplk0ftdfb.d(20): Error: C style cast illegal, use `cast(char)(c - ''A''
    + ''a'')`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplk0ftdfb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ l = 0;\n\twhile(l < string.Length)\n\t{\n\t\tif(string[l] == string[l].tolower())\
    \ //If its lowercase, change it to uppercase\n\t\t\tstring[l] = string[l].toupper();\n\
    \t\telse\n\t\t\tstring[l] = string[l].tolower();\n\t\tl++;\n\t}\n\treturn string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx19lhf91.d(12): Error: no property `Length` for type `string`

    /tmp/tmpx19lhf91.d(14): Error: no property `tolower` for type `immutable(char)`

    /tmp/tmpx19lhf91.d(15): Error: no property `toupper` for type `immutable(char)`

    /tmp/tmpx19lhf91.d(17): Error: no property `tolower` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx19lhf91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.size(); ++i)\n    {\n        if(string[i] >= 'a' && string[i]\
    \ <= 'z')\n        {\n            string[i] = string[i] + 'A' - 'a';\n       \
    \ }\n        else\n        {\n            string[i] = string[i] + 'a' - 'A';\n\
    \        }\n    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs_yg13l.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs_yg13l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(unsigned\
    \ i=0;i<string.length();++i)\n\t{\n\t\tchar c=string[i];\n\t\tif(c>=0x20 && c<=0x7e)\n\
    \t\t{\n\t\t\tif(islower(c)) string[i]=toupper(c);\n\t\t\telse string[i]=tolower(c);\n\
    \t\t}\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk6mzmxx.d(11): Error: undefined identifier `unsigned`, did you
    mean `uint`?

    /tmp/tmpzk6mzmxx.d(11): Error: no property `length` for type `string`

    /tmp/tmpzk6mzmxx.d(16): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk6mzmxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ lowercase(string).swapcase();\n}\n/*\n For a given string, flip lowercase characters\
    \ to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n   \
    \ \"hELLO\"\n    \n*/\nstring flip_case_2(string string) \n{\n    string result\
    \ = \"\";\n    for(int i = 0; i < string.length(); i++)\n    {\n        if(islower(string[i]))\n\
    \            result = result + uppercase(string[i]);\n        else\n         \
    \   result = result + lowercase(string[i]);\n    }\n    return result.swapcase();\n\
    }\n/*\n For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n    >>> flip_case_2(\"Hello\")\n    \"hELLO\"\n    \n*/\nstring\
    \ flip_case_3(string string) \n{\n    return lowercase(string.swapcase());\n}\n\
    /*\n For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n    >>> flip_case_3(\"Hello\")\n    \"hELLO\"\n    \n*/\n</code>\n\
    <|/ a tags=uppercase,lowercase,c++,string,replace |>\n<| c |>\nWhy not just `string::swapcase()`?\n\
    <|/ c |>\n<| a tags=uppercase,lowercase,c++,string,replace |>\n<code>\nstring\
    \ a = \"A\";\nstring b = \"B\";\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdu77uo2b.d(47): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu77uo2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach\
    \ (char character : string) \n    {\n        if(character >= 'a' && character\
    \ <= 'z')\n            character = character - 'a' + 'A';\n    }\n    \n    return\
    \ string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy2lwwn0j.d(11): Error: found `:` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy2lwwn0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i = 0; i < string.length(); i++)\n\t{\n\t\tif(string[i] >= 65 && string[i] <=\
    \ 90)\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if(string[i]\
    \ >= 97 && string[i] <= 122)\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\
    \t}\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n  \
    \  assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp48e05nlw.d(11): Error: no property `length` for type `string`

    /tmp/tmp48e05nlw.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp48e05nlw.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48e05nlw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(auto\
    \ c: string)\n\t\tc = toupper(c);\n\tfor(auto c: string)\n\t\tc = tolower(c);\n\
    \treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr8a6rvtr.d(11): Error: no identifier for declarator `c`

    /tmp/tmpr8a6rvtr.d(11): Error: expression expected, not `:`

    /tmp/tmpr8a6rvtr.d(11): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpr8a6rvtr.d(13): Error: no identifier for declarator `c`

    /tmp/tmpr8a6rvtr.d(13): Error: expression expected, not `:`

    /tmp/tmpr8a6rvtr.d(13): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8a6rvtr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    char buf[len + 1];\n    for(int i = 0; i < len;\
    \ ++i)\n    {\n        buf[i] = string[i];\n        buf[i] = toupper(buf[i]);\n\
    \        buf[i] = tolower(buf[i]);\n    }\n    return string(buf);\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6idpqu2c.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `char[len + 1] buf`

    /tmp/tmp6idpqu2c.d(11): Error: no property `length` for type `string`

    /tmp/tmp6idpqu2c.d(12): Error: variable `len` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6idpqu2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i=0;i<string.size();++i)\n    {\n        if(isprint(string[i])) return string[i];\n\
    \        else string[i]= toupper(string[i]);\n    }\n    return string;\n}\n/*\n\
    \ For a given string, flip all uppercase characters to lowercase and lowercase\
    \ to uppercase.\n    >>> flip_case(\"hello\")\n    \"hELLO\"\n    \n*/\nstring\
    \ flip_case(string string) \n{\n    for(int i=0;i<string.size();++i)\n    {\n\
    \        if(isprint(string[i]))\n        {\n            if(string[i]>=65 && string[i]<=90)\n\
    \                return string[i];\n            else\n            {\n        \
    \        return string[i];\n            }\n        }\n    }\n    return string;\n\
    }\n/*\n For a given string, flip all uppercase characters to lowercase and lowercase\
    \ to uppercase.\n    >>> flip_case(\"hello\")\n    \"hELLO\"\n    \n*/\nstring\
    \ flip_case(string string) \n{\n    for(int i=0;i<string.size();++i)\n    {\n\
    \        if(isprint(string[i]))\n        {\n            if(string[i]>=65 && string[i]<=90)\n\
    \                return string[i];\n            else\n            {\n        \
    \        return string[i];\n            }\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkd5t8ovw.d(11): Error: no property `size` for type `string`

    /tmp/tmpkd5t8ovw.d(13): Error: undefined identifier `isprint`

    /tmp/tmpkd5t8ovw.d(14): Error: undefined identifier `toupper`

    /tmp/tmpkd5t8ovw.d(13): Error: cannot implicitly convert expression `string[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpkd5t8ovw.d(26): Error: no property `size` for type `string`

    /tmp/tmpkd5t8ovw.d(28): Error: undefined identifier `isprint`

    /tmp/tmpkd5t8ovw.d(31): Error: cannot implicitly convert expression `string[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpkd5t8ovw.d(34): Error: cannot implicitly convert expression `string[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpkd5t8ovw.d(48): Error: no property `size` for type `string`

    /tmp/tmpkd5t8ovw.d(50): Error: undefined identifier `isprint`

    /tmp/tmpkd5t8ovw.d(53): Error: cannot implicitly convert expression `string[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpkd5t8ovw.d(56): Error: cannot implicitly convert expression `string[cast(ulong)i]`
    of type `immutable(char)` to `string`

    /tmp/tmpkd5t8ovw.d(66): Error: `tmpkd5t8ovw.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmpkd5t8ovw.d(9):     `tmpkd5t8ovw.flip_case(string string)`

    and:

    /tmp/tmpkd5t8ovw.d(46):     `tmpkd5t8ovw.flip_case(string string)`

    /tmp/tmpkd5t8ovw.d(67): Error: `tmpkd5t8ovw.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmpkd5t8ovw.d(9):     `tmpkd5t8ovw.flip_case(string string)`

    and:

    /tmp/tmpkd5t8ovw.d(46):     `tmpkd5t8ovw.flip_case(string string)`

    /tmp/tmpkd5t8ovw.d(68): Error: `tmpkd5t8ovw.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmpkd5t8ovw.d(9):     `tmpkd5t8ovw.flip_case(string string)`

    and:

    /tmp/tmpkd5t8ovw.d(46):     `tmpkd5t'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    char characters[len];\n    for(int i=0;i<len;i++)\n\
    \        characters[i] = string[i];\n    for(int i=0;i<len;i++)\n    {\n     \
    \   if(characters[i]>='a' && characters[i]<='z')\n            characters[i] =\
    \ characters[i]+'A'-'a';\n        else\n            characters[i] = characters[i]-32;\n\
    \    }\n    return stringFromChars(characters);\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp574tayf5.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `char[len] characters`

    /tmp/tmp574tayf5.d(11): Error: no property `length` for type `string`

    /tmp/tmp574tayf5.d(12): Error: variable `len` cannot be read at compile time

    /tmp/tmp574tayf5.d(22): Error: undefined identifier `stringFromChars`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp574tayf5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.length(); i++) {\n        char c = string[i];\n        if\
    \ (c == '_')\n            string[i] = '-';\n        else \n            string[i]\
    \ = (char) (c - 'a' + 26);\n    }\n    return string;\n}\n/*\n Given a list of\
    \ characters, return a string where all of the duplicate \n characters have been\
    \ swapped with the character '-'.\n    For example, given \"A-B-C\" return \"\
    A-B--C\"\n    \n    If you cannot use the std.string library, you can create your\
    \ own version\n    of 'std.string' that has a 'replace_all' function\n*/\nstring\
    \ swap_duplicates(string string) \n{\n    string result = \"\";\n    unordered_set<char>\
    \ hash;\n    for(int i = 0; i < string.length(); i++)\n        if(hash.find(string[i])\
    \ != hash.end())\n            result += string[i] + \"-\";\n        else \n  \
    \          result += string[i];\n    return result;\n}\n/*\n Given a string, count\
    \ the number of letters in the string that are in alphabetical order. \n \n This\
    \ is also known as Ziggurat Counting. \n \n For example, given \"BANANA\", return\
    \ 2.\n \n As a precaution, make sure you pass your input string through a toLower\
    \ function.\n \n If you can use the std.string library, you can use the function\
    \ 'count_by_sort'\n*/\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4j4fbmy.d(16): Error: C style cast illegal, use `cast(char)(c
    - ''a'' + 26)`

    /tmp/tmpu4j4fbmy.d(31): Error: found `>` when expecting `.` following char

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4j4fbmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ map2(char::toUpper, char::toLower, string);\n}\n</code>\n<|/ a dscore=1 tags=string,c++,uppercase,lowercase\
    \ |>\n<| c |>\nThis code doesn't use any external libraries, `map2` doesn't appear\
    \ to be in the standard library and so isn't guaranteed to be available on other\
    \ compilers.\n<|/ c |>\n<| c |>\nI didn't know this before, thank you for pointing\
    \ that out. I'm working on that\n<|/ c |>\n<| c |>\nAh yes, map2 isn't in c++11.\
    \ I'm sorry, I should read more carefully.\n<|/ c |>\n<| c |>\nThe example is\
    \ using c++11\n<|/ c |>\n<| a |>\nThe other answers are more elegant, but if you\
    \ want the same exact function, you can use this:\n<code>\nstring convertToUpperCase(string\
    \ input){\n    string outString = \"\";\n    for(int i = 0; i < input.length();\
    \ i++){\n        if(input[i] > 90){\n            outString += 'a';\n        }\n\
    \        else if(input[i] < 65){\n            outString += 'A';\n        }\n \
    \       else {\n            outString += input[i];\n        }\n    }\n    return\
    \ outString;\n}\n</code>\n<|/ a dscore=0 tags=string,c++,uppercase,lowercase |>\n\
    <| c |>\nIt works only for the latin alphabet, if you have umlauts or other letters\
    \ in the string, you'll get garbage out.\n<|/ c |>\n<| c |>\nYes, that's the point,\
    \ to make it a complete function, not just for the latin alphabet.\n<|/ c |>\n\
    <| a dscore=0 |>\nHere is a simple solution which converts the string to uppercase\
    \ and lowercase letter by letter without changing the case of the other characters.\
    \ You can do whatever you want with the characters. Note that this is only a solution\
    \ for the Latin alphabet.\n<code>\n#include <iostream>\nusing namespace std;\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3vnxrpmi.d(11): Error: found `:` when expecting `.` following char

    /tmp/tmp3vnxrpmi.d(11): Error: found `:` when expecting identifier following `char`.

    /tmp/tmp3vnxrpmi.d(11): Error: found `toUpper` when expecting `,`

    /tmp/tmp3vnxrpmi.d(11): Error: expression expected, not `,`

    /tmp/tmp3vnxrpmi.d(11): Error: found `char` when expecting `,`

    /tmp/tmp3vnxrpmi.d(11): Error: expression expected, not `:`

    /tmp/tmp3vnxrpmi.d(11): Error: found `:` when expecting `,`

    /tmp/tmp3vnxrpmi.d(13): Error: declaration expected, not `<`

    /tmp/tmp3vnxrpmi.d(16): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(16): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(16): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(19): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(19): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(22): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(22): Error: unterminated character constant

    /tmp/tmp3vnxrpmi.d(32): Error: declaration expected, '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    char\
    \ c;\n    string result = \"\";\n    for each (c in string)\n    {\n        switch(c)\n\
    \        {\n            case 'a':\n                c = 'A';\n                break;\n\
    \            case 'b':\n                c = 'B';\n                break;\n   \
    \         case 'c':\n                c = 'C';\n                break;\n      \
    \      case 'd':\n                c = 'D';\n                break;\n         \
    \   case 'e':\n                c = 'E';\n                break;\n            case\
    \ 'f':\n                c = 'F';\n                break;\n            case 'g':\n\
    \                c = 'G';\n                break;\n            case 'h':\n   \
    \             c = 'H';\n                break;\n            case 'i':\n      \
    \          c = 'I';\n                break;\n            case 'j':\n         \
    \       c = 'J';\n                break;\n            case 'k':\n            \
    \    c = 'K';\n                break;\n            case 'l':\n               \
    \ c = 'L';\n                break;\n            case 'm':\n                c =\
    \ 'M';\n                break;\n            case 'n':\n                c = 'N';\n\
    \                break;\n            case 'o':\n                c = 'O';\n   \
    \             break;\n            case 'p':\n                c = 'P';\n      \
    \          break;\n            case 'q':\n                c = 'Q';\n         \
    \       break;\n            case 'r':\n                c = 'R';\n            \
    \    break;\n            case 's':\n                c = 'S';\n               \
    \ break;\n            case 't':\n                c = 'T';\n                break;\n\
    \            case 'u':\n                c = 'U';\n                break;\n   \
    \         case 'v':\n                c = 'V';\n                break;\n      \
    \      case 'w':\n                c = 'W';\n                break;\n         \
    \   case 'x':\n                c = 'X';\n                break;\n            case\
    \ 'y':\n                c = 'Y';\n                break;\n            case 'z':\n\
    \                c = 'Z';\n                break;\n            default:\n    \
    \            c = toupper(c);\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiic6u0jc.d(13): Error: found `each` when expecting `(`

    /tmp/tmpiic6u0jc.d(13): Error: found `in` when expecting `)`

    /tmp/tmpiic6u0jc.d(13): Error: missing `{ ... }` for function literal

    /tmp/tmpiic6u0jc.d(13): Error: found `string` when expecting `;` following statement

    /tmp/tmpiic6u0jc.d(13): Error: expression expected, not `)`

    /tmp/tmpiic6u0jc.d(14): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpiic6u0jc.d(15): Error: expression expected, not `switch`

    /tmp/tmpiic6u0jc.d(16): Error: found `{` when expecting `)`

    /tmp/tmpiic6u0jc.d(98): Error: no identifier for declarator `result`

    /tmp/tmpiic6u0jc.d(98): Error: declaration expected, not `+=`

    /tmp/tmpiic6u0jc.d(99): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiic6u0jc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  for\
    \ (int i = 0; i < string.length; i++) \n  {\n    char c = string[i];\n    if (c\
    \ >= 'a' && c <= 'z')\n    {\n      c += 'A' - 'a';\n    }\n    else if (c >=\
    \ 'A' && c <= 'Z')\n    {\n      c += 'a' - 'A';\n    }\n    string[i] = c;\n\
    \  }\n  return string;\n}\n</code>\n<|/ a tags=string,c++,case-folding |>\n<|\
    \ a |>\nHere is a simple C++ template for converting a string to lowercase or\
    \ uppercase depending on whether a letter is lowercase or uppercase. It doesn't\
    \ use any standard library:\n<code>\n#include <iostream>\n#include <string>\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpebefy1ck.d(26): Error: declaration expected, not `<`

    /tmp/tmpebefy1ck.d(29): Error: unterminated character constant

    /tmp/tmpebefy1ck.d(37): Error: declaration expected, not `assert`

    /tmp/tmpebefy1ck.d(38): Error: declaration expected, not `assert`

    /tmp/tmpebefy1ck.d(39): Error: declaration expected, not `assert`

    /tmp/tmpebefy1ck.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpebefy1ck.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i = 0;\n    while (i<string.length)\n    {\n        if (string[i]=='a')\n  \
    \      {\n            string[i] = 'A';\n        }\n        else if (string[i]=='b')\n\
    \        {\n            string[i] = 'B';\n        }\n        else if (string[i]=='c')\n\
    \        {\n            string[i] = 'C';\n        }\n        else if (string[i]=='d')\n\
    \        {\n            string[i] = 'D';\n        }\n        else if (string[i]=='e')\n\
    \        {\n            string[i] = 'E';\n        }\n        else if (string[i]=='f')\n\
    \        {\n            string[i] = 'F';\n        }\n        else if (string[i]=='g')\n\
    \        {\n            string[i] = 'G';\n        }\n        else if (string[i]=='h')\n\
    \        {\n            string[i] = 'H';\n        }\n        else if (string[i]=='i')\n\
    \        {\n            string[i] = 'I';\n        }\n        else if (string[i]=='j')\n\
    \        {\n            string[i] = 'J';\n        }\n        else if (string[i]=='k')\n\
    \        {\n            string[i] = 'K';\n        }\n        else if (string[i]=='l')\n\
    \        {\n            string[i] = 'L';\n        }\n        else if (string[i]=='m')\n\
    \        {\n            string[i] = 'M';\n        }\n        else if (string[i]=='n')\n\
    \        {\n            string[i] = 'N';\n        }\n        else if (string[i]=='o')\n\
    \        {\n            string[i] = 'O';\n        }\n        else if (string[i]=='p')\n\
    \        {\n            string[i] = 'P';\n        }\n        else if (string[i]=='q')\n\
    \        {\n            string[i] = 'Q';\n        }\n        else if (string[i]=='r')\n\
    \        {\n            string[i] = 'R';\n        }\n        else if (string[i]=='s')\n\
    \        {\n            string[i] = 'S';\n        }\n        else if (string[i]=='t')\n\
    \        {\n            string[i] = 'T';\n        }\n        else if (string[i]=='u')\n\
    \        {\n            string[i] = 'U';\n        }\n        else if (string[i]=='v')\n\
    \        {\n            string[i] = 'V';\n        }\n        else if (string[i]=='w')\n\
    \        {\n            string[i] = 'W';\n        }\n        else if (string[i]=='x')\n\
    \        {\n            string[i] = 'X';\n        }\n        else if (string[i]=='y')\n\
    \        {\n            string[i] = 'Y';\n        }\n        else if (string[i]=='z')\n\
    \        {\n            string[i] = 'Z';\n        }\n        ++i;\n    }\n   \
    \ return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpge9yl6r2.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(20): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(24): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(28): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(32): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(36): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(40): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(44): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(48): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(52): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(56): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpge9yl6r2.d(60):'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    char ch;\n    string flip = \"\";\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6d1ue8_s.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d1ue8_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\t\n\t\
    auto it = string.begin();\n\t\n\tfor(;;) \n\t{\n\t\t\n\t\tauto c = *it;\n\t\t\n\
    \t\tif(c >= 'a' && c <= 'z') \n\t\t{\n\t\t\tauto next = it;\n\t\t\tit++;\n\t\t\
    \tc ^= 0x20;\n\t\t\tit ^= 0x20;\n\t\t\t\n\t\t\tstring res = string{ c, next };\n\
    \t\t\t\n\t\t\treturn res;\n\t\t}\n\t\t\n\t\tit ++;\n\t\t\n\t\tif(it == string.end())\n\
    \t\t{\n\t\t\tbreak;\n\t\t}\n\t\t\n\t}\n\t\n\treturn string;\n}\n#endif\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgkgwn9gd.d(26): Error: semicolon expected, not `{`

    /tmp/tmpgkgwn9gd.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmpgkgwn9gd.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpgkgwn9gd.d(42): Error: found `#` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgkgwn9gd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint4\
    \ sz = string.size();\n\tfor (int i = 0; i < sz; ++i)\n\t\tstring[i] = string[i]\
    \ == char.lowercase ? char.uppercase : string[i] == char.uppercase ? char.lowercase\
    \ : string[i];\n\t\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5na07b1q.d(11): Error: undefined identifier `int4`

    /tmp/tmp5na07b1q.d(11): Error: no property `size` for type `string`

    /tmp/tmp5na07b1q.d(13): Error: no property `lowercase` for type `char`

    /tmp/tmp5na07b1q.d(13): Error: no property `uppercase` for type `char`

    /tmp/tmp5na07b1q.d(13): Error: no property `uppercase` for type `char`

    /tmp/tmp5na07b1q.d(13): Error: no property `lowercase` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5na07b1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ result = \"\";\n  for (unsigned i = 0;  i < string.length();  i++)\n  {\n  \
    \  result += string[i];\n    if (string[i] >= 'a' && string[i] <= 'z')\n    {\n\
    \      result += string[i] - 'a' + 'A';\n    }\n    else if (string[i] >= 'A'\
    \ && string[i] <= 'Z')\n    {\n      result += string[i] - 'A' + 'a';\n    }\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n \
    \   assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpso4je_jw.d(11): Error: `string` is used as a type

    /tmp/tmpso4je_jw.d(12): Error: undefined identifier `unsigned`, did you mean `uint`?

    /tmp/tmpso4je_jw.d(12): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpso4je_jw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    string flip = \"\";\n    for(int i = 0; i < len;\
    \ ++i)\n    {\n        flip += char(string[i])==char(string[i])?'A'-'a':'a'+char(string[i])-'A';\n\
    \    }\n    return flip;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7y5r6_o2.d(11): Error: no property `length` for type `string`

    /tmp/tmp7y5r6_o2.d(12): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y5r6_o2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  // Write\
    \ your code here.\n  string temp;\n  for(int i = 0; i < string.length(); i++)\n\
    \  {\n    char c = string[i];\n    if(islower(c))\n    {\n      temp += toupper(c);\n\
    \    }\n    else\n    {\n      temp += tolower(c);\n    }\n  }\n  return temp;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2dh_yc6f.d(12): Error: `string` is used as a type

    /tmp/tmp2dh_yc6f.d(13): Error: no property `length` for type `string`

    /tmp/tmp2dh_yc6f.d(16): Error: undefined identifier `islower`

    /tmp/tmp2dh_yc6f.d(18): Error: undefined identifier `toupper`

    /tmp/tmp2dh_yc6f.d(22): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2dh_yc6f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  char\
    \ c;\n  string s = \"\";\n  int i = 0;\n  int j = 0;\n  while (i < string.length())\n\
    \  {\n    c = string[i];\n    i += 1;\n    if (std.typecons.isLower(c))\n    {\n\
    \      s += std.typecons.toUpper(c);\n      j += 1;\n    }\n    else if (std.typecons.isUpper(c))\n\
    \    {\n      s += std.typecons.toLower(c);\n      j += 1;\n    }\n    else\n\
    \    {\n      s += c;\n      j += 1;\n    }\n  }\n  while (j < string.length())\n\
    \  {\n    s += string[j];\n    j += 1;\n  }\n  return s;\n}\nunittest\n{\n   \
    \ alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpki_o3xqw.d(12): Error: `string` is used as a type

    /tmp/tmpki_o3xqw.d(15): Error: no property `length` for type `string`

    /tmp/tmpki_o3xqw.d(19): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpki_o3xqw.d(21): Error: undefined identifier `toUpper` in module `std.typecons`

    /tmp/tmpki_o3xqw.d(24): Error: undefined identifier `isUpper` in module `std.typecons`

    /tmp/tmpki_o3xqw.d(26): Error: undefined identifier `toLower` in module `std.typecons`

    /tmp/tmpki_o3xqw.d(35): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpki_o3xqw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i=0;i<string.length();i++)\n    {\n        string[i] = toupper(string[i]);\n\
    \        string[i] = tolower(string[i]);\n    }\n    return string;\n}\n</code>\n\
    <|/ a tags=c++,stdstring,std |>\n<| c |>\nI agree this answer is better but this\
    \ is more of a hack than a real solution as it does not take into account that\
    \ characters are represented in two ways in memory. A single character is represented\
    \ either as an ASCII code or as a UTF-8 encoded byte sequence. Thus this could\
    \ fail to produce correct results if you have a string with accented characters\
    \ like '\xC6' which would need to be converted to 'AE'\n<|/ c |>\n<| a dscore=2\
    \ |>\nApart from your solutions mentioned above, there is another way you can\
    \ do it without using STL containers. It's based on ASCII value of characters.\n\
    <code>\nstd::string ToUpper(std::string str)\n{\n    std::string ret;\n    for(int\
    \ i=0; i< str.size(); i++)\n    {\n        char ch = str[i];\n        if( ch >=\
    \ 'a' && ch <= 'z')\n        {\n            ch = ch - 'a' + 'A';\n        }\n\
    \        else if( ch >= 'A' && ch <= 'Z')\n        {\n            ch = ch - 'A'\
    \ + 'a';\n        }\n        else\n        {\n            ch = ch - 'A' + 'a';\n\
    \        }\n        ret += ch;\n    }\n    return ret;\n}\n</code>\nI wrote this\
    \ based on my understanding of ASCII values of characters mentioned above.\n<|/\
    \ a tags=c++,stdstring,std |>\n<| c |>\nThis doesn't work, since the letter '\xDF\
    ' is not mapped to 'ss'.\n<|/ c |>\n<| c |>\n, thanks for your comment. I thought\
    \ about that and updated my answer. However, I used \"Z\" instead of \"z\". I\
    \ think this should solve the problem. Also I changed my code based on your comments.\n\
    <|/ c |>\n<| c |>\nI updated my answer. Now it works. Thanks for pointing out.\n\
    <|/ c |>\n<| a tags=c++,stdstring,std |>\nThe STL way: use std::transform and\
    \ the standard algorithm.\n<code>\nstd::string upper(std::string str)\n{\n   \
    \ std::transform(str.begin(), str.end(), str.begin(), ::toupper);\n    return\
    \ str;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,stdstring,std |>\n<code>\n\
    #include <iostream>\n#include <string>\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp384yashj.d(18): Error: declaration expected, not `<`

    /tmp/tmp384yashj.d(21): Error: unterminated character constant

    /tmp/tmp384yashj.d(21): Error: unterminated character constant

    /tmp/tmp384yashj.d(24): Error: unterminated character constant

    /tmp/tmp384yashj.d(29): Error: declaration expected, not `for`

    /tmp/tmp384yashj.d(29): Error: no identifier for declarator `i`

    /tmp/tmp384yashj.d(29): Error: declaration expected, not `<`

    /tmp/tmp384yashj.d(29): Error: no identifier for declarator `i`

    /tmp/tmp384yashj.d(29): Error: declaration expected, not `++`

    /tmp/tmp384yashj.d(32): Error: declaration expected, not `if`

    /tmp/tmp384yashj.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp384yashj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i;\n    int j;\n    int k;\n    string tmp;\n    string result = \"?\";\n  \
    \  for(i=0, j=string.length()-1; i<j; ++i, --j)\n    {\n        if(string[i]!=string[j])\n\
    \        {\n            tmp = string[i];\n            string[i] = string[j];\n\
    \            string[j] = tmp;\n        }\n    }\n    for(i=0, j=0; i<string.length();\
    \ ++i, ++j)\n    {\n        if(string[i]==' ')\n            string[i] = '?';\n\
    \    }\n    for(i=0, j=0; i<string.length(); ++i, ++j)\n    {\n        if(string[i]!='\
    \ ' && string[i]!='?')\n        {\n            tmp = string[i];\n            string[i]\
    \ = string[j];\n            string[j] = tmp;\n        }\n    }\n    return string;\n\
    }\n</code>\n<|/ a tags=string,c++,char,pointers |>\n<| c |>\nThank you for this!\
    \ This seems pretty similar to other solutions I've seen on SO. But I'm still\
    \ not sure if this is the best way to go with this particular problem. Specifically\
    \ I don't understand how it can make any difference to the performance of this\
    \ function compared to my existing function. The only way I could think of that\
    \ this function would be faster is to make it a lot simpler. Perhaps there's something\
    \ I'm not seeing?\n<|/ c |>\n<| c |>\n`string flip_case(string string)\n{\n  \
    \  string tmp;\n    int i = 0;\n    int j = 0;\n    string result = \"?\";\n \
    \   while( i < string.length() && string[i] != '?' )\n    {\n        if( string[i]\
    \ != string[j] )\n        {\n            tmp = string[i];\n            string[i]\
    \ = string[j];\n            string[j] = tmp;\n        }\n        i++;\n      \
    \  j++;\n    }\n    for( i=0, j=0; i<string.length(); ++i, ++j)\n    {\n     \
    \   if( string[i]==' ' )\n            string[i] = '?';\n    }\n    for( i=0, j=0;\
    \ i<string.length(); ++i, ++j)\n    {\n        if( string[i]!=' ' && string[i]!='?'\
    \ )\n        {\n            tmp = string[i];\n            string[i] = string[j];\n\
    \            string[j] = tmp;\n        }\n    }\n    return string;\n}` This solution\
    \ works with my existing function and doesn't seem to have any issues. Can anyone\
    \ tell me why that is?\n<|/ c |>\n<| c |>\nThe first code in your comment will\
    \ break for input `aBcDe`, because `string` will be empty and `string.length()`\
    \ will throw \nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcsc_e6t4.d(41): Error: declaration expected, not `<`

    /tmp/tmpcsc_e6t4.d(44): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(44): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(44): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(44): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(44): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(79): Error: unterminated character constant

    /tmp/tmpcsc_e6t4.d(87): Error: declaration expected, not `assert`

    /tmp/tmpcsc_e6t4.d(88): Error: declaration expected, not `assert`

    /tmp/tmpcsc_e6t4.d(89): Error: declaration expected, not `assert`

    /tmp/tmpcsc_e6t4.d(90): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcsc_e6t4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ ret = \"\";\n    for (auto c : string)\n        c = toupper(c);\n    for (auto\
    \ c : string)\n        c = tolower(c);\n    return ret;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_qcz22q.d(12): Error: no identifier for declarator `c`

    /tmp/tmpw_qcz22q.d(12): Error: expression expected, not `:`

    /tmp/tmpw_qcz22q.d(12): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpw_qcz22q.d(14): Error: no identifier for declarator `c`

    /tmp/tmpw_qcz22q.d(14): Error: expression expected, not `:`

    /tmp/tmpw_qcz22q.d(14): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_qcz22q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ temp;\n  for(auto c : string) \n  {\n    char d = toupper(c);\n    temp = c\
    \ + d;\n  }\n  return temp;\n}\n</code>\nAnd finally, I used your code. First,\
    \ I created a simple main() that calls on your functions. Second, I used a range\
    \ based for loop to go through each character of a string and print them in their\
    \ new positions. Third, I added the ability to flip uppercase to lowercase and\
    \ lowercase to uppercase.\n<code>\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3owjej9.d(12): Error: no identifier for declarator `c`

    /tmp/tmpd3owjej9.d(12): Error: expression expected, not `:`

    /tmp/tmpd3owjej9.d(12): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmpd3owjej9.d(19): Error: declaration expected, not `<`

    /tmp/tmpd3owjej9.d(26): Error: declaration expected, not `assert`

    /tmp/tmpd3owjej9.d(27): Error: declaration expected, not `assert`

    /tmp/tmpd3owjej9.d(28): Error: declaration expected, not `assert`

    /tmp/tmpd3owjej9.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3owjej9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    size_t\
    \ length = string.length();\n    if (length == 0) return string;\n    \n    //\
    \ Make first character lowercase\n    char c = string[0];\n    string[0] = toupper(c);\n\
    \    \n    // Shift other characters up\n    for (size_t i = 1; i < length; ++i)\n\
    \    {\n        char c = string[i];\n        string[i] = tolower(c);\n    }\n\
    \    \n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj96aqv32.d(11): Error: no property `length` for type `string`

    /tmp/tmpj96aqv32.d(16): Error: undefined identifier `toupper`

    /tmp/tmpj96aqv32.d(21): Error: variable `c` is shadowing variable `tmpj96aqv32.flip_case.c`

    /tmp/tmpj96aqv32.d(22): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj96aqv32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ length_string = string.length();\n    string result = \"\";\n    for(int i =\
    \ 0; i < length_string; i++) {\n        if(string[i] == 'a')\n            result\
    \ += string[i];\n        else if(string[i] == 'A')\n            result += string[i].toUpperCase();\n\
    \        else\n            result += string[i].toLowerCase();\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7v_pjst.d(11): Error: no property `length` for type `string`

    /tmp/tmpg7v_pjst.d(12): Error: `string` is used as a type

    /tmp/tmpg7v_pjst.d(17): Error: no property `toUpperCase` for type `immutable(char)`

    /tmp/tmpg7v_pjst.d(19): Error: no property `toLowerCase` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7v_pjst.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tsize_t\
    \ len = (string.length());\n\tstring result;\n\tfor (size_t i = 0; i < len; ++i)\n\
    \t{\n\t\tchar ch = string[i];\n\t\tif (islower(ch))\n\t\t{\n\t\t\tresult.append(toupper(ch));\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tresult.append(tolower(ch));\n\t\t}\n\t}\n\treturn\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gef6b4n.d(11): Error: no property `length` for type `string`

    /tmp/tmp1gef6b4n.d(12): Error: `string` is used as a type

    /tmp/tmp1gef6b4n.d(16): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gef6b4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ i = 0;\n\twhile (i < string.length())\n\t{\n\t\tchar c = string[i];\n\t\tif\
    \ (islower(c)) \n\t\t\tstring[i] = toupper(c);\n\t\telse \n\t\t\tstring[i] = tolower(c);\n\
    \t\ti++;\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzyvtxlsm.d(12): Error: no property `length` for type `string`

    /tmp/tmpzyvtxlsm.d(15): Error: undefined identifier `islower`

    /tmp/tmpzyvtxlsm.d(16): Error: undefined identifier `toupper`

    /tmp/tmpzyvtxlsm.d(18): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzyvtxlsm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ length = string.length();\n    for(int i = 0; i < length; i++) {\n        if(string[i]\
    \ == ' ' || string[i] == '\\t') {\n            string temp = string[i];\n    \
    \        string[i] = string[i+1];\n            string[i+1] = temp;\n         \
    \   length--;\n        }\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8mr8tebe.d(11): Error: no property `length` for type `string`

    /tmp/tmp8mr8tebe.d(14): Error: `string` is used as a type

    /tmp/tmp8mr8tebe.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8mr8tebe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result;\n\tfor (int i = 0; i < string.size(); i++) {\n\t\tchar c = string[i];\n\
    \t\tif (islower(c)) {\n\t\t\tc = toupper(c);\n\t\t} else if (isupper(c)) {\n\t\
    \t\tc = tolower(c);\n\t\t}\n\t\tresult += c;\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jy8p880.d(11): Error: `string` is used as a type

    /tmp/tmp6jy8p880.d(12): Error: no property `size` for type `string`

    /tmp/tmp6jy8p880.d(14): Error: undefined identifier `islower`

    /tmp/tmp6jy8p880.d(15): Error: undefined identifier `toupper`

    /tmp/tmp6jy8p880.d(16): Error: undefined identifier `isupper`

    /tmp/tmp6jy8p880.d(17): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jy8p880.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.Length; i++) {\n        char c = string[i];\n       \
    \ string[i] = toupper(c);\n        string[i] = tolower(string[i]);\n    }\n  \
    \  return string;\n}\n/*\n For a given string, return all characters in lowercase\
    \ and uppercase.\n    >>> flip_case_2(\"hello World\")\n    'helloWorld'\n   \
    \ \n */\nstring flip_case_2(string string) \n{\n    for (int i = 0; i < string.Length;\
    \ i++) {\n        char c = string[i];\n        string[i] = tolower(c);\n     \
    \   string[i] = toupper(string[i]);\n    }\n    return string;\n}\n/*\n For a\
    \ given string, return the string with all letters in uppercase and all letters\
    \ in lowercase.\n    >>> flip_case_3(\"hello World\")\n    'HELLO wORLD'\n   \
    \ \n */\nstring flip_case_3(string string) \n{\n    for (int i = 0; i < string.Length;\
    \ i++) {\n        char c = string[i];\n        string[i] = toupper(c);\n     \
    \   string[i] = tolower(string[i]);\n    }\n    return string;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4aliwl_c.d(11): Error: no property `Length` for type `string`

    /tmp/tmp4aliwl_c.d(13): Error: undefined identifier `toupper`

    /tmp/tmp4aliwl_c.d(14): Error: undefined identifier `tolower`

    /tmp/tmp4aliwl_c.d(26): Error: no property `Length` for type `string`

    /tmp/tmp4aliwl_c.d(28): Error: undefined identifier `tolower`

    /tmp/tmp4aliwl_c.d(29): Error: undefined identifier `toupper`

    /tmp/tmp4aliwl_c.d(41): Error: no property `Length` for type `string`

    /tmp/tmp4aliwl_c.d(43): Error: undefined identifier `toupper`

    /tmp/tmp4aliwl_c.d(44): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4aliwl_c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n   char[]\
    \ charArray = string.to_char_array();\n   string result = \"\";\n   foreach(char\
    \ c in charArray){\n      if(islower(c)){\n         result += toupper(c);\n  \
    \    }else{\n         result += tolower(c);\n      }\n   }\n   return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdlnoknct.d(13): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdlnoknct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    //\
    \ This function assumes every character in the string are ASCII\n    // It returns\
    \ a string with the characters of the string flipped.\n    string result = \"\"\
    ;\n    for (int i = 0; i < string.length(); i++) \n    {\n        // If character\
    \ is lowercase append it to result\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n            result += string[i] - 'a' + 'A';\n        // If character\
    \ is uppercase, append it to result but flip it\n        else if (string[i] >=\
    \ 'A' && string[i] <= 'Z')\n            result += string[i] - 'A' + 'a';\n   \
    \     // Otherwise, append it to result as it is\n        else\n            result\
    \ += string[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_y3bxf2u.d(13): Error: `string` is used as a type

    /tmp/tmp_y3bxf2u.d(14): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_y3bxf2u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ reverse(string) + reverse(reverse(string));\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvr6ysgf.d(11): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpzvr6ysgf.d(11): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string)`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvr6ysgf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    int i;\n    for(i = 0; i < string.length(); i++)\n    {\n\
    \        result += (toupper(string[i])); \n    }\n    return result;\n}\n/*\n\
    \ For a given string, flip uppercase characters to lowercase and lowercase to\
    \ uppercase.\n    >>> flip_case(\"hELLO\")\n    \"Hello\"\n    \n*/\nstring flip_case(string\
    \ string) \n{\n    string result = \"\";\n    int i;\n    for(i = 0; i < string.length();\
    \ i++)\n    {\n        result += (tolower(string[i])); \n    }\n    return result;\n\
    }\n/*\n For a given string, flip characters that are letters to their lower case\
    \ counterparts.\n    >>> flip_case(\"Hello\")\n    \"hello\"\n    \n*/\nstring\
    \ flip_case(string string) \n{\n    string result = \"\";\n    int i;\n    for(i\
    \ = 0; i < string.length(); i++)\n    {\n        result += (isalpha(string[i]))\
    \ ? (tolower(string[i])) : (toupper(string[i])); \n    }\n    return result;\n\
    }\n/*\n Given two strings, return whether or not the first string is contained\
    \ in the second.\n    >>> is_contained(\"hello\", \"hell\")\n    False\n    >>>\
    \ is_contained(\"hello\", \"hello\")\n    True\n    \n*/\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprkgb0jol.d(11): Error: `string` is used as a type

    /tmp/tmprkgb0jol.d(13): Error: no property `length` for type `string`

    /tmp/tmprkgb0jol.d(15): Error: undefined identifier `toupper`

    /tmp/tmprkgb0jol.d(27): Error: `string` is used as a type

    /tmp/tmprkgb0jol.d(29): Error: no property `length` for type `string`

    /tmp/tmprkgb0jol.d(31): Error: undefined identifier `tolower`

    /tmp/tmprkgb0jol.d(43): Error: `string` is used as a type

    /tmp/tmprkgb0jol.d(45): Error: no property `length` for type `string`

    /tmp/tmprkgb0jol.d(47): Error: undefined identifier `isalpha`

    /tmp/tmprkgb0jol.d(47): Error: undefined identifier `tolower`

    /tmp/tmprkgb0jol.d(47): Error: undefined identifier `toupper`

    /tmp/tmprkgb0jol.d(63): Error: `tmprkgb0jol.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmprkgb0jol.d(9):     `tmprkgb0jol.flip_case(string string)`

    and:

    /tmp/tmprkgb0jol.d(41):     `tmprkgb0jol.flip_case(string string)`

    /tmp/tmprkgb0jol.d(64): Error: `tmprkgb0jol.flip_case` called with argument types
    `(s'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tint\
    \ i=0;\n\twhile(i < string.length) \n\t{\n\t\tif(string[i] >= 'a' && string[i]\
    \ <= 'z')\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t\telse if(string[i]\
    \ >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn string;\n}\n/*\n For a given string, flip a specified\
    \ character to a specified character.\n \n Inputs:\n \tstring - The string to\
    \ be flipped\n \tchar - The character to be flipped\n \tchar - The character to\
    \ be replaced with\n \n Output:\n \tstring - The string with the specified character\
    \ replaced with the specified character\n*/\nstring flip_char(string string, char\
    \ char1, char char2)\n{\n\tstring result = string;\n\tfor (int i = 0; i < result.length;\
    \ i++)\n\t{\n\t\tif (result[i] == char1)\n\t\t\tresult[i] = char2;\n\t\telse if\
    \ (result[i] == char2)\n\t\t\tresult[i] = char1;\n\t}\n\treturn result;\n}\n/*\n\
    \ For a given string, flip uppercase characters to lowercase and vice versa.\n\
    \    >>> flip_case_and_lower(\" HELLO \")\n    \"hello h\"\n*/\nstring flip_case_and_lower(string\
    \ string)\n{\n\tfor (int i = 0; i < string.length; i++)\n\t{\n\t\tif (string[i]\
    \ >= 'a' && string[i] <= 'z')\n\t\t\tstring[i] = string[i] - 32;\n\t\telse if\
    \ (string[i] >= 'A' && string[i] <= 'Z')\n\t\t\tstring[i] = string[i] + 32;\n\t\
    }\n\treturn string;\n}\n/*\n For a given string, flip uppercase and lowercase\
    \ characters simultaneously. \n    >>> flip_case_and_lower(\" HELLO \")\n    \"\
    hello h\"\n*/\nstring flip_case_and_lower_and_upper(string string)\n{\n\tfor (int\
    \ i = 0; i < string.length; i++)\n\t{\n\t\tif (string[i] >= 'a' && string[i] <=\
    \ 'z')\n\t\t\tstring[i] = string[i] - 32;\n\t\telse if (string[i] >= 'A' && string[i]\
    \ <= 'Z')\n\t\t\tstring[i] = string[i] + 32;\n\t\telse if (string[i] >= 'a' &&\
    \ string[i] <= 'Z')\n\t\t\tstring[i] = string[i] + 32;\n\t}\n\treturn string;\n\
    }\n/*\n For a given string, rotate the string to the left by one character.\n\
    \    >>> rotate_left(\"hello\", 3)\n    \"olleh\"\n*/\nstring rotate_left(string\
    \ string, int count)\n{\n\tstring result = string;\n\tfor (int i = 0; i < result.length;\
    \ i++)\n\t{\n\t\tint x = result.length - (\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2lgsh2fs.d(94): Error: expression expected, not `unittest`

    /tmp/tmp2lgsh2fs.d(93): Error: found `{` when expecting `)`

    /tmp/tmp2lgsh2fs.d(96): Error: semicolon expected, not `alias`

    /tmp/tmp2lgsh2fs.d(102): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2lgsh2fs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ f = string::make;\n    auto w = string::make;\n    auto u = string::make;\n\
    \    auto o = string::make;\n    auto a = string::make;\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacl2nta8.d(11): Error: semicolon expected following auto declaration,
    not `:`

    /tmp/tmpacl2nta8.d(11): Error: found `:` instead of statement

    /tmp/tmpacl2nta8.d(12): Error: semicolon expected following auto declaration,
    not `:`

    /tmp/tmpacl2nta8.d(12): Error: found `:` instead of statement

    /tmp/tmpacl2nta8.d(13): Error: semicolon expected following auto declaration,
    not `:`

    /tmp/tmpacl2nta8.d(13): Error: found `:` instead of statement

    /tmp/tmpacl2nta8.d(14): Error: semicolon expected following auto declaration,
    not `:`

    /tmp/tmpacl2nta8.d(14): Error: found `:` instead of statement

    /tmp/tmpacl2nta8.d(15): Error: semicolon expected following auto declaration,
    not `:`

    /tmp/tmpacl2nta8.d(15): Error: found `:` instead of statement

    /tmp/tmpacl2nta8.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacl2nta8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.length(); ++i)\n    {\n        if(string[i] == 'a')\n    \
    \    {\n            string[i] = 'A';\n        }\n        else if(string[i] ==\
    \ 'A')\n        {\n            string[i] = 'a';\n        }\n    }\n    return\
    \ string;\n}\n/*\n Given a string, return a copy with each word separated by a\
    \ single space.\n    >>> flip_words(\" Hello world ! \")\n    \"Hello world !\"\
    \n    \n*/\nstring flip_words(string string) \n{\n    for(int i = 0; i < string.length();\
    \ ++i)\n    {\n        if(string[i] == ' ')\n        {\n            string newString\
    \ = \" \";\n            for(int j = i + 1; j < (string.length() - 1); ++j)\n \
    \           {\n                if(string[j] != ' ')\n                {\n     \
    \               newString += string[j];\n                }\n            }\n  \
    \          string s = newString;\n            string.replace(s, ' ');\n      \
    \      string.replace(s, ' ');\n            string.replace(s, ' ');\n        \
    \    string.replace(s, ' ');\n            string.replace(s, ' ');\n          \
    \  string.replace(s, ' ');\n            string.replace(s, ' ');\n            string.replace(s,\
    \ ' ');\n            string.replace(s, ' ');\n            string.replace(s, '\
    \ ');\n            string.replace(s, ' ');\n            string.replace(s, ' ');\n\
    \            string.replace(s, ' ');\n            string.replace(s, ' ');\n  \
    \          string.replace(s, ' ');\n            string.replace(s, ' ');\n    \
    \        string.replace(s, ' ');\n            string.replace(s, ' ');\n      \
    \      string.replace(s, ' ');\n            string.replace(s, ' ');\n        \
    \    string.replace(s, ' ');\n            string.replace(s, ' ');\n          \
    \  string.replace(s, ' ');\n            string.replace(s, ' ');\n            string.replace(s,\
    \ ' ');\n            string.replace(s, ' ');\n            string.replace(s, '\
    \ ');\n            string.replace(s, ' ');\n            string.replace(s, ' ');\n\
    \            string.replace(s, ' ');\n            string.replace(s, ' ');\n  \
    \          string.replace(s, ' ');\n            string.replace(s, ' ');\n    \
    \        string.replace(s, ' ');\n            string.replace(s, ' ');\n      \
    \      string.replace(s, ' ');\n            string.replace(s, ' ');\n        \
    \    string.replace(s, ' ');\n            string.replace(s, ' ');\n          \
    \  string.replace(s, ' ');\n            string.replace(s, ' ');\n            string.replace(s,\
    \ ' ');\n            string.replace(s, ' ');\n            string.replace(s, '\
    \ ');\n            string.replace(s, ' ');\n            string.replace(s, ' ');\n\
    \            string.replace(s, ' ');\n            string.replace(s, ' ');\n  \
    \          string.replace(s, ' ');\n            string\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoqu4f_wu.d(95): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmpoqu4f_wu.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoqu4f_wu.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpoqu4f_wu.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoqu4f_wu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.to_lower();\n}\nunittest\n{\n    alias candidate = flip_case;\n\n   \
    \ assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\"\
    );\n    assert(candidate(\"These violent delights have violent ends\") == \"tHESE\
    \ VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7gwy2b41.d(11): Error: no property `to_lower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gwy2b41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i = 0; i<string.length(); i++) {\n\t\tswitch(string[i]) {\n\t\t\tcase 'a' :\
    \ string[i] = 'A'; break;\n\t\t\tcase 'b' : string[i] = 'B'; break;\n\t\t\tcase\
    \ 'c' : string[i] = 'C'; break;\n\t\t\tcase 'd' : string[i] = 'D'; break;\n\t\t\
    \tcase 'e' : string[i] = 'E'; break;\n\t\t\tcase 'f' : string[i] = 'F'; break;\n\
    \t\t\tcase 'g' : string[i] = 'G'; break;\n\t\t\tcase 'h' : string[i] = 'H'; break;\n\
    \t\t\tcase 'i' : string[i] = 'I'; break;\n\t\t\tcase 'j' : string[i] = 'J'; break;\n\
    \t\t\tcase 'k' : string[i] = 'K'; break;\n\t\t\tcase 'l' : string[i] = 'L'; break;\n\
    \t\t\tcase 'm' : string[i] = 'M'; break;\n\t\t\tcase 'n' : string[i] = 'N'; break;\n\
    \t\t\tcase 'o' : string[i] = 'O'; break;\n\t\t\tcase 'p' : string[i] = 'P'; break;\n\
    \t\t\tcase 'q' : string[i] = 'Q'; break;\n\t\t\tcase 'r' : string[i] = 'R'; break;\n\
    \t\t\tcase 's' : string[i] = 'S'; break;\n\t\t\tcase 't' : string[i] = 'T'; break;\n\
    \t\t\tcase 'u' : string[i] = 'U'; break;\n\t\t\tcase 'v' : string[i] = 'V'; break;\n\
    \t\t\tcase 'w' : string[i] = 'W'; break;\n\t\t\tcase 'x' : string[i] = 'X'; break;\n\
    \t\t\tcase 'y' : string[i] = 'Y'; break;\n\t\t\tcase 'z' : string[i] = 'Z'; break;\n\
    \t\t\tdefault : string[i] = string[i]; break;\n\t\t}\n\t}\n\treturn string;\n\
    }\n/*\n For a given string, swap uppercase and lowercase characters.\n    >>>\
    \ swapcase(\"Hello\")\n    \"hELLO\"\n    \n*/\nstring swapcase(string string)\
    \ {\n\tfor(int i = 0; i<string.length(); i++) {\n\t\tswitch(string[i]) {\n\t\t\
    \tcase 'A' : string[i] = 'a'; break;\n\t\t\tcase 'B' : string[i] = 'b'; break;\n\
    \t\t\tcase 'C' : string[i] = 'c'; break;\n\t\t\tcase 'D' : string[i] = 'd'; break;\n\
    \t\t\tcase 'E' : string[i] = 'e'; break;\n\t\t\tcase 'F' : string[i] = 'f'; break;\n\
    \t\t\tcase 'G' : string[i] = 'g'; break;\n\t\t\tcase 'H' : string[i] = 'h'; break;\n\
    \t\t\tcase 'I' : string[i] = 'i'; break;\n\t\t\tcase 'J' : string[i] = 'j'; \n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbjtq76k.d(63): Error: found `unittest` instead of statement

    /tmp/tmpqbjtq76k.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpqbjtq76k.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbjtq76k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string[0].toUpper() + string[1].succ() + string[2].toLower() + string[3].succ()\
    \ + string[4].toUpper() + string[5].succ() + string[6].toLower() + string[7].succ()\
    \ + string[8].toUpper() + string[9].succ() + string[10].toLower() + string[11].succ()\
    \ + string[12].toUpper() + string[13].succ() + string[14].toLower() + string[15].succ();\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy53bnw9o.d(11): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toUpper` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toLower` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `succ` for type `immutable(char)`

    /tmp/tmpy53bnw9o.d(11): Error: no property `toUpper` for type `immutable(char)`

    /t'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char\
    \ c, string) \n    {\n    \tif(islower(c)) \n    \t\tc = toupper(c);\n    \telse\n\
    \    \t\tc = tolower(c);\n    }\n    return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_m01f3o.d(11): Error: no identifier for declarator `string`

    /tmp/tmpo_m01f3o.d(11): Error: found `)` when expecting `;`

    /tmp/tmpo_m01f3o.d(18): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_m01f3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    //\
    \ Local variable definition\n    int i = 0, n = string.size();\n    char temp;\n\
    \    \n    // Loop through the entire string\n    while (i < n) {\n        //\
    \ Check if the current character is a lowercase character\n        if (string[i]\
    \ == 'a')\n            temp = string[i+1];\n        else if (string[i] == 'e')\n\
    \            temp = string[i+1];\n        else if (string[i] == 'i')\n       \
    \     temp = string[i+1];\n        else if (string[i] == 'o')\n            temp\
    \ = string[i+1];\n        else if (string[i] == 'u')\n            temp = string[i+1];\n\
    \        else\n            temp = string[i];\n        \n        // Set the current\
    \ character to the uppercase character\n        string[i] = temp;\n        \n\
    \        // Increment the counter\n        i++;\n    }\n    \n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsfxyxoic.d(12): Error: no property `size` for type `string`

    /tmp/tmpsfxyxoic.d(32): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsfxyxoic.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ temp = string;\n    for(int i=0,j=0; i<temp.size(); i++)\n    {\n        if(islower(temp[i]))\n\
    \        {\n            temp[j] = toupper(temp[j]);\n            ++j;\n      \
    \  }\n        else if(!islower(temp[i]))\n        {\n            temp[j] = tolower(temp[j]);\n\
    \            ++j;\n        }\n    }\n    return temp;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeuhnhiln.d(11): Error: `string` is used as a type

    /tmp/tmpeuhnhiln.d(14): Error: undefined identifier `islower`

    /tmp/tmpeuhnhiln.d(19): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuhnhiln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for (unsigned i = 0; i < string.length; ++i)\n    {\n        char\
    \ ch = string[i];\n        if (ch == '_' || ch >= 'A' && ch <= 'Z')\n        {\n\
    \            result += ch - 'A' + 'a';\n        }\n        else\n        {\n \
    \           result += ch;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwowkb60j.d(11): Error: `string` is used as a type

    /tmp/tmpwowkb60j.d(12): Error: undefined identifier `unsigned`, did you mean `uint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwowkb60j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ length = string.length();\n    for(int i = 0; i < length; i++) {\n        char\
    \ c = string[i];\n        if('A' == c) {\n            string[i] = 'a';\n     \
    \       string[length - i - 1] = 'A';\n            string[length - i] = 'a';\n\
    \            length--;\n        }\n    }\n    return string;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_hp51kq.d(11): Error: no property `length` for type `string`

    /tmp/tmp8_hp51kq.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp8_hp51kq.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)(length
    - i - 1)]`

    /tmp/tmp8_hp51kq.d(17): Error: cannot modify `immutable` expression `string[cast(ulong)(length
    - i)]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_hp51kq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i,j,l=string.length();\n    \n    string result=\"\";\n    for(i=0;i<l;i++)\n\
    \    {\n        if(string[i]==' '||string[i]=='.')\n        {\n            result+=\"\
    \ \"; // replace space with nothing, so we don't get an infinite loop \n     \
    \   }\n        else\n        {\n            for(j=0;j<i;j++)\n            {\n\
    \                if(string[j]<='z'&&string[j]>='a') //check if character is lowercase\n\
    \                {\n                    result+=toupper(string[j]);\n        \
    \        }\n                else if(string[j]>='Z'&&string[j]<='Z') //check if\
    \ character is uppercase\n                {\n                    result+=tolower(string[j]);\n\
    \                }\n                else\n                {\n                \
    \    result+=string[j];\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n/*\n Given a string, return a new string made of the same\
    \ string reversed.\n    >>> flip_case(\"Hello\")\n    \"olleH\"\n    \n*/\nstring\
    \ flip_case_rev(string string) \n{\n    int i,j,l=string.length();\n    \n   \
    \ string result=\"\";\n    for(i=l-1;i>=0;i--)\n    {\n        if(string[i]=='\
    \ '||string[i]=='.')\n        {\n            result+=\" \"; // replace space with\
    \ nothing, so we don't get an infinite loop \n        }\n        else\n      \
    \  {\n            for(j=i;j>=0;j--)\n            {\n                if(string[j]>='A'&&string[j]<='Z')\
    \ //check if character is uppercase\n                {\n                    result+=toupper(string[j]);\n\
    \                }\n                else if(string[j]<='a'&&string[j]>='A') //check\
    \ if character is lowercase\n                {\n                    result+=tolower(string[j]);\n\
    \                }\n                else\n                {\n                \
    \    result+=string[j];\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvh2nc7n.d(11): Error: no property `length` for type `string`

    /tmp/tmpmvh2nc7n.d(13): Error: `string` is used as a type

    /tmp/tmpmvh2nc7n.d(26): Error: undefined identifier `toupper`

    /tmp/tmpmvh2nc7n.d(30): Error: undefined identifier `tolower`

    /tmp/tmpmvh2nc7n.d(49): Error: no property `length` for type `string`

    /tmp/tmpmvh2nc7n.d(51): Error: `string` is used as a type

    /tmp/tmpmvh2nc7n.d(64): Error: undefined identifier `toupper`

    /tmp/tmpmvh2nc7n.d(68): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvh2nc7n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  for\
    \ (int i = 0; i<string.length; i++)\n  {\n    if(string[i] >= 'A' && string[i]\
    \ <= 'Z')\n      string[i] = string[i] + 'a' - 'A';\n    if(string[i] >= 'a' &&\
    \ string[i] <= 'z')\n      string[i] = string[i] + 'A' - 'a';\n  }\n  return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_fee__h9.d(14): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp_fee__h9.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fee__h9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n   for\
    \ (int i = 0; i < (int)string.size(); i++) {\n       char c = string[i];\n   \
    \    string[i] = toupper(c);\n       string[i] = tolower(string[i]);\n   }\n \
    \  return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4qn93o4.d(11): Error: C style cast illegal, use `cast(int)string.size()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4qn93o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    //\
    \ This function will flip all lowercase letters to uppercase\n    // and all uppercase\
    \ letters to lowercase. \n    \n    // Start by flipping all lowercase characters\
    \ to uppercase.\n    // Note that for loop conditional must use !==, so that \"\
    A\" \n    // will turn into \"a\" but \"a\" will stay. \n    for (auto &c : string)\n\
    \    {\n        if (c != toupper(c))\n        {\n            c = toupper(c);\n\
    \        }\n    }\n    // Now flip all uppercase letters to lowercase\n    for\
    \ (auto &c : string)\n    {\n        if (c != tolower(c))\n        {\n       \
    \     c = tolower(c);\n        }\n    }\n    // Return the flipped string.\n \
    \   return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo7dup8yg.d(17): Error: basic type expected, not `&`

    /tmp/tmpo7dup8yg.d(17): Error: no identifier for declarator `_error_`

    /tmp/tmpo7dup8yg.d(17): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmpo7dup8yg.d(25): Error: basic type expected, not `&`

    /tmp/tmpo7dup8yg.d(25): Error: no identifier for declarator `_error_`

    /tmp/tmpo7dup8yg.d(25): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7dup8yg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string::iterator\
    \ it_begin = string.begin();\n    string::iterator it_end = string.end();\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwk1d2r65.d(11): Error: use `.` for member lookup, not `::`

    /tmp/tmpwk1d2r65.d(12): Error: use `.` for member lookup, not `::`

    /tmp/tmpwk1d2r65.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwk1d2r65.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    bool\
    \ first_char = true;\n    string result = \"\";\n    for(int i = 0; i < string.length();\
    \ ++i)\n    {\n        if (string[i] >= 'a' && string[i] <= 'z')\n        {\n\
    \            if (first_char)\n            {\n                string[i] = 'A';\n\
    \                first_char = false;\n            }\n            else\n      \
    \      {\n                string[i] = 'a';\n            }\n        }\n       \
    \ else if (string[i] >= 'A' && string[i] <= 'Z')\n        {\n            if (first_char)\n\
    \            {\n                string[i] = 'a';\n                first_char =\
    \ false;\n            }\n            else\n            {\n                string[i]\
    \ = 'A';\n            }\n        }\n        else\n        {\n            result\
    \ += string[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9q3rhb0f.d(12): Error: `string` is used as a type

    /tmp/tmp9q3rhb0f.d(13): Error: no property `length` for type `string`

    /tmp/tmp9q3rhb0f.d(19): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp9q3rhb0f.d(24): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp9q3rhb0f.d(31): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp9q3rhb0f.d(36): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9q3rhb0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    for (int i = 0; i < len; i++) {\n        char c\
    \ = string[i];\n        bool is_lower_case = std.stringcasecmp.indexOf(c) >= 0;\n\
    \        bool is_upper_case = std.stringcasecmp.indexOf(c, 1) >= 0;\n        if\
    \ (is_lower_case) {\n            string[i] = toupper(c);\n        } else if (is_upper_case)\
    \ {\n            string[i] = tolower(c);\n        }\n    }\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxbee9ii.d(11): Error: no property `length` for type `string`

    /tmp/tmpdxbee9ii.d(14): Error: undefined identifier `stringcasecmp` in package
    `std`

    /tmp/tmpdxbee9ii.d(15): Error: undefined identifier `stringcasecmp` in package
    `std`

    /tmp/tmpdxbee9ii.d(17): Error: undefined identifier `toupper`

    /tmp/tmpdxbee9ii.d(19): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxbee9ii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (unsigned i = 0; i < string.length(); i++)\n        switch (string[i])\n   \
    \     {\n            case 'a': return string[i].toupper();\n            case 'b':\
    \ return string[i].tolower();\n            default: return string[i];\n      \
    \  }\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp89cjk9da.d(11): Error: undefined identifier `unsigned`, did you
    mean `uint`?

    /tmp/tmp89cjk9da.d(11): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp89cjk9da.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ it = string.begin();\n\tauto last = string.end();\n\twhile(it != last) {\n\t\
    \tswitch(it){\n\t\t\tcase 'A':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'a':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'B':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'b':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'C':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'c':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'D':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'E':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'F':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'G':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'g':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'H':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'I':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'J':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'j':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'K':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'k':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'L':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'l':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'M':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'm':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'N':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'O':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'o':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'P':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'Q':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'q':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'R':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 'S':\n\
    \t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 's':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\
    \t\t\tcase 'T':\n\t\t\t\tit++;\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tit++;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'U':\n\t\t\t\tit\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplyfshybg.d(137): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmplyfshybg.d(145): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmplyfshybg.d(145): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmplyfshybg.d(145): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplyfshybg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ j = 0;\n  for (int i = 0; i < string.length; i++, j++) {\n    char c = string[i];\n\
    \    if (c == '_') {\n      string[j] = string[j + 1];\n      string[j + 1] =\
    \ '_';\n    }\n  }\n  return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppplsegx9.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)j]`

    /tmp/tmppplsegx9.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)(j
    + 1)]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppplsegx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ length = string.length();\n  string result = \"\";\n  for(int i = 0; i < length;\
    \ i++) \n  {\n    // If the character is not alphanumeric or is capitalized, just\
    \ add it to result\n    if(isalpha(string[i])) \n      result += toupper(string[i]);\n\
    \    else if(string[i] == toupper(string[i])) \n      result += string[i];\n \
    \   else \n      result += string[i];\n  }\n  return result;\n}\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphnkx00_5.d(11): Error: no property `length` for type `string`

    /tmp/tmphnkx00_5.d(12): Error: `string` is used as a type

    /tmp/tmphnkx00_5.d(16): Error: undefined identifier `isalpha`

    /tmp/tmphnkx00_5.d(17): Error: undefined identifier `toupper`

    /tmp/tmphnkx00_5.d(18): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphnkx00_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ iter = string.begin();\n\tauto end = string.end();\n\twhile(iter != end) {\n\
    \t\tif(islower(*iter)) {\n\t\t\t*iter = ascii_toupper(*iter);\n\t\t}\n\t\telse\
    \ if(isupper(*iter)) {\n\t\t\t*iter = ascii_tolower(*iter);\n\t\t}\n\t\titer++;\n\
    \t}\n\t\n\treturn string;\n}\n/*\n For a given string, remove all instances of\
    \ chars.\n    >>> remove_chars(\"Hello\", \"llo\")\n    \"H\"\n    \n*/\nstring\
    \ remove_chars(string string, char chars) \n{\n\tauto iter = string.begin();\n\
    \tauto end = string.end();\n\twhile(iter != end) {\n\t\tif(*iter != chars) {\n\
    \t\t\titer++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(iter != end) {\n\t\t\titer++;\n\
    \t\t\tif(*iter == chars) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titer = string.erase(iter);\n\
    \t}\n\t\n\treturn string;\n}\n/*\n For a given string, remove all instances of\
    \ chars from begin() to end.\n    >>> remove_chars(\"Hello\", \"llo\", 2, 3)\n\
    \    \"Heo\"\n    \n*/\nstring remove_chars(string string, char chars, size_t\
    \ start, size_t end) \n{\n\tauto iter = string.begin();\n\tauto end = string.end();\n\
    \twhile(iter != end) {\n\t\tif(*iter != chars) {\n\t\t\titer++;\n\t\t\tcontinue;\n\
    \t\t}\n\t\twhile(iter != end) {\n\t\t\titer++;\n\t\t\tif(*iter == chars) {\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(iter == end) {\n\t\t\titer = string.erase(iter);\n\
    \t\t}\n\t\telse {\n\t\t\titer = string.erase(iter, end);\n\t\t}\n\t}\n\t\n\treturn\
    \ string;\n}\n/*\n For a given string, remove all instances of chars from begin()\
    \ to end and trim whitespace from beginning and end of string.\n    >>> remove_chars(\"\
    \   Hello   \", \"llo\", 2, 3)\n    \"Heo\"\n    \n*/\nstring remove_chars(string\
    \ string, char chars, size_t start, size_t end) \n{\n\tauto iter = string.begin();\n\
    \tauto end = string.end();\n\twhile(iter != end) {\n\t\tif(*iter != chars) {\n\
    \t\t\titer++;\n\t\t\tcontinue;\n\t\t}\n\t\twhile(iter != end) {\n\t\t\titer++;\n\
    \t\t\tif(*iter == chars) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\titer = string.erase(iter,\
    \ end);\n\t}\n\t\n\treturn string;\n}\n/*\n For a given string, remove all instances\
    \ of chars from begin() to end and trim whitespace \nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4x5kcy4v.d(108): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4x5kcy4v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for (int i = 0; i < string.length; i++)\n    {\n       \
    \ result += (char)(string[i] + 32); \n    }\n    \n    return result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy46e2yo.d(14): Error: C style cast illegal, use `cast(char)(string[i]
    + 32)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy46e2yo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    \n    \n    \n    \n    int length = string.length();\n    \n    for(int\
    \ i = 0; i < length; i++)\n    {\n        if(string[i] >= 65 && string[i] <= 90)\n\
    \        {\n            string[i] = string[i] - 32;\n        }\n        if(string[i]\
    \ >= 97 && string[i] <= 122)\n        {\n            string[i] = string[i] + 32;\n\
    \        }\n    }\n    \n    return string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgxrivg8_.d(16): Error: no property `length` for type `string`

    /tmp/tmpgxrivg8_.d(22): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpgxrivg8_.d(26): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgxrivg8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor\
    \ (int i = 0; i < string.length; i++) \n\t{\n\t\tif (string[i] == toupper(string[i]))\
    \ \n\t\t{\n\t\t\tstring[i] = tolower(string[i]);\n\t\t}\n\t}\n\treturn string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqpp3eko.d(13): Error: undefined identifier `toupper`

    /tmp/tmpiqpp3eko.d(15): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqpp3eko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ result = \"\";\n\tsize_t count = 0;\n\t\n\t// count the number of characters\
    \ that need to be flipped.\n\tfor(size_t i=0; i < string.length(); i++)\n\t{\n\
    \t\tstring temp = string[i];\n\t\tif(i == string.length() - 1)\n\t\t{\n\t\t\t\
    result += temp.upper();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult += temp.upper()\
    \ + temp.lower();\n\t\t}\n\t\tcount++;\n\t}\n\t\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1o2z8wn9.d(11): Error: `string` is used as a type

    /tmp/tmp1o2z8wn9.d(15): Error: no property `length` for type `string`

    /tmp/tmp1o2z8wn9.d(17): Error: `string` is used as a type

    /tmp/tmp1o2z8wn9.d(18): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1o2z8wn9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ ret = \"\";\n  for (auto c : string)\n    {\n      if (c >= 'A' && c <= 'Z')\n\
    \t{\n\t  ret += toupper(c);\n\t}\n      else\n\t{\n\t  ret += tolower(c);\n\t\
    }\n    }\n  return ret;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhm55xhb.d(12): Error: no identifier for declarator `c`

    /tmp/tmphhm55xhb.d(12): Error: expression expected, not `:`

    /tmp/tmphhm55xhb.d(12): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhm55xhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ l = string.length();\n    for(int i = 0; i < l; ++i)\n    {\n        char c\
    \ = string[i];\n        switch(c)\n        {\n            case 'a':\n        \
    \        string[i] = 'A';\n                break;\n            case 'b':\n   \
    \             string[i] = 'B';\n                break;\n            case 'c':\n\
    \                string[i] = 'C';\n                break;\n            case 'd':\n\
    \                string[i] = 'D';\n                break;\n            case 'e':\n\
    \                string[i] = 'E';\n                break;\n            case 'f':\n\
    \                string[i] = 'F';\n                break;\n            case 'g':\n\
    \                string[i] = 'G';\n                break;\n            case 'h':\n\
    \                string[i] = 'H';\n                break;\n            case 'i':\n\
    \                string[i] = 'I';\n                break;\n            case 'j':\n\
    \                string[i] = 'J';\n                break;\n            case 'k':\n\
    \                string[i] = 'K';\n                break;\n            case 'l':\n\
    \                string[i] = 'L';\n                break;\n            case 'm':\n\
    \                string[i] = 'M';\n                break;\n            case 'n':\n\
    \                string[i] = 'N';\n                break;\n            case 'o':\n\
    \                string[i] = 'O';\n                break;\n            case 'p':\n\
    \                string[i] = 'P';\n                break;\n            case 'q':\n\
    \                string[i] = 'Q';\n                break;\n            case 'r':\n\
    \                string[i] = 'R';\n                break;\n            case 's':\n\
    \                string[i] = 'S';\n                break;\n            case 't':\n\
    \                string[i] = 'T';\n                break;\n            case 'u':\n\
    \                string[i] = 'U';\n                break;\n            case 'v':\n\
    \                string[i] = 'V';\n                break;\n            case 'w':\n\
    \                string[i] = 'W';\n                break;\n            case 'x':\n\
    \                string[i] = 'X';\n                break;\n            case 'y':\n\
    \                string[i] = 'Y';\n                break;\n            case 'z':\n\
    \                string[i] = 'Z';\n                break;\n        }\n    }\n\
    \    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobg42y5k.d(11): Error: no property `length` for type `string`

    /tmp/tmpobg42y5k.d(18): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(21): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(24): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(27): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(30): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(33): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(36): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(39): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(42): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(45): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpobg42y5k.d(48): Error: cannot modify'
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ len = string.length();\n    for(int i = 0; i < len; ++i)\n    {\n        auto\
    \ c = string[i];\n        if(c == c.toLower())\n        {\n            string[i]\
    \ = c.toUpper();\n        }\n        else if(c == c.toUpper())\n        {\n  \
    \          string[i] = c.toLower();\n        }\n    }\n    return string;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c++,string dscore=0 |>\nIn C++ 11 and above,\
    \ you can use std::transform(). \n<code>\nstd::transform(\n        str.begin(),\
    \ str.end(), str.begin(), \n        [](const char & c){ return toupper(c); } );\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nJust like in other languages, you can use\
    \ a range-based for loop:\n<code>\nfor (auto c : str) c = toupper(c);\n</code>\n\
    <|/ a tags=c++,string |>\n<| c |>\nThe `std::transform` solution is more elegant.\n\
    <|/ c |>\n<| a |>\nIn case someone is interested in a one-liner using only STL\
    \ functions:\n<code>\nstring toUpper(string str){\n    stringstream ss;\n    for\
    \ (auto c : str)\n        ss << std::toupper(c);\n    return ss.str();\n}\n</code>\n\
    <|/ a tags=c++,string dscore=0 |>\n<| a |>\nAs a more elegant solution I wrote\
    \ this one for you \n<code>\n#include <bits/stdc++.h>\nusing namespace std;\n\
    string toUpper(string str)\n{\n    string out = str;\n    for (auto c: str)\n\
    \    {\n        char ch = c;\n        ch = ch >= 'A' && ch <= 'Z' ? (char) ('A'\
    \ + (ch - 'A')) : ch;\n        ch = ch >= 'a' && ch <= 'z' ? (char) ('a' + (ch\
    \ - 'a')) : ch;\n        ch = ch >= '0' && ch <= '9' ? (char) (ch - '0') : ch;\n\
    \        out = out == str ? ch : out + ch;\n    }\n    return out;\n}\n</code>\n\
    <|/ a dscore=0 tags=c++,string |>\n<| a |>\nYou can do this with a for loop, but\
    \ a range-based for loop is a lot more elegant:\n<code>\nstring toUpper(string\
    \ str)\n{\n    for (auto c: str)\n    {\n        c = toupper(c);\n    }\n    return\
    \ str;\n}\n</code>\n<|/ a dscore\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpholl6rcn.d(26): Error: declaration expected, not `<`

    /tmp/tmpholl6rcn.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpholl6rcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    char c = string.front();\n    string rev = \"\"\
    ;\n    for(int i = 0; i < len; i++)\n    {\n        if(i == len-1)\n        {\n\
    \            rev = rev + c;\n            break;\n        }\n        c = string.at(i+1);\n\
    \        if((std.typecons.isLower(c))&&(std.typecons.isUpper(c)))\n        {\n\
    \            rev = rev + std.typecons.toUpper(c);\n        }\n        else\n \
    \       {\n            rev = rev + std.typecons.toLower(c);\n        }\n    }\n\
    \    return rev;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiif79wyy.d(11): Error: no property `length` for type `string`

    /tmp/tmpiif79wyy.d(12): Error: no property `front` for type `string`

    /tmp/tmpiif79wyy.d(13): Error: `string` is used as a type

    /tmp/tmpiif79wyy.d(21): Error: no property `at` for type `string`

    /tmp/tmpiif79wyy.d(22): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpiif79wyy.d(22): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiif79wyy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ flipped = string.to_lower();\n\tflipped = flipped.to_upper();\n\treturn flipped;\n\
    }\n/*\n Convert a string from lowercase to uppercase and uppercase to lowercase.\n\
    \    >>> flip_case(\"Hello World\")\n    \"HELL WORLD\"\n    \n*/\nstring flip_case(string\
    \ string) \n{\n\tauto flipped = string.to_upper();\n\tflipped = flipped.to_lower();\n\
    \treturn flipped;\n}\n/*\n Convert a string from CamelCase to under_score case:\n\
    \    >>> underscore(\"CamelCase\")\n    \"camel_case\"\n    \n*/\nstring underscore(string\
    \ string) \n{\n\tauto underscored = string.to_lower();\n\tunderscored = underscored.replace(_1,\
    \ _0 + _1);\n\treturn underscored;\n}\n/*\n Convert a string from CamelCase to\
    \ under_score case:\n    >>> underscore(\"CamelCase\")\n    \"camel_case\"\n \
    \   \n*/\nstring underscore(string string) \n{\n\tauto underscored = string.to_upper();\n\
    \tunderscored = underscored.replace(_1, _0 + _1);\n\treturn underscored;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3eswfaz.d(11): Error: no property `to_lower` for type `string`

    /tmp/tmps3eswfaz.d(23): Error: no property `to_upper` for type `string`

    /tmp/tmps3eswfaz.d(35): Error: no property `to_lower` for type `string`

    /tmp/tmps3eswfaz.d(47): Error: no property `to_upper` for type `string`

    /tmp/tmps3eswfaz.d(55): Error: `tmps3eswfaz.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmps3eswfaz.d(9):     `tmps3eswfaz.flip_case(string string)`

    and:

    /tmp/tmps3eswfaz.d(21):     `tmps3eswfaz.flip_case(string string)`

    /tmp/tmps3eswfaz.d(56): Error: `tmps3eswfaz.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmps3eswfaz.d(9):     `tmps3eswfaz.flip_case(string string)`

    and:

    /tmp/tmps3eswfaz.d(21):     `tmps3eswfaz.flip_case(string string)`

    /tmp/tmps3eswfaz.d(57): Error: `tmps3eswfaz.flip_case` called with argument types
    `(string)` matches both:

    /tmp/tmps3eswfaz.d(9):     `tmps3eswfaz.flip_case(string string)`

    and:

    /tmp/tmps3eswfaz.d(21):     `tmps3eswfaz.flip_case(string string)`

    F'
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ i, n = string.length();\n  string result = \"\";\n  char ch;\n  \n  for(i =\
    \ 0; i < n; ++i)\n  {\n    ch = string[i];\n    if(islower(ch))\n      ch = toupper(ch);\n\
    \    result += ch;\n  }\n  \n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_phff4_w.d(11): Error: no property `length` for type `string`

    /tmp/tmp_phff4_w.d(12): Error: `string` is used as a type

    /tmp/tmp_phff4_w.d(18): Error: undefined identifier `islower`

    /tmp/tmp_phff4_w.d(19): Error: undefined identifier `toupper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_phff4_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if\
    \ (string.length == 0) \n        return \"\";\n    string result = \"\";\n   \
    \ for (size_t i = 0; i < string.length; ++i) \n    {\n        char c = string[i];\n\
    \        result += (c >= 'a' && c <= 'z') ? c : toupper(c); // lowercase\n   \
    \     result += (c == 'A' || c == 'a') ? c : tolower(c); // uppercase\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3v5iocm.d(13): Error: `string` is used as a type

    /tmp/tmpp3v5iocm.d(17): Error: undefined identifier `toupper`

    /tmp/tmpp3v5iocm.d(18): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3v5iocm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tmap<char,char>\
    \ char_map = { 'a' :'A', 'e' :'E', 'i' :'I', 'o' :'O', 'u' :'U' };\n\tfor(map<char,char>::iterator\
    \ it = char_map.begin(); it != char_map.end(); ++it)\n\t{\n\t\tstring = string.replace((char*)it.key,\
    \ (char*)it.value);\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4zaw2_qd.d(11): Error: found `,` when expecting `.` following char

    /tmp/tmp4zaw2_qd.d(11): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmp4zaw2_qd.d(11): Error: found `>` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `:` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `:` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `:` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `:` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `:` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Error: found `}` when expecting `;` following statement

    /tmp/tmp4zaw2_qd.d(11): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4zaw2_qd.d(12): Error: found `,` when expecting `.` following char

    /tmp/tmp4zaw2_qd.d(12): Error: found `char` when expecting identifier following
    `char`.

    /tmp/tmp4zaw2_qd.d(12): Error: found `>` when expecting `;`'
  stdout: ''
  timestamp: 1660164048
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ i;\n    string res = \"\";\n    for(i=0;i < string.length(); i++)\n    {\n \
    \       if(islower(string[i])) {\n            res += toupper(string[i]);\n   \
    \     }\n        else if(isupper(string[i])) {\n            res += tolower(string[i]);\n\
    \        }\n        else {\n            res += string[i];\n        }\n    }\n\
    \    return res;\n}\n</code>\n<|/ a tags=c++ dscore=0 |>\n<| a tags=c++ |>\nIn\
    \ C++ strings are stored as arrays of chars. You can access them with the [] operator.\
    \ It also has the function length() which tells you how many chars are in the\
    \ string. So the solution would be to loop through every letter and convert it\
    \ if it is a lowercase letter to uppercase and vice versa. \n<code>\nchar myString[]\
    \ = \"foobar\";\nfor(int i = 0; i < myString.length(); i++)\n{\n    if(myString[i]\
    \ >= 'a' && myString[i] <= 'z')\n    {\n        myString[i] = myString[i] + 32;\n\
    \    }\n    else if(myString[i] >= 'A' && myString[i] <= 'Z')\n    {\n       \
    \ myString[i] = myString[i] - 32;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks. But I want the output to be uppercase letters\n<|/ c |>\n<| c |>\n\
    Yes, I forgot to add that. Thanks for letting me know. I've updated my answer.\n\
    <|/ c |>\n<| c |>\nThank you! It helped.\n<|/ c |>\n<| a tags=c++ |>\nThis might\
    \ be what you're looking for:\n<code>\n#include <iostream>\n#include <algorithm>\n\
    #include <iterator>\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplgg00bwu.d(27): Error: declaration expected, not `<`

    /tmp/tmplgg00bwu.d(33): Error: declaration expected, not `for`

    /tmp/tmplgg00bwu.d(33): Error: no identifier for declarator `i`

    /tmp/tmplgg00bwu.d(33): Error: declaration expected, not `<`

    /tmp/tmplgg00bwu.d(33): Error: no identifier for declarator `i`

    /tmp/tmplgg00bwu.d(33): Error: declaration expected, not `++`

    /tmp/tmplgg00bwu.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplgg00bwu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i = 0; i < string.length(); ++i)\n\t{\n\t\tchar character = string[i];\n\t\t\
    if('a' <= character && character <= 'z')\n\t\t{\n\t\t\tstring new_string = string;\n\
    \t\t\tchar current_character = character;\n\t\t\tint ascii_code = get_ascii(current_character);\n\
    \t\t\tstring new_char = \"_\";\n\t\t\tfor(int j = i; j < string.length(); ++j)\n\
    \t\t\t{\n\t\t\t\tif(string[j] != '_')\n\t\t\t\t{\n\t\t\t\t\tnew_char = new_char\
    \ + string[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tnew_string = new_string + new_char;\n\
    \t\t\tstring[i] = new_char;\n\t\t}\n\t\telse if('A' <= character && character\
    \ <= 'Z')\n\t\t{\n\t\t\tstring new_string = string;\n\t\t\tchar current_character\
    \ = character;\n\t\t\tint ascii_code = get_ascii(current_character);\n\t\t\tstring\
    \ new_char = \"_\";\n\t\t\tfor(int j = i; j < string.length(); ++j)\n\t\t\t{\n\
    \t\t\t\tif(string[j] != '_')\n\t\t\t\t{\n\t\t\t\t\tnew_char = new_char + string[j];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tnew_string = new_string + new_char;\n\t\t\tstring[i]\
    \ = new_char;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstring new_string = string;\n\t\t\
    \tchar current_character = character;\n\t\t\tint ascii_code = get_ascii(current_character);\n\
    \t\t\tstring new_char = \"_\";\n\t\t\tfor(int j = i; j < string.length(); ++j)\n\
    \t\t\t{\n\t\t\t\tif(string[j] != '_')\n\t\t\t\t{\n\t\t\t\t\tnew_char = new_char\
    \ + string[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tnew_string = new_string + new_char;\n\
    \t\t\tstring[i] = new_char;\n\t\t}\n\t}\n\treturn string;\n}\n/*\n Remove leading\
    \ and trailing whitespace.\n    Remove leading and trailing whitespace on either\
    \ side of a string.\n\t>>> remove_whitespace(\"   Hello    \")\n\t\"Hello\"\n\t\
    >>> remove_whitespace(\" Hello   \")\n\t\"Hello\"\n\t>>> remove_whitespace(\"\
    Hello  \")\n\t\"Hello\"\n\t>>> remove_whitespace(\"  Hello\")\n\t\"Hello\"\n\t\
    >>> remove_whitespace(\" Hello\")\n\t\"Hello\"\n\t>>> remove_whitespace(\"  Hello\"\
    )\n\t\"Hello\"\n\t>>> remove_whitespace(\"     Hello\")\n\t\"Hello\"\n\t>>> remove_whitespace(\"\
    \   Hello\")\n\t\"Hello\"\n\t>>> remove_whitespace(\"       Hello\")\n\t\"Hello\"\
    \n\t>>> remove_whitespace(\"   Hello\")\n\t\"Hello\"\n\t>>> remove_whitespace(\"\
    \   Hello    \")\n\t\"Hello\"\n\t>>> remove_whitespace(\"\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzpbx5won.d(65): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpbx5won.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ i = 0;\n  int j = 0;\n  int len = string.length();\n  string result = \"\";\n\
    \  while (i < len) \n  {\n    if (string[i] >= 'a' && string[i] <= 'z') \n   \
    \ {\n      result += string[i];\n    }\n    else if (string[i] >= 'A' && string[i]\
    \ <= 'Z') \n    {\n      result += string[i] - 'A' + 'a';\n    }\n    else \n\
    \    {\n      result += string[i];\n    }\n    i++;\n  }\n  while (j < len) \n\
    \  {\n    if (string[j] >= 'a' && string[j] <= 'z') \n    {\n      result += string[j];\n\
    \    }\n    else if (string[j] >= 'A' && string[j] <= 'Z') \n    {\n      result\
    \ += string[j] - 'A' + 'a';\n    }\n    else \n    {\n      result += string[j];\n\
    \    }\n    j++;\n  }\n  return result;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovtiwsje.d(13): Error: no property `length` for type `string`

    /tmp/tmpovtiwsje.d(14): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovtiwsje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ flip = find_if(string.begin(), string.end(), [](char ch){ return !isalpha(ch);\
    \ });\n\tif (flip != string.end()) {\n\t\tstring result = string;\n\t\tfor (auto\
    \ c = flip; c < string.end(); c++) {\n\t\t\tif (isupper(string[c]))\n\t\t\t\t\
    result[c - 1] = tolower(string[c]);\n\t\t\telse\n\t\t\t\tresult[c - 1] = toupper(string[c]);\n\
    \t\t}\n\t\treturn result;\n\t}\n\telse {\n\t\treturn string;\n\t}\n}\n/*\n For\
    \ a given string, remove trailing punctuation characters\n \n */\nstring remove_trailing_punctuation(string\
    \ string)\n{\n\tauto result = string;\n\tauto length = string.length();\n\twhile\
    \ (length >= 2) {\n\t\tbool found_punctuation = false;\n\t\tfor (auto i = 0; i\
    \ < length; i++) {\n\t\t\tif (string[i] != '.' && string[i] != '!' && string[i]\
    \ != '?')\n\t\t\t\tfound_punctuation = true;\n\t\t}\n\t\tif (!found_punctuation)\n\
    \t\t\tbreak;\n\t\tresult.pop_back();\n\t\tlength--;\n\t}\n\treturn result;\n}\n\
    /*\n For a given string, trim leading and trailing whitespace\n \n */\nstring\
    \ trim_leading(string string)\n{\n\tauto result = string;\n\tauto length = string.length();\n\
    \twhile (length > 0) {\n\t\tauto c = string[0];\n\t\tif (c == ' ' || c == '\\\
    t' || c == '\\r' || c == '\\n' || c == '\\f')\n\t\t\tbreak;\n\t\tresult.remove_prefix(1);\n\
    \t\tlength--;\n\t}\n\treturn result;\n}\n/*\n For a given string, trim trailing\
    \ whitespace\n \n */\nstring trim_trailing(string string)\n{\n\tauto result =\
    \ string;\n\tauto length = string.length();\n\twhile (length > 0) {\n\t\tauto\
    \ c = string[length - 1];\n\t\tif (c == ' ' || c == '\\t' || c == '\\r' || c ==\
    \ '\\n' || c == '\\f')\n\t\t\tbreak;\n\t\tresult.remove_suffix(1);\n\t\tlength--;\n\
    \t}\n\treturn result;\n}\n/*\n For a given string, remove trailing punctuation\
    \ characters and whitespace characters\n \n */\nstring remove_trailing_and_trailing_whitespace(string\
    \ string)\n{\n\tauto result = string;\n\tauto length = string.length();\n\twhile\
    \ (length >= 2) {\n\t\tbool found_punctuation = false;\n\t\tfor (auto i = 0; i\
    \ < length; i++) {\n\t\t\tif (string[i] != '.' && string[i] != '!' && string[i]\
    \ != '?')\n\t\t\t\tfound_punctuation = true;\n\t\t}\n\t\tif (!found_punctuation)\n\
    \t\t\tbreak;\n\t\tresult.pop_back();\n\t\tlength--;\n\t}\n\twhile (length > 0)\
    \ {\n\t\tauto c = string[0];\n\t\tif (\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjy8yhns.d(11): Error: found `ch` when expecting `.` following
    char

    /tmp/tmpsjy8yhns.d(11): Error: found `)` when expecting identifier following `char`.

    /tmp/tmpsjy8yhns.d(11): Error: found `{` when expecting `,`

    /tmp/tmpsjy8yhns.d(11): Error: expression expected, not `return`

    /tmp/tmpsjy8yhns.d(11): Error: found `!` when expecting `,`

    /tmp/tmpsjy8yhns.d(11): Error: found `;` when expecting `,`

    /tmp/tmpsjy8yhns.d(11): Error: expression expected, not `}`

    /tmp/tmpsjy8yhns.d(11): Error: found `;` when expecting `,`

    /tmp/tmpsjy8yhns.d(12): Error: expression expected, not `if`

    /tmp/tmpsjy8yhns.d(12): Error: found `{` when expecting `,`

    /tmp/tmpsjy8yhns.d(13): Error: found `result` when expecting `,`

    /tmp/tmpsjy8yhns.d(13): Error: expression expected, not `=`

    /tmp/tmpsjy8yhns.d(13): Error: found `string` when expecting `,`

    /tmp/tmpsjy8yhns.d(13): Error: expression expected, not `;`

    /tmp/tmpsjy8yhns.d(14): Error: found `for` when expecting `,`

    /tmp/tmpsjy8yhns.d(14): Error: expression expected, not `auto`

    /t'
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result;\n    for(int i=0;i<string.length();++i) \n    {\n        if(!islower(string[i]))\
    \ \n            result+=toupper(string[i]);\n        else\n            result+=tolower(string[i]);\n\
    \    }\n    return result;\n}\n/*\n Take a list and a string as arguments and\
    \ return a list of all the strings \n containing the string in the original list.\n\
    \ \n >>> inList(\"hello\", [\"hello\", \"hello\", \"helloworld\", \"goodbye\"\
    ])\n [\"hello\", \"helloworld\"]\n */\nlist<string> inList(string str, list<string>\
    \ stringList) \n{\n    list<string> result;\n    for(int i=0;i<stringList.size();++i)\
    \ \n    {\n        if(str==stringList[i])\n            result.push_back(stringList[i]);\n\
    \    }\n    return result;\n}\n/*\n Take a list and a string as arguments and\
    \ return a list of all the strings \n containing the string in the original list.\n\
    \ \n >>> inList(\"hello\", [\"hello\", \"hello\", \"helloworld\", \"goodbye\"\
    ])\n [\"hello\", \"helloworld\"]\n */\nlist<string> inList(string str, set<string>\
    \ stringSet) \n{\n    list<string> result;\n    for(set<string>::iterator it=stringSet.begin();it!=stringSet.end();++it)\
    \ \n    {\n        if(str==*it)\n            result.push_back(*it);\n    }\n \
    \   return result;\n}\n/*\n Take a list and a list of strings as arguments and\
    \ return a list of all the strings \n containing the string in the original list.\n\
    \ \n >>> inList(\"hello\", [\"hello\", \"hello\", \"helloworld\", \"goodbye\"\
    ], [\"hello\", \"goodbye\"])\n [\"hello\", \"helloworld\"]\n */\nlist<string>\
    \ inList(string str, list<string> stringList, list<string> stringList2) \n{\n\
    \    list<string> result;\n    for(int i=0;i<stringList.size();++i) \n    {\n\
    \        if(str==stringList[i])\n            result.push_back(stringList[i]);\n\
    \    }\n    return result;\n}\n/*\n Take a list and a list of strings as arguments\
    \ and return a list of all the strings \n containing the string in the original\
    \ list.\n \n >>> inList(\"hello\", [\"hello\", \"hello\", \"helloworld\", \"goodbye\"\
    ], [\"hello\", \"goodbye\"])\n [\"hello\", \"helloworld\"]\n */\nlist<string>\
    \ inList(string str, set<string> stringSet, list<string> stringList) \n{\n   \
    \ list<string> result;\n    for(set<string>::iterator it=stringSet.begin();\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy24onu6z.d(28): Error: no identifier for declarator `list`

    /tmp/tmpy24onu6z.d(28): Error: declaration expected, not `<`

    /tmp/tmpy24onu6z.d(31): Error: declaration expected, not `for`

    /tmp/tmpy24onu6z.d(31): Error: no identifier for declarator `i`

    /tmp/tmpy24onu6z.d(31): Error: declaration expected, not `<`

    /tmp/tmpy24onu6z.d(31): Error: declaration expected, not `++`

    /tmp/tmpy24onu6z.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy24onu6z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n   for\
    \ (unsigned i = 0; i < string.length(); ++i)\n   {\n      if (string[i] == '_')\n\
    \         string[i] = 'a';\n      else if (string[i] >= 'A')\n         string[i]\
    \ = string[i] - ('a' - 'A');\n      else if (string[i] <= 'Z')\n         string[i]\
    \ = string[i] - ('a' - 'A' + 26);\n   }\n   return string;\n}\nunittest\n{\n \
    \   alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n   \
    \ assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent\
    \ delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm0mp4u3g.d(11): Error: undefined identifier `unsigned`, did you
    mean `uint`?

    /tmp/tmpm0mp4u3g.d(11): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm0mp4u3g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ len = string.length();\n  for(int i = 0; i < len; ++i) {\n    char ch = string[i];\n\
    \    if(!isUpper(ch))\n      string[i] = toUpper(ch);\n    if(!isLower(ch))\n\
    \      string[i] = toLower(ch);\n  }\n  return string;\n}\nunittest\n{\n    alias\
    \ candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6h5d0959.d(11): Error: no property `length` for type `string`

    /tmp/tmp6h5d0959.d(14): Error: undefined identifier `isUpper`

    /tmp/tmp6h5d0959.d(15): Error: undefined identifier `toUpper`

    /tmp/tmp6h5d0959.d(16): Error: undefined identifier `isLower`

    /tmp/tmp6h5d0959.d(17): Error: undefined identifier `toLower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6h5d0959.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    foreach(char\
    \ ch, string) {\n        if(islower(ch)) {\n            ch = char.ToUpper(ch);\n\
    \        } else {\n            ch = char.ToLower(ch);\n        }\n        string\
    \ = string + ch;\n    }\n    return string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuy20kfbx.d(11): Error: no identifier for declarator `string`

    /tmp/tmpuy20kfbx.d(11): Error: found `)` when expecting `;`

    /tmp/tmpuy20kfbx.d(19): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuy20kfbx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (auto &c : string)\n    {\n        if (c == 'A')\n        {\n            c =\
    \ 'a';\n        }\n        else if (c == 'a')\n        {\n            c = 'A';\n\
    \        }\n        else if (c == 'Z')\n        {\n            c = 'z';\n    \
    \    }\n        else if (c == 'z')\n        {\n            c = 'Z';\n        }\n\
    \    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsg69saj9.d(11): Error: basic type expected, not `&`

    /tmp/tmpsg69saj9.d(11): Error: no identifier for declarator `_error_`

    /tmp/tmpsg69saj9.d(11): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsg69saj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    for(int i = 0; i < string.length(); i++)\n    {\n        if(string[i] >=\
    \ 'a' && string[i] <= 'z')\n        {\n            string[i] = string[i] + 'A'\
    \ - 'a';\n        }\n        else if(string[i] >= 'A' && string[i] <= 'Z')\n \
    \       {\n            string[i] = string[i] + 'a' - 'A';\n        }\n    }\n\
    \    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprav01c4s.d(12): Error: no property `length` for type `string`

    /tmp/tmprav01c4s.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmprav01c4s.d(20): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprav01c4s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if (c == 'a')\n        {\n            c = 'A';\n        }\n        else\
    \ if (c == 'b')\n        {\n            c = 'B';\n        }\n        else if (c\
    \ == 'c')\n        {\n            c = 'C';\n        }\n        else if (c == 'd')\n\
    \        {\n            c = 'D';\n        }\n        else if (c == 'e')\n    \
    \    {\n            c = 'E';\n        }\n        else if (c == 'f')\n        {\n\
    \            c = 'F';\n        }\n        else if (c == 'g')\n        {\n    \
    \        c = 'G';\n        }\n        else if (c == 'h')\n        {\n        \
    \    c = 'H';\n        }\n        else if (c == 'i')\n        {\n            c\
    \ = 'I';\n        }\n        else if (c == 'j')\n        {\n            c = 'J';\n\
    \        }\n        else if (c == 'k')\n        {\n            c = 'K';\n    \
    \    }\n        else if (c == 'l')\n        {\n            c = 'L';\n        }\n\
    \        else if (c == 'm')\n        {\n            c = 'M';\n        }\n    \
    \    else if (c == 'n')\n        {\n            c = 'N';\n        }\n        else\
    \ if (c == 'o')\n        {\n            c = 'O';\n        }\n        else if (c\
    \ == 'p')\n        {\n            c = 'P';\n        }\n        else if (c == 'q')\n\
    \        {\n            c = 'Q';\n        }\n        else if (c == 'r')\n    \
    \    {\n            c = 'R';\n        }\n        else if (c == 's')\n        {\n\
    \            c = 'S';\n        }\n        else if (c == 't')\n        {\n    \
    \        c = 'T';\n        }\n        else if (c == 'u')\n        {\n        \
    \    c = 'U';\n        }\n        else if (c == 'v')\n        {\n            c\
    \ = 'V';\n        }\n        else if (c == 'w')\n        {\n            c = 'W';\n\
    \        }\n        else if (c == 'x')\n        {\n            c = 'X';\n    \
    \    }\n        else if (c == 'y')\n        {\n            c = 'Y';\n        }\n\
    \        else if (c == 'z')\n        {\n            c = 'Z';\n        }\n    \
    \    else\n        {\n            c = c.toUpper();\n        }\n        \n    \
    \    string[i] = c;\n    }\n    return string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxr_c0f4d.d(11): Error: no property `length` for type `string`

    /tmp/tmpxr_c0f4d.d(120): Error: no property `toUpper` for type `char`

    /tmp/tmpxr_c0f4d.d(123): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr_c0f4d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    \n\
    \    int i, len = 0;\n    for(i = 0, len = string.length; i < len; ++i)\n    \
    \    if(string[i] >= 'a' && string[i] <= 'z')\n            string[i] = string[i]\
    \ + 'A' - 'a';\n        else\n            string[i] = string[i] + 'a' - 'A';\n\
    \        \n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmrghdg8m.d(13): Error: cannot implicitly convert expression `string.length`
    of type `ulong` to `int`

    /tmp/tmpmrghdg8m.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpmrghdg8m.d(17): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrghdg8m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tsize_t\
    \ len = string.length();\n\tstring result = \"\";\n\tfor(int i = 0; i < len; i++)\n\
    \t{\n\t\tchar c = string[i];\n\t\tif(c >= 'a' && c <= 'z')\n\t\t\tresult += toupper(c);\n\
    \t\telse if(c >= 'A' && c <= 'Z')\n\t\t\tresult += tolower(c);\n\t\telse\n\t\t\
    \tresult += c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2crdzkfj.d(11): Error: no property `length` for type `string`

    /tmp/tmp2crdzkfj.d(12): Error: `string` is used as a type

    /tmp/tmp2crdzkfj.d(17): Error: undefined identifier `toupper`

    /tmp/tmp2crdzkfj.d(19): Error: undefined identifier `tolower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2crdzkfj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  string\
    \ lowercase_string = string;\n  for(int i = 0; i < string.length; ++i)\n  {\n\
    \    char c = lowercase_string[i];\n    if(islower(c))\n    {\n      lowercase_string[i]\
    \ = toupper(c);\n    }\n    else\n    {\n      lowercase_string[i] = tolower(c);\n\
    \    }\n  }\n  return lowercase_string;\n}\nunittest\n{\n    alias candidate =\
    \ flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6zsxzesm.d(11): Error: `string` is used as a type

    /tmp/tmp6zsxzesm.d(15): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zsxzesm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ s = string;\n\t\n\tfor (unsigned i = 0; i < s.length; ++i)\n\t{\n\t\tif (s[i]\
    \ == 'a' || s[i] == 'A')\n\t\t\ts[i] = 'A';\n\t\telse if (s[i] == 'b' || s[i]\
    \ == 'B')\n\t\t\ts[i] = 'B';\n\t\telse if (s[i] == 'c' || s[i] == 'C')\n\t\t\t\
    s[i] = 'C';\n\t\telse if (s[i] == 'd' || s[i] == 'D')\n\t\t\ts[i] = 'D';\n\t\t\
    else if (s[i] == 'e' || s[i] == 'E')\n\t\t\ts[i] = 'E';\n\t\telse if (s[i] ==\
    \ 'f' || s[i] == 'F')\n\t\t\ts[i] = 'F';\n\t\telse if (s[i] == 'g' || s[i] ==\
    \ 'G')\n\t\t\ts[i] = 'G';\n\t\telse if (s[i] == 'h' || s[i] == 'H')\n\t\t\ts[i]\
    \ = 'H';\n\t\telse if (s[i] == 'i' || s[i] == 'I')\n\t\t\ts[i] = 'I';\n\t\telse\
    \ if (s[i] == 'j' || s[i] == 'J')\n\t\t\ts[i] = 'J';\n\t\telse if (s[i] == 'k'\
    \ || s[i] == 'K')\n\t\t\ts[i] = 'K';\n\t\telse if (s[i] == 'l' || s[i] == 'L')\n\
    \t\t\ts[i] = 'L';\n\t\telse if (s[i] == 'm' || s[i] == 'M')\n\t\t\ts[i] = 'M';\n\
    \t\telse if (s[i] == 'n' || s[i] == 'N')\n\t\t\ts[i] = 'N';\n\t\telse if (s[i]\
    \ == 'o' || s[i] == 'O')\n\t\t\ts[i] = 'O';\n\t\telse if (s[i] == 'p' || s[i]\
    \ == 'P')\n\t\t\ts[i] = 'P';\n\t\telse if (s[i] == 'q' || s[i] == 'Q')\n\t\t\t\
    s[i] = 'Q';\n\t\telse if (s[i] == 'r' || s[i] == 'R')\n\t\t\ts[i] = 'R';\n\t\t\
    else if (s[i] == 's' || s[i] == 'S')\n\t\t\ts[i] = 'S';\n\t\telse if (s[i] ==\
    \ 't' || s[i] == 'T')\n\t\t\ts[i] = 'T';\n\t\telse if (s[i] == 'u' || s[i] ==\
    \ 'U')\n\t\t\ts[i] = 'U';\n\t\telse if (s[i] == 'v' || s[i] == 'V')\n\t\t\ts[i]\
    \ = 'V';\n\t\telse if (s[i] == 'w' || s[i] == 'W')\n\t\t\ts[i] = 'W';\n\t\telse\
    \ if (s[i] == 'x' || s[i] == 'X')\n\t\t\ts[i] = 'X';\n\t\telse if (s[i] == 'y'\
    \ || s[i] == 'Y')\n\t\t\ts[i] = 'Y';\n\t\telse if (s[i] == 'z' || s[i] == 'Z')\n\
    \t\t\ts[i] = 'Z';\n\t}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpthxvlbrj.d(68): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthxvlbrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    if (len == 0) \n        return string;\n    \n \
    \   char last = string[len - 1];\n    \n    for(int i=len-1;i>=0;i--)\n    {\n\
    \        if (string[i] < 'a' || string[i] > 'z') \n        {\n            string\
    \ tmp;\n            tmp = std.string.copy(string);\n            tmp[i] = toupper(tmp[i]);\n\
    \            \n            return tmp;\n        }\n        else if (string[i]\
    \ == last) \n        {\n            string tmp;\n            tmp = std.string.copy(string);\n\
    \            tmp[i] = tolower(tmp[i]);\n            \n            return tmp;\n\
    \        }\n    }\n    \n    return string;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpocvnv3i3.d(11): Error: no property `length` for type `string`

    /tmp/tmpocvnv3i3.d(21): Error: `string` is used as a type

    /tmp/tmpocvnv3i3.d(29): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpocvnv3i3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ s = string;\n\tfor(int i=0; i < s.length(); i++)\n\t{\n\t\tif(s[i] == 'a' ||\
    \ s[i] == 'A')\n\t\t\ts[i] = 'A';\n\t\telse if(s[i] == 'b' || s[i] == 'B')\n\t\
    \t\ts[i] = 'B';\n\t\telse if(s[i] == 'c' || s[i] == 'C')\n\t\t\ts[i] = 'C';\n\t\
    \telse if(s[i] == 'd' || s[i] == 'D')\n\t\t\ts[i] = 'D';\n\t\telse if(s[i] ==\
    \ 'e' || s[i] == 'E')\n\t\t\ts[i] = 'E';\n\t\telse if(s[i] == 'f' || s[i] == 'F')\n\
    \t\t\ts[i] = 'F';\n\t\telse if(s[i] == 'g' || s[i] == 'G')\n\t\t\ts[i] = 'G';\n\
    \t\telse if(s[i] == 'h' || s[i] == 'H')\n\t\t\ts[i] = 'H';\n\t\telse if(s[i] ==\
    \ 'i' || s[i] == 'I')\n\t\t\ts[i] = 'I';\n\t\telse if(s[i] == 'j' || s[i] == 'J')\n\
    \t\t\ts[i] = 'J';\n\t\telse if(s[i] == 'k' || s[i] == 'K')\n\t\t\ts[i] = 'K';\n\
    \t\telse if(s[i] == 'l' || s[i] == 'L')\n\t\t\ts[i] = 'L';\n\t\telse if(s[i] ==\
    \ 'm' || s[i] == 'M')\n\t\t\ts[i] = 'M';\n\t\telse if(s[i] == 'n' || s[i] == 'N')\n\
    \t\t\ts[i] = 'N';\n\t\telse if(s[i] == 'o' || s[i] == 'O')\n\t\t\ts[i] = 'O';\n\
    \t\telse if(s[i] == 'p' || s[i] == 'P')\n\t\t\ts[i] = 'P';\n\t\telse if(s[i] ==\
    \ 'q' || s[i] == 'Q')\n\t\t\ts[i] = 'Q';\n\t\telse if(s[i] == 'r' || s[i] == 'R')\n\
    \t\t\ts[i] = 'R';\n\t\telse if(s[i] == 's' || s[i] == 'S')\n\t\t\ts[i] = 'S';\n\
    \t\telse if(s[i] == 't' || s[i] == 'T')\n\t\t\ts[i] = 'T';\n\t\telse if(s[i] ==\
    \ 'u' || s[i] == 'U')\n\t\t\ts[i] = 'U';\n\t\telse if(s[i] == 'v' || s[i] == 'V')\n\
    \t\t\ts[i] = 'V';\n\t\telse if(s[i] == 'w' || s[i] == 'W')\n\t\t\ts[i] = 'W';\n\
    \t\telse if(s[i] == 'x' || s[i] == 'X')\n\t\t\ts[i] = 'X';\n\t\telse if(s[i] ==\
    \ 'y' || s[i] == 'Y')\n\t\t\ts[i] = 'Y';\n\t\telse if(s[i] == 'z' || s[i] == 'Z')\n\
    \t\t\ts[i] = 'Z';\n\t\telse if(s[i] == 'A' || s[i] == 'a')\n\t\t\ts[i] = 'a';\n\
    \t\telse if(s[i] == 'B' || s[i] == 'b')\n\t\t\ts[i] = 'b';\n\t\telse if(s[i] ==\
    \ 'C' || s[i] == 'c')\n\t\t\ts[i] = 'c';\n\t\telse if(s[i] == 'D' || s[i]\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyu1_j5nb.d(73): Error: found `unittest` when expecting `)`

    /tmp/tmpyu1_j5nb.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpyu1_j5nb.d(81): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyu1_j5nb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (auto ch : string) \n\t{\n\t\tswitch (ch)\n\t\t{\n\t\t\tcase 'A': return 'a';\n\
    \t\t\tcase 'a': return 'A';\n\t\t\tcase 'B': return 'b';\n\t\t\tcase 'b': return\
    \ 'B';\n\t\t\tcase 'C': return 'c';\n\t\t\tcase 'c': return 'C';\n\t\t\tcase 'D':\
    \ return 'd';\n\t\t\tcase 'd': return 'D';\n\t\t\tcase 'E': return 'e';\n\t\t\t\
    case 'e': return 'E';\n\t\t\tcase 'F': return 'f';\n\t\t\tcase 'f': return 'F';\n\
    \t\t\tcase 'G': return 'g';\n\t\t\tcase 'g': return 'G';\n\t\t\tcase 'H': return\
    \ 'h';\n\t\t\tcase 'h': return 'H';\n\t\t\tcase 'I': return 'i';\n\t\t\tcase 'i':\
    \ return 'I';\n\t\t\tcase 'J': return 'j';\n\t\t\tcase 'j': return 'J';\n\t\t\t\
    case 'K': return 'k';\n\t\t\tcase 'k': return 'K';\n\t\t\tcase 'L': return 'l';\n\
    \t\t\tcase 'l': return 'L';\n\t\t\tcase 'M': return 'm';\n\t\t\tcase 'm': return\
    \ 'M';\n\t\t\tcase 'N': return 'n';\n\t\t\tcase 'n': return 'N';\n\t\t\tcase 'O':\
    \ return 'o';\n\t\t\tcase 'o': return 'O';\n\t\t\tcase 'P': return 'p';\n\t\t\t\
    case 'p': return 'P';\n\t\t\tcase 'Q': return 'q';\n\t\t\tcase 'q': return 'Q';\n\
    \t\t\tcase 'R': return 'r';\n\t\t\tcase 'r': return 'R';\n\t\t\tcase 'S': return\
    \ 's';\n\t\t\tcase 's': return 'S';\n\t\t\tcase 'T': return 't';\n\t\t\tcase 't':\
    \ return 'T';\n\t\t\tcase 'U': return 'u';\n\t\t\tcase 'u': return 'U';\n\t\t\t\
    case 'V': return 'v';\n\t\t\tcase 'v': return 'V';\n\t\t\tcase 'W': return 'w';\n\
    \t\t\tcase 'w': return 'W';\n\t\t\tcase 'X': return 'x';\n\t\t\tcase 'x': return\
    \ 'X';\n\t\t\tcase 'Y': return 'y';\n\t\t\tcase 'y': return 'Y';\n\t\t\tcase 'Z':\
    \ return 'z';\n\t\t\tcase 'z': return 'Z';\n\t\t}\n\t}\n\treturn string;\n}\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhcpfpl_.d(11): Error: no identifier for declarator `ch`

    /tmp/tmplhcpfpl_.d(11): Error: expression expected, not `:`

    /tmp/tmplhcpfpl_.d(11): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhcpfpl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ str = string;\n\tfor(int i = 0; i < (int)string.size(); i++)\n\t{\n\t\tif(string[i]\
    \ < 'a' || string[i] > 'z')\n\t\t\tstr[i] = toupper((int)string[i]);\n\t\telse\
    \ if(string[i] > 'z')\n\t\t\tstr[i] = tolower((int)string[i]);\n\t}\n\treturn\
    \ str;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuh8wpfw0.d(12): Error: C style cast illegal, use `cast(int)string.size()`

    /tmp/tmpuh8wpfw0.d(15): Error: C style cast illegal, use `cast(int)string[i]`

    /tmp/tmpuh8wpfw0.d(17): Error: C style cast illegal, use `cast(int)string[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuh8wpfw0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ length = string.size();\n\tfor (int i = 0; i < length; ++i)\n\t{\n\t\tif (string[i]\
    \ == string::tolower(string[i]))\n\t\t\tstring[i] = string::toupper(string[i]);\n\
    \t\telse\n\t\t\tstring[i] = string::tolower(string[i]);\n\t}\n\treturn string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw7ex8l86.d(14): Error: found `:` when expecting `)`

    /tmp/tmpw7ex8l86.d(14): Error: found `:` instead of statement

    /tmp/tmpw7ex8l86.d(17): Error: found `:` when expecting `;` following statement

    /tmp/tmpw7ex8l86.d(17): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw7ex8l86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    std.string<string>\
    \ lowercase = std.string<string>(string, \"lowercase\");\n    std.string<string>\
    \ uppercase = std.string<string>(string, \"uppercase\");\n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwtwd6xq.d(11): Error: found `>` when expecting `;` following statement

    /tmp/tmpxwtwd6xq.d(11): Error: found `>` when expecting `;` following statement

    /tmp/tmpxwtwd6xq.d(12): Error: found `>` when expecting `;` following statement

    /tmp/tmpxwtwd6xq.d(12): Error: found `>` when expecting `;` following statement

    /tmp/tmpxwtwd6xq.d(249): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwtwd6xq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    int idx = 0;\n    string ret = string;\n    \n \
    \   for(idx=0; idx<len; idx++) {\n        char ch = string[idx];\n        \n \
    \       // lower case\n        if(ch == 'a') {\n            ret[idx] = 'A';\n\
    \        }\n        // upper case\n        else if(ch == 'A') {\n            ret[idx]\
    \ = 'a';\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb350mugm.d(11): Error: no property `length` for type `string`

    /tmp/tmpb350mugm.d(13): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb350mugm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tstring\
    \ out = \"\";\n\tfor(int i=0; i<string.size(); ++i)\n\t\tout += (islower(string[i])\
    \ ? toupper(string[i]) : tolower(string[i]));\n\treturn out;\n}\n/*\n For a given\
    \ string, add a space before every uppercase characters and a space after every\
    \ lowercase characters.\n    >>> add_space(\"Hello\")\n    \"h e l l o\"\n   \
    \ \n*/\nstring add_space(string string) \n{\n\tstring out = \"\";\n\tfor(int i=0;\
    \ i<string.size(); ++i)\n\t{\n\t\tout += (islower(string[i]) ? string[i] + \"\
    \ \" : \" \" ) + string[i];\n\t}\n\treturn out;\n}\n/*\n For a given string, add\
    \ a space after every uppercase characters and a space before every lowercase\
    \ characters.\n    >>> add_space_backwards(\"Hello\")\n    \"Hello \" \n    \n\
    */\nstring add_space_backwards(string string) \n{\n\tstring out = \"\";\n\tfor(int\
    \ i=0; i<string.size(); ++i)\n\t{\n\t\tout += string[i] + \" \"; \n\t\tout +=\
    \ (islower(string[i]) ? \" \" + string[i] : \" \") ;\n\t}\n\treturn out;\n}\n\
    /*\n For a given string, add an underscore before every uppercase characters and\
    \ a underscore after every lowercase characters.\n    >>> add_underscore(\"Hello\"\
    )\n    \"h_e_l_l_o\"\n    \n*/\nstring add_underscore(string string) \n{\n\tstring\
    \ out = \"\";\n\tfor(int i=0; i<string.size(); ++i)\n\t{\n\t\tout += (islower(string[i])\
    \ ? \"_\" + string[i] : \"\") + string[i];\n\t}\n\treturn out;\n}\n/*\n For a\
    \ given string, add an underscore before every uppercase characters and a underscore\
    \ after every lowercase characters.\n    >>> add_underscore_backwards(\"Hello\"\
    )\n    \"Hello_\" \n    \n*/\nstring add_underscore_backwards(string string) \n\
    {\n\tstring out = \"\";\n\tfor(int i=0; i<string.size(); ++i)\n\t{\n\t\tout +=\
    \ string[i] + \"_\"; \n\t\tout += (islower(string[i]) ? \"_\" + string[i] : \"\
    \") ;\n\t}\n\treturn out;\n}\n/*\n For a given string, uppercase all uppercase\
    \ characters.\n    >>> upper_case_first(\"Hello\")\n    \"HELLO\"\n    \n*/\n\
    string upper_case_first(string string) \n{\n\tstring out = \"\";\n\tfor(int i=0;\
    \ i<string.size(); ++i)\n\t\tout += (isupper(string[i]) ? toupper(string[i]) :\
    \ string[i]);\n\treturn out;\n}\n/*\n For a given string, uppercase all lowercase\
    \ characters.\n    >>> upper_case_\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpce1gmuzt.d(11): Error: found `out` when expecting `;` following
    statement

    /tmp/tmpce1gmuzt.d(11): Error: found `=` instead of statement

    /tmp/tmpce1gmuzt.d(13): Error: found `out` instead of statement

    /tmp/tmpce1gmuzt.d(14): Error: expression expected, not `out`

    /tmp/tmpce1gmuzt.d(24): Error: found `out` when expecting `;` following statement

    /tmp/tmpce1gmuzt.d(24): Error: found `=` instead of statement

    /tmp/tmpce1gmuzt.d(27): Error: found `out` instead of statement

    /tmp/tmpce1gmuzt.d(29): Error: expression expected, not `out`

    /tmp/tmpce1gmuzt.d(39): Error: found `out` when expecting `;` following statement

    /tmp/tmpce1gmuzt.d(39): Error: found `=` instead of statement

    /tmp/tmpce1gmuzt.d(42): Error: found `out` instead of statement

    /tmp/tmpce1gmuzt.d(43): Error: found `out` instead of statement

    /tmp/tmpce1gmuzt.d(45): Error: expression expected, not `out`

    /tmp/tmpce1gmuzt.d(55): Error: found `out` when expecting `;` following statement

    /tmp/tmpce1gmuzt.d(55): Error: found `=` instead of statement

    /tmp/t'
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0;i < string.Length;i++) {\n        char c = string[i];\n        if(c ==\
    \ c.tolower(c)) c = c.toupper();\n        else c = c.tolower();\n        string[i]\
    \ = c;\n    }\n    return string;\n}\n/*\n For a given string, replace all occurances\
    \ of the character `c` with the character `t`.\n    >>> replace_character(\"abc\"\
    , \"a\", \"t\")\n    \"btt\"\n    \n In a string, only `c` will be replaced. The\
    \ string is not modified. \n*/\nstring replace_character(string s, char c, char\
    \ t)\n{\n    for(int i = 0;i < s.Length;i++) {\n        char chr = s[i];\n   \
    \     if(chr == c) s[i] = t;\n    }\n    return s;\n}\n/*\n For a given string,\
    \ replace all occurances of the string `s` to string `t`.\n    >>> replace_string(\"\
    abc\", \"a\", \"t\")\n    \"btt\"\n    \n In a string, only `s` will be replaced.\
    \ The string is not modified. \n*/\nstring replace_string(string s, string t,\
    \ string t)\n{\n    for(int i = 0;i < s.Length;i++) {\n        char chr = s[i];\n\
    \        if(chr == s) s[i] = t;\n    }\n    return s;\n}\n/*\n For a given string,\
    \ replace all occurances of the string `s` to string `t`.\n    >>> replace_string(\"\
    abc\", \"a\", \"t\")\n    \"btt\"\n    \n In a string, only `s` will be replaced.\
    \ The string is not modified. \n*/\nstring replace_string(string s, char c, char\
    \ t, string t)\n{\n    for(int i = 0;i < s.Length;i++) {\n        char chr = s[i];\n\
    \        if(chr == s) s[i] = t;\n    }\n    return s;\n}\n/*\n For a given string,\
    \ return a new string in which all characters in the original string except for\
    \ `c` are replaced by `t`.\n    >>> replace_all(\"abc\", \"a\", \"t\")\n    \"\
    btt\"\n    \n In a string, only `c` will be replaced. The string is not modified.\
    \ \n*/\nstring replace_all(string s, char c, char t)\n{\n    for(int i = 0;i <\
    \ s.Length;i++) {\n        char chr = s[i];\n        if(chr != c) s[i] = t;\n\
    \    }\n    return s;\n}\n/*\n For a given string, return a new string in which\
    \ all characters in the original string except for `s` are replaced by `t`.\n\
    \    >>> replace_all(\"abc\", \"a\", \"t\")\n    \"btt\"\n    \n In a string,\
    \ only `s` will be replaced. The string is not modified. \n*/\nstring replace_all(string\
    \ s, string \nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn4i1ifpg.d(87): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn4i1ifpg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ retval = \"\";\n    for (auto it = string.begin(); it != string.end(); ++it)\
    \ \n    {\n        auto next = it+1;\n        if (next == string.end()) \n   \
    \     {\n            auto last_char = *it;\n            auto next_last_char =\
    \ *next;\n            if (last_char >= 'A' && last_char <= 'Z')\n            \
    \    retval = retval + toupper(*it);\n            else if (next_last_char >= 'A'\
    \ && next_last_char <= 'Z')\n                retval = retval + toupper(*next);\n\
    \            else \n            {\n                retval = retval + tolower(*it);\n\
    \                retval = retval + tolower(*next);\n            }\n          \
    \  \n            it = string.begin(); \n            next = it+1;\n           \
    \ if (next == string.end()) \n            {\n                break;\n        \
    \    }\n        }\n        else if (*it >= 'A' && *it <= 'Z')\n        {\n   \
    \         retval = retval + toupper(*it);\n        }\n        else \n        {\n\
    \            retval = retval + tolower(*it);\n        }\n    }\n    return retval;\n\
    }\n/*\n For a given string, flip spaces to underscores\n    >>> flip_underscores(\"\
    Hello World\")\n    \"hello_world\"\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ja0c96c.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ja0c96c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    int\
    \ len = string.length();\n    for (int i=0; i<len; ++i)\n\t{\n\t\tif (string[i]\
    \ == 'a')\n\t\t\tstring[i] = 'A';\n\t\tif (string[i] == 'b')\n\t\t\tstring[i]\
    \ = 'B';\n\t\tif (string[i] == 'c')\n\t\t\tstring[i] = 'C';\n\t\tif (string[i]\
    \ == 'd')\n\t\t\tstring[i] = 'D';\n\t\tif (string[i] == 'e')\n\t\t\tstring[i]\
    \ = 'E';\n\t\tif (string[i] == 'f')\n\t\t\tstring[i] = 'F';\n\t\tif (string[i]\
    \ == 'g')\n\t\t\tstring[i] = 'G';\n\t\tif (string[i] == 'h')\n\t\t\tstring[i]\
    \ = 'H';\n\t\tif (string[i] == 'i')\n\t\t\tstring[i] = 'I';\n\t\tif (string[i]\
    \ == 'j')\n\t\t\tstring[i] = 'J';\n\t\tif (string[i] == 'k')\n\t\t\tstring[i]\
    \ = 'K';\n\t\tif (string[i] == 'l')\n\t\t\tstring[i] = 'L';\n\t\tif (string[i]\
    \ == 'm')\n\t\t\tstring[i] = 'M';\n\t\tif (string[i] == 'n')\n\t\t\tstring[i]\
    \ = 'N';\n\t\tif (string[i] == 'o')\n\t\t\tstring[i] = 'O';\n\t\tif (string[i]\
    \ == 'p')\n\t\t\tstring[i] = 'P';\n\t\tif (string[i] == 'q')\n\t\t\tstring[i]\
    \ = 'Q';\n\t\tif (string[i] == 'r')\n\t\t\tstring[i] = 'R';\n\t\tif (string[i]\
    \ == 's')\n\t\t\tstring[i] = 'S';\n\t\tif (string[i] == 't')\n\t\t\tstring[i]\
    \ = 'T';\n\t\tif (string[i] == 'u')\n\t\t\tstring[i] = 'U';\n\t\tif (string[i]\
    \ == 'v')\n\t\t\tstring[i] = 'V';\n\t\tif (string[i] == 'w')\n\t\t\tstring[i]\
    \ = 'W';\n\t\tif (string[i] == 'x')\n\t\t\tstring[i] = 'X';\n\t\tif (string[i]\
    \ == 'y')\n\t\t\tstring[i] = 'Y';\n\t\tif (string[i] == 'z')\n\t\t\tstring[i]\
    \ = 'Z';\n\t\tif (string[i] == 'A')\n\t\t\tstring[i] = 'a';\n\t\tif (string[i]\
    \ == 'B')\n\t\t\tstring[i] = 'b';\n\t\tif (string[i] == 'C')\n\t\t\tstring[i]\
    \ = 'c';\n\t\tif (string[i] == 'D')\n\t\t\tstring[i] = 'd';\n\t\tif (string[i]\
    \ == 'E')\n\t\t\tstring[i] = 'e';\n\t\tif (string[i] == 'F')\n\t\t\tstring[i]\
    \ = 'f';\n\t\tif (string[i] == 'G')\n\t\t\tstring[i] = 'g';\n\t\tif (string[i]\
    \ == 'H')\n\t\t\tstring[i] = 'h';\n\t\tif (string[i] == 'I')\n\t\t\tstring[i]\
    \ = 'i';\n\t\tif (string[i] == 'J')\n\t\t\tstring[i] = 'j';\n\t\tif (string\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7sgmd5a.d(87): Error: found `unittest` when expecting `)`

    /tmp/tmpk7sgmd5a.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpk7sgmd5a.d(95): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7sgmd5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.replace(\" \", \"\").replaceAll(\"(?i)[a-z]\", \"\").replaceAll(\"(?i)[A-Z]\"\
    , \" \");\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gwzohs5.d(11): Error: no property `replace` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gwzohs5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if(string.length\
    \ == 0) \n        return \"\";\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegnxhq07.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegnxhq07.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor\
    \ (int i = 0; i < string.size(); i++)\n\t{\n\t\tif(string[i] == 'a')\n\t\t{\n\t\
    \t\tstring[i] = 'A';\n\t\t\tstring[i+1] = 'a';\n\t\t}\n\t\telse if(string[i] ==\
    \ 'A')\n\t\t{\n\t\t\tstring[i] = 'a';\n\t\t\tstring[i+1] = 'A';\n\t\t}\n\t\telse\
    \ if(string[i] == 'A')\n\t\t{\n\t\t\tstring[i] = 'a';\n\t\t\tstring[i+1] = 'A';\n\
    \t\t}\n\t}\n\treturn string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtyr6g70.d(11): Error: no property `size` for type `string`

    /tmp/tmpgtyr6g70.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpgtyr6g70.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)(i
    + 1)]`

    /tmp/tmpgtyr6g70.d(20): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpgtyr6g70.d(21): Error: cannot modify `immutable` expression `string[cast(ulong)(i
    + 1)]`

    /tmp/tmpgtyr6g70.d(25): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpgtyr6g70.d(26): Error: cannot modify `immutable` expression `string[cast(ulong)(i
    + 1)]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtyr6g70.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tauto\
    \ flip = string[string.length()-1];\n\tfor (auto c: string)\n\t{\n\t\tif(c ==\
    \ '_')\n\t\t\tc = flip;\n\t}\n\treturn string;\n}\nstring str_to_num(string str)\n\
    {\n\tbool is_float = false;\n\tif (str[0] == '_')\n\t{\n\t\tis_float = true;\n\
    \t\tstr = flip_case(str);\n\t}\n\tstringstream sstr;\n\tsstr << str;\n\tstring\
    \ num;\n\tsstr >> num;\n\tif (is_float)\n\t{\n\t\tdouble dval;\n\t\tif (sstr.fail())\n\
    \t\t\treturn num;\n\t\tsstr >> dval;\n\t\treturn std.doubleToString(dval);\n\t\
    }\n\treturn num;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzos6dhpl.d(12): Error: no identifier for declarator `c`

    /tmp/tmpzos6dhpl.d(12): Error: expression expected, not `:`

    /tmp/tmpzos6dhpl.d(12): Error: found `string` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzos6dhpl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    if\
    \ (string.empty()) \n        return string;\n    \n    foreach(char, string) \n\
    \    {\n        if (islower(string)) {\n            swap(string, string.size(),\
    \ string.size() - 1);\n        }\n        if (isupper(string)) {\n           \
    \ swap(string, string.size(), string.size() - 1);\n        }\n    }\n    \n  \
    \  return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsepqnlnp.d(14): Error: no identifier for declarator `char`

    /tmp/tmpsepqnlnp.d(14): Error: no identifier for declarator `string`

    /tmp/tmpsepqnlnp.d(14): Error: found `)` when expecting `;`

    /tmp/tmpsepqnlnp.d(24): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsepqnlnp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  stringstream\
    \ ss;\n  int length;\n  for(size_t i=0; i<string.length(); i++) {\n      char\
    \ c = string.at(i);\n      length = std.string.length(c);\n      if(length > 1)\
    \ {\n         ss << std.string.toUpper(c);\n         if(length == 2) {\n     \
    \       ss << std.string.toLower(c);\n         }\n      } else {\n         ss\
    \ << c;\n      }\n  }\n  return ss.str();\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7yuz5v7r.d(11): Error: undefined identifier `stringstream`

    /tmp/tmp7yuz5v7r.d(13): Error: no property `length` for type `string`

    /tmp/tmp7yuz5v7r.d(14): Error: no property `at` for type `string`

    /tmp/tmp7yuz5v7r.d(15): Error: undefined identifier `string` in package `std`

    /tmp/tmp7yuz5v7r.d(17): Error: undefined identifier `string` in package `std`

    /tmp/tmp7yuz5v7r.d(19): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7yuz5v7r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    \n    // First flip every char that's NOT a lower case letter\n\
    \    for(int i=0; i<string.length(); i++){\n        char c = string[i];\n    \
    \    \n        if(c<='Z'&&c>='a'){\n            result += toupper(c);\n      \
    \  }\n        else if(c>='A'&&c<='Z'){\n            result += tolower(c);\n  \
    \      }\n        else {\n            result += c;\n        }\n    }\n    \n \
    \   return result;\n}\n</code>\n<|/ a tags=c++,string,algorithm dscore=1 |>\n\
    <| a tags=c++,string,algorithm dscore=1 |>\nIn general case where string has length\
    \ n and all characters are ASCII, there are O(n) steps for flipping case, and\
    \ O(1) steps for checking if character is between A and Z. So, the complexity\
    \ is O(n + n).\nIn your specific case, your string has length <= 30, so it will\
    \ not affect the complexity. But in general case, where your string has length\
    \ N and all characters are non-ASCII (not even printable) character, the complexity\
    \ will increase. The complexity for checking if character is between A and Z is\
    \ O(logN) and for flipping case is O(N).\nAs mentioned in other answers, you could\
    \ use string library to implement the function from scratch, but I don't see the\
    \ need for that. If you implement the function in the way you did, it will take\
    \ about the same time complexity as O(n) anyway, unless you implement it with\
    \ a string library (std::string, std::map<char,char>, ...).\n<|/ a |>\n<| c |>\n\
    I like this explanation but I'm pretty sure the complexity is still O(n+n). Can\
    \ you prove it?\n<|/ c |>\n<| a tags=c++,string,algorithm dscore=0 |>\nSince string\
    \ is immutable in C++, you need to use some kind of character array and copy the\
    \ string into that. Below are two approaches you can use to flip the cases of\
    \ the characters.\nApproach 1\nUse std::map to store the characters with their\
    \ case mappings. Iterate over the string and copy the characters into the std::map\
    \ if they are not there in the map. After iterating over the string, you can iterate\
    \ over the std::map and copy the characters to an array.\n<code>\nunittest\n{\n\
    \    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n  \
    \  assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2zy6eat.d(30): Error: declaration expected, not `<`

    /tmp/tmpl2zy6eat.d(35): Error: unterminated character constant

    /tmp/tmpl2zy6eat.d(38): Error: unterminated character constant

    /tmp/tmpl2zy6eat.d(49): Error: declaration expected, not `assert`

    /tmp/tmpl2zy6eat.d(50): Error: declaration expected, not `assert`

    /tmp/tmpl2zy6eat.d(51): Error: declaration expected, not `assert`

    /tmp/tmpl2zy6eat.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2zy6eat.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    auto\
    \ len = string.length();\n    char temp;\n    for(int i = 0; i < len; i++)\n \
    \   {\n        if(string[i] >= 'A' && string[i] <= 'Z')\n        {\n         \
    \   temp = string[i];\n            string[i] = string[i] - 32;\n            string[i]\
    \ = string[i] + 'a';\n            string[i] = temp + 32;\n        }\n    }\n \
    \   return string;\n}\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0\
    \ tags=string,c++,algorithm |>\n<code>\n#include <string>\n#include <iostream>\n\
    #include <cctype>\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnx0we9fc.d(25): Error: declaration expected, not `<`

    /tmp/tmpnx0we9fc.d(36): Error: declaration expected, not `assert`

    /tmp/tmpnx0we9fc.d(37): Error: declaration expected, not `assert`

    /tmp/tmpnx0we9fc.d(38): Error: declaration expected, not `assert`

    /tmp/tmpnx0we9fc.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnx0we9fc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i=0;i<string.length();++i)\n        if(string[i]>='a' && string[i]<='z')\n \
    \           string[i]=string[i]^('A'-'a');\n        else if(string[i]>='A' &&\
    \ string[i]<='Z')\n            string[i]=string[i]^('a' - 'A');\n    return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp33_kwvl5.d(11): Error: no property `length` for type `string`

    /tmp/tmp33_kwvl5.d(13): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmp33_kwvl5.d(15): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp33_kwvl5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i = 0; i < string.length(); ++i)\n    {\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z')\n            string[i] = string[i] - ('a' - 'A');\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z')\n            string[i] = string[i] - ('A' - 'a');\n\
    \    }\n    return string;\n}\n</code>\n<|/ a |>\n<| a tags=c++,string,reverse\
    \ |>\n<code>\n#include <iostream>\n#include <string>\n#include <algorithm>\nusing\
    \ namespace std;\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ccczj7a.d(20): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ccczj7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\t\n\t\
    string result = \"\";\n\tfor (int i = 0; i < string.size(); ++i)\n\t{\n\t\tif\
    \ (string[i] >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tresult += string[i] - 'a'\
    \ + 'A';\n\t\t}\n\t\telse if (string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\
    \t\tresult += string[i] - 'A' + 'a';\n\t\t}\n\t\telse \n\t\t\tresult += string[i];\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n\
    \    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0qmdzw_m.d(12): Error: `string` is used as a type

    /tmp/tmp0qmdzw_m.d(13): Error: no property `size` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0qmdzw_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n\tfor(int\
    \ i = 0; i < string.length; ++i)\n\t{\n\t\tif(string[i] >= 'a' && string[i] <=\
    \ 'z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if(string[i]\
    \ >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t\
    }\n\t}\n\treturn string;\n}\n/*\n For a given string, flip lowercase characters\
    \ to uppercase and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n   \
    \ \"hELLO\"\n    \n*/\nstring flip_case_u(string string) \n{\n\tfor(int i = 0;\
    \ i < string.length; ++i)\n\t{\n\t\tif(string[i] >= 'a' && string[i] <= 'z')\n\
    \t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\telse if(string[i] >= 'A'\
    \ && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\
    \treturn string;\n}\n/*\n For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n \
    \   \n*/\nstring flip_case_l(string string) \n{\n\tfor(int i = 0; i < string.length;\
    \ ++i)\n\t{\n\t\tif(string[i] >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tstring[i]\
    \ = string[i] - 32;\n\t\t}\n\t\telse if(string[i] >= 'A' && string[i] <= 'Z')\n\
    \t\t{\n\t\t\tstring[i] = string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n}\n/*\n\
    \ For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string\
    \ string)\n{\n\tfor(int i = 0; i < string.length; ++i)\n\t{\n\t\tif(string[i]\
    \ >= 'a' && string[i] <= 'z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t\
    }\n\t\telse if(string[i] >= 'A' && string[i] <= 'Z')\n\t\t{\n\t\t\tstring[i] =\
    \ string[i] + 32;\n\t\t}\n\t}\n\treturn string;\n}\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case_u(string string) \n{\n\tfor(int\
    \ i = 0; i < string.length; ++i)\n\t{\n\t\tif(string[i] >= 'a' && string[i] <=\
    \ 'z')\n\t\t{\n\t\t\tstring[i] = string[i] - 32;\n\t\t}\n\t\t\nunittest\n{\n \
    \   alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n   \
    \ assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent\
    \ delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfah3jdz.d(102): Error: found `unittest` instead of statement

    /tmp/tmpqfah3jdz.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfah3jdz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ i = 0;\n  char c = string[i];\n  while(c != 0)\n  {\n    c = toupper(c); \n\
    \    i++;\n    if (i >= string.length) break;\n    c = string[i]; \n  }\n  return\
    \ string; \n}\n/*\n Given a string, remove the space between words, and lowercase\
    \ each letter.\n >>> remove_space(\"The quick brown fox jumped over the lazy dog.\"\
    )\n \"thequickbrownfoxjumpedoverthelazydog.\"\n \n */\nstring remove_space(string\
    \ string) \n{\n  int i = 0;\n  string newString;\n  \n  while(string[i] != 0)\n\
    \  {\n    if(string[i] == ' ' || string[i] == '.' || string[i] == '-' || string[i]\
    \ == ',' || string[i] == '?' || string[i] == '!' || string[i] == '-')\n    {\n\
    \      i++;\n    }\n    else\n    {\n      newString = newString + string[i];\n\
    \      i++;\n    }\n  }\n  return newString;\n}\nunittest\n{\n    alias candidate\
    \ = flip_case;\n\n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"\
    Hello!\") == \"hELLO!\");\n    assert(candidate(\"These violent delights have\
    \ violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdryj5xe.d(15): Error: undefined identifier `toupper`

    /tmp/tmpbdryj5xe.d(31): Error: `string` is used as a type

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdryj5xe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string\n            .swapcase()\n            .replace ('a', 'A')\n         \
    \   .replace ('b', 'B')\n            .replace ('c', 'C')\n            .replace\
    \ ('d', 'D')\n            .replace ('e', 'E')\n            .replace ('f', 'F')\n\
    \            .replace ('g', 'G')\n            .replace ('h', 'H')\n          \
    \  .replace ('i', 'I')\n            .replace ('j', 'J')\n            .replace\
    \ ('k', 'K')\n            .replace ('l', 'L')\n            .replace ('m', 'M')\n\
    \            .replace ('n', 'N')\n            .replace ('o', 'O')\n          \
    \  .replace ('p', 'P')\n            .replace ('q', 'Q')\n            .replace\
    \ ('r', 'R')\n            .replace ('s', 'S')\n            .replace ('t', 'T')\n\
    \            .replace ('u', 'U')\n            .replace ('v', 'V')\n          \
    \  .replace ('w', 'W')\n            .replace ('x', 'X')\n            .replace\
    \ ('y', 'Y')\n            .replace ('z', 'Z');\n}\n</code>\n<|/ a tags=c++ |>\n\
    <| c |>\nThis looks great, I'm going to try this out in a little while.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nIn case you just need to capitalize each character of\
    \ your string, you can do this:\n<code>\nstd::transform(s.begin(), s.end(), s.begin(),\
    \ ::toupper);\n</code>\n<|/ a tags=c++ |>\n<| c |>\nYou probably mean `std::transform`.\
    \ `std::toupper` doesn't work with unicode characters.\n<|/ c |>\n<| c |>\nThanks,\
    \ you're right, I forgot that `std::toupper()` doesn't work with Unicode characters.\n\
    <|/ c |>\n<| c |>\nThis works for my purposes, thank you! I didn't know about\
    \ this function.\n<|/ c |>\n<| a dscore=0 |>\nA simple approach is to copy the\
    \ string and swap each letter:\n<code>\nstring s = \"hello\";\nstring s2(s);\n\
    unittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") ==\
    \ \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptyo5ht3l.d(40): Error: declaration expected, not `<`

    /tmp/tmptyo5ht3l.d(43): Error: unterminated character constant

    /tmp/tmptyo5ht3l.d(49): Error: declaration expected, not `<`

    /tmp/tmptyo5ht3l.d(52): Error: unterminated character constant

    /tmp/tmptyo5ht3l.d(55): Error: unterminated character constant

    /tmp/tmptyo5ht3l.d(55): Error: unterminated character constant

    /tmp/tmptyo5ht3l.d(58): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyo5ht3l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for (auto c : string) {\n        if ((c >= 'A' && c <= 'Z')\
    \ || (c >= 'a' && c <= 'z')) {\n            result += (char)(c + 32);\n      \
    \  }\n        else {\n            result += c;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1afi1khf.d(12): Error: no identifier for declarator `c`

    /tmp/tmp1afi1khf.d(12): Error: expression expected, not `:`

    /tmp/tmp1afi1khf.d(12): Error: found `string` when expecting `;` following `for`
    condition

    /tmp/tmp1afi1khf.d(14): Error: C style cast illegal, use `cast(char)(c + 32)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1afi1khf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n  int\
    \ len = string.len();\n  for (int i = 0; i < len; i++)\n  {\n    char c = string[i];\n\
    \    if (c >= 'A' && c <= 'Z')\n      string[i] = c - ('a' - 'A');\n    else if\
    \ (c >= 'a' && c <= 'z')\n      string[i] = c + ('A' - 'a');\n  }\n  return string;\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmfwbkcd.d(11): Error: no property `len` for type `string`

    /tmp/tmpsmfwbkcd.d(16): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    /tmp/tmpsmfwbkcd.d(18): Error: cannot modify `immutable` expression `string[cast(ulong)i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmfwbkcd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n int length\
    \ = string.length();\n bool upperCase = true;\n for (int i = 0; i < length; ++i)\n\
    \ {\n  if (string[i] == 'a' || string[i] == 'A')\n  {\n   upperCase = false;\n\
    \  }\n  else if (string[i] >= 'A' && string[i] <= 'Z')\n  {\n   string[i] = (upperCase)\
    \ ? string[i] - 'A' + 'a' : string[i] + 'A' - 'a';\n  }\n  else if (string[i]\
    \ >= 'a' && string[i] <= 'z')\n  {\n   string[i] = (upperCase) ? string[i] - 'a'\
    \ + 'A' : string[i] + 'a' - 'A';\n  }\n }\n return string;\n}\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a |>\nHere's a general solution that also works for non-ascii\
    \ characters:\n<code>\nstring flip_case(string s)\n{\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        if(s[i] == 'a' || s[i] == 'A')\n            s[i] = s[i]\
    \ - 'a' + 'A' - 'A';\n        if(s[i] == 'B' || s[i] == 'b')\n            s[i]\
    \ = s[i] - 'B' + 'a' - 'A';\n        if(s[i] == 'c' || s[i] == 'C')\n        \
    \    s[i] = s[i] - 'c' + 'C' - 'C';\n        if(s[i] == 'd' || s[i] == 'D')\n\
    \            s[i] = s[i] - 'd' + 'D' - 'D';\n        if(s[i] == 'e' || s[i] ==\
    \ 'E')\n            s[i] = s[i] - 'e' + 'E' - 'E';\n        if(s[i] == 'f' ||\
    \ s[i] == 'F')\n            s[i] = s[i] - 'f' + 'F' - 'F';\n        if(s[i] ==\
    \ 'g' || s[i] == 'G')\n            s[i] = s[i] - 'g' + 'G' - 'G';\n        if(s[i]\
    \ == 'h' || s[i] == 'H')\n            s[i] = s[i] - 'h' + 'H' - 'H';\n       \
    \ if(s[i] == 'i' || s[i] == 'I')\n            s[i] = s[i] - 'i' + 'I' - 'I';\n\
    \        if(s[i] == 'j' || s[i] == 'J')\n            s[i] = s[i] - 'j' + 'J' -\
    \ 'J';\n        if(s[i] == 'k' || s[i] == 'K')\n            s[i] = s[i] - 'k'\
    \ + 'K' - 'K';\n        if(s[i] == 'l' || s[i] == 'L')\n            s[i] = s[i]\
    \ - 'l' + 'L' - 'L';\n        if(s[i] == 'm' || s[i] == 'M')\n            s[i]\
    \ = s[i] - 'm' + 'M' - 'M';\n        if(s[i] == 'n' || s[i] == 'N')\n        \
    \    s[i] = s[i] - 'n' + 'N' - 'N';\n        if(s[i] == 'o' || s[i]\nunittest\n\
    {\n    alias candidate = flip_case;\n\n    assert(candidate(\"\") == \"\");\n\
    \    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"These\
    \ violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4cwtdk5.d(30): Error: declaration expected, not `<`

    /tmp/tmpf4cwtdk5.d(33): Error: unterminated character constant

    /tmp/tmpf4cwtdk5.d(37): Error: no identifier for declarator `i`

    /tmp/tmpf4cwtdk5.d(37): Error: declaration expected, not `<`

    /tmp/tmpf4cwtdk5.d(37): Error: no identifier for declarator `i`

    /tmp/tmpf4cwtdk5.d(37): Error: declaration expected, not `++`

    /tmp/tmpf4cwtdk5.d(41): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(43): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(45): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(47): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(49): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(51): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(53): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(55): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(57): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(59): Error: declaration expected, not `if`

    /tmp/tmpf4cwtdk5.d(61): Error'
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    return\
    \ string.replaceAll(\"[a-z]\", \n                            toupper(tolower(string)));\n\
    }\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\"\
    ) == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvly22k8i.d(11): Error: no property `replaceAll` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvly22k8i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for(int\
    \ i=string.length()-1;i>=0;i--) \n    {\n        switch(string[i])\n        {\n\
    \            case 'a':\n            case 'e':\n            case 'i':\n       \
    \     case 'o':\n            case 'u':\n                string[i] = string[i].toUppercase();\n\
    \                break;\n            case 'A':\n            case 'E':\n      \
    \      case 'I':\n            case 'O':\n            case 'U':\n             \
    \   string[i] = string[i].toLowercase();\n                break;\n        }\n\
    \    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp182r4bro.d(11): Error: no property `length` for type `string`

    /tmp/tmp182r4bro.d(20): Error: no property `toUppercase` for type `immutable(char)`

    /tmp/tmp182r4bro.d(27): Error: no property `toLowercase` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp182r4bro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    string\
    \ result = \"\";\n    for (auto &c : string) \n    {\n        if (c == 'a') \n\
    \        {\n            c = 'A';\n        }\n        else if (c == 'A') \n   \
    \     {\n            c = 'a';\n        }\n        result += c;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = flip_case;\n\n    assert(candidate(\"\
    \") == \"\");\n    assert(candidate(\"Hello!\") == \"hELLO!\");\n    assert(candidate(\"\
    These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphi248nn2.d(12): Error: basic type expected, not `&`

    /tmp/tmphi248nn2.d(12): Error: no identifier for declarator `_error_`

    /tmp/tmphi248nn2.d(12): Error: found `:` when expecting `;` following `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi248nn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n For a given string, flip\
    \ lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case(\"\
    Hello\")\n    \"hELLO\"\n    \n*/\nstring flip_case(string string) \n{\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        char c = string.at(i);\n  \
    \      char u = std.toupper(c);\n        string temp = u;\n        string.at(i)\
    \ = temp;\n    }\n    return string;\n}\nunittest\n{\n    alias candidate = flip_case;\n\
    \n    assert(candidate(\"\") == \"\");\n    assert(candidate(\"Hello!\") == \"\
    hELLO!\");\n    assert(candidate(\"These violent delights have violent ends\"\
    ) == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrbgaerm.d(11): Error: no property `length` for type `string`

    /tmp/tmpgrbgaerm.d(12): Error: no property `at` for type `string`

    /tmp/tmpgrbgaerm.d(13): Error: undefined identifier `toupper` in package `std`

    /tmp/tmpgrbgaerm.d(14): Error: `string` is used as a type

    /tmp/tmpgrbgaerm.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgrbgaerm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164049
