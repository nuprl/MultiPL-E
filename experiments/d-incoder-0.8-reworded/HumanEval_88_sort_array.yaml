name: HumanEval_88_sort_array
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of non-negative\
  \ integers, return a cod of the given array after sorting,\n    you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n    or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n\n    Note:\n    * don't change the given array.\n\n  \
  \  Examples:\n    >>> sort_array([])\n    []\n    >>> sort_array([5L])\n    [5L]\n\
  \    >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L])\n    [0L, 1L, 2L, 3L, 4L, 5L]\n  \
  \  >>> sort_array([2L, 4L, 3L, 0L, 1L, 5L, 6L])\n    [6L, 5L, 4L, 3L, 2L, 1L, 0L]\n\
  \    \n*/\nlong[] sort_array(long[] array) \n"
tests: "unittest\n{\n    alias candidate = sort_array;\n\n    assert(candidate([])\
  \ == []);\n    assert(candidate([5L]) == [5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L]) == [0L, 1L, 2L, 3L, 4L, 5L]);\n    assert(candidate([2L, 4L, 3L,\
  \ 0L, 1L, 5L, 6L]) == [6L, 5L, 4L, 3L, 2L, 1L, 0L]);\n    assert(candidate([2L,\
  \ 1L]) == [1L, 2L]);\n    assert(candidate([15L, 42L, 87L, 32L, 11L, 0L]) == [0L,\
  \ 11L, 15L, 32L, 42L, 87L]);\n    assert(candidate([21L, 14L, 23L, 11L]) == [23L,\
  \ 21L, 14L, 11L]);\n}\nvoid main(){}"
completions: []
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
