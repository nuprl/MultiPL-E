language: d
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min,\
    \ max;\n    min = max = numbers[0];\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxq7903w2.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxq7903w2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (float) (numbers[i]/minimum(numbers));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplqnbdbqx.d(15): Error: C style cast illegal, use `cast(float)(numbers[i]
    / minimum(numbers))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplqnbdbqx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float min = float.MaxValue;\n  float max = float.MinValue;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2067m3m.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2067m3m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    // Your code here\n    float[] units = new float[numbers.length];\n\
    \    for (int i=0; i<numbers.length; i++) {\n        units[i] = numbers[i] / numbers.length;\n\
    \    }\n    return units;\n}\n</code>\n<|/ a |>\n<| c |>\nIt would also help if\
    \ you showed a sample output of what you'd want, and showed what you tried\n<|/\
    \ c |>\n<| c |>\nI updated the answer to show an example output\n<|/ c |>\n<|\
    \ c |>\nPlease see my updated answer, I hope it's more helpful and more robust\
    \ than what was proposed\n<|/ c |>\n<| c |>\nThe `map` function can be replaced\
    \ by `map!(float)`. Also, `numbers` should be an array of `float`.\n<|/ c |>\n\
    <| a tags=arrays,dart,flutter dscore=0 |>\n<code>\nvar numbers = [2.2, 1.1, 3.3,\
    \ 4.4, 5.5, 6.6, 7.7, 8.8, 9.9];\nvar units = numbers.map((e) => e / numbers.length).toList();\n\
    </code>\n<|/ a |>\n<| a tags=arrays,dart,flutter |>\n<code>\nList<double> getRidgeUnits(List<double>\
    \ numbers) {\n  return numbers.map((e) => e / numbers.length).toList();\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcf485u5v.d(19): Error: declaration expected, not `<`

    /tmp/tmpcf485u5v.d(22): Error: unterminated character constant

    /tmp/tmpcf485u5v.d(28): Error: unterminated character constant

    /tmp/tmpcf485u5v.d(37): Error: declaration expected, not `<`

    /tmp/tmpcf485u5v.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcf485u5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    for(int i=0; i<numbers.length; i++)\n    {\n        if(numbers[i]\
    \ > largest_number)\n        {\n            largest_number = numbers[i];\n   \
    \     }\n        if(numbers[i] < smallest_number)\n        {\n            smallest_number\
    \ = numbers[i];\n        }\n    }\n    float scale = (largest_number-smallest_number)\
    \ / (numbers.length-1);\n    for(int i=0; i<numbers.length; i++)\n    {\n    \
    \    numbers[i] = numbers[i] - smallest_number + scale;\n    }\n    return numbers;\n\
    }\n/*\n Given an array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0])\n    [0.0,\
    \ 0.5, 0.75, 1.0, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, double\
    \ scale) \n{\n    float smallest_number = numbers[0];\n    float largest_number\
    \ = numbers[0];\n    for(int i=0; i<numbers.length; i++)\n    {\n        if(numbers[i]\
    \ > largest_number)\n        {\n            largest_number = numbers[i];\n   \
    \     }\n        if(numbers[i] < smallest_number)\n        {\n            smallest_number\
    \ = numbers[i];\n        }\n    }\n    float final_scale = scale * 1.0/(largest_number-smallest_number);\n\
    \    for(int i=0; i<numbers.length; i++)\n    {\n        numbers[i] = numbers[i]\
    \ - smallest_number + final_scale;\n    }\n    return numbers;\n}\n/*\n Given\
    \ array of numbers (of at least two elements), apply a log transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_log([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.1, 0.2, 0.3, 0.4]\n\
    \    \n*/\nfloat[] rescale_to_log(float[] numbers) \n{\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for(int i=0; i<numbers.length;\
    \ i++)\n    {\n        if(numbers[i] > largest_number)\n        {\n          \
    \  largest_number = numbers[i];\n        }\n        if(numbers[i] < smallest_number)\n\
    \        {\n            smallest_number = numbers[i];\n        }\n    }\n    float\
    \ scale = (largest_number-smallest_number) / (numbers.length-1);\n    for(int\
    \ i=0; i<numbers.length; i++)\n    {\n        numbers[i] = log((numbers[i]-smallest_number)\
    \ / scale);\n    }\n    return numbers;\n}\n/*\n Given array of numbers (of at\
    \ least two elements), apply a log transform to that array,\n    such that the\
    \ \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl79bedfg.d(90): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl79bedfg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return Arrays.stream(numbers).map(Math::min).mapToFloat(Math::max).collect(Collectors.toList());\n\
    }\n</code>\n<|/ a tags=functional-programming,java,arrays |>\n<| a tags=functional-programming,java,arrays\
    \ |>\n<code>\npublic static float[] rescale(float[] arr){\n    float min = Float.MAX_VALUE;\n\
    \    float max = Float.MIN_VALUE;\n    for(float f: arr){\n        if(f < min)\
    \ min = f;\n        if(f > max) max = f;\n    }\n    float scale = 1.0-(max-min)/arr.length;\n\
    \    float[] resulArr = new float[arr.length];\n    for(float f: arr){\n     \
    \   resulArr[i] = (f - min)*scale + min;\n    }\n    return resulArr;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=functional-programming,java,arrays |>\n<code>\npublic\
    \ static void main(String[] args) {\n        float[] numbers = new float[] {10,\
    \ 10, 10, 10};\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbeakrsl1.d(12): Error: found `:` when expecting `,`

    /tmp/tmpbeakrsl1.d(12): Error: expression expected, not `:`

    /tmp/tmpbeakrsl1.d(12): Error: found `min` when expecting `,`

    /tmp/tmpbeakrsl1.d(12): Error: found `:` when expecting `,`

    /tmp/tmpbeakrsl1.d(12): Error: expression expected, not `:`

    /tmp/tmpbeakrsl1.d(12): Error: found `max` when expecting `,`

    /tmp/tmpbeakrsl1.d(14): Error: declaration expected, not `<`

    /tmp/tmpbeakrsl1.d(21): Error: declaration expected, not `for`

    /tmp/tmpbeakrsl1.d(23): Error: declaration expected, not `if`

    /tmp/tmpbeakrsl1.d(24): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbeakrsl1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] ret = new float[numbers.length];\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++) \n    {\n        if(numbers[i] < min)\n            min = numbers[i];\n\
    \        if(numbers[i] > max)\n            max = numbers[i];\n    }\n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        ret[i] = (numbers[i] - min)\
    \ / (max - min);\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] output = new float[numbers.length];\n\tfloat largest\
    \ = numbers[0];\n\tfloat smallest = numbers[0];\n\tfloat scale = 1.0;\n\tfor (int\
    \ i = 0; i < numbers.length; i++) \n\t{\n\t\tif (numbers[i] > largest)\n\t\t\t\
    largest = numbers[i];\n\t\tif (numbers[i] < smallest)\n\t\t\tsmallest = numbers[i];\n\
    \t}\n\tfloat range = largest-smallest;\n\tfloat offset = smallest - range/2.0f;\n\
    \tfor (int i = 0; i < numbers.length; i++) \n\t{\n\t\toutput[i] = (numbers[i]\
    \ - offset) / range;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv81b5hnn.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x429165]

    ??:? void tmpv81b5hnn.__unittest_L31_C1() [0x428a26]

    ??:? void tmpv81b5hnn.__modtest() [0x428ee4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d58f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c422]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4316ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431b5c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431639]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3f9]

    ??:? runModuleUnitTests [0x42d365]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429628]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int maxIndex = numbers.length - 1;\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    float range = max - min;\n    float length =\
    \ numbers[maxIndex] - min;\n    float newMax = min + range * length/numbers.length;\n\
    \    float newMin = newMax - range;\n    \n    float[] newNumbers = new float[numbers.length];\n\
    \    for (int i = 0; i < newNumbers.length; i++)\n    {\n        newNumbers[i]\
    \ = ((numbers[i] - min) * newMax) / range;\n    }\n    return newNumbers;\n}\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvamctsn.d(12): Error: cannot implicitly convert expression `numbers.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvamctsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = float.MinValue;\n    float max = float.MaxValue;\n\
    \    float range = 0;\n    foreach (float x in numbers) {\n        if (x<min)\
    \ min=x;\n        if (x>max) max=x;\n        range += x;\n    }\n    float scale\
    \ = 1.f / range;\n    foreach (float x in numbers) x *= scale;\n    float[] res\
    \ = new float[numbers.Length];\n    foreach (float x in numbers) res[numbers.Length\
    \ - 1 - Array.IndexOf(res, x)] = x;\n    return res;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nI got this to work\n<code>\nfloat [] myArray = new float[size];\n\
    float min = float.MaxValue;\nfloat max = float.MinValue;\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkm3xytw1.d(15): Error: found `in` when expecting `;`

    /tmp/tmpkm3xytw1.d(21): Error: found `in` when expecting `;`

    /tmp/tmpkm3xytw1.d(23): Error: found `in` when expecting `;`

    /tmp/tmpkm3xytw1.d(26): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkm3xytw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for(int i\
    \ = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i] - min(numbers))\
    \ / (max(numbers) - min(numbers));\n    }\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\nAnother approach using Java 8 and Streams:\n<code>\ndouble[]\
    \ result = \n    Arrays.stream(numbers).boxed().flatMap( x ->\n        IntStream.range(0,\
    \ numbers.length).map( i -> Math.round(x * (numbers.length - i - 1)) / numbers.length\
    \ ).boxed() ).toArray();\n</code>\nA bit simpler to understand than the previous\
    \ answers, I guess.\n<|/ a tags=java,algorithm,arrays dscore=3 |>\n<| a tags=java,algorithm,arrays\
    \ |>\n<code>\ndouble [] arr = new double [] {12.1, 12.5, 13.3, 13.9, 14.2, 14.4,\
    \ 14.6, 14.9, 15.1, 15.4, 15.7, 16.6, 17.2, 18.2, 20.1, 21.8, 21.8, 22.7, 23.2,\
    \ 25.3, 27.3, 28.8, 29.1, 30.1, 31.8, 33.4, 34.7, 35.3, 37.1, 37.5, 39.1, 40.1,\
    \ 41.9, 44.4, 45.9, 47.3, 48.9, 49.3, 50.2, 52.1, 54.4, 55.9, 56.2, 57.3, 58.1,\
    \ 60.0, 61.6, 63.4, 64.9, 65.2, 66.2, 68.2, 71.2, 72.4, 74.2, 75.3, 77.2, 78.6,\
    \ 80.7, 82.4, 83.4, 86.1, 87.2, 89.2, 91.2, 92.6, 94.7, 95.8, 98.4, 100.1, 100.8,\
    \ 101.3, 102.2, 104.6, 105.5, 107.1, 107.8, 109.5, 110.1, 110.9, 112.2, 114.1,\
    \ 115.3, 116.1, 117.6, 118.4, 120.9, 122.2, 122.8, 124.1, 124.7, 125.2, 125.7,\
    \ 126.2, 126.6, 127.4, 129.1, 130.6, 131.7, 132.4, 133.2, 135.5, 136.7, 137.2,\
    \ 138.3, 140.3, 142.8, 145.2, 147.4, 148.8, 150.2, 151.4, 152.9, 153.7, 155.4,\
    \ 156.6, 157.9, 159.9, 162.6, 165.8, 167.3, 169.1, 170.5, 171.7, 173.3, 174.2,\
    \ 175.7, 176.4, 177.\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu9fwnhw0.d(19): Error: declaration expected, not `<`

    /tmp/tmpu9fwnhw0.d(27): Error: declaration expected, not `<`

    /tmp/tmpu9fwnhw0.d(37): Error: declaration expected, not `assert`

    /tmp/tmpu9fwnhw0.d(38): Error: declaration expected, not `assert`

    /tmp/tmpu9fwnhw0.d(39): Error: declaration expected, not `assert`

    /tmp/tmpu9fwnhw0.d(40): Error: declaration expected, not `assert`

    /tmp/tmpu9fwnhw0.d(41): Error: declaration expected, not `assert`

    /tmp/tmpu9fwnhw0.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu9fwnhw0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length -1;\n    float[] result = new float[n];\n\
    \    \n    float smallest = numbers[0];\n    float largest = numbers[n];\n   \
    \ float rescale = (largest - smallest) / (n - 1);\n    float rescaled = 0;\n \
    \   float i = 0;\n    \n    for(i = 0; i < n; i++)\n    {\n        rescaled =\
    \ rescaled + numbers[i] * rescale;\n        \n        if(rescaled < smallest)\n\
    \        {\n            rescaled = smallest + (largest - smallest) / (n - 1);\n\
    \        }\n        if(rescaled > largest)\n        {\n            rescaled =\
    \ largest - (smallest - largest) / (n - 1);\n        }\n        result[i] = rescaled;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87kcukbp.d(12): Error: cannot implicitly convert expression `numbers.length
    - 1LU` of type `ulong` to `int`

    /tmp/tmp87kcukbp.d(23): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    /tmp/tmp87kcukbp.d(33): Error: cannot implicitly convert expression `i` of type
    `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87kcukbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    int min\
    \ = min(numbers);\n    int max = max(numbers);\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7sa4jlv.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7sa4jlv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result=new float[numbers.length];\n    std.log(\"\
    rescale_to_unit start\");\n    std.log(\"numbers size is \" + numbers.length);\n\
    \    std.log(\"number size is \" + numbers[0]);\n    float sum=std.math.sum(numbers);\n\
    \    std.log(\"sum is  \" + sum);\n    for(int i=0; i<numbers.length; i++)\n \
    \   {\n        result[i]=numbers[i]/sum;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs4eh0nh.d(13): Error: undefined identifier `log` in package `std`

    /tmp/tmpcs4eh0nh.d(14): Error: undefined identifier `log` in package `std`

    /tmp/tmpcs4eh0nh.d(15): Error: undefined identifier `log` in package `std`

    /tmp/tmpcs4eh0nh.d(16): Error: undefined identifier `sum` in module `std.math`

    /tmp/tmpcs4eh0nh.d(17): Error: undefined identifier `log` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs4eh0nh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    // If there is only one number in the array then make it a\
    \ unit array\n    if (numbers.length <= 1) return numbers;\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz09vueod.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz09vueod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float total = 0;\n    int n = numbers.length;\n    for (int\
    \ i = 0; i < n; ++i)\n        total += numbers[i];\n    float scale = 1.0f / total;\n\
    \    for (int i = 0; i < n; ++i)\n        numbers[i] *= scale;\n    return numbers;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxvyx33h6.d(13): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxvyx33h6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2)\n    {\n        return numbers;\n\
    \    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpotdzatk9.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpotdzatk9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    final float[] results = new float[numbers.length];\n    \n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        results[i] = numbers[i]\
    \ / max(numbers);\n    }\n    \n    return results;\n}\n</code>\n<|/ a tags=arrays,arraylist,java\
    \ |>\n<| c |>\ni believe it does. try it on your example. it gives me [0.0, 0.25,\
    \ 0.5, 0.75, 1.0] as an answer. and that seems like what you are looking for.\
    \ what do you mean by \"not work\"?\n<|/ c |>\n<| c |>\nSorry for the misunderstanding!\
    \ It works for me but only when there's a number with only 1 digit between 1 and\
    \ 9. As soon as it has a number like 10.2 or 12.2 it gives me a wrong answer.\
    \ \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptnr3m69k.d(21): Error: declaration expected, not `<`

    /tmp/tmptnr3m69k.d(27): Error: unterminated character constant

    /tmp/tmptnr3m69k.d(32): Error: declaration expected, not `assert`

    /tmp/tmptnr3m69k.d(33): Error: declaration expected, not `assert`

    /tmp/tmptnr3m69k.d(34): Error: declaration expected, not `assert`

    /tmp/tmptnr3m69k.d(35): Error: declaration expected, not `assert`

    /tmp/tmptnr3m69k.d(36): Error: declaration expected, not `assert`

    /tmp/tmptnr3m69k.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnr3m69k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float scale = 1;\n    int minIndex = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = 0; i < numbers.length; ++i) {\n        if (numbers[i]\
    \ < numbers[minIndex]) {\n            minIndex = i;\n        }\n        if (numbers[i]\
    \ > numbers[maxIndex]) {\n            maxIndex = i;\n        }\n    }\n    if\
    \ (maxIndex - minIndex > 1) {\n        float rangeToNextElement = numbers[maxIndex]\
    \ - numbers[minIndex];\n        int newMinIndex = minIndex + (int)((numbers[maxIndex]\
    \ - numbers[minIndex]) / 2.0f);\n        int newMaxIndex = newMinIndex + rangeToNextElement;\n\
    \        scale = float.intBitsToFloat(Math.log((float)(maxIndex + 1)));\n    \
    \    float scaleInt = scale;\n        if (scale == 0.0f) {\n            scaleInt\
    \ = 1;\n        }\n        float delta = (numbers[newMinIndex] - numbers[minIndex])\
    \ * scaleInt;\n        numbers[minIndex] = numbers[minIndex] - delta;\n      \
    \  numbers[maxIndex] = numbers[maxIndex] + delta;\n    }\n    float min = (float)(minIndex);\n\
    \    float max = (float)(maxIndex);\n    float delta = (max - min);\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        result[i] = numbers[i] - min;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponaniajy.d(25): Error: C style cast illegal, use `cast(int)((numbers[maxIndex]
    - numbers[minIndex]) / 2.00000F)`

    /tmp/tmponaniajy.d(27): Error: C style cast illegal, use `cast(float)(maxIndex
    + 1)`

    /tmp/tmponaniajy.d(36): Error: C style cast illegal, use `cast(float)minIndex`

    /tmp/tmponaniajy.d(37): Error: C style cast illegal, use `cast(float)maxIndex`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmponaniajy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if (numbers.length <= 1) {\n    numbers[0] = numbers[1];\n \
    \   return numbers;\n  }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6a6n9qlf.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6a6n9qlf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if(numbers.length < 2) return null;\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(float x : numbers) {\n        if(min > x)\
    \ min = x;\n        if(max < x) max = x;\n    }\n    float scale = (max-min)/float.max;\n\
    \    float [] result = new float[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i]/scale;\n    }\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=1 |>\nFor me this works too:\n<code>\npublic static\
    \ double[] Rescale(double[] numbers, double rangeMin, double rangeMax)\n{\n  \
    \  var newRange = rangeMax - rangeMin;\n    var newNumbers = new double[numbers.Length];\n\
    \    double minValue = numbers[0];\n    double maxValue = numbers[0];\n    double\
    \ newRangeValue = 0;\n    for (int i = 0; i < numbers.Length; i++)\n    {\n  \
    \      newNumbers[i] = numbers[i] / newRange;\n        maxValue = Math.Max(maxValue,\
    \ numbers[i]);\n        minValue = Math.Min(minValue, numbers[i]);\n        newRangeValue\
    \ = newRange;\n    }\n    return newNumbers;\n}\n</code>\n<|/ a tags=c#,linear-algebra\
    \ |>\n<| a |>\nA more robust solution to deal with edge cases would be:\n<code>\n\
    public static double[] Rescale(double[] numbers, double min, double max)\n{\n\
    \    var newMin = double.MaxValue;\n    var newMax = double.MinValue;\n    var\
    \ newRange = max - min;\n    var newNumbers = new double[numbers.Length];\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp81iakfmx.d(15): Error: semicolon expected, not `:`

    /tmp/tmp81iakfmx.d(15): Error: expression expected, not `:`

    /tmp/tmp81iakfmx.d(15): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp81iakfmx.d(26): Error: declaration expected, not `<`

    /tmp/tmp81iakfmx.d(38): Error: declaration expected, not `for`

    /tmp/tmp81iakfmx.d(38): Error: no identifier for declarator `i`

    /tmp/tmp81iakfmx.d(38): Error: declaration expected, not `<`

    /tmp/tmp81iakfmx.d(38): Error: no identifier for declarator `i`

    /tmp/tmp81iakfmx.d(38): Error: declaration expected, not `++`

    /tmp/tmp81iakfmx.d(41): Error: no identifier for declarator `maxValue`

    /tmp/tmp81iakfmx.d(41): Error: declaration expected, not `=`

    /tmp/tmp81iakfmx.d(42): Error: no identifier for declarator `minValue`

    /tmp/tmp81iakfmx.d(42): Error: declaration expected, not `=`

    /tmp/tmp81iakfmx.d(43): Error: no identifier for declarator `newRangeValue`

    /tmp/tmp81iakfmx.d(43): Error: declaration expected, not `=`

    /tmp/tmp81iakfmx.d(44): Error: unreco'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if(numbers.length < 2) \n    {\n        throw new Exception(\"\
    rescale_to_unit expects an array of at least 2 elements\");\n    }\n    \n   \
    \ float[] results = new float[numbers.length];\n    \n    for(int i = 0; i < numbers.length;\
    \ i++) \n    {\n        results[i] = float((numbers[i]) / std.math.max(numbers[i]));\n\
    \    }\n    return results;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([-1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    [-0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float[] limits) \n{\n    if(numbers.length < 2) \n    {\n        throw\
    \ new Exception(\"rescale_to_unit expects an array of at least 2 elements\");\n\
    \    }\n    \n    float[] results = new float[numbers.length];\n    \n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        results[i] = float((numbers[i])\
    \ / std.math.max(numbers[i], limits[i]));\n    }\n    return results;\n}\n/*\n\
    \ Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([-1.0, 2.0, 3.0, 4.0, 5.0])\n    [-0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float[][]\
    \ limits) \n{\n    if(numbers.length < 2) \n    {\n        throw new Exception(\"\
    rescale_to_unit expects an array of at least 2 elements\");\n    }\n    \n   \
    \ float[] results = new float[numbers.length];\n    \n    for(int i = 0; i < numbers.length;\
    \ i++) \n    {\n        results[i] = float((numbers[i]) / std.math.max(numbers[i],\
    \ limits[i][0]));\n    }\n    return results;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([-1.0, 2.0, 3.0, 4.0, 5.0])\n    [-0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers, float[][] limits, float[][]\
    \ centers) \n{\n    if(numbers.length < 2) \n    {\n        throw new Exception(\"\
    rescale_to_unit expects an array of at least 2 elements\");\n    }\n    \n   \
    \ float[] results = new float[numbers.length];\n    \n    for(int i = 0; i < numbers.length\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6t81rur_.d(86): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmp6t81rur_.d(96): Error: found `void` when expecting `)`

    /tmp/tmp6t81rur_.d(96): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6t81rur_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double min = Math.min(numbers[0], numbers[1]);\n    double\
    \ max = Math.max(numbers[0], numbers[1]);\n    double range = max - min;\n   \
    \ double scale = (range < 0.00000001) ? 0.00000001f / range : range;\n    numbers[0]\
    \ = (float)((numbers[0] - min) * scale);\n    numbers[1] = (float)((numbers[1]\
    \ - min) * scale);\n    return numbers;\n}\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5g4ypegz.d(16): Error: C style cast illegal, use `cast(float)((numbers[0]
    - min) * scale)`

    /tmp/tmp5g4ypegz.d(17): Error: C style cast illegal, use `cast(float)((numbers[1]
    - min) * scale)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5g4ypegz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    int minValue\
    \ = min(numbers);\n    int maxValue = max(numbers);\n    float scale = float(maxValue\
    \ - minValue) / (float)(maxValue + 1.0f);\n    for (int i = 0; i < results.length;\
    \ i++)\n    {\n        results[i] = (float)(numbers[i] - minValue) * scale;\n\
    \    }\n    return results;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI really\
    \ don't understand how this would be any better in terms of performance.\n<|/\
    \ c |>\n<| c |>\nIt is, and I do think it's better than my implementation. I'm\
    \ not saying this isn't a good answer, I just think it could be improved.\n<|/\
    \ c |>\n<| a |>\nI would say that it is an improvement since you can avoid a loop\
    \ where you do one calculation and then compare that value to the rest of each\
    \ array.\nIf you have a list of 100 numbers, your algorithm will calculate 100\
    \ times the max and the min and then compare all elements with those.\nThis algorithm\
    \ would only calculate once.\n<|/ a tags=performance,c# dscore=2 |>\n<| a |>\n\
    I think this would work faster\n<code>\nfloat[] numbers = new float[5];\nnumbers[0]\
    \ = 2f;\nnumbers[1] = 3f;\nnumbers[2] = 4f;\nnumbers[3] = 1f;\nnumbers[4] = 3f;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxkm2dpme.d(15): Error: C style cast illegal, use `cast(float)(maxValue
    + 1.00000F)`

    /tmp/tmpxkm2dpme.d(18): Error: C style cast illegal, use `cast(float)(numbers[i]
    - minValue)`

    /tmp/tmpxkm2dpme.d(22): Error: declaration expected, not `<`

    /tmp/tmpxkm2dpme.d(25): Error: unterminated character constant

    /tmp/tmpxkm2dpme.d(28): Error: unterminated character constant

    /tmp/tmpxkm2dpme.d(28): Error: unterminated character constant

    /tmp/tmpxkm2dpme.d(28): Error: unterminated character constant

    /tmp/tmpxkm2dpme.d(39): Error: no identifier for declarator `numbers[0]`

    /tmp/tmpxkm2dpme.d(39): Error: declaration expected, not `=`

    /tmp/tmpxkm2dpme.d(40): Error: no identifier for declarator `numbers[1]`

    /tmp/tmpxkm2dpme.d(40): Error: declaration expected, not `=`

    /tmp/tmpxkm2dpme.d(41): Error: no identifier for declarator `numbers[2]`

    /tmp/tmpxkm2dpme.d(41): Error: declaration expected, not `=`

    /tmp/tmpxkm2dpme.d(42): Error: no identifier for declarator `numbers[3]`

    /tmp/tmpxkm2dpme.d(42): Error: declaration expecte'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float xMin, xMax;\n    float yMin, yMax;\n    xMin = numbers[0];\n\
    \    xMax = numbers[0];\n    yMin = numbers[0];\n    yMax = numbers[0];\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        xMin = xMin > numbers[i] ? xMin\
    \ : numbers[i];\n        xMax = xMax < numbers[i] ? xMax : numbers[i];\n     \
    \   yMin = yMin > numbers[i] ? yMin : numbers[i];\n        yMax = yMax < numbers[i]\
    \ ? yMax : numbers[i];\n    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpco9e6w6h.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpco9e6w6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tassert(numbers.length >= 2);\n\tfloat min = numbers[0];\n\t\
    float max = numbers[0];\n\tfor (int i = 1; i < numbers.length; i++) {\n\t\tmin\
    \ = min(min, numbers[i]);\n\t\tmax = max(max, numbers[i]);\n\t}\n\t\n\tfloat range\
    \ = max - min;\n\tfloat scale = (float) 1.0 / range;\n\tfor (int i = 0; i < numbers.length;\
    \ i++) {\n\t\tnumbers[i] *= scale;\n\t}\n\treturn numbers;\n}\nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplaty3x0k.d(21): Error: C style cast illegal, use `cast(float)1.00000`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaty3x0k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var smallest = numbers[0];\n    var largest = numbers[0];\n\
    \    for(var i = 1; i < numbers.length; i++) {\n        if(numbers[i] > largest)\
    \ {\n            largest = numbers[i];\n        } else if(numbers[i] < smallest)\
    \ {\n            smallest = numbers[i];\n        }\n    }\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; i++) {\n\
    \        result[i] = numbers[i] - smallest;\n        result[i] *= (largest-smallest)\
    \ / (numbers[i] - smallest);\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkk9c0xii.d(12): Error: undefined identifier `var`

    /tmp/tmpkk9c0xii.d(13): Error: undefined identifier `var`

    /tmp/tmpkk9c0xii.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkk9c0xii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tvar min = float.MaxValue;\n\tvar max = float.MinValue;\n\tfor\
    \ (var i = 0; i < numbers.Length; i++)\n\t{\n\t\tif (numbers[i] < min)\n\t\t{\n\
    \t\t\tmin = numbers[i];\n\t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\t\t\
    max = numbers[i];\n\t\t}\n\t}\n\treturn numbers.map(a => a / max - min).filter(a\
    \ => a > 0.01).map(a => (a / min - 1.0) * 2.0).Where(a => a >= 0.0).ToArray();\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp44o21hiy.d(12): Error: undefined identifier `var`

    /tmp/tmp44o21hiy.d(12): Error: no property `MaxValue` for type `float`

    /tmp/tmp44o21hiy.d(13): Error: undefined identifier `var`

    /tmp/tmp44o21hiy.d(13): Error: no property `MinValue` for type `float`

    /tmp/tmp44o21hiy.d(14): Error: undefined identifier `var`

    /tmp/tmp44o21hiy.d(14): Error: no property `Length` for type `float[]`

    /tmp/tmp44o21hiy.d(25): Error: no property `map` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44o21hiy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat min = float.MAX_VALUE;\n\tfloat max = float.MIN_VALUE;\n\
    \tfloat sum = 0;\n\tfloat num = 0;\n\tint count = 0;\n\tfor (float x : numbers)\n\
    \t{\n\t\tmin = Math.min(min, x);\n\t\tmax = Math.max(max, x);\n\t\tsum += x;\n\
    \t\tnum++;\n\t}\n\tif (num == 0)\n\t\treturn numbers;\n\tfloat[] ret = new float[num];\n\
    \tint i = 0;\n\tfor (float x : numbers)\n\t{\n\t\tfloat scale = ((x - min) / \n\
    \t\t\t(max - min));\n\t\tret[i++] = scale;\n\t}\n\treturn ret;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldaexx7p.d(17): Error: semicolon expected, not `:`

    /tmp/tmpldaexx7p.d(17): Error: expression expected, not `:`

    /tmp/tmpldaexx7p.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpldaexx7p.d(28): Error: semicolon expected, not `:`

    /tmp/tmpldaexx7p.d(28): Error: expression expected, not `:`

    /tmp/tmpldaexx7p.d(28): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldaexx7p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] rescaled = new float[numbers.length];\n    std.sort(numbers);\n\
    \    float sum = 0;\n    for(int i = 0; i < numbers.length; ++i) \n        rescaled[i]\
    \ = (numbers[i] - sum) / sum;\n    return rescaled;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfiyxmi0.d(13): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfiyxmi0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    int i =\
    \ 0;\n    float min = numbers[0], max = numbers[0];\n    \n    for(; i < numbers.length;\
    \ ++i)\n    {\n        if(min > numbers[i]) { min = numbers[i]; }\n        if(max\
    \ < numbers[i]) { max = numbers[i]; }\n    }\n    \n    for(; i < numbers.length;\
    \ ++i)\n    {\n        results[i] = (numbers[i] - min) / (max - min);\n    }\n\
    \    return results;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr7spl9xs.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x42912d]

    ??:? void tmpr7spl9xs.__unittest_L28_C1() [0x4289ee]

    ??:? void tmpr7spl9xs.__modtest() [0x428eac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d557]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c3ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431675]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431b24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431601]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3c1]

    ??:? runModuleUnitTests [0x42d32d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295f0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    // The first value is an index into `numbers` where the first\
    \ input number will \n    // be placed, and the last will be the largest\n   \
    \ int minIdx = 0, maxIdx = numbers.length - 1;\n    float minValue = numbers[minIdx];\n\
    \    float maxValue = numbers[maxIdx];\n    // The next two lines do the actual\
    \ rescaling.\n    // Remember that `minValue` and `maxValue` are `float` numbers;\
    \ the division\n    // `maxValue - minValue` produces a `float` result, so the\
    \ result is also\n    // a `float`.  All we need to do is multiply `minValue`\
    \ by `maxValue`\n    // and add `minValue`.\n    float[] rescaled = new float[numbers.length];\n\
    \    rescaled[minIdx] = (float) (minValue * maxValue);\n    rescaled[maxIdx] =\
    \ (float) (maxValue);\n    return rescaled;\n}\n</code>\n<|/ a |>\n<| a tags=java,arrays\
    \ |>\n<code>\n//Function to normalize an array of numbers (of at least two elements)\
    \ between 0 and 1 \npublic static float[] normalize(float[] numbers) {\n    int\
    \ minIdx = 0, maxIdx = numbers.length - 1;\n    float minValue = numbers[minIdx];\n\
    \    float maxValue = numbers[maxIdx];\n    // The next two lines do the actual\
    \ rescaling.\n    // Remember that `minValue` and `maxValue` are `float` numbers;\
    \ the division\n    // `maxValue - minValue` produces a `float` result, so the\
    \ result is also\n    // a `float`.  All we need to do is multiply `minValue`\
    \ by `maxValue`\n    // and add `minValue`.\n    float[] rescaled = new float[numbers.length];\n\
    \    rescaled[minIdx] = (float) (minValue * maxValue);\n    rescaled[maxIdx] =\
    \ (float) (maxValue);\n    return rescaled;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWelcome to SO! While this code may answer the question, providing additional\
    \ context regarding\_how\_and/or\_why\_it solves the problem would improve the\
    \ answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\npackage com.example;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2r3fq2cq.d(23): Error: C style cast illegal, use `cast(float)(minValue
    * maxValue)`

    /tmp/tmp2r3fq2cq.d(24): Error: C style cast illegal, use `cast(float)maxValue`

    /tmp/tmp2r3fq2cq.d(27): Error: declaration expected, not `<`

    /tmp/tmp2r3fq2cq.d(42): Error: no identifier for declarator `rescaled[minIdx]`

    /tmp/tmp2r3fq2cq.d(42): Error: declaration expected, not `=`

    /tmp/tmp2r3fq2cq.d(43): Error: no identifier for declarator `rescaled[maxIdx]`

    /tmp/tmp2r3fq2cq.d(43): Error: declaration expected, not `=`

    /tmp/tmp2r3fq2cq.d(44): Error: declaration expected, not `return`

    /tmp/tmp2r3fq2cq.d(45): Error: unrecognized declaration

    /tmp/tmp2r3fq2cq.d(49): Error: char 0x00a0 not allowed in identifier

    /tmp/tmp2r3fq2cq.d(49): Error: character 0xa0 is not a valid token

    /tmp/tmp2r3fq2cq.d(49): Error: char 0x00a0 not allowed in identifier

    /tmp/tmp2r3fq2cq.d(49): Error: character 0xa0 is not a valid token

    /tmp/tmp2r3fq2cq.d(49): Error: char 0x00a0 not allowed in identifier

    /tmp/tmp2r3fq2cq.d(49): Error: character 0xa0 is '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] res = new float[numbers.length];\n    float minElement\
    \ = numbers[0];\n    float maxElement = numbers[0];\n    float i;\n    for (i\
    \ = 1; i < numbers.length; ++i) {\n        minElement = Math.min(minElement, numbers[i]);\n\
    \        maxElement = Math.max(maxElement, numbers[i]);\n    }\n    float diff\
    \ = maxElement - minElement;\n    float scaler = 1.0f / diff;\n    for (i = 0;\
    \ i < numbers.length; ++i) {\n        float thisDiff = numbers[i] - minElement;\n\
    \        res[i] = scaler * thisDiff;\n    }\n    return res;\n}\n</code>\n<|/\
    \ a tags=arrays,math,sorting,java |>\n<| c |>\nI did not know you could do `-`\
    \ with a double. Good one!\n<|/ c |>\n<| a tags=arrays,math,sorting,java |>\n\
    If you know that the largest value is always greater than or equal to the smallest\
    \ value, then you can sort the array.  In your case, since the values you posted\
    \ are already in ascending order, sort by descending value.  Then, loop through\
    \ the array and move every element to the correct position by finding the difference\
    \ between the element and its neighbor.\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    Using Java 8 Streams:\n<code>\nArrays.stream(input).boxed().sorted(Comparator.comparing(i\
    \ -> Double.MAX_VALUE - i)).map(i -> i + 1).collect(toList());\n</code>\n<|/ a\
    \ tags=arrays,math,sorting,java |>\n<| a dscore=0 |>\nYou can sort the array in\
    \ descending order and use for-loop to find the difference between adjacent elements\n\
    <code>\npublic class ArraySort {\n  public static void main(String[] args) {\n\
    \    Integer[] arr = new Integer[] {1, 4, 5};\n    Arrays.sort(arr);\n    for(int\
    \ i = 0; i < arr.length; i++){\n      System.out.print(arr[i] + \" \");\n    \
    \  System.out.print((arr[i+1]-arr[i]) + \" \");\n    }\n  }\n}\n</code>\nOutput:\n\
    <code>\n1 0 -1 \n</code>\n<|/ a tags=arrays,math,sorting,java |>\n<| a dscore=0\
    \ |>\nYou just need to sort the array in descending order (smallest to largest)\
    \ and then find the difference between adjacent numbers to achieve the required\
    \ output.\n<code>\npublic static void main(String[] args) {\n    // TODO Auto-generated\
    \ method stub\n    Integer[] input = {1,4,5};\n    Integer[] sortedInput = Arrays.copyOf(input,input.length);\n\
    \    Arrays.sort(sortedInput);\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpejb6ae8l.d(28): Error: declaration expected, not `<`

    /tmp/tmpejb6ae8l.d(40): Error: declaration expected, not `<`

    /tmp/tmpejb6ae8l.d(48): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpejb6ae8l.d(48): Error: no identifier for declarator `Arrays.sort(arr)`

    /tmp/tmpejb6ae8l.d(49): Error: declaration expected, not `for`

    /tmp/tmpejb6ae8l.d(49): Error: no identifier for declarator `i`

    /tmp/tmpejb6ae8l.d(49): Error: declaration expected, not `<`

    /tmp/tmpejb6ae8l.d(49): Error: no identifier for declarator `i`

    /tmp/tmpejb6ae8l.d(49): Error: declaration expected, not `++`

    /tmp/tmpejb6ae8l.d(51): Error: identifier expected following `.` instead of `out`

    /tmp/tmpejb6ae8l.d(51): Error: no identifier for declarator `System`

    /tmp/tmpejb6ae8l.d(51): Error: declaration expected, not `out`

    /tmp/tmpejb6ae8l.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejb6ae8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    float[] result = new float[n];\n\
    \    int i;\n    for (i = 0; i < n; ++i)\n    {\n        result[i] = std.math.clamp(numbers[i]\
    \ * (float)(n - 1), 0.0f, 1.0f);\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw47aogta.d(17): Error: C style cast illegal, use `cast(float)(n
    - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw47aogta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return Arrays.stream(numbers).mapToDouble(Math::min)\n   \
    \         .mapToDouble(Math::max)\n            .mapToDouble(Math::abs)\n     \
    \       .mapToDouble(Math::min)\n            .collect(Collectors.toList())\n \
    \           .toArray(new float[1]);\n}\n/*\n Given a 1D vector (of at least 2\
    \ elements), apply a linear transform to that vector\n    >>> rescale_to_unit([1.0,\
    \ 2.0])\n    [0.0, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] vector) \n\
    {\n    float[] result = new float[vector.length];\n    for(int i = 0; i < vector.length;\
    \ ++i)\n        result[i] = vector[i] / rescale_to_unit(Arrays.copyOf(vector,\
    \ vector.length));\n    return result;\n}\n/*\n Given an array of 2D vectors (of\
    \ at least 3 elements), apply a linear transform to that array,\n    such that\
    \ the smallest vector will become 0 and the largest will become 1\n    >>> rescale_to_unit([[1.0,\
    \ 2.0], [3.0, 4.0]])\n    [0.0, 1.0]\n    \n*/\nfloat[][] rescale_to_unit(float[][]\
    \ vectors) \n{\n    return Arrays.stream(vectors)\n            .map(rescale_to_unit)\n\
    \            .toArray(Arrays::stream);\n}\n/*\n Given a 3D vector (of at least\
    \ 4 elements), apply a linear transform to that vector\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0])\n    [0.0, 0.25, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ vector) \n{\n    float[] result = new float[vector.length];\n    for(int i =\
    \ 0; i < vector.length; ++i)\n        result[i] = vector[i] / rescale_to_unit(Arrays.copyOf(vector,\
    \ vector.length));\n    return result;\n}\n/*\n Given an array of 3D vectors (of\
    \ at least 5 elements), apply a linear transform to that array,\n    such that\
    \ the smallest vector will become 0 and the largest will become 1\n    >>> rescale_to_unit([[1.0,\
    \ 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[][] rescale_to_unit(float[][] vectors) \n{\n    return Arrays.stream(vectors)\n\
    \            .map(rescale_to_unit)\n            .toArray(Arrays::stream);\n}\n\
    /*\n Given a 2D matrix (of at least 2 rows and 2 columns), apply a linear transform\
    \ to that matrix\n    >>> rescale_to_unit([[1.0, 2.0], [3.0, 4.0]])\n    [[0.0,\
    \ 0.25], [0.5, 0.75]]\n    \n*/\nfloat[][] rescal\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpizjkxex6.d(12): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(12): Error: expression expected, not `:`

    /tmp/tmpizjkxex6.d(12): Error: found `min` when expecting `,`

    /tmp/tmpizjkxex6.d(13): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(13): Error: expression expected, not `:`

    /tmp/tmpizjkxex6.d(13): Error: found `max` when expecting `,`

    /tmp/tmpizjkxex6.d(14): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(14): Error: expression expected, not `:`

    /tmp/tmpizjkxex6.d(14): Error: found `abs` when expecting `,`

    /tmp/tmpizjkxex6.d(15): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(15): Error: expression expected, not `:`

    /tmp/tmpizjkxex6.d(15): Error: found `min` when expecting `,`

    /tmp/tmpizjkxex6.d(43): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(43): Error: expression expected, not `:`

    /tmp/tmpizjkxex6.d(43): Error: found `stream` when expecting `,`

    /tmp/tmpizjkxex6.d(69): Error: found `:` when expecting `,`

    /tmp/tmpizjkxex6.d(69): Error: expression expected,'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    double minValue\
    \ = min((double)numbers[0], min((double)numbers[1]));\n    double maxValue = max((double)numbers[0],\
    \ max((double)numbers[1]));\n    double scale = (maxValue - minValue) / 2.0;\n\
    \    std.sort(numbers);\n    result[0] = numbers[0] - minValue * scale;\n    result[1]\
    \ = numbers[1] - minValue * scale;\n    for (int i = 2; i < numbers.length; i++)\
    \ \n    {\n        result[i] = result[i-2] + (numbers[i] - minValue) * scale;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw6nxfnyz.d(13): Error: C style cast illegal, use `cast(double)numbers[0]`

    /tmp/tmpw6nxfnyz.d(13): Error: C style cast illegal, use `cast(double)numbers[1]`

    /tmp/tmpw6nxfnyz.d(14): Error: C style cast illegal, use `cast(double)numbers[0]`

    /tmp/tmpw6nxfnyz.d(14): Error: C style cast illegal, use `cast(double)numbers[1]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw6nxfnyz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    std.array.reduce(numbers,\
    \ result, 0);\n    float min = std.math.min(result);\n    float max = std.math.max(result);\n\
    \    std.array.removeAt(result, 0);\n    float inc = max - min;\n    if (inc ==\
    \ 0)\n    {\n        // special case where all numbers are zero\n        result\
    \ = std.array.createFloat(numbers.length);\n    }\n    else\n    {\n        float\
    \ newMin = min - min % inc;\n        result = std.array.appendRange(result, newMin,\
    \ newMin + inc + inc);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for taking the time to write this. It doesn't quite do\
    \ what I needed it to do, but I think it's a really good starting point.  I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI tried to edit it a bit - added a version that doesn't\
    \ require the array to be sorted. Now it only looks at numbers closer to zero\
    \ and doesn't have to consider all the numbers.\n<|/ c |>\n<| c |>\nI understand\
    \ that, and I like your solution. I'm still struggling with the problem of not\
    \ knowing what a linear transform is.  Do you have a reference I could read up\
    \ on?\n<|/ c |>\n<| c |>\nThe Wikipedia entry for Linear Transform is quite good.\
    \ [Wikipedia](https://en.wikipedia.org/wiki/Linear_transform)\n<|/ c |>\n<| c\
    \ |>\nI took your example, and tried `float[] rescale_to_unit(float[] numbers)\
    \ { int len = numbers.length; float[] result = new float[len]; int i = 0; for\
    \ (int j = 0; j < len; j++) { result[i++] = numbers[j] - (numbers[j] % 0.01);\
    \ } return result; }` which gives me an interesting result. I don't think that's\
    \ what we want. For example, `float[] numbers = {1, 2, 3, 4, 5}; float[] result\
    \ = rescale_to_unit(numbers);` gives me `[1.0, 0.9999999747378752, 2.000001907348633,\
    \ 3.000001907348633, 4.000001907348633]` which is clearly not what I wanted.\n\
    <|/ c |>\n<| a dscore=1 tags=java,arrays,algorithm |>\nHere is how you can do\
    \ it in Java 8:\n<code>\npublic static void main(String... args) {\n    double[]\
    \ d = {1, -1, 1, -1, 1, -1, -1};\n    List<Double> arr = Arrays.stream(d).boxed().colle\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vyhtu7e.d(30): Error: declaration expected, not `<`

    /tmp/tmp0vyhtu7e.d(33): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(33): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(36): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(36): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(39): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(45): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(45): Error: unterminated character constant

    /tmp/tmp0vyhtu7e.d(52): Error: no identifier for declarator `List`

    /tmp/tmp0vyhtu7e.d(52): Error: declaration expected, not `<`

    /tmp/tmp0vyhtu7e.d(57): Error: declaration expected, not `assert`

    /tmp/tmp0vyhtu7e.d(58): Error: declaration expected, not `assert`

    /tmp/tmp0vyhtu7e.d(59): Error: declaration expected, not `assert`

    /tmp/tmp0vyhtu7e.d(60): Error: declaration expected, not `assert`

    /tmp/tmp0vyhtu7e.d(61): Error: declaration expected, not `assert`

    /tmp/tmp0vyhtu7e.d(62): Error: unrecognized declaration

    Failed: '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] r = new float[numbers.length];\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < r.length; i++) {\n     \
    \   min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (int i = 0; i < r.length;\
    \ i++) {\n        r[i] = numbers[i] * scale;\n    }\n    return r;\n}\n</code>\n\
    To use this function on a set of 2D points:\n<code>\nfloat[] points = new float[]{\n\
    \    new float[]{0,0},\n    new float[]{1,0},\n    new float[]{0,1},\n    new\
    \ float[]{1,1},\n};\nfloat[][] points2d = points_to_2d(points);\nfloat[] result\
    \ = rescale_to_unit(points2d);\n</code>\n<|/ a |>\n<| c |>\nAt the very least\
    \ you could use floats instead of doubles.\n<|/ c |>\n<| c |>\nThe fact that you're\
    \ using a `float[]` makes me think that you're probably doing something wrong\
    \ with `Vector2`. If you want to perform vector calculations on a vector, use\
    \ the `Vector` type. `Vector2` just represents 2 floats so you lose a lot of the\
    \ functionality that `Vector` offers, such as dot products and vector cross products.\n\
    <|/ c |>\n<| c |>\nHe is using float arrays because he is performing calculations\
    \ on 2D vectors.\n<|/ c |>\n<| c |>\n`Vector2` is a struct, not a class. `Vector2`\
    \ has all the functionality of a `Vector` struct, plus a lot more, especially\
    \ in the space and directional properties (magnitude and angle). It's a lot faster\
    \ than `Vector` for 2D vector calculations.\n<|/ c |>\n<| a tags=opengl,c# |>\n\
    I used this for my project\n<code>\npublic static bool CheckPointInTriangle(Point3D[]\
    \ p, Point3D[] q, Point3D[] r)\n    {\n        int ax = p[0].X - q[0].X;\n   \
    \     int ay = p[0].Y - q[0].Y;\n        int bx = q[1].X - r[1].X;\n        int\
    \ by = q[1].Y - r[1].Y;\n        int cx = r[2].X - p[2].X;\n        int cy = r[2].Y\
    \ - p[2].Y;\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplmotnmz4.d(25): Error: declaration expected, not `<`

    /tmp/tmplmotnmz4.d(36): Error: declaration expected, not `<`

    /tmp/tmplmotnmz4.d(42): Error: unterminated character constant

    /tmp/tmplmotnmz4.d(42): Error: unterminated character constant

    /tmp/tmplmotnmz4.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmotnmz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int[] min = new int[numbers.length];\n    int[] max = new\
    \ int[numbers.length];\n    int i;\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpry2ykqdg.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpry2ykqdg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float largest = numbers[0];\n    float smallest = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; ++i) {\n        if (largest < numbers[i])\
    \ {\n            largest = numbers[i];\n        } else if (smallest > numbers[i])\
    \ {\n            smallest = numbers[i];\n        }\n    }\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmevleyxh.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmevleyxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if (numbers.Length < 2) {\n    return numbers;\n  }\n  float\
    \ min = numbers[0];\n  float max = numbers[0];\n  foreach (float num in numbers)\
    \ {\n    if (num < min) min = num;\n    if (num > max) max = num;\n  }\n  List<float>\
    \ rescaled_numbers = new List<float>();\n  foreach (float num in numbers) {\n\
    \    rescaled_numbers.Add(num - min) / (max - min);\n  }\n  return rescaled_numbers.ToArray();\n\
    }\n</code>\n<|/ a tags=c# dscore=2 |>\n<| c |>\nThank you for you answer. Could\
    \ you explain how does it works? I mean how does it know when to change 0 to 1\
    \ and when to change 1 to 0.\n<|/ c |>\n<| c |>\nAwesome. Thank you for such an\
    \ interesting solution!\n<|/ c |>\n<| a dscore=1 |>\nJust wanted to add this in\
    \ addition to my answer above, since this is where I found the formula (see comments\
    \ below)\n<code>\npublic static float linearInterpolate(float a, float b, float\
    \ c)\n{\n    float b2 = b * b, b3 = b2 * b, b4 = b2 * b2, b5 = b2 * b2, b6 = b3\
    \ * b2;\n    return (float)(b * a + (float)(b2 * c) \n           + (float)(b3\
    \ * b) \n           + (float)(b4 * c) \n           + (float)(b5 * b) \n      \
    \     + (float)(b6 * b));\n}\n</code>\nI implemented it in my project and it works\
    \ well. \nYou can see an example in my blog post: https://blog.oak.me/2015/08/09/simple-linear-interpolation/\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\nThe solution I implemented is to take all the\
    \ numbers after the decimal point and add them to the first number. Then I divide\
    \ all the numbers after the decimal point by the first number so they are in the\
    \ same range. Then I subtract the second number from the first, divide the second\
    \ number by the first number so they are in the same range and subtract them again\
    \ to get their difference. This is then all divided by the third number to get\
    \ an average of the numbers. \n<code>\n        float number = 0.1;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqyfgv39.d(17): Error: found `in` when expecting `;`

    /tmp/tmpdqyfgv39.d(21): Error: found `>` when expecting `.` following float

    /tmp/tmpdqyfgv39.d(21): Error: found `>` when expecting `.` following float

    /tmp/tmpdqyfgv39.d(21): Error: found `(` when expecting identifier following `float`.

    /tmp/tmpdqyfgv39.d(21): Error: found `)` when expecting `;` following statement

    /tmp/tmpdqyfgv39.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdqyfgv39.d(22): Error: found `in` when expecting `;`

    /tmp/tmpdqyfgv39.d(27): Error: declaration expected, not `<`

    /tmp/tmpdqyfgv39.d(41): Error: declaration expected, not `return`

    /tmp/tmpdqyfgv39.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqyfgv39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for(int i\
    \ = 0; i < numbers.length; ++i)\n    {\n        result[i] = (numbers[i] - min(numbers))\
    \ / (max(numbers) - min(numbers));\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=math,c#,unity3d,unity5 dscore=2 |>\n<| c |>\nHi, thanks for the help!\
    \ I tested your method, and I got this error `Assets/Scripts/Maths.cs(34,21):\
    \ error CS0103: The name 'min' does not exist in the current context`. It's weird,\
    \ because if I replace `min` with `Math`, then it still gives me that error. I\
    \ tried to replace `numbers[i]` with `numbers[Math](i)` as well, got same error.\n\
    <|/ c |>\n<| c |>\nWhat version of Unity are you using? What version of the .NET\
    \ framework are you targeting? What version of the runtime are you using? Did\
    \ you import the System.Math library into your project?\n<|/ c |>\n<| c |>\nI'm\
    \ using Unity 2018.2.22f1 Personal and targeting .NET 2.0. Importing the System.Math\
    \ library isn't giving any errors but when I compile the project, `using System.Math;`\
    \ gets underlined in red which means `using System.Math;` is already included\
    \ inside `using UnityEngine;`\n<|/ c |>\n<| c |>\nI downloaded Unity 5.6.2 and\
    \ got the same error as you do. I then downloaded Unity 2018.1.3f1 and it worked\
    \ for me.\n<|/ c |>\n<| c |>\nHi again, thanks for the help! I downloaded Unity\
    \ 2018.1.3f1 again, and `using System.Math;` get underlined in red which means\
    \ `using System.Math;` is already included inside `using UnityEngine;`. Also the\
    \ error `Assets/Scripts/Maths.cs(34,21): error CS0103: The name 'min' does not\
    \ exist in the current context` still occurred, but I believe it's because of\
    \ the version of Unity and .NET framework that I downloaded. Do you think this\
    \ would cause the error when I test my code?\n<|/ c |>\n<| a tags=math,c#,unity3d,unity5\
    \ |>\nThe solution using Linq also works in Unity C#:\n<code>\nusing System.Linq;\n\
    using System.Collections.Generic;\nusing System;\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31e76973.d(19): Error: declaration expected, not `<`

    /tmp/tmp31e76973.d(22): Error: unterminated character constant

    /tmp/tmp31e76973.d(28): Error: unterminated character constant

    /tmp/tmp31e76973.d(28): Error: unterminated character constant

    /tmp/tmp31e76973.d(34): Error: unterminated character constant

    /tmp/tmp31e76973.d(40): Error: semicolon expected, not `.`

    /tmp/tmp31e76973.d(40): Error: no identifier for declarator `.Collections.Generic`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31e76973.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length == 0)\n    {\n        return numbers;\n\
    \    }\n    float largest = numbers[0];\n    float smallest = numbers[0];\n  \
    \  float total = largest;\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        if (numbers[i] > largest)\n        {\n            largest = numbers[i];\n\
    \        }\n        if (numbers[i] < smallest)\n        {\n            smallest\
    \ = numbers[i];\n        }\n        total = largest + smallest;\n    }\n    float[]\
    \ rescaled_array = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        rescaled_array[i] = numbers[i] / total;\n    }\n    return\
    \ rescaled_array;\n}\n</code>\n<|/ a tags=math,java |>\n<| c |>\nThis is not what\
    \ the OP wants.\n<|/ c |>\n<| c |>\nThe OP wants to scale the numbers to a range\
    \ between 0 and 1. Not scale the number to a range from 0 to 100.\n<|/ c |>\n\
    <| c |>\nOh no. That's not what he said. And that is not how you use linear interpolation.\
    \ Read the description of the problem and you'll see what linear interpolation\
    \ means.\n<|/ c |>\n<| c |>\n: That's exactly what this does - it scales all numbers\
    \ in `numbers` to the range [0,1]. Linear interpolation means linearly interpolating\
    \ between the two closest numbers and interpolating between (say) 4 and 5 gives\
    \ you 0.5 - this is linear interpolation.\n<|/ c |>\n<| c |>\nThe description\
    \ of the problem says that he wants to scale the numbers to a range between 0\
    \ and 1 which doesn't have that property. Linear interpolation does not mean linearly\
    \ interpolating the two closest numbers. It means the average of two closest numbers.\
    \ I agree that he should ask a different question, but that's not what he asked\
    \ for. I don't know where you get your information that linear interpolation means\
    \ linearly interpolating between the two closest numbers.\n<|/ c |>\n<| a tags=math,java\
    \ |>\n<code>\npublic class LinearInterpolation {\n    public static void main(String[]\
    \ args) {\n        float arr[] = { 1, 2.5, 4, 6, 8, 10, 12 };\nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_f77w8h.d(38): Error: declaration expected, not `<`

    /tmp/tmpx_f77w8h.d(47): Error: unterminated character constant

    /tmp/tmpx_f77w8h.d(47): Error: unterminated character constant

    /tmp/tmpx_f77w8h.d(50): Error: unterminated character constant

    /tmp/tmpx_f77w8h.d(53): Error: unterminated character constant

    /tmp/tmpx_f77w8h.d(53): Error: unterminated character constant

    /tmp/tmpx_f77w8h.d(53): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_f77w8h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float minNum = float.MAX_VALUE;\n    float maxNum = -float.MAX_VALUE;\n\
    \    for(int i = 0; i < numbers.length; i++) \n    {\n        if(numbers[i] <\
    \ minNum) minNum = numbers[i];\n        if(numbers[i] > maxNum) maxNum = numbers[i];\n\
    \    }\n    float[] result = new float[numbers.length];\n    for(int i = 0; i\
    \ < numbers.length; i++) \n    {\n        result[i] = numbers[i] / maxNum * 2\
    \ - 1;\n    }\n    return result;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([0.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, int length)\n{\n    float minNum = float.MAX_VALUE;\n    float maxNum\
    \ = -float.MAX_VALUE;\n    for(int i = 0; i < numbers.length; i++) \n    {\n \
    \       if(numbers[i] < minNum) minNum = numbers[i];\n        if(numbers[i] >\
    \ maxNum) maxNum = numbers[i];\n    }\n    float[] result = new float[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++) \n    {\n        result[i] = numbers[i]\
    \ / maxNum * length - 1;\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    \    \n*/\nfloat[] rescale_to_unit(float[] numbers, int start, int length)\n{\n\
    \    float minNum = float.MAX_VALUE;\n    float maxNum = -float.MAX_VALUE;\n \
    \   for(int i = start; i < start + length; i++) \n    {\n        if(numbers[i]\
    \ < minNum) minNum = numbers[i];\n        if(numbers[i] > maxNum) maxNum = numbers[i];\n\
    \    }\n    float[] result = new float[length];\n    for(int i = start; i < start\
    \ + length; i++) \n    {\n        result[i] = numbers[i] / maxNum - 1;\n    }\n\
    \    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([0.0, 1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7xdsx7dd.d(72): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7xdsx7dd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int length = numbers.length;\n    if (length == 0)\n     \
    \   return new float[0];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < length; i++)\n    {\n        if (numbers[i] > max)\n\
    \            max = numbers[i];\n        else if (numbers[i] < min)\n         \
    \   min = numbers[i];\n    }\n    float[] result = new float[length];\n    for\
    \ (int i = 0; i < length; i++)\n    {\n        result[i] = (float)numbers[i] /\
    \ max - min;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjf39i05l.d(27): Error: C style cast illegal, use `cast(float)numbers[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf39i05l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int n = numbers.length;\n  assert (n > 2);\n  float[] output\
    \ = new float[n];\n  float minValue = numbers[0];\n  float maxValue = numbers[0];\n\
    \  for (int i = 1; i < n; ++i) {\n    minValue = min(minValue, numbers[i]);\n\
    \    maxValue = max(maxValue, numbers[i]);\n  }\n  float scale = (maxValue - minValue)\
    \ / 2.0;\n  for (int i = 0; i < n; ++i) {\n    output[i] = scale * numbers[i]\
    \ + minValue;\n  }\n  return output;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\ndouble[] rescale_to_unit(double[]\
    \ numbers) \n{\n  int n = numbers.length;\n  assert (n > 2);\n  double[] output\
    \ = new double[n];\n  double minValue = numbers[0];\n  double maxValue = numbers[0];\n\
    \  for (int i = 1; i < n; ++i) {\n    minValue = min(minValue, numbers[i]);\n\
    \    maxValue = max(maxValue, numbers[i]);\n  }\n  double scale = (maxValue -\
    \ minValue) / 2.0;\n  for (int i = 0; i < n; ++i) {\n    output[i] = scale * numbers[i]\
    \ + minValue;\n  }\n  return output;\n}\n/*\n Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptg785djz.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmptg785djz.d(18): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmptg785djz.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmptg785djz.d(36): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmptg785djz.d(42): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmptg785djz.d(43): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptg785djz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if(numbers.length < 2)\n    return numbers;\nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjta7mdp_.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjta7mdp_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] newNumbers = new float[numbers.length];\n    float[]\
    \ minMax = numbers.min(numbers);\n    int indexOfMinMax = ArrayUtils.indexOf(numbers,\
    \ minMax);\n    float min = minMax[0];\n    float max = minMax[1];\n    float\
    \ range = max - min;\n    float scale = 1;\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        newNumbers[i] = numbers[i] * ((range / scale) + 1);\n \
    \       scale *= (max - min) + 1;\n    }\n    newNumbers[indexOfMinMax] = min;\n\
    \    return newNumbers;\n}\n</code>\n<|/ a tags=java |>\n<| c |>\nIt would be\
    \ better to use the `float` datatype instead of `double`, so the `float` results\
    \ will be precise, and the `double` results could be slightly off depending on\
    \ the input. Otherwise it's likely to produce very inaccurate results when the\
    \ numbers are very close to each other.\n<|/ c |>\n<| c |>\nYou're right and that's\
    \ why I wrote \"something like that\".\n<|/ c |>\n<| c |>\nThis is great. Thank\
    \ you!\n<|/ c |>\n<| c |>\nNice trick, but unfortunately this won't be very useful\
    \ for me as I cannot use the ArrayUtils class.\n<|/ c |>\n<| c |>\nWhy can't you\
    \ use the ArrayUtils class?\n<|/ c |>\n<| a |>\n<code>\npublic class ArrayUtils\
    \ {\n    public static <T> T minIndex(T[] array, Comparator<? super T> comparator)\
    \ {\n        T min = array[0];\n        int minIndex = -1;\n        for (int i\
    \ = 1; i < array.length; i++) {\n            if (comparator.compare(array[i],\
    \ min) > 0) {\n                min = array[i];\n                minIndex = i;\n\
    \            }\n        }\n        return array[minIndex];\n    }\n    public\
    \ static <T> T[] copyOf(T[] original, final int newLength) {\n        return Arrays.copyOf(original,\
    \ newLength);\n    }\n    public static <T> T[] copy(T[] original) {\n       \
    \ return Arrays.copyOf(original, original.length);\n    }\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnax9zahk.d(27): Error: declaration expected, not `<`

    /tmp/tmpnax9zahk.d(30): Error: unterminated character constant

    /tmp/tmpnax9zahk.d(33): Error: unterminated character constant

    /tmp/tmpnax9zahk.d(33): Error: unterminated character constant

    /tmp/tmpnax9zahk.d(39): Error: unterminated character constant

    /tmp/tmpnax9zahk.d(42): Error: unterminated character constant

    /tmp/tmpnax9zahk.d(50): Error: declaration expected, not `for`

    /tmp/tmpnax9zahk.d(50): Error: no identifier for declarator `i`

    /tmp/tmpnax9zahk.d(50): Error: declaration expected, not `<`

    /tmp/tmpnax9zahk.d(50): Error: no identifier for declarator `i`

    /tmp/tmpnax9zahk.d(50): Error: declaration expected, not `++`

    /tmp/tmpnax9zahk.d(53): Error: no identifier for declarator `minIndex`

    /tmp/tmpnax9zahk.d(53): Error: declaration expected, not `=`

    /tmp/tmpnax9zahk.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnax9zahk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    //return numbers;\n    \n    float[] rescaled = numbers;\n\
    \    if (rescaled.Length < 2) return numbers;\n    \n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 0; i < rescaled.Length; i++)\n\
    \    {\n        if (rescaled[i] > max) { max = rescaled[i]; }\n        if (rescaled[i]\
    \ < min) { min = rescaled[i]; }\n    }\n    \n    float scale = (max - min);\n\
    \    for (int i = 0; i < rescaled.Length; i++)\n    {\n        rescaled[i] = (rescaled[i]\
    \ - min) / scale;\n    }\n    return rescaled;\n}\n</code>\nThe above code works\
    \ for a float array (which is what your question title seems to indicate), but\
    \ I'm sure there's a way to generalize it to work with double arrays as well.\
    \ Just let me know if you're interested.\n<|/ a tags=arrays,c#,scaling,math |>\n\
    <| c |>\nThe input should be an array with at least two elements, the smallest\
    \ value will be in the first and the largest will be in the last position in the\
    \ array.\n<|/ c |>\n<| c |>\nI updated my code to address what I think you meant.\
    \ I think this is what you were looking for in the first place. I apologize if\
    \ I was incorrect in that assumption.\n<|/ c |>\n<| c |>\nSorry, I misunderstood\
    \ the requirement. I thought the requirement was that the largest element in the\
    \ array would be 1.0, and the smallest element would be 0.0. Do you want the smallest\
    \ element to be 0 and the largest to be 1?\n<|/ c |>\n<| c |>\nI updated the code\
    \ to make the smallest element 0.0 and the largest element 1.0, just in case that\
    \ was what was intended.\n<|/ c |>\n<| a |>\nI think this should work:\n<code>\n\
    static IEnumerable<double> RescaleArray(double[] numbers)\n{\n    var min = numbers.Min();\n\
    \    var max = numbers.Max();\n    var scale = (max - min);\nunittest\n{\n   \
    \ alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx91nffd_.d(32): Error: declaration expected, not `<`

    /tmp/tmpx91nffd_.d(33): Error: unterminated character constant

    /tmp/tmpx91nffd_.d(33): Error: unterminated character constant

    /tmp/tmpx91nffd_.d(33): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx91nffd_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] unitNumbers = new float[numbers.length];\n    for(\
    \ int i = 0; i < numbers.length; ++i )\n        unitNumbers[i] = numbers[i] /\
    \ MathUtil.min( numbers[i] , numbers[i+1] );\n    return unitNumbers;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\nI used the solutions above and found that they only\
    \ worked for very large numbers. So I came up with this solution:\n<code>\npublic\
    \ static float rescale(float min, float max, float value) {\n        float result\
    \ = value / max;\n        if (Math.abs(result) > 1) {\n            result = 1\
    \ - ((1 - result) * max);\n        }\n        return result * min;\n    }\n</code>\n\
    <|/ a tags=java,math,scaling,android |>\n<| c |>\nYes, you are right. This is\
    \ because of the floating-point imprecision in most programming languages.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\npublic static double rescaleTo(double min, double\
    \ max, double value) {\n    double result = value / max;\n    double result =\
    \ Math.min(result, 1);\n    return result * min;\n}\n</code>\n<|/ a tags=java,math,scaling,android\
    \ |>\n<| a dscore=0 tags=java,math,scaling,android |>\nThis is an old thread but\
    \ I want to contribute to it as I did the same thing as you. Here is my code and\
    \ I hope you find it useful.\n<code>\n//Scale the values from [0;1) to [0;1)\n\
    public static float scale(float min, float max, float value) {\n    return min\
    \ + ((value - min) / (max - min));\n}\n</code>\nAnd you can use the values like\
    \ so:\n<code>\n//Scale to min / max range\n//Ex: scale(0.0f, 1.0f, 0.5)  = 0.2916666667\n\
    //Ex: scale(0.0f, 1.0f, 1.0f)  = 1.0\n//Ex: scale(0.0f, 1.0f, 1.0f)  = 1.0\npublic\
    \ static float scale(float min, float max, float value) {\n    float result =\
    \ value;\n    if (result < 0) {\n        result = min + (result * -1);\n    }\n\
    \    else {\n        result = min + (result * (max - min));\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a tags=java,math,scaling,android |>\n<code>\n\
    public static float rescale(float min, float max, float value) {\n    return (float)\
    \ (value * (max - min) + min);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    I have found two solutions based on my needs. \n<code>\npublic static float rescale(float\
    \ min, float max, \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n  \
    \  assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkq1aanu.d(17): Error: declaration expected, not `<`

    /tmp/tmpkkq1aanu.d(24): Error: declaration expected, not `if`

    /tmp/tmpkkq1aanu.d(26): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkq1aanu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] results = new float[numbers.length];\n\t\n\tint i;\n\
    \tdouble sum=0;\n\t\n\tfor (i = 0; i< numbers.length; i++)\n\t{\n\t\tresults[i]\
    \ = numbers[i];\n\t}\n\t\n\tfor (i = 0; i< numbers.length; i++)\n\t{\n\t\tsum\
    \ += results[i];\n\t\tresults[i] = results[i] / sum;\n\t}\n\t\n\treturn results;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprt9547ep.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x42909d]

    ??:? void tmprt9547ep.__unittest_L30_C1() [0x428962]

    ??:? void tmprt9547ep.__modtest() [0x428e20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d4c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c35a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4315e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431a94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431571]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c331]

    ??:? runModuleUnitTests [0x42d29d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429560]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] range = new float[numbers.length];\n    range[0] =\
    \ numbers[0];\n    range[numbers.length-1] = numbers[0];\n    for(int i=0; i<numbers.length-1;\
    \ i++)\n    {\n        range[i] = range[i+1];\n    }\n    for(int i=0; i<numbers.length-1;\
    \ i++)\n    {\n        range[i] = range[i+1]/numbers[i];\n    }\n    return range;\n\
    }\n/*\n This method is used for histogram normalization. \n Given an array of\
    \ numbers, return an array that contains the \n    number of elements per bin.\n\
    \    \n    Each number in the array will map to a bin as such:\n    \n       \
    \ 0 to [0.0] will map to bin 0\n        1 to [0.1] will map to bin 0\n       \
    \ ...\n        8 to [1.0] will map to bin 9\n    \n    Each bin will be an array\
    \ containing the number of elements in that bin.\n    \n    \n    >>> hist = [1,2,3,3,2,6,5,4,8,9,8,9]\n\
    \    >>> hist = histogram_as_array(hist)\n    >>> hist\n    [1, 1, 2, 2, 2, 3,\
    \ 4, 4, 4, 5, 5, 5, 5]\n    >>> hist = rescale_to_unit(hist)\n    >>> hist\n \
    \   [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.25, 0.25, 0.5, 0.75, 1.0, 1.0]\n    >>>\
    \ histogram(hist)\n    [(1.0, 4), (2.0, 2), (3.0, 4), (4.0, 1), (5.0, 3)]\n*/\n\
    float[] histogram_as_array(float[] data)\n{\n    Arrays.sort(data);\n    float[]\
    \ range = new float[data.length];\n    range[0] = data[0];\n    range[data.length-1]\
    \ = data[0];\n    for(int i=0; i<data.length-1; i++)\n    {\n        range[i]\
    \ = range[i+1];\n    }\n    for(int i=0; i<data.length-1; i++)\n    {\n      \
    \  range[i] = range[i+1]/data[i];\n    }\n    float[] hist = new float[data.length];\n\
    \    for(int i=0; i<data.length; i++)\n    {\n        int index = Math.floor(data[i]);\n\
    \        hist[i] = range[index];\n    }\n    return hist;\n}\n/*\n Converts the\
    \ histogram to a vector of bins\n \n    Each bin will be an array containing the\
    \ number of elements in that bin.\n    \n    \n    >>> hist = [1,2,3,3,2,6,5,4,8,9,8,9]\n\
    \    >>> hist = histogram_as_array(hist)\n    >>> hist\n    [1, 1, 2, 2, 2, 3,\
    \ 4, 4, 4, 5, 5, 5, 5]\n    >>> hist = rescale_to_unit(hist)\n    >>> hist\n \
    \   [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.25, 0.25, 0.5, 0.75, 1.0, 1.0]\n    >>>\
    \ histogram(hist)\n    [(1.0, 4), (2.0, 2), (3.0, 4), (4.0, 1), (5.0, 3)]\n*/\n\
    float[][] histogram(float[] \nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbwapxzjs.d(89): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbwapxzjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    int min_index\
    \ = 0;\n    int max_index = 0;\n    for (int index = 0; index < numbers.length;\
    \ index++)\n    {\n        if (numbers[index] < numbers[min_index])\n        {\n\
    \            min_index = index;\n        }\n        if (numbers[index] > numbers[max_index])\n\
    \        {\n            max_index = index;\n        }\n    }\n    float scale\
    \ = 1.0 / (max_index - min_index);\n    for (int index = 0; index < numbers.length;\
    \ index++)\n    {\n        result[index] = numbers[index] * scale;\n    }\n  \
    \  return result;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,arrays,math,sorting,c#\
    \ |>\n<| c |>\nThanks for the comment, can you please tell me why is that?\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't take in to account that the array may be\
    \ empty (meaning no elements will ever be removed). I don't know what the question\
    \ was meant to be asking, but I figured it was worth pointing out.\n<|/ c |>\n\
    <| c |>\nI fixed the issue you mentioned as well.\n<|/ c |>\n<| a dscore=1 tags=algorithm,arrays,math,sorting,c#\
    \ |>\n<code>\nfloat[] arr = {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, 4.0f,\
    \ 5.0f, 5.0f, 5.01f};\nfloat[] arr1 = {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f,\
    \ 4.0f, 4.0f, 5.0f, 5.0f, 5.01f};\n//float[] arr1 = {0.0f, 1.01f, 2.0f, 2.01f,\
    \ 3.00f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 5.01f};\n//float[] arr1 = {0.0f, 1.01f,\
    \ 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 5.01f};\n//float[] arr1 =\
    \ {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 5.01f};\n//float[]\
    \ arr1 = {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f, 5.01f};\n\
    //float[] arr1 = {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, 4.0f, 5.0f, 5.0f,\
    \ 5.01f};\n//float[] arr1 = {0.0f, 1.01f, 2.0f, 2.01f, 3.00f, 3.0f, 4.0f, \nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gob0rq7.d(33): Error: declaration expected, not `<`

    /tmp/tmp1gob0rq7.d(39): Error: unterminated character constant

    /tmp/tmp1gob0rq7.d(39): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gob0rq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\nunittest\n{\n\
    \    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr15n74z3.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr15n74z3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] result = new float[numbers.length];\nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1z6wcsym.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1z6wcsym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if(numbers.length < 2) \n    {\n        throw new Exception(\"\
    rescale_to_unit: Input array must contain at least two elements\");\n    }\n \
    \   float maxNum = numbers[numbers.length - 1];\n    float minNum = numbers[0];\n\
    \    for(int i = 0; i < numbers.length - 1; ++i)\n    {\n        numbers[i] =\
    \ (numbers[i] - minNum) / (maxNum - minNum);\n        maxNum = maxNum == numbers[i]\
    \ ? 1.0f : maxNum;\n        minNum = minNum == numbers[i] ? 0.0f : minNum;\n \
    \   }\n    return numbers;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThis\
    \ is great! Thank you\n<|/ c |>\n<| c |>\nWhat is `std.typecons`? I can't find\
    \ any documentation on it.\n<|/ c |>\n<| c |>\n: It's a typealias for `System.Type`.\
    \ It's defined in [this file](https://github.com/StevenGrunwald/steven-grunwald.typecons/blob/master/src/typecons/std/typecons.js),\
    \ line 152.\n<|/ c |>\n<| c |>\n: And you can find it [here](https://github.com/StevenGrunwald/steven-grunwald.typecons/blob/master/src/typecons/std/typecons.js).\
    \ :)\n<|/ c |>\n<| a tags=java,arrays |>\nThis code converts array of any types\
    \ to array of 0s and 1s\n<code>\nprivate static float[] toBinary(float[] array)\
    \ {\n    if (array == null) {\n        return null;\n    }\n    int l = array.length;\n\
    \    float[] ret = new float[l << 1];\n    for (int i = 0; i < l; i++) {\n   \
    \     ret[(i << 1)] = array[i];\n    }\n    return ret;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this answer, but it only works if all floats are positive.\
    \  If the array has any negative values, then the 1s will wrap around.\n<|/ c\
    \ |>\n<| a |>\nYou can convert an array of floats to an array of ints in Java\
    \ as follows:\n<code>\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgc4f0hf3.d(26): Error: declaration expected, not `<`

    /tmp/tmpgc4f0hf3.d(32): Error: unterminated character constant

    /tmp/tmpgc4f0hf3.d(35): Error: unterminated character constant

    /tmp/tmpgc4f0hf3.d(35): Error: unterminated character constant

    /tmp/tmpgc4f0hf3.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgc4f0hf3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    \n    float[] res = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        float min = numbers[0];\n       \
    \ float max = numbers[0];\n        for (int j = 1; j < numbers.length; j++) {\n\
    \            if (numbers[j] < min) min = numbers[j];\n            if (numbers[j]\
    \ > max) max = numbers[j];\n        }\n        float range = max - min;\n    \
    \    res[i] = (numbers[i] - min) / range;\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length <= 1) return numbers;\n    float min =\
    \ numbers[0];\n    float max = numbers[0];\n    for(float number : numbers)\n\
    \    {\n        if (number < min)\n            min = number;\n        if (number\
    \ > max)\n            max = number;\n    }\n    float[] newnumbers = new float[numbers.length];\n\
    \    for(float number : numbers)\n    {\n        newnumbers[newnumbers.length\
    \ - 1 - float.indexOf(min)] /= (max - min);\n        newnumbers[newnumbers.length\
    \ - 1 - float.indexOf(min)] += number;\n    }\n    return newnumbers;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaug_730x.d(15): Error: semicolon expected, not `:`

    /tmp/tmpaug_730x.d(15): Error: expression expected, not `:`

    /tmp/tmpaug_730x.d(15): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpaug_730x.d(23): Error: semicolon expected, not `:`

    /tmp/tmpaug_730x.d(23): Error: expression expected, not `:`

    /tmp/tmpaug_730x.d(23): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaug_730x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    for(int\
    \ i=0; i < numbers.length; i++) {\n        results[i] = min(numbers[i], max(numbers[i],\
    \ 0.0f));\n    }\n    return results;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6vwznx2.d(14): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6vwznx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor(int\
    \ i = 0; i < numbers.length; i++) \n\t{\n\t\tmin = MathTools.min(min, numbers[i]);\n\
    \t\tmax = MathTools.max(max, numbers[i]);\n\t}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbxr1idy.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbxr1idy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] / numbers.length;\n\
    \    return result;\n}\n</code>\nTo check whether a number lies in between 2 numbers,\
    \ you can use the following code:\n<code>\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcirj323z.d(17): Error: declaration expected, not `<`

    /tmp/tmpcirj323z.d(24): Error: declaration expected, not `assert`

    /tmp/tmpcirj323z.d(25): Error: declaration expected, not `assert`

    /tmp/tmpcirj323z.d(26): Error: declaration expected, not `assert`

    /tmp/tmpcirj323z.d(27): Error: declaration expected, not `assert`

    /tmp/tmpcirj323z.d(28): Error: declaration expected, not `assert`

    /tmp/tmpcirj323z.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcirj323z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    float largest\
    \ = numbers[0];\n    float smallest = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ ++i) \n    {\n        if (numbers[i] > largest) largest = numbers[i];\n    \
    \    if (numbers[i] < smallest) smallest = numbers[i];\n    }\n    float largest2\
    \ = largest * largest;\n    float smallest2 = smallest * smallest;\n    for (int\
    \ i = 0; i < numbers.length; ++i) \n    {\n        results[i] = ((numbers[i] -\
    \ smallest) / largest2);\n    }\n    return results;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6zy5oxu_.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x429145]

    ??:? void tmp6zy5oxu_.__unittest_L28_C1() [0x428a06]

    ??:? void tmp6zy5oxu_.__modtest() [0x428ec4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d56f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c402]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43168d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431b3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431619]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3d9]

    ??:? runModuleUnitTests [0x42d345]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429608]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\t// convert our array to a vector \n\tfloat[] vector = Vector3.createVector(numbers);\n\
    \t\n\t// apply a linear transform that scales the input to the range [0,1]\n\t\
    float minimum = vector[0];\n\tfloat maximum = vector[0];\n\tfor (int i = 1; i\
    \ < vector.size(); i++)\n\t{\n\t\tfloat current = vector[i];\n\t\t\n\t\t// update\
    \ the minimum & maximum values\n\t\tif (current < minimum) minimum = current;\n\
    \t\tif (current > maximum) maximum = current;\n\t}\n\t\n\t// scale our vectors\n\
    \tfloat range = (maximum - minimum);\n\tfloat[] rescaled = new float[vector.size()];\n\
    \tfor (int i = 0; i < rescaled.length; i++)\n\t{\n\t\trescaled[i] = (vector[i]\
    \ - minimum) / range;\n\t}\n\treturn rescaled;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy43352wr.d(13): Error: undefined identifier `Vector3`

    /tmp/tmpy43352wr.d(18): Error: no property `size` for type `float[]`

    /tmp/tmpy43352wr.d(29): Error: no property `size` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy43352wr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] scaled = new float[numbers.length];\n    double largest\
    \ = numbers[0];\n    double smallest = numbers[0];\n    for(int i = 0; i < numbers.length;\
    \ i++) \n    {\n        double current = numbers[i];\n        if(current > largest)\n\
    \        {\n            largest = current;\n        }\n        if(current < smallest)\n\
    \        {\n            smallest = current;\n        }\n    }\n    double range\
    \ = largest - smallest;\n    double new_range = 1.0;\n    for(int i = 0; i < scaled.length;\
    \ i++) {\n        double offset = numbers[i] - smallest;\n        scaled[i] =\
    \ offset + smallest + ((offset*new_range) / range);\n    }\n    return scaled;\n\
    }\n/*\n Given a 2D array of numbers (of at least two rows), apply a linear transform\
    \ to that array,\n    such that the minimum value in each row will become 0 and\
    \ the maximum will be 1\n    >>> rescale_to_unit([[1.0, 2.0], [3.0, 4.0]])\n \
    \   [[0.0, 1.0]]\n    \n*/\nfloat[][] rescale_to_unit(float[][] numbers) \n{\n\
    \    float[][] scaled = new float[numbers.length][];\n    double largest = numbers[0][0];\n\
    \    double smallest = numbers[0][0];\n    for(int i = 0; i < numbers.length;\
    \ i++) {\n        double current = numbers[i][0];\n        if(current > largest)\n\
    \        {\n            largest = current;\n        }\n        if(current < smallest)\n\
    \        {\n            smallest = current;\n        }\n    }\n    double range\
    \ = largest-smallest;\n    double new_range = 1.0;\n    for(int i = 0; i < scaled.length;\
    \ i++) {\n        double offset = numbers[i][0] - smallest;\n        scaled[i]\
    \ = new float[] {offset + smallest + ((offset*new_range) / range)};\n    }\n \
    \   return scaled;\n}\n/*\n Given a 3D array of numbers (of at least three columns),\
    \ apply a linear transform to that array,\n    such that the minimum value in\
    \ each column will become 0 and the maximum will be 1\n    >>> rescale_to_unit([[1.0,\
    \ 2.0], [3.0, 4.0], [5.0, 6.0]])\n    [[[0.0, 1.0]]]\n    \n*/\nfloat[][][] rescale_to_unit(float[][][]\
    \ numbers) \n{\n    float[][][] scaled = new float[numbers.length][][];\n    double\
    \ largest = numbers[0][0][0];\n    double smallest = numbers[0][0][0];\n    for(int\
    \ i = 0; i < numbers.length; i++) {\n        double current = numbers[i][0][0];\n\
    \        if(current > largest)\n        {\n            largest = current;\n  \
    \      }\n        if(current < smallest)\n        {\n            smallest = current\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9bou8n12.d(62): Error: found `{` when expecting `;` following statement

    /tmp/tmp9bou8n12.d(62): Error: found `}` when expecting `;` following statement

    /tmp/tmp9bou8n12.d(62): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9bou8n12.d(87): Error: found `unittest` when expecting `;` following statement

    /tmp/tmp9bou8n12.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp9bou8n12.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp9bou8n12.d(97): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9bou8n12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float minx = numbers[0];\n    float maxx = numbers[0];\n \
    \   float miny = numbers[0];\n    float maxy = numbers[0];\n    for (int i = 1;\
    \ i < numbers.length; ++i) {\n        minx = min(minx, numbers[i]);\n        maxx\
    \ = max(maxx, numbers[i]);\n        miny = min(miny, numbers[i]);\n        maxy\
    \ = max(maxy, numbers[i]);\n    }\n    float diff = maxx - minx;\n    if (diff\
    \ == 0.0f)\n        return new float[0];\n    float minRatio = 1.0f / (maxx -\
    \ minx);\n    float maxRatio = 1.0f / (maxy - miny);\n    float[] result = new\
    \ float[numbers.length];\n    double temp;\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        temp = numbers[i] - minx;\n        result[i] = (float) (((temp\
    \ * minRatio) + minx));\n    }\n    diff = maxx - minx;\n    if (diff == 0.0f)\n\
    \        return new float[0];\n    float temp2;\n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        temp = result[i] - minx;\n        temp2 = ((temp * minRatio)\
    \ + minx);\n        float temp3 = temp2 * minRatio + miny;\n        result[i]\
    \ = (float) (temp3);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8y4t2_zs.d(31): Error: C style cast illegal, use `cast(float)(temp
    * minRatio + minx)`

    /tmp/tmp8y4t2_zs.d(41): Error: C style cast illegal, use `cast(float)temp3`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8y4t2_zs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  // get max and min\n  float max = Mathf.Max(numbers[0], numbers[1]);\n\
    \  float min = Mathf.Min(numbers[0], numbers[1]);\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6qyk6zuy.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6qyk6zuy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] rescaled = numbers;\n    float smallest = min(rescaled);\n\
    \    float largest = max(rescaled);\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7vijhqh.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7vijhqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int nElements = numbers.length;\n    if (nElements == 0)\n\
    \    {\n        return numbers;\n    }\n    float[] result = new float[nElements];\n\
    \    for (int i = 0; i < nElements; i++)\n    {\n        result[i] = (numbers[i]\
    \ - min(numbers)) / max(numbers); //scale to [0, 1]\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgm0y4ji3.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmpgm0y4ji3.d(20): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpgm0y4ji3.d(20): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgm0y4ji3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] result = new float[numbers.length];\n\t\n\tfor (int\
    \ i = 0; i < numbers.length; ++i)\n\t{\n\t\tresult[i] = numbers[i] / numbers.length;\n\
    \t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_ghsoa9k.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x429015]

    ??:? void tmp_ghsoa9k.__unittest_L21_C1() [0x4288da]

    ??:? void tmp_ghsoa9k.__modtest() [0x428d98]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d43f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c2d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43155d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431a0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4314e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c2a9]

    ??:? runModuleUnitTests [0x42d215]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4294d8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] nums = new float[numbers.length];\n    float minValue\
    \ = numbers[0];\n    float maxValue = numbers[0];\n    float total = 0;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        nums[i] = numbers[i];\n    \
    \    total += nums[i];\n    }\n    float range = maxValue - minValue;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        nums[i] /= total;\n        nums[i]\
    \ += minValue;\n    }\n    return nums;\n}\n</code>\n<|/ a tags=language-agnostic,floating-point,math\
    \ |>\n<| c |>\nThis does not work. After rescaling to the range, you will have\
    \ a number larger than one.\n<|/ c |>\n<| c |>\nYou are right :) I overlooked\
    \ that.\n<|/ c |>\n<| a dscore=3 |>\nThis works for me (Java):\n<code>\npublic\
    \ static float[] rescale(float[] floats) {\n    float[] rescaled = new float[floats.length];\n\
    \    float min = floats[0];\n    float max = floats[0];\n    float total = 0;\n\
    \    for (int i = 0; i < floats.length; i++) {\n        rescaled[i] = (float)\
    \ (floats[i]-min)/(float)total;\n        total += rescaled[i];\n        if (rescaled[i]\
    \ < 0)\n            rescaled[i] = 0;\n        if (rescaled[i] > 1)\n         \
    \   rescaled[i] = 1;\n    }\n    return rescaled;\n}\n</code>\n<|/ a tags=language-agnostic,floating-point,math\
    \ |>\n<| c |>\nIt looks like you have the same issue as me - `rescaled[i] = (float)\
    \ (floats[i]-min)/(float)total;` will throw division by zero when the total is\
    \ 0.\n<|/ c |>\n<| c |>\nI added a check that handles zero cases as well. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=language-agnostic,floating-point,math\
    \ |>\nThis question is really more about how to normalize numbers (which can be\
    \ done by scaling them by a number), not about how to normalize floating point\
    \ numbers. \nThere are many ways to scale a number by another number, and to scale\
    \ a number by a constant number you can simply divide it. You can scale a number\
    \ by another number by multiplying the first number by the second. \nIt looks\
    \ like what you want is rescaling. This is easily done by dividing by a number\
    \ that is the ratio of the two numbers. For example if you have two numbers A\
    \ and B, then B/A will give the ratio of B to A. \nTo get to the answer you want,\
    \ simply divide all numbers by the ratio of their original values to the sum of\
    \ the original values.\n<|/ a dscore=3 |>\n<| a d\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpry69qv8s.d(29): Error: declaration expected, not `<`

    /tmp/tmpry69qv8s.d(45): Error: declaration expected, not `for`

    /tmp/tmpry69qv8s.d(45): Error: no identifier for declarator `i`

    /tmp/tmpry69qv8s.d(45): Error: declaration expected, not `<`

    /tmp/tmpry69qv8s.d(45): Error: no identifier for declarator `i`

    /tmp/tmpry69qv8s.d(45): Error: declaration expected, not `++`

    /tmp/tmpry69qv8s.d(47): Error: no identifier for declarator `total`

    /tmp/tmpry69qv8s.d(47): Error: declaration expected, not `+=`

    /tmp/tmpry69qv8s.d(48): Error: declaration expected, not `if`

    /tmp/tmpry69qv8s.d(50): Error: declaration expected, not `if`

    /tmp/tmpry69qv8s.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpry69qv8s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        result[i] = math.reciprocal(numbers[i]);\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=c#,math,c++,arrays |>\n<| a\
    \ tags=c#,math,c++,arrays |>\nJust for fun (this solution uses std::transform):\n\
    <code>\n#include <numeric>\n#include <functional>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokghmpk1.d(18): Error: declaration expected, not `<`

    /tmp/tmpokghmpk1.d(30): Error: declaration expected, not `assert`

    /tmp/tmpokghmpk1.d(31): Error: declaration expected, not `assert`

    /tmp/tmpokghmpk1.d(32): Error: declaration expected, not `assert`

    /tmp/tmpokghmpk1.d(33): Error: declaration expected, not `assert`

    /tmp/tmpokghmpk1.d(34): Error: declaration expected, not `assert`

    /tmp/tmpokghmpk1.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokghmpk1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    int minIndex\
    \ = -1;\n    for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ < numbers[minIndex]) minIndex = i;\n        result[i] = (numbers[i] - numbers[minIndex])\
    \ / (float)(numbers.length - 1);\n    }\n    return result;\n}\n/*\n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, int fromIndex) \n{\n\
    \    float[] result = new float[numbers.length];\n    int minIndex = -1;\n   \
    \ for (int i = fromIndex; i < numbers.length; i++) {\n        if (numbers[i] <\
    \ numbers[minIndex]) minIndex = i;\n        result[i] = (numbers[i] - numbers[minIndex])\
    \ / (float)(numbers.length - 1);\n    }\n    return result;\n}\n/*\n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, int fromIndex, int\
    \ toIndex) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = fromIndex; i <= toIndex; i++) {\n        result[i] = (numbers[i] - numbers[minIndex])\
    \ / (float)(numbers.length - 1);\n    }\n    return result;\n}\n/*\n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, int fromIndex, int\
    \ toIndex, float proportion) \n{\n    float[] result = new float[numbers.length];\n\
    \    for (int i = fromIndex; i <= toIndex; i++) {\n        result[i] = (numbers[i]\
    \ - numbers[minIndex]) * proportion;\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI did not mean the inverse transform, though, but scaling to\
    \ a certain percentage of the original range.\n<|/ c |>\n<| c |>\nThat is exactly\
    \ what it does. You might need to add a default value if the array is too small\
    \ to scale to 100%.\n<|/ \nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21wlw0x7.d(16): Error: C style cast illegal, use `cast(float)(numbers.length
    - 1)`

    /tmp/tmp21wlw0x7.d(33): Error: C style cast illegal, use `cast(float)(numbers.length
    - 1)`

    /tmp/tmp21wlw0x7.d(48): Error: C style cast illegal, use `cast(float)(numbers.length
    - 1)`

    /tmp/tmp21wlw0x7.d(67): Error: declaration expected, not `<`

    /tmp/tmp21wlw0x7.d(79): Error: declaration expected, not `assert`

    /tmp/tmp21wlw0x7.d(80): Error: declaration expected, not `assert`

    /tmp/tmp21wlw0x7.d(81): Error: declaration expected, not `assert`

    /tmp/tmp21wlw0x7.d(82): Error: declaration expected, not `assert`

    /tmp/tmp21wlw0x7.d(83): Error: declaration expected, not `assert`

    /tmp/tmp21wlw0x7.d(84): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21wlw0x7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2)\n        return numbers;\n    float\
    \ maxNumber = numbers[0];\n    float minNumber = numbers[0];\n    for (int i =\
    \ 1; i < numbers.length; ++i) {\n        maxNumber = std.max(maxNumber, numbers[i]);\n\
    \        minNumber = std.min(minNumber, numbers[i]);\n    }\n    return numbers.length\
    \ == 1 ? new float[] {minNumber, maxNumber} : new float[] {minNumber / (maxNumber\
    \ - minNumber), maxNumber / (maxNumber - minNumber)};\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpez6n0gzx.d(20): Error: found `{` when expecting `:`

    /tmp/tmpez6n0gzx.d(20): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpez6n0gzx.d(20): Error: found `:` instead of statement

    /tmp/tmpez6n0gzx.d(21): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpez6n0gzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\t// return array of same size as input array, with all values\
    \ scaled to [0,1]\n\tfloat[] output = new float[numbers.length];\n\tfor (uint\
    \ i = 0; i < numbers.length; i++)\n\t{\n\t\tfloat rescale = (numbers[i] - Min)\
    \ / Range;\n\t\toutput[i] = rescale;\n\t}\n\treturn output;\n}\n/*\n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit_reverse(float[] numbers) \n{\n\t// return\
    \ array of same size as input array, with all values scaled to [0,1]\n\tfloat[]\
    \ output = new float[numbers.length];\n\tfor (uint i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tfloat rescale = (numbers[i] - Max) / Range;\n\t\toutput[i] =\
    \ rescale;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfoekl93u.d(16): Error: undefined identifier `Min`, did you mean
    function `sin`?

    /tmp/tmpfoekl93u.d(16): Error: undefined identifier `Range`

    /tmp/tmpfoekl93u.d(34): Error: undefined identifier `Max`

    /tmp/tmpfoekl93u.d(34): Error: undefined identifier `Range`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfoekl93u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int min_num = FLT_MIN;\n  int max_num = FLT_MAX;\n  int i;\n\
    \  float min_index;\n  float max_index;\n  float range;\n  float scale_factor;\n\
    \  float curr_min;\n  float curr_max;\n  float curr_range;\n  float result;\n\
    \  float min;\n  float max;\n  float range;\n  \n  float min_ind;\n  float max_ind;\n\
    \  float range_ind;\n  float scale_factor_ind;\n  float curr_ind_min;\n  float\
    \ curr_ind_max;\n  float curr_ind_range;\n  float curr_ind_scale_factor;\n  float\
    \ curr_ind_min_ind;\n  float curr_ind_max_ind;\n  \n  for (i = 0; i < numbers.length;\
    \ ++i) \n  {\n    curr_min = numbers[i];\n    curr_max = numbers[i];\n    curr_range\
    \ = curr_max - curr_min;\n    min = numbers[i];\n    max = numbers[i];\n    range\
    \ = max - min;\n    min_ind = i;\n    max_ind = i;\n    range_ind = range;\n \
    \   scale_factor_ind = 1.0;\n    curr_ind_min = i;\n    curr_ind_max = i;\n  \
    \  curr_ind_range = range;\n    curr_ind_scale_factor = 1.0;\n    curr_ind_min_ind\
    \ = i;\n    curr_ind_max_ind = i;\n    while (range_ind > FLT_EPSILON)\n    {\n\
    \      range_ind /= scale_factor_ind;\n      curr_ind_range /= scale_factor_ind;\n\
    \      curr_ind_scale_factor /= scale_factor_ind;\n      curr_ind_min *= scale_factor_ind;\n\
    \      curr_ind_max *= scale_factor_ind;\n      curr_ind_range *= scale_factor_ind;\n\
    \      curr_ind_scale_factor *= scale_factor_ind;\n    }\n    if (range_ind ==\
    \ FLT_EPSILON) \n    {\n      result = 0.0;\n    }\n    else \n    {\n      result\
    \ = curr_min + (curr_range / range_ind) * (numbers[min_ind] + range_ind * result);\n\
    \    }\n    numbers[min_ind] = result;\n    numbers[max_ind] = result;\n  }\n\
    \  return numbers;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_eie3xrx.d(12): Error: undefined identifier `FLT_MIN`

    /tmp/tmp_eie3xrx.d(13): Error: undefined identifier `FLT_MAX`

    /tmp/tmp_eie3xrx.d(25): Error: declaration `tmp_eie3xrx.rescale_to_unit.range`
    is already defined

    /tmp/tmp_eie3xrx.d(56): Error: undefined identifier `FLT_EPSILON`

    /tmp/tmp_eie3xrx.d(66): Error: undefined identifier `FLT_EPSILON`

    /tmp/tmp_eie3xrx.d(72): Error: cannot implicitly convert expression `min_ind`
    of type `float` to `ulong`

    /tmp/tmp_eie3xrx.d(74): Error: cannot implicitly convert expression `min_ind`
    of type `float` to `ulong`

    /tmp/tmp_eie3xrx.d(75): Error: cannot implicitly convert expression `max_ind`
    of type `float` to `ulong`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_eie3xrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tvar min = numbers[0], max = numbers[0];\n\tfor(var i=1; i<numbers.length;\
    \ i++)\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\telse\n\t\t\tif(numbers[i]\
    \ > max)\n\t\t\t\tmax = numbers[i];\n\t\t\n\tvar range = (max-min);\n\tvar ranged\
    \ = numbers.length == 1 ? range : range/numbers.length;\n\tvar result = new float[numbers.length];\n\
    \tfor(var i=0; i<numbers.length; i++)\n\t\tresult[i] = numbers[i]/ranged;\n\t\
    return result;\n}\n/*\n Returns distance (as float) between two points given as\
    \ (x,y) coordinates\n*/\nfloat distance(float[] a, float[] b)\n{\n\tfloat x0 =\
    \ a[0]-b[0], y0 = a[1]-b[1];\n\tfloat x1= a[0]-b[0], y1 = a[1]-b[1];\n\treturn\
    \ Math.sqrt(x0*x0+y0*y0);\n}\n/*\n Converts 2D coordinates (of form (x,y)) to\
    \ 3D coordinates (of form (x,y,z))\n*/\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqco5dte7.d(12): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(12): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(13): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(20): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(21): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(22): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(23): Error: undefined identifier `var`

    /tmp/tmpqco5dte7.d(34): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqco5dte7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int smallest;\n  int largest;\n  for (int i=0; i<numbers.length;\
    \ i++)\n  {\n    smallest = i;\n    largest = i;\n    for (int j=i+1; j<numbers.length;\
    \ j++)\n    {\n      if (numbers[j] < numbers[smallest])\n      {\n        smallest\
    \ = j;\n      }\n      else if (numbers[j] > numbers[largest])\n      {\n    \
    \    largest = j;\n      }\n    }\n    if (smallest != i)\n      float delta =\
    \ numbers[largest] - numbers[smallest];\n      numbers[i] = (numbers[i] - numbers[smallest])\
    \ / delta;\n      numbers[largest] = numbers[largest] * delta + numbers[i];\n\
    \    }\n  return numbers;\n}\n</code>\n<|/ a tags=algorithm,math,java |>\n<| c\
    \ |>\nThis works for negative numbers. But does not work for numbers that are\
    \ in the range [-1,1]. Any suggestions?\n<|/ c |>\n<| c |>\nThis approach doesn't\
    \ work for negative numbers.  For example, the number -0.3 becomes the number\
    \ -0.\n<|/ c |>\n<| c |>\nThis solution works for me.  Thanks.\n<|/ c |>\n<| a\
    \ |>\nI did it this way:\n<code>\nstatic float[] scale( float[] numbers ) {\n\
    \    float[] res = new float[numbers.length];\n    float minVal = numbers[0];\n\
    \    float maxVal = numbers[0];\n    int idx = 1;\n    int i = 1;\n    int j =\
    \ 0;\n    while ( i < numbers.length ) {\n        if ( numbers[i] > maxVal ) {\n\
    \            maxVal = numbers[i];\n            idx = i;\n        }\n        else\
    \ if ( numbers[i] < minVal ) {\n            minVal = numbers[i];\n           \
    \ idx = i;\n        }\n        i++;\n    }\n    float range = maxVal - minVal;\n\
    \    int scaleFactor = (int) Math.ceil(range);\n    int scaledLength = (scaleFactor\
    \ * numbers.length) + (numbers.length%scaleFactor == 0 ? 0 : 1);\n    res = new\
    \ float[scaledLength];\n    float scaledVal = 0;\n    for( int k = i; k < numbers.length;\
    \ k++ ) {\n        scaledVal = numbers[k] - minVal;\n        res[j++] = scaledVal/range;\n\
    \        res[j++] = scaledVal%range;\n    }\n    return res;\n}\n</code>\nAnd\
    \ a test is this one:\n<code>\npublic static void main(String[] args){\n    float[]\
    \ input = new float[]{0.1f, 0.2f, 0.3f, 0.4f};\n    float[] result = scale(input);\n\
    \    System.out.println( \nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_dgvo_k.d(36): Error: declaration expected, not `<`

    /tmp/tmpl_dgvo_k.d(42): Error: unterminated character constant

    /tmp/tmpl_dgvo_k.d(57): Error: declaration expected, not `while`

    /tmp/tmpl_dgvo_k.d(60): Error: no identifier for declarator `idx`

    /tmp/tmpl_dgvo_k.d(60): Error: declaration expected, not `=`

    /tmp/tmpl_dgvo_k.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_dgvo_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2) \n    {\n        return numbers;\n\
    \    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjd_acs1c.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjd_acs1c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  assert(numbers.length >= 2);\n  float min = float.MAX_VALUE;\n\
    \  float max = float.MIN_VALUE;\n  for (int i = 0; i < numbers.length; i++) \n\
    \  {\n    min = std::min(min, numbers[i]);\n    max = std::max(max, numbers[i]);\n\
    \  }\n  // Divide all numbers by max - min and scale by max - min\n  for (int\
    \ i = 0; i < numbers.length; i++) \n  {\n    numbers[i] /= (max - min);\n  }\n\
    \  return numbers;\n}\n</code>\n<|/ a tags=c++,unity3d,arrays |>\n<| c |>\nThis\
    \ is exactly what I am looking for but the thing is I only get 1 return and all\
    \ my numbers are still out of scale. I tried changing the min and max to float\
    \ but then my numbers are too big. I am very new to c++ and unity so I am sorry\
    \ if this is just a small error.\n<|/ c |>\n<| a |>\nI figured it out on my own.\n\
    <code>\nfloat[] rescale_to_unit(float[] numbers) \n{\n    float max = float.MIN_VALUE;\n\
    \    float min = float.MAX_VALUE;\n    for (int i = 0; i < numbers.length; i++)\n\
    \    {\n        if(numbers[i] > max)\n        {\n            max = numbers[i];\n\
    \        }\n        if(numbers[i] < min)\n        {\n            min = numbers[i];\n\
    \        }\n    }\n    float range = (max - min);\n    float new_array[] = new\
    \ float[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        new_array[i] = (numbers[i] - min) / range;\n    }\n    return new_array;\n\
    }\n</code>\n<|/ a tags=c++,unity3d,arrays dscore=0 |>\n<| c |>\nOk, so your answer\
    \ is incorrect. This code will result in an array of all numbers. What you are\
    \ looking for is a new array containing only the numbers divided by the range\
    \ of `max - min`. If you divide each number in the array by a range, then you\
    \ will only ever get one number (`0` or  `1`).\n<|/ c |>\n<| c |>\nThis is what\
    \ I needed. Thank you so much!\n<|/ c |>\n<| c |>\nThis code will result in an\
    \ array of all numbers. What you are looking for is a new array containing only\
    \ the numbers divided by the range of `max - min`. If you divide each number in\
    \ the array by a range, then you will only ever get one number (`0` or  `1`).\
    \ In your code you divide each element by `max - min` and then divide again by\
    \ `max - min`.\n<|/ c |>\n<| a dscore=0 |>\nTo rescale an array of numbers to\
    \ unit size, you need to \nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq31s8a01.d(17): Error: found `:` when expecting `;` following statement

    /tmp/tmpq31s8a01.d(17): Error: found `:` instead of statement

    /tmp/tmpq31s8a01.d(18): Error: found `:` when expecting `;` following statement

    /tmp/tmpq31s8a01.d(18): Error: found `:` instead of statement

    /tmp/tmpq31s8a01.d(27): Error: declaration expected, not `<`

    /tmp/tmpq31s8a01.d(39): Error: declaration expected, not `for`

    /tmp/tmpq31s8a01.d(39): Error: no identifier for declarator `i`

    /tmp/tmpq31s8a01.d(39): Error: declaration expected, not `<`

    /tmp/tmpq31s8a01.d(39): Error: no identifier for declarator `i`

    /tmp/tmpq31s8a01.d(39): Error: declaration expected, not `++`

    /tmp/tmpq31s8a01.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq31s8a01.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int i;\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (i = 1; i < numbers.length; i++){\n        if (numbers[i] > max) max\
    \ = numbers[i];\n        if (numbers[i] < min) min = numbers[i];\n    }\n    float\
    \ range = (max - min) * 0.1f;\n    float offset = min * 0.01f;\n    float[] result\
    \ = new float[numbers.length];\n    for (i = 0; i < numbers.length; i++)\n   \
    \     result[i] = offset + numbers[i] * range;\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nGood call!  I didn't realize `clamp` existed.\n<|/\
    \ c |>\n<| a dscore=1 tags=math,linear-algebra,android,java |>\nIf you're willing\
    \ to use external libraries, Apache Commons Math has a useful class called Interval.\
    \  It can easily be used to solve your problem.\n<code>\nInterval interval = new\
    \ Interval(0.f, 0.f);\nfor( float x : numbers)\n    interval.add(x);\n</code>\n\
    Then, you can get the min and max values by calling getLowerBound() and getUpperBound().\
    \  \nIf you're not willing to use external libraries, then you can implement this\
    \ yourself pretty easily.  There are a few ways to do this.  One is to have a\
    \ separate variable for each value in the array.  Then you can iterate through\
    \ each element of the array, and compare it to the other values.  When you find\
    \ a value that's bigger than any of the values from other elements, you update\
    \ the min value.  When you find a value that's smaller than any of the values\
    \ from other elements, you update the max value.\n<code>\nfloat minValue = numbers[0];\n\
    float maxValue = numbers[0];\nfor(float x : numbers)\n{\n    if(x < minValue)\n\
    \        minValue = x;\n    if(x > maxValue)\n        maxValue = x;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks Jim - I should have said that I'm willing to use external\
    \ libraries. Is there a way to do this without an external library? Thanks!\n\
    <|/ c |>\n<| c |>\nI added some code to show how to implement your own version\
    \ of this.\n<|/ c |>\n<| c |>\nI actually just added code to my question, but\
    \ I just added it because my last answer didn't really address my question...\
    \ I guess I don't have a great grasp of the math of linear algebra yet. Thanks\
    \ for the help!\n<|/ c |>\n<| c |>\nThat code should do what you want.  It's not\
    \ particularly efficient, but it's probably the most straightforward.  It's certainly\
    \ not that bad if you just want to do it once.\n<|/ c |>\n<| \nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7z7ep1n.d(26): Error: declaration expected, not `<`

    /tmp/tmpb7z7ep1n.d(29): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(32): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(35): Error: declaration expected, not `for`

    /tmp/tmpb7z7ep1n.d(37): Error: declaration expected, not `<`

    /tmp/tmpb7z7ep1n.d(39): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(39): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(39): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(43): Error: declaration expected, not `for`

    /tmp/tmpb7z7ep1n.d(47): Error: declaration expected, not `if`

    /tmp/tmpb7z7ep1n.d(49): Error: unrecognized declaration

    /tmp/tmpb7z7ep1n.d(53): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(59): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(59): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(62): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(62): Error: unterminated character constant

    /tmp/tmpb7z7ep1n.d(62): Erro'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int len = numbers.length;\n    if (len < 2) throw new IllegalArgumentException(\"\
    Length must be at least 2\");\n    float sum = 0;\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 0; i < len; i++) {\n        float\
    \ n = numbers[i];\n        if (n < min) min = n;\n        if (n > max) max = n;\n\
    \        sum += n;\n    }\n    float avg = (float)sum / (float)len;\n    float[]\
    \ rescaled = new float[len];\n    for (int i = 0; i < len; i++) {\n        float\
    \ n = numbers[i];\n        rescaled[i] = (n - avg) * (max - min) / (max - min)\
    \ + min;\n    }\n    return rescaled;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbtrt_psm.d(23): Error: C style cast illegal, use `cast(float)sum`

    /tmp/tmpbtrt_psm.d(23): Error: C style cast illegal, use `cast(float)len`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbtrt_psm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  double min = numbers[0];\n  double max = numbers[0];\n  for\
    \ (int i = 1; i < numbers.length; i++) \n  {\n    if (numbers[i] < min) min =\
    \ numbers[i];\n    if (numbers[i] > max) max = numbers[i];\n  }\nunittest\n{\n\
    \    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegwxgjix.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegwxgjix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2) return numbers;\n    \n    float[]\
    \ scaled = numbers;\n    float[] result = new float[scaled.length];\n    \n  \
    \  result[0] = scaled[0];\n    for(int i = 1; i < scaled.length; ++i)\n    {\n\
    \        result[i] = result[i-1] + scaled[i]/result[i-1];\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx5yv6zch.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290bd]

    ??:? void tmpx5yv6zch.__unittest_L25_C1() [0x42897e]

    ??:? void tmpx5yv6zch.__modtest() [0x428e3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d4e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c37a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431605]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431ab4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431591]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c351]

    ??:? runModuleUnitTests [0x42d2bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429580]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int num_points = numbers.length; // The number of numbers\
    \ to be rescaled\n    float minimum = std.minfloat;\n    float maximum = std.maxfloat;\n\
    \    \n    // Loop through the points\n    for (int i = 0; i < num_points; i++)\
    \ {\n        // Find the new number based on the old number\n        float new_number\
    \ = numbers[i] / (maximum - minimum);\n        // The new number is now in the\
    \ range [minimum, maximum]\n        // We then rescale each element in the new\
    \ array based on the new number\n        numbers[i] = std.min(std.max(minimum,\
    \ new_number), maximum);\n    }\n    return numbers;\n}\n// End of rescale_to_unit\
    \ function\n</code>\n<|/ a tags=c#,math,algorithm |>\n<| c |>\nThe code in the\
    \ question is already C#. Why add Java and Python tags?\n<|/ c |>\n<| a dscore=4\
    \ tags=c#,math,algorithm |>\nUsing MathNet Numerics, it's easy:\n<code>\ndouble[]\
    \ originalArray = { 1, 2, 3, 4, 5 };\ndouble[] rescaledArray = new double[originalArray.Length];\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphd9x1sk9.d(27): Error: declaration expected, not `<`

    /tmp/tmphd9x1sk9.d(33): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphd9x1sk9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    // The maximum value in the array is 10^15. We need to find\
    \ the closest value to 10 which will become \n    // 1 and then divide by 10 to\
    \ get the same scaling as in rescale_to_unit.\n    // This is done by subtracting\
    \ the minimum number from the maximum number, then finding the value \n    //\
    \ which is closest to 10 and dividing by 10. Then we multiply the result by 10\
    \ to get the original \n    // scaling.\n    double maximum = Math.max(numbers);\n\
    \    double minimum = Math.min(numbers);\n    double diff = Math.abs(maximum -\
    \ minimum);\n    double scale = (diff / 10.0) + 0.5;\n    double scaledNumbers\
    \ = numbers / scale;\n    float[] rescaledNumbers = new float[scaledNumbers.length];\n\
    \    for (int i = 0; i < rescaledNumbers.length; i++)\n        rescaledNumbers[i]\
    \ = scaledNumbers[i] * scale;\n    return rescaledNumbers;\n}\nunittest\n{\n \
    \   alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz2ptkblv.d(17): Error: undefined identifier `Math`

    /tmp/tmpz2ptkblv.d(18): Error: undefined identifier `Math`

    /tmp/tmpz2ptkblv.d(19): Error: undefined identifier `Math`

    /tmp/tmpz2ptkblv.d(21): Error: incompatible types for `(numbers) / (scale)`: `float[]`
    and `double`

    /tmp/tmpz2ptkblv.d(22): Error: no property `length` for type `double`

    /tmp/tmpz2ptkblv.d(24): Error: only one index allowed to index `double`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz2ptkblv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  // TODO: throw exception if given array is null\n  float[] new_numbers\
    \ = new float[numbers.length];\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu1rkt9_p.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu1rkt9_p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        result[i] = mathf.clamp(numbers[i],\
    \ 0f, 1f);\n    }\n    return result;\n}\n</code>\n<|/ a tags=math,unity3d,c#\
    \ dscore=0 |>\n<| a tags=math,unity3d,c# |>\nThe answer from Patrick worked in\
    \ Unity 2020.1.16f1 using Vector2.Lerp. But I needed a solution that would work\
    \ with Vector3.Lerp. I figured out how to do this; I used the answer from Rufus\
    \ (https://stackoverflow.com/a/52616114/2739530) with the addition of a small\
    \ adjustment to handle the Vector3.Lerp function. I posted an answer here in case\
    \ it helps someone. \nI used the following code as my solution:\n<code>\npublic\
    \ static Vector2 Lerp2(Vector2 v1, Vector2 v2, float t)\n{\n    return (v1.x *\
    \ t + v2.x * (1f - t)) / (1f - t);\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j3z60jo.d(19): Error: declaration expected, not `<`

    /tmp/tmp1j3z60jo.d(22): Error: semicolon expected, not `the`

    /tmp/tmp1j3z60jo.d(22): Error: semicolon expected, not `from`

    /tmp/tmp1j3z60jo.d(22): Error: found `:` when expecting `)`

    /tmp/tmp1j3z60jo.d(23): Error: semicolon expected following function declaration

    /tmp/tmp1j3z60jo.d(23): Error: semicolon expected, not `the`

    /tmp/tmp1j3z60jo.d(23): Error: semicolon expected, not `code`

    /tmp/tmp1j3z60jo.d(23): Error: semicolon expected, not `my`

    /tmp/tmp1j3z60jo.d(23): Error: semicolon expected, not `:`

    /tmp/tmp1j3z60jo.d(23): Error: declaration expected, not `:`

    /tmp/tmp1j3z60jo.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j3z60jo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tif (numbers.Length < 2)\n\t\treturn numbers;\n\tfloat min =\
    \ System.Math.Min(numbers[0], numbers[1]);\n\tfloat max = System.Math.Max(numbers[0],\
    \ numbers[1]);\n\tfloat[] rescaled = new float[numbers.Length];\n\tfor (int i\
    \ = 0; i < numbers.Length; i++) \n\t{\n\t\trescaled[i] = (numbers[i] - min) /\
    \ (max - min);\n\t}\n\treturn rescaled;\n}\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x8nt9pv.d(12): Error: no property `Length` for type `float[]`

    /tmp/tmp0x8nt9pv.d(14): Error: undefined identifier `System`

    /tmp/tmp0x8nt9pv.d(15): Error: undefined identifier `System`

    /tmp/tmp0x8nt9pv.d(16): Error: no property `Length` for type `float[]`

    /tmp/tmp0x8nt9pv.d(17): Error: no property `Length` for type `float[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0x8nt9pv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] unit = new float[numbers.length];\n\tfloat min = FLT_MAX;\n\
    \tfloat max = -FLT_MAX;\n\tfloat sum = 0;\n\tfloat diff;\n\tfor(int i = 0; i <\
    \ numbers.length; i++) \n\t{\n\t\tdiff = numbers[i] - min;\n\t\tmin = Math.min(min,\
    \ diff);\n\t\tmax = Math.max(max, diff);\n\t\tsum += diff * diff;\n\t\tunit[i]\
    \ = diff / Math.sqrt(sum);\n\t}\n\treturn unit;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg14i4afo.d(13): Error: undefined identifier `FLT_MAX`

    /tmp/tmpg14i4afo.d(14): Error: undefined identifier `FLT_MAX`

    /tmp/tmpg14i4afo.d(20): Error: undefined identifier `Math`

    /tmp/tmpg14i4afo.d(21): Error: undefined identifier `Math`

    /tmp/tmpg14i4afo.d(23): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg14i4afo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] result = new float[numbers.length];\n\tfor (uint i =\
    \ 0; i < numbers.length; ++i)\n\t\tresult[i] = (float)(numbers[i]) / (float)(numbers.length\
    \ - 1);\n\treturn result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxt5siev1.d(14): Error: C style cast illegal, use `cast(float)numbers[i]`

    /tmp/tmpxt5siev1.d(14): Error: C style cast illegal, use `cast(float)(numbers.length
    - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt5siev1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float smallest\
    \ = float.MAX_VALUE;\n    float largest = float.MIN_VALUE;\n    for(int i = 0;\
    \ i < numbers.length; i++)\n    {\n        float current = numbers[i];\n     \
    \   smallest += current;\n        largest = Math.max(largest, current);\n    \
    \    result[i] = smallest / (largest - smallest + 1.0f);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06os66b_.d(13): Error: no property `MAX_VALUE` for type `float`

    /tmp/tmp06os66b_.d(14): Error: no property `MIN_VALUE` for type `float`

    /tmp/tmp06os66b_.d(19): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06os66b_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int i;\n    float max = numbers[0];\n    float min = numbers[0];\n\
    \    float total = numbers[0];\n    for(i = 0; i < numbers.length; ++i)\n    {\n\
    \        float v = numbers[i];\n        min = v < min ? v : min;\n        max\
    \ = v > max ? v : max;\n        total += v;\n    }\n    if(total == 0) return\
    \ new float[0];\n    \n    float invscale = 1.0f / total;\n    float[] ret = new\
    \ float[numbers.length];\n    for(i = 0; i < numbers.length; ++i)\n    {\n   \
    \     ret[i] = numbers[i] * invscale;\n    }\n    return ret;\n}\n/*\n Given a\
    \ 2D array of numbers, apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([[0.0,\
    \ 1.0], [2.0, 3.0], [4.0, 5.0]])\n    [[0.0, 0.25], [0.5, 0.75], [1.0, 1.0]]\n\
    \    \n*/\nfloat[][] rescale_to_unit(float[][] numbers) \n{\n    int i, j;\n \
    \   float maxes[] = new float[numbers.length];\n    float mins[] = new float[numbers.length];\n\
    \    float totals[] = new float[numbers.length];\n    for(i = 0; i < numbers.length;\
    \ ++i)\n    {\n        float v = numbers[i][0];\n        float vMin = numbers[i][0];\n\
    \        float vMax = numbers[i][0];\n        for(j = 0; j < numbers[i].length;\
    \ ++j)\n        {\n            v = numbers[i][j];\n            vMin = v < vMin\
    \ ? v : vMin;\n            vMax = v > vMax ? v : vMax;\n        }\n        maxes[i]\
    \ = vMax;\n        mins[i] = vMin;\n        totals[i] = v + totals[i];\n    }\n\
    \    float invscale = 1.0f / totals[0];\n    float[][] ret = new float[numbers.length][];\n\
    \    for(i = 0; i < numbers.length; ++i)\n    {\n        ret[i] = new float[numbers[i].length];\n\
    \        for(j = 0; j < numbers[i].length; ++j)\n        {\n            ret[i][j]\
    \ = numbers[i][j] * invscale;\n        }\n    }\n    return ret;\n}\n/*\n Given\
    \ a 3D array of numbers, apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([[0.0,\
    \ 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])\n    [[0.0, 0.25, 0.75], [0.5,\
    \ 1.0, 1.25], [0.25, 1.25, 1.75]]\n    \n*/\nfloat[][][] rescale_to_unit(float[]\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyye2ra5k.d(43): Deprecation: instead of C-style syntax, use D-style
    syntax `float[] maxes`

    /tmp/tmpyye2ra5k.d(44): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] mins`

    /tmp/tmpyye2ra5k.d(45): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] totals`

    /tmp/tmpyye2ra5k.d(81): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyye2ra5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double sum = 0.0;\n    for (float n : numbers)\n    {\n  \
    \      sum += n;\n    }\n    double len = MathUtils.doubleLength(numbers);\n \
    \   return ArrayUtilities.transformToUnit(numbers, len / sum);\n}\n/*\n Given\
    \ array 'numbers' of numbers, return the same array with an element 'offset' added,\
    \ such that the smallest number will become 0 and the largest will become 'offset\
    \ + 1'\n    >>> rescale_to_unit([1.0, 2.0, 3.0], 0.0)\n    [0.0, 0.0, 3.0]\n \
    \   \n*/\nfloat[] rescale_to_unit(float[] numbers, double offset) \n{\n    float\
    \ min = 0;\n    for (float n : numbers)\n    {\n        if (n < min)\n       \
    \ {\n            min = n;\n        }\n    }\n    float max = (float)offset + 1;\n\
    \    float[] ret = ArrayUtilities.transformToUnit(numbers, max - min);\n    for\
    \ (float n : numbers)\n    {\n        if (n < min)\n        {\n            ret[n]\
    \ += offset;\n        }\n    }\n    return ret;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.50, 0.75, 1.0]\n\
    \    \n*/\ndouble[] rescale_to_unit(double[] numbers) \n{\n    double sum = 0.0;\n\
    \    for (double n : numbers)\n    {\n        sum += n;\n    }\n    double len\
    \ = MathUtils.doubleLength(numbers);\n    return ArrayUtilities.transformToUnit(numbers,\
    \ len / sum);\n}\n/*\n Given array 'numbers' of numbers, return the same array\
    \ with an element 'offset' added, such that the smallest number will become 0\
    \ and the largest will become 'offset + 1'\n    >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0], 0.0)\n    [0.0, 0.0, 3.0]\n    \n*/\ndouble[] rescale_to_unit(double[]\
    \ numbers, double offset) \n{\n    double min = 0.0;\n    for (double n : numbers)\n\
    \    {\n        if (n < min)\n        {\n            min = n;\n        }\n   \
    \ }\n    double max = (double)offset + 1;\n    double[] ret = ArrayUtilities.transformToUnit(numbers,\
    \ max - min);\n    for (double n : numbers)\n    {\n        if (n < min)\n   \
    \     {\n            ret[n] += offset;\n        }\n    }\n    return ret;\n}\n\
    /*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest \nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp93zxrd0_.d(13): Error: semicolon expected, not `:`

    /tmp/tmp93zxrd0_.d(13): Error: expression expected, not `:`

    /tmp/tmp93zxrd0_.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp93zxrd0_.d(29): Error: semicolon expected, not `:`

    /tmp/tmp93zxrd0_.d(29): Error: expression expected, not `:`

    /tmp/tmp93zxrd0_.d(29): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp93zxrd0_.d(36): Error: C style cast illegal, use `cast(float)offset`

    /tmp/tmp93zxrd0_.d(38): Error: semicolon expected, not `:`

    /tmp/tmp93zxrd0_.d(38): Error: expression expected, not `:`

    /tmp/tmp93zxrd0_.d(38): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp93zxrd0_.d(57): Error: semicolon expected, not `:`

    /tmp/tmp93zxrd0_.d(57): Error: expression expected, not `:`

    /tmp/tmp93zxrd0_.d(57): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp93zxrd0_.d(73): Error: semicolon expected, not `:`

    /tmp/tmp93zxrd0_.d(73): Error: expression ex'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] range = new float[numbers.length];\n    for(int i\
    \ = 0; i < range.length; ++i) range[i] = numbers[i]/numbers[0];\n    return std.typecons.map(range,\
    \ std.math.identity, std.math.zero);\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr4zcv831.d(14): Error: undefined identifier `map` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr4zcv831.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = min(numbers);\n    float max = max(numbers);\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkb3ekgo9.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkb3ekgo9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] newArray = new float[numbers.length];\n    int length\
    \ = numbers.length;\n    int maxIndex = length - 1;\n    int minIndex = 0;\n \
    \   float min = numbers[0];\n    float max = numbers[0];\n    for(int i = 0; i\
    \ < numbers.length; i++)\n    {\n        if(numbers[i] < min)\n        {\n   \
    \         min = numbers[i];\n            minIndex = i;\n        }\n        else\
    \ if(numbers[i] > max)\n        {\n            max = numbers[i];\n           \
    \ maxIndex = i;\n        }\n    }\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        if(numbers[i] == min)\n            newArray[i] = 0.0;\n      \
    \  else if(numbers[i] == max)\n            newArray[i] = 1.0;\n        else\n\
    \        {\n            float newValue = (numbers[i] - min) / (max - min);\n \
    \           newArray[i] = newValue;\n        }\n    }\n    return newArray;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=3 |>\n<code>\n// Scale the array from min to\
    \ max to 0-1\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp573ow_h3.d(45): Error: declaration expected, not `<`

    /tmp/tmp573ow_h3.d(54): Error: declaration expected, not `assert`

    /tmp/tmp573ow_h3.d(55): Error: declaration expected, not `assert`

    /tmp/tmp573ow_h3.d(56): Error: declaration expected, not `assert`

    /tmp/tmp573ow_h3.d(57): Error: declaration expected, not `assert`

    /tmp/tmp573ow_h3.d(58): Error: declaration expected, not `assert`

    /tmp/tmp573ow_h3.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp573ow_h3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int minPos = 0;\n    int maxPos = 0;\n    float minNum = FLT_MIN;\n\
    \    float maxNum = FLT_MAX;\n    \n    for (int i = 0; i < numbers.length; ++i)\
    \ {\n        if (numbers[i] > maxNum) {\n            maxNum = numbers[i];\n  \
    \          maxPos = i;\n        }\n        else if (numbers[i] < minNum) {\n \
    \           minNum = numbers[i];\n            minPos = i;\n        }\n    }\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnavmfwy4.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnavmfwy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  // This works because we assume that numbers has at least two\
    \ elements\n  if(numbers.length == 1) return numbers;\n  \n  // Calculate maximum\
    \ value\n  float max = MathfUtil.maxValue(numbers);\n  \n  // Scale all numbers\
    \ by this max\n  for(int i = 0; i < numbers.length; i++)\n  {\n    numbers[i]\
    \ = ((float) numbers[i] / max);\n  }\n  return numbers;\n}\n/*\n Given array of\
    \ numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the largest number will become 1 and the smallest will become 0\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.5, 1.0, 1.5, 2.0,\
    \ 2.5]\n    \n*/\nfloat[] rescale_to_unit(float numbers[]) \n{\n  // This works\
    \ because we assume that numbers has at least two elements\n  if(numbers.length\
    \ == 1) return numbers;\n  \n  // Calculate minimum value\n  float min = MathfUtil.minValue(numbers);\n\
    \  \n  // Scale all numbers by this min\n  for(int i = 0; i < numbers.length;\
    \ i++)\n  {\n    numbers[i] = ((float) numbers[i] / min);\n  }\n  return numbers;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjok3b85.d(21): Error: C style cast illegal, use `cast(float)numbers[i]`

    /tmp/tmpsjok3b85.d(32): Deprecation: instead of C-style syntax, use D-style syntax
    `float[] numbers`

    /tmp/tmpsjok3b85.d(43): Error: C style cast illegal, use `cast(float)numbers[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjok3b85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if(numbers.length < 2) \n    return numbers;\n  // get min and\
    \ max of input arrays\n  double min = numbers[0];\n  double max = numbers[0];\n\
    \  for (int i = 1; i < numbers.length; ++i) \n  {\n    if (numbers[i] < min) \n\
    \      min = numbers[i];\n    if (numbers[i] > max) \n      max = numbers[i];\n\
    \  }\n  // calculate output range based on min/max of input array\n  double range\
    \ = max - min;\n  // scale each element in array from min to max\n  double[] output\
    \ = std.array.repeat(0.0, numbers.length);\n  for (int i = 0; i < numbers.length;\
    \ ++i)\n    output[i] = numbers[i] - min;\n  return std.array.map(output, range,\
    \ (double n) => std.min(1.0, (1.0 + n) / range));\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a logarithmic transform to that array,\n \
    \   such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\ndouble[] rescale_to_unit(double[] numbers) \n{\n  if(numbers.length\
    \ < 2) \n    return numbers;\n  // get min and max of input arrays\n  double min\
    \ = numbers[0];\n  double max = numbers[0];\n  for (int i = 1; i < numbers.length;\
    \ ++i) \n  {\n    if (numbers[i] < min) \n      min = numbers[i];\n    if (numbers[i]\
    \ > max) \n      max = numbers[i];\n  }\n  // calculate output range based on\
    \ min/max of input array\n  double range = max - min;\n  // scale each element\
    \ in array from min to max\n  double[] output = std.array.repeat(0.0, numbers.length);\n\
    \  for (int i = 0; i < numbers.length; ++i)\n    output[i] = numbers[i] - min;\n\
    \  return std.array.map(output, range, (double n) => std.min(1.0, (1.0 + n) /\
    \ range));\n}\n/*\n Given array of numbers (of at least two elements), apply a\
    \ logistics transform to that array,\n    such that the smallest number will become\
    \ 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, double min) \n{\n  if(numbers.length < 2) \n    return numbers;\n \
    \ // get min and max of input arrays\n  double max = numbers[0];\n  for (int i\
    \ = 1; i < numbers.length; ++i) \n  {\n    if (numbers[i] > max) \n\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp60laa0no.d(78): Error: found `unittest` instead of statement

    /tmp/tmp60laa0no.d(88): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp60laa0no.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tif (numbers.length == 0) return numbers;\n\t\n\tfloat[] rescaled\
    \ = new float[numbers.length];\n\tfloat minValue = numbers[0];\n\tfloat maxValue\
    \ = numbers[0];\n\tfor (int i = 0; i < numbers.length; i++)\n\t{\n\t\tfloat value\
    \ = numbers[i];\n\t\tminValue = min(value, minValue);\n\t\tmaxValue = max(value,\
    \ maxValue);\n\t}\n\t\n\tdouble range = (maxValue - minValue);\n\tfloat offset\
    \ = range * minValue;\n\t\n\trescaled[0] = minValue;\n\tfor (int i = 1; i < rescaled.length;\
    \ i++)\n\t{\n\t\trescaled[i] = (rescaled[i - 1] + offset) / 2;\n\t}\n\t\n\treturn\
    \ rescaled;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxe_j30vy.d(20): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpxe_j30vy.d(21): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxe_j30vy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int len = numbers.length;\n    float min = numbers[0];\n \
    \   float max = numbers[0];\n    for(int i = 0; i < len - 1; i++)\n    {\n   \
    \     min = math.min(min, numbers[i]);\n        max = math.max(max, numbers[i]);\n\
    \    }\n    float[] ret = new float[len];\n    for(int i = 0; i < len; i++)\n\
    \    {\n        ret[i] = numbers[i] - min;\n    }\n    return ret;\n}\n</code>\n\
    <|/ a tags=arrays,c#,list |>\n<| c |>\nThe \"list\" in the title is not the actual\
    \ C# list type. And the solution by user207421 is actually incorrect as it will\
    \ return negative values for large arrays (ex. [1000000000000.0, 42]) because\
    \ the min and max values are swapped before calculating the mean.\n<|/ c |>\n\
    <| a tags=arrays,c#,list dscore=5 |>\nThis question has already been answered,\
    \ but here is my solution in Python.\n<code>\npublic static double[] ScaleToUnit(double[]\
    \ nums) {\n    if (nums == null || nums.Length == 0) return nums;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ihj_xqa.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ihj_xqa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tif (numbers.length < 2) \n\t{\n\t\tthrow new Exception(\"rescale_to_unit:\
    \ requires 2 or more elements\");\n\t}\n\t\n\t// get smallest and largest number\n\
    \tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor (int i = 1; i < numbers.length;\
    \ i++)\n\t{\n\t\tmin = std.min(min, numbers[i]);\n\t\tmax = std.max(max, numbers[i]);\n\
    \t}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefq0vrou.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefq0vrou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] scaled = numbers.clone();\n    double smallest = scaled.min();\n\
    \    double largest = scaled.max();\n    \n    double range = largest - smallest;\n\
    \    for (int i = 0; i < scaled.length; i++) {\n        scaled[i] = scaled[i]/range;\n\
    \    }\n    return scaled;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis won't\
    \ work because there is no guarantee that `numbers` is sorted (it could even be\
    \ unsorted).\n<|/ c |>\n<| c |>\nI agree. But that's a big if. I'm assuming that\
    \ the numbers array is sorted and that the values within it are all greater than\
    \ 0.\n<|/ c |>\n<| a dscore=1 tags=arrays,java,algorithm |>\n<code>\npublic int[]\
    \ RescaleArray(int[] nums){\n    int smallest = nums[0];\n    int largest = nums[0];\n\
    \    int scale = 0;\n    for(int i = 0; i < nums.length; i++){\n        if(nums[i]\
    \ < smallest){\n            smallest = nums[i];\n        }\n        if(nums[i]\
    \ > largest){\n            largest = nums[i];\n        }\n    }\n    for(int i\
    \ = 0; i < nums.length; i++){\n        nums[i] = (int) (nums[i]*(largest - smallest)/scale\
    \ + smallest);\n    }\n    return nums;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the numbers are out of order\n<|/ c |>\n<| c |>\nPlease read my code\
    \ carefully. Even if numbers are out of order, this method will work.\n<|/ c |>\n\
    <| c |>\nThis won't work if `nums` is an array of negative numbers (in other words,\
    \ all numbers are equal).\n<|/ c |>\n<| c |>\nAlso this won't work if `nums` is\
    \ `null`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n public static int[] RescaleArray(int[]\
    \ nums) {\n    int smallest = Integer.MAX_VALUE;\n    int largest = Integer.MIN_VALUE;\n\
    \    for (int i = 0; i < nums.length; i++) {\n        if (smallest > nums[i])\
    \ {\n            smallest = nums[i];\n        }\n        if (largest < nums[i])\
    \ {\n            largest = nums[i];\n        }\n    }\n    for (int i = 0; i <\
    \ nums.length; i++) {\n        nums[i] = nums[i] - (smallest - largest) * i /\
    \ nums.length;\n    }\n    return nums;\n}\n</code>\n<|/ a tags=arrays,java,algorithm\
    \ |>\n<| c |>\nThis won't work if the numbers are out of order\n<|/ c |>\n<| a\
    \ tags=arrays,java\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n  \
    \  assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbbzvtfv.d(22): Error: declaration expected, not `<`

    /tmp/tmphbbzvtfv.d(25): Error: unterminated character constant

    /tmp/tmphbbzvtfv.d(28): Error: unterminated character constant

    /tmp/tmphbbzvtfv.d(28): Error: unterminated character constant

    /tmp/tmphbbzvtfv.d(36): Error: declaration expected, not `for`

    /tmp/tmphbbzvtfv.d(36): Error: no identifier for declarator `i`

    /tmp/tmphbbzvtfv.d(36): Error: declaration expected, not `<`

    /tmp/tmphbbzvtfv.d(36): Error: no identifier for declarator `i`

    /tmp/tmphbbzvtfv.d(36): Error: declaration expected, not `++`

    /tmp/tmphbbzvtfv.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbbzvtfv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2) \n        return numbers;\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for(int i=1; i<numbers.length;\
    \ i++)\n    {\n        min = Math.min(min, numbers[i]);\n        max = Math.max(max,\
    \ numbers[i]);\n    }\n    float range = max - min;\n    for(int i=1; i<numbers.length;\
    \ i++)\n    {\n        numbers[i] /= range;\n    }\n    return numbers;\n}\n/*\n\
    \ Transform an array of numbers (of at least two elements) with a given transform\
    \ function,\n    such that the smallest number will become 0 and the largest will\
    \ become 1\n    e.g. -\n    float min = -100;\n    float max = 100;\n    rescale_transform([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], x -> x + min)\n    [0.0, -1.0, -1.0, -1.0, -1.0]\n*/\n\
    float[] rescale_transform(float[] numbers, UnaryOp<float[], float> f) \n{\n  \
    \  float[] result = new float[numbers.length];\n    if (numbers.length < 2) \n\
    \        return result; \n    float min = f(numbers[0]);\n    float max = f(numbers[0]);\n\
    \    for(int i=1; i<numbers.length; i++)\n    {\n        min = Math.min(min, f(numbers[i]));\n\
    \        max = Math.max(max, f(numbers[i]));\n    }\n    float range = max - min;\n\
    \    for(int i=1; i<numbers.length; i++)\n    {\n        result[i] = f(numbers[i])\
    \ - min;\n        result[i] /= range;\n    }\n    return result;\n}\n/*\n Take\
    \ a sample from a given distribution, with some probability\n    e.g. -\n    float\
    \ p = [0.5, 0.1, 0.2];\n    float[] sample = sample_from_dist(p, 3);\n    float[]\
    \ expected = [0.5, 0.1, 0.2];\n    print(sample == expected);\n    true\n*/\n\
    float[] sample_from_dist(float[] p, int size)\n{\n    int size = Math.max(1, size);\n\
    \    float[] sample = new float[size];\n    int n = 0;\n    while(n < size)\n\
    \    {\n        int rnd = rand.nextInt(p.length);\n        sample[n] = p[rnd];\n\
    \        n++;\n    }\n    return sample;\n}\n/*\n Calculate the probability that\
    \ one element of a given array is less than another\n    e.g. -\n    float min\
    \ = -100;\n    float max = 100;\n    float probability = calc_probability([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], x -> x < max);\n    print(probability);\n    0.25\n*/\n\
    float calc_probability(float[] numbers, UnaryOp<float[], boolean> f)\n{\n    float\
    \ total = 0;\n    for (int i=0; i<numbers.length; i++)\n    {\n        if (numbers[i]\
    \ < f(numbers[i]))\n\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzn1edzo_.d(37): Error: found `<` when expecting `)`

    /tmp/tmpzn1edzo_.d(37): Error: semicolon expected following function declaration

    /tmp/tmpzn1edzo_.d(37): Error: no identifier for declarator `float[]`

    /tmp/tmpzn1edzo_.d(37): Error: declaration expected, not `,`

    /tmp/tmpzn1edzo_.d(40): Error: declaration expected, not `if`

    /tmp/tmpzn1edzo_.d(44): Error: declaration expected, not `for`

    /tmp/tmpzn1edzo_.d(44): Error: no identifier for declarator `i`

    /tmp/tmpzn1edzo_.d(44): Error: declaration expected, not `<`

    /tmp/tmpzn1edzo_.d(44): Error: no identifier for declarator `i`

    /tmp/tmpzn1edzo_.d(44): Error: declaration expected, not `++`

    /tmp/tmpzn1edzo_.d(47): Error: no identifier for declarator `max`

    /tmp/tmpzn1edzo_.d(47): Error: declaration expected, not `=`

    /tmp/tmpzn1edzo_.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzn1edzo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2)\n        return numbers;\n    float[]\
    \ result = new float[numbers.length];\n    \n    double smallest = Math.min(numbers[0],\
    \ numbers[1]);\n    double largest = Math.max(numbers[0], numbers[1]);\n    double\
    \ range = largest - smallest;\n    double mean = (double)numbers[0] + (double)numbers[1];\n\
    \    double multiplier = range / mean;\n    result[0] = smallest;\n    result[1]\
    \ = (double)numbers[0] / multiplier;\n    result[2] = (double)numbers[1] / multiplier;\n\
    \    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nNice solution,\
    \ but I prefer a solution without loops.\n<|/ c |>\n<| c |>\nThis is my preferred\
    \ solution too. Loops are not a big deal, especially in Java. But the math library\
    \ is still loops under the hood, so...\n<|/ c |>\n<| a dscore=0 |>\nMy solution\
    \ uses the same logic as Sanders' answer, but avoids loops.\n<code>\npublic static\
    \ double meanFromArray(int[] array)\n{\n    if(array.length < 2) return Double.NaN;\n\
    \    int smallest = array[0];\n    int largest = array[0];\n    int sum = 0;\n\
    \    for (int i = 0; i < array.length; i++)\n    {\n        if(largest < array[i])\
    \ {\n            largest = array[i];\n        }\n        if(smallest > array[i])\
    \ {\n            smallest = array[i];\n        }\n        sum += array[i];\n \
    \   }\n    return (double)sum / array.length;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppm_nkkm5.d(19): Error: C style cast illegal, use `cast(double)numbers[0]`

    /tmp/tmppm_nkkm5.d(19): Error: C style cast illegal, use `cast(double)numbers[1]`

    /tmp/tmppm_nkkm5.d(22): Error: C style cast illegal, use `cast(double)numbers[0]`

    /tmp/tmppm_nkkm5.d(23): Error: C style cast illegal, use `cast(double)numbers[1]`

    /tmp/tmppm_nkkm5.d(27): Error: declaration expected, not `<`

    /tmp/tmppm_nkkm5.d(36): Error: unterminated character constant

    /tmp/tmppm_nkkm5.d(44): Error: declaration expected, not `for`

    /tmp/tmppm_nkkm5.d(44): Error: no identifier for declarator `i`

    /tmp/tmppm_nkkm5.d(44): Error: declaration expected, not `<`

    /tmp/tmppm_nkkm5.d(44): Error: no identifier for declarator `i`

    /tmp/tmppm_nkkm5.d(44): Error: declaration expected, not `++`

    /tmp/tmppm_nkkm5.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppm_nkkm5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    double largest\
    \ = 0;\n    double smallest = 1;\n    for (int i = 0; i < numbers.length; ++i)\n\
    \    {\n        float currentNumber = numbers[i];\n        largest = Mathf.Max(largest,\
    \ currentNumber);\n        smallest = Mathf.Min(smallest, currentNumber);\n  \
    \      result[i] = Mathf.Lerp(smallest, largest, currentNumber);\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI think you mean `Mathf.Lerp`.\n\
    <|/ c |>\n<| c |>\nFor anyone else who's wondering what Mathf.Lerp is for in Unity3D;\
    \ it's basically a linear interpolation function\n<|/ c |>\n<| c |>\nTo get `Mathf.Lerp`\
    \ to work in Unity I had to add `using UnityEngine;` at the top of the script.\n\
    <|/ c |>\n<| a tags=unity3d,c# |>\n<code>\npublic static float RescaleToUnit(float[]\
    \ array)\n{\n    float scale = Math.Min(Mathf.Min(array[0]), Mathf.Min(array[1]));\n\
    \    float offset = Mathf.Max(Mathf.Max(array[0]), Mathf.Max(array[1]));\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_b791opy.d(24): Error: declaration expected, not `<`

    /tmp/tmp_b791opy.d(30): Error: unterminated character constant

    /tmp/tmp_b791opy.d(30): Error: unterminated character constant

    /tmp/tmp_b791opy.d(30): Error: no identifier for declarator `it`

    /tmp/tmp_b791opy.d(30): Error: declaration expected, not `63U`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_b791opy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int i = 0;\n    if (numbers.length > 1) {\n        int min\
    \ = numbers[0];\n        int max = numbers[0];\n        float average;\n     \
    \   float sum = 0.0;\n        float numerator = 1.0;\n        float denominator\
    \ = 1.0;\n        \n        for (i = 1; i < numbers.length; ++i) {\n         \
    \   sum = (sum + numbers[i]) / i;\n            average = sum / i;\n          \
    \  numerator = numerator + (average-min);\n            denominator = denominator\
    \ + (numbers[i] - average);\n            if (denominator < 0.000001f)\n      \
    \          throw new RuntimeException(\"Too many identical numbers.\");\n    \
    \    }\n        \n        for (i = 0; i < numbers.length; ++i) {\n           \
    \ numbers[i] -= min;\n            numbers[i] = numerator/denominator;\n      \
    \  }\n    }\n    return numbers;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdyt5sr91.d(14): Error: cannot implicitly convert expression `numbers[0]`
    of type `float` to `int`

    /tmp/tmpdyt5sr91.d(15): Error: cannot implicitly convert expression `numbers[0]`
    of type `float` to `int`

    /tmp/tmpdyt5sr91.d(27): Error: undefined identifier `RuntimeException`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdyt5sr91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float largest = numbers[0];\n    float smallest = numbers[0];\n\
    \    for(int i = 1; i < numbers.length; i++)\n    {\n        float number = numbers[i];\n\
    \        if(number > largest)\n        {\n            largest = number;\n    \
    \    }\n        else if(number < smallest)\n        {\n            smallest =\
    \ number;\n        }\n    }\n    float[] result;\n    largest = 1.0f / largest;\n\
    \    smallest = 1.0f / smallest;\n    result = new float[numbers.length];\n  \
    \  for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = numbers[i]\
    \ * largest;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp436_tj2k.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290ed]

    ??:? void tmp436_tj2k.__unittest_L36_C1() [0x4289ae]

    ??:? void tmp436_tj2k.__modtest() [0x428e6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d517]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c3aa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431635]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431ae4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4315c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c381]

    ??:? runModuleUnitTests [0x42d2ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var min = min(numbers);\n    var max = max(numbers);\n   \
    \ \n    var result = [];\n    for (var i = 0 ; i < numbers.length ; ++i) {\n \
    \       result[i] = (numbers[i] - min) / (max - min);\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer has a typo, it\
    \ should be `min+min*(max-min)/2` instead of `min+min*(max-min)`.\n<|/ c |>\n\
    <| a |>\nI ended up using this solution in my project:\n<code>\nimport std.array;\n\
    import std.range;\nimport std.algorithm; \nimport std.conv;\nimport std.complex;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdo8mas_h.d(22): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdo8mas_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] rescaled = new float[numbers.length];\n    float largest\
    \ = numbers[0];\n    float smallest = numbers[0];\n    float midpoint;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] > largest)\n \
    \           largest = numbers[i];\n        if(numbers[i] < smallest)\n       \
    \     smallest = numbers[i];\n    }\n    midpoint = largest + (smallest - largest)\
    \ / 2.0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i]\
    \ > midpoint) \n            rescaled[i] = midpoint - largest;\n        else\n\
    \            rescaled[i] = midpoint - numbers[i];\n    }\n    return rescaled;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuq3969nc.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291cd]

    ??:? void tmpuq3969nc.__unittest_L33_C1() [0x428a92]

    ??:? void tmpuq3969nc.__modtest() [0x428f50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d5f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c48a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431715]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431bc4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4316a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c461]

    ??:? runModuleUnitTests [0x42d3cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429690]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    float min_diff = FLT_MIN;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvelhb8d.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvelhb8d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double min_val = minof(numbers);\n    double max_val = maxof(numbers);\n\
    \    double diff = max_val - min_val;\n    double scale = (1.0f / diff);\n   \
    \ return Array.zip(numbers, Arrays.range(0,numbers.length)) \n               \
    \  .map(i -> scale * i[0]) \n                 .toArray();\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=c++,vector,arrays |>\nThis can be done using STLs algorithms\
    \ and ranges.\n<code>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp45ytetrl.d(17): Error: use `.` for member lookup, not `->`

    /tmp/tmp45ytetrl.d(20): Error: declaration expected, not `<`

    /tmp/tmp45ytetrl.d(32): Error: declaration expected, not `assert`

    /tmp/tmp45ytetrl.d(33): Error: declaration expected, not `assert`

    /tmp/tmp45ytetrl.d(34): Error: declaration expected, not `assert`

    /tmp/tmp45ytetrl.d(35): Error: declaration expected, not `assert`

    /tmp/tmp45ytetrl.d(36): Error: declaration expected, not `assert`

    /tmp/tmp45ytetrl.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45ytetrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\t// Scale the array of numbers to 0..1\n\tint min = Math.min(numbers[0],\
    \ numbers[1]);\n\tint max = Math.max(numbers[0], numbers[1]);\n\tfloat scale =\
    \ (max - min) / (float)(1L - 1);\n\tfor (int i = 0; i < numbers.length; i++) \n\
    \t{\n\t\tnumbers[i] *= scale;\n\t}\n\treturn numbers;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf2hh31xu.d(15): Error: C style cast illegal, use `cast(float)(1L
    - 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf2hh31xu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2)\n        return numbers;\n    float[]\
    \ result = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = (numbers[i] - min(numbers)) / (max(numbers) - min(numbers));\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ie01jge.d(16): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmp3ie01jge.d(16): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmp3ie01jge.d(16): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ie01jge.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        float current = numbers[i];\n        if(current < min)\n\
    \            min = current;\n        if(current > max)\n            max = current;\n\
    \    }\n    \n    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis is great, except it doesn't work when there are\
    \ values outside the range (like `[0.5, 3.0]`)\n<|/ c |>\n<| a dscore=4 tags=android,java\
    \ |>\nMy solution in Kotlin:\n<code>\nfun <T> Array<T>.rescaleToUnit(\n    min:\
    \ T,\n    max: T,\n    range: Range<T>\n): Array<T> {\n    val result = Array<T>(this.size)\n\
    \    for ((index, element) in\n            (0..this.size).withIndex()\n      \
    \      .filter {\n                it >= range.min && it <= range.max\n       \
    \     }.withIndex()\n            .zipWithIndex().filter { it.second >= index }\n\
    \            .filter { it.first >= min && it.first <= max }\n            .withIndex()\n\
    \            .map { it.first }\n            .indices) {\n        result[index]\
    \ = if (element >= range.min && element <= range.max) {\n            element\n\
    \        } else {\n            range.min\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a |>\n<| a |>\nHere's my solution, based on some of the other\
    \ answers, but it uses the new Java 8 streams API:\n<code>\npublic static float[]\
    \ rescaleToUnit(float[] numbers) {\n    return Arrays.stream(numbers)\n      \
    \      .mapToDouble(Double::doubleValue)\n            .boxed()\n            .collect(Collectors.toCollection(ArrayList::new))\n\
    \            .stream()\n            .mapToDouble(x -> ((x - Math.min(numbers))\
    \ / (Math.abs(Math.max(numbers) - Math.min(numbers)) + 1))).boxed().collect(Collectors.toList())\n\
    \            .toArray(new float[numbers.length]);\n}\n</code>\n<|/ a tags=android,java\
    \ dscore=4 |>\n<| c |>\n`(float)` should be replaced with `Double::doubleValue`\
    \ as of Java 8.\n<|/ c |>\n<| a tags=android,java |>\nI wrote a Scala solution,\
    \ based on the answer from. It has one important difference: It avoids the creation\
    \ of an ArrayList \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n  \
    \  assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphi2m6iko.d(30): Error: declaration expected, not `<`

    /tmp/tmphi2m6iko.d(33): Error: unterminated character constant

    /tmp/tmphi2m6iko.d(65): Error: unterminated character constant

    /tmp/tmphi2m6iko.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi2m6iko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    assert(numbers.length >= 2 && numbers.length <= numbers.length);\n\
    \    float[] result = new float[numbers.length];\n    double minValue = numbers[0];\n\
    \    double maxValue = numbers[0];\n    bool maxFlag = false;\n    bool minFlag\
    \ = false;\n    for(int i = 1; i < numbers.length; ++i)\n    {\n        if(numbers[i]\
    \ < minValue)\n        {\n            minFlag = true;\n            minValue =\
    \ numbers[i];\n        }\n        else if(numbers[i] > maxValue)\n        {\n\
    \            maxFlag = true;\n            maxValue = numbers[i];\n        }\n\
    \    }\n    if(maxFlag)\n        result[numbers.length-1] = 1;\n    if(minFlag)\n\
    \        result[0] = 0;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc58kt4x3.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x429251]

    ??:? void tmpc58kt4x3.__unittest_L37_C1() [0x428a5e]

    ??:? void tmpc58kt4x3.__modtest() [0x428f1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d67b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c50e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431799]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431c48]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431725]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c4e5]

    ??:? runModuleUnitTests [0x42d451]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429714]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var min = Math.min(numbers[0], numbers[1]);\n    var max =\
    \ Math.max(numbers[0], numbers[1]);\n    return numbers[] /= (max - min);\n}\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvpjq44e3.d(12): Error: undefined identifier `var`

    /tmp/tmpvpjq44e3.d(12): Error: undefined identifier `Math`

    /tmp/tmpvpjq44e3.d(13): Error: undefined identifier `var`

    /tmp/tmpvpjq44e3.d(13): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpjq44e3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if(numbers.length < 2)\n    return numbers;\n  \n  float min\
    \ = min(numbers);\n  float max = max(numbers);\n  \n  return numbers.map(x =>\
    \ (x - min) / (max - min));\n}\n</code>\nThis implementation can be simplified\
    \ if we assume that the minimum value in the array is 0. For example:\n<code>\n\
    float min = min(numbers);\nfloat min = numbers.first();\n</code>\nWe can apply\
    \ the new method (with slightly different API) to the same array:\n<code>\n/*\n\
    \ Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers)\n\
    {\n  if(numbers.length < 2)\n    return numbers;\n  \n  float min = numbers[0];\n\
    \  float max = numbers[0];\n  \n  return numbers.map(x => (x - min) / (max - min));\n\
    }\n</code>\nThis implementation is more generic and will allow to process arrays\
    \ with arbitrary elements.\n<|/ a |>\n<| c |>\nWhat is std.math in here? When\
    \ I try to import it, I get an error \"module std.math has no attribute math\"\
    \n<|/ c |>\n<| c |>\nIt's an example of [std.typecons](https://doc.rust-lang.org/std/typecons/index.html).\
    \ Since it's part of the standard library in Rust you can just add `use std::typecons::{min,\
    \ max};` to your source file. See [here](https://doc.rust-lang.org/std/typecons/index.html#example-use)\
    \ for more details.\n<|/ c |>\n<| c |>\nThis should work, but I get a bunch of\
    \ compile errors with this implementation:\n`src/main.rs:6:5: 6:11 error: unresolved\
    \ import `std::typecons::min`; use an explicit import instead`\n`src/main.rs:6\
    \     use std::typecons::min;`\n`src/main.rs:7:5: 7:15 error: unresolved import\
    \ `std::typecons::max`; use an explicit import instead`\n`src/main.rs:7     use\
    \ std::typecons::max;`\n`src/main.rs:9:2: 9:30 error: cannot find function `map`\
    \ in `std::iter::Iterator`\n`src/main.rs:9     return numbers.map(x => (x - min)\
    \ / (max - min));`\n`src/main.rs:9     ^^^^^^^^^^^^^^^^^^^^^^^^\nunittest\n{\n\
    \    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ct22f9_.d(20): Error: declaration expected, not `<`

    /tmp/tmp1ct22f9_.d(25): Error: declaration expected, not `<`

    /tmp/tmp1ct22f9_.d(43): Error: declaration expected, not `return`

    /tmp/tmp1ct22f9_.d(44): Error: unrecognized declaration

    /tmp/tmp1ct22f9_.d(52): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ct22f9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float minValue\
    \ = numbers[0];\n    float maxValue = numbers[0];\n    float range = 0;\n    float\
    \ min = Double.MAX_VALUE;\n    float max = -Double.MAX_VALUE;\n    for(int i =\
    \ 0; i < numbers.length; i++)\n    {\n        maxValue = Math.max(maxValue, numbers[i]);\n\
    \        minValue = Math.min(minValue, numbers[i]);\n        range += numbers[i];\n\
    \    }\n    if(range == 0) \n        return numbers;\n    \n    float scale =\
    \ range / maxValue;\n    for(int i = 0; i < numbers.length; i++)\n    {\n    \
    \    result[i] = (numbers[i] - minValue) * scale;\n    }\n    return result;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the largest number will become 1 and the smallest\
    \ will become 0\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0,\
    \ 1.0, 1.0, 1.0, 0.0]\n    \n*/\nfloat[] rescale_to_unitReverse(float[] numbers)\
    \ \n{\n    float[] result = new float[numbers.length];\n    float minValue = numbers[0];\n\
    \    float maxValue = numbers[0];\n    float range = 0;\n    float min = Double.MAX_VALUE;\n\
    \    float max = -Double.MAX_VALUE;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        maxValue = Math.max(maxValue, numbers[i]);\n        minValue =\
    \ Math.min(minValue, numbers[i]);\n        range += numbers[i];\n    }\n    if(range\
    \ == 0) \n        return numbers;\n    \n    float scale = range / minValue;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i] = (numbers[i]\
    \ - maxValue) * scale;\n    }\n    return result;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([-1., 1., -1., -1., -1.])\n    [0.0, 1.0, 0.0, 1.0, 0.0]\n \
    \   \n*/\nfloat[] rescale_to_unitMinMax(float[] numbers) \n{\n    float[] result\
    \ = new float[numbers.length];\n    float minValue = numbers[0];\n    float maxValue\
    \ = numbers[0];\n    float range = 0;\n    float min = Double.MAX_VALUE;\n   \
    \ float max = -Double.MAX_VALUE;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        maxValue = Math.max(maxValue, numbers[i]);\n        minValue =\
    \ Math.min(minValue, numbers[i]);\n        range += numbers[i];\n    }\n    if(range\
    \ == 0) \n        return numbers;\n    \n    float scale = (range / maxValue);\n\
    \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtey383v.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtey383v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0];\n    float max = numbers[0];\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bi4n6hq.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8bi4n6hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int minIdx = std.array.min(numbers);\n  int maxIdx = std.array.max(numbers);\n\
    \  float minValue = numbers[minIdx];\n  float maxValue = numbers[maxIdx];\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpve5jxy0_.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpve5jxy0_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min,\
    \ max;\n    float maxMin = numbers[0];\n    float minMax = numbers[0];\n    int\
    \ pos = 0;\n    for(float x: numbers) {\n        minMax = Math.min(x, minMax);\n\
    \        maxMin = Math.max(x, maxMin);\n        result[pos] = maxMin + (x - minMax)\
    \ / maxMin;\n        pos++;\n    }\n    return result;\n}\n/*\n Given an equidistant\
    \ array of numbers, apply a linear transform to that array,\n    such that the\
    \ largest number will become 1 and the smallest will become 0\n    >>> rescale_to_unit([-1.0,\
    \ 0.0, 1.0])\n    [1.0, 0.0, -1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min,\
    \ max;\n    float maxMin = numbers[0];\n    float minMax = numbers[0];\n    int\
    \ pos = 0;\n    for(float x: numbers) {\n        minMax = Math.min(x, minMax);\n\
    \        maxMin = Math.max(x, maxMin);\n        result[pos] = minMax + (x - minMax)\
    \ / (maxMin - minMax);\n        pos++;\n    }\n    return result;\n}\n/*\n Given\
    \ an array of numbers, apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([-1.0,\
    \ 0.0, 1.0]) \n    [0.0, 1.0, 0.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min,\
    \ max;\n    float maxMin = numbers[0];\n    float minMax = numbers[0];\n    int\
    \ pos = 0;\n    for(float x: numbers) {\n        minMax = Math.min(x, minMax);\n\
    \        maxMin = Math.max(x, maxMin);\n        result[pos] = maxMin + (x - minMax)\
    \ / maxMin;\n        pos++;\n    }\n    return result;\n}\n/*\n Given an array\
    \ of numbers, apply a linear transform to that array,\n    such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_to_unit([-1.0,\
    \ 0.0, 1.0]) \n    [0.0, 1.0, 0.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min,\
    \ max;\n    float maxMin = numbers[0];\n    float minMax = numbers[0];\n    int\
    \ pos = 0;\n    for(float x: numbers) {\n        minMax = Math.min(x, minMax\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzcbwoed.d(17): Error: semicolon expected, not `:`

    /tmp/tmplzcbwoed.d(17): Error: expression expected, not `:`

    /tmp/tmplzcbwoed.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmplzcbwoed.d(39): Error: semicolon expected, not `:`

    /tmp/tmplzcbwoed.d(39): Error: expression expected, not `:`

    /tmp/tmplzcbwoed.d(39): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmplzcbwoed.d(61): Error: semicolon expected, not `:`

    /tmp/tmplzcbwoed.d(61): Error: expression expected, not `:`

    /tmp/tmplzcbwoed.d(61): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmplzcbwoed.d(83): Error: semicolon expected, not `:`

    /tmp/tmplzcbwoed.d(83): Error: expression expected, not `:`

    /tmp/tmplzcbwoed.d(83): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmplzcbwoed.d(85): Error: found `unittest` when expecting `,`

    /tmp/tmplzcbwoed.d(95): Error: found `void` when expecting `,`

    /tmp/tmplzcbwoed.d(95): Error: found `{` when expe'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    int smallest\
    \ = 0;\n    int largest = 1;\n    int min_length = MathUtil.min(numbers.length,\
    \ 1);\n    int max_length = MathUtil.max(numbers.length, 1);\n    double smallest_number\
    \ = numbers[0];\n    double largest_number = numbers[0];\n    for (int i=1; i\
    \ < numbers.length; ++i) {\n        double number = numbers[i];\n        smallest_number\
    \ = MathUtil.min(smallest_number, number);\n        largest_number = MathUtil.max(largest_number,\
    \ number);\n    }\n    double range_length = largest_number - smallest_number;\n\
    \    double factor = 1.0 / (range_length * max_length);\n    for (int i = 0; i\
    \ < numbers.length; ++i) {\n        double number = numbers[i];\n        result[i]\
    \ = (number - smallest_number) * factor;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjqby5lqh.d(15): Error: undefined identifier `MathUtil`

    /tmp/tmpjqby5lqh.d(16): Error: undefined identifier `MathUtil`

    /tmp/tmpjqby5lqh.d(21): Error: undefined identifier `MathUtil`

    /tmp/tmpjqby5lqh.d(22): Error: undefined identifier `MathUtil`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqby5lqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < numbers.length; i++) \n\
    \t{\n\t\tsum += numbers[i];\n\t}\n\treturn numbers;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaq01ggcv.d(23): unittest failure

    ----------------

    ??:? _d_unittestp [0x428f25]

    ??:? void tmpaq01ggcv.__unittest_L19_C1() [0x4287ea]

    ??:? void tmpaq01ggcv.__modtest() [0x428ca8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d157]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43117d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43162c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431109]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfc1]

    ??:? runModuleUnitTests [0x42cf2d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4293e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int n = numbers.length; \n  int i;\n  float min = numbers[0];\n\
    \  float max = numbers[0];\n  for (i=1; i<n; i++)\n  {\n    min = min(min, numbers[i]);\n\
    \    max = max(max, numbers[i]);\n  }\n  float scale = 1.0f / (max - min);\n \
    \ for (i=1; i<n; i++)\n    numbers[i] *= scale;\n  return numbers;\n}\n</code>\n\
    <|/ a tags=java,arrays,scala dscore=4 |>\n<| a dscore=4 |>\nJava 8 streams solution:\n\
    <code>\npublic static int[] scaleToUnit(int[] data) {\n    return Arrays.stream(data)\n\
    \                 .boxed()\n                 .collect(toCollection(() -> IntStream.range(data[0],\
    \ data[0])\n                                                      .mapToInt(i\
    \ -> data[i] - data[0])\n                                                    \
    \  .limit(data.length - 1))\n                       .map(i -> i * 1.0 / data[i]\
    \ - 1.0));\n}\n</code>\n<|/ a tags=java,arrays,scala |>\n<| a dscore=3 tags=java,arrays,scala\
    \ |>\nScala version:\n<code>\nval numbers: Array[Int] = Array(8, 6, 7, 3, 4)\n\
    val scaled = numbers.map((_ - numbers.min) / (numbers.max - numbers.min))\nscaled.take(numbers.length).mkString(\"\
    ,\")\n</code>\n<|/ a |>\n<| a dscore=3 |>\nIn Java 8 and later, you can use a\
    \ DoubleStream to iterate over the input array, and subtract each input element\
    \ from the input array minus its minimum value, and then divide by its maximum\
    \ value \u2013 giving the result you want.\n<code>\ndouble[] numbers = {8.0, 6.0,\
    \ 7.0, 3.0, 4.0}; // input\ndouble min = Arrays.stream(numbers).mapToDouble(Double::doubleValue).min().getAsDouble();\n\
    double max = Arrays.stream(numbers).mapToDouble(Double::doubleValue).max().getAsDouble();\n\
    double[] output = new double[numbers.length];\nArrays.stream(numbers).forEach(value\
    \ -> output[numbers.indexOf(value)] = value - min) / (max - min);\n</code>\n<|/\
    \ a tags=java,arrays,scala |>\n<| a dscore=2 |>\nOne more Scala solution:\n<code>\n\
    val numbers = Array(8.0, 6.0, 7.0, 3.0, 4.0)\nval scaled = numbers.map(x => (x\
    \ - numbers.min) / (numbers.max - numbers.min))\nscaled.take(numbers.length).mkString(\"\
    ,\")\n// res0: String = 0.83333333333333333,0.6666666666666666,0.33333333333333333,0.06666666666666666\n\
    </code>\n<|/\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5hpg10og.d(26): Error: declaration expected, not `<`

    /tmp/tmp5hpg10og.d(38): Error: unrecognized declaration

    /tmp/tmp5hpg10og.d(50): Error: character 0x2013 is not a valid token

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5hpg10og.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float min = min(numbers);\n  float max = max(numbers);\n  \n\
    \  if(min == max) return numbers;\n  \n  float scale = (max - min);\n  \n  int\
    \ i = 1;\n  \n  while((i < numbers.lenght) && numbers[i-1] > max) i++;\n  \n \
    \ if(i == numbers.lenght) return new float[]{min};\n  \n  return new float[]{(min\
    \ + (numbers[i] - min) * scale) / scale};\n}\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    \n    returns\
    \ an array of numbers which are in the range of [0, 1]\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.50, 0.75, 1.0]\n*/\nfloat[] rescale_to_unit_range(float[]\
    \ numbers) \n{\n  float min = min(numbers);\n  float max = max(numbers);\n  \n\
    \  if(min == max) return numbers;\n  \n  float scale = (max - min);\n  \n  int\
    \ i = 1;\n  \n  while((i < numbers.lenght) && numbers[i-1] > max) i++;\n  \n \
    \ if(i == numbers.lenght) return new float[]{min};\n  \n  return new float[]{(min\
    \ + (numbers[i] - min) * scale) / scale, 1.0};\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    \n\
    \    returns an array of numbers which are in the range of [0, 1]\n    >>> rescale_to_unit_range([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.50, 0.75, 1.0]\n*/\nfloat[] rescale_to_unit_range2(float[]\
    \ numbers) \n{\n  float min = min(numbers);\n  float max = max(numbers);\n  \n\
    \  if(min == max) return numbers;\n  \n  float scale = (max - min);\n  \n  int\
    \ i = 1;\n  \n  while((i < numbers.lenght) && numbers[i-1] > max) i++;\n  \n \
    \ if(i == numbers.lenght) return new float[]{min};\n  \n  return new float[]{(min\
    \ + (numbers[i] - min) * scale) / scale, 0.0};\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    \n\
    \    returns \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz6ich19s.d(23): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpz6ich19s.d(23): Error: found `}` when expecting `;` following statement

    /tmp/tmpz6ich19s.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpz6ich19s.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpz6ich19s.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmpz6ich19s.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpz6ich19s.d(48): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpz6ich19s.d(48): Error: found `}` when expecting `;` following statement

    /tmp/tmpz6ich19s.d(48): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpz6ich19s.d(50): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpz6ich19s.d(50): Error: found `}` when expecting `;` following statement

    /tmp/tmpz6ich19s.d(50): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpz6ich19s.d(73): Error: f'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float[] transformed = new float[numbers.length];\n  float largest\
    \ = numbers[0];\n  float smallest = numbers[0];\n  for (int i = 0; i < numbers.length;\
    \ ++i) {\n    transformed[i] = numbers[i] / largest;\n    largest = Math.max(largest,\
    \ numbers[i]);\n    smallest = Math.min(smallest, numbers[i]);\n  }\n  return\
    \ transformed;\n}\n/*\n Given an array/vector of numbers, apply a sigmoid function\
    \ to that array/vector\n    For example: \n    sigmoid_derivative([0, 0.25, 0.5,\
    \ 0.75, 1.0]) == [0.0, -1.0, 1.0, -1.0, 1.0]\n    sigmoid_derivative([0, 0.25,\
    \ 0.5, 0.75, 1.0]) == [0.0, 0.0, 0.25, -0.5, -0.75]\n    \n*/\nfloat[] sigmoid_derivative(float[]\
    \ numbers) {\n  float[] transformed = new float[numbers.length];\n  for (int i\
    \ = 0; i < numbers.length; ++i) {\n    transformed[i] = (numbers[i] / (1.0 + Math.exp(-numbers[i])));\n\
    \  }\n  return transformed;\n}\n/*\n Given a vector (of at least two elements),\
    \ apply a sigmoid function to that vector,\n    such that the sum of the resulting\
    \ values is 1\n    >>> sigmoid_derivative([1.0, 0.0])\n    [0.0, 1.0]\n    \n\
    */\nfloat[] sigmoid_derivative(float[] numbers) {\n  float sum = numbers[0];\n\
    \  for (int i = 1; i < numbers.length; ++i) {\n    sum += Math.pow(numbers[i],\
    \ 2);\n  }\n  float result = 1.0f / (1.0f + Math.exp(-sum));\n  return result;\n\
    }\n/*\n Given a vector (of at least two elements), apply a sigmoid function to\
    \ that vector,\n    such that the sum of the resulting values is 1\n    >>> sigmoid_derivative([1.0,\
    \ 0.0])\n    [0.0, 1.0]\n    \n*/\nfloat[] sigmoid_derivative(float[] numbers)\
    \ {\n  float sum = numbers[0];\n  for (int i = 1; i < numbers.length; ++i) {\n\
    \    sum += Math.pow(numbers[i], 2);\n  }\n  float result = 1.0f / (1.0f + Math.exp(-sum));\n\
    \  return result;\n}\n/*\n Given an array of numbers, return a new array with\
    \ the numbers in the original array reversed.\n    For example, \n    float[]\
    \ reverse([1, 5, 2, 3])\n    float[] reverse([1, 5, 2, 3])\n    float[] reverse([1,\
    \ 5, 2, 3])\n    float[] reverse([1, 5, 2, 3])\n    float[] reverse([1, 5, 2,\
    \ 3])\n    float[] reverse([1, 5, 2, 3])\n    \n*/\nfloat[] reverse(float[] numbers)\
    \ \n{\n  float[] reversed = new float[numbers.length];\n  for (int i = 0; i <\
    \ numbers.length; ++i)\n  {\n    reverse\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_sl8pqh6.d(83): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp_sl8pqh6.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_sl8pqh6.d(93): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_sl8pqh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] newNumbers = new float[numbers.length];\n\tfloat min\
    \ = FLT_MAX;\n\tfloat max = -FLT_MAX;\n\tfloat total = 0;\n\tfor (int i = 0; i\
    \ < numbers.length; i++)\n\t{\n\t\ttotal += numbers[i];\n\t\tif (numbers[i] <\
    \ min)\n\t\t\tmin = numbers[i];\n\t\tif (numbers[i] > max)\n\t\t\tmax = numbers[i];\n\
    \t}\n\tfloat range = max - min;\n\tif (range == 0)\n\t{\n\t\tnewNumbers[0] = (float)\
    \ 0;\n\t\tnewNumbers[1] = (float) 1;\n\t\treturn newNumbers;\n\t}\n\tfloat scale\
    \ = (float) (total / range);\n\tfor (int i = 0; i < numbers.length; i++)\n\t{\n\
    \t\tnewNumbers[i] = (float) (numbers[i] - min) * scale;\n\t}\n\treturn newNumbers;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9klzgks.d(27): Error: C style cast illegal, use `cast(float)0`

    /tmp/tmpm9klzgks.d(28): Error: C style cast illegal, use `cast(float)1`

    /tmp/tmpm9klzgks.d(31): Error: C style cast illegal, use `cast(float)(total /
    range)`

    /tmp/tmpm9klzgks.d(34): Error: C style cast illegal, use `cast(float)(numbers[i]
    - min)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9klzgks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int N=numbers.length;\n    float[] result = new float[N];\n\
    \    float smallest=numbers[0];\n    float largest=numbers[0];\n    for(int i=1;\
    \ i<N; i++)\n    {\n        smallest=min(numbers[0], smallest);\n        largest=max(numbers[0],\
    \ largest);\n        result[i]=std.math.reciprocal(numbers[i]-smallest)/(largest-smallest);\n\
    \    }\n    return result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min) \n{\n    int N=numbers.length;\n    float[] result = new\
    \ float[N];\n    float smallest=min;\n    float largest=min;\n    for(int i=1;\
    \ i<N; i++)\n    {\n        smallest=min(numbers[0], smallest);\n        largest=max(numbers[0],\
    \ largest);\n        result[i]=std.math.reciprocal(numbers[i]-smallest)/(largest-smallest);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmyyoh_6u.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmpmyyoh_6u.d(18): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpmyyoh_6u.d(19): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmyyoh_6u.d(20): Error: undefined identifier `reciprocal` in module `std.math`

    /tmp/tmpmyyoh_6u.d(33): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmpmyyoh_6u.d(39): Error: function expected before `()`, not `min` of type
    `float`

    /tmp/tmpmyyoh_6u.d(40): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpmyyoh_6u.d(41): Error: undefined identifier `reciprocal` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmyyoh_6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n   \
    \ for (float number : numbers) {\n        min = std::min(min, number);\n     \
    \   max = std::max(max, number);\n    }\n    float newMax = 1.0f / max;\n    float[]\
    \ results = new float[numbers.length];\n    for (float number : numbers)\n   \
    \     results[numbers.length - 1 - int(number * newMax)] = (number - min) / newMax;\n\
    \    return results;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=java,arrays,c#\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers) \n{\n   \
    \ float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        min = Math.min(0, number);\n        max = Math.max(1,\
    \ number);\n    }\n    float newMax = 1.0f / max;\n    float[] results = new float[numbers.length];\n\
    \    for (float number : numbers)\n        results[numbers.length - 1 - Math.round(number\
    \ * newMax)] = (number - min) / newMax;\n    return results;\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| a tags=java,arrays,c# |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers) {\n    if (numbers.length == 0) return numbers;\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (int i = 1; i < numbers.length; i++)\n \
    \       min = Math.min(min, numbers[i]);\n        max = Math.max(max, numbers[i]);\n\
    \    float[] results = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        results[i] = (float) (numbers[i] - min) / (max - min);\n   \
    \ }\n    return results;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=java,arrays,c#\
    \ |>\n<code>\npublic static float[] rescale_to_unit(float[] numbers)\n{\n    if\
    \ (numbers == null || numbers.Length == 0) return numbers;\n    float[] newNumbers\
    \ = new float[numbers.Length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 1; i < numbers.Length; i++)\n    {\n        min = Math.Min(min,\
    \ numbers[i]);\n        max = Math.Max(max, numbers[i]);\n    }\n    for (int\
    \ i = 0; i < numbers.Length; i++)\n    {\n        newNumbers[i] = (numbers[i]\
    \ - min) / (max - min);\n    }\n    return newNumbers;\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\npublic static float[] rescale_to_unit(float[]\
    \ numbers)\n{\n    if (numbers == null || numbers.Length\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvk9tgs1n.d(14): Error: semicolon expected, not `:`

    /tmp/tmpvk9tgs1n.d(14): Error: expression expected, not `:`

    /tmp/tmpvk9tgs1n.d(14): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpvk9tgs1n.d(15): Error: found `:` when expecting `;` following statement

    /tmp/tmpvk9tgs1n.d(15): Error: found `:` instead of statement

    /tmp/tmpvk9tgs1n.d(16): Error: found `:` when expecting `;` following statement

    /tmp/tmpvk9tgs1n.d(16): Error: found `:` instead of statement

    /tmp/tmpvk9tgs1n.d(20): Error: semicolon expected, not `:`

    /tmp/tmpvk9tgs1n.d(20): Error: expression expected, not `:`

    /tmp/tmpvk9tgs1n.d(20): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpvk9tgs1n.d(24): Error: declaration expected, not `<`

    /tmp/tmpvk9tgs1n.d(32): Error: declaration expected, not `for`

    /tmp/tmpvk9tgs1n.d(34): Error: no identifier for declarator `max`

    /tmp/tmpvk9tgs1n.d(34): Error: declaration expected, not `=`

    /tmp/tmpvk9tgs1n.d(35): Error: unrecognized declaration

    Failed: ["d'
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tif (numbers.length < 2)\n\t{\n\t\treturn numbers;\n\t}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcd0nip4.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcd0nip4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  // make sure we have at least two points\n  if (numbers.length\
    \ < 2)\n    throw new IllegalArgumentException(\"Can't rescale less than two points:\
    \ \" + numbers.length);\n  // rescale\n  for (int i = 0; i < numbers.length; i++)\n\
    \    numbers[i] = ((float) numbers[i] - min(numbers)) / (max(numbers) - min(numbers));\n\
    \  // done\n  return numbers;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3vfkpkt.d(17): Error: C style cast illegal, use `cast(float)numbers[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3vfkpkt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++)\n        result[i] = (numbers[i] - min(numbers))\
    \ / (max(numbers) - min(numbers)); \n    \n    return result;\n}\n</code>\n<|/\
    \ a tags=java,arrays,algorithm |>\n<| c |>\nIn your `rescale_to_unit` method you\
    \ are multiplying by `max(numbers)` but that should be `max(numbers)` - `min(numbers)`.\
    \ Otherwise you are getting a very large value when max and min are equal.\n<|/\
    \ c |>\n<| a tags=java,arrays,algorithm dscore=1 |>\nOne simple solution is to\
    \ take the minimum and maximum number in the array, and divide them by the sum\
    \ of the array, that is\n<code>\ndouble min = Integer.MAX_VALUE;\ndouble max =\
    \ Integer.MIN_VALUE;\nfor(int i = 0; i < arr.length; i++) {\n  min = Math.min(arr[i],\
    \ min);\n  max = Math.max(arr[i], max);\n}\nfor(int i = 0; i < arr.length; i++)\
    \ {\n  arr[i] = arr[i]/(i+1);\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\n\
    public class MinMax {\n    public static void main(String[] args) {\n        int[]\
    \ input = {1, 3, 3, 4, 5};\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps81txu_q.d(18): Error: declaration expected, not `<`

    /tmp/tmps81txu_q.d(28): Error: declaration expected, not `for`

    /tmp/tmps81txu_q.d(28): Error: no identifier for declarator `i`

    /tmp/tmps81txu_q.d(28): Error: declaration expected, not `<`

    /tmp/tmps81txu_q.d(28): Error: no identifier for declarator `i`

    /tmp/tmps81txu_q.d(28): Error: declaration expected, not `++`

    /tmp/tmps81txu_q.d(30): Error: no identifier for declarator `max`

    /tmp/tmps81txu_q.d(30): Error: declaration expected, not `=`

    /tmp/tmps81txu_q.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps81txu_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] results = new float[numbers.length];\n\tfor (int i =\
    \ 0; i < numbers.length; i++)\n\t\tresults[i] = numbers[i]/min(numbers);\n\treturn\
    \ results;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprn4i51sl.d(14): Error: undefined identifier `min`, did you mean
    function `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprn4i51sl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n   \
    \ \n    for (int i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i]\
    \ < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n\
    \    }\n    \n    float[] result = new float[numbers.length];\n    \n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        result[i] = (float) Math.round((numbers[i]\
    \ - min) / (max - min) * 1e5);\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm,python\
    \ |>\n<| c |>\nYou should add a comment to the code to explain how this works.\n\
    <|/ c |>\n<| a tags=arrays,c++,algorithm,python |>\nAs has been pointed out, this\
    \ would be very easy to implement. Since your language doesn't include this, you\
    \ could write a quick and dirty implementation in C++.\nThe basic algorithm is:\n\
    <code>\nfor i from 0 to array.length-1\n   if array[i] > highest\n      highest\
    \ = array[i]\n   if array[i] < lowest\n      lowest = array[i]\n</code>\nIn pseudo-code:\n\
    <code>\nhighest = 0\nlowest = 1\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp21fso2ha.d(25): Error: C style cast illegal, use `cast(float)Math.round((numbers[i]
    - min) / (max - min) * 100000.)`

    /tmp/tmp21fso2ha.d(29): Error: declaration expected, not `<`

    /tmp/tmp21fso2ha.d(35): Error: unterminated character constant

    /tmp/tmp21fso2ha.d(52): Error: declaration expected, not `assert`

    /tmp/tmp21fso2ha.d(53): Error: declaration expected, not `assert`

    /tmp/tmp21fso2ha.d(54): Error: declaration expected, not `assert`

    /tmp/tmp21fso2ha.d(55): Error: declaration expected, not `assert`

    /tmp/tmp21fso2ha.d(56): Error: declaration expected, not `assert`

    /tmp/tmp21fso2ha.d(57): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp21fso2ha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = FLT_MIN;\n    float max = FLT_MAX;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxobponv.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxobponv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int         n = numbers.length;\n    float      min = numbers[0];\n\
    \    float      max = numbers[0];\n    float      delta = 0.0;\n    for(int i\
    \ = 0; i < n; ++i) {\n        if (numbers[i] < min) min = numbers[i];\n      \
    \  if (numbers[i] > max) max = numbers[i];\n    }\n    \n    delta = max - min;\n\
    \    if (delta == 0.0) {\n        return new float[0];\n    } else {\n       \
    \ float scale = (delta > 0.0f) ? ((1.0 / delta) - 1.0f) : (1.0f / ((1.0f+delta)\
    \ / 2.0f));\n        float[] result = new float[n];\n        for(int i = 0; i\
    \ < n; ++i) {\n            result[i] = (numbers[i] - min) * scale;\n        }\n\
    \        return result;\n    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis answer\
    \ is better than the accepted answer.  It takes into account the variance of numbers\
    \ and uses the variance to determine the scale.  This is especially important\
    \ if you have more than 2 numbers.\n<|/ c |>\n<| c |>\nI think this answer doesn't\
    \ work for large numbers, because it requires us to know the variance of numbers\
    \ and divide each number by that variance. It doesn't scale the numbers to [0,1].\n\
    <|/ c |>\n<| c |>\nI don't think it works for the case where we have just one\
    \ number. Eg: if the minimum value is -1 and the maximum value is 10. Then, if\
    \ we just have one number in the array, the answer should be 0, but this answer\
    \ is returning -0.\n<|/ c |>\n<| c |>\nI believe that works for the case where\
    \ we have just one number.  Please see my answer for a demo.\n<|/ c |>\n<| a dscore=3\
    \ tags=java,linear-transform,rescale,algorithm |>\nIf you're dealing with floating\
    \ point numbers, you can compute the range based on the standard deviation. For\
    \ example, if the numbers are coming from Gaussian distribution, mean and standard\
    \ deviation can be computed as follows:\n<code>\nfloat mean = sum(numbers)/count;\n\
    float variance = sum((numbers- mean) * (numbers - mean))/count;\n</code>\nThe\
    \ range can be computed as (max-min)/sqrt(variance).\n<|/ a |>\n<| c |>\nI wouldn't\
    \ trust a standard deviation if there were a ton of outliers present.\n<|/ c |>\n\
    <| c |>\nI assume that outliers are rare and therefore the chances are low, but\
    \ I agree with you that it's not the most robust solution\n<|/ c |>\n<| c |>\n\
    This was very helpful to me. I have a similar problem and have implemented a variant\
    \ of this algorithm to find my transformation matrix: http://stackoverflow.com/questions/27\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe6vr45_x.d(33): Error: declaration expected, not `<`

    /tmp/tmpe6vr45_x.d(39): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(39): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(42): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(48): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(52): Error: declaration expected, not `<`

    /tmp/tmpe6vr45_x.d(56): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(59): Error: unterminated character constant

    /tmp/tmpe6vr45_x.d(67): Error: declaration expected, not `assert`

    /tmp/tmpe6vr45_x.d(68): Error: declaration expected, not `assert`

    /tmp/tmpe6vr45_x.d(69): Error: declaration expected, not `assert`

    /tmp/tmpe6vr45_x.d(70): Error: declaration expected, not `assert`

    /tmp/tmpe6vr45_x.d(71): Error: declaration expected, not `assert`

    /tmp/tmpe6vr45_x.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6vr45_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = float.MaxValue;\n    float max = float.MinValue;\n\
    \    for (float number : numbers)\n    {\n        min = mathMin(min, number);\n\
    \        max = mathMax(max, number);\n    }\n    if (min > 0.0) \n    {\n    \
    \    float scale = 1.0f / max - min;\n        for (float number : numbers)\n \
    \       {\n            number *= scale;\n        }\n    }\n    else \n    {\n\
    \        // numbers are all the same value, so just set min to 0 and scale to\
    \ 1\n        for (float number : numbers)\n        {\n            number = 0;\n\
    \        }\n    }\n    return numbers;\n}\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi006zb8g.d(14): Error: semicolon expected, not `:`

    /tmp/tmpi006zb8g.d(14): Error: expression expected, not `:`

    /tmp/tmpi006zb8g.d(14): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpi006zb8g.d(22): Error: semicolon expected, not `:`

    /tmp/tmpi006zb8g.d(22): Error: expression expected, not `:`

    /tmp/tmpi006zb8g.d(22): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpi006zb8g.d(30): Error: semicolon expected, not `:`

    /tmp/tmpi006zb8g.d(30): Error: expression expected, not `:`

    /tmp/tmpi006zb8g.d(30): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi006zb8g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        min = Math.min(min, numbers[i]);\n        max = Math.max(max,\
    \ numbers[i]);\n        results[i] = numbers[i]/(max-min);\n    }\n    return\
    \ results;\n}\n</code>\n<|/ a tags=c#,unity3d |>\n<| a dscore=0 |>\nThis is my\
    \ implementation of Kevin's answer that seems to have worked for me so far:\n\
    <code>\nprivate static float[] GetUnitSizes(float minValue, float maxValue)\n\
    {\n    var results = new float[(int)Mathf.Ceiling((maxValue - minValue) / 0.01d)];\n\
    \    var range = Enumerable.Range(0, results.Length)\n        .Select(i => (maxValue\
    \ - minValue) / results.Length * (i + 1))\n        .ToArray();\n    \n    for\
    \ (var i = 0; i < results.Length; i++)\n    {\n        results[i] = Mathf.Round(range[i]);\n\
    \    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2io2ubd9.d(23): Error: declaration expected, not `<`

    /tmp/tmp2io2ubd9.d(26): Error: unterminated character constant

    /tmp/tmp2io2ubd9.d(35): Error: declaration expected, not `for`

    /tmp/tmp2io2ubd9.d(35): Error: no identifier for declarator `i`

    /tmp/tmp2io2ubd9.d(35): Error: declaration expected, not `<`

    /tmp/tmp2io2ubd9.d(35): Error: no identifier for declarator `i`

    /tmp/tmp2io2ubd9.d(35): Error: declaration expected, not `++`

    /tmp/tmp2io2ubd9.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2io2ubd9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  double[] dd = new double[numbers.length];\n  double max = numbers[0];\n\
    \  double min = numbers[0];\n  for( int i = 0; i < dd.length; ++i )\n  {\n   \
    \ dd[i] = numbers[i];\n    if( numbers[i] < min ) min = numbers[i];\n    if( numbers[i]\
    \ > max ) max = numbers[i];\n  }\n  double scale = (max - min) / (double)dd[0];\n\
    \  for( int i = 0; i < dd.length; ++i )\n    dd[i] *= scale;\n  return dd;\n}\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8s4xair2.d(21): Error: C style cast illegal, use `cast(double)dd[0]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s4xair2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n   \
    \ int i = 0;\n    for (int j = 0; j < numbers.length; ++j) {\n        if (min\
    \ > numbers[j]) {\n            min = numbers[j];\n        }\n        \n      \
    \  if (max < numbers[j]) {\n            max = numbers[j];\n        }\n    }\n\
    \    \n    float[] result = new float[numbers.length];\n    for (int j = 0; j\
    \ < numbers.length; ++j) {\n        result[j] = numbers[j] / max - min;\n    }\n\
    \    \n    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgtxmuc8x.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x429125]

    ??:? void tmpgtxmuc8x.__unittest_L32_C1() [0x4289e6]

    ??:? void tmpgtxmuc8x.__modtest() [0x428ea4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d54f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c3e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43166d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431b1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4315f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c3b9]

    ??:? runModuleUnitTests [0x42d325]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] res = new float[numbers.length];\n    float minValue\
    \ = minof(numbers);\n    float maxValue = maxof(numbers);\n    float midValue\
    \ = (minValue + maxValue) / 2;\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        float val = numbers[i];\n        if (val < minValue)\n\
    \            val = 0;\n        else if (val > maxValue)\n            val = 1;\n\
    \        else\n            val = midValue;\n        res[i] = val;\n    }\n   \
    \ return res;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplorgv4s0.d(13): Error: undefined identifier `minof`

    /tmp/tmplorgv4s0.d(14): Error: undefined identifier `maxof`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplorgv4s0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  if (numbers.length < 2)\n    return numbers;\n  \n  // compute\
    \ min and max \n  double min = 0;\n  double max = 1;\n  for (int i = 1; i < numbers.length;\
    \ i++)\n  {\n    min = min > numbers[i] ? min : numbers[i];\n    max = max < numbers[i]\
    \ ? max : numbers[i];\n  }\n  \n  // compute the scaling factor\n  double scale\
    \ = (max - min) / (numbers.length - 1);\n  \n  // apply the transformation to\
    \ each number\n  float[] result = new float[numbers.length];\n  for (int i = 0;\
    \ i < numbers.length; i++)\n    result[i] = numbers[i] * scale;\n  \n  return\
    \ result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplgdvzt2n.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x429175]

    ??:? void tmplgdvzt2n.__unittest_L34_C1() [0x428a36]

    ??:? void tmplgdvzt2n.__modtest() [0x428ef4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d59f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c432]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4316bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431b6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431649]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c409]

    ??:? runModuleUnitTests [0x42d375]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429638]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int i;\n  float min = numbers[0];\n  float max = numbers[0];\n\
    \  for(i = 1; i < numbers.length; ++i)\n  {\n    min = std.min(min, numbers[i]);\n\
    \    max = std.max(max, numbers[i]);\n  }\n  return std.array.to(numbers, i =>\
    \ std.min(max, std.min(1.0f, std.max(0.0f, (numbers[i] - min)/(max - min))));\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s732zx2.d(20): Error: found `;` when expecting `,`

    /tmp/tmp1s732zx2.d(21): Error: expression expected, not `}`

    /tmp/tmp1s732zx2.d(22): Error: found `unittest` when expecting `,`

    /tmp/tmp1s732zx2.d(32): Error: found `void` when expecting `,`

    /tmp/tmp1s732zx2.d(32): Error: found `{` when expecting `,`

    /tmp/tmp1s732zx2.d(32): Error: expression expected, not `}`

    /tmp/tmp1s732zx2.d(32): Error: found `End of File` when expecting `,`

    /tmp/tmp1s732zx2.d(32): Error: found `End of File` when expecting `)`

    /tmp/tmp1s732zx2.d(32): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmp1s732zx2.d(32): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s732zx2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var max: float = numbers[0];\n    var min: float = numbers[0];\n\
    \    var i: float = 0;\n    \n    for (i = 0; i < numbers.length; ++i) \n    {\n\
    \        if (numbers[i] > max) max = numbers[i];\n        if (numbers[i] < min)\
    \ min = numbers[i];\n    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcz_5pb3e.d(12): Error: found `max` when expecting `;` following
    statement

    /tmp/tmpcz_5pb3e.d(12): Error: found `:` instead of statement

    /tmp/tmpcz_5pb3e.d(13): Error: found `min` when expecting `;` following statement

    /tmp/tmpcz_5pb3e.d(13): Error: found `:` instead of statement

    /tmp/tmpcz_5pb3e.d(14): Error: found `i` when expecting `;` following statement

    /tmp/tmpcz_5pb3e.d(14): Error: found `:` instead of statement

    /tmp/tmpcz_5pb3e.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz_5pb3e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    if (n < 2) throw new Exception(\"\
    rescale_to_unit: not enough numbers to perform rescaling\");\n    \n    float[]\
    \ newNumbers = new float[n];\n    for (int i = 0; i < n; i++) {\n        newNumbers[i]\
    \ = numbers[i] * (float) i / (float) n - 1;\n    }\n    return newNumbers;\n}\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpot8z3qn0.d(17): Error: C style cast illegal, use `cast(float)i`

    /tmp/tmpot8z3qn0.d(17): Error: C style cast illegal, use `cast(float)n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpot8z3qn0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] output = new float[numbers.length];\n    for(int i=0;\
    \ i<numbers.length; i++)\n    {\n        if(numbers[i] != 0.0f) // not 0.0 or\
    \ NaN\n        {\n            double numerator = numbers[i]; // ignore NaN values\n\
    \            double denominator = 1.0; // ignore non-positive values\n       \
    \     double fraction = Math.pow(10, numerator.mantissa.bitLength());\n      \
    \      for(int j=0; j<numerator.exp; j++) // divide by the largest power of 10\
    \ that is smaller than the denominator\n            {\n                denominator\
    \ /= fraction;\n                fraction *= 10.0;\n            }\n           \
    \ output[i] = numerator/denominator;\n        }\n        else\n        {\n   \
    \         output[i] = 0.0f;\n        }\n    }\n    return output;\n}\n</code>\n\
    <|/ a tags=c#,math,rescale |>\n<| c |>\n`Math.pow` returns a float, not double.\n\
    <|/ c |>\n<| c |>\nThanks for the note! I've updated my answer.\n<|/ c |>\n<|\
    \ a dscore=2 tags=c#,math,rescale |>\nThis simple algorithm will do the job:\n\
    <code>\ndouble scale = 1.0;\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6f_fj1ph.d(34): Error: declaration expected, not `<`

    /tmp/tmp6f_fj1ph.d(40): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6f_fj1ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164450
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float smallest = numbers[0];\n    float largest = numbers[0];\n\
    \    for (int i = 1; i < numbers.length; ++i) \n    {\n        if (numbers[i]\
    \ < smallest) smallest = numbers[i];\n        if (numbers[i] > largest) largest\
    \ = numbers[i];\n    }\n    float range = largest - smallest;\n    float offset\
    \ = smallest;\n    float[] results = new float[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; ++i)\n        results[i] = offset + (numbers[i] -\
    \ offset) / range;\n    return results;\n}\n/*\n Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min)\n{\n    float smallest = numbers[0];\n    float largest\
    \ = numbers[0];\n    for (int i = 1; i < numbers.length; ++i) \n    {\n      \
    \  if (numbers[i] < smallest) smallest = numbers[i];\n        if (numbers[i] >\
    \ largest) largest = numbers[i];\n    }\n    float range = largest - smallest;\n\
    \    float offset = smallest;\n    float[] results = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; ++i)\n        results[i] = offset + (numbers[i]\
    \ - offset) / range;\n    float new_min = (smallest - min) / range;\n    float\
    \ new_max = (largest - min) / range;\n    for(int i = 0; i < results.length; ++i)\
    \ {\n        results[i] = results[i] * (new_max - new_min) + new_min;\n    }\n\
    \    return results;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float min, float max)\n{\n    float smallest = numbers[0];\n    float\
    \ largest = numbers[0];\n    for (int i = 1; i < numbers.length; ++i) \n    {\n\
    \        if (numbers[i] < smallest) smallest = numbers[i];\n        if (numbers[i]\
    \ > largest) largest = numbers[i];\n    }\n    float range = largest - smallest;\n\
    \    float offset = smallest;\n    float[] results = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; ++i)\n        results[i] = offset + (numbers[i]\
    \ - offset) / range;\n    float \nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppn6xm21n.d(76): Error: no identifier for declarator `float`

    /tmp/tmppn6xm21n.d(76): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppn6xm21n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] scaled = new float[numbers.length];\n    int min =\
    \ 0;\n    int max = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n\
    \        if (numbers[i] > numbers[max]) \n        {\n            max = i;\n  \
    \      }\n        if (numbers[i] < numbers[min]) \n        {\n            min\
    \ = i;\n        }\n    }\n    float min = numbers[min];\n    float max = numbers[max];\n\
    \    float scale = 1.0f / max - min;\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        scaled[i] = numbers[i] * scale;\n    }\n    return scaled;\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will become 0 and the largest\
    \ will become 1\n    >>> rescale_to_unit([0.0, 0.25, 0.5, 0.75, 1.0])\n    [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]\n*/\nfloat[] rescale_to_unit(float[] numbers, float[] scale)\
    \ \n{\n    float[] scaled = new float[numbers.length];\n    int min = 0;\n   \
    \ int max = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n       \
    \ if (numbers[i] > numbers[max]) \n        {\n            max = i;\n        }\n\
    \        if (numbers[i] < numbers[min]) \n        {\n            min = i;\n  \
    \      }\n    }\n    float min = numbers[min];\n    float max = numbers[max];\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        scaled[i] = numbers[i]\
    \ * scale[i];\n    }\n    return scaled;\n}\n/*\n Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], 2.0)\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[]\
    \ rescale_to_unit(float[] numbers, float[] scale, float[] offset) \n{\n    float[]\
    \ scaled = new float[numbers.length];\n    int min = 0;\n    int max = 0;\n  \
    \  for (int i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i] >\
    \ numbers[max]) \n        {\n            max = i;\n        }\n        if (numbers[i]\
    \ < numbers[min]) \n        {\n            min = i;\n        }\n    }\n    float\
    \ min = numbers[min];\n    float max = numbers[max];\n    for (int i = 0; i <\
    \ numbers.length; i++) \n    {\n        scaled[i] = numbers[i] * scale[i] + offset[i];\n\
    \    }\n    return scaled;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphljn49s6.d(96): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphljn49s6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var smallest_value = min(numbers);\n    var largest = max(numbers);\n\
    \    var range = largest-smallest_value;\n    var center = smallest_value+range/2;\n\
    \    var result = new float[numbers.length];\n    for(var i = 0; i < numbers.length;\
    \ i++)\n    {\n        result[i] = (numbers[i] - center)/range;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,algorithm,math,language-agnostic dscore=2\
    \ |>\n<| c |>\n+1 because I was going to post something similar to what you wrote.\
    \ Not that I do believe yours is the correct answer, but it's pretty close. :)\
    \   (It probably doesn't scale well though)\n<|/ c |>\n<| c |>\nI think it's pretty\
    \ good, but I would love to hear your thoughts on the scaling factor in each dimension.\n\
    <|/ c |>\n<| c |>\nThis seems pretty close, but I'm getting very small values\
    \ for the largest number.  I'm still working on trying to fix that though...\n\
    <|/ c |>\n<| c |>\nIt looks like your formula is just taking the mean of the values\
    \ in each dimension. I'm curious to see if there's any way you can improve this.\n\
    <|/ c |>\n<| c |>\nThat was actually what I was looking for.  I'm going to see\
    \ if anyone else comes up with anything better.  Thanks!\n<|/ c |>\n<| a tags=c#,algorithm,math,language-agnostic\
    \ |>\nI think I got it!\nI first tried a quick-and-dirty linear regression:\n\
    <code>\npublic class LinearModel\n{\n    public float Intercept\n    {\n     \
    \   get;\n        private set;\n    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qql2o3s.d(23): Error: declaration expected, not `<`

    /tmp/tmp8qql2o3s.d(26): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(26): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(29): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(32): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(32): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(35): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(35): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(38): Error: unterminated character constant

    /tmp/tmp8qql2o3s.d(49): Error: no identifier for declarator `set`

    /tmp/tmp8qql2o3s.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qql2o3s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double max = numbers[0];\n    double min = numbers[0];\n \
    \   for(int i = 1; i < numbers.length; ++i)\n    {\n        max = Math.max(numbers[i],\
    \ max);\n        min = Math.min(numbers[i], min);\n    }\n    double range = (max\
    \ - min);\n    double scale = (1.0d / (double)range);\n    double scaled_numbers[]\
    \ = new double[numbers.length];\n    for(int i = 0; i < numbers.length; ++i)\n\
    \    {\n        scaled_numbers[i] = numbers[i] * scale;\n    }\n    return scaled_numbers;\n\
    }\n/*\n Given a 3D array of numbers, apply a linear transform to each element,\
    \ such that the min number will become 0 and the max number will become 1\n  \
    \  >>> rescale_to_unit([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n    [[0.0, 0.25, 0.75],\
    \ [1.0, 1.5, 2.0]]\n    \n*/\nfloat[][] rescale_to_unit(float[][] numbers) \n\
    {\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        numbers[i] = rescale_to_unit(numbers[i]);\n\
    \    }\n    return numbers;\n}\n/*\n Given a 2D array of numbers, apply a linear\
    \ transform to each element, such that the min number will become 0 and the max\
    \ number will become 1\n    >>> rescale_to_unit([[1.0, 2.0], [3.0, 4.0]])\n  \
    \  [[0.0, 0.25], [0.5, 0.75]]\n    \n*/\nfloat[][] rescale_to_unit(float[][] numbers)\
    \ \n{\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        numbers[i]\
    \ = rescale_to_unit(numbers[i]);\n    }\n    return numbers;\n}\n/*\n Given a\
    \ 1D array of numbers, apply a linear transform to that array, such that the min\
    \ number will become 0 and the max number will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return rescale_to_unit(numbers.toFloatArray());\n}\n/*\n Given\
    \ a 1D array of numbers, apply a linear transform to that array, such that the\
    \ min number will become 0 and the max number will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return rescale_to_unit(numbers.toFloatArray());\n}\n/*\n Given\
    \ a 1D array of numbers, apply a linear transform to that array, such that the\
    \ min number will become 0 and the max number will become 1\n    >>> \nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp2pu36hr.d(20): Error: found `d` when expecting `)`

    /tmp/tmpp2pu36hr.d(20): Error: C style cast illegal, use `cast(double)range`

    /tmp/tmpp2pu36hr.d(20): Error: semicolon expected, not `)`

    /tmp/tmpp2pu36hr.d(20): Error: found `)` instead of statement

    /tmp/tmpp2pu36hr.d(21): Deprecation: instead of C-style syntax, use D-style syntax
    `double[] scaled_numbers`

    /tmp/tmpp2pu36hr.d(76): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp2pu36hr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    int i = 0;\n    for (i = 0;\
    \ i < numbers.length; i++) {\n        if (numbers[i] < min)\n            min =\
    \ numbers[i];\n        if (numbers[i] > max)\n            max = numbers[i];\n\
    \        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nThe easiest way is to just round each element in\
    \ the array to the nearest integer.\n<code>\nfor (int i=0; i<array.length; i++)\n\
    \    array[i] = Math.round(array[i]*100)/100;\n</code>\n<|/ a dscore=2 tags=java\
    \ |>\n<| c |>\nthis isn't correct, for instance if min is 5 and max is 15, the\
    \ numbers will become 5 and 10, because of the division happening before the rounding\n\
    <|/ c |>\n<| c |>\n: yes, that is correct behavior\n<|/ c |>\n<| a |>\nYou can\
    \ do it with Java's java.lang.Math library. For example:\n<code>\nimport java.math.*;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g2lwky9.d(25): Error: declaration expected, not `<`

    /tmp/tmp8g2lwky9.d(30): Error: no identifier for declarator `i`

    /tmp/tmp8g2lwky9.d(30): Error: declaration expected, not `<`

    /tmp/tmp8g2lwky9.d(30): Error: no identifier for declarator `i`

    /tmp/tmp8g2lwky9.d(30): Error: declaration expected, not `++`

    /tmp/tmp8g2lwky9.d(32): Error: declaration expected, not `<`

    /tmp/tmp8g2lwky9.d(35): Error: unterminated character constant

    /tmp/tmp8g2lwky9.d(41): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g2lwky9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\t// Linear transform\n\tvar min = Vector.min(numbers);\n\tvar\
    \ max = Vector.max(numbers);\n\t\n\treturn Vector.map(numbers, x => x / max *\
    \ 0.5f - min);\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n   \
    \ assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmovproa.d(13): Error: undefined identifier `var`

    /tmp/tmpdmovproa.d(13): Error: undefined identifier `Vector`, did you mean enum
    member `MIctor`?

    /tmp/tmpdmovproa.d(14): Error: undefined identifier `var`

    /tmp/tmpdmovproa.d(14): Error: undefined identifier `Vector`, did you mean enum
    member `MIctor`?

    /tmp/tmpdmovproa.d(16): Error: undefined identifier `Vector`, did you mean enum
    member `MIctor`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmovproa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double min = min(numbers);\n    double max = max(numbers);\n\
    \    double range = max - min;\n    double range_inverse = (double)1.0/range;\n\
    \    double[] result = new double[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        result[i] = (numbers[i] - min)*range_inverse;\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=1 tags=image-processing,colors,c++,histogram\
    \ |>\nThis question was marked as a duplicate but its not because of the title\
    \ of the question.\nThis is how I did it using histogram equalization algorithm.\n\
    <code>\n#include \"opencv2\\highgui\\highgui.hpp\"\n#include \"opencv2\\imgproc\\\
    imgproc.hpp\"\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpniromip_.d(15): Error: C style cast illegal, use `cast(double)1.00000`

    /tmp/tmpniromip_.d(21): Error: declaration expected, not `<`

    /tmp/tmpniromip_.d(27): Error: undefined escape sequence \h

    /tmp/tmpniromip_.d(27): Error: undefined escape sequence \h

    /tmp/tmpniromip_.d(28): Error: undefined escape sequence \i

    /tmp/tmpniromip_.d(28): Error: undefined escape sequence \i

    /tmp/tmpniromip_.d(33): Error: declaration expected, not `assert`

    /tmp/tmpniromip_.d(34): Error: declaration expected, not `assert`

    /tmp/tmpniromip_.d(35): Error: declaration expected, not `assert`

    /tmp/tmpniromip_.d(36): Error: declaration expected, not `assert`

    /tmp/tmpniromip_.d(37): Error: declaration expected, not `assert`

    /tmp/tmpniromip_.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpniromip_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var newNumbers = new float[numbers.length];\n    var min =\
    \ float.MaxValue;\n    var max = float.MinValue;\n    \n    for (int i = 0; i\
    \ < numbers.length; i++) \n    {\n        var value = numbers[i];\n        if\
    \ (value > max)\n            max = value;\n        if (value < min)\n        \
    \    min = value;\n    }\n    \n    for (int i = 0; i < numbers.length; i++) \n\
    \    {\n        var value = numbers[i];\n        var scaledValue = value / (max\
    \ - min);\n        if (scaledValue < 0)\n            scaledValue = 0;\n      \
    \  if (scaledValue > 1)\n            scaledValue = 1;\n        newNumbers[i] =\
    \ scaledValue;\n    }\n    return newNumbers;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzetlcncv.d(12): Error: undefined identifier `var`

    /tmp/tmpzetlcncv.d(13): Error: undefined identifier `var`

    /tmp/tmpzetlcncv.d(13): Error: no property `MaxValue` for type `float`

    /tmp/tmpzetlcncv.d(14): Error: undefined identifier `var`

    /tmp/tmpzetlcncv.d(14): Error: no property `MinValue` for type `float`

    /tmp/tmpzetlcncv.d(18): Error: undefined identifier `var`

    /tmp/tmpzetlcncv.d(27): Error: undefined identifier `var`

    /tmp/tmpzetlcncv.d(28): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzetlcncv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int\
    \ i=0; i<numbers.length; i++)\n\t{\n\t\tmin = Math.min(numbers[i], min);\n\t\t\
    max = Math.max(numbers[i], max);\n\t}\n\tfloat scale = (max - min) / (numbers.length-1);\n\
    \tfloat[] result = new float[numbers.length];\n\tfor(int i=0; i<numbers.length;\
    \ i++)\n\t\tresult[i] = numbers[i]*scale;\n\treturn result;\n}\nunittest\n{\n\
    \    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm632l6ch.d(16): Error: undefined identifier `Math`

    /tmp/tmpm632l6ch.d(17): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm632l6ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tint n = numbers.length;\n\tfloat min = numbers[0];\n\tfloat\
    \ max = numbers[0];\n\t\n\tif (numbers.length > 1) \n\t{\n\t\tmin = numbers[0];\n\
    \t\tfor (int i = 1; i < n; ++i) \n\t\t{\n\t\t\tmin = MathF.min(min, numbers[i]);\n\
    \t\t\tmax = MathF.max(max, numbers[i]);\n\t\t}\n\t}\n\t\n\tfloat[] result = new\
    \ float[n];\n\tfor (int i = 0; i < n; ++i) \n\t{\n\t\tresult[i] = MathF.clamp(numbers[i]\
    \ * (max - min) + min, -max, max) - min;\n\t}\n\treturn result;\n}\n<|/ file source=github\
    \ |>\n<| c |>\nI used the MathF class because I thought it would be faster than\
    \ the normal Math class\n<|/ c |>\n<| c |>\n- I wouldn't expect much difference\
    \ between the two libraries either, unless you're doing this in millions of iterations.\
    \ If you need to do it a million times, it's worth profiling your code and seeing\
    \ where the bottlenecks are, then optimising them where necessary.\n<|/ c |>\n\
    <| a tags=c#,math,linear-interpolation |>\nI made a benchmark which shows how\
    \ the MathF version scales better:\n<code>\n   Method              | Average Time\
    \ (ms)\n---------------------+--------------------\n Naive Linear Interp | 257.5278\n\
    \ MathF Linear Interp | 624.8855\n</code>\nI used the following code:\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq22qf8kt.d(33): Error: declaration expected, not `<`

    /tmp/tmpq22qf8kt.d(38): Error: unterminated character constant

    /tmp/tmpq22qf8kt.d(38): Error: unterminated character constant

    /tmp/tmpq22qf8kt.d(38): Error: unterminated character constant

    /tmp/tmpq22qf8kt.d(51): Error: semicolon expected, not `.`

    /tmp/tmpq22qf8kt.d(51): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpq22qf8kt.d(52): Error: semicolon expected, not `.`

    /tmp/tmpq22qf8kt.d(52): Error: no identifier for declarator `.Linq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq22qf8kt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double[] numbers_double = new double[numbers.length];\n  \
    \  for(int i = 0; i < numbers.length; i++)\n    {\n        numbers_double[i] =\
    \ numbers[i];\n    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchp2c_6c.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchp2c_6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = float.MAX_VALUE;\n    float max = float.MIN_VALUE;\n\
    \    float range = 0;\n    float sum = 0;\n    float lastNumber = 0;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5g3dfo5.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5g3dfo5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return std.range.map(0.0, 1.0, numbers);\n}\n/* \n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    \n    The range of that array will be the range of the given array.\n   \
    \ >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 1.0, 1.5, 2.0, 2.5]\n\
    \    True\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, float[] range) \n\
    {\n    float[] result = std.array.arrayFloat(range);\n    float[] new_numbers\
    \ = rescale_to_unit(numbers);\n    for (int i = 0; i < new_numbers.length; i++)\
    \ result[i] = new_numbers[i];\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1v2dhu67.d(12): Deprecation: package `std.range` is not accessible
    here

    /tmp/tmp1v2dhu67.d(12): Error: undefined identifier `map` in package `std.range`

    /tmp/tmp1v2dhu67.d(25): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1v2dhu67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int l = length(numbers);\n    float[] result = new float[l];\n\
    \    if (l < 2) return numbers;\n    float min = float.MaxValue;\n    float max\
    \ = float.MinValue;\n    float range;\n    for (int i = 0; i < l; i++) {\n   \
    \     range = numbers[i] - min;\n        result[i] = min + (range / (max - min));\n\
    \        min = result[i];\n        max = result[i];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxu9nzmmw.d(12): Error: undefined identifier `length`

    /tmp/tmpxu9nzmmw.d(15): Error: no property `MaxValue` for type `float`

    /tmp/tmpxu9nzmmw.d(16): Error: no property `MinValue` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxu9nzmmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    //Debug.assert(numbers.length >= 2);\n    float[] result =\
    \ new float[numbers.length];\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        float number = numbers[i];\n\
    \        if (number < min)\n        {\n            min = number;\n        }\n\
    \        if (number > max)\n        {\n            max = number;\n        }\n\
    \    }\n    //Debug.assert(min < max);\n    float delta = max - min;\n    float\
    \ scale = 1.0f / delta;\n    for (int i = 0; i < numbers.length; i++)\n    {\n\
    \        result[i] = numbers[i] * scale;\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,java,math,rescale |>\n<| c |>\nYeah I used the formula: \n `result[i]\
    \ = numbers[i] * scale;`\nIt worked for me! Thank you for your answer.\n<|/ c\
    \ |>\n<| c |>\nYou might want to add a `return result;` at the end, to return\
    \ a float[] (or a Vector, if you want to), instead of an int[]. Otherwise you\
    \ cannot use it in other functions like `void foo(float[] numbers)`.\n<|/ c |>\n\
    <| c |>\nAlso, you don't need the ifs in the loop. You can just write `if (numbers[i]\
    \ > max) { max = numbers[i]; } else if (numbers[i] < min) { min = numbers[i];\
    \ }`\n<|/ c |>\n<| c |>\nYou are right on `return`. I added it.\n<|/ c |>\n<|\
    \ c |>\nNote that `if (numbers[i] > max)` doesn't do what I think you think it\
    \ does. `numbers[i] > max` will evaluate to `true` or `false`, but the if statement\
    \ won't execute that statement. The condition is checking the boolean value of\
    \ `numbers[i] > max`, not the value of `numbers[i]` itself. You probably meant\
    \ to write `if (numbers[i] > max) { max = numbers[i]; }`\n<|/ c |>\n<| a dscore=5\
    \ |>\nYou should be aware that if you rescale a float by dividing it by its maximum\
    \ value, you'll end up with a value that's less than one. In that case, you can\
    \ simply use an if statement to check if it's greater than one, and if so scale\
    \ it back to one. \nAn example:\n<code>\nfloat number = 1000;\nfloat scale = number\
    \ / std::numeric_limits<float>::max();\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3ej8n10.d(37): Error: declaration expected, not `<`

    /tmp/tmpx3ej8n10.d(48): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(54): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(54): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(57): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(57): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(57): Error: unterminated character constant

    /tmp/tmpx3ej8n10.d(61): Error: semicolon expected, not `:`

    /tmp/tmpx3ej8n10.d(61): Error: declaration expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3ej8n10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tint size = numbers.length;\n\tfloat[] scaled = new float[size];\n\
    \tfloat min = float.MAX_VALUE;\n\tfloat max = float.MIN_VALUE;\n\tfor (int i =\
    \ 0; i < size; i++)\n\t{\n\t\tscaled[i] = (float) numbers[i] / max;\n\t\tmin =\
    \ Math.min(min, scaled[i]);\n\t\tmax = Math.max(max, scaled[i]);\n\t}\n\tif (min\
    \ == max) {\n\t\treturn scaled;\n\t}\n\treturn rescale_to_unit(scaled);\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppk_87sd4.d(18): Error: C style cast illegal, use `cast(float)numbers[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppk_87sd4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if (numbers.length < 2) {\n        throw new IllegalArgumentException(\"\
    Can only rescale array of at least 2 elements\");\n    }\n    float min = Math.min(numbers[0],\
    \ numbers[1]);\n    float max = Math.max(numbers[0], numbers[1]);\n    \n    //\
    \ Normalize each number between [0, 1]\n    float[] normalizedNumbers = new float[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        normalizedNumbers[i]\
    \ = (numbers[i] - min) / (max - min);\n    }\n    return normalizedNumbers;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsq_blnf.d(13): Error: undefined identifier `IllegalArgumentException`

    /tmp/tmprsq_blnf.d(15): Error: undefined identifier `Math`

    /tmp/tmprsq_blnf.d(16): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsq_blnf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tfloat[] result = new float[numbers.length];\n\tdouble max_number\
    \ = numbers[0];\n\tdouble min_number = numbers[0];\n\tfor(int i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tif(numbers[i] > max_number)\n\t\t\tmax_number = numbers[i];\n\
    \t\tif(numbers[i] < min_number)\n\t\t\tmin_number = numbers[i];\n\t}\n\t\n\tfor(int\
    \ i = 0; i < numbers.length; i++)\n\t\tresult[i] = numbers[i] - min_number;\n\t\
    \n\tdouble scale = (max_number - min_number) / (result[0] - min_number);\n\t\n\
    \tfor(int i = 0; i < numbers.length; i++)\n\t\tresult[i] = result[i] * scale;\n\
    \t\n\treturn result;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\ndouble[] rescale_to_unit(double[]\
    \ numbers)\n{\n\tdouble[] result = new double[numbers.length];\n\tdouble max_number\
    \ = numbers[0];\n\tdouble min_number = numbers[0];\n\tfor(int i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tif(numbers[i] > max_number)\n\t\t\tmax_number = numbers[i];\n\
    \t\tif(numbers[i] < min_number)\n\t\t\tmin_number = numbers[i];\n\t}\n\t\n\tfor(int\
    \ i = 0; i < numbers.length; i++)\n\t\tresult[i] = numbers[i] - min_number;\n\t\
    \n\tdouble scale = (max_number - min_number) / (result[0] - min_number);\n\t\n\
    \tfor(int i = 0; i < numbers.length; i++)\n\t\tresult[i] = result[i] * scale;\n\
    \t\n\treturn result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0755920g.d(67): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294bd]

    ??:? void tmp0755920g.__unittest_L63_C1() [0x428d6e]

    ??:? void tmp0755920g.__modtest() [0x42923c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d8e7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c77a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431a05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431eb4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x431991]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c751]

    ??:? runModuleUnitTests [0x42d6bd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429980]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    int index\
    \ = 0;\n    for(int i = 0; i < numbers.length; i++)\n    {\n        result[i]\
    \ = numbers[i] - min(numbers[index], numbers[index + 1]);\n        index += 2;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ appear to be working as intended. For example, if I run `rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])` I get: `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0,\
    \ 1.0, 2.0, 3.0, 4.0]`\n<|/ c |>\n<| c |>\n, this is just an example, the algorithm\
    \ should scale any kind of array in any way. Also, note that this algorithm works\
    \ only with monotonically increasing arrays, but it is the same idea as in the\
    \ other answers.\n<|/ c |>\n<| a |>\nThe simplest way to do this sort of things\
    \ is to just make a list of all possible combinations of the two numbers and sort\
    \ them. Then you can just do a binary search to find the number with that range.\n\
    For example for numbers between 0 and 1, you can make a list of all possible combinations:\n\
    <code>\n0-1\n0-0.5\n0-0.25\n0-1\n0.5-1\n0.5-0.25\n0.5-0.75\n0.25-0.75\n0.25-0.75\n\
    0.25-0.75\n0.75-0.75\n0.75-0.75\n0.75-0.75\n0.75-0.75\n0.75-0.75\n</code>\nNow\
    \ you can just sort and search to find the right range:\n<code>\npublic class\
    \ Main\n{\n    public static void Main()\n    {\n        float[] input = new float[]\
    \ { 0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f };\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp7cystk8.d(21): Error: declaration expected, not `<`

    /tmp/tmpp7cystk8.d(24): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp7cystk8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    assert(numbers.length > 1);\n    float max = numbers[0];\n\
    \    float min = numbers[0];\n    for (int i = 1; i < numbers.length; i++) \n\
    \    {\n        if (numbers[i] > max) max = numbers[i];\n        if (numbers[i]\
    \ < min) min = numbers[i];\n    }\n    \n    float scale = 1.0f / (max - min);\n\
    \    for (int i = 0; i < numbers.length; i++) numbers[i] *= scale;\n    \n   \
    \ return numbers;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp32kxil1l.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x429169]

    ??:? void tmp32kxil1l.__unittest_L26_C1() [0x428976]

    ??:? void tmp32kxil1l.__modtest() [0x428e34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d39b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c22e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4313c1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431870]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43134d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c205]

    ??:? runModuleUnitTests [0x42d171]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42962c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    float scale = (largest - smallest) / float(n);\n\
    \    for (int i = 1; i < n; ++i) {\n        float v = numbers[i];\n        numbers[i]\
    \ = v - smallest;\n        numbers[i] = (numbers[i] - v) * scale;\n    }\n   \
    \ return numbers;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp45nqrz78.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp45nqrz78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tint len = numbers.length;\n\tif (len == 0) return new float[0];\n\
    \tfloat max = numbers[0];\n\tfor (int i = 1; i < len; i++) {\n\t\tmax = std::max(max,\
    \ numbers[i]);\n\t}\n\tfloat invmax = 1.0f / max;\n\tfloat[] results = new float[len];\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tresults[i] = numbers[i] * invmax;\n\t}\n\
    \treturn results;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiznp80xc.d(16): Error: found `:` when expecting `;` following statement

    /tmp/tmpiznp80xc.d(16): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiznp80xc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  int len1 = numbers.length;\n  int len2 = len1;\n  float min\
    \ = numbers[0];\n  float max = numbers[0];\n  float lastMin = numbers[0];\n  float\
    \ lastMax = numbers[0];\n  for(int i = 0; i < len1; i++) {\n    float curr = numbers[i];\n\
    \    if(curr < min) {\n      min = curr;\n      lastMin = min;\n    }\n    else\
    \ if(curr > max) {\n      max = curr;\n      lastMax = max;\n    }\n  }\n  float[]\
    \ result = new float[len1];\n  for(int i = 0; i < len1; i++) {\n    float curr\
    \ = numbers[i];\n    float scaled = (curr - min) * ((max - min) / (lastMax - lastMin));\n\
    \    result[i] = scaled;\n    lastMin = min;\n    lastMax = max;\n  }\n  return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nfunction Linearize(data:\
    \ Vector[]): Vector[];\nvar\n  max: Vector;\nbegin\n  max := max(data[1]);\n \
    \ for I := 1 to data.Length do\n  begin\n    data[I] := data[I] / max;\n  end;\n\
    end;\n</code>\n<|/ a tags=actionscript-3,math,actionscript |>\n<| a dscore=0 |>\n\
    <code>\nfunction linearize(array:Array):Array {\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoanzz7iu.d(39): Error: declaration expected, not `<`

    /tmp/tmpoanzz7iu.d(45): Error: semicolon expected, not `:`

    /tmp/tmpoanzz7iu.d(45): Error: declaration expected, not `:`

    /tmp/tmpoanzz7iu.d(47): Error: semicolon expected, not `:`

    /tmp/tmpoanzz7iu.d(47): Error: declaration expected, not `:`

    /tmp/tmpoanzz7iu.d(48): Error: declaration expected, not `for`

    /tmp/tmpoanzz7iu.d(51): Error: no identifier for declarator `end`

    /tmp/tmpoanzz7iu.d(52): Error: no identifier for declarator `end`

    /tmp/tmpoanzz7iu.d(53): Error: declaration expected, not `<`

    /tmp/tmpoanzz7iu.d(62): Error: declaration expected, not `assert`

    /tmp/tmpoanzz7iu.d(63): Error: declaration expected, not `assert`

    /tmp/tmpoanzz7iu.d(64): Error: declaration expected, not `assert`

    /tmp/tmpoanzz7iu.d(65): Error: declaration expected, not `assert`

    /tmp/tmpoanzz7iu.d(66): Error: declaration expected, not `assert`

    /tmp/tmpoanzz7iu.d(67): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoanzz7iu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    if (n < 2) {\n        throw new\
    \ RuntimeException(\"rescale_to_unit: need at least two numbers\");\n    }\n \
    \   \n    if (n == 1) return numbers;\n    \n    float[] unit = new float[n];\n\
    \    int count = 0;\n    float max = numbers[0];\n    float min = numbers[0];\n\
    \    for (int i = 0; i < n; i++) {\n        if (numbers[i] > max) {\n        \
    \    max = numbers[i];\n        } else if (numbers[i] < min) {\n            min\
    \ = numbers[i];\n        }\n        unit[count++] = numbers[i] - min;\n    }\n\
    \    \n    for (int i = 0; i < count; i++) {\n        unit[i] /= max - min;\n\
    \    }\n    return unit;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3y0t6b43.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmp3y0t6b43.d(14): Error: undefined identifier `RuntimeException`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3y0t6b43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int numElems = numbers.length;\n    float[] rescaled = new\
    \ float[numElems];\n    \n    float rescaleFactor = numbers[0]/numbers[1];\n \
    \   float previousNumber = numbers[0];\n    \n    for (int i=0; i<numElems; i++)\n\
    \    {\n        float currentNumber = numbers[i];\n        rescaled[i] = previousNumber\
    \ - currentNumber*rescaleFactor;\n        previousNumber = currentNumber;\n  \
    \  }\n    return rescaled;\n}\n</code>\n<|/ a tags=android,java,arrays,rescale\
    \ |>\n<| a tags=android,java,arrays,rescale |>\nI know this is a very old question\
    \ but just adding another answer, in case anyone else comes across this thread...\n\
    To rescale an Array of numbers, you can do the following:\n<code>\nprivate static\
    \ final double BASE_SCALE = 0.5;\nprivate static final double BASE_MINIMUM = 1.0;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphc3gwyam.d(26): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphc3gwyam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    Arrays.sort(numbers);\n    float largest = numbers[0];\n \
    \   float smallest = numbers[0];\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        if(numbers[i] >= largest)\n        {\n            largest = numbers[i];\n\
    \        }\n        if(numbers[i] <= smallest)\n        {\n            smallest\
    \ = numbers[i];\n        }\n    }\n    float diff = (largest - smallest);\n  \
    \  float scaled[] = new float[numbers.length];\n    for(int i = 0; i < scaled.length;\
    \ i++)\n    {\n        scaled[i] = diff / numbers.length;\n    }\n    return scaled;\n\
    }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32vwqsh6.d(27): Deprecation: instead of C-style syntax, use D-style
    syntax `float[] scaled`

    /tmp/tmp32vwqsh6.d(12): Error: undefined identifier `Arrays`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32vwqsh6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int min = numbers[0];\n    int max = numbers[0];\n    \n \
    \   for (int i = 1; i < numbers.length; i++)\n    {\n        float current = numbers[i];\n\
    \        if (current > max)\n            max = current;\n        else if (current\
    \ < min)\n            min = current;\n    }\n    \n    float diff = (max - min)\
    \ / (numbers.length - 1);\n    float[] result = new float[numbers.length];\n \
    \   for (int i = 0; i < numbers.length; i++)\n        result[i] = numbers[i] -\
    \ min;\n    \n    for (int i = 0; i < numbers.length; i++)\n        result[i]\
    \ += diff;\n    \n    return result;\n}\n</code>\n<|/ a dscore=2 tags=math,c#,.net,algorithm,array-algorithms\
    \ |>\n<| c |>\nThat is a lot more complicated than I imagined. How does it work\
    \ exactly? Also, the problem you mentioned above can be solved more simply by\
    \ looping through the array and applying the formula to each value, right? Just\
    \ trying to understand your code. Thanks!\n<|/ c |>\n<| c |>\nIt works by first\
    \ finding the min/max of the array.  Then we find how many items are in each bin.\
    \  Then we create a \"bin\" array with a \"width\" of the number of items in each\
    \ bin.  The width is \"width\" divided by the number of bins.  Then we loop through\
    \ the values and subtract min from each value.  Then we add diff to each value.\
    \  Then we add min to each value at the \"width\" of the bin.  That gives you\
    \ an array of \"width\" number of values.  Now you just need to loop through the\
    \ array of values and add them to their corresponding \"bin\".\n<|/ c |>\n<| c\
    \ |>\nI added some comments to the code to clarify what's going on.  If you have\
    \ any questions, feel free to ask.\n<|/ c |>\n<| c |>\nI've implemented it now.\
    \ Works like a charm. Thanks again! :)\n<|/ c |>\n<| c |>\nIf you want a simpler\
    \ version of the same thing, and don't care about readability or performance,\
    \ check out the C# code I posted as an alternative to this.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe above answers work just fine.\nI've also used this one:\n<code>\n  \
    \      int[] numbers = new int[] { 8, 4, 9, 2, 5, 4, 7 };\n        int min = numbers[0];\n\
    \        int max = numbers[0];\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7tdsrqaf.d(34): Error: declaration expected, not `<`

    /tmp/tmp7tdsrqaf.d(43): Error: unterminated character constant

    /tmp/tmp7tdsrqaf.d(46): Error: unterminated character constant

    /tmp/tmp7tdsrqaf.d(49): Error: unterminated character constant

    /tmp/tmp7tdsrqaf.d(53): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7tdsrqaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tassert (numbers.length >= 2);\n\tassert (numbers[0] < numbers[1]);\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90p6wjly.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90p6wjly.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tif (numbers.length < 2)\n\t{\n\t\treturn numbers;\n\t}\n\t\n\
    \tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\t\n\tfor (int i = 1; i\
    \ < numbers.length; ++i)\n\t{\n\t\tif (numbers[i] < min)\n\t\t{\n\t\t\tmin = numbers[i];\n\
    \t\t}\n\t\telse if (numbers[i] > max)\n\t\t{\n\t\t\tmax = numbers[i];\n\t\t}\n\
    \t}\n\t\n\tfloat[] output = new float[numbers.length];\n\tfor (int i = 0; i <\
    \ numbers.length; ++i)\n\t{\n\t\tfloat d = (numbers[i] - min) / (max - min);\n\
    \t\toutput[i] = d;\n\t}\n\treturn output;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    return float[] { 0, 1 } * (numbers - min(numbers)) / range(numbers)\
    \ + min(numbers);\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpazdt0i7v.d(12): Error: found `[` when expecting `.` following float

    /tmp/tmpazdt0i7v.d(12): Error: found `]` when expecting identifier following `float`.

    /tmp/tmpazdt0i7v.d(12): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpazdt0i7v.d(12): Error: found `}` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazdt0i7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int n = numbers.length;\n    if (n < 2)\n        return numbers;\n\
    unittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_aauffn.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_aauffn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tint n = numbers.length;\n\tfloat[] ret = new float[n];\n\t\n\
    \tfor(int i = 0; i < n; i++){\n\t\tret[i] = 1.0f/(numbers[i] - numbers[0]);\n\t\
    }\n\treturn ret;\n}\n/**\n * Scales all values in vector to range [0.0, 1.0]\n\
    \ * \n * \n */\nfloat[] rescale_to_unit(float[] numbers) {\n\tfloat[] ret = rescale_to_unit(numbers);\n\
    \tret[0] = 0.0f;\n\tret[ret.length-1] = 1.0f;\n\treturn ret;\n}\n/**\n * Scales\
    \ all values in vector to range [0.0, 1.0]\n * \n * \n */\nfloat[] rescale_to_unit(float[]\
    \ numbers) {\n\tfloat[] ret = rescale_to_unit(numbers);\n\tret[0] = 0.0f;\n\t\
    ret[ret.length-1] = 1.0f;\n\treturn ret;\n}\nfloat[] rescale_to_unit(float[] numbers)\
    \ {\n\tfloat[] ret = rescale_to_unit(numbers);\n\tret[0] = 0.0f;\n\tret[ret.length-1]\
    \ = 1.0f;\n\treturn ret;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0rs951m8.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmp0rs951m8.d(26): Error: `tmp0rs951m8.rescale_to_unit` called with argument
    types `(float[])` matches both:

    /tmp/tmp0rs951m8.d(10):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    and:

    /tmp/tmp0rs951m8.d(42):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    /tmp/tmp0rs951m8.d(37): Error: `tmp0rs951m8.rescale_to_unit` called with argument
    types `(float[])` matches both:

    /tmp/tmp0rs951m8.d(10):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    and:

    /tmp/tmp0rs951m8.d(42):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    /tmp/tmp0rs951m8.d(43): Error: `tmp0rs951m8.rescale_to_unit` called with argument
    types `(float[])` matches both:

    /tmp/tmp0rs951m8.d(10):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    and:

    /tmp/tmp0rs951m8.d(42):     `tmp0rs951m8.rescale_to_unit(float[] numbers)`

    /tmp/tmp0rs951m8.d(52): Error: `tmp0rs951m8.rescale_to_unit` called with argument
    types `(double[])` matche'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = float.MinValue;\n    float max = float.MaxValue;\n\
    \    for(int i = 0; i < numbers.Length; i++) \n    {\n        if(numbers[i] <\
    \ min) \n            min = numbers[i];\n        if(numbers[i] > max) \n      \
    \      max = numbers[i];\n    }\n    float[] rescaled = new float[numbers.Length];\n\
    \    for(int i = 0; i < numbers.Length; i++) \n    {\n        rescaled[i] = (float)(numbers[i]\
    \ - min) / (max - min);\n    }\n    return rescaled;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5pk3h3_.d(24): Error: C style cast illegal, use `cast(float)(numbers[i]
    - min)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5pk3h3_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float smallest_number_float = numbers[0];\n    float max_number_float\
    \ = numbers[0];\n    for (int i = 0; i < numbers.length; i++)\n    {\n       \
    \ float number_float = numbers[i];\n        smallest_number_float = min(number_float,\
    \ smallest_number_float);\n        max_number_float = max(number_float, max_number_float);\n\
    \    }\n    float scale = max_number_float / smallest_number_float;\n    float[]\
    \ scaled_numbers = new float[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        scaled_numbers[i] = numbers[i] * scale;\n    }\n    return\
    \ scaled_numbers;\n}\n</code>\n<|/ a tags=math,java,android,arrays |>\n<| a |>\n\
    For any value v of type float, where v > 0, the fractional part of a division\
    \ of v by itself will always be less than 0.5. Thus:\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fm0y57w.d(28): Error: declaration expected, not `<`

    /tmp/tmp3fm0y57w.d(36): Error: declaration expected, not `assert`

    /tmp/tmp3fm0y57w.d(37): Error: declaration expected, not `assert`

    /tmp/tmp3fm0y57w.d(38): Error: declaration expected, not `assert`

    /tmp/tmp3fm0y57w.d(39): Error: declaration expected, not `assert`

    /tmp/tmp3fm0y57w.d(40): Error: declaration expected, not `assert`

    /tmp/tmp3fm0y57w.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fm0y57w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int numElems = numbers.length;\n    if (numElems < 2) throw\
    \ new RuntimeException(\"Not enough elements to apply the rescale to!\");\n  \
    \  float minValue = numbers[0];\n    float maxValue = numbers[0];\n    float[]\
    \ output = new float[numElems];\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gg_kryh.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gg_kryh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = Vector.min(numbers);\n    float max = Vector.max(numbers);\n\
    \    float range = max - min;\n    float length = numbers.length();\n    float\
    \ scale = (float)(1.0 * length / Vector.length(numbers));\n    float[] result\
    \ = new float[numbers.length()];\n    for (int i = 0; i < numbers.length(); i++)\
    \ {\n        result[i] = min + (numbers[i] - min) * scale;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your approach, very concise.\
    \ I didn't know about `Vector.min` and `Vector.max`. Thanks.\n<|/ c |>\n<| a dscore=4\
    \ |>\nIn Swift 4 and Xcode 10 beta 6 (Swift 4.2) I used the code below for obtaining\
    \ linear interpolation between two or more points:\n<code>\nfunc interpolate(_\
    \ x1: Double, y1s: [Double], _ x2: Double, y2s: [Double]) -> Double {\n    assert(x1\
    \ < x2)\n    guard y1s.count >= 2 && y2s.count >= 2 else { return x1 }\n    let\
    \ ratio = (x1 - x2) / (y1s.last - y1s.first)\n    let y1: Double = y1s.reduce(y1\
    \ + ratio, >)\n    let y2: Double = y2s.reduce(y2, <)\n    return y1 + (y2 - y1)\
    \ * (ratio - 1)\n}\n</code>\n<|/ a tags=math,language-agnostic,linear-interpolation,linear-algebra\
    \ |>\n<| a tags=math,language-agnostic,linear-interpolation,linear-algebra dscore=3\
    \ |>\nHere's an implementation of the linear interpolation algorithm in Python:\n\
    <code>\nimport numpy as np\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiyci2vz7.d(16): Error: C style cast illegal, use `cast(float)(1.00000
    * length / Vector.length(numbers))`

    /tmp/tmpiyci2vz7.d(23): Error: declaration expected, not `<`

    /tmp/tmpiyci2vz7.d(26): Error: unterminated character constant

    /tmp/tmpiyci2vz7.d(42): Error: unterminated character constant

    /tmp/tmpiyci2vz7.d(49): Error: declaration expected, not `assert`

    /tmp/tmpiyci2vz7.d(50): Error: declaration expected, not `assert`

    /tmp/tmpiyci2vz7.d(51): Error: declaration expected, not `assert`

    /tmp/tmpiyci2vz7.d(52): Error: declaration expected, not `assert`

    /tmp/tmpiyci2vz7.d(53): Error: declaration expected, not `assert`

    /tmp/tmpiyci2vz7.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiyci2vz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    float[] mins\
    \ = std.min(numbers);\n    float[] maxes = std.max(numbers);\n    int minIdx =\
    \ std.findIndex(float.class, mins);\n    int maxIdx = std.findIndex(float.class,\
    \ maxes);\n    float minVal = mins[minIdx];\n    float maxVal = maxes[maxIdx];\n\
    \    float scale = std.min(minVal, maxVal);\n    std.transform(numbers, (float\
    \ n) -> {\n        float nscaled = n * scale;\n        nscaled = std.clamp(nscaled,\
    \ 0.0f, 1.0f);\n        return nscaled;\n    });\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,unity3d |>\n<| a |>\nYou could try something like this:\n<code>\n\
    using System.Collections.Generic;\nusing UnityEngine;\nusing System;\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67pf3hzk.d(15): Error: found `class` when expecting identifier
    following `float`.

    /tmp/tmp67pf3hzk.d(16): Error: found `class` when expecting identifier following
    `float`.

    /tmp/tmp67pf3hzk.d(20): Error: found `n` when expecting `.` following float

    /tmp/tmp67pf3hzk.d(20): Error: found `)` when expecting identifier following `float`.

    /tmp/tmp67pf3hzk.d(20): Error: expression expected, not `>`

    /tmp/tmp67pf3hzk.d(20): Error: found `{` when expecting `)`

    /tmp/tmp67pf3hzk.d(21): Error: found `float` when expecting `,`

    /tmp/tmp67pf3hzk.d(21): Error: found `;` when expecting `,`

    /tmp/tmp67pf3hzk.d(22): Error: found `;` when expecting `,`

    /tmp/tmp67pf3hzk.d(23): Error: expression expected, not `return`

    /tmp/tmp67pf3hzk.d(23): Error: found `nscaled` when expecting `,`

    /tmp/tmp67pf3hzk.d(23): Error: expression expected, not `;`

    /tmp/tmp67pf3hzk.d(24): Error: found `}` when expecting `,`

    /tmp/tmp67pf3hzk.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67pf3hzk.d", "-'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var min = numbers[0];\n    var max = numbers[0];\n    for\
    \ (i = 1; i < numbers.length; i++)\n    {\n        if (numbers[i] < min)\n   \
    \         min = numbers[i];\n        if (numbers[i] > max)\n            max =\
    \ numbers[i];\n    }\n    \n    var scale = (max - min) / (float)(numbers.length-1);\n\
    \    var res = [];\n    for (i = 0; i < numbers.length; i++)\n    {\n        res.push(numbers[i]\
    \ * scale);\n    }\n    return res;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    I needed to do the same thing in C#, and my solution was very similar to the answer\
    \ provided by. \n<code>\nstatic double LinearTransform(double x1, double x2, double\
    \ y1, double y2, double x)\n    {\n        return (y2 - y1) / (x2 - x1) * x +\
    \ y1;\n    }\n</code>\n<|/ a tags=algorithm,math,c#,scaling,transformation |>\n\
    <| a dscore=0 |>\nJust a small tweak to Tyler McGee's solution in Javascript and\
    \ fixed a typo in\n<code>\n res.push(numbers[i] * scale);\n</code>\nThat should\
    \ be:\n<code>\n res.push(numbers[i] * scale);\n</code>\nHere is the full code\
    \ with comments:\n<code>\nfunction rescale_to_unit(numbers) {\n  var min = numbers[0];\n\
    \  var max = numbers[0];\n  for (i = 1; i < numbers.length; i++)\n  {\n    if\
    \ (numbers[i] < min)\n      min = numbers[i];\n    if (numbers[i] > max)\n   \
    \   max = numbers[i];\n  }\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu2ju6hy9.d(22): Error: C style cast illegal, use `cast(float)(numbers.length
    - 1)`

    /tmp/tmpu2ju6hy9.d(30): Error: declaration expected, not `<`

    /tmp/tmpu2ju6hy9.d(38): Error: unrecognized declaration

    /tmp/tmpu2ju6hy9.d(42): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu2ju6hy9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    Vector4 _numbers = new Vector4(numbers);\n    Vector4 _sum\
    \ = _numbers.sum(0);\n    Vector4 _min = _numbers.min(0);\n    Vector4 _max =\
    \ _numbers.max(0);\n    Vector4 _range = _max - _min;\n    Vector4 _scale = _range\
    \ == 0.0 ? Vector4.one : (_range / _sum);\n    _scale.scale(_scale.x, _scale.y,\
    \ _scale.z);\n    float[] result = _numbers[0] * _scale.x + _numbers[1] * _scale.y\
    \ + _numbers[2] * _scale.z + _numbers[3] * _scale.w;\n    return result;\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nYour code works well on small numbers but\
    \ on big numbers it fails, for example:\n`float[] v1 = new float[4];\nv1[0] =\
    \ 1f;\nv1[1] = 3f;\nv1[2] = 4f;\nv1[3] = 7f;\nfloat[] v2 = new float[4];\nv2[0]\
    \ = 5f;\nv2[1] = 8f;\nv2[2] = 9f;\nv2[3] = 10f;\nfloat[] v3 = rescale_to_unit(v1);\n\
    float[] v4 = rescale_to_unit(v2);\nfloat[] v5 = rescale_to_unit(v3);\nfloat[]\
    \ v6 = rescale_to_unit(v4);\nfloat[] v7 = rescale_to_unit(v5);\nfloat[] v8 = rescale_to_unit(v6);\n\
    float[] v9 = rescale_to_unit(v7);\nfloat[] v10 = rescale_to_unit(v8);\nfloat[]\
    \ v11 = rescale_to_unit(v9);\nfloat[] v12 = rescale_to_unit(v10);\nfloat[] v13\
    \ = rescale_to_unit(v11);\nfloat[] v14 = rescale_to_unit(v12);\nfloat[] v15 =\
    \ rescale_to_unit(v13);\nfloat[] v16 = rescale_to_unit(v14);\nfloat[] v17 = rescale_to_unit(v15);\n\
    float[] v18 = rescale_to_unit(v16);\nfloat[] v19 = rescale_to_unit(v17);\nfloat[]\
    \ v20 = rescale_to_unit(v18);\nfloat[] v21 = rescale_to_unit(v19);\nfloat[] v22\
    \ = rescale_to_unit(v20);\nfloat[] v23 = rescale_to_unit(v21);\nfloat[] v24 =\
    \ rescale_to_unit(v22);\nfloat[] v25 = rescale_to_unit(v23);\nfloat[] v26 = rescale_to_unit(v24);\n\
    float[] v27 = rescale_to_unit\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpigduik9_.d(22): Error: declaration expected, not `<`

    /tmp/tmpigduik9_.d(26): Error: unterminated string constant starting at /tmp/tmpigduik9_.d(26)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpigduik9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float min = float.MaxValue;\n  float max = float.MinValue;\n\
    \  int i;\n  for (i = 0; i <= numbers.Length; i++)\n  {\n    min = Math.min(numbers[i],\
    \ min);\n    max = Math.max(numbers[i], max);\n  }\n  ArrayUtilities.fromArrayToDouble(numbers,\
    \ i => (double)((numbers[i] - min) / (max - min)));\n  return numbers;\n}\nunittest\n\
    {\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9])\
    \ == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpasbobvht.d(20): Error: C style cast illegal, use `cast(double)((numbers[i]
    - min) / (max - min))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpasbobvht.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float min = numbers[0];\n  float max = numbers[0];\n  for (int\
    \ i = 0; i < numbers.length; ++i)\n  {\n    if (numbers[i] < min)\n    {\n   \
    \   min = numbers[i];\n    }\n    if (numbers[i] > max)\n    {\n      max = numbers[i];\n\
    \    }\n  }\n  for (int i = 0; i < numbers.length; ++i)\n  {\n    numbers[i] =\
    \ numbers[i] - min;\n  }\n  float scale = 1.0f / max;\n  for (int i = 0; i < numbers.length;\
    \ ++i)\n  {\n    numbers[i] *= scale;\n  }\n  return numbers;\n}\n/*\n Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    \    such that the smallest number will become 0 and the largest will become 1\n\
    \    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[] numbers, int scale) \n{\n  return\
    \ rescale_to_unit(numbers, scale, 1.0f);\n}\n/*\n Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, int scaleX, float scaleY) \n{\n  float min = numbers[0];\n  float max\
    \ = numbers[0];\n  for (int i = 0; i < numbers.length; ++i)\n  {\n    if (numbers[i]\
    \ < min)\n    {\n      min = numbers[i];\n    }\n    if (numbers[i] > max)\n \
    \   {\n      max = numbers[i];\n    }\n  }\n  for (int i = 0; i < numbers.length;\
    \ ++i)\n  {\n    numbers[i] = numbers[i] - min;\n  }\n  float scale = scaleX /\
    \ max;\n  for (int i = 0; i < numbers.length; ++i)\n  {\n    numbers[i] *= scale;\n\
    \  }\n  return numbers;\n}\n/*\n Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\n    such that the smallest number will\
    \ become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers, float scale) \n{\n  return rescale_to_unit(numbers, scale, 1.0f);\n\
    }\n/*\n Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\n    such that the smallest number will be\nunittest\n{\n   \
    \ alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0,\
    \ 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmtrr7ml.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmtrr7ml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0], max = numbers[0];\n    for(int i=1;\
    \ i<numbers.length; i++)\n    {\n        if(numbers[i] < min)\n            min\
    \ = numbers[i];\n        else if(numbers[i] > max)\n            max = numbers[i];\n\
    \    }\n    float scale = (max - min) / 2.0f;\n    numbers = new float[numbers.length];\n\
    \    for(int i=0; i<numbers.length; i++)\n    {\n        numbers[i] = (float)((numbers[i]\
    \ - min) / scale);\n    }\n    return numbers;\n}\nunittest\n{\n    alias candidate\
    \ = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n  \
    \  assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcnl2d4og.d(24): Error: C style cast illegal, use `cast(float)((numbers[i]
    - min) / scale)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnl2d4og.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] results = new float[numbers.length];\n    \n    float\
    \ min = float.MAX_VALUE;\n    float max = float.MIN_VALUE;\n    for (int i = 0;\
    \ i < numbers.length; i++) \n    {\n        float number = numbers[i];\n     \
    \   if (number < min) min = number;\n        if (number > max) max = number;\n\
    \        results[i] = number - min * (max - min) / 2.0f;\n    }\n    \n    return\
    \ results;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9k_jsd7.d(14): Error: no property `MAX_VALUE` for type `float`

    /tmp/tmpn9k_jsd7.d(15): Error: no property `MIN_VALUE` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9k_jsd7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    for(int i\
    \ = 0; i < numbers.length; i++)\n        result[i] = (numbers[i] - min(numbers))\
    \ / (max(numbers) - min(numbers));\n    return result;\n}\n/*\n Given an array\
    \ of numbers, map it to a new array of numbers scaled to the range [0, 1]\n  \
    \  In this case, 0 means no change and 1 means maximum change.\n    >>> rescale_to_interval([1.0,\
    \ 2.0, 3.0, 4.0, 5.0], (0, 1))\n    [0.5, 0.5, 0.5, 0.5, 0.5]\n    \n*/\nfloat[]\
    \ rescale_to_interval(float[] numbers, float[] interval)\n{\n    float[] result\
    \ = new float[numbers.length];\n    for(int i = 0; i < numbers.length; i++)\n\
    \        result[i] = (numbers[i] - interval[0]) / (interval[1] - interval[0]);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = rescale_to_unit;\n\n\
    \    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw651y3n.d(14): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmprw651y3n.d(14): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmprw651y3n.d(14): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw651y3n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    double minValue = numbers[0];\n    double maxValue = numbers[0];\n\
    \    for(int i=1; i<numbers.length; i++)\n    {\n        if(numbers[i] < minValue)\
    \ minValue = numbers[i];\n        if(numbers[i] > maxValue) maxValue = numbers[i];\n\
    \    }\n    \n    double scale = (maxValue - minValue) / (numbers.length - 1);\n\
    \    for(int i=0; i<numbers.length; i++)\n    {\n        numbers[i] = numbers[i]\
    \ * scale + minValue;\n    }\n    \n    return numbers;\n}\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm3wuchiz.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290fd]

    ??:? void tmpm3wuchiz.__unittest_L28_C1() [0x4289be]

    ??:? void tmpm3wuchiz.__modtest() [0x428e7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d32f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c1c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431355]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431804]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4312e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c199]

    ??:? runModuleUnitTests [0x42d105]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float[] result = new float[numbers.length];\n    if (numbers.length\
    \ < 2) {\n        return result;\n    }\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for(int i=0; i<numbers.length; ++i) {\n        float\
    \ number = numbers[i];\n        if (number < min) min = number;\n        if (number\
    \ > max) max = number;\n    }\n    float range = (max-min);\n    float scale =\
    \ 1./range;\n    for(int i=0; i<numbers.length; ++i) {\n        float number =\
    \ numbers[i];\n        result[i]= number*scale;\n    }\n    return result;\n}\n\
    /*\n Apply a linear transform to a 2D array (matrix).\n    All the numbers are\
    \ assumed to be of the same dimension.\n    Matrices can be of any size.\n   \
    \ Matrices are assumed to start at 0\n    >>> matrix([[1,2], [3,4]])\n    [[1.0,\
    \ 2.0], [3.0, 4.0]]\n    \n \n \n \n \n*/\nunittest\n{\n    alias candidate =\
    \ rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8fwppc4l.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmp8fwppc4l.__unittest_L44_C1() [0x4289c6]

    ??:? void tmp8fwppc4l.__modtest() [0x428e84]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d52f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42c3c2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43164d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431afc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4315d9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c399]

    ??:? runModuleUnitTests [0x42d305]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    float min = numbers[0];\n    float max = numbers[0];\n   \
    \ float scale = 1.0;\n    for(int i=0; i < numbers.length; ++i)\n    {\n     \
    \   if(numbers[i] < min)\n            min = numbers[i];\n        else if(numbers[i]\
    \ > max)\n            max = numbers[i];\n    }\n    float range = (max - min);\n\
    \    scale = range/numbers.length;\n    for(int i=0; i < numbers.length; ++i)\n\
    \        numbers[i] *= scale;\n    return numbers;\n}\n/*\n Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\n    such\
    \ that the smallest number will become 0 and the largest will become 1\n    >>>\
    \ rescale_to_unit([0.990, 1.000, 1.000, 1.000, 1.000])\n    [0.99, 0.99, 0.99,\
    \ 0.99, 0.99]\n*/\nfloat[] rescale_to_unit(float[][] numbers)\n{\n    float[]\
    \ result = new float[numbers.length];\n    float min = numbers[0][0];\n    float\
    \ max = numbers[0][0];\n    for(int i=0; i < result.length; ++i)\n    {\n    \
    \    float min = numbers[0][i];\n        float max = numbers[0][i];\n        for(int\
    \ j=1; j < numbers.length; ++j)\n        {\n            if(numbers[j][i] < min)\n\
    \                min = numbers[j][i];\n            else if(numbers[j][i] > max)\n\
    \                max = numbers[j][i];\n        }\n        float range = (max -\
    \ min);\n        result[i] = (numbers[j][i]-min)/range;\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=java |>\n<| a |>\nI used this simple and easy solution\
    \ to convert a float array to int\n<code>\npublic int[] convertFloatArrayToInt(float[]\
    \ arr) {\n        int arrSize = (int) arr.length; // size of the array\n     \
    \   int[] newArray = new int[arrSize]; // create a new int array\n        for\
    \ (int i = 0; i < arrSize; i++) { // iterate over the array\n            newArray[i]\
    \ = (int) arr[i]; // cast float to int\n        }\n        return newArray;\n\
    \    }\n</code>\n<|/ a dscore=1 tags=java |>\n<| c |>\nThis works great and should\
    \ have been marked as answer, because it is really simple and straight forward.\
    \ Simple, straight forward, and concise. Thanks!\n<|/ c |>\n<| a tags=java |>\n\
    I did it like this (Java8):\n<code>\nfloat[] array = new float[]{0,1,2,3,4,5};\n\
    IntStream.range(0, array.length).map(i -> array[i]).collect(Collectors.toList());\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1991ps3x.d(55): Error: declaration expected, not `<`

    /tmp/tmp1991ps3x.d(63): Error: declaration expected, not `for`

    /tmp/tmp1991ps3x.d(63): Error: no identifier for declarator `i`

    /tmp/tmp1991ps3x.d(63): Error: declaration expected, not `<`

    /tmp/tmp1991ps3x.d(63): Error: no identifier for declarator `i`

    /tmp/tmp1991ps3x.d(63): Error: declaration expected, not `++`

    /tmp/tmp1991ps3x.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1991ps3x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    int length = numbers.length;\n    float largest = numbers[0];\n\
    \    float smallest = numbers[0];\n    float scale = 1;\n    for (int i = 1; i\
    \ < length; i++)\n    {\n        largest = Math.max(largest, numbers[i]);\n  \
    \      smallest = Math.min(smallest, numbers[i]);\n    }\n    for (int i = 0;\
    \ i < length; i++)\n    {\n        numbers[i] = (largest - smallest) * numbers[i]\
    \ / scale;\n    }\n    return numbers;\n}\n</code>\n<|/ a tags=math,arrays,c#\
    \ |>\n<| c |>\nI believe this only works if numbers have to be transformed from\
    \ one range to another.  In that case it appears to transform all the numbers\
    \ into their original range, except for the ones that are less than the minimum.\n\
    <|/ c |>\n<| c |>\nyes, that's why i mentioned it in the first line :) but since\
    \ op wants \"all the numbers\" to be transformed i didn't mention it\n<|/ c |>\n\
    <| a tags=math,arrays,c# |>\nThis is a nice little function I made for myself\
    \ which should handle any number of arrays and any number of ranges given.  It\
    \ assumes numbers are in the range [0, 1[ (which it does a check on).\n<code>\n\
    public IEnumerable<double> GetRangeValues()\n{\n    yield return 0.0;\n    yield\
    \ return 1.0;\n    foreach (double[] arr in GetArrays()) {\n        foreach (double\
    \ range in GetRanges(arr)) {\n            double low = arr[0];\n            double\
    \ high = arr[1];\n            double mid = (low + high) / 2;\n            while\
    \ (low < high) {\n                yield return mid;\n                mid = (mid\
    \ + range) / 2;\n            }\n        }\n    }\n}\n</code>\nThis can then be\
    \ used to transform an arbitrary array of numbers by finding the smallest range\
    \ and then normalizing it to the range of this specific array.  I'm sure this\
    \ could be improved to use floating point numbers but for my purposes it doesn't\
    \ matter.\n<code>\npublic void NormalizeArrays()\n{\n    var minArr = GetArrays().Min();\n\
    \    var maxArr = GetArrays().Max();\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_lt0twns.d(27): Error: declaration expected, not `<`

    /tmp/tmp_lt0twns.d(33): Error: unterminated character constant

    /tmp/tmp_lt0twns.d(33): Error: unterminated character constant

    /tmp/tmp_lt0twns.d(41): Error: no identifier for declarator `yield`

    /tmp/tmp_lt0twns.d(41): Error: declaration expected, not `return`

    /tmp/tmp_lt0twns.d(42): Error: declaration expected, not `foreach`

    /tmp/tmp_lt0twns.d(47): Error: declaration expected, not `while`

    /tmp/tmp_lt0twns.d(49): Error: no identifier for declarator `mid`

    /tmp/tmp_lt0twns.d(49): Error: declaration expected, not `=`

    /tmp/tmp_lt0twns.d(50): Error: unrecognized declaration

    /tmp/tmp_lt0twns.d(55): Error: unterminated character constant

    /tmp/tmp_lt0twns.d(55): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lt0twns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    var scale = getMin(numbers);\n    var unit = new float[numbers.length];\n\
    \    var index = 0;\n    for (float n : float[] numbers)\n    {\n        unit[index]\
    \ = n / scale;\n        index++;\n    }\n    return unit;\n}\nunittest\n{\n  \
    \  alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) ==\
    \ [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zzkshvk.d(15): Error: semicolon expected, not `:`

    /tmp/tmp5zzkshvk.d(15): Error: expression expected, not `:`

    /tmp/tmp5zzkshvk.d(15): Error: found `float` when expecting `;` following `for`
    condition

    /tmp/tmp5zzkshvk.d(15): Error: found `numbers` when expecting `)`

    /tmp/tmp5zzkshvk.d(15): Error: found `)` instead of statement

    /tmp/tmp5zzkshvk.d(20): Error: declaration expected, not `return`

    /tmp/tmp5zzkshvk.d(21): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zzkshvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    // assert numbers.length > 1\n    var minNum = numbers[0];\n\
    \    var maxNum = numbers[0];\n    var sum = 0;\n    var n = 0;\n    \n    foreach(f\
    \ in numbers) {\n        sum += f; \n        if (f > maxNum) {\n            maxNum\
    \ = f;\n        }\n        else if (f < minNum) {\n            minNum = f;\n \
    \       }\n    }\n    \n    var scale = (maxNum-minNum) / (sum - 1.0);\n    \n\
    \    foreach(f in numbers) {\n        var scaled = f * scale;\n        numbers[n++]\
    \ = scaled;\n    }\n    \n    return numbers;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI added a more concise version which only uses std.arrays, std.algorithms\
    \ and std.math\n<|/ c |>\n<| c |>\nThe \"more concise\" version doesn't quite\
    \ work, because it uses `max` which ignores negative values. Instead you could\
    \ use [the algorithm from my answer](http://stackoverflow.com/a/23297905/189564)\n\
    <|/ c |>\n<| a |>\nMy answer on another question has some code which can do the\
    \ same thing without using std.math at all.  It's not as simple as using min and\
    \ max, but it does make use of the fact that the minimum is never negative.  I\
    \ thought I'd include the code here, too.  I haven't tested it extensively, so\
    \ I'm not sure how well it works with your data, though.\n<code>\nfunction rescale_to_unit(numbers:\
    \ float[])\n{\n    // assert numbers.length > 1\n    var minimum = numbers[0];\n\
    \    var maximum = numbers[0];\nunittest\n{\n    alias candidate = rescale_to_unit;\n\
    \n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0,\
    \ 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) ==\
    \ [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0, 11.0, 15.0, 13.0,\
    \ 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk1n3uzx.d(18): Error: no identifier for declarator `f`

    /tmp/tmpzk1n3uzx.d(18): Error: found `in` when expecting `;`

    /tmp/tmpzk1n3uzx.d(30): Error: no identifier for declarator `f`

    /tmp/tmpzk1n3uzx.d(30): Error: found `in` when expecting `;`

    /tmp/tmpzk1n3uzx.d(37): Error: declaration expected, not `<`

    /tmp/tmpzk1n3uzx.d(43): Error: unterminated character constant

    /tmp/tmpzk1n3uzx.d(46): Error: unterminated character constant

    /tmp/tmpzk1n3uzx.d(46): Error: unterminated character constant

    /tmp/tmpzk1n3uzx.d(46): Error: unterminated character constant

    /tmp/tmpzk1n3uzx.d(46): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk1n3uzx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n    if(numbers.length < 2) return null;\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for(int i = 1; i < numbers.length; i++) {\n\
    \        if(numbers[i] < min) min = numbers[i];\n        if(numbers[i] > max)\
    \ max = numbers[i];\n    }\n    float scale = (max - min) / (numbers.length -\
    \ 1);\n    float[] result = new float[numbers.length];\n    for(int i = 0; i <\
    \ numbers.length; i++) {\n        result[i] = numbers[i] - min;\n        result[i]\
    \ = result[i] * scale;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI believe the answer to the question asked is \"no\", but your\
    \ answer is \"maybe\". I think your answer is correct, but I wonder if the question\
    \ was supposed to ask for a different transformation, or if they were asking for\
    \ a transformation that scales negative numbers to the range 0 .. 1. I assume\
    \ that if they were asking for scaling to the range 1 .. 0 the answer is \"yes\"\
    .\n<|/ c |>\n<| c |>\nHmmm... Maybe the answer is \"maybe\". The question is ambiguous.\
    \ I thought he was asking for rescaling an array of numbers to [0,1] (not necessarily\
    \ to the range of [-1,1]) and then to transform it using linear equation, like\
    \ [this one](http://en.wikipedia.org/wiki/Linear_equation#Rescaling). So this\
    \ solution is definitely not correct. But maybe I'm missing something.\n<|/ c\
    \ |>\n<| c |>\nWell, your solution scales the numbers to the range [0,1], i.e.\
    \ [0,1] is scaled linearly, not [-1,1]. The answer to the question asked was \"\
    no\", the solution I posted was \"yes\". I think you both have guessed correctly\
    \ that the question was asking about a transformation that rescales negative numbers\
    \ to the range 0 .. 1.\n<|/ c |>\n<| a dscore=0 tags=c#,.net |>\nI'm guessing\
    \ your question is asking about normalizing numbers. \nA common way of doing this\
    \ is to divide by the maximum value and then multiply by one minus that maximum\
    \ value. \n<code>\npublic static float Normalize(float x, float maxVal) {\n  \
    \  return x / maxVal * -1.0f;\n}\n</code>\n<|/ a |>\n<| c |>\nYour example doesn't\
    \ scale any negative numbers correctly (try it.) And it doesn't work correctly\
    \ for non-positive numbers (try it.) I think you meant \"divide by the *minimum*\
    \ value\" and multiply by -1.\n<|/ c |>\n<| a dscore=0 tags=c#,.net |>\nI believe\
    \ this \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbap_um49.d(27): Error: declaration expected, not `<`

    /tmp/tmpbap_um49.d(39): Error: unterminated character constant

    /tmp/tmpbap_um49.d(44): Error: unrecognized declaration

    /tmp/tmpbap_um49.d(48): Error: unterminated character constant

    /tmp/tmpbap_um49.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbap_um49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n\tint min = Mathf.Min(numbers[0], numbers[1]);\n\tint max = Mathf.Max(numbers[0],\
    \ numbers[1]);\n\tfor(int i = 0; i < numbers.Length; i++)\n\t\tnumbers[i] = Mathf.Lerp(numbers[i],\
    \ 0, 1 - min / max);\n\treturn numbers;\n}\n/*\n This function will return the\
    \ given number if the number is within the given range\n    otherwise it will\
    \ return a random number between min and max values\n    \n*/\nfloat get_random_number(int\
    \ min, int max) \n{\n\tfloat number = 0;\n\twhile(number == 0)\n\t{\n\t\tnumber\
    \ = Random.Range(min,max);\n\t}\n\treturn number;\n}\n/*\n Given an array of numbers,\
    \ find the minimum and the maximum of that array\n    \n*/\nunittest\n{\n    alias\
    \ candidate = rescale_to_unit;\n\n    assert(candidate([2.0, 49.9]) == [0.0, 1.0]);\n\
    \    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n    assert(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n    assert(candidate([2.0,\
    \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n    assert(candidate([12.0,\
    \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt59c448a.d(12): Error: undefined identifier `Mathf`

    /tmp/tmpt59c448a.d(13): Error: undefined identifier `Mathf`

    /tmp/tmpt59c448a.d(14): Error: no property `Length` for type `float[]`

    /tmp/tmpt59c448a.d(15): Error: undefined identifier `Mathf`

    /tmp/tmpt59c448a.d(28): Error: undefined identifier `Random`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt59c448a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\n    such that\
    \ the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n*/\nfloat[] rescale_to_unit(float[]\
    \ numbers) \n{\n  float total = 0;\n  for (int i = 0; i < numbers.length; ++i)\
    \ {\n    total += numbers[i];\n  }\n  float range = numbers[numbers.length - 1]\
    \ - numbers[0];\n  float scale = (float)(total / range);\n  for (int i = 0; i\
    \ < numbers.length; ++i) {\n    numbers[i] *= scale;\n  }\n  return numbers;\n\
    }\n</code>\n<|/ a tags=java,math |>\n<| c |>\n\"*the smallest number will become\
    \ 0 and the largest will become 1*\" ... and that is the meaning of \"linear transform\"\
    \ in the OP's question.\n<|/ c |>\n<| c |>\nYeah, the mean and variance is exactly\
    \ what I want. Thanks for sharing this, though!\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to be correct. If the first number in the array is 0 and the last is 1,\
    \ the scaling factor should be 0.5. The scaling factor should be the range of\
    \ the numbers, not the sum of the numbers.\n<|/ c |>\n<| c |>\nHi, I think your\
    \ first comment is incorrect. I'm working on it right now, and I'll update the\
    \ answer when I'm done. Thanks for the help!\n<|/ c |>\n<| c |>\nThank you. I've\
    \ updated the answer. Hope it helps!\n<|/ c |>\n<| a dscore=0 tags=java,math |>\n\
    In Matlab:\n<code>\n>> A=[0.1 0.2 0.3 0.4 0.5];\n>> rescale_to_unit(A)\nans =\n\
    \     0     0.5    0.5     1     1\n</code>\n<|/ a |>\n<| c |>\nThat only works\
    \ with `A \u2261 [0, 1]`. Not necessarily `[0, 1]`.\n<|/ c |>\n<| a dscore=0 tags=java,math\
    \ |>\nHere's an O(n) solution using the algorithm described at (http://en.wikipedia.org/wiki/Uniform_remapping).\
    \ Note that the implementation described there assumes your input is strictly\
    \ bounded in both directions (i.e. the input array is strictly bounded in one\
    \ direction). In case your input isn't strictly bounded in one direction (i.e.\
    \ the first and last entries are equal) you can simply remove one of the equality\
    \ checks.\n<code>\npublic static float[] rescaleToUnit(float[] numbers) {\n  \
    \  if (numbers == null || numbers.length < 2) {\n        throw new IllegalArgumentException(\"\
    Input array must have at least two elements\");\n    }\n    final float min =\
    \ numbers[0];\n    final float max = numbers[numbers.length - 1];\n    final float\
    \ range = max - min;\n    final float scale = 1.0f / range;\n    for (int i =\
    \ 0; i < \nunittest\n{\n    alias candidate = rescale_to_unit;\n\n    assert(candidate([2.0,\
    \ 49.9]) == [0.0, 1.0]);\n    assert(candidate([100.0, 49.9]) == [1.0, 0.0]);\n\
    \    assert(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]);\n\
    \    assert(candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]);\n\
    \    assert(candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5,\
    \ 0.75]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcn67aiin.d(17): Error: C style cast illegal, use `cast(float)(total
    / range)`

    /tmp/tmpcn67aiin.d(23): Error: declaration expected, not `<`

    /tmp/tmpcn67aiin.d(26): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(32): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(35): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(35): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(35): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(38): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(44): Error: declaration expected, not `>>`

    /tmp/tmpcn67aiin.d(53): Error: unterminated character constant

    /tmp/tmpcn67aiin.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcn67aiin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164451
