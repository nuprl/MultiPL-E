name: HumanEval_101_words_string
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You will be given a string\
  \ of words separated by commas or spaces. Your task is\n    to split the string\
  \ into words and return an array of the words.\n    \n    For example:\n    >>>\
  \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\",\
  \ \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n*/\nstring[] words_string(string\
  \ s) \n"
tests: "unittest\n{\n    alias candidate = words_string;\n\n    assert(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n    assert(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"]);\n    assert(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"\
  name\"]);\n    assert(candidate(\"One,, two, three, four, five, six,\") == [\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\"]);\n    assert(candidate(\"\"\
  ) == []);\n    assert(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"\
  ]);\n}\nvoid main(){}"
completions: ["{\n    string[] retVal = new string[6];\n    int i = 0;\n    char[]\
    \ c = s.ToCharArray();\n    foreach (char ch in c)\n    {\n        string tempString\
    \ = \"\";\n        foreach (char c in ch)\n        {\n            if (c == '.'\
    \ || c == '_')\n            {\n                retVal[i++] = tempString;\n   \
    \             tempString = \"\";\n                continue;\n            }\n \
    \           tempString += c;\n        }\n        retVal[i++] = tempString;\n \
    \   }\n    return retVal;\n}\n</code>\n<|/ a |>\n<| a tags=c# |>\nI like to use\
    \ the Split method in the System.String class.\nIt will return an array of strings,\
    \ which you can then loop through.\n<code>\nstring[] words = input.Split(',');\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThe only answer that really addresses the\
    \ question asked.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nvar tokens = input.Split(',');\n\
    foreach (var token in tokens)\n{\n    Console.WriteLine(\"token = {0}\", token);\n\
    }\n</code>\n<|/ a tags=c# |>\n<| a tags=c# dscore=2 |>\n<code>\nstring[] words\
    \ = input.Split(',');\n</code>\n<|/ a |>\n<| a tags=c# |>\n<code>\nstring s =\
    \ \" one, two three\";\nstring[] result = s.Split(new char[]{','});\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=c# |>\n<code>\nstring input = \"one,two,three,four,five,six\"\
    ;\nstring delimiter = \",\"; \nstring[] words = input.Split(delimiter); \n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nAlthough this may answer the question, please consider\
    \ adding a small explanation about how this code works and why it should work\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring input = \"one,two,three,four,five,six\"\
    ;\nstring delimiter = \",\"; \nstring[] words = input.Split(delimiter); \n</code>\n\
    <|/ a tags=c# |>\n<| a |>\nHere is a simple program which works with the example\
    \ you provided. You can try this out\n<code>\nstring[] words_string(string s)\
    \ \n{\n    string[] retVal = new string[6];\n    int i = 0;\n    char[] c = s.ToCharArray();\n\
    \    foreach (char ch in c)\n    {\n        string tempString = \"\";\n      \
    \  foreach (char c in ch)\n        {", "{\n    string[] words_split = new string[6];\n\
    \    string word_split = \"\";\n    string delimiter = \" ,.\";\n    int words\
    \ = 0;\n    int index = 0;\n    int count = 0;", "{\n    int i = 0;\n    int j\
    \ = 0;\n    int k = 0;\n    int num = 0;\n    int size = 0;\n    int num_spaces\
    \ = 0;\n    int space_count = 0;\n    int word_counts[10] = new int[10];\n   \
    \ char word_array[k] = new char[k];\n    string[] words = new string[10];\n  \
    \  \n    s = replace(s, ',', ' ');\n    s = replace(s, '!', ' ');\n    s = replace(s,\
    \ '\"', ' ');\n    s = replace(s, '%', ' ');\n    s = replace(s, '&', ' ');\n\
    \    s = replace(s, ':', ' ');\n    s = replace(s, '<', ' ');\n    s = replace(s,\
    \ '\\\\', ' ');\n    s = replace(s, '>', ' ');\n    s = replace(s, '|', ' ');\n\
    \    s = replace(s, '?', ' ');\n    s = replace(s, ';', ' ');\n    s = replace(s,\
    \ ':', ' ');\n    s = replace(s, '%', ' ');\n    s = replace(s, '#', ' ');\n \
    \   s = replace(s, '=', ' ');\n    s = replace(s, '-', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s,\
    \ ' ', ' ');\n    s = replace(s, ' ', ' ');\n    s = replace(s, ' ', ' ');\n \
    \   s = replace(s, ' ', ' ');\n    s = ", "{\n    string[] ws = new string[10];\n\
    \    int n = s.split(\" \").length; //n is the number of words in s\n    for (int\
    \ i = 0; i < n; i++)\n    {\n        ws[i] = s.split(\" \")[i];\n    }\n    return\
    \ ws;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n/*\n    You will\
    \ be given a string of words separated by commas or spaces. Your task is\n   \
    \ to split the string into words and return an array of the words.", "{\n    string[]\
    \ words = new string[100];\n    std.arraycopy(s.c_str(), 0, words, 0, s.length());\n\
    \    string[] wordsSplit = new string[100];\n    int count = 0; // keeps track\
    \ of the current index to split the words by\n    for (int i = 0; i < words.length;\
    \ ++i) {\n        string word = words[i];\n        if (word == \"\") { // this\
    \ condition was missing from your code\n            break;\n        }\n      \
    \  if (count == words.length - 1) {\n            wordsSplit[wordsSplit.length\
    \ - 1] = word;\n        } else {\n            wordsSplit[count] = word;\n    \
    \    }\n        count++;\n    }\n    return wordsSplit;\n}\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,c++ |>\n<| a dscore=1 |>\nI wanted to post my solution on this\
    \ thread for the benefit of anyone who might be interested.\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <cstdio>", "{\n \
    \   string[] words = new string[20];\n    string[] arrWords = split(s);\n    for(int\
    \ i = 0; i < arrWords.length; i++)\n    {\n        words[i] = arrWords[i];\n \
    \   }\n    return words;\n}", "{\n    string[] words = s.Split(\" \");\n    return\
    \ words;\n}\n</code>\n<|/ a tags=c#,string |>\n<| c |>\n`s.Split(' ', ';')`\n\
    <|/ c |>\n<| a dscore=2 tags=c#,string |>\nJust to add my two cents to this question.\
    \ \nIf you need a way to split a string into multiple arrays depending on certain\
    \ conditions, I would suggest going for Linq extension methods such as .Split().\n\
    <code>\nvar words = \"A B C D\".Split();\nvar numbers = \"1 2 3 4\".Split();\n\
    </code>\nYou also have some conditions such as checking if a string contains certain\
    \ characters, for which you can use regular expressions.\n<code>\nvar isContainingLetter\
    \ = \"A\".Contains(\"A\");\nvar isContainingNumber = Regex.IsMatch(\"42\", \"\\\
    d\");\n</code>\n<|/ a |>\n<| a |>\n<code>\nvar str = \"One Two Three Four\";\n\
    var split = str.Split(new char[] {' '});\nvar result = split.Where(x => x.ToLower()\
    \ != \"and\");\n</code>\n<|/ a tags=c#,string dscore=2 |>\n<| c |>\n`var result\
    \ = str.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries).Where(x\
    \ => !string.IsNullOrEmpty(x));`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;", "{\n\
    \    string[] words = new string[50];\n    string currentWord = \"\";\n    for(int\
    \ i = 0; i < 50; i++){\n        if(s.Length > i){\n            if(currentWord.Length\
    \ > 0)\n                words[i] = currentWord;\n            currentWord = currentWord.Substring(0,s.Length-i);\n\
    \        }\n    }\n    return words;\n}\n/*", "{\n    string a = \"\"; //The array\
    \ of words\n    string b = \"\"; //The first word from the string", "{\n    return\
    \ s.split(\", \");\n}\n</code>\n<|/ a tags=arrays,string,c++,function |>\n<| a\
    \ dscore=0 tags=arrays,string,c++,function |>\nHere is my solution in Python:\n\
    <code>\ndef words_string(s):\n    return s.split(\",\")\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 tags=arrays,string,c++,function |>\nIn case you like C#:\n<code>\n\
    \    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n\
    \    using System.Text;\n    using System.Threading.Tasks;", "{\n    string[]\
    \ arr = s.Split(',');\n    return arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nJust a small change to the previous answer. \nI wanted to remove a whitespace\
    \ before the comma so I did it this way. \n<code>\npublic string[] RemoveWhiteSpaceBeforeCommas(string[]\
    \ arr)\n{\n    string stringArray = string.Empty;\n    foreach(string str in arr)\n\
    \    {\n        stringArray += str.Trim();\n        stringArray += \",\";\n  \
    \  }", "{\n    return s.split(\", |, | \");\n}", "{\n    var words = s.Split(',').Select(str\
    \ => str.Trim()).ToArray();\n    \n    return words;\n}\n</code>\n<|/ a tags=c#,.net,string,arrays\
    \ |>\n<| c |>\nThanks for you reply. I am not looking to remove all commas and\
    \ spaces, only spaces before the commas. But thank you for replying.\n<|/ c |>\n\
    <| c |>\nIt doesn't matter whether they are before or after the commas. Look at\
    \ my example.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring input = \"Hi, my name\
    \ is John\";", "{\n    string[] words_array = s.split(\",\");\n    return words_array;\n\
    }", "{\n    /*\n        \n        Word count for words is stored in variable wordcount\n\
    \        Word count for characters is stored in variable charcount\n        \n\
    \        \n    */\n    int wordcount=0;\n    int charcount=0;\n    /*\n      \
    \  \n        While loop for iterating through string\n        \n    */\n    int\
    \ i = 0;\n    while (i<s.length())\n    {\n        /*\n            \n        \
    \    Iterate through characters\n            \n        */\n        int j=0;\n\
    \        while (j<s.length())\n        {\n            /*\n            \n     \
    \       Iterate through characters\n            \n            */\n           \
    \ if (s[i]==',')\n            {\n                /*\n                    \n  \
    \                  If character is a comma add 1 to wordcount\n              \
    \      \n                */\n                wordcount++;\n                /*\n\
    \                    \n                    If character is a comma add 1 to charcount\n\
    \                    \n                */\n                charcount++;\n    \
    \        }\n            if (s[i]==' ')\n            {\n                /*\n  \
    \              \n                If character is a space, add 1 to wordcount\n\
    \                \n                */\n                wordcount++;\n        \
    \        /*\n                \n                If character is a space, add 1\
    \ to charcount\n                \n                */\n                charcount++;\n\
    \            }\n            j++;\n        }\n        /*\n            \n      \
    \      Add 1 to wordcount\n            \n        */\n        wordcount++;\n  \
    \      /*\n            \n            Add 1 to charcount\n            \n      \
    \  */\n        charcount++;\n        i++;\n    }\n    /*\n        \n        Create\
    \ an empty array stringArr\n        \n    */\n    string[] stringArr=new string[wordcount];\n\
    \    /*\n        \n        Iterate through the array of words\n        \n    */\n\
    \    int k = 0;\n    while (k<wordcount)\n    {\n        /*\n            \n  \
    \          Iterate through array of words\n            \n        */\n        stringArr[k]=s[k];\n\
    \        /*\n            \n            Iterate through array of words\n      \
    \      \n        */\n        k++;\n    }\n    /*\n        \n        Print the\
    \ array of words\n        \n    */\n    for (int l=0;l<stringArr.length;l++)\n\
    \    {\n        /*\n            \n            Print the stringArr\n          \
    \  \n        */\n        cout<<stringArr[l]<<\" \";\n    }\n    /*\n        \n\
    \        Print charcount\n        \n    */\n    cout<<\"\\n\";\n    cout<<\"charcount:\\\
    t\"<<charcount<<\"\\n\";\n    cout<<\"wordcount:\\t\"<<wordcount<<\"\\n\";\n \
    \   return stringArr;\n}", "{\n    string[] result;\n    foreach (string word\
    \ in s.split(\", \"))\n        result.push_back(word);\n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer, I appreciate it\
    \ :) However, I do not see how this could be applied to an array. Can you please\
    \ elaborate?\n<|/ c |>\n<| c |>\nThanks for your comment. I have edited my answer\
    \ to include an example of how this could be applied to a string. I hope this\
    \ helps.\n<|/ c |>\n<| a tags=arrays,string,c++,split dscore=0 |>\nThe easiest\
    \ way to split a text on comma (\",\") is by using a vector. Here is an example:\
    \ \n<code>\nstd::vector<std::string> split(const std::string& s, char delimiter){\n\
    \    std::vector<std::string> tokens;", "{\n    string [] a = null;\n    string\
    \ [] arr = s.split(\",\");\n    for (int i = 0; i < arr.length; ++i)\n    {\n\
    \        string x = arr[i];\n        arr[i] = x.trim();\n    }\n    return arr;\n\
    }", "{\n    string[] wordsArray = s.Split(\" \");\n    return wordsArray;\n}",
  "{\n    //Return the array of strings from string s\n    //using split() method\n\
    \    return s.split(\", \");\n}", "{\n    string temp;\n    string[] result =\
    \ new string[s.length()];\n    int i = 0;\n    int length = s.length();\n    for(int\
    \ n = 0;n < length ; n++)\n    {\n       if(s.Length()-n<length)\n       {\n \
    \         temp = s[n];\n          for(int m=n+2;m<n;m++)\n          {\n      \
    \       temp += \",\";\n             if(m>n)\n             {\n               \
    \ result[i] = temp;\n                i = i+1;\n                break;\n      \
    \       }\n          }\n       }\n       else\n       {\n          temp = s[n];\n\
    \          for(int m=n+1;m<length;m++)\n          {\n             temp += \",\"\
    ;\n             if(m>n)\n             {\n                result[i] = temp;\n \
    \               i = i+1;\n                break;\n             }\n          }\n\
    \       }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic string[] words(string input) {\n    var words = input\n \
    \       .Split(new string[] { \" ,.\" }, StringSplitOptions.RemoveEmptyEntries)\n\
    \        .Select(word => word.Trim())\n        .ToArray();", "{\n    string[]\
    \ words = s.split_characters([], [',', ' ']);\n    \n    return words;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nOk, so I was doing it correctly - thank you. However\
    \ the problem is I cannot use any libraries like the std or anything like that\
    \ in the function - it has to be pure C#. Sorry if I wasn't clear enough, I didn't\
    \ think it was an issue with my code... I did have it correct in my original problem\
    \ though. I'll edit my original post to reflect this.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI managed to solve it - I ended up using Split instead of Split Characters.\
    \ This was my solution:\n<code>\npublic string words_string(string s)\n{\n   \
    \ string[] words = s.Split(',');", "{\n    string[] result = new string[s.Length];\n\
    \    List<string> words = new List<string>();\n    for (int i = 0; i < s.Length;\
    \ i++)\n    {\n        if (s.Contains(\" \"))\n        {\n            string[]\
    \ words = s.Split(' ');\n            for (int j = 0; j < words.Length; j++)\n\
    \            {\n                words.Add(words[j]);\n            }\n        \
    \    s = string.Join(\" \", words);\n        }\n        else if (s.Contains(\"\
    ,\"))\n        {\n            string[] words = s.Split(',');\n            for\
    \ (int j = 0; j < words.Length; j++)\n            {\n                words.Add(words[j]);\n\
    \            }\n            s = string.Join(\",\", words);\n        }\n      \
    \  else\n        {\n            words.Add(s.Substring(0, i));\n            s =\
    \ s.Substring(i);\n        }\n    }\n    for (int i = 0; i < words.Count; i++)\n\
    \    {\n        result[i] = words[i];\n    }\n    return result;\n}\n</code>\n\
    I did not add any error handling for edge cases, it just works with the data you\
    \ provided.\n<|/ a tags=c#,linq,arrays |>\n<| c |>\n`Split(\",\")` will split\
    \ on every comma in the string, which is not what the OP wants.\n<|/ c |>\n<|\
    \ c |>\nYou are right, I misread the question.  I updated my answer to correctly\
    \ split the string.  Thanks for pointing that out.\n<|/ c |>\n<| a tags=c#,linq,arrays\
    \ |>\nAs already mentioned by others, you can split by either spaces or commas.\
    \ However, to meet your requirement of returning an array, you have to split by\
    \ both spaces and commas first. \n<code>\nstring[] result = s.Split(',').Select(item\
    \ => item.Trim()).Where(item => !string.IsNullOrWhiteSpace(item)).ToArray();\n\
    </code>\nThis code will trim both spaces and commas from the strings and then\
    \ select only the non-empty strings. This will give you the result you want.\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\nTry this...\n<code>\npublic static void Main(string[]\
    \ args)\n{\n    string[] words;\n    string s = \"one,two,three,four\";\n    words\
    \ = s.Split(',');", "{\n    string[] r = new string[10000];\n    int i = 0;\n\
    \    foreach(char c in s)\n    {\n        r[i++] = c;\n    }\n    return r;\n\
    }\n</code>\n<|/ a tags=java |>\n<| a |>\n<code>\nimport java.util.Arrays;", "{\n\
    \    string[] words = new string[s.length()];\n    for (int i = 0; i < s.length();\
    \ i++)\n    {\n        char c = s.at(i);\n        if (Char.isDigit(c))\n     \
    \       words[words.length - 1] += c;\n        else if (c == ',' || c == ' ')\n\
    \        {\n            string[] subwords = new string[words.length];\n      \
    \      for (int i = 0; i < words.length; i++)\n            {\n               \
    \ char cc = words.at(i);\n                if (Char.isDigit(cc))\n            \
    \        subwords[subwords.length - 1] += cc;\n            }\n            words\
    \ = subwords;\n        }\n    }\n    return words;\n}\n</code>\n<|/ a tags=arrays,c#,string,split\
    \ |>\n<| c |>\nThe way you've described your question makes it seem like a homework\
    \ assignment. If that is indeed the case then you might want to consider using\
    \ a homework tag instead of just tagging your question as homework.\n<|/ c |>\n\
    <| c |>\nI was not aware of that! I have been trying to do my own homework questions\
    \ for a while and only recently did I find a tag for that.\n<|/ c |>\n<| a dscore=0\
    \ tags=arrays,c#,string,split |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    return s.split(',');\n}", "{\n    int i, j, k = 0;\n    char delimiter =\
    \ ',';\n    string[] result;\n    \n    string[] words = new string[10000];\n\
    \    \n    for (i = 0; i <= s.Length; i++)\n    {\n        char[] c = s.ToCharArray();\n\
    \        result[j] = new string(s.ToCharArray());\n        if (delimiter == ',')\n\
    \        {\n            for (j = 0; j < c.Length; j++)\n            {\n      \
    \          if (c[j] == ',')\n                {\n                    c = c.Take(j).ToArray();\n\
    \                    k++;\n                }\n            }\n        }\n     \
    \   else if (delimiter == ' ')\n        {\n            for (j = 0; j < c.Length;\
    \ j++)\n            {\n                if (c[j] == ' ')\n                {\n \
    \                   c = c.Take(j).ToArray();\n                    k++;\n     \
    \           }\n            }\n        }\n        \n        words[k] = new string(c);\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 tags=c# |>\n<| c\
    \ |>\nThanks for your effort but i didnt get it\n<|/ c |>\n<| c |>\nI added some\
    \ comments. I hope it helps.\n<|/ c |>\n<| c |>\nThe first time you iterate through\
    \ the word array, you will get a result that is one element larger than the actual\
    \ number of words.\n<|/ c |>\n<| c |>\nPlease post this as a new question and\
    \ explain the requirements more clearly. Comments are not a good place for such\
    \ information.\n<|/ c |>\n<| c |>\nI did post a new question. https://stackoverflow.com/questions/47967242/splitting-the-string-into-arrays-in-c-sharp?noredirect=1#comment83140469_47967242\n\
    <|/ c |>\n<| a tags=c# |>\nMy solution would be using a stack to store your words\
    \ and then pop them until you find a space.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   /*\n    Write your solution here\n    */\n    \n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to be correct. Try with `words_string(\"One Two\
    \ Three\")` - it should return `[\"One\", \"Two\", \"Three\"]`, not `[\"One\"\
    , \"Two\", \"Three\"]`\n<|/ c |>\n<| c |>\n, you're right. My mistake. Let me\
    \ correct it.\n<|/ c |>\n<| c |>\nI edited my answer, and also added a possible\
    \ solution in Python and JavaScript (for those who prefer) for the OP to try.\n\
    <|/ c |>\n<| c |>\nThanks for your help!\n<|/ c |>\n<| a dscore=0 |>\nIn case\
    \ you were wondering how to do this in JavaScript:\n<code>\nfunction words(string)\
    \ {\n  let split = string.split(/[^ ,]+/);\n  let newArr = [];\n  \n  for (let\
    \ i = 0; i < split.length; i++) {\n    if (split[i] === \"\" || split[i] === null)\
    \ {\n      continue;\n    }\n    \n    if (newArr[newArr.length - 1] === \"\"\
    \ || newArr[newArr.length - 1] === null) {\n      newArr[newArr.length - 1] =\
    \ split[i];\n      continue;\n    }\n    \n    if (split[i] === newArr[newArr.length\
    \ - 1]) {\n      newArr[newArr.length - 1] += \" \" + split[i];\n    } else {\n\
    \      newArr.push(split[i]);\n    }\n  }\n  \n  return newArr;\n}", "{\n    string[]\
    \ words = new string[1000];\n    int count = 0;\n    int i = 0;\n    int len =\
    \ s.length();", "{\n    string words[] ;\n    \n    foreach (string word in s.Split('\
    \ '))\n    {\n        words[] = word;\n    }\n    return words;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\nThis is my version of a solution to convert a list\
    \ into an array. \n<code>\nclass ListToArray\n{\n    public static int[] Convert(List<int>\
    \ source)\n    {\n        int[] result = new int[source.Count];", "{\n    return\
    \ s.toCharArray().filter(x => x == ',' || x == '.').map(x => x.toCharArray().filter(x\
    \ => x != ',').map(x => x.toLower()).join(\"\"));\n}\n</code>\n<|/ a dscore=2\
    \ tags=string,c# |>\n<| c |>\nThanks for sharing, But i want to do it using string[]\
    \ not stringbuilder.\n<|/ c |>\n<| c |>\nThe last edit works great. Can you please\
    \ explain it how it works? Thanks\n<|/ c |>\n<| c |>\nIt just removes all the\
    \ spaces and commas, then converts all letters to lowercase and joins all the\
    \ letters back into a string.  You could then use that with string[] splitWords(string\
    \ s) to create an array of strings for each word.  It isn't particularly efficient,\
    \ but it would be easy to read.  The last code block is more efficient because\
    \ it doesn't create the extra strings.  It just replaces all the spaces and commas\
    \ with empty strings.\n<|/ c |>\n<| c |>\nI have added some comments to the code\
    \ above.  Hope that helps.\n<|/ c |>\n<| c |>\nIt works perfectly, But how can\
    \ we improve the code a bit? It seems too long.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\npublic static string[] SplitStrings(string source, char separator)\n{\n\
    \    var result = new List<string>();\n    using (var stringReader = new StringReader(source))\n\
    \    using (var charReader = new CharacterReader())\n    {\n        charReader.ReadChar();\n\
    \        while (charReader.Peek() != -1)\n        {\n            if (charReader.ReadChar()\
    \ == separator)\n            {\n                result.Add(charReader.ReadChar());\n\
    \            }\n        }\n    }\n    return result.ToArray();\n}\n</code>\n<|/\
    \ a tags=string,c# |>\n<| a dscore=0 |>\nTry the following code:\n<code>\nstring\
    \ s = \"abc efg\";\nstring[] words = s.Split(' ');\n</code>\n<|/ a tags=string,c#\
    \ |>\n<| c |>\nThis is good, But i want to do it using string[] not stringbuilder.\n\
    <|/ c |>\n<| c |>\nwhy can't you use a string builder here?\n<|/ c |>\n<| c |>\n\
    I can't, i am doing a challenge on codewars.com that requires me to solve it using\
    \ string[] only\n<|/ c |>\n<| a tags=string,c# |>\nThis should work:\n<code>\n\
    public static string[] ", "{\n    string[] result = new string[20];", "{\n\tstring[]\
    \ r = s.split(\" \");\n\treturn r;\n}", "{\n    string[] result=new string[s.length()];\n\
    \    for(int i=0;i<s.length();i++)\n    {\n        if(s[i]==',')\n        {\n\
    \            for(int j=i+1;j<s.length();j++)\n            {\n                result[j]=result[j-1];\n\
    \            }\n            break;\n        }\n        result[i]=s[i];\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=1 tags=arrays,java,split |>\n<|\
    \ a |>\nUse StringTokenizer\n<code>\nString str = \"Hi, my name is John\";\nStringTokenizer\
    \ st = new StringTokenizer(str);\nwhile(st.hasMoreTokens())\n{\n    System.out.println(st.nextToken());\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,java,split |>\n<| a tags=arrays,java,split\
    \ |>\nA possible way to do it without using any extra class is to loop through\
    \ the string and store each word in a list until you find a space character, then\
    \ break and return the list\n<code>\nArrayList<String> result = new ArrayList<String>();",
  "{\n    // TODO: Complete the function\n    return null;\n}\n</code>\n<|/ q dscore=1\
    \ |>\n<| c |>\n\"I need a code sample\" - what code sample do you want us to provide\
    \ for you?\n<|/ c |>\n<| c |>\nI need a code that can find the longest word in\
    \ an array and returns the length of that word and also return the index of the\
    \ word in the array.\n<|/ c |>\n<| c |>\nIt is not clear what you need help with.\
    \ Are you asking someone to do the homework for you? Are you asking us to give\
    \ you a full working program?\n<|/ c |>\n<| c |>\nCan you give an example of input\
    \ and expected output?\n<|/ c |>\n<| c |>\nThe input is a string and I need the\
    \ program to return the longest word (meaning one word with more than one letter\
    \ in it) and the length of that word and also return the index of the word in\
    \ the string\n<|/ c |>\n<| a dscore=2 |>\nHere's a way to do it:\n<code>\nstring\
    \ longestWord(string words){\n    if(words.length()<1){\n        return \"\";\n\
    \    }", "{\n    return s.split(',');\n}\n/*", "{\n    int l = s.length();\n \
    \   \n    vector<string> res;\n    \n    for(int i = 0; i < l; ++i)\n    {\n \
    \       char c = s[i];\n        if(c == ',' || c == ' ')\n        {\n        \
    \    res.push_back(s.substr(0, i));\n            s.erase(0, i + 1);\n        }\n\
    \    }\n    \n    return res.size() > 0 ? res : null;\n}", "{\n    \n    string\
    \ delim = \", \";\n    string trim = \" \";\n    string[] words = s.split(delim);\n\
    \    return words;\n}\n/*\n    \n    You will be given a string of numbers separated\
    \ by commas or spaces. Your task is to \n    split it into an array of numbers\
    \ and return it.\n    \n    For example:\n    >>> numbers_string(\"1, 2, 3, 4\"\
    )\n    [1, 2, 3, 4]\n    \n*/", "{\n    int pos = 0;\n    int[] a = new int[s.len()+1];\n\
    \    foreach(char a in s) {\n        if(char.isWhitespace(a)) \n            continue;\n\
    \        else {\n            a[pos++] = std.string(a);\n            a[pos++] =\
    \ 1;\n        }\n    }\n    a[pos++] = s.len();\n    \n    return a;\n}", "{\n\
    \    string[] words = s.Split(new char[] { ',', ' ' });\n    foreach(var w in\
    \ words)\n        words[words.IndexOf(w)] = w.Trim();\n    return words;\n}\n\
    </code>\n<|/ a dscore=0 tags=arrays,c#,string |>\n<| c |>\n`IndexOf` won't find\
    \ all occurrences of `w`. You need `indexOf` with a `while` loop like in my answer,\
    \ or something similar.\n<|/ c |>\n<| a tags=arrays,c#,string |>\nHere is my solution:\n\
    <code>\npublic string[] words_string(string s) \n{\n    List<string> words = new\
    \ List<string>();", "{\n    string[] words = s.Split(',');\n    return words;\n\
    }\n</code>\nMy answer does not do any error checking. You will have to do this\
    \ yourself. I strongly recommend that you read the documentation on Split:\n<code>\n\
    /// Splits the string into a sequence of substrings based on the\n/// characters\
    \ in the separators string.\n/// The string str is split at the locations specified\
    \ in the delimiters string \n/// and terminated by any one of a set of characters\
    \ specified in the default\n/// array separators.\npublic static String[] Split(\n\
    \    string str,\n    string separators\n)", "{\n    int wordCount = 0;\n    int\
    \ wordLength = 0;\n    \n    //The string will be tokenized into words separated\
    \ by any number of spaces or commas\n    string[] split = s.split(\" \");\n  \
    \  \n    //We will keep track of where the words are so we don't split the same\
    \ word into two words\n    int startIndex = 0;\n    \n    //Loop through each\
    \ word in the split\n    for (int i = 0; i < split.length; i++)\n    {\n     \
    \   //The current word in the string\n        string currentWord = split[i];\n\
    \        \n        //Loop through each character in the current word in the string\n\
    \        for (int j = 0; j < currentWord.length(); j++)\n        {\n         \
    \   //Get the current character in the word\n            char currentChar = currentWord.charAt(j);\n\
    \            \n            //Get the number of words in the string with the same\
    \ current character in the word\n            if (wordCount < s.length())\n   \
    \         {\n                int wordLength = s.length();\n                \n\
    \                //If the word with the same current character in the word doesn't\
    \ exist in the string\n                if (s.length() == 0 || s.indexOf(currentChar,\
    \ startIndex) < wordLength)\n                {\n                    //Add the\
    \ current character to the word \n                    wordCount++;\n         \
    \           \n                    //Move the current character to the startIndex\
    \ of the current word\n                    startIndex = startIndex + 1;\n    \
    \            }\n            }\n        }\n    }\n    \n    //If the string is\
    \ empty, return an empty array\n    if (wordCount == 0)\n    {\n        return\
    \ new[]{};\n    }\n    \n    //Return the words of the string\n    \n    return\
    \ new[wordCount];\n}\n</code>\n<|/ a |>\n<| c |>\nI'm so sorry but this is what\
    \ happens when you try to learn programming by just asking questions. Thank you\
    \ so much for helping me understand this problem and thank you so much for taking\
    \ the time out to help me.\n<|/ c |>\n<| c |>\nNo worries. I actually think this\
    \ solution might be the easiest to understand and most efficient.\n<|/ c |>\n\
    <| a |>\nI like John Wu's answer above, so I thought I'd post my version of it,\
    \ using a string iterator and a lambda function to get the word counts.  I went\
    \ ahead and optimized the code a bit, and here's how I did it.\n<code>\npublic\
    \ static int WordCount(string s)\n{\n    StringTokenizer st = new StringTokenizer(s,\
    \ \" ,.-!?\");\n    int count = 0;\n    foreach(string word in st)\n    {\n  \
    \      count++;\n    }", "{\n    return s.split(\",\").map(fn => fn.trim());\n\
    }\n/*", "{\n    string[] result = new string[s.length];\n    \n    for(int i=0;i<s.length();i++)\n\
    \    {\n        result[i] = s[i];\n    }\n    \n    return result;\n}", "{\n \
    \   string delimiter = \",\";\n    string delimiter2 = \" \";\n    string delimiter3\
    \ = \" ,\";\n    string[] splitted_string_array = s.split(delimiter2);\n    return\
    \ splitted_string_array;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not what OP is\
    \ looking for - he wants to split input string into individual words ignoring\
    \ comma separators.\n<|/ c |>\n<| c |>\nthanks for pointing that out - i updated\
    \ my answer - hopefully it clarifies a bit more\n<|/ c |>\n<| c |>\nYour \"update\"\
    \ doesn't work. You can't split on space because that will split on all whitespace\
    \ characters. You also can't split on comma, because that won't split on commas.\n\
    <|/ c |>\n<| c |>\nthanks for clarifying that - i updated my answer again\n<|/\
    \ c |>\n<| c |>\nThank you for the answer. I am currently working on my solution\
    \ and it is working properly. I think this is what I want.\n<|/ c |>\n<| a tags=string,java\
    \ |>\nSplit on the spaces using the split() function of String class.\n<code>\n\
    String[] tokens = input.split(\" \");\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't solve the problem of using commas as word separators. You need to split\
    \ on commas too, and you need to split on space characters too.\n<|/ c |>\n<|\
    \ c |>\nIt does! Thanks a lot!\n<|/ c |>\n<| a dscore=1 |>\nYou can do this with\
    \ regex.\n<code>\npublic static void main(String[] args) {\n    String input =\
    \ \"one, two, three, four, five, six\";", "{\n    List<string> temp = new List<string>();\n\
    \    for (string w in s.Split(',').ToList())\n    {\n        bool valid = true;\n\
    \        int n = w.Length;\n        for (int i = 0; i < n; i++)\n        {\n \
    \           if (!w.Contains(' ', i))\n            {\n                valid = false;\n\
    \                break;\n            }\n        }\n        if (valid)\n      \
    \      temp.Add(w);\n    }\n    return temp.ToArray();\n}\n</code>\n<|/ a tags=c#,split\
    \ |>\n<| c |>\nThis is incorrect - it breaks up strings that only have spaces\
    \ (like `One`).\n<|/ c |>\n<| a dscore=4 tags=c#,split |>\nThis works for me:\n\
    <code>\nstatic List<string> SplitWord(string s)\n{\n    return Regex.Matches(s,\
    \ @\"[^\\s]+\")\n        .Cast<Match>()\n        .Select(m => m.Value)\n     \
    \   .ToList();\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not handle words that\
    \ end with punctuation such as \"hello!\"\n<|/ c |>\n<| a dscore=3 |>\nYou can\
    \ try this one:\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;", "{\n\
    \    string[] result;\n    \n    foreach(string str in split(s, \", \"))\n   \
    \     result.append(str);\n    \n    return result;\n}\n</code>\n<|/ a tags=string,c++,split,arrays\
    \ dscore=3 |>\n<| a dscore=2 |>\nAs far as I know, there is no built-in way to\
    \ split a string by comma, but you can write your own function.\n<code>\nstring\
    \ split(string s,char delim)\n{\n    string tmp;\n    int i=0;", "{\n    string[]\
    \ words;\n    words = new string[std.string.length(s)];\n    for (int i = 0; i\
    \ <= std.string.length(s); i++) \n        words[i] = std.string[i];\n    return\
    \ words;\n}\n/*\n    \n    You will be given a list of integers. The task is to\
    \ sort them in ascending order and return the list as a new list.\n    \n    For\
    \ example, \n    \n    >>> list_integers([1, 3, 2])\n    [1, 2, 3]\n    \n*/",
  "{\n    string[] result = new string[0];\n    int space_index;\n    \n    for (int\
    \ i = 0; i < s.length(); ++i)\n    {\n        if (s[i] == ',' || s[i] == ' ')\n\
    \        {\n            space_index = i;\n            break;\n        }\n    }\n\
    \    \n    if (space_index != -1)\n    {\n        result = new string[s.length()\
    \ - 1];\n        for (int i = 0; i < s.length(); ++i)\n        {\n           \
    \ if (i != space_index)\n                result[result.Length - 1] += s[i];\n\
    \            else\n                result[result.Length - 1] += s[i].ToString();\n\
    \        }\n    }\n    return result;\n}\n/*", "{\n    string[] words = new string[(int)s.length()+1];\n\
    \    \n    int i = 0;\n    int j = 0;\n    while(i < s.length() && j != s.length())\n\
    \    {\n        if(s.charAt(i) == ',')\n        {\n            words[j] = s.substring(i,\
    \ j);\n            i++;\n            j++;\n        }\n        else if(s.charAt(i)\
    \ == ' ')\n        {\n            words[j] = s.substring(i, j);\n            i++;\n\
    \            j++;\n        }\n        else\n        {\n            words[j] =\
    \ s.substring(i, j);\n            i++;\n            j++;\n        }\n    }\n \
    \   words[j] = s.substring(i, j);\n    \n    return words;\n}", "{\n    string\
    \ s = d.split(\",\")[0];\n    string[] ret = new string[s.Length];\n    int i\
    \ = 0;\n    foreach (string s in d.Split(\",\"))\n    {\n        ret[i++] = s.Trim();\n\
    \    }\n    return ret;\n}\n</code>\nYou can see this in action here.\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't answer the question. OP specifically asked how to\
    \ split words using LINQ\n<|/ c |>\n<| c |>\nI have edited my answer to show how\
    \ to use linq to achieve the desired result. I will also take a look at your comment\
    \ to the other answer and see if I can improve on it.\n<|/ c |>\n<| a tags=string,c#\
    \ dscore=1 |>\nYou could use a Regex to achieve that:\n<code>\nstring str = \"\
    Hi, my name is John\";\nstring str2 = Regex.Replace(str, \"(\\\\s+)|(,\\\\s+)\"\
    , \" \");\nstring[] str3 = str2.Split(' ');\n</code>\nThe last line splits the\
    \ string into separate strings with spaces between each word.\n<|/ a |>\n<| a\
    \ tags=string,c# dscore=0 |>\nYou can simply use String.Split:\n<code>\nstring\
    \ s = \"Hi, my name is John\";\nvar result = s.Split(new[] { \" \" }, StringSplitOptions.RemoveEmptyEntries);\n\
    </code>\nThis will give you the array of strings.\n<|/ a |>\n<| c |>\nThis doesn't\
    \ answer the question. OP specifically asked how to split words using LINQ\n<|/\
    \ c |>\n<| c |>\n, OP has mentioned *LINQ* and *split words*. So, my answer does\
    \ exactly this. What do you think?\n<|/ c |>\n<| c |>\nNo, this doesn't answer\
    \ the question either. He specifically asked for how to split words using LINQ\n\
    <|/ c |>\n<| c |>\n, please read the question. He mentioned he is using LINQ in\
    \ the question.\n<|/ c |>\n<| c |>\nI read it. He said \"using LINQ\". It isn't\
    \ a question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.IO;", "{\n    string[] words;\n\
    \    foreach(string word in s.split(\" \"))\n        words.push_back(word);\n\
    \    return words;\n}", "{\n    if (s == null)\n        return null;\n    int[]\
    \ array = new int[s.lenght / 2];\n    for (int i = 0; i < array.lenght; i++)\n\
    \        array[i] = i * 2;\n    string[] stringArray = new string[array.lenght];\n\
    \    for (int i = 0; i < array.lenght; i++)\n        stringArray[i] = s.substring(array[i],\
    \ array[i + 1]);\n    return stringArray;\n}\n</code>\n<|/ a dscore=0 tags=arrays,string,c++\
    \ |>\n<| a dscore=0 tags=arrays,string,c++ |>\nHere's another approach:\n<code>\n\
    #include <iostream>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n\
    #include <string>", "{\n    vector<string> v;\n    stringstream ss(s);\n    string\
    \ word;\n    \n    while(getline(ss, word, ','))\n        v.push_back(word);\n\
    \    \n    string[] ans = {\"\"};\n    for(size_t i = 0; i < v.size(); i++)\n\
    \    {\n        for(int j = 0; j < v.size() - 1; j++)\n        {\n           \
    \ if(v[i] == v[j])\n            {\n                ans[j] += v[j+1];\n       \
    \         v.erase(v.begin() + j+1);\n                break;\n            }\n \
    \       }\n    }\n    \n    return ans;\n}\n</code>\n<|/ a |>\n<| a tags=c++,stl,algorithm\
    \ dscore=0 |>\n<code>\n#include<iostream>\nusing namespace std;\n#include<vector>\n\
    #include<sstream>\n#include<algorithm>\n#include<string>\n#include<iterator>",
  "{\n    var arr = new string[10];\n    var idx = 0;\n    for (int i = 0; i < s.Length;\
    \ i++)\n    {\n        if (s[i] == ',')\n        {\n            idx++;\n     \
    \       arr[idx] = \"\";\n        }\n        else\n        {\n            arr[idx]\
    \ += s[i];\n        }\n    }\n    return arr;\n}", "{\n\t\n\tstring[] result =\
    \ new string[4];\n\t\n\t// split string into words by commas\n\twords = s.Split(',');\n\
    \t\n\t//create word array from split string in array \n\tfor (int i = 0; i < words.Length;\
    \ i++)\n\t{\n\t\tresult[i] = words[i];\n\t}\n\t\n\t//return word array\n\treturn\
    \ result;\n}", "{\n    return s.split(\" \");\n}", "{\n    \n    string [] w =\
    \ new string[100];\n    \n    int i = 0;\n    int j = 0;\n    string temp;\n \
    \   string [] word = new string [100];\n    \n    \n    temp = s.ToLower();\n\
    \    \n    int c = temp.IndexOf(',');\n    \n    while (c>=0)\n    {\n       \
    \ w[i] = temp.Substring(0, c);\n        temp = temp.Substring(c+1, temp.Length);\n\
    \        i++;\n        c = temp.IndexOf(',');\n    }\n    \n    if (temp.Length>0)\n\
    \        w[i] = temp;\n    \n    int z = w[0].Length;\n    \n    for (i=1; i<w.Length;\
    \ i++)\n    {\n        temp = w[i].ToLower();\n        for (int h=0; h<temp.length;\
    \ h++)\n        {\n            if (temp[h] == '-')\n            {\n          \
    \      temp = \"0\" + temp;\n                for (int g=0; g<z; g++)\n       \
    \             w[g] = w[g] + w[g+1];\n                z--;\n            }\n   \
    \         else\n                w[z++] = temp[h];\n        }\n    }\n    \n  \
    \  return w;\n}", "{\n    string[] result;\n    char[] words = s.toCharArray();\n\
    \    for(int i = 0; i < words.length; ++i)\n    {\n        if(isWhitespace(words[i]))\n\
    \        {\n            i++;\n        }\n        else\n        {\n           \
    \ result.add(words[i]);\n        }\n    }\n    return result;\n}", "{\n    string[]\
    \ words = s.split_by_unclaimed(',');\n    foreach(string w in words)\n    {\n\
    \        words = w.split_by_unclaimed(' ');\n    }\n    return words;\n}", "{\n\
    \    string[] result;\n    string[] words;\n    \n    words = s.Split(',');\n\
    \    \n    result = new string[words.length];\n    for (int i = 0; i < words.length;\
    \ i++) \n    {\n        result[i] = words[i];\n    }\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=algorithm,c#,arrays |>\nHere's my take:\n\
    <code>\npublic static string[] Split(string input, char splitter)\n{\n    // Check\
    \ for null\n    if (input == null)\n    {\n        return null;\n    }\n    //\
    \ Check for empty string\n    if (string.IsNullOrEmpty(input))\n    {\n      \
    \  return new string[0];\n    }\n    // Create an array to store the words\n \
    \   string[] words = new string[100];\n    \n    // Initialize our counter\n \
    \   int index = 0;\n    // Split our input into words\n    string[] words = input.Split(splitter);\n\
    \    \n    // Copy all elements into our new array\n    while (index < words.Length)\n\
    \    {\n        words[index] = words[index];\n        index++;\n    }\n    \n\
    \    // Return our new array\n    return words;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=algorithm,c#,arrays dscore=1 |>\nThis solution is less verbose and more\
    \ concise:\n<code>\npublic static string[] Split(string input, char splitter)\n\
    {\n    if (input == null)\n        return null;\n    \n    string[] words = input.Split(splitter);\n\
    \    \n    List<string> res = new List<string>(words.Length);\n    \n    foreach\
    \ (string word in words)\n    {\n        if (word != \"\")\n            res.Add(word);\n\
    \    }\n    \n    return res.ToArray();\n}\n</code>\n<|/ a |>\n<| a |>\nHere's\
    \ a more concise version than any of the answers already posted (for those who\
    \ don't want to read through all their code).\n<code>\npublic static string[]\
    \ Split(string input, char splitter)\n{\n    if (input == null)\n        return\
    \ null;", "{\n    int[,] m = new int[,] {{0, 0}};\n    bool valid = true;\n  \
    \  int i;\n    \n    while (valid && i <= s.length()-1) {\n        valid = false;\n\
    \        if (s[i] == ',')\n            i++;\n        else if (s[i] == ' ')\n \
    \           i++;\n        else if (s[i] >= 'a' && s[i] <= 'z')\n            i++;\n\
    \        else if (s[i] >= 'A' && s[i] <= 'Z')\n            i++;\n        else\
    \ if (s[i] >= '0' && s[i] <= '9')\n            i++;\n        else {\n        \
    \    for (int j = 0; j < s.length()-1; j++)\n                if (s[i] != ',' &&\
    \ s[i] != ' ') {\n                    valid = true;\n                    string\
    \ word = s.Substring(i, j+1);\n                    i = j+1;\n                \
    \    m[0, 0] = i;\n                    m[0, 1] = word;\n                }\n  \
    \      }\n    }\n    \n    if (valid && i <= s.length()-1)\n        string word\
    \ = s.Substring(i, s.length());\n    \n    string[] words = new string[word.length()];\n\
    \    for (int j = 0; j < word.length(); j++)\n        words[j] = word[j];\n  \
    \  \n    return words;\n}\n</code>\n}\n<|/ a tags=c# |>\n<| a |>\nHere is my solution\n\
    <code>\n string[] strings = { \"One, two, three, four, five, six\" };\n      \
    \      var splitted = strings.SelectMany(s => s.Split(',')).ToArray();\n     \
    \       string[] output = splitted.Select(s => s.Trim()).ToArray();\n</code>\n\
    <|/ a dscore=1 tags=c# |>\n<| a dscore=1 tags=c# |>\nUsing LINQ you can do it\
    \ like this\n<code>\nvar str=\"One, two, three, four, five, six\";", "{\n    string[]\
    \ result = new string[0];\n    string word;\n    \n    foreach(string w in s.split(\"\
    \ \"))\n    {\n        word = string.split(w);\n        foreach(string e in word)\n\
    \        {\n            if(!result.containsKey(e))\n            {\n          \
    \      result.add(e);\n            }\n        }\n    }\n    return result;\n}\n\
    </code>\nThe code might not be super efficient, but it does work. You can add\
    \ more methods to make it a little more elegant, and you should be able to implement\
    \ the rest yourself.\n<|/ a dscore=0 tags=dictionary,java |>\n<| a dscore=0 tags=dictionary,java\
    \ |>\nIf you do not want to implement Dictionary class, try this code...\n<code>\n\
    package com.test;", "{\n    string[] result = new string[100];", "{\n    var words\
    \ = s.Split(',');\n    foreach (var word in words)\n        word = word.Trim();\n\
    \    return words;\n}\n/*", "{\n    int count = 0;\n    bool flag = false;\n \
    \   string[] word_array = new string[9999];\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i] == ','){\n            flag = true;\n        }\n        if(flag){\n\
    \            word_array[count] = s[i];\n            count++;\n            flag\
    \ = false;\n        }\n    }\n    return word_array;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks. I didn't know how to use the string library.\n<|/ c |>\n<| a |>\n\
    In Ruby, using String#split:\n<code>\ndef words_string(str)\n  str.split(', ')\n\
    end", "{\n    char[] chars = string.split_chars(s);\n    string[] result = new\
    \ string[chars.length];\n    for (int i = 0; i < chars.length; ++i)\n        result[i]\
    \ = chars[i];\n    return result;\n}", "{\n    int i = 0;\n    int j = 0;\n  \
    \  int k = 0;\n    int n = s.lenght;\n    string words[n];\n    string w;\n  \
    \  while(i<n && j<n)\n    {\n        w = s.substring(i, i+1);\n        w = w.toUpperCase();\n\
    \        if(w.length()==0)\n        {\n            i++;\n            continue;\n\
    \        }\n        if(j<n)\n        {\n            words[k] = w;\n          \
    \  k++;\n            j++;\n        }\n        else\n        {\n            words[k]\
    \ = w;\n            j++;\n        }\n    }\n    \n    return words;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you for your response, I appreciate it. However I do\
    \ not understand how this works. For example, I don't understand how the word\
    \ \"string\" can be added to this method. How can the computer know what it is\
    \ and how does it know to add the word \"string\" to it? Thank you again for your\
    \ response.\n<|/ c |>\n<| c |>\nThe program first asks what kind of string it\
    \ is by asking you what kind of words it is made of. There are two kinds of words:\
    \ \"words\" and \"punctuation\". One of the two kinds is made of letters.\n<|/\
    \ c |>\n<| c |>\nSo, if I were to type \"Hello\", how does the computer know that\
    \ it is a string? Does it take the string \"Hello\" and then convert it to \"\
    hello\"? How does this work? Thanks!\n<|/ c |>\n<| c |>\nYes, it does that. But,\
    \ how does it know what kind of string you are looking for? It doesn't actually\
    \ look for a string, just words or punctuation.\n<|/ c |>\n<| c |>\nOhhhhhh! Thank\
    \ you very much. I was so confused when I was trying to think about this problem.\
    \ Your explanation is greatly appreciated!\n<|/ c |>\n<| a |>\nYou can write your\
    \ words with all capital letters and then split your string at commas, then use\
    \ the split result to create a dictionary using the code below.\n<code>\nstring\
    \ input = \"Hello, my name is John\";\nstring[] words = input.Split(',');\nDictionary<string,\
    \ string> dictionary = new Dictionary<string, string>();\nforeach (var word in\
    \ words)\n{\n    word = word.ToUpper();\n    dictionary.Add(word, word);\n}\n\
    </code>\n<|/ a tags=arrays,c#,visual-studio-2010,methods,string dscore=2 |>\n\
    <| c |>\nThank you for your response, however I do not understand how this works.\
    \ For example, ", "{\n    char[] chars = s.toCharArray();\n    int i = 0;\n  \
    \  string result;\n    \n    while (i < chars.length) {\n        if (chars[i]\
    \ == ',') {\n            i++;\n            result = result + chars[i];\n     \
    \   }\n        else if (chars[i] == ' ') {\n            i++;\n            while\
    \ (chars[i] != ',' && chars[i] != ' ') {\n                i++;\n            }\n\
    \            result = result + chars.subarray(0, i);\n        }\n        else\
    \ {\n            result = result + chars[i];\n        }\n        i++;\n    }\n\
    \    \n    return new string[] {result};\n}", "{\n    stack<string> words;\n \
    \   for (auto c : s)\n    {\n        if (isspace(c))\n        {\n            words.clear();\n\
    \        }\n        else\n        {\n            words.push(c);\n        }\n \
    \   }\n    \n    string[] ans = {\"\"};\n    while (!words.empty())\n    {\n \
    \       string word = words.top();\n        words.pop();\n        if (words.length()\
    \ == 0)\n        {\n            ans[0] += word;\n        }\n        else\n   \
    \     {\n            ans[1] += word;\n        }\n    }\n    return ans;\n}", "{\n\
    \    string[] results;", "{\n    string result = \"\";\n    string[] words = new\
    \ string[5];\n    \n    foreach(char c in s)\n    {\n        switch(c)\n     \
    \   {\n            case ',':\n                break;\n            case ' ':\n\
    \                words[3] = result;\n                break;\n            case\
    \ '(':\n                words[2] = result;\n                break;\n         \
    \   case ')':\n                break;\n            case '[':\n               \
    \ words[1] = result;\n                break;\n            case ']':\n        \
    \        break;\n            case '{':\n                words[0] = result;\n \
    \               break;\n            case '}':\n                break;\n      \
    \      default:\n                result += c;\n        }\n    }\n    \n    return\
    \ words;\n}\n</code>\n<|/ a tags=java,arrays |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| a |>\nThis is a simple Java code to solve your problem : \n\
    <code>\npackage com.example;", "{\n    string temp=s;\n    string[] arr=new string[1000];\n\
    \    string word=\"\";\n    \n    for(int i=0;i<arr.length;i++)\n    {\n     \
    \   arr[i]=\"\";\n    }", "{\n    \n    int n = s.length() - 1;\n    \n    int\
    \ first = 0;\n    int last = 0;\n    \n    bool start = true;\n    \n    string\
    \ tmp = \"\";\n    \n    string[] wordsArray = new string[n];\n    \n    for (int\
    \ i = 0; i < n; i++) \n    {\n        tmp = s.Substring(i, 1);\n        if (tmp.Equals(\"\
    ,\") || tmp.Equals(\".\"))\n        {\n            start = true;\n           \
    \ last = i;\n            continue;\n        }\n        \n        if (start)\n\
    \        {\n            wordsArray[i] = tmp;\n            \n            start\
    \ = false;\n        }\n        else\n        {\n            last = i;\n      \
    \  }\n    }\n    \n    return wordsArray;\n}", "{\n    return s.Split(new char[]\
    \ { ',', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries);\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nYou know what - this helped me so much! Thank you! I\
    \ needed to get my code to compile, but I never knew about the `char[]` constructor.\
    \ Thanks for teaching me something new!\n<|/ c |>\n<| c |>\nThis helped me so\
    \ much! Thank you! The only thing I had to change was I needed to change `s.Split(new\
    \ char[] {...}, StringSplitOptions.RemoveEmptyEntries)` to `s.Split(new char[]\
    \ { ',', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries)` so I could use the\
    \ semicolon.\n<|/ c |>\n<| c |>\nI'm glad this helped you. :-)\n<|/ c |>\n<| c\
    \ |>\nWow, this is great. Thank you!\n<|/ c |>\n<| c |>\nThis helped me so much!\
    \ Thank you! The only thing I had to change was I needed to change `s.Split(new\
    \ char[] {...}, StringSplitOptions.RemoveEmptyEntries)` to `s.Split(new char[]\
    \ { ',', ' ', ';' }, StringSplitOptions.RemoveEmptyEntries)` so I could use the\
    \ semicolon.\n<|/ c |>\n<| a dscore=3 |>\nThis is how I do it.\n<code>\nstring[]\
    \ words = str.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n\
    </code>\n<|/ a tags=c# |>\n<| a dscore=3 |>\nYou should be able to do this with\
    \ String.Split:\n<code>\nstring s = \"Hello, I like carrots.\";\nstring delimiter\
    \ = \" ,.\";\nstring[] words = s.Split(delimiter);\n</code>\nThe last argument\
    \ is a char[], so you can specify the characters to split on. \nIn your case,\
    \ you'd want to split on \"space\" and \"comma\", so you end up with this:\n<code>\n\
    string[] words = s.Split(new char[] {' ', ','});\n</code>\n<|/ a tags=c# |>\n\
    <| a tags=c# |>\n<code>\nvar words = \"Hi, my name is John\".Split(' ');\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nstring text = \"Hi, my name is John\"\
    ;", "{\n    string[] words;\n    \n    foreach(string w in split(s))\n       \
    \ words += split(w);\n    \n    return words;\n}", "{\n    \n    /*\n        Write\
    \ your code here\n    */\n    int n=s.length();\n    int m=n/2+1;\n    string\
    \ words[]={\"\",\"\",\"\",\"\",\"\",\"\"};\n    for(int i=0;i<m;i++)\n    {\n\
    \        string temp=s.substr(i,1);\n        if(temp==\" \")\n        {\n    \
    \        for(int j=i;j<n-1;j++)\n            {\n                words[j]=words[j+1];\n\
    \            }\n            words[n]=temp;\n        }\n        else if(temp==\"\
    ,\")\n        {\n            for(int j=i;j<n-1;j++)\n            {\n         \
    \       words[j]=words[j+1];\n            }\n            words[n]=temp;\n    \
    \    }\n        else\n        {\n            for(int j=i;j<n-1;j++)\n        \
    \    {\n                words[j]=words[j+1];\n            }\n            words[n]=temp;\n\
    \        }\n    }\n    return words;\n}", "{\n    string a = s.split(\" \");\n\
    \    int n = a.length;\n    string[] array = new string[n];\n    for (int i =\
    \ 0; i<n; i++) {\n        array[i] = a[i];\n    }\n    return array;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# dscore=0 |>\n<code>\n    string[] array = { \"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\" };\n    string[] splittedArray\
    \ = Array.ConvertAll(array, s => s.Split(','));\n    foreach (string s in splittedArray)\n\
    \        Console.WriteLine(s);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    string[] stringArray = { \"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    \ };\nstring[] splittedArray = Array.ConvertAll(stringArray, s => s.Split(','));\n\
    </code>\n<|/ a tags=c# |>\n<| c |>\nWhile this code snippet may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n        string[] stringArray\
    \ = { \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" };\n        string[]\
    \ splittedArray = Array.ConvertAll(stringArray, s => s.Split(','));\n        foreach\
    \ (string s in splittedArray)\n            Console.WriteLine(s);\n</code>\n<|/\
    \ a tags=c# |>\n<| a dscore=0 tags=c# |>\n<code>\n        string[] stringArray\
    \ = { \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" };\n        string[]\
    \ splittedArray = Array.ConvertAll(stringArray, s => s.Split(','));\n        foreach\
    \ (string s in splittedArray)\n            Console.WriteLine(s);\n</code>\n<|/\
    \ a |>\n<| a tags=c# |>\n<code>\nstring str = \"One,two,three,four,five,six\"\
    ;\nstring[] strs = str.Split(',');\nforeach (string s in strs)\n{\n     Console.WriteLine(s);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c# |>\n<code>\nstring[] array = { \"\
    One\", \"two\", \"", "{\n    char[] word_array = s.toCharArray();\n    word[]\
    \ words = new word[word_array.length];\n    int i = 0;\n    for (string word :\
    \ words)\n    {\n        words[i] = word;\n        i++;\n    }\n    return words;\n\
    }", "{\n    string[] strArr = s.split(\" \");\n    return strArr;\n}\n</code>\n\
    I hope this helps. Good luck with your homework and hope this helps you out with\
    \ your studies!\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm actually\
    \ doing this for a class on coding CS and I don't have the option of using Lists,\
    \ so I need a solution that does not use lists. I already have a solution that\
    \ works with lists (see my original post) but I was told that using a list wouldn't\
    \ be allowed for this project. So your solution was perfect. Thanks!\n<|/ c |>\n\
    <| c |>\nNo problem! I see you already have something that works with a list.\
    \ Just try to come up with something different so that you learn the technique\
    \ of arrays and how to get them and use them to create more complex programs.\
    \ That will really help you out in the long run!\n<|/ c |>\n<| a tags=list,string,c#\
    \ |>\nYou can split string by space using below code\n<code>\nstring test = \"\
    Hi, my name is John\";\nvar splitedString = test.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis would work but we can't use lists, arrays,\
    \ lists, or arrays for this assignment.\n<|/ c |>\n<| a tags=list,string,c# dscore=1\
    \ |>\nTry below code\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    string[] result;\n    string::iterator\
    \ itr;\n    \n    vector<string> words;\n    itr = s.begin();\n    while(itr !=\
    \ s.end()){\n        words.push_back(*itr);\n        ++itr;\n    }\n    \n   \
    \ size_t size = words.size();\n    result = new string[size];\n    for (size_t\
    \ i = 0; i < size; ++i)\n    {\n        result[i] = words[i];\n    }\n    return\
    \ result;\n}", "{\n    std.string word;\n    string[] words = new string[100];\n\
    \    for (int i = 0; i < s.Length; i++) {\n        if (char.IsWhiteSpace(s[i]))\n\
    \            word = \"\";\n        else if (!char.IsLetter(s[i]))\n          \
    \  word = \"\";\n        else if (!word.length)\n            word = \"\";\n  \
    \      else {\n            if (word.length == 1) {\n                word += s[i];\n\
    \                words[i - 1] += word;\n            }\n            else\n    \
    \            word += s[i];\n        }\n    }\n    return words;\n}", "{\n    return\
    \ s.split(\", \");\n}\n</code>\n3. Call the helper function words_string and print\
    \ the output from the call\n<code>\nusing System;\nusing System.Linq;\nclass MainClass\
    \ \n{\n    static void Main() \n    {\n        string string1 = \"Hi, my name\
    \ is John\";\n        Console.WriteLine(words_string(string1));\n        \n  \
    \      string1 = \"One, two, three, four, five, six\";\n        Console.WriteLine(words_string(string1));\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIf I'm wrong and you need a different\
    \ delimiter (such as white space), you can just change `string string1 = \"Hi,\
    \ my name is John\"` to `string string1 = \"Hi, my name is John; another comment\"\
    `\n<|/ c |>\n<| c |>\nThank you, I have modified the code as per your suggestion\n\
    <|/ c |>\n<| c |>\nThank you for helping me out, i was able to get it to work\
    \ :)\n<|/ c |>\n<| c |>\n.Doe Glad to help you\n<|/ c |>\n<| c |>\nHi , could\
    \ you tell me how to add two strings before and after string 1, string 2? Like\
    \ this: string string1 = \"Hi, my name is John\" , string string2 = \"Stackoverflow\"\
    \ . Sorry for asking you this many questions but im really a beginner at c# and\
    \ im not quite sure how to do that. Thanks\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    string string1 = \"Hi, my name is John\";\n        string string2 = \"Stackoverflow\"\
    ;", "{\n    if (s == \"\") return null;\n    \n    string[] words = s.Split(\"\
    \ \");\n    \n    return words;\n}\n</code>\nThe first function splits the string\
    \ into words based on spaces. The second function returns the array of a given\
    \ string. \nHope it helps!\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include<stdio.h>\n\
    #include<string.h>", "{\n    \n    string words[] = s.split(\" \");\n    return\
    \ words;\n    \n}\n/*\n    \n    You will be given a string of digits separated\
    \ by commas or spaces. Your task\n    is to use the split() method of the string\
    \ class to split the string into the\n    individual digits and return the array\
    \ of integers representing the digits\n    \n    For example:\n    >>> digits_string(\"\
    1, 2, 3, 4, 5\")\n    [1, 2, 3, 4, 5]\n    \n*/", "{\n    string words_string\
    \ = s.split(\" \");\n    return words_string;\n}", "{\n    string[] a;\n    a.length\
    \ = s.length();\n    int i = 0;\n    int j = -1;\n    while (i < s.length()) {\n\
    \        if (s[i] != ' ' || s[i] != ',') {\n            a[j] = s.substring(i,\
    \ j);\n            i = i + 1;\n        }\n        else {\n            i = i +\
    \ 1;\n        }\n        j = j - 1;\n    }\n    return a;\n}", "{\n    string[]\
    \ list = new string[s.Length];\n    int i = 0;\n    while (i < s.Length)\n   \
    \ {\n        list[i] = s.Substring(0, i);\n        i = s.IndexOf(\" \", i);\n\
    \        i += 2;\n    }\n    return list;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=c#,substring,string,arrays |>\nTry this:\n<code>\nstring[] GetWords(string\
    \ str, char separator)\n{\n    string[] words = str.Split(separator);\n    return\
    \ words;\n}\n</code>\nThe code splits the string into an array using space as\
    \ the delimiter. You can use other delimiters too, such as commas.\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer as well.\n<|/ c |>\n\
    <| c |>\nThis is exactly what I was looking for.  Works perfectly.  Thank you!\n\
    <|/ c |>\n<| a dscore=0 tags=c#,substring,string,arrays |>\nYou can use the Split\
    \ method of String. Example:\n<code>\nstring[] words = splitStr.Split(new char[]\
    \ {' '});\n</code>\nWhere splitStr is the string that you want to split and '\
    \ ' is the delimiter. \nIf you want to ignore leading and trailing whitespace,\
    \ you can use the Trim method of String.\n<|/ a |>\n<| c |>\nPlease add some explanation\
    \ to your answer as well.\n<|/ c |>\n<| a tags=c#,substring,string,arrays |>\n\
    <code>\n string[] splitString = \"The quick brown fox jumps over the lazy dog\"\
    .Split(new char[] { ' ' });\n string[] splitString2 = splitString.Select(s =>\
    \ s.Substring(0, s.IndexOf(' '))).ToArray();\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\n<code>\nstring input = \"The quick brown fox jumps over the lazy dog\";\n\
    string [] splitString = input.Split(' ');\n</code>\n<|/ a tags=c#,substring,string,arrays\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer as well.\n\
    <|/ c |>\n<| c |>\nWhile this code snippet may solve the question, [including\
    \ an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a ", "{\n    string words[]\
    \ = new string[s.length()]; // create an array for words\n    int index = 0;\n\
    \    for(int i=0; i<s.length(); i++)\n    {\n        if (s[i] != ',')\n      \
    \  {\n            words[index] = s[i]; \n            index++;\n        }\n   \
    \     else if (s[i] == ',')\n        {\n            for(int j=i; j<s.length();\
    \ j++)\n            {\n                if (s[j] != ',' && s[j] != ' ') \n    \
    \            {\n                    words[index] = s[j];\n                   \
    \ index++;\n                }\n            }\n            break;\n        }\n\
    \    }\n    return words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so\
    \ much for the help!\n<|/ c |>\n<| a |>\nA general solution:\n<code>\nstatic char[]\
    \ split(string str) {\n    char[] arr = new char[str.Length];\n    List<int> index\
    \ = new List<int>();\n    for(int i = 0; i < str.Length; i++) {\n        if(str[i]\
    \ == ' ') {\n            while(index.Count > 0) {\n                arr[index[index.Count-1]++]\
    \ = str[i];\n                index.RemoveAt(0);\n            }\n            index.Clear();\n\
    \        } else {\n            index.Add(i);\n            arr[i] = str[i];\n \
    \       }\n    }\n    return arr;\n}\n</code>\nUsage:\n<code>\nstring str = \"\
    One, two, three, four, five, six\";\nstring[] arr = split(str);\n</code>\n<|/\
    \ a dscore=1 tags=c#,.net |>\n<| a dscore=1 |>\n<code>\nstatic string[] SeparateWords(string\
    \ input)\n{\n    var splitter = new string[] { \", \" };\n    return input.Split(splitter,\
    \ StringSplitOptions.RemoveEmptyEntries);\n}\n</code>\n<|/ a tags=c#,.net |>\n\
    <| a tags=c#,.net |>\nHere is another example that has different separators such\
    \ as comma and semicolon.\n<code>\nstring words = \"One, two, three, four, five,\
    \ six\";\nvar sep = \",;\";\nvar strs = words.Split(sep);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\n\"One , two , three , four , five , six\" would be split by commas\
    \ and spaces.  That's probably not what was meant.\n<|/ c |>\n<| a dscore=0 tags=c#,.net\
    \ |>\nYou can use .Split() method of string class with the separator as \", \"\
    \n<code>\nstring[] separated = text.Split(',');\n</code>\n<|/ a |>\n", "{\n  \
    \  int i = 1;\n    \n    vector<string> v; //Create an empty vector to hold all\
    \ the words\n    \n    while(s[i] != '\\0') //While the string is not blank\n\
    \    {\n        if (s[i] >= 'A' && s[i] <= 'Z') //If the letter is uppercase\n\
    \        {\n            v.push_back(s[i - 1] + string(s[i],s[i])); //Add it to\
    \ the vector\n        }\n        else if (s[i] >= 'a' && s[i] <= 'z') //If the\
    \ letter is lowercase\n        {\n            v.push_back(s[i - 1] + string(s[i],s[i]));\n\
    \        }\n        else //If the letter is non capitalized then it's simply a\
    \ comma\n        {\n            v.push_back(s[i - 1] + string(s[i],s[i]));\n \
    \       }\n        i++;\n    }\n    \n    return v; //Return the vector \n}\n\
    /*", "{\n    string[] words;\n    words = s.Split(',').Select(s => s.Trim()).ToArray();\n\
    \    return words;\n}", "{\n    // Complete the code here.\n    string[] result\
    \ = new string[s.Split(',').Length];\n    for (int i = 0; i < s.Split(',').Length;\
    \ i++)\n        result[i] = s.Split(',')[i];\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI'm sorry, but this is terribly wrong. `split` is\
    \ not a static method, hence you cannot use `s.Split` without first having a `string`\
    \ named `s`. Hence, your `result` array will be full of garbage.\n<|/ c |>\n<|\
    \ a tags=string,c#,arrays |>\nIf you don't want to use LINQ, then you can use\
    \ foreach loops to do this as shown below:\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;", "{\n    \n    char[] c = s.toCharArray();\n    \n    char[]\
    \ c1 = new char[c[0].length+1];\n    c1[0]=' ';\n    c1[1]='\\0';\n    \n    for(int\
    \ i=1; i<c[0].length; i++)\n    {\n        c1[i+1]=c[0][i];\n    }\n    c[0]=c1;\n\
    \    return split_by_space(c);\n}", "{\n    char[] array = s.toCharArray();\n\
    \    array = new char[std.typecons.max(array.length)]; \n    for(int i=0;i<array.length;i++)\n\
    \    {\n        if(array[i]==','||array[i]==' ')\n        {\n            array[i]\
    \ = '\\0';\n        }\n    }\n    string[] retVal = new string[array.length];\n\
    \    for(int i=0;i<array.length;i++)\n    {\n        retVal[i]=std.string.format(array[std.typecons.max(std.math.min(i,\
    \ array.length-1))]);\n    }\n    return retVal;\n}", "{\n    return words.split_string(s);\n\
    }", "{\n    string[] words = new string[10000];\n    for(int i = 0; i < words.length;\
    \ i++) \n    {\n        words[i] = s.substr(0, s.IndexOf(\" \", i));\n       \
    \ s = s.Substring(s.IndexOf(\" \", i) + 1);\n    }\n    return words;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| c |>\nI thought that splitting with space was bad idea. It\
    \ can be easily done with regex `string text = \"Hi, my name is John\";\nRegex.Matches(text,\
    \ @\"\\b\\w+\\b\")`\n<|/ c |>\n<| c |>\nI agree, however I thought the code sample\
    \ was showing how they were getting the words into the array and I thought that\
    \ they were allowed to use substring and IndexOf to get a substring from the original\
    \ string.  Regex is a really cool tool though, great example.\n<|/ c |>\n<| c\
    \ |>\nYeah, I agree Regex is cool tool. But sometimes its better to show how it\
    \ can be done without it. For example in question OP has written that he is new\
    \ in c# and this could be a good answer.\n<|/ c |>\n<| c |>\nYes, but in that\
    \ case you should show him how to do it without Regex. That will be better than\
    \ just pointing out how it is done. Thats why I wrote \"that can be used without\
    \ regex\"\n<|/ c |>\n<| c |>\nThe question is not about how to do this without\
    \ Regex, but how to do this with Regex. I wanted to make that clear in the code\
    \ sample\n<|/ c |>\n<| a tags=c# dscore=3 |>\nHere are some benchmarks, using\
    \ BenchmarkDotNet's performance tests:\n<code>\n[MethodImpl(MethodImplOptions.NoInlining)]\n\
    public string StringSplitBenchmark(string inputString)\n{\n    string result =\
    \ string.Empty;", "{\n    string[] result = new string[10000];\n    stack<int>\
    \ s;\n    stack<string> a = new stack<string>();\n    stack<int> b = new stack<int>();\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i].isSpace(0))\n\
    \            b.push(i);\n        else\n        {\n            s.push(s[i]);\n\
    \            while(!s.empty())\n            {\n                string word = s.top();\n\
    \                s.pop();\n                result[b.top()] = word;\n         \
    \       a.push(b.top());\n                b.pop();\n            }\n          \
    \  a.push(s[i]);\n        }\n    }\n    return result.Take(b.top()).ToArray();\n\
    }\n/*\n    The input string may be empty or null.", "{\n    string[] words = new\
    \ string[s.length()];\n    for (int i = 0; i < s.length(); i++)\n    {\n     \
    \   int pos = s.find(\" \");\n        if (pos != -1)\n        {\n            words[i]\
    \ = s.substring(i, pos);\n            s = s.substring(pos+1);\n        }\n   \
    \     else\n        {\n            words[i] = s;\n            s = \"\";\n    \
    \    }\n    }\n    return words;\n}\n/*", "{\n    string[] result;\n    string[]\
    \ tokens;\n    \n    tokens = s.split( \", \" );\n    result = new string[tokens.length];\n\
    \    \n    for( int i = 0; i < tokens.length; i++ ) \n    {\n        result[i]\
    \ = tokens[i];\n    }\n    \n    return result;\n}", "{\n    string[] ans;\n \
    \   int num;\n    \n    ans = new string[50];\n    num = s.find_first_not_of(\"\
    , ,\");\n    \n    for(int i=0;i<num;i++)\n    {\n        ans[i+1] = s.substr(0,s.find_first_not_of(\"\
    , ,\"));\n        s = s.substr(num+1);\n        num = s.find_first_not_of(\",\
    \ ,\");\n    }\n    ans[ans.length-1] = s;\n    return ans;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nIt would be great if you could tell us what this code\
    \ is doing, or at least explain what it does. It also would be great if you could\
    \ give any suggestions on how to improve it.\n<|/ c |>\n<| c |>\nYes you are right\
    \ this is very inefficient but I have been trying for about a day to find the\
    \ most efficient way to split a string into words and I thought this was the best\
    \ way I could think of after searching online for a while. I also thought there\
    \ might be some way I could do this without using the .find_first_not_of(\", ,\"\
    ) function. Thanks for your help anyway\n<|/ c |>\n<| a dscore=1 |>\nHere is my\
    \ version using regex (no loop):\n<code>\npublic static String[] words1(String\
    \ s){\n    Matcher m = Pattern.compile(\"(^| )([^,]+)(?= ,)\").matcher(s);\n \
    \   m.find();\n    return new String[]{m.group(1)+m.group(2), m.group(3)};\n}",
  "{\n    string[] words = new string[5];\n    string[] splitted = s.split(\" \");\n\
    \    for(int i = 0; i < splitted.length; i++)\n    {\n        words[i] = splitted[i].trim();\n\
    \    }\n    return words;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI\
    \ have made a function in Kotlin to return the substring from start position to\
    \ end position. \n<code>\nfun subString(s: String, start: Int, end: Int): String\
    \ {\n    if (start > end) return \"\"\n    return s.substring(start, end)\n}\n\
    </code>\n<|/ a tags=java,string,arrays,c# |>\n<| a tags=java,string,arrays,c#\
    \ dscore=0 |>\nHere is a solution in Java 8 and its also works for the given case.\n\
    <code>\nString str = \"Hi, my name is John\";\nList<String> words = Arrays.asList(str.split(\"\
    \ \"));\nList<String> result = words.stream().filter(x -> !x.isEmpty()).collect(Collectors.toList());\n\
    </code>\nThe output:\n<code>\n[Hi, my name , is , John]\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\nstring str = \"Hi, my name is John\";\nstring newstr\
    \ = str.Replace(\",\", \"\");\nstring[] splitstr = newstr.Split(' ');\n</code>\n\
    <|/ a tags=java,string,arrays,c# |>\n<| a tags=java,string,arrays,c# |>\nC# code\
    \ \n<code>\npublic string[] splitString(string str) {\n    var arr = str.Split(',');\n\
    \    return arr.Where(x => !string.IsNullOrEmpty(x)).ToArray();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is another approach to split a string\
    \ by ,, using LINQ and lambda:\n<code>\nstring strArray[] = str.Split(',').Where(x\
    \ => !string.IsNullOrEmpty(x)).ToArray();\n</code>\n<|/ a tags=java,string,arrays,c#\
    \ |>\n<| a dscore=0 |>\nYou can use this function also.\n<code>\npublic string[]\
    \ SplitString(String str,char delimeter)\n{\n    StringBuilder sb = new StringBuilder();\n\
    \    string [] splitStr = str.Split(delimeter);\n    for (int i = 0; i < splitStr.Length;\
    \ i++)\n    {\n        sb.Append(splitStr[i]);\n    }\n    string [] retVal =\
    \ sb.ToString().Split(delimeter);\n    return retVal;\n}", "{\n    return s.split(\"\
    ,\");\n}\n/*\n    \n    You will be given an integer to convert. Your task is\
    \ to convert it to a\n    string, then return the string representation. For example:\n\
    \    >>> int_to_string(123)\n    \"123\"\n    >>> int_to_string(123)\n    \"123\"\
    \n    \n*/\nstring int_to_string(long i) { \n    string s = \"\"; \n    for(long\
    \ x = i; x > 0; x /= 10) { \n        s += ((x % 10) + \"\"); \n    } \n    return\
    \ s; \n} \n/*\n    \n    You will be given two integers. The task is to return\
    \ the difference of \n    the two integers. For example:\n    >>> differences(3,\
    \ 4)\n    1\n    >>> differences(3, 4)\n    -1\n    \n    */", "{\n    string[]\
    \ result=new string[20];\n    int index=0;\n    for(char c : s)\n    {\n     \
    \   if(!isWhitespace(c))\n        {\n            result[index++]=c;\n        }\n\
    \    }\n    return result;\n}", "{\n    \n    string[] array;\n    string currentWord\
    \ = \"\";\n    \n    foreach(char c in s)\n    {\n        if(char.IsWhiteSpace(c))\n\
    \        {\n            currentWord = \"\";\n            continue;\n        }\n\
    \        else if(!char.IsLetterOrDigit(c))\n        {\n            currentWord\
    \ = \"\";\n            continue;\n        }\n        else\n        {\n       \
    \     currentWord += c;\n        }\n    }\n    \n    array = currentWord.split(\"\
    ,\");\n    \n    return array;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ actually work. As soon as you start splitting a string containing multiple spaces\
    \ the last one will contain all the spaces except for the first space which was\
    \ split in the previous iteration. I'm sure you can fix this but this also doesn't\
    \ work for strings like \"one,two, three,four\".\n<|/ c |>\n<| a dscore=1 |>\n\
    If you are not allowed to use LINQ then use below code (it's self explanatory)\
    \ :\n<code>\nstring text = \"One, two, three, four, five, six\";\nstring[] values\
    \ = text.Split(',');\nstring[] newValues = new string[values.Length];", "{\n \
    \   return s.split(',');\n}\n/*", "{\n    char comma = ',';\n    char space =\
    \ ' ';\n    string[] result;\n    string[] word;\n    size_t pos;\n    bool inDoubleQuotes\
    \ = false;\n    bool inSingleQuotes = false;\n    size_t curChar = 0;\n    size_t\
    \ nextChar;\n    size_t posInPrevChar = 0;\n    size_t posInNextChar = 0;\n  \
    \  size_t startIndex = 0;", "{\n    var a = s.split(\" \");\n    return a;\n}",
  "{\n\tstring[] arr = new string[s.length()];\n\tchar[] chArr = s.ToCharArray();\n\
    \tfor (int i=0; i<chArr.Length; i++)\n\t{\n\t\tarr[i] = \"\";\n\t\tfor (int j=i;\
    \ j<chArr.Length && chArr[j]!=\",\" && chArr[j]!=' '; j++)\n\t\t\tarr[i] += chArr[j];\n\
    \t}\n\treturn arr;\n}\n/*", "{\n\tstring result = \"\";\n\tstring[] result = s.split(',');\n\
    \treturn result;\n}", "{\n    int size = s.length();\n    string[] words = new\
    \ string[size];\n    for(int i = 0; i < size; ++i)\n    {\n        char c = s.charAt(i);\n\
    \        if(char.IsLetterOrDigit(c))\n            words[size - 1 - i] = c;\n \
    \   }\n    return words;\n}\n</code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\n\
    Thank you for your time this really helped me out!\n<|/ c |>\n<| c |>\nYou're\
    \ welcome. I'm glad I could help. :)\n<|/ c |>\n<| a dscore=0 tags=string,c#,arrays\
    \ |>\n<code>\n    string[] arr = new string[4];\n    string str = \"Hi my name\
    \ is John\";\n    string[] arrSplit = str.Split(new char[] {','});\n    foreach\
    \ (string s in arrSplit) {\n        arr[0] = s;\n    }\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\nstring[] array = str.Split(',');\n</code>\n<|/ a dscore=0 tags=string,c#,arrays\
    \ |>\n<| a dscore=0 |>\nTry this:\n<code>\nstring str = \"Hi my name is John\"\
    ;\nstring[] strArray = str.Split(',');\n</code>\n<|/ a tags=string,c#,arrays |>\n\
    <| c |>\nThe OP specifically said that he doesn't want to use a loop :)\n<|/ c\
    \ |>\n<| c |>\nThe OP also states he wants an array. So I think this is the best\
    \ solution.\n<|/ c |>\n<| a |>\n<code>\n        string[] str = { \"Hi my name\
    \ is John\" };\n        string[] str2 = { \"Hi, my name is John\" };\n       \
    \ string[] str3 = { \"Hi, my name is John,\" };\n        string[] str4 = { \"\
    Hi, my name is John,\" };\n        string[] str5 = { \"Hi, my name is John,\"\
    \ };\n        string[] str6 = { \"Hi, my name is John,\" };\n        string[]\
    \ str7 = { \"Hi, my name is John,\" };\n        string[] str8 = { \"Hi, my name\
    \ is John,\" };\n        string[] str9 = { \"Hi, my name is John,\" };\n     \
    \   string[] str10 = { \"Hi, my name is John,\" };\n        string[] str11 = {\
    \ \"Hi, my name is John,\" };\n        string[] str12 = { \"Hi, my name is John,\"\
    \ };", "{\n    int count = 0;\n    string temp = \"\"; // temporary string\n \
    \   string[] arr;\n    foreach (char c in s)\n    {\n        temp = temp + c;\n\
    \        count++;\n    }\n    arr = temp.split(',');\n    foreach (string str\
    \ in arr)\n    {\n        arr.remove(arr.length-1);\n    }\n    return arr;\n\
    }\n/*", "{\n    string [] arr = s.Split(',');\n    return arr;\n}\n/*\n    \n\
    \    You will be given a string of comma-separated words. \n    Your task is to\
    \ rearrange the words in such a way that the words are in alphabetical order.\
    \ \n    The output should be in alphabetical order. \n    \n    For example:\n\
    \    >>> word_list(\"One, two, three, four, five, six\")\n    [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"]\n    >>> word_list(\"Five, four, three,\
    \ two, one, six\")\n    [\"five\", \"four\", \"three\", \"two\", \"one\", \"six\"\
    ]\n*/\nstring[] word_list(string s) \n{\n    string [] arr = s.Split(',');\n \
    \   string[] res = new string[arr.Length];\n    for(int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if(arr[i].Length > 0)\n            res[i] = arr[i];\n \
    \   }\n    return res;\n}\n/*\n    \n    You will be given a string of words in\
    \ any order. Your task is to move the words so the words \n    have no repeating\
    \ characters in them. \n    The words can be in any alphabetical order. \n   \
    \ \n    For example:\n    >>> rearrange_words(\"one, two, three, four, five\"\
    )\n    [\"one\", \"two\", \"three\", \"four\", \"five\"]\n*/\nstring[] rearrange_words(string\
    \ s)\n{\n    string [] arr = s.Split(',');\n    string[] res = new string[arr.Length];\n\
    \    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i].Length > 0)\n\
    \            res[i] = arr[i];\n    }\n    return res;\n}\n/*\n    \n    You will\
    \ be given a string of words in any order. Your task is to move the words so the\
    \ words \n    have no repeating characters in them. \n    The words can be in\
    \ any alphabetical order. \n    \n    For example:\n    >>> rearrange_words(\"\
    one, two, three, four, five\")\n    [\"one\", \"two\", \"three\", \"four\", \"\
    five\"]\n*/\nstring[] rearrange_words(string s)\n{\n    string [] arr = s.Split(',');\n\
    \    string[] res = new string[arr.Length];\n    for(int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if(arr[i].Length > 0)\n            res[i] = arr[i];\n \
    \   }\n    return res;\n}\n/*\n    \n    You will be given a comma separated string\
    \ of words. Your task is to return the number of \n    words in the string that\
    \ starts with a 'f' and end", "{\n    string[] words = s.Split(new char[] { ',',\
    \ ' ' });\n    return words;\n}\n</code>\n<|/ a |>\n<| c |>\nThe original problem\
    \ was about finding words in a string that start with a certain letter. Your solution\
    \ for finding words starting with a given letter does not work in the general\
    \ case. E.g. 'Hi' should return \"Hi\", but the solution given by does not work.\
    \ Also the solution given by does not work for strings containing commas (,).\n\
    <|/ c |>\n<| a tags=c#,arrays |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;",
  "{\n    string[] r;\n    \n    foreach(char c in s)\n    {\n        char lc = tolower(c);\n\
    \        if(isalpha(lc))\n        {\n            if(isupper(lc))\n           \
    \ {\n                r.add(lc.toUppercase());\n            }\n            else\n\
    \            {\n                r.add(lc.toLowercase());\n            }\n    \
    \    }\n    }\n    \n    return r;\n}\n</code>\n<|/ a dscore=1 tags=c++,string,function\
    \ |>\n<| c |>\n`string lc = tolower(c);` <-- oops, I didn't see that one coming.\
    \ I was writing an answer that had some code that would convert upper and lowercase\
    \ letters to the same case. I was going to put in a comment that you could replace\
    \ that with `if(c>='A' && c<='Z') lc=c-'A'; else if(c>='a' && c<='z') lc=c-'a';\
    \ else lc=c;` but it would look ugly...\n<|/ c |>\n<| c |>\nNo it's fine! I was\
    \ going for the \"one line solution\" to the OP's problem, but you're right in\
    \ that it would be better to have a `for` loop instead of the if statements. The\
    \ code you wrote will work but looks ugly :p\n<|/ c |>\n<| a dscore=0 tags=c++,string,function\
    \ |>\n<code>\nstring s = \"Hi my name is John\";\nchar *pch;", "{\n    return\
    \ std.array.to.list(s.split(\" \"));\n}\n/*", "{\n    string[] words = new string[6];\n\
    \    for(int i = 0;i < words.length;i++)\n    {\n        words[i] = \"\";\n  \
    \  }\n    for(int i = 0;i < s.length();i++)\n    {\n        for(int j = 0;j <\
    \ words.length;j++)\n        {\n            if(s[i].equals(\",\"))\n         \
    \   {\n                words[j] = \"\";\n            }\n            else if(words[j]\
    \ != \"\")\n            {\n                words[j] += s[i];\n               \
    \ break;\n            }\n            else\n            {\n                words[j]\
    \ = s[i];\n            }\n        }\n    }\n    return words;\n}\n/*", "{\n  \
    \  int count = 0;\n    string word = \"\";\n    \n    int lastIndex = s.length()\
    \ - 1;\n    for (int i = 0; i < lastIndex; i++)\n    {\n        if (s[i] == ',')\n\
    \        {\n            count++;\n            if (count == 1)\n            {\n\
    \                word = word + s[i];\n            }\n            else\n      \
    \      {\n                word = word + s[i];\n                count--;\n    \
    \        }\n        }\n        else if (s[i] == ' ')\n        {\n            count\
    \ = count + 1;\n            word = \"\";\n        }\n        else\n        {\n\
    \            if (count != 0)\n            {\n                word = word + s[i];\n\
    \            }\n        }\n    }\n    \n    \n    \n    word = \"\";\n    count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == ',')\n\
    \        {\n            count++;\n        }\n        else if (s[i] == ' ')\n \
    \       {\n            count = count + 1;\n        }\n        else\n        {\n\
    \            if (count != 0)\n            {\n                word = word + s[i];\n\
    \            }\n        }\n    }\n    \n    string [] words = new string[s.length()];\n\
    \    string result = \"\";\n    int count = 0;\n    \n    for (int i = 0; i <\
    \ s.length(); i++)\n    {\n        if (s[i] == ',')\n        {\n            words[count]\
    \ = word;\n            result = \"\";\n            count++;\n            word\
    \ = \"\";\n        }\n        else if (s[i] == ' ')\n        {\n            words[count]\
    \ = word;\n            count = 0;\n            word = \"\";\n        }\n     \
    \   else\n        {\n            if (count != 0)\n            {\n            \
    \    words[count] = word;\n            }\n        }\n    }\n    \n    return words;\n\
    }", "{\n    string[] words = null;\n    int pos = 0;\n    int len = s.length;\n\
    \    while(pos < len)\n    {\n        int space = s.find(\" \", pos);\n      \
    \  if(space == -1) space = 0;\n        int comma = s.find(\",\", pos);\n     \
    \   if(comma == -1) comma = len;\n        string words[] = new string[comma -\
    \ space];\n        for(int i = 0; i < words.length; ++i)\n        {\n        \
    \    words[i] = s[i + space];\n        }\n        pos = comma + 1;\n    }\n  \
    \  \n    return words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks Ashish,\
    \ I'm just learning Python so this made a lot of sense. I'll try and implement\
    \ this and see how it goes\n<|/ c |>\n<| c |>\nWhat is the time complexity of\
    \ this method? And how does it compare to Ashish's solution? Thanks\n<|/ c |>\n\
    <| c |>\nThis has O(n) time complexity. Python and JavaScript are both interpreted\
    \ languages. So the execution time is very close to O(n) time complexity, but\
    \ in Python this loop is executed by interpreter. Javascript is compiled, so there\
    \ can be a significant difference. Also keep in mind that `array` is more or less\
    \ implemented as an `ArrayList`. So `append` operations can be very inefficient.\n\
    <|/ c |>\n<| c |>\n, your solution is similar to Ashish's but his solution is\
    \ more robust. It can handle strings without spaces or commas at all. It also\
    \ has a much more readable and robust solution. Also, `append` operation is very\
    \ inefficient. Every time you call `append` it creates a new list object which\
    \ is added to the list of lists. So `append` operation is pretty inefficient in\
    \ terms of memory and time.\n<|/ c |>\n<| c |>\nAshish, thanks for your help.\
    \ I've been trying to work through this and just can't seem to figure out what's\
    \ wrong with my code (I have been reading it for like an hour now and I still\
    \ can't figure out what's wrong), I'm getting a \"global name 'split' is not defined\"\
    \ error on line 8 of your code and I tried to import split but that didn't work\
    \ either. I don't understand why my code is failing right off the bat and I can't\
    \ seem to find a solution on here either. Any ideas? Thanks so much!\n<|/ c |>\n\
    <| a tags=string,arrays,python |>\n<code>\ndef string_split(s):\n    words = s.split(',')\n\
    \    words.pop(0)\n    words.pop(-1)\n    return words", "{\n    string[] words\
    \ = s.split(\" \");\n    for (int i = 0; i < words.length; i++) \n    {\n    \
    \    words[i] = words[i].trim();\n    }\n    return words;\n}", "{\n    \n}\n\
    </code>\n<|/ q dscore=0 |>\n<| a tags=dart,flutter,arrays,flutter-dependencies\
    \ dscore=0 |>\n<code>\nList<String> result = wordList.split(\" \");\n</code>\n\
    <|/ a |>\n<| a tags=dart,flutter,arrays,flutter-dependencies |>\nTry with this\n\
    <code>\nList<String> wordList = words_string(\"One, two, three, four, five, six\"\
    );\nList<String> result = wordList.split(', ');\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=dart,flutter,arrays,flutter-dependencies |>\n<code>\nString\
    \ words = \"One, two, three, four, five, six\";\n  List<String> wordList = words.split(',');\n\
    \  print(wordList);\n</code>\n<|/ a |>\n<| c |>\nWhile this code may solve the\
    \ question, [including an explanation](//meta.stackexchange.com/q/114762) of how\
    \ and why this solves the problem would really help to improve the quality of\
    \ your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a |>\n<code>\n //Split string with comma\
    \ separator and assign it to variable and display in Listview\n    final _words\
    \ = \"One, two, three, four, five, six\";\n    List<String> wordList = _words.split(',');\n\
    \    List<String> wordList1 = _words.split(',');", "{\n    int word_count =0;\n\
    \    int word_length =0;\n    int word_count =s.length()/2;\n    string temp1\
    \ =\"\";\n    string temp2 =\"\";\n    string temp3 =\"\";\n    string temp4 =\"\
    \";\n    string temp5 =\"\";\n    string temp6 =\"\";\n    string temp7 =\"\"\
    ;\n    string temp8 =\"\";\n    string temp9 =\"\";\n    string temp10 =\"\";\n\
    \    string temp11 =\"\";\n    string temp12 =\"\";\n    string temp13 =\"\";\n\
    \    string temp14 =\"\";\n    string temp15 =\"\";\n    string temp16 =\"\";\n\
    \    string temp17 =\"\";\n    string temp18 =\"\";\n    string temp19 =\"\";\n\
    \    string temp20 =\"\";\n    string temp21 =\"\";\n    string temp22 =\"\";\n\
    \    string temp23 =\"\";\n    string temp24 =\"\";\n    string temp25 =\"\";\n\
    \    string temp26 =\"\";\n    string temp27 =\"\";\n    string temp28 =\"\";\n\
    \    string temp29 =\"\";\n    string temp30 =\"\";\n    string temp31 =\"\";\n\
    \    string temp32 =\"\";\n    string temp33 =\"\";\n    string temp34 =\"\";\n\
    \    string temp35 =\"\";\n    string temp36 =\"\";\n    string temp37 =\"\";\n\
    \    string temp38 =\"\";\n    string temp39 =\"\";\n    string temp40 =\"\";\n\
    \    string temp41 =\"\";\n    string temp42 =\"\";\n    string temp43 =\"\";\n\
    \    string temp44 =\"\";\n    string temp45 =\"\";\n    string temp46 =\"\";\n\
    \    string temp47 =\"\";\n    string temp48 =\"\";\n    string temp49 =\"\";\n\
    \    string temp50 =\"\";\n    string temp51 =\"\";\n    string temp52 =\"\";\n\
    \    string temp53 =\"\";\n    string temp54 =\"\";\n    string temp55 =\"\";\n\
    \    string temp56 =\"\";\n    string temp57 =\"\";\n    string temp58 =\"\";\n\
    \    string temp59 =\"\";\n    string temp60 =\"\";\n    string temp61 =\"\";\n\
    \    string temp62 =\"\";\n    string temp63 =\"\";\n    string temp64 =\"\";\n\
    \    string temp65 =\"\";\n    string temp66 =\"\";\n    string temp67 ", "{\n\
    \    string s_split = s.split(\" \");\n    for(int i=0;i<s_split.length()-1;i++){\n\
    \        s_split[i] = s_split[i] + \" \";\n    }\n    s_split[s_split.length()-1]\
    \ = s_split[s_split.length()-1].substring(0,s_split[s_split.length()-1].length()-1);\n\
    \    return s_split;\n}\n</code>\n<|/ a tags=string,arrays,c# dscore=2 |>\n<|\
    \ a |>\nI know this is an old question but I thought I would add a solution that\
    \ uses regular expressions to split a string.\n<code>\nusing System.Text.RegularExpressions;",
  "{\n    //Your code here\n    \n}\n</code>\nYou can use the string function to split\
    \ the string into an array using the words as delimiters.\n<code>\nstring s =\
    \ words_string(\"Hi, my name is John\");\nstring s1 = words_string(\"One, two,\
    \ three, four, five, six\");\n</code>\nThe above code will return the following:\n\
    <code>\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n[\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n</code>\nAnother method to solve the problem would\
    \ be to first create an array and pass it to the function and use the function\
    \ itself.\n<code>", "{\n    string[] w = new string[50];\n    int i = 0;\n   \
    \ int j = 0;\n    while (i<s.length())\n    {\n        if (s.at(i)==',')\n   \
    \     {\n            i++;\n            j = 0;\n        }\n        else if (s.at(i)=='\
    \ ')\n        {\n            w[j++] = \"\";\n        }\n        else\n       \
    \ {\n            w[j++] = s.at(i);\n        }\n        i++;\n    }\n    return\
    \ w;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,functional-programming,c++,algorithm\
    \ |>\nHere's a non-functional solution:\n<code>\nstring s = \"Hi, my name is John\"\
    ;\nvector<string> results;", "{\n    string[] result;\n    int i;\n    stack<string>\
    \ words;\n    for(i = 0; i < s.length(); ++i)\n    {\n        char c = s[i];\n\
    \        switch(c)\n        {\n            case '\"':\n            case '\\'':\n\
    \                if(!words.empty())\n                {\n                    string\
    \ t = words.top();\n                    words.pop();\n                    result.append(t);\n\
    \                }\n                result.append(\"\\\"\");\n               \
    \ break;\n            default:\n                if(!words.empty())\n         \
    \       {\n                    string t = words.top();\n                    words.pop();\n\
    \                    result.append(t);\n                }\n                result.push_back(c);\n\
    \                break;\n        }\n        words.push(c);\n    }\n    if(!words.empty())\n\
    \    {\n        string t = words.top();\n        words.pop();\n        result.append(t);\n\
    \    }\n    return result;\n}", "{\n    string words[];\n    std.stringsplit.split.delims(s,\
    \ \",\");\n    return words;\n}\n/*", "{\n    int idx = 0;\n    \n    string result\
    \ = \"\";\n    \n    while (idx < s.length())\n    {\n        char c = s[idx];\n\
    \        \n        if (isDigit(c) || isLetter(c))\n        {\n            result\
    \ += \"_\";\n        }\n        \n        result += c;\n        \n        idx++;\n\
    \    }\n    \n    string[] words = result.split(\"_\");\n    \n    return words;\n\
    }", "{\n  string[] result = new string[10000];\n  int i=0;\n  int j=0;\n  for(i=0;i<s.length();i++)\n\
    \  {\n    if(s[i]==',' || s[i]==' ')\n    {\n      result[j]=s.substr(i,1);\n\
    \      i=0;\n      j++;\n    }\n    else\n    {\n      result[j]=s.substr(i,1);\n\
    \      i=0;\n      j++;\n    }\n  }\n  \n  for(int k=0;k<result.length;k++)\n\
    \  {\n    result[k]=result[k].ToLower();\n  }\n  return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,c# |>\n<code>\n        string input;\n   \
    \     string result = \"\";\n        List<string> words = new List<string>();",
  "{\n    int size = s.size();\n    string[] temp;\n    temp = new string[size];\n\
    \    for (int i = 0; i < size; i++)\n    {\n        temp[i] = s.Substring(i, 1);\n\
    \    }\n    return temp;\n}", "{\n    string[] result= s.Split(' ');\n    return\
    \ result;\n}\n/*", "{\n    string[] arr = s.Split(',');\n    return arr;\n}\n\
    /*", "{\n    List<string> words = new List<string>();\n    foreach (char c in\
    \ s)\n    {\n        if (isAlphanumeric(c))\n        {\n            words.Add(c);\n\
    \        }\n        else if (!(isDigit(c)))\n        {\n            string t =\
    \ new string(' ', (int)c);\n            words.Add(t);\n        }\n    }\n    return\
    \ words.ToArray();\n}\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a dscore=2\
    \ |>\n<code>\n    public static string[] SplitString(string s, string delimiter)\n\
    \    {\n        return s.Split(new char[]{delimiter}, StringSplitOptions.None);\n\
    \    }\n</code>\n<|/ a tags=string,arrays,c# |>\n<| a |>\n<code>\nusing System.IO;\n\
    using System.Linq;\nusing System.Collections.Generic;", "{\n    int sSize = s.length();\n\
    \    char c = ',';\n    \n    string[] words = new string[sSize];\n    int index\
    \ = 0;\n    \n    for (int i = 0; i < sSize; i++) \n    {\n        if (i == sSize\
    \ - 1)\n        {\n            words[index] = s.Substring(i, sSize - i);\n   \
    \     }\n        else \n        {\n            words[index] = s.Substring(i, 1);\n\
    \        }\n        \n        if (s.Contains(c)) \n        {\n            int\
    \ index = s.IndexOf(c);\n            string subString = s.Substring(index, 1);\n\
    \            words[index] = subString;\n            c = ',';\n        }\n    \
    \    index++;\n    }\n    \n    return words;\n}\n/*", "{\n    int start = 0,\
    \ last = 0;\n    \n    for(int i = 0; i <= s.length(); i++) \n    {\n        if(s.at(i)\
    \ == ',') \n        {\n            last = i;\n            start = i;\n       \
    \ }\n        \n        if(s.at(i) == ' ') \n        {\n            words[last].push_back(s.substr(start,\
    \ i - start));\n            start = i;\n        }\n    }", "{\n    string[] words_list\
    \ = s.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\
    \    return words_list;\n}\n</code>\n<|/ a tags=arrays,string,c# |>\n<| a dscore=0\
    \ |>\nTry this\n<code>\npublic static string[] wordsplit(string s)\n{\n    return\
    \ s.Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);\n}\n</code>\n\
    <|/ a tags=arrays,string,c# |>\n<| a tags=arrays,string,c# |>\n<code>\nstring[]\
    \ words = s.Split(' ');\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\npublic static\
    \ string[] splitString(string str) \n{\n    return str.Split(new char[] {' '},\
    \ StringSplitOptions.RemoveEmptyEntries);\n}\n</code>\n<|/ a dscore=0 tags=arrays,string,c#\
    \ |>\n<| a |>\n<code>\nstring[] words= wordsString(yourString);\n</code>\n<|/\
    \ a tags=arrays,string,c# dscore=0 |>\n<| a tags=arrays,string,c# dscore=0 |>\n\
    I used the below method in my c# application.\n<code>\npublic static string[]\
    \ SplitString(string aString, string aDelimiter)\n{\n    string[] aReturnValue\
    \ = new string[aString.Split(aDelimiter).Length];\n    int counter = 0;\n    foreach\
    \ (string aItem in aString.Split(aDelimiter))\n    {\n        aReturnValue[counter++]\
    \ = aItem;\n    }\n    return aReturnValue;\n}\n</code>\nYou can call this method\
    \ as below to get your result.\n<code>\nstring[] wordsArray = SplitString(myString,\
    \ \" \");\n</code>\n<|/ a |>\n<| a |>\nHere is an example using .NET's String.Split\
    \ Method.\n<code>\n    static void Main(string[] args)\n    {\n        string\
    \ input = \"one,two,three\";\n        string pattern = \",\";\n        string[]\
    \ words = input.Split(new string[] { pattern }, StringSplitOptions.None);\n  \
    \  }\n</code>\n<|/ a dscore=0 tags=arrays,string,c# |>\n<| a tags=arrays,string,c#\
    \ |>\n<code>\nstring s = \"one,two,three\";\nstring[] result = s.Split(',');\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis will give array of string with length\
    \ 3. The result should be \n`{\"one\",\"two\",\"three\"}`\n<|/ c |>\n<| a tags=",
  "{\n    string [] w;\n    foreach(char c in s)\n    {\n        if(c == ',')\n  \
    \      {\n            w = string[w.length() + 1];\n            w[w.length()] =\
    \ '\\0';\n        }\n        else\n        {\n            w += c;\n        }\n\
    \    }\n    w = string[w.length()+1];\n    w[w.length()] = '\\0';\n    for(int\
    \ i = 0; i < w.length(); i++)\n    {\n        w[i] = toupper(w[i]);\n    }\n \
    \   return w;\n}\n</code>\n<|/ a dscore=2 tags=c++,c |>\n<| c |>\nIt would be\
    \ nice to see a solution that does not require the use of stringstreams\n<|/ c\
    \ |>\n<| c |>\nWhat is \"stringstreams\"? I've never heard of them. Can you link\
    \ to a reference?\n<|/ c |>\n<| c |>\nSadly, `stringstreams` *are* part of the\
    \ Standard Library.\n<|/ c |>\n<| c |>\n: I thought so too until I read this:\
    \ http://stackoverflow.com/questions/2725505/c-string-manipulation\n<|/ c |>\n\
    <| c |>\n: Ok, well the question asked for a solution in C/C++ so I gave you a\
    \ C/C++ answer. :p\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution in C (for fun).\
    \  It relies on strtok().\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include\
    \ <string.h>", "{\n    int n = s.length();\n    string a = s.split(\" \");\n \
    \   string[] b = new string[n];\n    for (int i = 0; i < n; ++i) b[i] = a[i];\n\
    \    return b;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi Kevin, Thanks for your\
    \ reply. Yes I missed out on that part earlier, but I have edited my question,\
    \ could you please have a look at it once again?\n<|/ c |>\n<| a dscore=0 |>\n\
    In your code, you try to find an index in the string array that matches the number\
    \ given, and you get the error in the title that you mentioned.\nIf your input\
    \ is \"hello,world,how,are,you,doing?\", then your program will print out \"hello,world\"\
    .\nWhat you need is to split the string at every comma ','. And then loop over\
    \ all the words, and print only those that have no space in the beginning or in\
    \ the end.\n<|/ a tags=string,split,arrays,c# |>\n<| c |>\nHi Ajay, I have edited\
    \ the question, could you please have a look once again?\n<|/ c |>\n<| c |>\n\
    It would help if you add an example input with expected output.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nYou cannot use string[] splitted[] = s.Split(','); because that\
    \ splitted is never initialized.\nUse string[] splitted[] = s.Split(','); to initialize\
    \ splitted array.\nThen use foreach loop to split each word in splitted and print\
    \ them.\n<code>\nstring[] splitted[] = s.Split(',');\nforeach (string word in\
    \ splitted)\n{\n   Console.WriteLine(word);\n}\n</code>\n<|/ a tags=string,split,arrays,c#\
    \ |>\n<| c |>\nHi Ajay, I have edited the question, could you please have a look\
    \ once again?\n<|/ c |>\n<| c |>\nYou want to print `word` instead of `splitted`.\n\
    <|/ c |>\n<| a tags=string,split,arrays,c# |>\nThe simple way to solve this problem\
    \ would be by using a for loop to split all characters in string s and then print\
    \ them one by one. You could use the following code. \n<code>\nclass Program\n\
    {\n    static void Main(string[] args)\n    {\n        string input = \"Hello,\
    \ my name is Tom\";\n        string[] splittedInput = input.Split(',');", "{\n\
    \    vector<string> vec;\n    vector<string>::iterator itr;\n    vector<string>\
    \ words;\n    \n    int npos = 0;\n    int i = 1;\n    while(i <= s.length())\n\
    \    {\n        string temp = s.substr(0,i-1);\n        string last;\n       \
    \ itr = find(vec.begin(), vec.end(), temp);\n        \n        if (itr != vec.end())\n\
    \        {\n            last = itr->substr(itr->length()-1);\n            last\
    \ = last.substr(0,last.length()-1);\n            itr->clear();\n            vec.erase(itr);\n\
    \        }\n        else\n        {\n            vec.push_back(temp);\n      \
    \  }\n        ++i;\n    }\n    \n    for (vector<string>::iterator itr = vec.begin();\
    \ itr != vec.end(); ++itr)\n    {\n        string temp = *itr;\n        \n   \
    \     itr = find(words.begin(), words.end(), temp);\n        if (itr != words.end())\n\
    \        {\n            itr->clear();\n        }\n        else\n        {\n  \
    \          words.push_back(temp);\n        }\n    }\n    \n    return words;\n\
    }", "{\n    string[] arr = s.Split(new char[]{' ', '\\n'}, StringSplitOptions.RemoveEmptyEntries);\n\
    \    List<string> str = new List<string>();\n    foreach(string i in arr)\n  \
    \  {\n        str.Add(i.Trim());\n    }\n    arr = str.ToArray();\n    return\
    \ arr;\n}", "{\n    string[] result;\n    string word = \"\";\n    int i;\n  \
    \  \n    std.string[] split = s.split(\" ,\");\n    \n    for(i = 0; i < split.length;\
    \ ++i)\n    {\n        word = \"\";\n        \n        if(split[i].length() >\
    \ 0)\n        {\n            word = split[i];\n            split[i] = \"\";\n\
    \        }\n        \n        split[i] = word;\n    }\n    \n    result = split;\n\
    \    \n    return result;\n}\n</code>\nIt is not the best solution but it is one\
    \ of the fastest. I've tried it on my machine and you can see how the program\
    \ performs under certain conditions (I ran it several times using a few different\
    \ testcases). You can see my testing results in the image below:\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n//using STL vectors you can achieve this\n#include<iostream>\n\
    #include<vector>\n#include<algorithm>\nusing namespace std;", "{\n    return s.split(',');\n\
    }\n/*", "{\n    string[] result;\n    bool comma = false;\n    bool space = false;\n\
    \    int count = 0;\n    foreach (char c in s) {\n        if (isspace(c)) {\n\
    \            if (comma) {\n                space = true;\n            }\n    \
    \        comma = false;\n        } else if (c == '\\'') {\n            if (comma)\
    \ {\n                space = true;\n            }\n            comma = false;\n\
    \            space = false;\n        } else if (c == '[') {\n            if (comma)\
    \ {\n                space = true;\n            }\n            comma = true;\n\
    \            space = false;\n        } else if (c == ']') {\n            if (comma)\
    \ {\n                space = true;\n            }\n            comma = false;\n\
    \            space = false;\n        } else {\n            if (comma) {\n    \
    \            comma = false;\n            }\n            if (space) {\n       \
    \         space = false;\n            }\n            if (count < 10) {\n     \
    \           result[count++] = c;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\nAnd this is what I have done for you:\n<code>\n/*", "{\n\
    \    string[] wordslist = new string[20];\n    string[] words = s.Split(',');\n\
    \    for (int i = 0; i < words.Length; i++) {\n        wordslist[i] = words[i].Trim();\n\
    \    }\n    return wordslist;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,c#\
    \ dscore=1 |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.IO;", "{\n    // TODO: Implement\
    \ me!\n    var r : Array<_> = s.split_characters(\" \");\n    return r;\n}", "{\n\
    \    return std.string.toArray(s);\n}", "{\n    string[] ret = new string[s.length()];\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == ',')\n   \
    \     {\n            for(int j = 0; j < s.length() - i; j++)\n            {\n\
    \                if(s[j] == ',')\n                {\n                    ret[j]\
    \ = ret[j].trim();\n                    break;\n                }\n          \
    \  }\n        }\n        else\n        {\n            ret[i] = ret[i].trim();\n\
    \        }\n    }\n    return ret;\n}\n</code>\n<|/ a tags=c#,.net |>\n<| a dscore=0\
    \ |>\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.IO;", "{\n    string[] array;\n    bool is_comma;\n\
    \    int count;\n    char c;\n    int i = 0;\n    int j = 0;\n    int last_comma\
    \ = -1;\n    int len = s.length();\n    array = new string[len];\n    if (len\
    \ == 0)\n        return array;\n    for (; j < len; j++) {\n        c = s.at(j);\n\
    \        if (is_comma = (c == ',')) {\n            count = j - last_comma;\n \
    \           array[last_comma] = \"\";\n            for (i = last_comma + 1; i\
    \ < j; i++) {\n                array[count] += s.at(i);\n            }\n     \
    \       last_comma = j;\n        }\n        else\n            array[count] +=\
    \ s.at(j);\n    }\n    return array;\n}\n</code>\n<|/ a tags=c++,arrays |>\n<|\
    \ c |>\nPlease add a description of the solution in your answer. Just saying \"\
    try this\" is not really helpful.\n<|/ c |>\n<| c |>\nThank you, I'm new to stack\
    \ overflow so I'm not quite used to it. I am new to programming in general and\
    \ this is my first stack overflow question. Thank you for the advice.\n<|/ c |>\n\
    <| c |>\nYou should try to understand this code, not just copy and paste it. This\
    \ code is really important to learn, so try to understand it before you copy/paste.\n\
    <|/ c |>\n<| c |>\nI understand the code and how it works but I'm still a novice\
    \ and still trying to understand how it works.\n<|/ c |>\n<| a tags=c++,arrays\
    \ dscore=0 |>\n<code>\n#include <iostream>\n#include <string>", "{\n    int[]\
    \ positions = new int[s.length()];\n    for(auto i : positions) positions[i]=i;",
  "{\n    string[] result = new string[s.length()];\n    for(int i = 0; i < s.length();\
    \ i++)\n        result[i] = s.substr(i, 1);\n    return result;\n}", "{\n    string\
    \ words[] = s.Split(',');\n    return words;\n}\n/*", "{\n    string[] words =\
    \ new string[100];\n    \n    int index = 0, len = s.length();\n    for(; index\
    \ < len; index++)\n    {\n        if(s[index] == ' ')\n        {\n           \
    \ words[index] = \"\";\n        }\n        else\n        {\n            words[index]\
    \ += s[index];\n        }\n    }\n    return words;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nIf you have the ability to import 3rd party libraries,\
    \ here's a solution using std.algorithm.string's findInLine.\n<code>\nimport std.algorithm;\n\
    import std.array;", "{\n    string[] words;\n    words = s.Split(\" \");\n   \
    \ return words;\n}\n/*", "{\n    string[] words = new string[1000];\n    string[]\
    \ tokens = s.split(\" \");\n    foreach(string t in tokens)\n    {\n        foreach(char\
    \ a in t)\n        {\n            if(a!=',')\n            {\n                words[words.length-1]+=a;\n\
    \            }\n        }\n        words[words.length-1]+=\", \";\n    }\n   \
    \ return words;\n}\n</code>\n<|/ a tags=c#,function,arrays,string dscore=0 |>\n\
    <| a |>\nI do not know if you have any constraints but this solution might come\
    \ in handy if you can use an Array as a parameter, otherwise, I would advise you\
    \ to use an ArrayList, it is faster and is easier to work with. \nHere we go:\
    \ \n<code>\npublic static String[] SplitStringIntoWords(String inputString)\n\
    {\n    List<String> words = new List<String>();\n    StringBuilder tempString\
    \ = new StringBuilder();\n    StringBuilder tempWord = new StringBuilder();\n\
    \    String[] tokens = inputString.Split(',');", "{\n\tstring word;\n\tstring[]\
    \ wordsArray = new string[100];", "{\n    // write your code here\n    return\
    \ null;\n}", "{\n    // Write your function here!\n    var words = new List<string>();\n\
    \    string word = string.Empty;\n    for (int i = 0; i < s.Length; i++)\n   \
    \ {\n        if (char.IsWhiteSpace(s[i], i, s))\n        {\n            word =\
    \ string.Empty;\n        }\n        else if (char.IsLetter(s[i], i, s))\n    \
    \    {\n            word += s[i];\n        }\n        else\n        {\n      \
    \      words.Add(word);\n            word = s[i];\n        }\n    }\n    return\
    \ words.ToArray();\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\npublic static string\
    \ getStringBetween(string text, string start, string end)\n{\n    int startIndex\
    \ = text.IndexOf(start);\n    if (startIndex == -1)\n    {\n        return string.Empty;\n\
    \    }\n    int endIndex = text.IndexOf(end, startIndex + start.Length);\n   \
    \ if (endIndex == -1)\n    {\n        return string.Empty;\n    }\n    return\
    \ text.Substring(startIndex + start.Length, endIndex - startIndex - start.Length);\n\
    }\n</code>\nUsage:\n<code>\nConsole.WriteLine(getStringBetween(\"Hi, my name is\
    \ John\", \"Hi, my name is \", \"John\"));\n</code>\n<|/ a dscore=2 tags=string,c#\
    \ |>\n<| a tags=string,c# |>\nFor those who are having this problem in 2020.\n\
    My solution is as follows:\n<code>\npublic static List<string> Split(string source)\
    \ \n{\n    List<string> list = new List<string>();\n    var tokens = source.Split('\
    \ ');\n    foreach (var token in tokens) \n    {\n        if (string.IsNullOrEmpty(token))\
    \ \n            continue;\n        list.Add(token);\n    }\n    return list;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhile this code may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/q/114762) of how and why\
    \ this solves the problem would really help to improve the quality of your post,\
    \ and probably result in more up-votes. Remember that you are answering the question\
    \ for readers in the future, not just the person asking now. Please [edit] your\
    \ answer to add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a |>\n<code>\npublic static string getStringBetween(string\
    \ text, string start, string end)\n{\n    int startIndex = text.IndexOf(start);\n\
    \    if (startIndex == -1)\n    {\n        return string.Empty;\n    }\n    int\
    \ endIndex = text.IndexOf(end, startIndex + start.Length);\n    if (endIndex ==\
    \ -1)\n    {\n        return string.Empty;\n    }\n", "{\n    string[] array =\
    \ new string[s.length()];\n    for(int i=0;i<s.length;i++){\n        string x\
    \ = s.Substring(i,1);\n        array[i] = x;\n    }\n    return array;\n}", "{\n\
    \    return s.split(\",\").toArray();\n}", "{\n    int n = 0;\n    int i = 0;\n\
    \    std.typecons.Vec<string> vec = std.typecons.Vec<string>();\n    while(i<s.len)\
    \ \n    {\n        string w;\n        if (s[i]==',')\n        {\n            vec.push_back(w);\n\
    \            n = 0;\n        }\n        else \n        {\n            w = std.conv.to_string(s.at(i));\n\
    \            vec.push_back(w);\n            n++;\n        }\n        i++;\n  \
    \  }\n    return vec.vec;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,c++,string\
    \ |>\n<code>\nstd::string s = \"one, two, three\";\nstd::size_t n = s.length();\n\
    std::vector v(s.begin(), s.end());\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string[]\
    \ w = new string[10000];\n    bool flag = true;\n    int i = 0;\n    string word\
    \ = \"\";\n    string word1 = \"\";\n    for(int x=0;x<s.length();x++)\n    {\n\
    \        if(s[x]==',')\n        {\n            if(i>0 && flag)\n            {\n\
    \                flag = false;\n                w[i - 1] = word;\n           \
    \     word = \"\";\n            }\n            else\n            {\n         \
    \       flag = true;\n            }\n        }\n        else\n        {\n    \
    \        word+=s[x];\n        }\n    }\n    if(flag)\n        w[i] = word;\n \
    \   return w;\n}", "{\n    string[] words = s.split(\" \");\n    return words;\n\
    }", "{\n    string delimiter = \" ,\";\n    int len = s.length();\n    \n    string[]\
    \ words = split(s, delimiter, len);\n    \n    return words;\n}", "{\n    if (s.length()\
    \ == 0)\n        return [];\n    \n    string result = \"\";\n    int j = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == ',')\n\
    \            result+=s.substring(j+1, i);\n        else {\n            result+=s.substring(j+1,\
    \ i);\n            j=i+1;\n        }\n    }\n    \n    string result_rest = \"\
    \";\n    for (int i = 0; i < j; i++) {\n        result_rest += s.substring(i);\n\
    \    }\n    result_rest = s.substring(j, s.length());\n    \n    string[] words_list\
    \ = split(result_rest,\" \");\n    \n    int count = 0;\n    for (int i = 0; i\
    \ < words_list.length; i++) {\n        if (words_list[i] != \"\") {\n        \
    \    count++;\n        }\n    }\n    \n    string result_words = \"[\";\n    for\
    \ (int i = 0; i < count; i++) {\n        result_words += \"'\"+words_list[i]+\"\
    '\";\n        if (i != words_list.length-1) {\n            result_words += \"\
    , \";\n        }\n    }\n    result_words += \"]\";\n    \n    return new string[]\
    \ {result_words};\n}", "{\n    return std.algorithm.split_by_comma(s);\n}", "{\n\
    \    string[] words = new string[10000];\n    for(int i = 0; i < words.length;\
    \ ++i)\n        words[i] = \"\";\n    int count = 0;\n    for(auto c : s)\n  \
    \  {\n        if(c == ',' || c == ' ')\n        {\n            words[count] +=\
    \ c;\n        }\n        else\n        {\n            ++count;\n            words[count]\
    \ = \"\";\n        }\n    }\n    return words;\n}\n</code>\n<|/ a |>\n<| a |>\n\
    <code>\nfunction wordsString($str)\n{\n    $str = explode(\",\",$str);\n    $str\
    \ = str_replace(\"\\\"\", \"\", $str);\n    $strs = explode(\" \",$str);", "{\n\
    \    char[] delimiter = \",\".toCharArray();\n    char[] space = \" \".toCharArray();\n\
    \    string split[] = s.split(delimiter);\n    char[] result = new char[split.length];\n\
    \    int j = 0;\n    for (int i = 0; i< split.length; i++){\n        result[j++]\
    \ = split[i][0];\n        result[j++] = split[i][1];\n        if (split[i].length>2)\
    \ {\n            result[j++] = split[i][2];\n            result[j++] = split[i][3];\n\
    \        }\n    }\n    string[] finalResult = new string[result.length];\n   \
    \ for (int i = 0; i < result.length; i++){\n        finalResult[i] = result[i]\
    \ + space;\n    }\n    return finalResult;\n}", "{\n    string[] words = new string[100];\n\
    \    for(int i=0; i<s.length(); i+=2)\n    {\n        words[s.indexof(s.substring(i,i+2))]=s.substring(i,i+2);\n\
    \    }\n    return words;\n}\n/*\n    Write a function to count the frequency\
    \ of letters in a string.\n    \n    Write a function to get all of the unique\
    \ letters in a string\n    \n    Write a function to get the longest string in\
    \ an array of strings\n    \n    Write a function to get the number of words in\
    \ a string\n    \n    Write a function to get the number of letters in a string\n\
    \    \n    Write a function to get an average of integers in a string\n    \n\
    \    Write a function to get an average of floats in a string\n    \n    Write\
    \ a function to get an average of numbers in a string\n    \n    Write a function\
    \ to get the smallest number in a string\n    \n    Write a function to get the\
    \ largest number in a string\n    \n    Write a function to get a random number\
    \ between two numbers\n    \n    Write a function to get an evenly distributed\
    \ random number\n    \n    Write a function to get an oddly distributed random\
    \ number\n    \n    Write a function to get an even or odd number of a number\n\
    \    \n    Write a function to get a random number\n    \n    Write a function\
    \ to get an evenly distributed random number\n    \n    Write a function to get\
    \ an oddly distributed random number\n    \n    Write a function to get an even\
    \ or odd number of a number\n    \n    Write a function to get a random number\n\
    \    \n    Write a function to get a random number\n    \n    Write a function\
    \ to get the sum of a list\n    \n    Write a function to get a random element\
    \ from a list\n    \n    Write a function to get a list of even or odd numbers\n\
    \    \n    Write a function to get the average of a list\n    \n    Write a function\
    \ to get the maximum of a list\n    \n    Write a function to get the minimum\
    \ of a list\n    \n    Write a function to get the median of a list\n    \n  \
    \  Write a function to get the sum of a list\n    \n    Write a function to get\
    \ a random element from a list\n    \n    Write a function to get a sorted list\n\
    \    \n    Write a function to sort a list\n    \n    Write a function to reverse\
    \ a list\n    \n    Write a function to get a random element from a list\n   \
    \ \n    Write a function to get a sorted list\n    \n    Write a function to sort\
    \ a list\n    \n    Write a function to reverse a list\n    \n    Write a function\
    \ to get a random element from a list\n    \n    Write a function to get a sorted\
    \ list\n    \n    Write a function to sort ", "{\n    string[] res = new string[100];\n\
    \    string tmp = \"\";\n    int startIndex = 0;\n    for(int i = 0; i < s.length();\
    \ i++) \n    {\n        if(s[i].isSpace == false) \n        {\n            tmp\
    \ += s[i];\n        }\n        else \n        {\n            res[startIndex] =\
    \ tmp;\n            tmp = \"\";\n            res[startIndex] += s[i];\n      \
    \      startIndex++;\n        }\n    }\n    res[startIndex] = tmp;\n    return\
    \ res;\n}\n</code>\n<|/ a |>\n<| a tags=split,string,c#,visual-studio-2008 |>\n\
    <code>\npublic static string[] split(string str)\n{\n    List<string> ret = new\
    \ List<string>();\n    int index = str.IndexOf(',');\n    while (index != -1)\n\
    \    {\n        ret.Add(str.Substring(0, index));\n        index = str.IndexOf(',',\
    \ index + 1);\n    }\n    return ret.ToArray();\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nJust to add onto Dave's answer, this extension method will also split\
    \ on space and comma:\n<code>\npublic static string[] SplitString(this string\
    \ input)\n{\n    string[] result = input.Split(',', ' ');\n    return result.ToArray();\n\
    }\n</code>\n<|/ a tags=split,string,c#,visual-studio-2008 dscore=2 |>\n<| c |>\n\
    Nice :) I like that you can use a lambda function in .Split\n<|/ c |>\n<| a tags=split,string,c#,visual-studio-2008\
    \ |>\n<code>\nclass Program\n    {\n        static void Main(string[] args)\n\
    \        {\n            string s = \"My name is Bob\";\n            string[] words\
    \ = s.Split(' ');\n            foreach (string word in words)\n            {\n\
    \                Console.WriteLine(word);\n            }\n            Console.ReadLine();\n\
    \        }\n    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the quick response!\n\
    <|/ c |>\n<| c |>\nThis will only split on spaces.  It won't handle commas or\
    \ other punctuation.\n<|/ c |>\n<| c |>\nHis requirement was \"comma separated\"\
    .\n<|/ c |>\n<| a tags=split,string,c#,visual-studio-2008 |>\n<code>\n    public\
    \ static string[] SplitString(this string input)\n    {\n        string[] result\
    \ = input.Split(',');\n        return result.ToArray();\n    }\n</code>\n<|/ a\
    \ dscore=1 |>\n<|", "{\n    string words[] = s.split(\",\");\n    List<string>\
    \ wordList = new List<string>();\n    for (int i=0; i<words.length; i++)\n   \
    \ {\n        wordList.Add(words[i]);\n    }\n    return wordList.ToArray();\n\
    }\n</code>\n<|/ a |>\n<| a |>\nA little late, but I recently had this assignment\
    \ and came up with the following:\n<code>\npublic static bool isWord(string input)\n\
    {\n    if (input == null) throw new ArgumentNullException(\"input\");\n    if\
    \ (input.Length == 0) return false;", "{\n    int[] result = new int[100];\n \
    \   string[] words = new string[100];\n    string[] temp = new string[100];\n\
    \    for(int i = 0; i < words.length; i++) \n    {\n        temp[i] = words[i];\n\
    \    }\n    for(int i = 1; i < words.length; i++) \n    {\n        int j = i;\n\
    \        while(j != 0 && temp[j-1] != \",\" && temp[j-1] != \" \")\n        {\n\
    \            j--;\n        }\n        if(temp[j-1] == \",\" || temp[j-1] == \"\
    \ \") \n        {\n            words[i] = temp[i];\n            temp[j] = \"\"\
    ;\n            for(int k = i; k > 0; k--) \n            {\n                temp[k-1]\
    \ = temp[k];\n            }\n            i--;\n            while(temp[j-1] !=\
    \ \"\") \n            {\n                j--;\n            }\n            if(j\
    \ > 0) \n            {\n                temp[0] = temp[0];\n            }\n  \
    \      }\n    }\n    for(int i = 0; i < result.length; i++) \n    {\n        result[i]\
    \ = words[i].Length;\n    }\n    return words;\n}\n</code>\n<|/ a tags=string,algorithm,arrays\
    \ |>\n<| a |>\n<code>\nvar sentence = \"one,two,three,four,five,six,seven,eight,nine\"\
    ;\nvar result = sentence.Split(',').Select((s,i) => new {Word = s, Index = i}).GroupBy(x\
    \ => x.Index / 2).Select(x => x.First()).ToArray();\n</code>\n<|/ a tags=string,algorithm,arrays\
    \ dscore=1 |>\n<| a dscore=1 |>\nYou can use this to split the string:\n<code>\n\
    string s = \"one,two,three,four,five,six,seven,eight,nine\";\nstring[] splitted\
    \ = s.Split(new char[] {',',';'});\n</code>\nthen you can sort them by looping\
    \ through the array:\n<code>\nList<string> sorted = new List<string>();\nsorted.Add(splitted[1]);\n\
    sorted.Add(splitted[2]);\nsorted.Add(splitted[3]);\nsorted.Add(splitted[4]);\n\
    sorted.Add(splitted[5]);\nsorted.Add(splitted[6]);\nsorted.Add(splitted[7]);\n\
    sorted.Add(splitted[8]);\nsorted.Add(splitted[9]);\n</code>\n<|/ a tags=string,algorithm,arrays\
    \ |>\n<| a tags=string,algorithm,arrays |>\nI think you could use a dictionary\
    \ and use LINQ to split the string into an array.\n<code>\nstring s = \"one,two,three,four,five,six,",
  "{\n    int pos = 0;\n    int index = 0;\n    \n    string[] words = null;\n   \
    \ \n    bool inQuotes = false;\n    bool inComma = false;\n    bool inWhite =\
    \ false;\n    \n    while(true)\n    {\n        pos = s.find_first_of(',', pos);\n\
    \        if(pos == string::npos) break;\n        \n        index = s.find_first_of(',',\
    \ pos);\n        if(index == string::npos) index = s.find_first_of(' ', pos);\n\
    \        \n        string word = s.substr(pos, index - pos);\n        \n     \
    \   if(word.find_first_of('\\'') != string::npos)\n        {\n            if(!inQuotes)\n\
    \            {\n                inQuotes = true;\n                inComma = false;\n\
    \                inWhite = true;\n                words = array [word];\n    \
    \        }\n            else\n            {\n                if(!inWhite)\n  \
    \              {\n                    inWhite = true;\n                    words\
    \ = array [word];\n                }\n                else\n                {\n\
    \                    if(!inComma)\n                    {\n                   \
    \     inComma = true;\n                        words = array [word];\n       \
    \             }\n                    else\n                    {\n           \
    \             inWhite = false;\n                        words = array [word];\n\
    \                    }\n                }\n            }\n        }\n        else\n\
    \        {\n            if(inWhite)\n            {\n                words = array\
    \ [word];\n                inWhite = false;\n            }\n            else\n\
    \            {\n                words = array [word];\n            }\n       \
    \ }\n        \n        pos = index + 1;\n    }\n    \n    return words;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI made a mistake in the code I posted, it should be fixed now\
    \ (the line `if(!inQuotes)` was wrongly placed). This code seems to work perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nI made a mistake in the code I posted, it should\
    \ be fixed now (the line `if(!inQuotes)` was wrongly placed). This code seems\
    \ to work perfectly for me.\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution without\
    \ using split (maybe someone can post a better one ?) \n<code>\n public static\
    \ String getWords(String s, char delimiter)\n{\n    String[] words = new String[100];\n\
    \    int pos;\n    int index;\n    int count = 0;\n    int i = 0;\n    int j =\
    \ 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    boolean inQuotes = false;\n\
    \    boolean inComma = false;\n    boolean inWhite = false;\n    while (true)\n\
    \    {\n        index = s.indexOf(delimiter, pos", "{\n    return s.split(\",\"\
    );\n}", "{\n\tstring[] words;\n\tforeach(string word in split(s))\n\t{\n\t\tforeach(string\
    \ x in split(word))\n\t\t{\n\t\t\twords.push_back(x);\n\t\t}\n\t}\n\treturn words;\n\
    }\n/*", "{\n    string[] words = new string[40];\n    int wordCount = 0;\n   \
    \ int splitPosition = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n  \
    \      if (s[i] == ',' || s[i] == ' ')\n        {\n            words[wordCount]\
    \ = s.substr(splitPosition, i - splitPosition);\n            wordCount++;\n  \
    \          splitPosition = i + 1;\n        }\n    }\n    words[wordCount] = s.substr(splitPosition,\
    \ s.length() - splitPosition);\n    return words;\n}", "{\n    return s.split(\"\
    ,\").toArray(s => s.trim().toLower());\n}\n</code>\n<|/ a tags=string,arrays,java,split\
    \ dscore=0 |>\n<| a |>\nHere is solution\n<code>\npublic String[] getWords(String\
    \ sentence) {\n    String[] words = sentence.split(\" \");\n    return words;\n\
    }\n</code>\n<|/ a tags=string,arrays,java,split dscore=0 |>\n<| a dscore=0 tags=string,arrays,java,split\
    \ |>\n<code>\npublic static void main(String[] args) {\n    String str = \"Hello,My\
    \ name is John and I am a student from Nepal.\";\n    String[] str = str.split(\"\
    ,\");\n    for(String str1 : str)\n        System.out.println(str1);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\nHere is the solution\n<code>\n\
    String input = \"Hello,My name is John and I am a student from Nepal.\";\nString[]\
    \ splitString = input.split(\",\");\nfor (String splitString : splitString) {\n\
    \    System.out.println(splitString);\n}\n</code>\nOutput:\n<code>\nHello\n,\n\
    My\nname\nis\nJohn\nand\nI\nam\na\nstudent\nfrom\nNepal.\n</code>\n<|/ a tags=string,arrays,java,split\
    \ |>\n<| a dscore=0 tags=string,arrays,java,split |>\nYou can use,\n<code>\nString[]\
    \ splitted = s.split(\" \");\n</code>\n<|/ a |>\n<| a tags=string,arrays,java,split\
    \ |>\n<code>\npublic static void main(String[] args) {\n    String s = \"Hello,My\
    \ name is John and I am a student from Nepal.\";\n    String[] splittedStrings\
    \ = s.split(\"\\\\s+\");\n    for(String splittedString : splittedStrings)\n \
    \       System.out.println(splittedString);\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a |>\n<code>\nString[] splittedStrings = s.split(\"\\\\s+\");\n</code>\n<|/\
    \ a dscore=0 tags=string,arrays,java,split |>\n<| a tags=string,arrays,java,split\
    \ dscore=0 |>\n<code>\n String str = \"Hello,My name is John and I am a student\
    \ from Nepal.\";\n String[] arr = str.split(\"\\\\s+\");\n</code>\n<|/ a |>\n\
    <| a tags=string,arrays,java,split |>", "{\n  string[] words=new string[100];\n\
    \  int index=0;\n  string[] words=s.Split(\" ,\");\n  for(int i=0;i<words.length;i++)\n\
    \  {\n    words[i]=words[i].Trim();\n    words[i]=words[i].TrimStart(',');\n \
    \   words[i]=words[i].TrimEnd(',');\n  }\n  return words;\n}\n/*", "{\n    string[]\
    \ result;\n    char[] delimiters = { ',' };\n    int lastIndex = 0, currentIndex\
    \ = 0;\n    \n    while (currentIndex < s.length())\n    {\n        \n       \
    \ if (s[currentIndex] == ',')\n        {\n            string[] tokens = new string[lastIndex\
    \ - currentIndex + 1];\n            char[] delimiters = { ',' };\n           \
    \ int lastIndex = currentIndex + 1;\n            \n            currentIndex =\
    \ lastIndex;\n            \n            while (currentIndex < s.length())\n  \
    \          {\n                if (s[currentIndex] == ',')\n                {\n\
    \                    currentIndex = lastIndex;\n                    break;\n \
    \               }\n                \n                tokens[lastIndex - currentIndex]\
    \ = s[currentIndex];\n                currentIndex++;\n            }\n       \
    \     \n            currentIndex = lastIndex;\n            \n            while\
    \ (currentIndex < s.length())\n            {\n                if (s[currentIndex]\
    \ == '.' && s[currentIndex + 1] != ',')\n                {\n                 \
    \   currentIndex = lastIndex;\n                    break;\n                }\n\
    \                \n                tokens[lastIndex - currentIndex] = s[currentIndex];\n\
    \                currentIndex++;\n            }\n            \n            result\
    \ = tokens;\n            break;\n        }\n        \n        currentIndex++;\n\
    \    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 tags=split,java,arrays,string\
    \ |>\n<| a dscore=0 |>\nYou were very close. Instead of using string split you\
    \ can use string indexOf. Something like:\n<code>\nString test = \"one two three\"\
    ;", "{\n    \n    string[] res = new string[s.length()];\n    int j = 0;\n   \
    \ int k = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (i ==\
    \ 0 || i == s.length() - 1 || s[i] == ',')\n        {\n            res[j++] =\
    \ \"\";\n        }\n        else\n        {\n            res[j++] = s[i];\n  \
    \      }\n    }\n    return res;\n}\n</code>\n<|/ a tags=c#,arrays,string |>\n\
    <| a dscore=2 |>\n<code>\nstring str = \"Hello, world!\";\nstring[] stringArray\
    \ = str.Split(',');\n</code>\n<|/ a tags=c#,arrays,string |>\n<| a tags=c#,arrays,string\
    \ dscore=2 |>\nIf you're using .Net 4.5, you can use Linq to do the same thing\
    \ in a single line:\n<code>\nstring[] arrayOfWords = myString.Split(',');\n</code>\n\
    <|/ a |>\n<| c |>\nI used this in .Net 4.5 just fine but was getting exceptions\
    \ on my 4.0 machine.  Turns out I was doing a .ToString() on a string which was\
    \ causing the issue.  I didn't need to convert myString because it already was\
    \ a string.\n<|/ c |>\n<| a tags=c#,arrays,string |>\n<code>\nstring str = \"\
    Hello, world!\";\nstring[] stringArray = str.Split(',');\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\nTry this:\n<code>\nstring myString = \"Hi,my,name,is,John\"\
    ;\nstring[] stringArray = myString.Split(',');\n</code>\n<|/ a tags=c#,arrays,string\
    \ |>\n<| c |>\nHow is this different from what is already posted?\n<|/ c |>\n\
    <| c |>\nNothing different except the variable name :P\n<|/ c |>\n<| c |>\nJust\
    \ a naming convention. It doesn't make it any different.\n<|/ c |>\n<| c |>\n\
    , this is exactly what `split` does. Maybe you misread `Split` as `SplitString`?\
    \ :-)\n<|/ c |>\n<| c |>\n- It doesn't make a difference to what the OP has already\
    \ done. He was using different variable names (`myString` and `sArray`) which\
    \ would make it clear that he was splitting a string variable.\n<|/ c |>\n<| a\
    \ dscore=1 tags=c#,arrays,string |>\nUse string.Split\n<code>\nstring test = \"\
    Hi,my", "{\n    int len = s.length();\n    string[] result;\n    \n    if (len\
    \ < 1) {\n        result = new string[1];\n        result[0] = \"\";\n    } else\
    \ {\n        result = new string[len];\n        for (int i = 0; i < len; i +=\
    \ 1) {\n            string word = s.substring(i, i + 1);\n            \n     \
    \       int index = words.findIndex(w => w == word);\n            if (index !=\
    \ -1) {\n                result[i] = words[index];\n            } else {\n   \
    \             result[i] = word;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a tags=c#,arrays dscore=1 |>\n<| a tags=c#,arrays dscore=0\
    \ |>\nI suggest you to use a list to add the items. In your case you could use\
    \ a dictionary to hold the words and an int to hold the position. Something like\n\
    <code>\npublic List<string> Split(string s)\n{\n     List<string> res = new List<string>();\n\
    \     StringBuilder sb = new StringBuilder(s);\n     int pos = 0;\n     Dictionary<string,\
    \ int> dic = new Dictionary<string, int>();\n     while (sb.Length > 0)\n    \
    \ {\n         string word = sb.Remove(0, 1).ToString();\n         if (!dic.ContainsKey(word))\n\
    \         {\n             dic.Add(word, pos);\n             res.Add(word);\n \
    \        }\n         else\n         {\n             int position;\n          \
    \   if (dic.TryGetValue(word, out position))\n             {\n               \
    \  dic.Remove(word);\n                 dic.Add(word, position);\n            \
    \     res.RemoveAt(position);\n                 res.Add(word);\n             }\n\
    \         }\n         sb.Remove(0, 1);\n     }\n     return res;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI do not have access to List<T> or Dictionary<T>.  I can only\
    \ use arrays, not ArrayList.  And I am not allowed to use any other type of collection...\n\
    <|/ c |>\n<| a tags=c#,arrays |>\nHere's my version with a bit of refactoring.\
    \ It's a little more concise but should perform better. \nThe performance may\
    \ not be good enough for you, but if you're looking for something that works as\
    \ fast as possible, you'll probably need this solution. It basically parses the\
    \ string char by char and keeps track of which word you're on and which chars\
    \ you've processed (index).\n<code>\npublic static string[] Split(string s)\n\
    {\n    string[] ret = new string[s.Length];", "{\n    string[] arr=s.split(\"\
    , \");\n    return arr;\n}\n/*", "{\n    // Remove spaces if they are there.\n\
    \    string clean = s.replace(\", \",\",\");\n    string clean1 = clean.replace(\"\
    , \",\",,\");\n    string clean2 = clean1.replace(\", \",\",,\");\n    string\
    \ clean3 = clean2.replace(\", \",\",,\");\n    string clean4 = clean3.replace(\"\
    , \",\",,\");\n    string clean5 = clean4.replace(\", \",\",,\");\n    string\
    \ clean6 = clean5.replace(\", \",\",,\");\n    string clean7 = clean6.replace(\"\
    , \",\",,\");\n    string clean8 = clean7.replace(\", \",\",,\");\n    string\
    \ clean9 = clean8.replace(\", \",\",,\");\n    string clean10 = clean9.replace(\"\
    , \",\",,\");\n    string clean11 = clean10.replace(\", \",\",,\");\n    string\
    \ clean12 = clean11.replace(\", \",\",,\");\n    string clean13 = clean12.replace(\"\
    , \",\",,\");\n    string clean14 = clean13.replace(\", \",\",,\");\n    string\
    \ clean15 = clean14.replace(\", \",\",,\");\n    string clean16 = clean15.replace(\"\
    , \",\",,\");\n    string clean17 = clean16.replace(\", \",\",,\");\n    string\
    \ clean18 = clean17.replace(\", \",\",,\");\n    string clean19 = clean18.replace(\"\
    , \",\",,\");\n    string clean20 = clean19.replace(\", \",\",,\");\n    string\
    \ clean21 = clean20.replace(\", \",\",,\");\n    string clean22 = clean21.replace(\"\
    , \",\",,\");\n    string clean23 = clean22.replace(\", \",\",,\");\n    string\
    \ clean24 = clean23.replace(\", \",\",,\");\n    string clean25 = clean24.replace(\"\
    , \",\",,\");\n    string clean26 = clean25.replace(\", \",\",,\");\n    string\
    \ clean27 = clean26.replace(\", \",\",,\");\n    string clean28 = clean27.replace(\"\
    , \",\",,\");\n    string clean29 = clean28.replace(\", \",\",,\");\n    string\
    \ clean30 = clean29.replace(\", \",\",,\");\n    string clean31 = clean30.replace(\"\
    , \",\",,\");\n    string clean32 = clean31.replace(\", \",\",,\");\n    string\
    \ clean33 = clean32.replace(\", \",\",,\");\n    string clean34 = clean33.replace(\"\
    , \",\",,\");\n    string clean35 = clean34.replace(\", \",\",,\");\n    string\
    \ clean36 = clean35.replace(\", \",\",,\");\n", "{\n    // Your code here\n  \
    \  string delimiter = \",\";\n    string words[] = s.split(delimiter);\n    return\
    \ words;\n}\n</code>\n<|/ a tags=string,java,split dscore=3 |>\n<| c |>\nThis\
    \ looks pretty good, but I can't get it to work, I still get a \"method split\
    \ is not defined for the type string\" error. Also, why does it return an array\
    \ of chars instead of an array of strings?\n<|/ c |>\n<| c |>\nSorry about that.\
    \ I fixed the typo. It was a typo when I was copying and pasting it. I fixed it\
    \ now. And the return type is actually an array of strings. It just so happens\
    \ that the method returns an array of characters. If you wanted to return an array\
    \ of strings instead, you could do so by saying string[] words[] = s.split(delimiter);\n\
    <|/ c |>\n<| c |>\nThanks, that worked. Unfortunately, I'm still getting a strange\
    \ array in return, and I'm not sure why. It looks like it returns an array of\
    \ chars. Any ideas why that might be? Here is how I am testing the function if\
    \ it helps:", "{\n    int pos = 0;\n    string[] result = new string[s.length()];\n\
    \    string[] temp = new string[s.length()];\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s.substr(pos, 1) == \",\") {\n            temp[i - pos]\
    \ = s.substr(0, i);\n            pos = i + 1;\n        }\n    }\n    for (int\
    \ i = 0; i < temp.length; i++) {\n        result[i] = temp[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n    string s = \"Hello,\
    \ World\";\n    string s[] = s.Split(',');\n</code>\n<|/ a dscore=0 tags=c# |>\n\
    <| c |>\nCode-only answers are discouraged. Please click on edit and add some\
    \ words of explanation as to why your code is the way it is.\n<|/ c |>\n<| a tags=c#\
    \ dscore=0 |>\n<code>\nstring textToSplit = \"Hello, World\";\nstring[] stringArray\
    \ = textToSplit.Split(',');\n</code>\nThe above code will split the string by\
    \ commas.\n<|/ a |>\n<| c |>\nCode-only answers are discouraged. Please click\
    \ on edit and add some words of explanation as to why your code is the way it\
    \ is.\n<|/ c |>\n<| a dscore=0 |>\nI believe your question can be divided into\
    \ two parts:\n1. How to split string into words?\nAns: You can use string.split\
    \ or char.Split function\n<code>\nvar words = myString.Split(',');\n</code>\n\
    2. How to print array values in new line\nAns: You can use foreach loop as below\n\
    <code>\nforeach(var word in words)\n{\n   Console.WriteLine(word);\n}\n</code>\n\
    <|/ a tags=c# |>\n<| a tags=c# |>\nstring [] str = text.Split(' ');\n<|/ a dscore=0\
    \ |>\n<| a tags=c# |>\n<code>\nstatic void Main(string[] args)\n    {\n      \
    \  string s = \"Hi, my name is John\";\n        string[] words = s.Split(',');\n\
    \        foreach(string word in words)\n        {\n            Console.WriteLine(word);\n\
    \        }\n        Console.ReadLine();\n    }\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 tags=c# |>\n<code>\nstring s = \"Hi, my name is John\";\nstring[]\
    \ words = s.Split(' ');\n</code>\nor \n<code>\nstring s = \"Hi, my name is John\"\
    ;\nstring[] words = s.Split(',');\n</code>\n<|/ a |>\n<| a tags=", "{\n    string[]\
    \ strings = new string[100];\n    strings = split_string(s, \",\");\n    strings\
    \ = split_string(s, \"and\");\n    return strings;\n}\n/*", "{\n    string[] result\
    \ = new string[100];\n    \n    int index = 0;\n    string word = string.Empty;\n\
    \    \n    for (int i = 0; i < s.Length; i++)\n    {\n        if (!char.IsWhiteSpace(s[i])\
    \ && !char.IsComma(s[i]))\n        {\n            word = word + s[i];\n      \
    \      result[index++] = word;\n        }\n        else if (char.IsWhiteSpace(s[i]))\n\
    \        {\n            if (word.Length > 0)\n            {\n                result[index++]\
    \ = word;\n            }\n            word = string.Empty;\n        }\n      \
    \  else\n        {\n            if (word.Length > 0)\n            {\n        \
    \        result[index++] = word;\n            }\n            word = string.Empty;\n\
    \        }\n    }\n    \n    result[index] = word;\n    return result;\n}", "{\n\
    \    string[] words = { };\n    foreach(char c in s) \n    {\n        if( c ==\
    \ ',')\n        {\n            foreach(string word in words) \n            {\n\
    \                words[words.Length - 1] += \" \" + c;\n            }\n      \
    \      words = { };\n        }\n        else\n        {\n            foreach(string\
    \ word in words) \n            {\n                words[words.Length - 1] += c;\n\
    \            }\n            words = { };\n        }\n    }\n    return words;\n\
    }\n</code>\n<|/ a tags=c#,c++,string |>\n<| c |>\nThe function `split` should\
    \ use \"return words;\" at the end so that it returns an array containing the\
    \ words. I edited the answer to reflect this.\n<|/ c |>\n<| c |>\nThe function\
    \ `split` should be renamed to `words_string` since it does not split words.\n\
    <|/ c |>\n<| c |>\nYou shouldn't use `Split()` on a comma, period.\n<|/ c |>\n\
    <| c |>\nHe was splitting words and then adding a space to each word.\n<|/ c |>\n\
    <| a dscore=3 tags=c#,c++,string |>\nI know this has already been answered, but\
    \ here is my solution in C#:\n<code>\nstring source = \"One two three four\";\n\
    string result = String.Join(\" \", source.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));\n\
    </code>\n<|/ a |>\n<| c |>\nFor C# 6, you can use the new string interpolation\
    \ syntax: `string result = $\"{source.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)}\"\
    ;`\n<|/ c |>\n<| a |>\n<code>\nstring[] SeparatedString(string str)\n{\n    string[]\
    \ strArray = new string[str.Split(',').Length];\n    for(int i = 0; i < str.Split(',').Length;\
    \ i++)\n    {\n        strArray[i] = str.Split(',')[i];\n    }\n    return strArray;\n\
    }\n</code>\n<|/ a tags=c#,c++,string dscore=3 |>\n<| c |>\nThis is very close,\
    \ but I wanted to split the string into individual words. Thanks.\n<|/ c |>\n\
    <| c |>\nThis would do that. `str.Split(',')` returns an array, and `String.Join`\
    \ takes an array of strings. So the for loop splits each string in the array by\
    \ commas, creating an array, then joins the array back together with spaces.\n\
    <|/ c |>\n", "{\n    var arr = s.Split(',');\n    return arr.ToArray<string>();\n\
    }", "{\n    string[] result=new string[s.Split(',').Length];\n    for(int i=0;\
    \ i<s.Split(',').Length; i++)\n    {\n        result[i]=s.Split(',')[i];\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI did some testing\
    \ and found that string split doesn't like commas inside of double quotes, so\
    \ I fixed it using string.Replace and string.Split:\n<code>\nstring[] GetWordsFromString(string\
    \ inputString)\n{\n    string[] result = inputString.Replace(\"\\\"\", string.Empty)\n\
    \                                     .Split(',');\n    return result;\n}\n</code>\n\
    <|/ a tags=c# |>\n<| c |>\nThe only problem with this is that it replaces double\
    \ quotes with spaces, so \"Hello,\" would become \"Hello \"\n<|/ c |>\n<| a |>\n\
    <code>\nstring[] str=str1.Split(',');\nvar result=new List<string>();\nforeach\
    \ (var i in str)\n{\n    var split=i.Split(' ');\n    var word=split[0];\n   \
    \ if (split.Count() > 1)\n    {\n        foreach (var a in split)\n        {\n\
    \            result.Add(a+\" \");\n        }\n    }\n    else\n    {\n       \
    \ result.Add(word+\" \");\n    }\n}", "{\n    int length = s.length();\n    string[]\
    \ array = new string[length];\n    char lastChar = 0;\n    int i = 0;\n    char\
    \ c;\n    while(i < length){\n        c = s[i];\n        if (c == ',' || c ==\
    \ ' '){\n            if (lastChar == ',') array[i-++] = null;\n            array[i\
    \ - 1] = s.substring(0,i);\n            i = i - 1;\n        } else {\n       \
    \     array[i - 1] = s.substring(0,i);\n            i = i - 1;\n        }\n  \
    \      lastChar = c;\n    }\n    return array;\n}\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| a dscore=1 |>\nThe fastest way would be to split the string by the spaces,\
    \ then split each resulting string by the commas, then rejoin them.\n<code>\n\
    var result = string.Join(\",\", \n    string.Split(\"One, two, three, four, five,\
    \ six\", \",\").Select(x => string.Split(\",\", x)));\n</code>\n<|/ a tags=arrays,c#\
    \ |>\n<| c |>\nThis wouldn't work for this case (\"One, two, three, four, five,\
    \ six\")\n<|/ c |>\n<| c |>\n: What are you trying to do? It works with your given\
    \ input. Can you give an example where it fails?\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nstring[] words;\nstring[] tempArray;\nstring[] finalArray = new string[tempArray.Length];\n\
    string[] tempArray1 = new string[tempArray.Length];", "{\n    string[] ans = new\
    \ string[1000];\n    int i = 0;\n    foreach(char c in s)\n    {\n        if(c\
    \ == ',' || c == ' ')\n        {\n            ans[i] = s;\n            i++;\n\
    \        }\n    }\n    ans[i] = s;\n    return ans;\n}\n</code>\n<|/ a tags=string,arrays,c#\
    \ dscore=2 |>\n<| c |>\nI guess this is just my poor attempt of trying to keep\
    \ my code as similar as possible to the OP.  I would not have thought to keep\
    \ this as similar as possible without explaining my thought process in detail.\n\
    <|/ c |>\n<| c |>\nWell, your answer is correct. Your explanation is just bad.\
    \ You're answering his question by providing his answer without explaining his\
    \ reasoning behind why he wrote his answer that way.\n<|/ c |>\n<| c |>\nI didn't\
    \ want to give him an answer that they didn't understand, just point out something\
    \ that might help someone understand better.\n<|/ c |>\n<| c |>\nI think it would\
    \ be better to give the answer without explaining why OP needs to do it. I think\
    \ this is a good example of why \"give a man a fish and you feed him for a day;\
    \ teach a man to fish and you feed him for life\" is better than \"teach a man\
    \ to fish and you feed him for life; teach a man to fish and you feed him for\
    \ a day.\" :-)\n<|/ c |>\n<| a tags=string,arrays,c# |>\n<code>\nstring s = \"\
    One, two, three, four, five, six\";\nList<string> result = new List<string>();\n\
    for (int i = 0; i < s.Length; i++)\n{\n    result.Add(s.Substring(0, i + 1));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIt's `Substring`, not `SubString`.\n<|/\
    \ c |>\n<| a |>\nMy solution is very similar to Amit's but using LINQ\n<code>\n\
    var words = input.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries).Select(s\
    \ => s.Trim()).ToArray();\n</code>\n<|/ a dscore=1 tags=string,arrays,c# |>\n\
    <| c |>\nI like this answer, but `ToArray` isn't required, you can just use `ToList`.\
    \ Also, there is no need for the LINQ `Select` (you could just use `Split`).\n\
    <|/ c |>\n<| c |>\n: ", "{\n    string[] result = new string[100];\n    char[]\
    \ array = s.toCharArray();\n    Arrays.sort(array);\n    int index = 0;\n    int\
    \ i = 0;\n    while (index < array.length) \n    {\n        result[i++] = array[index++];\n\
    \        if (index == array.length)\n        {\n            index = 0;\n     \
    \   }\n    }\n    Arrays.sort(result);\n    return result;\n}\n</code>\n<|/ a\
    \ dscore=2 tags=arrays,c# |>\n<| c |>\nI didnt know that array sorting was this\
    \ simple. Thank you.\n<|/ c |>\n<| a tags=arrays,c# |>\nI think this is what you're\
    \ looking for:\n<code>\n static void Main(string[] args)\n    {\n        string[]\
    \ myString = new[] {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"};\n\
    \        string[] myString2 = myString.OrderBy(s => s).ToArray();\n        foreach\
    \ (string s in myString2)\n        {\n            Console.WriteLine(s);\n    \
    \    }\n        Console.ReadKey();\n    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This will print out \"four\" before \"two\", which isn't what the asker wants.\n\
    <|/ c |>\n<| c |>\nYou're right! Thanks for pointing that out. I've updated the\
    \ code accordingly.\n<|/ c |>\n<| a dscore=1 |>\nHere's a fun solution that uses\
    \ Linq to group the string array into separate lists by the first character. \n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
  "{\n    /*\n        Task:\n        \n        Write a function that returns a new\
    \ array with the words in the string.\n        \n        If the string does not\
    \ contain any words, return an empty array.\n        \n    */", "{\n    vector<string>\
    \ v;\n    string temp = \"\";\n    for(int i=0; i<s.length(); i++)\n    {\n  \
    \      if(s[i] == ',' || s[i] == ' ')\n        {\n            v.push_back(temp);\n\
    \            temp = \"\";\n        }\n        else\n            temp = temp +\
    \ s[i];\n    }\n    v.push_back(temp);\n    return v;\n}\n</code>\n<|/ a tags=string,c++,arrays\
    \ |>\n<| a tags=string,c++,arrays dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <vector>\n#include <string>\n#include <cstring>\nusing namespace std;", "{\n\
    \    return splitter.toArray(s);\n}", "{\n    string[] r;\n    \n    int pos =\
    \ 0;\n    foreach(char a : s)\n    {\n        if (a==',')\n        {\n       \
    \     while (pos!=s.Length && s[pos]==',')\n                pos++;\n        }\n\
    \        if (pos==s.Length)\n        {\n            r.Add(s.Substring(0, pos));\n\
    \            break;\n        }\n        r.Add(s.Substring(pos, s.Length-pos));\n\
    \        pos = s.Length;\n    }\n    return r;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thank you for your answer! However, I only have access to a windows machine. I\
    \ can only use c++ and std library. Is there another way to do this? I would really\
    \ appreciate if you could elaborate your answer. Thanks!\n<|/ c |>\n<| c |>\n\
    I added a solution with C++\n<|/ c |>\n<| a tags=c++,arrays,string,tokenize |>\n\
    <code>\nusing namespace std;", "{\n    string[] word_list = new string[1000];\n\
    \    int i = 0;\n    while (i < s.Length)\n    {\n        if (char.IsWhiteSpace(s[i]))\n\
    \        {\n            i++;\n            continue;\n        }\n        string[]\
    \ word_list = split_string(s, i);\n        i += word_list.Length;\n    }\n   \
    \ return word_list;\n}", "{\n    string delimiter = \", \";\n    string words[]\
    \ = s.split(delimiter);\n    return words;\n}\n/*", "{\n\tstring delim = (ischarset(s)?'\"\
    ':\",\");\n\tstring[] tokens = s.split(delim);\n\t\n\treturn tokens;\n}\n/*",
  "{\n    /*\n        We declare an empty array.\n        We will return the array\
    \ at the end of this function.\n    */\n    string[] words = null;\n    /*\n \
    \       We declare an integer variable called count_of_commas.\n        The purpose\
    \ of this variable is to count the number of commas that\n        are present\
    \ in the input string s.\n    */\n    int count_of_commas = 0;\n    /*\n     \
    \   We declare an integer variable called count_of_spaces.\n        The purpose\
    \ of this variable is to count the number of spaces that\n        are present\
    \ in the input string s.\n    */\n    int count_of_spaces = 0;\n    /*\n     \
    \   We declare an integer variable called index_of_first_word. We need\n     \
    \   to keep track of where in the string s we are currently located.\n       \
    \ We initialize this variable to -1.\n    */\n    int index_of_first_word = -1;\n\
    \    /*\n        We declare an integer variable called index_of_last_word. We\
    \ need\n        to keep track of where in the string s we are currently located.\n\
    \        We initialize this variable to -1.\n    */\n    int index_of_last_word\
    \ = -1;\n    /*\n        We declare an integer variable called length. We need\
    \ to\n        keep track of the length of the input string s.\n        We initialize\
    \ this variable to 0.\n    */\n    int length = 0;\n    /*\n        We declare\
    \ a boolean variable called is_first_word. We need to\n        track the state\
    \ of the first word encountered.\n        We initialize this variable to false.\n\
    \    */\n    bool is_first_word = false;\n    /*\n        We declare a boolean\
    \ variable called is_last_word. We need to\n        track the state of the last\
    \ word encountered.\n        We initialize this variable to false.\n    */\n \
    \   bool is_last_word = false;\n    /*\n        We declare a boolean variable\
    \ called is_comma. We need to\n        track the state of the comma encountered.\n\
    \        We initialize this variable to false.\n    */\n    bool is_comma = false;\n\
    \    /*\n        We declare a boolean variable called is_space. We need to\n \
    \       track the state of the space encountered.\n        We initialize this\
    \ variable to false.\n    */\n    bool is_space = false;\n    /*\n        We declare\
    \ a boolean variable called is_first_or_last_word. We need\n        to keep track\
    \ of the state of the first and last words. We use\n        this variable to keep\
    \ track of this.\n    */\n    bool is_first_or_last_word = false;\n    /*\n  \
    \      We declare a boolean variable called is_word. We need to keep\n       \
    \ track of the state of the words that we are to process.\n        We initialize\
    \ this variable to false.\n    */\n    bool is_word = false;\n    /*\n       \
    \ We declare an integer variable called index_of_current_word. We need to\n  \
    \      track the ", "{\n    int i;\n    string words[100];\n    string temp[100];\n\
    \    for(i=0; i<s.length(); i++)\n    {\n        if(s[i]==',' || s[i]==' ')\n\
    \        {\n            while(s[i]==',' || s[i]==' ')\n            {\n       \
    \         i++;\n            }\n            words[i]=temp[i]+words[i+1];\n    \
    \        temp[i]=\"\";\n        }\n        else\n        {\n            temp[i]=temp[i]+s[i];\n\
    \        }\n    }\n    words[i]=temp[i]+words[i+1];\n    return words;\n}\n</code>\n\
    <|/ a tags=c++,string,arrays dscore=0 |>\n<| c |>\nHi, the program works very\
    \ well! Could you tell me what is the purpose of temp[]?\n<|/ c |>\n<| c |>\n\
    Yeah. temp is used to save the words separated using spaces or commas. So, you\
    \ can save each word in the next index. And, you append the word at the end. That's\
    \ why, you use temp[]. You can remove temp from the code too, and it will be the\
    \ same.\n<|/ c |>\n<| a |>\nThe program below works fine for me in visual studio\n\
    <code>\n#include <iostream>\n#include <string>", "{\n    \n    string [] words;\n\
    \    char[] ch = s.toCharArray();\n    int count = 0;\n    int wordCount = 0;\n\
    \    \n    for (int i = 0; i < ch.length; i++) \n    {\n        if (ch[i] != '\
    \ ') \n        {\n            words[wordCount] = ch[i];\n            wordCount++;\n\
    \        }\n        else\n        {\n            if (wordCount != 0) \n      \
    \      {\n                words[wordCount] = \"_\";\n                wordCount++;\n\
    \            }\n        }\n    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
