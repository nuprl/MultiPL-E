name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
  \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
  \ 1L, -10L])\n    123L\n    \n*/\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n\tlong m = l[0];\n\tfor (int i = 1; i < l.length; i++) {\n\t\tif\
    \ (l[i] > m)\n\t\t\tm = l[i];\n\t}\n\treturn m;\n}", "{\n    int i, j;\n    long\
    \ max_elem = l[0];\n    int max_idx = -1;\n    for (i =1; i < l.length; i++)\n\
    \    {\n        for (j =0; j < i; j++)\n        {\n            if (l[j] > max_elem)\n\
    \            {\n                max_elem = l[j];\n                max_idx = j;\n\
    \            }\n        }\n    }\n    return max_elem;\n}", "{\n    long max =\
    \ 0;\n    int i;\n    for(i=0;i<l.length;i++)\n    {\n        if(l[i] > max)\n\
    \        {\n            max = l[i];\n        }\n    }\n    return max;\n}\n/*\n\
    Write an expression which return true if an element in an array is greater \n\
    than a specific value.\n    >>> check_condition([1,2,3],2,>)\n    True\n    >>>\
    \ check_condition([1,2,3],2,<)\n    False\n*/", "{\n    long max = (long) std.math.max(l[0],\
    \ l[1]);\n    for(int i = 2; i < l.length; i++) {\n        max = std.math.max(max,\
    \ l[i]);\n    }\n    return max;\n}", "{\n    int n = l.length;\n    if (n < 1)\
    \ \n    \tthrow new RuntimeException(\"Empty array!\");\n    int max = l[0];\n\
    \    for (int i=1; i<n; i++)\n        if (l[i] > max)\n            max = l[i];\n\
    \    return max;\n}", "{\n\tlong maxElement=l[0];\n\tfor(int i=1; i<l.length;\
    \ i++)\n\t{\n\t\tif(l[i]>maxElement)\n\t\t\tmaxElement=l[i];\n\t}\n\treturn maxElement;\n\
    }", "{\n    long max = 0;\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n\
    \    {\n        if(max < l[i])\n        {\n            max = l[i];\n        }\n\
    \    }\n    return max;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\n\
    {\n    long min = 0;\n    int i = 0;\n    for(i = 0; i < l.length; i++)\n    {\n\
    \        if(min > l[i])\n        {\n            min = l[i];\n        }\n    }\n\
    \    return min;\n}\n/*\nReturn the sum of all elements in the array.\n    >>>\
    \ sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    2064L\n    \n*/\nlong sum(long[] l)\n{\n    long s = 0;\n  \
    \  for(long i : l)\n    {\n        s += i;\n    }\n    return s;\n}\n/*\nReturn\
    \ the product of all elements in the array.\n    >>> prod([1L, 2L, 3L])\n    6L\n\
    \    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -20L\n\
    \    \n*/\nlong prod(long[] l)\n{\n    long p = 1;\n    for(long i : l)\n    {\n\
    \        p *= i;\n    }\n    return p;\n}\n/*\nReturn the sum of all elements\
    \ in the array.\n    >>> sum([1L, 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    2064L\n    \n*/\nfloat sum(float[]\
    \ l)\n{\n    float s = 0;\n    for(float i : l)\n    {\n        s += i;\n    }\n\
    \    return s;\n}\n/*\nReturn the product of all elements in the array.\n    >>>\
    \ prod([1L, 2L, 3L])\n    6L\n    >>> prod([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -20L\n    \n*/\nfloat prod(float[] l)\n{\n    float p\
    \ = 1;\n    for(float i : l)\n    {\n        p *= i;\n    }\n    return p;\n}\n",
  "{\n    int i=0;\n    long res;\n    long t;\n    for (; (i < sizeof l / sizeof\
    \ *l) && l[i]!=t; i=i+1) {\n\tres = l[i];\n\tfor (++i; i < sizeof l / sizeof *l;\
    \ i++){\n\t    t = l[i];\n\t    if (res > t)\n\t\tres = t;\n\t}\n    }\n    return\
    \ res;\n}", "{\n\treturn max_elementAux(l, 1);\n}", "{\n    long res = 0;\n  \
    \  for(int i = 0; i < l.length; ++i)\n        res = max(res, l[i]);\n    return\
    \ res;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long res\
    \ = 0;\n    for(int i = 0; i < l.length; ++i)\n        res = min(res, l[i]);\n\
    \    return res;\n}\n/*\nReturn sum of all the elements not greater than or equal\
    \ to 'x' in the array.\n    >>> sum([1L, 2L, 3L, 0L, 5L, 1L, -3L])\n    6L\n \
    \   \n*/\nlong sum(long x) {\n    long res = 0;\n    for(int i = 0; i < MAX_N;\
    \ ++i) {\n        if(map[i] == x) \n            res+=i;\n    }\n    return res;\n\
    }\n/*\nReturn average of all the elements in the array.\n    >>> sum([1L, 2L,\
    \ 3L, 0L, 5L, 1L, -3L])/7L\n    3.833333333333334\n    \n*/\ndouble avg(long x)\
    \ {\n    long sum = 0;\n    for(int i = 0; i < MAX_N; ++i) {\n        if(map[i]\
    \ == x) \n            sum+=i;\n    }\n    return sum/MAX_N;\n}\n/*\nReturn median\
    \ of all the elements in the array.\n    >>> median([1L, 2L, 3L, 0L, 5L, 1L, -3L])\n\
    \    0L\n    >>> median([0L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L])\n    4L\n    \n\
    */\nlong median(long x[]) {\n    int l = x.length/2;\n    return x[l];\n}\n/*\n\
    Return list of indices of the elements in the array that are greater or equal\
    \ than 'x'.\n    >>> list_gte([1L, 2L, 3L, 0L, 5L, 1L, -3L])\n    [1, 3, 5]\n\
    \    \n*/\nlong[] list_gte(long x[]) {\n    int i, res = -1;\n    long[] res =\
    \ new long[x.length];\n    for(i = 0; i < x.length; ++i) {\n        if(map[i]\
    \ >= x)\n            res[res++] = i;\n    }\n    return res;\n}\n/*\nReturn list\
    \ of indices of the elements in the array that are less or equal than 'x'.\n \
    \   >>> list_lte([1L, 2L, 3L, 0L, 5L, 1L, -3L])\n    [2, 4]\n    \n*/\nlong[]\
    \ list_lte(long ", "{\n  long m=0, e=0;\n  for(int i=0; i< l.length(); i++){\n\
    \    if(l[i]<m) m=l[i];\n    if(l[i]>e) e=l[i];\n  }\n  return e;\n}", "{\n  \
    \  long maxElement = l[0], index = 0;\n    for(long i = 1; i < l.size(); ++i)\
    \ {\n        if(l[i] > maxElement) {\n            maxElement = l[i];\n       \
    \     index = i;\n        }\n    }\n    return maxElement;\n}", "{\n\treturn std.math._max_element(&l[0],\
    \ &l[0] + std.universe.sizeof_long);\n}", "{\n\tlong max = 0;\n\tfor (long x :\
    \ l)\n\t\tif (max < x)\n\t\t\tmax = x;\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = -1;\n\tfor (long x : l)\n\t\tif (min > x)\n\t\t\tmin =\
    \ x;\n\treturn min;\n}\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong max_element2(long[] l)\n{\n\tint max =\
    \ 0;\n\tint i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] > max) {\n\t\t\t\
    max = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element2(long[]\
    \ l)\n{\n\tint min = -1;\n\tint i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i]\
    \ < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n \
    \   >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element3(long[] l)\n{\n\tint min = l[0];\n\tint i = 0;\n\t\
    while (i < l.length) \n\t{\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t\
    \ti++;\n\t}\n\treturn min;\n}\n/*\nReturn maximum element in the array.\n    >>>\
    \ max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10", "{\n   long res = 0;\n   foreachi (long\
    \ i, l) {\n      res = max(res, i);\n   }\n   return res;\n}", "{\n    long largest\
    \ = 0;\n    long i;\n    for (i = 0; i < l.length; i++){\n        if ( l[i] >\
    \ largest )\n            largest = l[i];\n    }\n    return largest;\n}", "{\n\
    \treturn _max_element(l, false);\n}\n/* \nReturn a maximum element of the array.\n\
    */\nfloat max_element(float[] l) \n{\n\treturn _max_element(l, true);\n}\n/*\n\
    Return maximum element in the array.\n>>> max_element([1L, 2L, 3L])\n3L\n>>> max_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n123L\n    \n*/\ndouble max_element(double[]\
    \ l) \n{\n\treturn _max_element(l, true);\n}", "{\n    long max = l[0];\n    long\
    \ min = l[0];\n    foreach (long elm) { \n        if (elm > max) { \n        \
    \    max = elm; \n        }\n        if (elm < min) { \n            min = elm;\
    \ \n        }\n    }\n    return max;\n}", "{\n    int i = 0;\n    long res =\
    \ l[0];\n    for(i = 1; i < l.length; ++i) {\n        res = max(res, l[i]);\n\
    \    }\n    return res;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n    int i = 0;\n    long res = l[0];\n    for(i = 1; i < l.length; ++i)\
    \ {\n        res = min(res, l[i]);\n    }\n    return res;\n}", "{\n    return\
    \ std.math._max(l);\n}", "{\n  int i, max = 0;\n  if (l == null)\n    throw new\
    \ IllegalArgumentException(\"Array must not be null\");\n  \n  for (i = 0, max\
    \ = l[0]; i <= l.length; ++i)\n  {\n    if (l[i] > max)\n    {\n      max = l[i];\n\
    \    }\n  }\n  return max;\n}", "{\n\tint len = l.length;\n\tif (len < 0) return\
    \ 0L;\n\tlong max = 0L;\n\tlong i = 1;\n\twhile (i < len) {\n\t\tif (l[i] > max)\
    \ {\n\t\t\tmax = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn min\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint len = l.length;\n\tif (len < 0) return 0L;\n\tlong min = 0L;\n\
    \tlong i = 1;\n\twhile (i < len) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn min;\n}\n/*\nReturn square of element in the array.\n\
    \    >>> square_element([3L, 2L])\n    9L\n    \n*/\nlong square_element(long[]\
    \ l) \n{\n\tint len = l.length;\n\tif (len < 0) return 0L;\n\tlong sq = 0;\n\t\
    long i = 1;\n\twhile (i < len) {\n\t\tsq += l[i] * l[i];\n\t\ti++;\n\t}\n\treturn\
    \ sq;\n}\n/*\nReturn sum of elements in an array\n    >>> sum_elements([1L, 2L,\
    \ 3L])\n    6L\n    \n*/\nlong sum_elements(long[] l) \n{\n\tint len = l.length;\n\
    \tif (len < 0) return 0L;\n\tlong sum = 0L;\n\tlong i = 1;\n\twhile (i < len)\
    \ {\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn sum of elements\
    \ in an array\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n    \n*/\nlong max_element(double[]\
    \ l) \n{\n\tint len = l.length;\n\tif (len < 0) return 0L;\n\tlong max = 0L;\n\
    \tlong i = 1;\n\twhile (i < len) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn min element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n", "{\n  long max = l[0];\n  for (int\
    \ i = 1; i < l.length; ++i) {\n    max = max(l[i], max);\n  }\n  return max;\n\
    }", "{\n    long max = l[0];\n    for (long i = 1; i < l.length; ++i)\n      \
    \  if (max < l[i])\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0];\n    for (long i = 1; i < l.length; ++i)\n    \
    \    if (min > l[i])\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L,\
    \ 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nlong sum(long[] l) \n{\n    long sum\
    \ = 0;\n    for (long i = 0; i < l.length; ++i)\n        sum += l[i];\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in the array.\n    >>> sum([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong product(long[]\
    \ l) \n{\n    long product = 1;\n    for (long i = 0; i < l.length; ++i)\n   \
    \     product *= l[i];\n    return product;\n}\n/*\nReturn true if all elements\
    \ in the array are zero. O(n) algorithm.\n    >>> is_empty([1L, 2L, 3L, 4L, 5L])\n\
    \    True\n    \n*/", "{\n    long res;\n    for (int i = 0; i < l.length; i++)\n\
    \        res = max(res, l[i]);\n    return res;\n}", "{\n    long maxi = l[0];\n\
    \    for (long i = 1; i < l.length; i++) {\n        if (l[i] > maxi)\n       \
    \     maxi = l[i];\n    }\n    return maxi;\n}\n/*\nReturn minimum element in\
    \ the array.\n    >>> max_element([1L, 2L, 3L])\n    1L\n    >>> max_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l)\n{\n    long mini = l[0];\n    for (long i = 1; i < l.length; i++) {\n  \
    \      if (l[i] < mini)\n            mini = l[i];\n    }\n    return mini;\n}",
  "{\n    long res = 0;\n    for (long i = 0; i < l.length; i++) \n\tres = max(l[i],\
    \ res);\n    return res;\n}", "{\n    int i, j;\n    long min;\n    \n    for\
    \ (i = 0; i < l.length; i++)\n    {\n        min = i;\n        for (j = i + 1;\
    \ j < l.length; j++)\n            if (l[j] < l[min])\n                min = j;\n\
    \        \n        if (min != i)\n            swap(l[i], l[min]);\n    }\n   \
    \ \n    return l[0];\n}", "{\n    long m;\n    m = l[0];\n    for (long i=0; i<l.length;\
    \ i++)\n        m = max(m, l[i]);\n    return m;\n}", "{\n    long max_value =\
    \ l[0];\n    long max_index = 0;\n    long i;\n    \n    for (i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] > max_value)\n        {\n            max_value\
    \ = l[i];\n            max_index = i;\n        }\n    }\n    \n    return max_value;\n\
    }", "{\n    long res = 0;\n    long max = l[0];\n    for (int i = 1; i < l.length;\
    \ ++i)\n        if (l[i] > max) \n            max = l[i];\n        res = max(max,\
    \ res);\n    return res;\n}", "{\n\treturn std.max(l);\n}", "{\n\tlong res = 0;\n\
    \tlong min = (long)l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i]\
    \ < min) min = l[i];\n\t\tif (l[i] > res) res = l[i];\n\t}\n\treturn res;\n}",
  "{\n\tlong max_val = l[0];\n\tlong max_i = 1;\n\tfor (long i=1;i<l.length;i++)\n\
    \t{\n\t\tif (l[i]>max_val)\n\t\t{\n\t\t\tmax_val = l[i];\n\t\t\tmax_i = i;\n\t\
    \t}\n\t}\n\treturn max_i;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n\tlong min_val = l[0];\n\tlong min_i = 1;\n\tfor (long i=1;i<l.length;i++)\n\
    \t{\n\t\tif (l[i]<min_val)\n\t\t{\n\t\t\tmin_val = l[i];\n\t\t\tmin_i = i;\n\t\
    \t}\n\t}\n\treturn min_i;\n}\n/*\nReturn sum of all elements in the array.\n \
    \   >>> sum_elements([1L, 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    30L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong s = 0;\n\tfor (long i=1;i<l.length;i++)\n\t{\n\t\ts = s + l[i];\n\
    \t}\n\treturn s;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    30L\n    \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble\
    \ s = 0;\n\tfor (long i=1;i<l.length;i++)\n\t{\n\t\ts = s + l[i];\n\t}\n\treturn\
    \ s;\n}\n/*\nReturn average of all elements in the array.\n    >>> average_elements([1L,\
    \ 2L, 3L])\n    1.5\n    >>> average_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L,\
    \ 123L, 1L, -10L])\n    -5.5\n    \n*/\ndouble average_elements(double[] l) \n\
    {\n\tdouble s = 0;\n\tfor (long i=1;i<l.length;i++)\n\t{\n\t\ts = s + l[i];\n\t\
    }\n\treturn s/l.length;\n}\n/*\nReturn average of all elements in the array.\n\
    \    >>> average_elements([1L, 2L, 3L])\n    1.5\n    >>> average_element", "{\n\
    \    int res = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > res)\n            res = l[i];\n    }\n    return res;\n}", "{\n\tint i;\n\t\
    long max;\n\t\n\tif (l.length==0)\n\t\treturn 0;\n\t\n\tmax=l[0];\n\tfor(i=1;\
    \ i<l.length;i++)\n\t\tif (l[i]>max)\n\t\t\tmax=l[i];\n\t\n\treturn max;\n}",
  "{\n\tint i = std.min(_l._size, n);\n\tlong m = 0;\n\tint k;\n\tfor(;;)\n\t{\n\t\
    \tfor(;;)\n\t\t{\n\t\t\tk = _i[i];\n\t\t\tif(k > m)\n\t\t\t{\n\t\t\t\tm = k;\n\
    \t\t\t}\n\t\t\t++i;\n\t\t\tif(i >= _l._size)\n\t\t\t\tbreak;\n\t\t}\n\t\tif(m\
    \ > 0)\n\t\t\tbreak;\n\t}\n\treturn m;\n}", "{\n\tlong max_elem = 0;\n\t\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tmax_elem = max(max_elem, l[i]);\n\t\n\t\
    return max_elem;\n}", "{\n    long max = 0;\n    long i = 0;", "{\n    long ret\
    \ = 0;\n    long max = l[0];\n    for (int i = 0; i < l.length; ++i) {\n     \
    \   if (l[i] > max)\n            max = l[i];\n    }\n    return max;\n}", "{\n\
    \    long min = l[0];\n    long max = l[0];\n    long max = l[0];\n    for (int\
    \ i=0; i<l.length; i++)\n    {\n        if (l[i] < min) min = l[i];\n        if\
    \ (l[i] > max) max = l[i];\n    }\n    return max;\n}", "{\nlong max = 0;\n  \
    \  for(int i = 0; i<l.length; i++){\n        if(l[i]>max){\n            max =\
    \ l[i];\n        }\n    }\nreturn max;\n}", "{\n    long retVal = 0;\n    for(int\
    \ i = 0; i < l.length; i++) \n    {\n        if(l[i] > retVal) \n            retVal\
    \ = l[i];\n    }\n    return retVal;\n}", "{\n  long x = 0;\n  int pos = 0;\n\
    \  \n  while(pos < l.length) {\n    if(l[pos] > x) x = l[pos];\n    pos++;\n \
    \ }\n  return x;\n}\n'''", "{\n\tint size = sizeof(l) / sizeof(l[0]);\n\tlong\
    \ max_value = l[0];\n\tfor (int i = 1; i < size; i++)\n\t{\n\t\tif (l[i] > max_value)\n\
    \t\t\tmax_value = l[i];\n\t}\n\treturn max_value;\n}", "{\n    long res = 0;\n\
    \    for (long i : l)\n        res = max(res, i);\n    return res;\n}", "{\n \
    \   long max = l[0];\n    for (long i = 1, max = l[i]; i <= l.length; i++) if\
    \ (l[i] > max) max = l[i];\n    return max;\n}", "{\n  long max = l[0];\n  for\
    \ (int i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n  }\n  return\
    \ max;\n}", "{\n    int pos = 0;\n    long max = 0L;\n    foreach (long i, l)\
    \ \n    {\n        if (i > max)\n        {\n            max = i;\n           \
    \ pos = 0;\n        }\n        else if (i == max)\n        {\n            pos++;\n\
    \        }\n    }\n    return max;\n}", "{\n    long max;\n    max = l[0];\n \
    \   for(int i = 0; i < l.length; i++) {\n        if(max < l[i]) {\n          \
    \  max = l[i];\n        }\n    }\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l)\n{\n    long min;\n    min = l[0];\n    for(int i = 0; i < l.length; i++)\
    \ {\n        if(min > l[i]) {\n            min = l[i];\n        }\n    }\n   \
    \ return min;\n}\n/*\nReturn sum of all the elements present in the array.\n \
    \   >>> sum_elements([1L, 2L, 3L, 4L, -1L, -4L, 0L, 10L])\n    12L\n    \n*/\n\
    long sum_elements(long[] l)\n{\n    long sum = 0;\n    for(int i = 0; i < l.length;\
    \ i++) {\n        sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn product\
    \ of all elements present in the array.\n    >>> product_elements([1L, 2L, 3L,\
    \ 4L, -1L, -4L, 0L, 10L])\n    24L\n    \n*/\nlong product_elements(long[] l)\n\
    {\n    long product = 1;\n    for(int i = 0; i < l.length; i++) {\n        product\
    \ *= l[i];\n    }\n    return product;\n}\n/*\nReturn sum of all the elements\
    \ in an array.\n    >>> sum_elements([1L, 2L, 3L, 4L, -1L, -4L, 0L, 10L])\n  \
    \  21L\n    \n*/\ndouble sum_elements(double[] l)\n{\n    double sum = 0;\n  \
    \  for(int i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return\
    \ sum;\n}\n/*\nReturn product of all elements in an array.\n    >>> product_elements([1L,\
    \ 2L, 3L, 4L, -1L, -4L, 0L, 10L])\n    120\n    \n*/\ndouble product_elements(double[]\
    \ l)\n{\n    double product = 1;\n    for(int i = 0; i < l.length; i++) {\n  \
    \      product *= l[i];\n    }\n    return product;\n}\n/*\nReturn quotient of\
    \ sum of all elements present in the array.\n    >>> quotient_elements([1L, 2L,\
    \ 3L, 4L, -1L, -4L, 0L, 10L])\n    6L\n    \n*/\nlong quotient_elements(long[]\
    \ l)\n{\n    long quotient = 0;\n    for(int i = 0; i < l.length; i++) {\n   \
    \     quotient = l[i]/sum;", "{\n    int i, max=0;\n    for (i = 0; i< l.length;\
    \ ++i)\n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\n\
    </code>\n<|/ a tags=arrays,java,max dscore=1 |>\n<| c |>\nYour implementation\
    \ does not work correctly for `Arrays.copyOf(arr,arr.length)`\n<|/ c |>\n<| a\
    \ dscore=1 |>\nIn java 8 you can use streams for this like so\n<code>\nArrays.stream(arr).max().getAsLong()\n\
    </code>\n<|/ a tags=arrays,java,max |>\n<| a |>\nAs said in the comments, the\
    \ fastest solution would be the following:\n<code>\nstatic long max(long[] a)\
    \ {\n    return Arrays.stream(a).max().getAsLong();\n}\n</code>\nBut this doesn't\
    \ return the index of the element that is the max, but an Optional containing\
    \ the index of the max element or null if all elements are equal and there is\
    \ no maximum element.\nThis can be easily implemented like this:\n<code>\nstatic\
    \ Optional<Integer> max(long[] a) {\n    int max = -Long.MAX_VALUE;\n    int index\
    \ = -1;\n    for (int i : a) {\n        if (max < i) {\n            max = i;\n\
    \            index = i;\n        } else if (i == max) {\n            index = i;\n\
    \        }\n    }\n    return Optional.of(index);\n}\n</code>\nAnd here is an\
    \ example of a benchmark of the 3 solutions (including my solution above):\n<code>\n\
    package com.stackoverflow.q56499279;", "{\n    int i;\n    long max_num = 0;\n\
    \    long cur_num = 0;\n    \n    for(i = 0; i < l.length; i++)\n    {\n     \
    \   cur_num = l[i];\n        if(cur_num > max_num)\n            max_num = cur_num;\n\
    \    }\n    return max_num;\n}", "{\n  int i;\n  long max = l[0];\n  for (i =\
    \ 1; i < l.length; i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return\
    \ max;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n  int i;\n \
    \ long min = l[0];\n  for (i = 1; i < l.length; i++) {\n    if (l[i] < min)\n\
    \      min = l[i];\n  }\n  return min;\n}\n/*\nCheck if a value exists in the\
    \ array.\n    >>> 5 in [1, 2, 3]\n    True\n    >>> 5 in [1, 2, 3]\n    False\n\
    \    \n*/", "{\n  return _max_element(l, 0);\n}\nlong _max_element(long l[], int\
    \ start)\n{\n  long r = l[start], m = start, e = 0;\n  while(++m < l.length &&\
    \ l[m] > r)\n    r = l[m];\n  while(e++ < l.length) {\n    long tmp = l[--m];\n\
    \    if(tmp > r)\n      l[m] = r;\n    else if(tmp < r)\n      l[m] = tmp;\n \
    \   else \n      break;\n  }\n  return r;\n}\n/*\nReturn sum of absolute value\
    \ of all elements in the array.\n    >>> sum_abs([-1.0, 2.5, 0.0, 4.5])\n    5.5\n\
    \    \n*/\ndouble sum_abs(double[] l) \n{\n  double r = 0;\n  int i;\n  for(i\
    \ = 0; i < l.length; ++i)\n    r += l[i]*l[i];\n  return r;\n}\n/*\nReturn sum\
    \ of absolute value of all elements in the array.\n    >>> sum_abs([-1.0, 2.5,\
    \ 0.0, 4.5])\n    5.5\n    \n*/\ndouble _sum_abs(double l[], int start)\n{\n \
    \ double r = 0.0, m = start;\n  while(++m < l.length && l[m] > r)\n    r = l[m];\n\
    \  while(m-- > start)\n    r += l[m];\n  return r;\n}\n/*\nReturn sum of squared\
    \ values of all elements in the array.\n    >>> sum_square([-1, 4.5, 2.5, 0])\n\
    \    25.0\n    \n*/\ndouble sum_square(double[] l) \n{\n  double r = 0;\n  int\
    \ i;\n  for(i = 0; i < l.length; ++i)\n    r += l[i]*l[i];\n  return r;\n}\n/*\n\
    Return sum of squared values of all elements in the array.\n    >>> sum_square([-1,\
    \ 4.5, 2.5, 0])\n    25.0\n    \n*/\ndouble _sum_square(double l[], int start)\n\
    {\n  double r = 0.0, m = start;\n  while(++m < l.length && l[m] > r)\n    r =\
    \ l[m];\n  while(m-- > start)\n    r += l[m];\n  return r;\n}\n/*\nReturn sum\
    \ of absolute value of all elements in the array.\n    >>> sum_abs([-1, 4.5, 2.5,\
    \ 0])\n    25.0\n    \n*/\ndouble sum_index(double[] l, int start, int end)\n\
    {\n  double r = 0;\n  while(start < end)\n    r += l[start++] * l[start++];\n\
    \  return r;\n}\n/*\nReturn sum of absolute value of all elements in the array.\n\
    \    >>> sum_abs([-1, 4.5, 2.5, 0])\n    25.0\n    \n*/\ndouble _", "{\n    long\
    \ max;\n    \n    for (int i = 0; i < l.length; i++) {\n        if (l[i] > max)\
    \ max = l[i];\n    }\n    return max;\n}", "{\n    int i;\n    long max = l[0];\n\
    \    for (i = 1; i < l.length; ++i)\n        if (l[i] > max)\n            max\
    \ = l[i];\n    return max;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n    int i;\n    long min = l[0];\n    for (i = 1; i < l.length; ++i)\n\
    \        if (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L, 5L])\n    6L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    int i;\n    long sum = 0;\n    for (i =\
    \ 0; i < l.length; ++i)\n        sum += l[i];\n    return sum;\n}\n/*\nReturn\
    \ product of all elements in the array.\n    >>> prod([1L, 2L, 3L, 5L])\n    15L\n\
    \    \n*/\nlong prod(long[] l) \n{\n    int i;\n    long prod = 1;\n    for (i\
    \ = 0; i < l.length; ++i)\n        prod *= l[i];\n    return prod;\n}\n/*\nReturn\
    \ quotient of all elements in the array.\n    >>> quotient([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    1L\n    \n*/\nlong quotient(int[] l, long\
    \ div) \n{\n    int i;\n    int quot = 0;\n    for (i = 0; i < l.length; ++i)\n\
    \        if (l[i] > 0 && l[i] % div == 0)\n            quot = i;\n    return quot;\n\
    }\n/*\nReturn exponent of all elements in the array.\n    >>> exponent([3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L], 1)\n    1L\n    \n*/", "{\n    long m\
    \ = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] > m) m\
    \ = l[i];\n    }\n    return m;\n}\n/*\n    Return maximum element in the array\n\
    \    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n    \n    \n    \n  \
    \  \n    \n*/\nlong max_element(ulong l) \n{\n    long m = 0;\n    for(int i =\
    \ 0; i < l.length; i++) \n    {\n        if(l[i] > m) m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L,\
    \ 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L,\
    \ -10L])\n    -10L\n    \n    \n*/\nlong min_element(long[] l) \n{\n    long m\
    \ = 0;\n    for(int i = 0; i < l.length; i++) \n    {\n        if(l[i] < m) m\
    \ = l[i];\n    }\n    return m;\n}\n/*\n    Return minimum element in the array\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n    \n    \n    \n  \
    \  \n*/\nulong min_element(ulong l) \n{\n    ulong m = 0;\n    for(int i = 0;\
    \ i < l.length; i++) \n    {\n        if(l[i] < m) m = l[i];\n    }\n    return\
    \ m;\n}\n/*\nReturn absolute value of a number.\n    >>> abs(1L)\n    1\n    >>>\
    \ abs(-10L)\n    10\n    >>> abs(-1L)\n    1\n    \n    \n*/\nlong abs(long n)\
    \ \n{\n    if(n>0) return n;\n    if(n<0) return -n;\n    return 0;\n}\n/*\nReturn\
    \ absolute value of a number.\n    >>> abs(1L)\n    1\n    >>> abs(-10L)\n   \
    \ 10\n    >>> abs(-1L)\n    1\n    \n    \n*/\nulong abs(ulong n) \n{\n    if(n>0)\
    \ return n;\n    if(n<0) return -n;\n    return 0;\n}\n/*\nReturn absolute value\
    \ of a number.\n    >>> abs(1L)\n    1\n    >>> abs(-10L)\n    10\n    >>> ",
  "{\n\treturn std::max_element(l.begin(), l.end());\n}\n/*\nReturn the sum of all\
    \ the elements in the given range.\n    >>> sum_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n  \
    \  -108L\n    \n*/\nlong sum_elements(long[] l) \n{\n\treturn std::accumulate(l.begin(),\
    \ l.end(), 0L);\n}", "{\n    long max = l[0];\n    for (long i : l) \n\tmax =\
    \ max(max, i);\n    return max;\n}", "{\n\tint i, j;\n\tlong max = l[0];\n\t\n\
    \tfor (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t{\n\t\t\tmax =\
    \ l[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}", "{\n  return std.math._max(l);\n}",
  "{\nlong i;\nlong j;\nlong min;", "{\n  long max = l[0];\n  long idx = 0;\n  \n\
    \  for (idx = 1; idx < l.length; idx++) \n    if (max < l[idx]) \n      max =\
    \ l[idx];\n    \n  return max;\n}", "{\n    long max = l[0];\n    for (long i\
    \ = 0; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    0L\n    \n*/\nlong min_element(long[] l) \n\
    {\n    long min = l[0];\n    for (long i = 0; i < l.length; i++) {\n        if\
    \ (l[i] < min)\n            min = l[i];\n    }\n    return min;\n}\n/*\nReturn\
    \ sum of all the numbers in the array.\n    >>> sum([1, 2, 3, 4])\n    10L\n \
    \   \n*/\nlong sum(long[] l) \n{\n    long s = 0;\n    for (long i : l)\n    \
    \    s = s + i;\n    return s;\n}\n/*\nReturn sum of all the numbers in the array\
    \ ignoring negative numbers.\n    >>> sum([1, 2, -3, 4])\n    10L\n    \n*/\n\
    long sum_positive(long[] l) \n{\n    long s = 0;\n    for (long i : l)\n     \
    \   if (i > 0)\n            s = s + i;\n    return s;\n}\n/*\nReturn sum of all\
    \ the numbers in the array ignoring negative and zero numbers.\n    >>> sum([1,\
    \ 2, -3, 4, 0])\n    10L\n    \n*/\nlong sum_positive_zero(long[] l) \n{\n   \
    \ long s = 0;\n    for (long i : l)\n        if (i > 0)\n            if (i ==\
    \ 0)\n                s = s + i;\n            else\n                s = s + i;\n\
    \    return s;\n}\n/*\nReturn sum of all the numbers in the array ignoring negative\
    \ numbers.\n    >>> sum([1, 2, -3, 4])\n    10L\n    \n*/\nlong sum_negative(long[]\
    \ l) \n{\n    long s = 0;\n    for (long i : l)\n        if (i < 0)\n        \
    \    s = s + i;\n    return s;\n}\n/*\nReturn sum of all the numbers in the array\
    \ ignoring negative and zero numbers.\n    >>> sum([1, 2, -3, 4, 0])\n    10L\n\
    \    \n*/\nlong sum_negative_zero(long[] l) \n{\n    long s = 0;\n    for (long\
    \ i : l)\n        if (i < 0)\n            if (i == 0)\n                s = s +\
    \ i;\n            else\n                s = s + i;\n    return s;\n}\n/*\nReturn\
    \ average of all the numbers in the array.\n    >>> sum([1, 2, 3, 4])\n    5.0\n\
    \    \n*/\ndouble average(double[] l) \n{\n    double total = 0.0;\n    for (double\
    \ d : l)\n        total += d;\n    return (total/", "{\n    long m = std.math.ptrdiff_t<long>(l);\n\
    \    if (m > 0)\n    {\n        for (size_t i = 0; i < m; i++)\n            if\
    \ (l[i] > l[m - 1])\n                return l[i];\n    }\n    return l[0];\n}",
  "{\n  return _max(l, long.min);\n}", "{\n    long max_num = l[0];\n    for (int\
    \ i = 0; i < l.length; i++) \n    {\n        if (l[i] > max_num) \n        {\n\
    \            max_num = l[i];\n        }\n    }\n    return max_num;\n}\n</code>\n\
    <|/ a |>\n<| c |>\n\"The fastest solution\" is the wrong way to say it! It should\
    \ have been \"The fastest way to solve the problem.\"\n<|/ c |>\n<| c |>\nI didn't\
    \ say that it's necessarily fastest. I said that it's the fastest solution because\
    \ it's O(1)\n<|/ c |>\n<| a |>\nThis one is the fastest in Java\n<code>\npublic\
    \ static int findMaxIndex(int[] arr){\n    int max = Integer.MIN_VALUE;\n    for\
    \ (int i = 0; i < arr.length; i++){\n        if (arr[i] > max){\n            max\
    \ = arr[i];\n        }\n    }\n    return max;\n}\n</code>\n<|/ a dscore=4 tags=algorithm,performance,sorting,java,sorting\
    \ |>\n<| c |>\nWhat happens when there are many repeated elements in the array?\n\
    <|/ c |>\n<| a dscore=3 tags=algorithm,performance,sorting,java,sorting |>\nIt\
    \ is a good idea to have a static array and run a quick sort to sort the array\
    \ first to find min and max values. If the array is very large and you are looking\
    \ for max value just look at the last element.\n<|/ a |>\n<| c |>\nA naive sorting\
    \ algorithm is O(nlogn). It's not really that fast, but it's O(n) so it is faster\
    \ than other solutions.\n<|/ c |>\n<| a tags=algorithm,performance,sorting,java,sorting\
    \ |>\nThis is a very simple solution in Java, just run through the list and find\
    \ max and min numbers by doing this.\n<code>\n//Finding the max number in the\
    \ array\nArrays.sort(nums);", "{\n\tlong max_value = l[0], max_pos = 0;\n\tfor\
    \ (long i = 1; i < l.length; ++i)\n\t{\n\t\tif (max_value < l[i])\n\t\t{\n\t\t\
    \tmax_value = l[i];\n\t\t\tmax_pos = i;\n\t\t}\n\t}\n\treturn max_pos;\n}", "{\n\
    \    long max = l[0];\n    for (long i = 0; i < l.length; i++) \n\tmax = max(l[i],\
    \ max);\n    return max;\n}", "{\n\tlong maxVal = 0, maxIdx = 0;\n\tint n = l.length;\n\
    \tint i;", "{\n\tint i, hi = sizeof l / sizeof *l;\n\tint v = 0;\n\tfor(i=hi;i--;)\
    \ \n\t{\n\t\tv = std.maxint(v, (l[i])); // if v is negative, the array contains\
    \ no positive number\n\t\tif (v > l[i]) \n\t\t{\n\t\t\tv = l[i];\n\t\t}\n\t}\n\
    \treturn v;\n}", "{\n    long maxElem = l[0];\n    for(int i = 0; i < l.length;\
    \ i++) \n    {\n        if(l[i] > maxElem) \n            maxElem = l[i];\n   \
    \ }\n    return maxElem;\n}", "{\n  long res = l[0];\n  for (int i = 1; i < l.length;\
    \ ++i) {\n    res = l[i] > res ? l[i] : res;\n  }\n  return res;\n}", "{\n   \
    \ long m = l[0], i, l;\n    for (l = 1, i = 1; i < l.length; ++i)\n        if\
    \ (l[i] > m)\n            m = l[i];\n    return m;\n}", "{\n    long max = 0;\n\
    \    for (long i : l) {\n        if (max < i) max = i;\n    }\n    return max;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min = Long.MAX_VALUE;\n\
    \    for (long i : l) {\n        if (min > i) min = i;\n    }\n    return min;\n\
    }\n/*\nReturn sum of elements in array.\n    >>> sum_elements([1L, 2L, 3L, 4L,\
    \ 5L])\n    6L\n    >>> sum_elements([-5L, 3L, 0L, 1L, -10L, -6, 0, 9, 0, 123L,\
    \ 1L])\n    0L\n    \n*/\nlong sum_elements(long[] l) \n{\n    long sum = 0;\n\
    \    for (long i : l) {\n        sum += i;\n    }\n    return sum;\n}\n/*\nReturn\
    \ product of elements in array.\n    >>> product_elements([1L, 2L, 3L, 4L, 5L])\n\
    \    6L\n    >>> product_elements([-5L, 3L, 0L, 1L, -10L, -6, 0, 9, 0, 123L, 1L])\n\
    \    -1L\n    \n*/\nlong product_elements(long[] l) \n{\n    long product = 1;\n\
    \    for (long i : l) {\n        product *= i;\n    }\n    return product;\n}\n\
    /*\nReturn sum of squares of elements in array.\n    >>> sum_elements_squares([1L,\
    \ 2L, 3L, 4L, 5L])\n    21L\n    >>> sum_elements_squares([-5L, 3L, 0L, 1L, -10L,\
    \ -6, 0, 9, 0, 123L, 1L])\n    0L\n    \n*/\nlong sum_elements_squares(long[]\
    \ l) \n{\n    long sum = 0;\n    for (long i : l) {\n        sum += i * i;\n \
    \   }\n    return sum;\n}\n/*\nReturn sum of cubes of elements in array.\n   \
    \ >>> sum_elements_cubes([1L, 2L, 3L, 4L, 5L])\n    55L\n    >>> sum_elements_cubes([-5L,\
    \ 3L, 0L, 1L, -10L, -6, 0, 9, 0, 123L, 1L])\n    0L\n    \n*/\nlong sum_elements_cubes(long[]\
    \ l) \n{\n    long sum = 0;\n    for (long i : l) {\n", "{\n    int len = l.length;\n\
    \    if (len <= 0)\n        throw new IllegalArgumentException(\"max_element:\
    \ array must not be empty\");\n    if (len == 1)\n        return l[0];", "{\n\
    \  long max = l[0];\n  for (int i = 1; i < l.length; i++) {\n    if (l[i] > max)\n\
    \      max = l[i];\n  }\n  return max;\n}", "{\n\tlong res = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > res)\n\t\t{\n\t\t\tres = l[i];\n\
    \t\t}\n\t}\n\treturn res;\n}\n/*\nReturn minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n\tlong res = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ < res)\n\t\t{\n\t\t\tres = l[i];\n\t\t}\n\t}\n\treturn res;\n}", "{\n    long\
    \ max = l[0];\n    for(long i = 1; i < l.length; i++)\n        if(l[i] > max)\
    \ \n            max = l[i];\n    return max;\n}", "{\n\tlong max = 0;\n\tfor (long\
    \ i = 0; i < l.Length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}", "{\n    int len = (int)l.length();\n    if (len < 1)\n\tthrow\
    \ new IllegalArgumentException(\"array\");\n    int pos = 0;\n    long max = l[0];\n\
    \    while (pos < len) {\n\tif (l[pos] > max)\n\t    max = l[pos];\n\tpos++;\n\
    \    }\n    return max;\n}", "{\n    int max = l[0], min = l[0], i, n;\n    n\
    \ = l.length;\n    for (i = 0; i < n; i++)\n        if (max < l[i])\n        \
    \    max = l[i];\n        else if (min > l[i])\n            min = l[i];\n    return\
    \ max;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    int max\
    \ = l[0], min = l[0], i, n;\n    n = l.length;\n    for (i = 0; i < n; i++)\n\
    \        if (max > l[i])\n            max = l[i];\n        else if (min < l[i])\n\
    \            min = l[i];\n    return min;\n}\n/* \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n*/\n/*\nReturn minimum element in the array.\n  \n    \n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong max_element(int a[]) \n{\n    int max =\
    \ a[0], i, n;\n    n = a.length;\n    for (i = 0; i < n; i++)\n        if (max\
    \ < a[i])\n            max = a[i];\n    return max;\n}\n/*\nReturn minimum element\
    \ in the array.\n  \n    \n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>>\
    \ min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(int a[]) \n{\n    int max = a[0], i, n;\n    n = a.length;\n\
    \    for (i = 0; i < n; i++)\n        if (max > a[i])\n            max = a[i];\n\
    \    return min;\n}", "{\n    long res = 0;\n    for (int i = 0; i < l.length;\
    \ ++i)\n        res = std.max(res, l[i]);\n    return res;\n}\n/*\nReturn index\
    \ of the maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n  \
    \  3\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    123\n    \n*/", "{\n    return std.max(l);\n}\n/*\nReturn minimum element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n*/\nlong min_element(long[]\
    \ l) \n{\n    return std.min(l);\n}", "{\n\tint i;\n\tlong max_elem = l[0];\n\t\
    \n\tfor (i=1; i<l.length; i++)\n\t{\n\t\tif (l[i] > max_elem)\n\t\t\tmax_elem\
    \ = l[i];\n\t}\n\treturn max_elem;\n}", "{\n\tlong max_ = l[0], pos_ = 1;\n\t\
    for(int i = 1; i < l.length; i++)\n\t\tif(l[i] > max_) \n\t\t{\n\t\t\tmax_ = l[i];\n\
    \t\t\tpos_ = i;\n\t\t}\n\treturn max_;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l)\n{\n\tlong min_ = l[0], pos_ = 1;\n\tfor(int i = 1; i < l.length; i++)\n\t\
    \tif(l[i] < min_) \n\t\t{\n\t\t\tmin_ = l[i];\n\t\t\tpos_ = i;\n\t\t}\n\treturn\
    \ min_;\n}\n/*\nReturn sum of elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -124L\n    \n*/\nlong sum_elements(long[] l)\n{\n\tlong sum\
    \ = 0;\n\tfor(long x: l)\n\t\tsum += x;\n\treturn sum;\n}", "{\n    int i = 0;\n\
    \    long maxValue = l[0];\n    for(i = 1; i < l.length; ++i)\n    {\n       \
    \ if (l[i] > maxValue)\n        {\n            maxValue = l[i];\n        }\n \
    \   }\n    return maxValue;\n}", "{\n    int i = 1;\n    for (; i < l.length;\
    \ i++) {\n        if (l[i] > l[i-1]) break;\n    }\n    return l[i-1];\n}", "{\n\
    \tlong max;\n\tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif\
    \ (max < l[i])\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n    long maxv =\
    \ l[0], maxi = 0;\n    int i;\n    for (i = 1; i < l.length; i++) {\n        if\
    \ (l[i] > maxv) {\n            maxv = l[i];\n            maxi = i;\n        }\n\
    \    }\n    return maxi;\n}", "{\n\tlong m = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++) {\n\t\tif(l[i] > m) m = l[i];\n\t}\n\treturn m;\n}", "{\n    long res =\
    \ 0;\n    for (long i = 1; i < l.length; ++i)\n    {\n        if (l[i] > res)\
    \ res = l[i];\n    }\n    return res;\n}\n</code>\nFor your problem, the output\
    \ should be:\n<code>\n//for input\nlong input1[] = {1L, 2L, 3L};\nlong input2[]\
    \ = {5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L};", "{\n    long max_num\
    \ = l[0];\n    int max_index = 0;\n    for(int i = 0; i < l.length; ++i)\n   \
    \ {\n        if(l[i] > max_num)\n        {\n            max_index = i;\n     \
    \       max_num = l[i];\n        }\n    }\n    return max_num;\n}\n/*\nReturn\
    \ sum of all elements in the array.\n    >>> sum([1L, 2L, 3L, 4L, 5L])\n    15L\n\
    \    \n*/\nlong sum(long[] l)\n{\n    long num = 0;\n    for(int i = 0; i < l.length;\
    \ ++i)\n    {\n        num = num + l[i];\n    }\n    return num;\n}\n/*\nReturn\
    \ maximum and minimum element in the array.\n    >>> max_min(1L, 2L, 3L, 4L, 5L)\n\
    \    (5L, 1L)\n    >>> max_min(0L, 2L, 3L, 4L, 5L)\n    (3L, 0L)\n    \n*/\nTuple<long,\
    \ long> max_min(long... l)\n{\n    Tuple<long, long> result = Tuple.create(l[0],\
    \ l[0]);\n    int min_idx = 1;\n    int max_idx = l.length-1;\n    for(int i =\
    \ 1; i < l.length; ++i)\n    {\n        if(l[i] > result.getValue())\n       \
    \ {\n            result.setValue(l[i]);\n            result.setIndex(min_idx);\n\
    \            min_idx = i;\n        }\n        else if(l[i] < result.getValue())\n\
    \        {\n            result.setValue(l[i]);\n            result.setIndex(max_idx);\n\
    \            max_idx = i;\n        }\n    }\n    return result;\n}\n/*\nReturn\
    \ number of items in an array that satisfy a predicate p.\n    >>> count_if(1L,\
    \ 2L, 3L, 4L, 5L, p<5, -1L>)\n    5\n    \n*/", "{\n    long max_elem = l[0];\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] > max_elem) \n   \
    \         max_elem = l[i];\n    }\n    return max_elem;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min_elem = l[0];\n    for (int i = 1; i < l.length; i++) {\n\
    \        if (l[i] < min_elem) \n            min_elem = l[i];\n    }\n    return\
    \ min_elem;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum([1,\
    \ 2, 3, 4, 5])\n    15\n    \n*/\nlong sum(long[] l) \n{\n    long s = 0;\n  \
    \  for (int i = 0; i < l.length; i++) {\n        s += l[i];\n    }\n    return\
    \ s;\n}\n/*\nReturn sum of all elements in the array.\n    >>> sum([1, 2, 3, 4,\
    \ 5])\n    15\n    \n*/\nlong sum_array(float[] l) \n{\n    long s = 0;\n    for\
    \ (int i = 0; i < l.length; i++) {\n        s += l[i];\n    }\n    return s;\n\
    }\n/*\nReturn the max value in an array.\n    >>> max([100, 200, 300])\n    300\n\
    \    \n*/\nfloat max(float[] l) \n{\n    float max_elem = l[0];\n    for (int\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > max_elem) \n            max_elem\
    \ = l[i];\n    }\n    return max_elem;\n}\n/*\nReturn the min value in an array.\n\
    \    >>> min([100, 200, 300])\n    100\n    \n*/\nfloat min(float[] l) \n{\n \
    \   float min_elem = l[0];\n    for (int i = 1; i < l.length; i++) {\n       \
    \ if (l[i] < min_elem) \n            min_elem = l[i];\n    }\n    return min_elem;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nfloat min_element(float[] l) \n{\n    float min_elem = l[0];\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < min_elem) \n   \
    \         min_elem = l[i];\n    }\n    return min_elem;\n}\n/*\nReturn sum of\
    \ all elements in the array.\n    >>> sum([1, 2, 3, 4, 5])\n    15\n    \n*/\n\
    float sum(", "{\n\tint i, j, tmp;\n\tlong max = l[0];\n\t\n\tfor (i = 1; i < l.length;\
    \ i++) \n\t{\n\t\ttmp = 0;\n\t\tfor (j = 0; j < l.length; j++) \n\t\t{\n\t\t\t\
    if (l[j] > tmp)\n\t\t\t{\n\t\t\t\ttmp = l[j];\n\t\t\t}\n\t\t}\n\t\tif (tmp > max)\
    \ \n\t\t{\n\t\t\tmax = tmp;\n\t\t}\n\t}\n\treturn max;\n}", "{\n    long max_value\
    \ = 0;\n    long i;\n    \n    for (i = 0; i < l.length; ++i) \n    {\n      \
    \  if (l[i] > max_value) \n        {\n            max_value = l[i];\n        }\n\
    \    }\n    \n    return max_value;\n}", "{\n    return std.max_element(l);\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    return std.min_element(l);\n\
    }\n/*\nReturn median element in the array.\n    >>> median_element([1L, 2L, 3L])\n\
    \    2L\n    >>> median_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    3L\n    \n*/\nlong median_element(long[] l) \n{\n    return std.median_element(l);\n\
    }\n/*\nReturn sum of all the elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -23L\n    \n*/\nlong sum_elements(long[] l)\n{\n    return std.sum_elements(l);\n\
    }\n/*\nReturn maximum element in the array.\n    >>> max_element([1L, 2L, 3L])\n\
    \    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    123L\n    \n*/\ndouble max_element(double[] l) \n{\n    return std.max_element(l);\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\ndouble min_element(double[] l) \n{\n    return std.min_element(l);\n\
    }\n/*\nReturn median element in the array.\n    >>> median_element([1L, 2L, 3L])\n\
    \    2L\n    >>> median_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    3L\n    \n*/\ndouble median_element(double[] l) \n{\n    return std.median_element(l);\n\
    }\n/*\nReturn sum of all the elements in the array.\n    >>> sum_elements([1L,\
    \ 2L, 3L])\n", "{\n\tlong result = LONG_MIN;\n\tfor (long i = 0; i < l.length;\
    \ ++i) {\n\t\tif (l[i] > result) {\n\t\t\tresult = l[i];\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n\tlong result\
    \ = LONG_MAX;\n\tfor (long i = 0; i < l.length; ++i) {\n\t\tif (l[i] < result)\
    \ {\n\t\t\tresult = l[i];\n\t\t}\n\t}\n\treturn result;\n}", "{\n    long res\
    \ = l[0];\n    for (int i = 1; i < l.length; ++i)\n        res = std.max(res,\
    \ l[i]);\n    return res;\n}\n/*\n    Function: min_element\n    -----------------------\n\
    \    \n    Function that returns minimum element of the array.\n    \n*/", "{\n\
    \tlong max = l[0];\n\tfor (int i=1; i<l.length; i++) if (l[i] > max) max = l[i];\n\
    \treturn max;\n}\n/*\nReturn the index of the first element of the array.\n  \
    \  >>> array_index_of_value([1L, 2L, 3L, 4L, 5L], 1L)\n    -1\n    >>> array_index_of_value([1L,\
    \ 2L, 3L, 4L, 5L], 2L)\n    2\n    \nThe function will return the default value\
    \ -1 when the element is not found.\n*/", "{\n\tlong lMax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++) {\n\t\tif (l[i] > lMax) \n\t\t\tlMax = l[i];\n\t}\n\
    \treturn lMax;\n}", "{\nlong result = 0L;\nforeach(long x in l)\n    result =\
    \ max(result, x);\nreturn result;\n}\n/* std.array::sort_by\n    \nReturn sorted\
    \ array.\n    \nSee also:\n\tstd.array::sort\n\tstd.array::max_by\n*/\ntemplate<class\
    \ T>\nT[] sort_by(T[] l, int func(const T&, const T&)) \n{\n    int size = l.size();\n\
    \    T* buffer = new T[size];\n    memcpy(buffer, l, sizeof(T) * size);\n    std.sort(buffer,\
    \ buffer, buffer + size, func);\n    T* buffer = new T[size];\n    memcpy(buffer,\
    \ buffer, sizeof(T) * size);\n    return buffer;\n}\n// std.array::unique\n/*\n\
    Return unique array from given array without duplicates.\n    \nSee also:\n\t\
    std.array::remove\n\tstd.array::sort\n*/\ntemplate<class T>\nT[] unique(T[] l)\
    \ \n{\n    int size = l.size();\n    T* buffer = new T[size];\n    memcpy(buffer,\
    \ l, sizeof(T) * size);\n    std.sort(buffer, buffer, buffer + size, std.less<T>());\n\
    \    T* buffer = new T[size];\n    memcpy(buffer, buffer, sizeof(T) * size);\n\
    \    T* buffer = new T[size];\n    for(int i = 0; i < size; ++i)\n        if(buffer[i]\
    \ != buffer[i + 1])\n            buffer[i ++] = buffer[i];\n    delete[] buffer;\n\
    \    return buffer;\n}\n// std.array::remove_if\n/*\nRemove all elements where\
    \ function returns true.\n    \nSee also:\n\tstd.array::filter\n*/\ntemplate<class\
    \ T>\nT[] remove_if(T[] l, int func(const T&)) \n{\n    int size = l.size();\n\
    \    T* buffer = new T[size];\n    memcpy(buffer, l, sizeof(T) * size);\n    std.sort(buffer,\
    \ buffer, buffer + size, std.less<T>());\n    T* buffer = new T[size];\n    memcpy(buffer,\
    \ buffer, sizeof(T) * size);\n    for(int i = 0; i < size; ++i)\n        if(!func(buffer[i]))\n\
    \            buffer[i ++] = buffer[i];\n    delete[] buffer;\n    return buffer;\n\
    }\n/*\nReturn array without duplicates.\n    \nSee also:\n\tstd.array::unique\n\
    */\ntemplate<class T>\nT[] remove(T[] l) \n{\n    int size = l.size();\n    T*\
    \ buffer = new T[size];\n    memcpy(buffer, l, sizeof(T) * size);", "{\n    int\
    \ i=0,j=l.length-1;\n    long max=l[0];\n    while(j>=i) \n    {\n        long\
    \ t=max;\n        if(t<l[j]) \n        {\n            max=l[j];\n        }\n \
    \       else{\n            if(t==l[j]) \n            {\n                max=l[j];\n\
    \            }\n            j--;\n        }\n    }\n    return max;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    1L\n \
    \   >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l)\n{\n    int i=0,j=l.length-1;\n    long\
    \ min=l[0];\n    while(j>=i) \n    {\n        long t=min;\n        if(t<l[j])\
    \ \n        {\n            min=l[j];\n        }\n        else{\n            if(t==l[j])\
    \ \n            {\n                min=l[j];\n            }\n            j--;\n\
    \        }\n    }\n    return min;\n}\n/*\nReturn sum of all elements in array.\n\
    \    >>> sum_elements([1L, 2L, 3L])\n    6L\n    \n*/\nlong sum_elements(long[]\
    \ l) \n{\n    int i=0,j=l.length-1;\n    long sum=0;\n    while(j>=i) \n    {\n\
    \        sum+=l[j];\n        j--;\n    }\n    return sum;\n}\n/*\nReturn mean\
    \ of all elements in array.\n    >>> mean_elements([1L, 2L, 3L])\n    2.0\n  \
    \  \n*/\ndouble mean_elements(long[] l) \n{\n    double sum=0;\n    int i=0,j=l.length-1;\n\
    \    while(j>=i) \n    {\n        sum+=l[j];\n        j--;\n    }\n    return\
    \ sum/l.length;\n}\n/*\nReturn median of all elements in array.\n    >>> median_elements([1L,\
    \ 2L, 3L])\n    2\n    \n*/\nlong median_elements(long[] l) \n{\n    long middle=l.length/2;\n\
    \    double sum=0;\n    int i=0,j=l.length-1;\n    while(j>=i) \n    {\n     \
    \   sum+=l[j];\n        j--;\n    }\n    if(l.length%2==0)\n    {\n        sum+=l[middle];\n\
    \    }\n    else\n    {\n        sum-=l[middle];\n    }\n    long num=sum/l.length;\n",
  "{\n    long max = 0;\n    for (long i = 1; i < l.length; ++ i)\n        max = max(max,\
    \ l[i]);\n    return max;\n}", "{\n\tint j;\n\tlong max;\n\tint i, pos;\n\t\n\t\
    max = l[0];\n\tpos = 1;\n\tfor (j = 1; j < l.length; j++) {\n\t\tif (l[j] > max)\
    \ {\n\t\t\tmax = l[j];\n\t\t\tpos = j;\n\t\t}\n\t}\n\treturn max;\n}", "{\n  \
    \  long maxElement = 0;\n    for(int i=0;i<l.length;i++) {\n        if(l[i] >\
    \ maxElement) maxElement = l[i];\n    }\n    return maxElement;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n \
    \   >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    0L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    long minElement = Long.MAX_VALUE;\n\
    \    for(int i=0;i<l.length;i++) {\n        if(l[i] < minElement) minElement =\
    \ l[i];\n    }\n    return minElement;\n}", "{\n\tlong max_value = 0;\n\tint i;\n\
    \t\n\tfor (i = 1; i < l.size; ++i)\n\t{\n\t\tif (l[i] > max_value)\n\t\t\tmax_value\
    \ = l[i];\n\t}\n\treturn max_value;\n}", "{\n    if (l.length == 0) \n       \
    \ throw new IllegalArgumentException(\"Empty array!\");\n    long max = l[0];\n\
    \    for (int i = 1; i < l.length; i++) \n        if (max < l[i]) \n         \
    \   max = l[i];\n    return max;\n}\n</code>\n<|/ a tags=algorithm,arrays,sorting,arraylist,java\
    \ |>\n<| c |>\nHow could i use this function inside my code?\n<|/ c |>\n<| c |>\n\
    To use it you just have to call it like this: max_element( your_list_name );\n\
    <|/ c |>\n<| c |>\nHi i used this code, but my result is different from the one\
    \ that i wanted,\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;", "{\n\tint high = l.length - 1;\n\tint low = 0; \n\t\
    long ret = 0;\n\twhile (high >= low)\n\t{\n\t\tlong mid = (high+low)/2;\n\t\t\
    if (l[mid] > l[high])\n\t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    low = mid;\n\t\t}\n\t}\n\treturn l[low];\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    0L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint high = l.length - 1;\n\tint low = 0;\n\tlong ret = 0;\n\twhile\
    \ (high >= low)\n\t{\n\t\tlong mid = (high+low)/2;\n\t\tif (l[mid] < l[high])\n\
    \t\t{\n\t\t\thigh = mid;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlow = mid;\n\t\t}\n\t\
    }\n\treturn l[low];\n}", "{\n\tlong max = l[0];\n\t\n\tfor (int i = 1; i < l.length;\
    \ i++) \n\t\tif (max < l[i]) \n\t\t\tmax = l[i];\n\t\n\treturn max;\n}", "{\n\
    \    long maxElem = l[0];\n    long imax = l[0];\n    for (size_t i = 1; i < l.size();\
    \ i++)\n        if (l[i] > maxElem)\n            maxElem = l[i];\n        \n \
    \   for (size_t i = 0; i < l.size(); i++)\n        if (l[i] == maxElem)\n    \
    \        return imax;\n        \n    return maxElem;\n}\n/*\nImplement a bubble\
    \ sort.\n*/", "{\n    long retVal = 0L;\n    int i = 0;\n    for(i = 0; i < l.length;\
    \ i++)\n    {\n       if(l[i] > retVal)\n           retVal = l[i];\n    }\n  \
    \  return retVal;\n}", "{\n    long ret = 0;\n    int i;\n    for(i=0;i<l.length;i++)\n\
    \    {\n        if(l[i]>ret)\n            ret = l[i];\n    }\n    return ret;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI really like jroyal's answer but if you\
    \ need it to be really fast, use this:\n<code>", "{\n    long res = 0;\n    long\
    \ long max = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n        res = std::max(res,\
    \ l[i]);\n        max = std::max(max, l[i]);\n    }\n    return max;\n}", "{\n\
    \    long max = 0;\n    long x = 0;\n    for(int i = 0;i < l.length;i++){\n  \
    \      x = l[i];\n        if(x > max) \n            max = x;\n    }\n    return\
    \ max;\n}", "{\n\tlong max;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l)\n{\n\tlong min;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}", "{\n\tlong res = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tres = max(res, l[i]);\n\treturn res;\n}", "{\n    long result = LONGLONG_MIN;\n\
    \    for (int i = 0; i < l.length; i++) \n    {\n        if (l[i] > result) result\
    \ = l[i];\n    }\n    return result;\n}\n/*\nReturn sum of all the elements in\
    \ the array.\n    >>> sum_of_elements([1L, 2L, 3L])\n    6L\n    >>> sum_of_elements([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    1021L\n    \n*/\nlong sum_of_elements(long[]\
    \ l) \n{\n    long result = LONGLONG_MIN;\n    for (int i = 0; i < l.length; i++)\
    \ \n    {\n        result += l[i];\n    }\n    return result;\n}\n/*\nReturn sum\
    \ of all the elements in the array.\n    >>> sum_of_elements([1L, 2L, 3L])\n \
    \   6L\n    >>> sum_of_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    1021L\n    \n*/\ndouble sum_of_elements(double[] l) \n{\n    double result\
    \ = 0.0;\n    for (int i = 0; i < l.length; i++) \n    {\n        result += l[i];\n\
    \    }\n    return result;\n}\n/*\nReturn sum of all the elements in the array.\n\
    \    >>> sum_of_elements([1L, 2L, 3L])\n    6L\n    >>> sum_of_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    1021L\n    \n*/\nfloat sum_of_elements(float[]\
    \ l) \n{\n    float result = 0.0;\n    for (int i = 0; i < l.length; i++) \n \
    \   {\n        result += l[i];\n    }\n    return result;\n}\n/*\nReturn sum of\
    \ all the elements in the array.\n    >>> sum_of_elements([1L, 2L, 3L])\n    6L\n\
    \    >>> sum_of_elements([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    1021L\n    \n*/\ndouble sum_of_elements(long l) \n{\n    double result =\
    \ 0.0;\n    for (int i = 0; i < l; i++) \n    {\n        result += i;\n    }\n\
    \    return result;\n}\n/*\nReturn sum of all the elements in the array.\n   \
    \ >>> sum_of_elements([1L, 2L, 3L])\n    6L\n    >>> sum_of_elements([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    1021L\n    \n*/\ndouble sum_of_elements(double ",
  "{\n    int i = 0;\n    long max = l[0];\n    for(size_t i = 1; i < l.length; i++)\n\
    \        if(l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> max_element([1L, 2L, 3L])\n    1L\n \
    \   >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n    int i = 0;\n    long min = l[0];\n\
    \    for(size_t i = 1; i < l.length; i++)\n        if(l[i] < min)\n          \
    \  min = l[i];\n    return min;\n}\n/*\nReturn the absolute difference of two\
    \ numbers.\n    >>> abs(10 - 1)\n    10\n    >>> abs(10 - 10000)\n    10\n   \
    \ \n*/\nlong abs(long i) \n{\n    return i >= 0 ? i : -i;\n}", "{\n    int i;\n\
    \    long max = l[0];\n    for (i=1; i<l.length; ++i) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}", "{\n\tlong\
    \ largest = 0;\n\tfor (long i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > largest)\
    \ largest = l[i];\n\t}\n\treturn largest;\n}", "{\n    long res = l[0];\n    for(int\
    \ i=0;i<l.length-1;++i)\n        res = max(res,l[i]);\n    return res;\n}", "{\n\
    \    long i, max = l[0], max_index = 0;\n    for(i = 1; i < l.length; i++) {\n\
    \        if(l[i] > max) {\n            max = l[i];\n            max_index = i;\n\
    \        }\n    }\n    return max_index;\n}\n/* This function returns the index\
    \ of first occurrence of a number in a array\n    \n        array: array to search\n\
    \        item: number to search\n    \n    return: index\n*/\nlong first_index(long[]\
    \ array, long item)\n{\n    long i;\n    for(i = 0; i < array.length; i++) {\n\
    \        if(array[i] == item)\n            return i;\n    }\n    return -1;\n\
    }\n/* This function returns the index of last occurrence of a number in a array\n\
    \    \n        array: array to search\n        item: number to search\n    \n\
    \    return: index\n*/\nlong last_index(long[] array, long item)\n{\n    long\
    \ i;\n    for(i = array.length - 1; i >= 0; i--) {\n        if(array[i] == item)\n\
    \            return i;\n    }\n    return -1;\n}\n/* This function returns the\
    \ index of given number in a array\n    \n        array: array to search\n   \
    \     item: number to search\n    \n    return: index\n*/\nlong index_of(long[]\
    \ array, long item)\n{\n    long i;\n    for(i = 0; i < array.length; i++) {\n\
    \        if(array[i] == item)\n            return i;\n    }\n    return -1;\n\
    }\n/* This function returns the index of first occurrence of a number in a array\n\
    \    \n        array: array to search\n        item: number to search\n    \n\
    \    return: index\n*/\nlong index_of_first_of(long[] array, long item)\n{\n \
    \   long i;\n    for(i = 0; i < array.length; i++) {\n        if(array[i] >= item)\n\
    \            return i;\n    }\n    return -1;\n}\n/* This function returns the\
    \ index of last occurrence of a number in a array\n    \n        array: array\
    \ to search\n        item: number to search\n    \n    return: index\n*/\nlong\
    \ index_of_last_of(long[] array, long item)\n{\n    long i;\n    for(i = array.length\
    \ - 1; i >= 0; i--) {\n        if(array[i] <= item)\n            return i;\n \
    \   }\n    return -1;\n}\n/*\n    Return minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l)\
    \ \n{\n    long i, min = l[0], min_index = 0;\n    for(i = 1; i < l.length; i++)\
    \ {\n        if(l[i] < min) {\n            min = l[i];\n            min_index\
    \ = i;\n        }\n    }\n", "{\n  int n = l.length ;\n  long max_so_far = l[0]\
    \ ;\n  for (int i = 1 ; i < n ; ++i)\n    if (l[i] > max_so_far)\n      max_so_far\
    \ = l[i] ;\n  return max_so_far ;\n}", "{\n  int i;\n  long max = l[0];\n  for\
    \ (i = 1; i < l.length; i++)\n    if (l[i] > max)\n      max = l[i];\n  return\
    \ max;\n}", "{\n    long result = l[0];\n    for (int i = 1; i < l.length; ++i)\n\
    \        if (l[i] > result) result = l[i];\n    return result;\n}", "{\n\treturn\
    \ std.math.max(l);\n}", "{\n\treturn l[math::max_index(l, 0.0)];\n}\n/*\nReturn\
    \ minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n \
    \   >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -109L\n\
    \    \n*/\nlong min_element(long[] l) \n{\n\treturn l[math::min_index(l, 0.0)];\n\
    }", "{\n  int i,j,n;\n  long max;\n  \n  n = l.length;\n  max = l[0];\n  for(i\
    \ = 1; i < n; i++)\n  {\n    if(max < l[i])\n      max = l[i];\n  }\n  return\
    \ max;\n}", "{\n\tlong max_elem = l[0];\n\tfor (long i=1;i<l.length;i++)\n\t\t\
    if (max_elem > l[i])\n\t\t\tmax_elem = l[i];\n\treturn max_elem;\n}", "{\n   \
    \ long max_num = 0;\n    long current_num = l[0];\n    \n    for(int i = 1; i\
    \ < l.length; i++) \n    {\n        if (current_num > l[i]) \n        {\n    \
    \        current_num = l[i];\n        }\n    }\n    \n    return current_num;\n\
    }", "{\n\tlong result = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t{\n\t\tif\
    \ (l[i] > result)\n\t\t\tresult = l[i];\n\t}\n\treturn result;\n}", "{\n\tlong\
    \ max = 0;\n\t\n\tforeach (long x, l)\n\t{\n\t\tif (x > max)\n\t\t\tmax = x;\n\
    \t}\n\t\n\treturn max;\n}", "{\n  long long i, max_elem, max_idx, max_value, min_value,\
    \ min_idx;\n  \n  if (l.length == 0)\n    return (0);\n  \n  max_elem = l[0];\n\
    \  max_idx = 0;\n  min_value = l[0];\n  min_idx = 1;\n  \n  for (i = 1; i < l.length;\
    \ ++i) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n      max_idx\
    \ = i;\n    }\n    else if (l[i] < min_value) {\n      min_value = l[i];\n   \
    \   min_idx = i;\n    }\n  }\n  \n  return max_value;\n}", "{\n    long result\
    \ = std.math.max_element(l);\n    return result;\n}", "{\n    long maxElement\
    \ = 0;\n    \n    for (int i = 0; i < l.length; ++i)\n    {\n        if (l[i]\
    \ > maxElement)\n            maxElement = l[i];\n    }\n    return maxElement;\n\
    }", "{\n\tlong max = 0;\n\tfor (long i = 0; i < l.length; i++)\n\t\tif (max <\
    \ l[i])\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (long i = 0; i < l.length; i++)\n\t\tif (min\
    \ > l[i])\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn average of array.\n\
    \    >>> average([1L, 2L, 3L])\n    2.0\n    >>> average([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10.0\n    \n*/\ndouble average(double[] l)\
    \ \n{\n\tlong l = 0;\n\tfor (long i = 0; i < l.length; i++)\n\t\tl += l[i];\n\t\
    return (double) l / l.length;\n}\n/*\nFind index of element in the array.\n  \
    \  >>> index([1L, 2L, 3L], 3L)\n    2\n    >>> index([5L, 3L, -5L, 2L, -3L, 3L,\
    \ 9L, 0L, 123L, 1L, -10L], -10L)\n    13\n    \n*/", "{\n    return std.math._max(l);\n\
    }", "{\n    long max_val = l[0];\n    for (int i = 1; i < l.length; i++) \n  \
    \  {\n        if (l[i] > max_val) \n        {\n            max_val = l[i];\n \
    \       }\n    }\n    return max_val;\n}", "{\n    long result = l[0];\n    for\
    \ (int i = 0; i < l.length; ++i) {\n        if (l[i] > result)\n            result\
    \ = l[i];\n    }\n    return result;\n}", "{\n    return max_element((long[])\
    \ l); \n}", "{\n    long max = l[0];\n    for (long i = 1; i < l.length; i++)\
    \ \n        if (l[i] > max)\n            max = l[i];\n    return max;\n}\n/* \n\
    Return the index of the first element in a list where \nthe predicate is true. ",
  "{\n\tlong m = l[0];\n\tfor (int i=0; i<l.length; ++i) {\n\t\tif (l[i] > m)\n\t\t\
    \tm = l[i];\n\t}\n\treturn m;\n}", "{\n    long m = Long.MIN_VALUE;\n    int i\
    \ = 0;\n    for (; i < l.length; ++i)\n    {\n        long x = l[i];\n       \
    \ if (x < m)\n            m = x;\n    }\n    return m;\n}", "{\n    long max;\n\
    \    bool maxFound = false;", "{\n    long result;\n    bool flag = false;\n \
    \   \n    for( int i=1; i<l.length; i++ )\n    {\n        if( l[i] > l[i-1] )\n\
    \        {\n            flag = true;\n            result = l[i-1];\n        }\n\
    \        else\n        {\n            if( flag == true )\n                result\
    \ = l[i-1];\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nYou will get wrong results when the first and last element of the\
    \ list are the same - it will return 1 instead of 0. In that case you should replace\
    \ the `flag` check by `result = l[i-1]`\n<|/ c |>\n<| a tags=c++,algorithm |>\n\
    Here's a solution that I believe is a bit more elegant, and also works on some\
    \ edge cases.\n<code>", "{\n    long max_value = l[0];\n    for (int i=1; i<l.length;\
    \ i++)\n        if(l[i] > max_value)\n            max_value = l[i];\n    return\
    \ max_value;\n}\n/*\nReturn minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    long min_value\
    \ = l[0];\n    for (int i=1; i<l.length; i++)\n        if(l[i] < min_value)\n\
    \            min_value = l[i];\n    return min_value;\n}", "{\n\tlong x = l[0],\
    \ v = l[1];\n\tfor(long i = 2; i < l.length; i++){\n\t\tif (l[i] > x) x = l[i];\n\
    \t\tif (v > l[i]) v = l[i];\n\t}\n\treturn v;\n}\n/*\nReturn the largest integer\
    \ that is less than or equal to the specified integer.", "{\n    long res;\n \
    \   int i;\n    for (i = 0; i < l.length; i++) \n    {\n        if(l[i] > res)\n\
    \            res = l[i];\n    }\n    return res;\n}\n</cell>\n<cell>\n%%file max_element2.dart",
  "{\n    int lo = 0, hi = l.length - 1;\n    \n    while (lo <= hi)\n    {\n    \
    \    int mid = (lo + hi) >> 1;\n        \n        if (l[mid] > l[hi])\n      \
    \  {\n            hi = mid - 1;\n        }\n        else if (mid < lo)\n     \
    \   {\n            lo = mid + 1;\n        }\n        else\n        {\n       \
    \     return l[mid];\n        }\n    }\n    return l[hi];\n}", "{\n    long max\
    \ = 0;\n    long tmp = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n    \
    \    tmp = l[i];\n        if(tmp > max)\n        {\n            max = tmp;\n \
    \       }\n    }\n    return max;\n}\n/*\nReturn sum of all the numbers in the\
    \ array.\n    >>> sum_element([1L, 2L, 3L])\n    6L\n    \n*/\nlong sum_element(long[]\
    \ l) \n{\n    long sum = 0;\n    for(int i = 0; i < l.length; ++i)\n    {\n  \
    \      sum += l[i];\n    }\n    return sum;\n}\n/*\nReturn minimum element in\
    \ the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = LONG_MAX;\n    long tmp = 0;\n    for(int i = 0; i <\
    \ l.length; ++i)\n    {\n        tmp = l[i];\n        if(tmp < min)\n        {\n\
    \            min = tmp;\n        }\n    }\n    return min;\n}\n/*\nReturn product\
    \ of all numbers in the array.\n    >>> sum_element([1L, 2L, 3L])\n    6L\n  \
    \  \n*/\nlong prod_element(long[] l) \n{\n    long prod = 1;\n    for(int i =\
    \ 0; i < l.length; ++i)\n    {\n        prod *= l[i];\n    }\n    return prod;\n\
    }\n/*\nReturn absolute value of the number.\n    >>> abs(-1)\n    1\n    >>> abs(1)\n\
    \    1\n    \n*/\nlong abs(long x) \n{\n    if(x == 0)\n    {\n        return\
    \ 0;\n    }\n    long res = (long)((x>0)?x:-x);\n    return res;\n}\n/*\nReturn\
    \ absolute value of a float.\n    >>> abs(-1.2)\n    1.2f\n    >>> abs(1.2)\n\
    \    1.2f\n    \n*/\nfloat abs(float x) \n{\n    if(x == 0)\n    {\n        return\
    \ 0;\n    }\n    float res = (float)((x>0)?x:-x);\n    return res;\n}\n/*\nReturn\
    \ absolute value of a double.\n    >>> abs(-1.2)\n    1.20\n    >>> abs(1.2)\n\
    \    1.20\n    \n*/\ndouble abs(double x) \n{\n    if(x == 0)\n    {\n       \
    \ return 0;\n    }\n    double res = (double)((x>0)?x:-x);\n    return res;\n\
    }\n/*\nReturn square root of number.\n    >>> ", "{\n  long max = 0;\n  long len\
    \ = l.length;\n  if (len > 0) \n  {\n    max = l[0];\n    for (int i = 1; i <\
    \ len; i++)\n      if (max < l[i])\n        max = l[i];\n  }\n  return max;\n}",
  "{\n  long max_element = l[0];\n  for (long i = 0; i < l.length; i++)\n  {\n   \
    \ if (l[i] > max_element)\n      max_element = l[i];\n  }\n  return max_element;\n\
    }\n/*\nReturn minimum element in the array.\n    >>> min_element([1L, 2L, 3L])\n\
    \    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -10L\n    \n*/\nlong min_element(long[] l) \n{\n  long min_element = l[0];\n\
    \  for (long i = 0; i < l.length; i++)\n  {\n    if (l[i] < min_element)\n   \
    \   min_element = l[i];\n  }\n  return min_element;\n}\n/*\nReturn absolute difference\
    \ of two vectors \n    >>> abs_diff([1L, 2L, 3L], [1L, 2L, 3L])\n    [1L, 1L,\
    \ 1L]\n    >>> abs_diff([1L, 2L, 3L], [-1L, -2L, -3L])\n    [-1L, 1L, 1L]\n  \
    \  >>> abs_diff([1L, 2L, 3L], [1L, 2L, 3L, -3L])\n    [1L, 1L, 1L, 1L]\n    >>>\
    \ abs_diff([1L, 2L, 3L], [-1L, 2L, 3L, -3L])\n    [1L, 1L, 1L, 1L]\n    >>> abs_diff([1L,\
    \ 2L, 3L], [-2L, -2L, -3L])\n    [1L, -1L, 1L, 1L]\n    >>> abs_diff([1L, 2L,\
    \ 3L], [-2L, 2L, 3L, -3L])\n    [-1L, 1L, -1L, 1L]\n    >>> abs_diff([1L, 2L,\
    \ 3L], [1L, 2L, 3L, -3L, 5L])\n    [1L, 1L, 1L, 1L, 5L]\n    \n*/\nlong[] abs_diff(long[]\
    \ u, long[] v)\n{\n  int n = u.length;\n  long[] abs_diff = new long[n];\n  for\
    \ (int i = 0; i < n; ++i)\n    abs_diff[i] = u[i] - v[i];\n  return abs_diff;\n\
    }\n/*\nReturn absolute value of an array.\n    >>> abs([-5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4])\n    [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]\n    >>> abs([0, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4])\n    [5, 4, 3, 2, 1, 0, 1, 2, 3, 4]\n    \n*/\nlong[]\
    \ abs(long[] u) \n{\n  int n = u.length;\n  long[] abs = new long[n];\n  for (int\
    \ i = 0; i < n; ++i)\n", "{\n    long max_val = l[0];\n    long max_idx = 1;",
  "{\n    int i;\n    long maxi = (long)l[0];\n    for (i = 1; i < l.length; ++i)\n\
    \        if (l[i] > maxi)\n            maxi = l[i];\n    return maxi;\n}", "{\n\
    \tlong max = l[0], i;\n\t\n\tfor (i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i]\
    \ > max)\n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}", "{\n\t\
    return std::max_element(l.begin(), l.end());\n}", "{\n    long i, x = l[0];\n\
    \    long max = x;\n    for(i = 1; i < l.length; i++) \n    {\n        if(l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;\n}\n</code>\n<|/ a tags=c++,java,algorithm\
    \ dscore=3 |>\n<| a dscore=3 tags=c++,java,algorithm |>\n<code>\npublic long max(int[]\
    \ arr) {\n    int max = arr[0];\n    for(int i : arr){\n        if(i > max)\n\
    \            max = i;\n    }\n    return max;\n}\n</code>\n<|/ a |>\n<| a tags=c++,java,algorithm\
    \ |>\nI used this algorithm for my project and it works perfect for me. I hope\
    \ it helps:\n<code>\npublic static long maxValue(long[] values) {\n    long maximum\
    \ = Long.MIN_VALUE;", "{\n    long max_el = 0, i = 0, j = 0;\n    for(j = 0; j\
    \ < l.len; ++j) \n    {\n        if(max_el < l[j]) \n        {\n            max_el\
    \ = l[j];\n        }\n    }\n    return max_el;\n}", "{\n    int leng = l.length;\n\
    \    if(leng == 0) {\n        throw new java.lang.ArrayIndexOutOfBoundsException(\"\
    Array must not be empty\");\n    }\n    if(leng == 1) {\n        return l[0];\n\
    \    }\n    int max = l[0];\n    for(int i = 1; i < leng; i++) {\n        max\
    \ = std.math._max(max, l[i]);\n    }\n    return max;\n}", "{\n    long max =\
    \ l[0], i;\n    for (i=1; i<l.length; i++)\n        if (l[i] > max)\n        \
    \    max = l[i];\n    return max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long min = l[0], i;\n    for (i=1; i<l.length; i++)\n        if\
    \ (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn maximum\
    \ element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\ndouble max_element(double[]\
    \ l) \n{\n    double max = l[0], i;\n    for (i=1; i<l.length; i++)\n        if\
    \ (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble min_element(double[]\
    \ l) \n{\n    double min = l[0], i;\n    for (i=1; i<l.length; i++)\n        if\
    \ (l[i] < min)\n            min = l[i];\n    return min;\n}\n/*\nReturn maximum\
    \ element in the array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    123L\n    \n*/\nfloat max_element(float[]\
    \ l) \n{\n    float max = l[0], i;\n    for (i=1; i<l.length; i++)\n        if\
    \ (l[i] > max)\n            max = l[i];\n    return max;\n}\n/*\nReturn minimum\
    \ element in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nfloat min_element(float[]\
    \ l) \n{\n    float min = ", "{\n    long maxVal = l[0];\n    int i;\n    for(i\
    \ = 0; i < l.length; i++)\n    {\n        if(l[i] > maxVal)\n            maxVal\
    \ = l[i];\n    }\n    return maxVal;\n}", "{\n    return std.math._max(l);\n}",
  "{\n    long res = l[0];\n    for (long i = 0; i < l.length; i++) \n    {\n    \
    \    if (l[i] > res) res = l[i];\n    }\n    return res;\n}\n/*\nReturn min element\
    \ in the array.\n    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    long res = l[0];\n    for (long i = 0; i < l.length; i++) \n   \
    \ {\n        if (l[i] < res) res = l[i];\n    }\n    return res;\n}\n/*\nReturn\
    \ absolute difference between x and y.\n    \n    abs(x, 0) = x\n    abs(x, 1)\
    \ = abs(y)\n    abs(x, y) = |x - y|\n*/\nlong abs(long x, long y)\n{\n    if (y\
    \ == 0) return x;\n    if (x == y) return x;\n    return x - y;\n}\n/*\nReturn\
    \ absolute difference between x and y.\n    \n    max(x, 0) = x\n    max(x, 1)\
    \ = max(x, y)\n    max(x, y) = max(x, |y|)\n    \n    max(y, 0) = y\n    max(y,\
    \ 1) = max(y, |x|)\n    max(y, y) = max(y, |y|)\n*/\nlong max(long x, long y)\n\
    {\n    if (x == y) return x;\n    if (y == 0) return x;\n    return y;\n}\n/*\n\
    Return absolute difference between x and y.\n    \n    min(x, 0) = x\n    min(x,\
    \ 1) = min(x, y)\n    min(x, y) = min(x, |y|)\n    \n    min(y, 0) = y\n    min(y,\
    \ 1) = min(y, |x|)\n    min(y, y) = min(y, |y|)\n*/\nlong min(long x, long y)\n\
    {\n    if (x == y) return x;\n    if (y == 0) return x;\n    return y;\n}\n/*\n\
    Return absolute difference between x and y.\n    \n    max(abs(x), abs(y)) = max(x,y)\n\
    \    min(x, abs(y)) = min(x,y)\n    \n    max(abs(x), abs(y)) = max(abs(x), abs(y))\n\
    \    min(x, abs(y)) = min(abs(x), abs(y))\n*/\nlong absdiff(long x, long y)\n\
    {\n    return max(abs(x), abs(y));\n}\n/*\nReturn absolute difference between\
    \ x and y.\n    \n    max(abs(x), abs(y)) = max(|x|, |y|)\n    min(x, abs(y))\
    \ = min(|x|, |y|)\n    \n    max(abs(", "{\n    int i = 0;\n    long max = 0;\n\
    \    for(; i < l.size; i++)\n        max = max(max, l[i]);\n    return max;\n}",
  "{\n    int n = l.length;\n    if (n == 0) return 0;\n    long res = l[0];\n   \
    \ for (int i = 1; i < n; i++) res = max(res, l[i]);\n    return res;\n}", "{\n\
    \    long max = l[0];\n    long maxIndex = -1;", "{\n    int m=0;\n    for(int\
    \ i=0;i<l.length;i++){\n        if(m<l[i])\n            m=l[i];\n    }\n    return\
    \ m;\n}\n/*\n    Return minimum element in the array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[] l) \n{\n    int m=0;\n\
    \    for(int i=0;i<l.length;i++){\n        if(m>l[i])\n            m=l[i];\n \
    \   }\n    return m;\n}\n/*\nReturn maximum element in the array.\n    >>> max_element([1L,\
    \ 2L, 3L])\n    3L\n    >>> max_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    9\n    \n*/\ndouble max_element(double[] l) \n{\n    double\
    \ m=l[0];\n    for(int i=0;i<l.length;i++){\n        if(m<l[i])\n            m=l[i];\n\
    \    }\n    return m;\n}\n/*\n    Return minimum element in the array.\n    >>>\
    \ min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L,\
    \ 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\ndouble min_element(double[]\
    \ l) \n{\n    double m=l[0];\n    for(int i=0;i<l.length;i++){\n        if(m>l[i])\n\
    \            m=l[i];\n    }\n    return m;\n}\n/*\nReturn maximum element in the\
    \ array.\n    >>> max_element([1L, 2L, 3L])\n    3L\n    >>> max_element([5L,\
    \ 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    9\n    \n*/", "{\n\tint\
    \ i;\n\tint j;\n\tint max = l[0];", "{\n    long max_so_far = l[0];\n    long\
    \ max_element = l[0];\n    for (int i = 0; i < l.length; ++i) {\n        if (l[i]\
    \ > max_so_far) {\n            max_element = l[i];\n        }\n        max_so_far\
    \ = max_so_far == l[i] ? max_element : max_so_far;\n    }\n    return max_element;\n\
    }", "{\n    long max = l[0], maxIndex = 0;\n    for (long i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] > max)\n        {\n            max = l[i];\n \
    \           maxIndex = i;\n        }\n    }\n    return maxIndex;\n}", "{\n  \
    \  int i, max = 0;\n    for (i = 0; i < l.size(); i++)\n    {\n        if (l[i]\
    \ > max)\n        {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }", "{\n  long max;\n  long i;\n  long j;", "{\n\tint i;\n\tlong max_val;\n\t\
    for(i=1; i < l.size(); i++) \n\t{\n\t\tif  (l[i] > max_val) \n\t\t{\n\t\t\tmax_val\
    \ = l[i];\n\t\t}\n\t}\n\treturn max_val;\n}", "{\n    long m = l[0];\n    for\
    \ (long i : l) if (m > i) m = i;\n    return m;\n}", "{\n\tint i;\n\tlong res;\n\
    \t\n\tfor (i = 0; i < l.length; i++)\n\t\tif (l[i] > res)\n\t\t\tres = l[i];\n\
    \t\t\n\treturn res;\n}", "{\nlong max = l[0], max_index = 0;\nfor(long i=1; i<l.length;\
    \ i++)\n{\n    if (l[i] > max)\n    {\n        max = l[i];\n        max_index\
    \ = i;\n    }\n}\nreturn max_index;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    0L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\nlong min = l[0], min_index = 0;\nfor(long i=1; i<l.length; i++)\n{\n\
    \    if (l[i] < min)\n    {\n        min = l[i];\n        min_index = i;\n   \
    \ }\n}\nreturn min_index;\n}", "{\n    return std.math['max'](l);\n}", "{\n\t\
    int i;\n\tlong max_element;\n\tfor (i = 0; i < l.size; i++) {\n\t\tif (l[i] >\
    \ max_element)\n\t\t\tmax_element = l[i];\n\t}\n\treturn max_element;\n}", "{\n\
    \tlong m = 0;\n\tfor (int i=0; i<l.length; i++)\n\t\tif (l[i] > m)\n\t\t\tm =\
    \ l[i];\n\treturn m;\n}", "{\n    if (l.length==0) \n        return 0;\n    return\
    \ l[0];\n}", "{\n\tlong res = 0;\n\tfor(int i=0;i<l.length;i++)\n\t{\n\t\tif(l[i]\
    \ > res)\n\t\t\tres = l[i];\n\t}\n\treturn res;\n}", "{\n    if (l.length == 0)\n\
    \        return 0;", "{\n    int i, n = l.length;\n    long max = l[0];\n    for\
    \ (i = 1; i < n; ++i)\n        if (max < l[i])\n            max = l[i];\n    return\
    \ max;\n}", "{\n\tlong maximum = l[0];\n\tlong i;\n\tfor(i = 1; i < l.length;\
    \ ++i)\n\t\tif(maximum > l[i])\n\t\t\tmaximum = l[i];\n\treturn maximum;\n}",
  "{\n    long max = l[0];\n    long i;\n    for (i = 1; i < l.length; i++)\n    \
    \    if (l[i] > max)\n            max = l[i];\n    return max;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=max,arrays,java,integer |>\nFor a short solution without for\
    \ loops and array.length you can try this \n<code>\n    public class MaxNumber\
    \ {\n    public static void main(String[] args) {\n        int[] numbers = new\
    \ int[]{2, 3, -4, 3, -5, -2};\n        System.out.println(\"Maximum number in\
    \ \" + Arrays.toString(numbers));\n        System.out.println(maxNumber(numbers));\n\
    \    }", "{\n    long result = 0;\n    int i;\n    for (i = 0; i <l.length; i++)\n\
    \    {\n        if (l[i] > result)\n            result = l[i];\n    }\n    return\
    \ result;\n}\n/*\nWrite a function that will sort an array and print out the sorted\
    \ array.\n    \n*/", "{\n    long result;\n    \n    if (l == null)\n      throw\
    \ new IllegalArgumentException(\"Array is null\");\n    \n    long maxValue =\
    \ l[0];\n    for (int i = 0; i < l.length; ++i) {\n      if (l[i] > maxValue)\n\
    \        maxValue = l[i];\n    }\n    \n    result = maxValue;\n    return result;\n\
    }\n    \n/**\n * Function removes duplicates from an array and returns it.\n *\
    \ \n */\nlong[] remove_duplicates(long[] l)\n{\n    if (l == null)\n      throw\
    \ new IllegalArgumentException(\"Array is null\");\n    long[] r = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length; ++i) {\n      if (l[i] != l[j])\
    \ {\n        r[i] = l[j];\n        j++;\n      }\n    }\n    return r;\n}\n  \
    \  \n/**\n * Function removes duplicates from an array and returns it.\n * \n\
    \ */\nlong[] remove_duplicates(long[] l, long val)\n{\n    if (l == null)\n  \
    \    throw new IllegalArgumentException(\"Array is null\");\n    long[] r = new\
    \ long[l.length];\n    int j = 0;\n    for (int i = 0; i < l.length; ++i) {\n\
    \      if (l[i] != val && l[i] != l[j]) {\n        r[i] = l[j];\n        j++;\n\
    \      }\n    }\n    return r;\n}\n    \n/**\n * Function removes duplicates from\
    \ an array and returns it.\n * \n */\nlong[] remove_duplicates(long[] l, int val)\n\
    {\n    if (l == null)\n      throw new IllegalArgumentException(\"Array is null\"\
    );\n    long[] r = new long[l.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < l.length; ++i) {\n      if (l[i] != val && l[i] != l[j]) {\n        r[i] =\
    \ l[j];\n        j++;\n      }\n    }\n    return r;\n}\n    \n/**\n * Function\
    \ removes duplicates from an array and returns it.\n * \n */\nlong[] remove_duplicates(long[]\
    \ l, byte val)\n{\n    if (l == null)\n      throw new IllegalArgumentException(\"\
    Array is null\");\n    long[] r = new long[l.length];\n    int j = 0;\n    for\
    \ (int i = 0; i < l.length; ++i) {\n      if (l[i] != val && l[i] != l[j]) {\n\
    \        r[i] = l[j];\n        j++;\n      }\n    }\n    return r;\n}\n    \n\
    /**\n * Function removes duplicates from an array and returns it.\n * \n */\n\
    long[] remove_duplicates(long[] l, short val)\n{\n    if (l == null)\n      throw\
    \ new IllegalArgumentException(\"Array is null\");\n    long[] r = new long[l.length];\n\
    \    int j = 0;\n    for (int i = 0; i < l.length", "{\n  long max = l[0];\n \
    \ foreach (long v, l) {\n    if (v > max)\n      max = v;\n  }\n  return max;\n\
    }", "{\n\tlong result = l[0], i;\n\tfor (int j = 1; j < l.length; ++j) \n\t{\n\
    \t\tif (l[j] > result) \n\t\t{\n\t\t\tresult = l[j];\n\t\t}\n\t}\n\treturn result;\n\
    }\n/* import std.array;\nReturn the index of the last element in the array.\n\
    \    >>> last_index([1L, 2L, 3L])\n    2\n    >>> last_index([5L, 3L, -5L, 2L,\
    \ -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    13\n    \n*/\nlong last_index(long[]\
    \ l) \n{\n\tlong i = l.length-1, result = -1;\n\tfor (int j = l.length-2; j >=\
    \ 0; --j) \n\t{\n\t\tif (l[j] > l[result]) result = j;\n\t}\n\treturn result;\n\
    }", "{\n    int i,j;\n    long max=0;\n    for(i=0;i<l.size();i++){\n        for(j=0;j<l.size();j++){\n\
    \            if(l[i]>l[j]){\n                max = l[i];\n            }\n    \
    \    }\n    }\n    return max;\n}", "{\n    // This could easily be parallelized\
    \ by using a different reduction,\n    // but this seems sufficiently efficient.\n\
    \    long res = LONG_MIN;\n    for (long i : l)\n        if (res > i) res = i;\n\
    \    return res;\n}", "{\n    long result = l[0];\n    for (long i = 0; i < l.length;\
    \ i++) {\n        if (l[i] > result) {\n            result = l[i];\n        }\n\
    \    }\n    return result;\n}", "{\n    long max = 0;\n    for (int i = 0; i <\
    \ l.length; i++) {\n        max = max(max, l[i]);\n    }\n    return max;\n}\n\
    /*\nReturn the minimum of all elements in an array.\n    >>> min_element([1L,\
    \ 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L,\
    \ 1L, -10L])\n    -10L\n*/\nlong min_element(long[] l) \n{\n    long min = LONG_MAX;\n\
    \    for (int i = 0; i < l.length; i++) {\n        min = min(min, l[i]);\n   \
    \ }\n    return min;\n}", "{\n    int i;\n    long m;\n    for(i=0;i<l.length;i++)\
    \ \n    {\n    \tif (l[i] > m)\n    \t{\n    \t\tm = l[i];\n    \t}\n    }\n \
    \   return m;\n}", "{\n    int j;\n    long max;\n    \n    max = l[0];\n    for\
    \ (j = 0; j < l.length; ++j) \n    {\n        if (max < l[j])\n            max\
    \ = l[j];\n    }\n    return max;\n}\n/*\nReturn minimum element in the array.\n\
    \    >>> min_element([1L, 2L, 3L])\n    1L\n    >>> min_element([5L, 3L, -5L,\
    \ 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -10L\n    \n*/\nlong min_element(long[]\
    \ l) \n{\n    int j;\n    long min;\n    \n    min = l[0];\n    for (j = 0; j\
    \ < l.length; ++j) \n    {\n        if (min > l[j])\n            min = l[j];\n\
    \    }\n    return min;\n}\n/*\nReturn sum of the array.\n    >>> sum([1L, 2L,\
    \ 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -123L\n    \n*/\nlong sum(long[] l)\n{\n    long sum = 0;\n    \n    for\
    \ (long i : l) \n        sum += i;\n    return sum;\n}\n/*\nReturn product of\
    \ the array.\n    >>> product([1L, 2L, 3L])\n    6L\n    >>> product([5L, 3L,\
    \ -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -1830L\n    \n*/\nlong product(long[]\
    \ l)\n{\n    long prod = 1;\n    for (long i : l) \n        prod *= i;\n    return\
    \ prod;\n}\n/*\nReturn sum of squared elements of the array.\n    >>> sum([1L,\
    \ 2L, 3L])\n    6L\n    >>> sum([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n\
    \    -11376L\n    \n*/\nlong sum(long ss)\n{\n    long sum = 0;\n    \n    for\
    \ (long i : ss) \n        sum += i * i;\n    return sum;\n}\n/*\nReturn product\
    \ of squared elements of the array.\n    >>> product([1L, 2L, 3L])\n    6L\n \
    \   >>> product([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 123L, 1L, -10L])\n    -275080L\n\
    \    \n*/\nlong product(long ss)\n{\n    long prod = 1;\n    for (", "{\n\tlong\
    \ max = 0;\n\tfor (long i = 0; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\
    \t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n    long i, max_value\
    \ = 0;", "{\n    long max = l[0];\n    for (int i = 1; i < l.size(); ++i) {\n\
    \        if (l[i] > max) \n            max = l[i];\n    }\n    return max;\n}",
  "{\n\tlong max_i = 0;\n\tlong max_j = 0;\n\t\n\tlong min = l[0];\n\t\n\tfor (int\
    \ i = 1; i < l.length; i++) {\n\t\tif (l[i] > l[max_i]) {\n\t\t\tmax_i = i;\n\t\
    \t\tmax_j = l[i];\n\t\t}\n\t\t\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\t\t\
    }\n\t}\n\t\n\treturn max_j;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
