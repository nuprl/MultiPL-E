language: d
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    /*\n       Your code here!\n\
    \    */\n    long i = 0;\n    string ret[] = new string[n];\n    while(i < s.length())\n\
    \    {\n        string temp[] = s.split(\" \");\n        for(string str : temp)\n\
    \        {\n            if(std.typecons.find(str, std.typecons.cons(n)) != -1)\n\
    \            {\n                ret[i] = str;\n                i++;\n        \
    \        break;\n            }\n        }\n    }\n    return ret;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,string,c++,algorithm,string |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include\
    \ <utility>\n#include <iterator>\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc9r3rda1.d(28): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] ret`

    /tmp/tmpc9r3rda1.d(31): Deprecation: instead of C-style syntax, use D-style syntax
    `string[] temp`

    /tmp/tmpc9r3rda1.d(32): Error: found `str` when expecting `;` following statement

    /tmp/tmpc9r3rda1.d(32): Error: expression expected, not `:`

    /tmp/tmpc9r3rda1.d(32): Error: found `temp` when expecting `;` following `for`
    condition

    /tmp/tmpc9r3rda1.d(44): Error: declaration expected, not `<`

    /tmp/tmpc9r3rda1.d(58): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(59): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(60): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(61): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(62): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(63): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(64): Error: declaration expected, not `assert`

    /tmp/tmpc9r3rda1.d(65): Error: unrecognized declaration

    Failed: ["dmd", "'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] count = new int[26];\n\
    \    int j = 0;\n    for(int i = 0; i < s.length(); i++)\n    {\n        char\
    \ letter = s[i];\n        count[letter - 'a']++;\n    }\n    for(int i = 0; i\
    \ < 26; i++)\n    {\n        if(count[i] != 0)\n        {\n            if((j >=\
    \ n) || (j < n - count[i]))\n            {\n                j += count[i];\n \
    \           }\n        }\n        else\n        {\n            j += count[i];\n\
    \        }\n    }\n    string[] ret = new string[j];\n    j = 0;\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        char letter = s[i];\n        ret[j++]\
    \ = \"\";\n        if(count[letter - 'a'] == count[letter - 'a' + 1])\n      \
    \  {\n            ret[j++] += letter;\n        }\n    }\n    return ret;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThank you, however I don't need all words, only those\
    \ with exactly n consonants. So the above code would not work.\n<|/ c |>\n<| a\
    \ tags=java |>\nI think I have found a solution which does not look very elegant,\
    \ but it works quite well (at least in Java).\n<code>\nimport java.util.Scanner;\n\
    public class Consonants {\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkhvpq00.d(58): Error: declaration expected, not `<`

    /tmp/tmpwkhvpq00.d(61): Error: unterminated character constant

    /tmp/tmpwkhvpq00.d(80): Error: `}` expected following members in `class` declaration
    at /tmp/tmpwkhvpq00.d(67)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkhvpq00.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long len = s.length();\n    if(n\
    \ == 0)\n        return \"\";\n    string[] ret = new string[len];\n    long count\
    \ = 0;\n    for(int i=0;i<len;i++)\n    {\n        char ch = s[i];\n        if(isConsonant(ch))\n\
    \        {\n            count ++;\n            if(count > n)\n            {\n\
    \                ret[count] = s;\n                count = 0;\n            }\n\
    \        }\n    }\n    return ret;\n}\n</code>\n<|/ a |>\n<| a tags=string,java\
    \ dscore=1 |>\nFor those of you who like one-liners. \n<code>\nString[] output\
    \ = Arrays.stream(str.split(\" \"))\n            .filter(s -> s.length() >= 5)\n\
    \            .sorted(Comparator.comparing(String::length))\n            .map(String::toUpperCase)\n\
    \            .toArray(String[]::new);\n</code>\n<|/ a |>\n<| c |>\nOne liners\
    \ are easy to understand.  I actually had to look up the `Comparator.comparing(String::length)`\
    \ and `toUpperCase()` methods to understand what was happening here.\n<|/ c |>\n\
    <| a |>\n<code>\npublic static void main(String[] args) {\n    Scanner input =\
    \ new Scanner(System.in);\n    System.out.println(\"Enter string\");\n    string\
    \ str = input.nextLine();\n    System.out.println(\"Enter length of word\");\n\
    \    int length = input.nextInt();\n    System.out.print(\"Result \" + select_words(str,\
    \ length));\n    input.close();\n}\nstatic String[] select_words(String str, int\
    \ length) {\n    String[] words = new String[length];\n    for (int i = 0; i <\
    \ words.length; i++){\n        String word = \"\";\n        for (int j = 0; j\
    \ < str.length(); j++){\n            if(str.charAt(j) == ' '){\n             \
    \   word += str.charAt(j);\n                words[i] = word;\n               \
    \ word = \"\";\n            }else{\n                word += str.charAt(j);\n \
    \           }\n        }\n    }\n    return words;\n}\n</code>\n<|/ a dscore=0\
    \ tags=string,java |>\n<| a tags=string,java dscore=0 |>\nFor those who are using\
    \ Java 8 or higher, you can try this way. \n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkqw5_1n2.d(44): Error: declaration expected, not `<`

    /tmp/tmpkqw5_1n2.d(54): Error: declaration expected, not `<`

    /tmp/tmpkqw5_1n2.d(63): Error: identifier expected following `.` instead of `out`

    /tmp/tmpkqw5_1n2.d(63): Error: no identifier for declarator `System`

    /tmp/tmpkqw5_1n2.d(63): Error: declaration expected, not `out`

    /tmp/tmpkqw5_1n2.d(65): Error: identifier expected following `.` instead of `out`

    /tmp/tmpkqw5_1n2.d(65): Error: no identifier for declarator `System`

    /tmp/tmpkqw5_1n2.d(65): Error: declaration expected, not `out`

    /tmp/tmpkqw5_1n2.d(67): Error: identifier expected following `.` instead of `out`

    /tmp/tmpkqw5_1n2.d(67): Error: no identifier for declarator `System`

    /tmp/tmpkqw5_1n2.d(67): Error: declaration expected, not `out`

    /tmp/tmpkqw5_1n2.d(68): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpkqw5_1n2.d(68): Error: no identifier for declarator `input.close()`

    /tmp/tmpkqw5_1n2.d(69): Error: unrecognized declaration

    Failed'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // ...\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 tags=string,arrays,java |>\n<code>\nString string = \"Mary\
    \ had a little lamb\";\n    int n = 4;\n    String[] result = new String[string.length()];\n\
    \    int count = 0;\n    for(int i = 0; i < string.length(); i++){\n        if(string.charAt(i)\
    \ != ' '){\n            String c = string.substring(i,i+1);\n            if(!c.matches(\"\
    [aeiou]\")){\n                result[count++] = c;\n            }\n        }\n\
    \    }\n    for(int i = 0; i < result.length; i++){\n        if(result[i].length()\
    \ == n){\n            System.out.println(result[i]);\n        }\n    }\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\npublic class HelloWorld{\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9sqvp9z.d(26): Error: declaration expected, not `<`

    /tmp/tmpn9sqvp9z.d(34): Error: declaration expected, not `for`

    /tmp/tmpn9sqvp9z.d(34): Error: no identifier for declarator `i`

    /tmp/tmpn9sqvp9z.d(34): Error: declaration expected, not `<`

    /tmp/tmpn9sqvp9z.d(34): Error: no identifier for declarator `i`

    /tmp/tmpn9sqvp9z.d(34): Error: declaration expected, not `++`

    /tmp/tmpn9sqvp9z.d(37): Error: declaration expected, not `if`

    /tmp/tmpn9sqvp9z.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9sqvp9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List<string> str = new List<string>();\n\
    \    \n    long countCons = 0;\n    long countSpaces = 0;\n    long countLetters\
    \ = 0;\n    \n    foreach (var letter in s)\n    {\n        \n        if (letter\
    \ == ' ') \n        {\n            countSpaces++;\n        }\n        else\n \
    \       {\n            countLetters++;\n        }\n    }\n    \n    \n    if (countSpaces\
    \ == 0)\n    {\n        foreach (var letter in s)\n        {\n            if (letter\
    \ == ' ') \n            {\n                countSpaces++;\n            }\n   \
    \         else\n            {\n                countCons++;\n                \n\
    \            }\n        }\n        \n    }\n    \n    \n    long spaces = countSpaces\
    \ / 2L;\n    long cons = countCons / 2L;\n    long letters = countLetters / 2L;\n\
    \    \n    //if (n==0)\n    //  return new string[0];\n    \n    \n    \n    \n\
    \    \n    for (int i = 0; i < s.Length; i++)\n    {\n        if (s[i] == ' '\
    \ || s[i] == '_')\n        {\n            \n            \n        }\n        else\n\
    \        {\n            if (cons > letters)\n            {\n                str.Add(s.Substring(0,\
    \ i));\n                \n            }\n            \n        }\n    }\n    \n\
    \    return str.ToArray();\n    \n}\n</code>\n<|/ a |>\n<| c |>\nI understand\
    \ that you want the code to be concise, so I will just post a shorter code. I\
    \ don't think it matters much how you get it.\n<|/ c |>\n<| c |>\nAwesome code.\
    \ Thanks a ton for helping me learn a new way of thinking.\n<|/ c |>\n<| c |>\n\
    No problem. I think your code is pretty clear. I think my code was too complicated.\
    \ I was just trying to be concise as much as I could.\n<|/ c |>\n<| c |>\nActually\
    \ I was about to post my own code, but I decided to try my own way and see if\
    \ it was any better. :)\n<|/ c |>\n<| c |>\nActually, your code is definitely\
    \ more elegant, and better than my original code. I'm just really new to programming\
    \ and I still try to grasp some basics. Thanks again for sharing your knowledge\
    \ and taking the time to help me learn. :)\n<|/ c |>\n<| a |>\nHere you go. \n\
    It will use a single loop to iterate over the characters of your string. \nWhen\
    \ it encounters a space, the current character is added to a list called word\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpitxqn2vp.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpitxqn2vp.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpitxqn2vp.d(24): Error: expression expected, not `)`

    /tmp/tmpitxqn2vp.d(24): Error: found `;` when expecting `)`

    /tmp/tmpitxqn2vp.d(26): Error: found `long` when expecting `;` following statement

    /tmp/tmpitxqn2vp.d(30): Error: found `in` when expecting `;`

    /tmp/tmpitxqn2vp.d(46): Error: found `in` when expecting `;`

    /tmp/tmpitxqn2vp.d(94): Error: declaration expected, not `<`

    /tmp/tmpitxqn2vp.d(97): Error: unterminated character constant

    /tmp/tmpitxqn2vp.d(109): Error: unterminated character constant

    /tmp/tmpitxqn2vp.d(119): Error: declaration expected, not `assert`

    /tmp/tmpitxqn2vp.d(120): Error: declaration expected, not `assert`

    /tmp/tmpitxqn2vp.d(121): Error: declaration expected, not `assert`

    /tmp/tmpitxqn2vp.d(122): Error: declaration expected, not `assert`

    /tmp/tmpitxqn2vp.d(123): Error: declaration expected, not `assert`

    /tmp/tmpitxqn2vp'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result=new string[1];\n\
    \    stack<string> st=new stack<string>();\n    \n    foreach(char a in s)\n \
    \   {\n        if(char.GetNumericValue(a)>=n)\n        {\n            st.Push(a);\n\
    \        }\n        else\n        {\n            while(st.size()>0)\n        \
    \    {\n                char z=st.Pop();\n                if(a==z)\n         \
    \       {\n                    st=new stack<string>();\n                    result[0]=z;\n\
    \                    break;\n                }\n                else\n       \
    \         {\n                    foreach(char z in s)\n                    {\n\
    \                        if(a==z)\n                        {\n               \
    \             st.Push(a);\n                            break;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    if(st.size()>0)\n    {\n        foreach(char z in s)\n      \
    \  {\n            foreach(char z2 in s)\n            {\n                if(z==z2)\n\
    \                {\n                    st.Push(z);\n                }\n     \
    \       }\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nJust to give another solution, since I haven't seen a lot of answers\
    \ here that take advantage of dynamic arrays:\n<code>\npublic static string GetLongestWord(string\
    \ input, int count)\n{\n    string[] words = input.Split(' ');\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxdvndakh.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpxdvndakh.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpxdvndakh.d(25): Error: expression expected, not `)`

    /tmp/tmpxdvndakh.d(25): Error: found `;` when expecting `)`

    /tmp/tmpxdvndakh.d(27): Error: found `foreach` when expecting `;` following statement

    /tmp/tmpxdvndakh.d(27): Error: found `in` when expecting `)`

    /tmp/tmpxdvndakh.d(27): Error: missing `{ ... }` for function literal

    /tmp/tmpxdvndakh.d(27): Error: found `s` when expecting `;` following statement

    /tmp/tmpxdvndakh.d(27): Error: found `)` instead of statement

    /tmp/tmpxdvndakh.d(33): Error: declaration expected, not `else`

    /tmp/tmpxdvndakh.d(38): Error: declaration expected, not `if`

    /tmp/tmpxdvndakh.d(41): Error: no identifier for declarator `result[0]`

    /tmp/tmpxdvndakh.d(41): Error: declaration expected, not `=`

    /tmp/tmpxdvndakh.d(42): Error: declaration expected, not `break`

    /tmp/tmpxdvndakh.d(43): Error: unrecognized declaration

    Faile'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    char[] vowels = \"aeiouAEIOU\"\
    .toCharArray();\n    int[] freq = countChar(s,vowels);\n    ArrayList result =\
    \ new ArrayList();\n    long count = 1;\n    for(int i = 0;i < freq.length;i++){\n\
    \        count *= freq[i];\n        if(count > n)\n            break;\n    }\n\
    \    while(true){\n        ArrayList<String> words = new ArrayList();\n      \
    \  while(count>0){\n            int idx = Arrays.binarySearch(freq,count);\n \
    \           String word = s.substring(0,idx);\n            words.add(word);\n\
    \            count = count - freq[idx];\n        }\n        if(words.isEmpty())\n\
    \            break;\n        result.addAll(words);\n    }\n    return result.toArray(new\
    \ String[0]);\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4mawzc4.d(34): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4mawzc4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List<string> res =new List<string>();\n\
    \    int l=s.length();\n    int k=0;\n    int m=0;\n    while(n>0 && k<l)\n  \
    \  {\n        m=n%2==1?1:0;\n        while(m==0)\n        {\n            m=n%2==1?1:0;\n\
    \            n=n/2;\n        }\n        if(m==1)\n        {\n            res.Add(s.Substring(k,\
    \ n-k));\n            k=k;\n        }\n        n=n/2;\n    }\n    return res.ToArray();\n\
    }\n</code>\n<|/ a dscore=2 tags=c#,string,algorithm,arrays |>\n<| a dscore=1 tags=c#,string,algorithm,arrays\
    \ |>\nIn one line you can get all the consonants using LINQ.\n<code>\nvar consonants\
    \ = new[] { \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\" };\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe22oao58.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpe22oao58.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpe22oao58.d(24): Error: expression expected, not `)`

    /tmp/tmpe22oao58.d(24): Error: found `;` when expecting `)`

    /tmp/tmpe22oao58.d(25): Error: found `int` when expecting `;` following statement

    /tmp/tmpe22oao58.d(45): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe22oao58.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    char c = s.first();\n    \n \
    \   if(s.length() == 0){\n        return new string[0];\n    }\n    \n    List<string>\
    \ results = new List<string>();\n    \n    for(auto word : s.split_by_whitespace()){\n\
    \        char wordChar = word.first();\n        \n        if(word.size() == n)\n\
    \        {\n            if(n == 1){\n                results.push_back(wordChar);\n\
    \            }\n            else{\n                if(wordChar == c){\n      \
    \              results.push_back(word);\n                }\n            }\n  \
    \      }\n        \n    }\n    return results;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqdvodjd3.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpqdvodjd3.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpqdvodjd3.d(30): Error: expression expected, not `)`

    /tmp/tmpqdvodjd3.d(30): Error: found `;` when expecting `)`

    /tmp/tmpqdvodjd3.d(32): Error: found `for` when expecting `;` following statement

    /tmp/tmpqdvodjd3.d(32): Error: found `:` when expecting `)`

    /tmp/tmpqdvodjd3.d(32): Error: missing `{ ... }` for function literal

    /tmp/tmpqdvodjd3.d(32): Error: found `s` when expecting `;` following statement

    /tmp/tmpqdvodjd3.d(32): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqdvodjd3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string s1 = s.trim(); //remove\
    \ leading and trailing whitespace\n    string cons = \"bcdfghjklmnpqrstvwxyz\"\
    ; //consonants \n    string vowls = \"aeiou\"; //vowels\n    long numcons = s.length();\n\
    \    long numvow = s2.length();\n    \n    long totalnumcons = 0;\n    long totalnumvow\
    \ = 0;\n    \n    if (n == 0) \n        return [];\n    \n    string s2;\n   \
    \ for (; n < numcons; n++) \n    {\n        int numvows = s1.length();\n     \
    \   s2 = s1.substring(0, n); //s2 contains only consonants of s1\n        totalnumvow\
    \ += numvows;\n        if (s2.contains(cons)) \n        {\n            totalnumcons\
    \ += numvows;\n        }\n    }\n    \n    string[] ans;\n    if (totalnumcons\
    \ == numcons) \n    {\n        ans = new string[totalnumvow];\n        for (long\
    \ i = 0; i < totalnumvow; i++) \n        {\n            ans[i] = s2.substring(i,\
    \ i + numvows);\n        }\n        return ans;\n    }\n    if (n == numcons)\
    \ \n    {\n        ans = new string[totalnumvow];\n        for (long i = 0; i\
    \ < totalnumvow; i++) \n        {\n            ans[i] = s2.substring(i); \n  \
    \      }\n        return ans;\n    }\n    else\n    {\n        ans = new string[totalnumvow];\n\
    \        for (long i = 0; i < totalnumvow; i++) \n        {\n            ans[i]\
    \ = s2.substring(0, n);\n        }\n        return ans;\n    }\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=java,algorithm |>\nThis is a solution using Java 8\
    \ streams and regular expressions:\n<code>\npublic static String[] getAllWords(String\
    \ input, int n) {\n    List<String> result = new ArrayList<>();\n    \n    result.addAll(input.split(\"\
    \\\\s\"));\n    \n    Predicate<String> predicate = str -> str.split(\"\\\\s\"\
    )\n            .reduce(new StringBuilder(), (builder, word) -> builder.append(word).append('\
    \ '))\n            .toString()\n            .matches(\n                    Pattern.compile(\n\
    \                            \".*\" + Pattern.quote(input)\n                 \
    \                   .replaceAll(\"\\\\s\", \"\") + \"[aeiouy]\\\\s.*\"\n     \
    \               )\n            );\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplr8quwp3.d(77): Error: declaration expected, not `<`

    /tmp/tmplr8quwp3.d(85): Error: unexpected `(` in declarator

    /tmp/tmplr8quwp3.d(85): Error: unexpected `(` in declarator

    /tmp/tmplr8quwp3.d(85): Error: basic type expected, not `"\\s"`

    /tmp/tmplr8quwp3.d(85): Error: found `"\\s"` when expecting `)`

    /tmp/tmplr8quwp3.d(85): Error: no identifier for declarator `result.addAll(input.split(_error_))`

    /tmp/tmplr8quwp3.d(85): Error: semicolon expected following function declaration

    /tmp/tmplr8quwp3.d(85): Error: declaration expected, not `)`

    /tmp/tmplr8quwp3.d(87): Error: no identifier for declarator `Predicate`

    /tmp/tmplr8quwp3.d(87): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplr8quwp3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = new string[s.length()];\n\
    \    for (int i = 0; i<s.length(); i++) {\n        if (std.string.length(n) ==\
    \ 0) \n        {\n            words[i] = \"\";\n        } \n        else \n  \
    \      {\n            for (int j = i; j < s.length(); j++) {\n               \
    \ if (s.charAt(j) != std.char.find(s.charAt(i), std.typecons.char.CONSONANTS))\n\
    \                {\n                    break;\n                }\n          \
    \  }\n            words[i] = s.substring(i, j);\n            i = j;\n        }\n\
    \    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc36b7cbj.d(33): Error: identifier expected following `.`, not `char`

    /tmp/tmpc36b7cbj.d(33): Error: identifier expected following `.`, not `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc36b7cbj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    //Complete this function\n  \
    \  std.array<string, 1> a; \n    std.array<string, 1> b;\n    std.array<string,\
    \ 1> c;\n    int i;\n    int j;\n    int k;\n    long k;\n    long length;\n \
    \   long current;\n    int count;\n    string str = \"\";\n    string word = \"\
    \";\n    \n    length = (int)s.length();\n    current = 1L;\n    count = 0;\n\
    \    str = s;\n    for(i = 0; i < length; i++)\n    {\n        word = s.substr(i,\
    \ 1);\n        count = 0;\n        for(j = 0; j < str.length(); j++)\n       \
    \ {\n            str[j] = tolower(str[j]);\n            switch(str[j])\n     \
    \       {\n                case 'a':\n                case 'e':\n            \
    \    case 'i':\n                case 'o':\n                case 'u':\n       \
    \             count++;\n                    break;\n            }\n        }\n\
    \        if(count >= n)\n        {\n            a = std.array<string, 1>(1);\n\
    \            a[current] = word;\n            current++;\n            count++;\n\
    \        }\n    }\n    for(i = 0; i < length; i++)\n    {\n        word = s.substr(i,\
    \ 1);\n        count = 0;\n        for(j = 0; j < str.length(); j++)\n       \
    \ {\n            str[j] = tolower(str[j]);\n            switch(str[j])\n     \
    \       {\n                case 'a':\n                case 'e':\n            \
    \    case 'i':\n                case 'o':\n                case 'u':\n       \
    \             count++;\n                    break;\n            }\n        }\n\
    \        if(count != n)\n        {\n            b = std.array<string, 1>(1);\n\
    \            b[current] = word;\n            current++;\n            count++;\n\
    \        }\n    }\n    for(i = 0; i < length; i++)\n    {\n        word = s.substr(i,\
    \ 1);\n        count = 0;\n        for(j = 0; j < str.length(); j++)\n       \
    \ {\n            str[j] = tolower(str[j]);\n            switch(str[j])\n     \
    \       {\n                case 'a':\n                case 'e':\n            \
    \    case 'i':\n                case 'o':\n                case 'u':\n       \
    \             count++;\n                    break;\n            }\n        }\n\
    \        if(count != n)\n        {\n            c = std.array<string, 1>(1);\n\
    \            c[current] = word;\n            current++;\n            count++;\n\
    \        }\n    }\n    return std.array<string, 1>(a);\n}\n</code>\n}\n<|/ a dscore=2\
    \ |>\n<| c |>\nHi, thanks for your help. But I don't think it's working. It gives\
    \ me the wrong result for most tests. Can you give me a more detailed explanation\
    \ of what to do?\n<|/ c |>\n<| c |>\n: I'm really sorry, but I don't \nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpntimhn0d.d(38): Error: C style cast illegal, use `cast(int)s.length()`

    /tmp/tmpntimhn0d.d(122): Error: declaration expected, not `<`

    /tmp/tmpntimhn0d.d(126): Error: unterminated character constant

    /tmp/tmpntimhn0d.d(126): Error: unterminated character constant

    /tmp/tmpntimhn0d.d(129): Error: unterminated character constant

    /tmp/tmpntimhn0d.d(129): Error: unterminated character constant

    /tmp/tmpntimhn0d.d(134): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(135): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(136): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(137): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(138): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(139): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(140): Error: declaration expected, not `assert`

    /tmp/tmpntimhn0d.d(141): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpntimhn0d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int len = s.length();\n    if\
    \ (len < 1)\n        return new[]{};\n    \n    bool flag = true;\n    \n    StringBuilder\
    \ res = new StringBuilder();\n    \n    long curWordCount = 0;\n    int i = 0;\n\
    \    while (i < len) {\n        int letter = s.codePointAt(i);\n        if (letter\
    \ < 128) {\n            \n            if (flag == false)\n            {\n    \
    \            curWordCount++;\n                flag = true;\n                \n\
    \                while (curWordCount < n) {\n                    if (i + 1 < len)\
    \ {\n                        letter = s.codePointAt(i + 1);\n                \
    \        i++;\n                    } else {\n                        curWordCount\
    \ = 0;\n                        flag = false;\n                        break;\n\
    \                    }\n                }\n                \n                if\
    \ (curWordCount == n) {\n                    res.append(s.subSequence(0, i));\n\
    \                }\n                curWordCount = 0;\n                i++;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  \n        if (letter == 0) \n            i++;\n    }\n    \n    return res.toString().split(\"\
    \\\\s+\");\n}\n</cell>\n<text>\n2.2. Solution using C# .NET methods\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppm7iv_0w.d(26): Error: basic type expected, not `[`

    /tmp/tmppm7iv_0w.d(26): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmppm7iv_0w.d(34): Error: declaration expected, not `while`

    /tmp/tmppm7iv_0w.d(36): Error: declaration expected, not `if`

    /tmp/tmppm7iv_0w.d(41): Error: no identifier for declarator `flag`

    /tmp/tmppm7iv_0w.d(41): Error: declaration expected, not `=`

    /tmp/tmppm7iv_0w.d(43): Error: declaration expected, not `while`

    /tmp/tmppm7iv_0w.d(46): Error: no identifier for declarator `i`

    /tmp/tmppm7iv_0w.d(46): Error: declaration expected, not `++`

    /tmp/tmppm7iv_0w.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppm7iv_0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] w = new string[4];\n\
    \    int start = 0;\n    string temp = \"\";\n    for(int i = 0; i < s.Length;\
    \ i++)\n    {\n        temp = temp + s[i];\n    }\n    for(int i = 0; i < temp.Length;\
    \ i++)\n    {\n        if(temp[i] == ' ')\n        {\n            for(int k =\
    \ start; k < temp.Length-1; k++)\n            {\n                if(temp[k] ==\
    \ ' ' && temp[k+1] != ' ')\n                {\n                    w[2] = w[2]\
    \ + w[1];\n                    start = k + 1;\n                }\n           \
    \ }\n            start = temp.Length;\n        }\n    }\n    for(int i = 0; i\
    \ < temp.Length; i++)\n    {\n        if(temp[i] == ' ')\n        {\n        \
    \    for(int k = start; k < temp.Length-1; k++)\n            {\n             \
    \   if(temp[k] == ' ' && temp[k+1] != ' ')\n                {\n              \
    \      w[3] = w[3] + w[2];\n                    start = k + 1;\n             \
    \   }\n            }\n            start = temp.Length;\n        }\n    }\n   \
    \ w = w[0] > w[1] ? w[0] > w[2] ? w[0] > w[3] ? w : w[3] : w[2] : w[1];\n    return\
    \ w;\n}\n</code>\n<|/ a tags=recursion,c# |>\n<| c |>\nWhy `return w[0] > w[1]\
    \ ? w[0] > w[2] ? w[0] > w[3] ? w : w[3] : w[2] : w[1];` and not `return w[0]\
    \ > w[1] ? w[0] > w[2] ? w[0] > w[3] ? w : w[3] : w[1] : w;`\n<|/ c |>\n<| c |>\n\
    It's a little clearer with the second option, but yes it could be written out\
    \ as `return w[0] > w[1] ? w : w[0] > w[2] ? w : w[0] > w[3] ? w : w;`.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI believe a more general solution would be to use regular\
    \ expressions and get the words out in a single run.  A solution using regular\
    \ expressions would look something like this:\n<code>\npublic string[] GetConsonants(string\
    \ word, int count)\n{\n    string[] result = new string[4];\n    string pattern\
    \ = string.Empty;\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpua8wvvp5.d(64): Error: declaration expected, not `<`

    /tmp/tmpua8wvvp5.d(70): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpua8wvvp5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long result = 0;\n    stack<string>\
    \ wordstack;\n    char currchar;\n    \n    for (long i = 0; i<s.length(); i++)\n\
    \    {\n        currchar = s[i];\n        \n        if (i==0 && currchar=='A')\n\
    \        {\n            wordstack.push(\"a\");\n        }\n        if (i==0 &&\
    \ currchar=='B')\n        {\n            wordstack.push(\"b\");\n        }\n \
    \       if (i==0 && currchar=='C')\n        {\n            wordstack.push(\"c\"\
    );\n        }\n        if (i==0 && currchar=='D')\n        {\n            wordstack.push(\"\
    d\");\n        }\n        if (i==0 && currchar=='E')\n        {\n            wordstack.push(\"\
    e\");\n        }\n        if (i==0 && currchar=='F')\n        {\n            wordstack.push(\"\
    f\");\n        }\n        if (i==0 && currchar=='G')\n        {\n            wordstack.push(\"\
    g\");\n        }\n        if (i==0 && currchar=='H')\n        {\n            wordstack.push(\"\
    h\");\n        }\n        if (i==0 && currchar=='I')\n        {\n            wordstack.push(\"\
    i\");\n        }\n        if (i==0 && currchar=='J')\n        {\n            wordstack.push(\"\
    j\");\n        }\n        if (i==0 && currchar=='K')\n        {\n            wordstack.push(\"\
    k\");\n        }\n        if (i==0 && currchar=='L')\n        {\n            wordstack.push(\"\
    l\");\n        }\n        if (i==0 && currchar=='M')\n        {\n            wordstack.push(\"\
    m\");\n        }\n        if (i==0 && currchar=='N')\n        {\n            wordstack.push(\"\
    n\");\n        }\n        if (i==0 && currchar=='O')\n        {\n            wordstack.push(\"\
    o\");\n        }\n        if (i==0 && currchar=='P')\n        {\n            wordstack.push(\"\
    p\");\n        }\n        if (i==0 && currchar=='Q')\n        {\n            wordstack.push(\"\
    q\");\n        }\n        if (i==0 && currchar=='R')\n        {\n            wordstack.push(\"\
    r\");\n        }\n        if (i==0 && currchar=='S')\n        {\n            wordstack.push(\"\
    s\");\n        }\n        if (i==0 && currchar=='T')\n        {\n            wordstack.push(\"\
    t\");\n        }\n        if (i==0 && currchar=='U')\n        {\n            wordstack.push(\"\
    u\");\n        }\n        if (i==0 && currchar=='V')\n        {\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy98tws3o.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpy98tws3o.d(118): Error: found `unittest` instead of statement

    /tmp/tmpy98tws3o.d(130): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpy98tws3o.d(130): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy98tws3o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] consonants = {0, 0};\n\
    \    string res = \"\";\n    foreach(char a : s)\n    {\n        if(a == 'a' ||\
    \ a == 'e' || a == 'i' || a == 'o' || a == 'u' || a == 'y')\n        {\n     \
    \       consonants[0]++;\n        }\n        if(a == 'e' || a == 'i' || a == 'o'\
    \ || a == 'u' || a == 'y')\n        {\n            consonants[1]++;\n        }\n\
    \    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqwlw0w2m.d(26): Error: found `:` when expecting `;`

    /tmp/tmpqwlw0w2m.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwlw0w2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] w;\n    int cnt = 0;\n\
    \    foreach(char c in s)\n    {\n        cnt++;\n        if(c == 'p' || c ==\
    \ 't' || c == 'd' || c == 'l' || c == 'e')\n        {\n            if(cnt >= n)\n\
    \            {\n                w = new string[cnt];\n                for(int\
    \ i = 0; i < cnt; i++)\n                {\n                    w[i] = s.substr(0,\
    \ i);\n                }\n                return w;\n            }\n        }\n\
    \    }\n    return w;\n}\n</code>\n<|/ a tags=algorithm,arrays,c# |>\n<| c |>\n\
    It would be better to use the LINQ `TakeWhile` method instead of writing your\
    \ own loop.\n<|/ c |>\n<| c |>\n`var ws = SelectWords(\"Mary had a little lamb\"\
    , 4);` wouldn't it be better to use `Count` instead of `Length`? And shouldn't\
    \ it be `foreach(char c in s)`?\n<|/ c |>\n<| c |>\nYou don't need to count the\
    \ number of elements. Take method will do that for you.\n<|/ c |>\n<| c |>\nHow\
    \ is `Count` better than `Length`? They do the same thing. The length property\
    \ isn't a method but a property which returns the length of an array. So why would\
    \ you use an extra method to call Length if you can just call it?\n<|/ c |>\n\
    <| a tags=algorithm,arrays,c# |>\nHere's another solution that doesn't use LINQ.\
    \ This solution also ensures that no word is repeated twice, by using a Set<T>.\n\
    <code>\nstring[] SelectWords(string s, int n)\n{\n    HashSet<string> words =\
    \ new HashSet<string>();\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbi4sji6b.d(26): Error: found `in` when expecting `;`

    /tmp/tmpbi4sji6b.d(44): Error: declaration expected, not `<`

    /tmp/tmpbi4sji6b.d(50): Error: unterminated character constant

    /tmp/tmpbi4sji6b.d(50): Error: unterminated character constant

    /tmp/tmpbi4sji6b.d(53): Error: unterminated character constant

    /tmp/tmpbi4sji6b.d(56): Error: unterminated character constant

    /tmp/tmpbi4sji6b.d(59): Error: unterminated character constant

    /tmp/tmpbi4sji6b.d(59): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbi4sji6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long count=0;\n    string[] a=new\
    \ string[0];\n    int i,j;\n    for(i=0;i<s.length();i++)\n    {\n        for(j=0;j<s.length();j++)\n\
    \        {\n            if(s[i]==s[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    for(i=0;i<s.length();i++)\n    {\n     \
    \   if(count==n)\n        {\n            a=append(a,s.substr(i,1));\n        }\n\
    \        count=0;\n        for(j=0;j<s.length();j++)\n        {\n            if(s[i]==s[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return a;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_q5sl5gr.d(27): Error: no property `length` for type `string`

    /tmp/tmp_q5sl5gr.d(29): Error: no property `length` for type `string`

    /tmp/tmp_q5sl5gr.d(37): Error: no property `length` for type `string`

    /tmp/tmp_q5sl5gr.d(41): Error: undefined identifier `append`

    /tmp/tmp_q5sl5gr.d(44): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_q5sl5gr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int i=0;\n    int j=s.length();\n\
    \    bool cons = true;\n    int counter = 0;\n    int len = 0;\n    string[] result\
    \ = new string[j];\n    while(cons)\n    {\n        cons=false;\n        while(i\
    \ < j && counter == 0)\n        {\n            if((s[i]=='a' || s[i]=='e' || s[i]=='i'\
    \ || s[i]=='o' || s[i]=='u') && \n                (n == 0 || n >= (s.length()-i)))\n\
    \            {\n                counter++;\n                result.add(s.substring(i,j));\n\
    \            }\n            i++;\n        }\n        len = s.length();\n     \
    \   j--;\n        if(s.length() == 0)\n        {\n            break;\n       \
    \ }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 tags=string,algorithm,c++\
    \ |>\n<| a |>\nHere is my solution in Python 3. This solution has only O(1) space,\
    \ and doesn't use any additional space for the sorted list.\n<code>\ndef select_words(s,\
    \ n):\n    # create empty string array\n    result = []\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31ewrsn8.d(52): Error: declaration expected, not `<`

    /tmp/tmp31ewrsn8.d(55): Error: unterminated character constant

    /tmp/tmp31ewrsn8.d(64): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(65): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(66): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(67): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(68): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(69): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(70): Error: declaration expected, not `assert`

    /tmp/tmp31ewrsn8.d(71): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31ewrsn8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List <string> result = new List<string>();\n\
    \    ContiguousSet<string> seenWords = new ContiguousSet<string>();\n    foreach(string\
    \ word in s.split(\" \"))\n    {\n        if (word.Length == n) \n        {\n\
    \            seenWords.add(word);\n        }\n        else\n        {\n      \
    \      foreach(char c in word)\n            {\n                if (seenWords.contains(c))\
    \ continue;\n                result.add(word);\n            }\n        }\n   \
    \ }\n    return toArray(result);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ take into account the fact that \"a little lamb\" contains two consonants, but\
    \ it does give me a couple of ideas on how to go about writing it.\n<|/ c |>\n\
    <| c |>\nGood luck! Let me know if you have any questions. Good luck!\n<|/ c |>\n\
    <| a tags=algorithm,string,java,arraylist |>\nThis is a fairly brute force approach,\
    \ with a little pre-computation by hashing each word of length n, counting consonants,\
    \ and adding them to an array:\n<code>\nString[] res = new String[26];\nfor (int\
    \ i=0; i<s.length(); i++) {\n    char c = s.charAt(i);\n    for (int j=0; j<26;\
    \ j++) {\n        if (c.equals(String.valueOf(j))) {\n            res[j] += (c=='\\\
    0' ? '' : c);\n        }\n    }\n}\nArrays.sort(res);\n</code>\nThen the results\
    \ are in res[26].\n<|/ a dscore=1 |>\n<| c |>\nI like this because it doesn't\
    \ require a nested loop. I'm not entirely clear on why you need the second loop.\n\
    <|/ c |>\n<| c |>\nI'm sure someone will come up with a more efficient approach,\
    \ but this was the quickest I could come up with.\n<|/ c |>\n<| c |>\nI like the\
    \ way you did it.  This is basically what the OP was asking for.\n<|/ c |>\n<|\
    \ c |>\nBut you might as well have just added a map of \"A\" to \"a\", \"B\" to\
    \ \"b\", \"C\" to \"c\" etc...\n<|/ c |>\n<| c |>\n: Yes, a map would be better.\n\
    <|/ c |>\n<| a |>\n<code>\nimport java.util.*;\nimport java.util.concurrent.*;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbjosw9ev.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpbjosw9ev.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpbjosw9ev.d(24): Error: expression expected, not `)`

    /tmp/tmpbjosw9ev.d(24): Error: found `;` when expecting `)`

    /tmp/tmpbjosw9ev.d(25): Error: found `ContiguousSet` when expecting `;` following
    statement

    /tmp/tmpbjosw9ev.d(25): Error: found `<` instead of statement

    /tmp/tmpbjosw9ev.d(26): Error: found `in` when expecting `;`

    /tmp/tmpbjosw9ev.d(34): Error: found `in` when expecting `;`

    /tmp/tmpbjosw9ev.d(43): Error: declaration expected, not `<`

    /tmp/tmpbjosw9ev.d(46): Error: unterminated character constant

    /tmp/tmpbjosw9ev.d(55): Error: declaration expected, not `for`

    /tmp/tmpbjosw9ev.d(55): Error: no identifier for declarator `i`

    /tmp/tmpbjosw9ev.d(55): Error: declaration expected, not `<`

    /tmp/tmpbjosw9ev.d(55): Error: no identifier for declarator `i`

    /tmp/tmpbjosw9ev.d(55): Error: declaration expected, not `++`

    /tmp/tmpbjosw9ev.d(57): Error:'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    /*\n    Convert s to an array,\
    \ then sort it alphabetically.\n    \n    Convert s to an array, then sort it\
    \ alphabetically.\n    \n    Convert s to an array, then sort it alphabetically.\n\
    \    */\n    string[] a = s.split(\" \");\n    Arrays.sort(a);\n    return a;\n\
    }\n</code>\n<|/ a dscore=0 tags=string,python |>\n<| a dscore=0 tags=string,python\
    \ |>\n<code>\ndef select_words(word, n):\n    \n    def count_chars(word):\n \
    \       \n        count = 0\n        \n        for char in word:\n           \
    \ if char in \"aeiou\":\n                count += 1\n        \n        return\
    \ count\n    \n    word_array = []\n    \n    str_len = len(word)\n    \n    count\
    \ = 0\n    \n    if str_len == 0:\n        \n        \n        word_array = []\n\
    \        \n    else:\n        \n        \n        \n        \n        for i in\
    \ range(str_len):\n            \n            \n            if count_chars(word)\
    \ == n:\n                \n                word_array.append(word[i])\n      \
    \          \n            else:\n                \n                count += count_chars(word[i])\n\
    \                \n                if count == n:\n                    \n    \
    \                \n                    word_array.append(word[i])\n          \
    \          \n                    \n                    \n        if count == n:\n\
    \            \n            \n            word_array.append(word[str_len-1])\n\
    \            \n        else:\n            \n            \n            for i in\
    \ range(str_len):\n                \n                \n                if count_chars(word)\
    \ == n:\n                    \n                    word_array.append(word[i])\n\
    \                    \n                else:\n                    \n         \
    \           count += count_chars(word[i])\n                    \n            \
    \        if count == n:\n                        \n                        \n\
    \                        word_array.append(word[i])\n                        \n\
    \                        \n                        \n        if count == n:\n\
    \            \n            \n            word_array.append(word[0])\n        \
    \    \n        else:\n            \n            \n            word_array.append(word[0])\n\
    \            \n    return word_array\n</code>\n<|/ a |>\n<| a |>\nUsing regular\
    \ expressions is the right way and more readable than my solution. My solution\
    \ should work too but in my opinion is less readable. \n<code>\nimport re\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyva2083d.d(35): Error: declaration expected, not `<`

    /tmp/tmpyva2083d.d(132): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(133): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(134): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(135): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(136): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(137): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(138): Error: declaration expected, not `assert`

    /tmp/tmpyva2083d.d(139): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyva2083d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string [] words = { \"\" };\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp615finv5.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp615finv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(n == 0)\n        return [];\n\
    \    string subStr = s.split(\" \");\n    string[] words = new string[subStr.size()];\n\
    \    for (int i = 0; i < subStr.size(); i++)\n    {\n        string w = subStr[i];\n\
    \        long count = 0;\n        int j = 0;\n        bool found = false;\n  \
    \      for (j = 0; j < w.length(); j++)\n        {\n            if(w.charAt(j)\
    \ == ' ')\n            {\n                count++;\n                if(count >\
    \ n)\n                {\n                    found = true;\n                 \
    \   break;\n                }\n            }\n        }\n        if (found)\n\
    \            words[i] = w;\n    }\n    return words;\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for that. But what about counting the number of consonants? I tried\
    \ this with 'Mary had a little lamb' and it gives me a lot of false positives.\
    \ Maybe I'm missing something but I can't think of how to do this.\n<|/ c |>\n\
    <| c |>\nYour solution is very close to mine, except for one thing - it returns\
    \ \"little\" when it should be \"little\", because \"little\" contains 4 consonants\
    \ but not 3.\n<|/ c |>\n<| c |>\n, ah, good point. I'll fix it.\n<|/ c |>\n<|\
    \ a |>\nYou can do something very similar to the accepted answer, but with a few\
    \ changes. First off, instead of splitting the string on \" \", you split it on\
    \ \" \", and then you go through each word and count the number of consonants\
    \ within each word. Once you've counted how many consonants are in each word,\
    \ you know if you have found the correct number of consonants in a word, then\
    \ you can just append that word into the array of words. \n<code>\npublic static\
    \ string[] GetWords(string sentence, int numberOfConsonants)\n{\n    int consonantCount\
    \ = 0;\n    string[] consonantWords = new string[sentence.Split(' ').Length];\n\
    \    foreach(string word in sentence.Split(' '))\n    {\n        if (word.Count(c\
    \ => c == ',') > numberOfConsonants)\n            continue;\n        consonantCount++;\n\
    \    }\n    string[] words = new string[consonantCount + 1];\n    for (int i =\
    \ 0; i < sentence.Split(' ').Length; i++)\n    {\n        if (consonantCount >\
    \ sentence.Split(' ').Length)\n            continue;\n        if (consonantCount\
    \ == sentence.Split(' ').Length)\n            words[consonantCount] = sentence.Split('\
    \ ')[i];\n        consonantCount++;\n    }\n    return words;\n}\n</code>\n<|/\
    \ a dscore=0 tags=arrays,java,\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp62pmof4p.d(51): Error: declaration expected, not `<`

    /tmp/tmp62pmof4p.d(54): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(54): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(54): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(54): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(60): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(63): Error: unterminated character constant

    /tmp/tmp62pmof4p.d(69): Error: declaration expected, not `foreach`

    /tmp/tmp62pmof4p.d(73): Error: no identifier for declarator `consonantCount`

    /tmp/tmp62pmof4p.d(73): Error: declaration expected, not `++`

    /tmp/tmp62pmof4p.d(74): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62pmof4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n/*\n    Your code here\n*/\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmporz8q1si.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmporz8q1si.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n     /* Your code here */\n     return\
    \ null;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nAs for me I would use regexp\
    \ to solve this task.\n<|/ c |>\n<| c |>\nThe input string may contain letters\
    \ and spaces, not only a word of 3 letters.\n<|/ c |>\n<| c |>\nYes, i know it\
    \ can be done with regexp. But i thought i should write it in more simple way\n\
    <|/ c |>\n<| c |>\nI agree, your way is much more straightforward.\n<|/ c |>\n\
    <| c |>\nYes i agree too.\n<|/ c |>\n<| a |>\nThe shortest solution I can think\
    \ of:\n<code>\nstring s = \"Mary had a little lamb\";\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfexrci5.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfexrci5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long i = 0;\n    long j = 0;\n\
    \    string[] r = new string[0];\n    char c;\n    for (i = 0; i < s.length();\
    \ i++)\n    {\n        c = s.charAt(i);\n        if (c == ' ' || c == '\\n' ||\
    \ c == '\\r')\n        {\n            for (j = 0; j < (s.length() - i); j++)\n\
    \            {\n                c = s.charAt(j);\n                if ((c != '\
    \ ') && (c != '\\n') && (c != '\\r'))\n                {\n                   \
    \ break;\n                }\n            }\n            r.add(s.substring(i, j));\n\
    \        }\n    }\n    for (; i < s.length(); i++)\n    {\n        c = s.charAt(i);\n\
    \        if ((c != ' ') && (c != '\\n') && (c != '\\r'))\n        {\n        \
    \    break;\n        }\n    }\n    r.add(s.substring(i, s.length()));\n    r.sort(string::compareTo);\n\
    \    return r;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI really like\
    \ the idea of using a stack to keep track of the number of consonants, but that\
    \ doesn't make it the most elegant solution.\n<code>\nusing System;\nusing System.Linq;\n\
    using System.Collections.Generic;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19rib8z_.d(53): Error: found `:` when expecting `,`

    /tmp/tmp19rib8z_.d(53): Error: expression expected, not `:`

    /tmp/tmp19rib8z_.d(53): Error: found `compareTo` when expecting `,`

    /tmp/tmp19rib8z_.d(56): Error: declaration expected, not `<`

    /tmp/tmp19rib8z_.d(59): Error: unterminated character constant

    /tmp/tmp19rib8z_.d(62): Error: semicolon expected, not `.`

    /tmp/tmp19rib8z_.d(62): Error: no identifier for declarator `.Linq`

    /tmp/tmp19rib8z_.d(63): Error: semicolon expected, not `.`

    /tmp/tmp19rib8z_.d(63): Error: no identifier for declarator `.Collections.Generic`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19rib8z_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.isEmpty())\n        return\
    \ [];\n    \n    int n = s.length();\n    \n    if (n >= s.length())\n    {\n\
    \        return s;\n    }\n    \n    //\n    // Build a map of consonants to index\
    \ and their values\n    //\n    map<int, int> consonants;\n    \n    for (int\
    \ i = 0; i < s.length(); i++)\n    {\n        char c = s.charAt(i);\n        \n\
    \        if (c == ' ')\n            continue;\n        \n        int index = consonants[c];\n\
    \        if (index != -1)\n        {\n            if (index != i)\n          \
    \  {\n                consonants[c] = i;\n            }\n        }\n        else\n\
    \        {\n            consonants[c] = i;\n        }\n    }\n    \n    //\n \
    \   // For each consonant, get the substring with the minimum number of words\
    \ (n) \n    // and add the word that contains the consonant to the result.\n \
    \   //\n    stack<string> st;\n    int min_count = -1;\n    \n    for (map<int,\
    \ int>::iterator i = consonants.begin(); i != consonants.end(); i++)\n    {\n\
    \        int word_count = find_word_count(s, (*i).first, (*i).second);\n     \
    \   \n        if (word_count < min_count)\n        {\n            min_count =\
    \ word_count;\n            st.push(s.substr((*i).second, (*i).first - (*i).second));\n\
    \        }\n    }\n    \n    map<int, int>::iterator j = st.top().begin();\n \
    \   \n    while (j != st.top().end())\n    {\n        st.pop();\n        st.push(s.substr(j->second,\
    \ j->first - j->second));\n        \n        j++;\n    }\n    \n    stack<string>\
    \ result;\n    \n    while (st.top().size() > 0)\n    {\n        result.push(st.top());\n\
    \        st.pop();\n    }\n    \n    return result.toArray();\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57l3vknm.d(37): Error: found `,` when expecting `.` following int

    /tmp/tmp57l3vknm.d(37): Error: found `int` when expecting identifier following
    `int`.

    /tmp/tmp57l3vknm.d(37): Error: found `>` when expecting `;` following statement

    /tmp/tmp57l3vknm.d(64): Error: found `>` when expecting `;` following statement

    /tmp/tmp57l3vknm.d(67): Error: found `,` when expecting `.` following int

    /tmp/tmp57l3vknm.d(67): Error: found `int` when expecting identifier following
    `int`.

    /tmp/tmp57l3vknm.d(67): Error: found `>` when expecting `;` following statement

    /tmp/tmp57l3vknm.d(67): Error: expression expected, not `:`

    /tmp/tmp57l3vknm.d(67): Error: found `:` when expecting `;` following `for` condition

    /tmp/tmp57l3vknm.d(67): Error: found `i` when expecting `)`

    /tmp/tmp57l3vknm.d(67): Error: found `=` instead of statement

    /tmp/tmp57l3vknm.d(67): Error: found `)` when expecting `;` following statement

    /tmp/tmp57l3vknm.d(78): Error: found `,` when expecting `.` following int

    /tmp/tmp57l3vknm.d(78): Error: found `int`'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(n==0) return new string[0];\n\
    \    string[] result = new string[20];\n    char[] c = s.ToCharArray();\n    int\
    \ l=s.Length;\n    int l2=0;\n    bool flag=true;\n    for(int i=0;i<l;i++){\n\
    \        if (c[i]!=' '){\n            flag=false;\n        }\n        if(i==0){\n\
    \            if(flag) result[l2++] = s;\n        }\n    }\n    while(l2<result.Length){\n\
    \        result[l2++]=s[l-1];\n        flag=true;\n        for(int i=1;i<l;i++){\n\
    \            if(c[i]!=' '){\n                flag=false;\n            }\n    \
    \        if(i==l){ \n                if(flag) result[l2++] = s;\n            }\n\
    \        }\n    }\n    int count=0;\n    for(int i=0;i<result.Length;i++){\n \
    \       if(count++==n) return new string[result.Length];\n    }\n    return new\
    \ string[0];\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdcmy46dd.d(26): Error: no property `ToCharArray` for type `string`

    /tmp/tmpdcmy46dd.d(27): Error: no property `Length` for type `string`

    /tmp/tmpdcmy46dd.d(38): Error: no property `Length` for type `string[]`

    /tmp/tmpdcmy46dd.d(39): Error: cannot implicitly convert expression `s[cast(ulong)(l
    - 1)]` of type `immutable(char)` to `string`

    /tmp/tmpdcmy46dd.d(51): Error: no property `Length` for type `string[]`

    /tmp/tmpdcmy46dd.d(52): Error: no property `Length` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdcmy46dd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string s1;\n    long i;\n   \
    \ \n    if (s.length() == 0)\n        return new[] {\"\"};\n    s1 = s.ToLower();\n\
    \    \n    int[] count = new int[26];\n    \n    for (i = 0; i < s1.Length; i++)\n\
    \    {\n        if (char.GetNumericValue(s1[i]) >= 'a' && char.GetNumericValue(s1[i])\
    \ <= 'z')\n        {\n            count[char.GetNumericValue(s1[i]) - 'a']++;\n\
    \        }\n    }\n    \n    string[] ret = new string[26];\n    \n    for (i\
    \ = 0; i < count.Length; i++)\n    {\n        if (count[i] == 0)\n           \
    \ continue;\n        if (count[i] == n)\n        {\n            for (int j = 0;\
    \ j < 26; j++)\n                if (count[j] == 1)\n                    ret[j]\
    \ = \"*\";\n            \n            break;\n        }\n    }\n    \n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl__qtj9b.d(28): Error: basic type expected, not `[`

    /tmp/tmpl__qtj9b.d(28): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpl__qtj9b.d(28): Error: found `}` when expecting `;` following statement

    /tmp/tmpl__qtj9b.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl__qtj9b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int c = 0;\n    string word =\
    \ \"\";\n    \n    for(int i = 0; i < s.length; i++)\n    {\n        c = s[i];\n\
    \        \n        word = \"\";\n        \n        for(int j = 0; j < i; j++)\n\
    \        {\n            if(s[i] != s[j])\n            {\n                word\
    \ += s[j];\n            }\n        }\n        \n        if(word.Length == n)\n\
    \        {\n            if(s.Contains(word))\n            {\n                string\
    \ str = word + \" \";\n                \n                string[] arr = { str\
    \ };\n                \n                return arr;\n            }\n        }\n\
    \    }\n    \n    return null;\n}\n</cell>\n<text>\nTask 3\nTo solve the above\
    \ task, your implementation should use the select_words() function written above\
    \ to complete the implementation of a function that returns all words from a string\
    \ that satisfy certain constraints provided as arguments.\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptuylap9h.d(56): Error: declaration expected, not `<`

    /tmp/tmptuylap9h.d(64): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(65): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(66): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(67): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(68): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(69): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(70): Error: declaration expected, not `assert`

    /tmp/tmptuylap9h.d(71): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuylap9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return [];\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp15iw43ix.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e25]

    ??:? void tmp15iw43ix.__unittest_L26_C1() [0x427c1a]

    ??:? void tmp15iw43ix.__modtest() [0x42808c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6ff]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428b7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a5ad]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a63c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a539]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b55]

    ??:? runModuleUnitTests [0x42d4d5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429274]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    std.array<string,1> wordsArray\
    \ = new std.array<string,1>();\n    bool empty = false;\n    bool notEmpty = true;\n\
    \    \n    for(long i = 0; i < s.length(); i++)\n    {\n        if(s.codeUnitAt(i)\
    \ != 32)\n        {\n            notEmpty = false;\n        }\n    }\n    \n \
    \   if(notEmpty)\n    {\n        for(long i = 0; i < s.length(); i++)\n      \
    \  {\n            if(s.codeUnitAt(i) != 32)\n            {\n                wordsArray.push(s.substr(i,\
    \ i+1));\n            }\n        }\n    }\n    else if(empty)\n    {\n       \
    \ wordsArray = [];\n    }\n    \n    for(long i = 0; i < wordsArray.length();\
    \ i++)\n    {\n        if(wordsArray[i][0] == n)\n        {\n            return\
    \ wordsArray[i];\n        }\n    }\n    \n    return wordsArray;\n}\n</cell>\n\
    <cell>\n%run ../tools/tests.py\n</cell>\n<cell>\nimport std.algorithm;\nimport\
    \ std.array;\nimport std.string;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnu9x6efy.d(24): Error: expression expected, not `)`

    /tmp/tmpnu9x6efy.d(24): Error: found `;` when expecting `)`

    /tmp/tmpnu9x6efy.d(25): Error: found `bool` when expecting `;` following statement

    /tmp/tmpnu9x6efy.d(61): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnu9x6efy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[100];\n\
    \    foreach (string word in s)\n    {\n        if (is_consonant(word))\n    \
    \    {\n            int count = 0;\n            foreach(string sub_word in s)\n\
    \            {\n                if (!is_consonant(sub_word))\n               \
    \     count++;\n            }\n            if (count == n)\n                result[count]\
    \ = word;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=linq,.net,c#,algorithm\
    \ |>\n<| a dscore=1 |>\nA solution using C# 8 pattern matching (with some helpful\
    \ string extension methods added in case you haven't figured it out yet).\n<code>\n\
    public static class StringExtensions\n{\n    public static bool IsConsonant(this\
    \ string word)\n    {\n        if (word == null)\n            return false;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdkcgnp0.d(25): Error: found `in` when expecting `;`

    /tmp/tmphdkcgnp0.d(30): Error: found `in` when expecting `;`

    /tmp/tmphdkcgnp0.d(41): Error: declaration expected, not `<`

    /tmp/tmphdkcgnp0.d(44): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdkcgnp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int len = 0;\n    string words[]\
    \ = new string[];\n    while (len < s.length()) \n    {\n        bool found =\
    \ false;\n        int index = 0;\n        while (!found && (index < s.length()))\n\
    \        {\n            if ((s[index] == ' ') || (s[index] == '\\t'))\n      \
    \      {\n                if (index > 0 && s[index - 1] == ' ')\n            \
    \    {\n                    index--;\n                }\n                else\n\
    \                {\n                    found = true;\n                }\n   \
    \         }\n            else\n            {\n                if ((s[index] ==\
    \ ' ') || (s[index] == '\\t'))\n                {\n                    found =\
    \ true;\n                }\n                else\n                {\n        \
    \            found = false;\n                }\n            }\n            index++;\n\
    \        }\n        if (found)\n        {\n            words[len] = s.substring(index,\
    \ index+n);\n            len++;\n        }\n    }\n    return words;\n}\n</code>\n\
    <|/ a tags=algorithm,arrays,c#,string dscore=0 |>\n<| c |>\nThis assumes that\
    \ there are no repeated spaces or tabs.  Also, if the string contains spaces or\
    \ tabs, then they will be ignored.\n<|/ c |>\n<| c |>\nThanks, I've corrected\
    \ that!\n<|/ c |>\n<| a |>\nIf your strings are short and you dont want to use\
    \ extra space, you can use \"string split\" like this:\n<code>\nprivate static\
    \ IEnumerable<string> GetWordsContainingNChars(string str, int n){\n    string[]\
    \ words = str.Split(new string[] {\" \"}, \n                               StringSplitOptions.RemoveEmptyEntries);\n\
    \    int totalWords = words.Length;\n    int currentWords = 0;\n    List<string>\
    \ result = new List<string>();\n    foreach(string word in words){\n        if\
    \ (currentWords >=n){\n            result.Add(word);\n            currentWords\
    \ = 0;\n        }\n        else{\n            currentWords++;\n        }\n   \
    \ }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,arrays,c#,string dscore=0\
    \ |>\n<| a tags=algorithm,arrays,c#,string |>\nHere's another variation on the\
    \ theme: use LINQ to remove repeating spaces and tabs, split the string and use\
    \ a GroupBy to group up words.  Then select only the groups with Length == n:\n\
    <code>\nvar result = (from c in string.Concat(str.Replace(\" \", \"\"), str.Replace(\"\
    \\t\", \"\"))\n             group c by c into g\n             let count = g.Count()\n\
    \             where count <= n\n             select g).ToList();\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\nThis is not the \nunittest\n{\n    alias candidate =\
    \ select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7fgmx542.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] words`

    /tmp/tmp7fgmx542.d(64): Error: declaration expected, not `<`

    /tmp/tmp7fgmx542.d(70): Error: unterminated character constant

    /tmp/tmp7fgmx542.d(80): Error: no identifier for declarator `List`

    /tmp/tmp7fgmx542.d(80): Error: declaration expected, not `<`

    /tmp/tmp7fgmx542.d(81): Error: declaration expected, not `foreach`

    /tmp/tmp7fgmx542.d(84): Error: no identifier for declarator `currentWords`

    /tmp/tmp7fgmx542.d(84): Error: declaration expected, not `=`

    /tmp/tmp7fgmx542.d(85): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7fgmx542.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int i;\n    string[] result =\
    \ new string[s.length()];\n    for(i = 0; i < s.length(); i++)\n    {\n      \
    \  int count = 0;\n        if(s.Contains(s[i] as char))\n        {\n         \
    \   while(s.Contains(s[i] as char))\n            {\n                count += 1;\n\
    \                i = i;\n                if(count == n)\n                {\n \
    \                   result[s.length()-i-1] = s[i];\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result as string[];\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 tags=function,c#,loops,arrays,string |>\n\
    <code>\npublic static void Main(string[] args)\n{\n    Console.WriteLine(TestString()[0]);\n\
    \    Console.ReadLine();\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps6b_0zt3.d(29): Error: found `as` when expecting `,`

    /tmp/tmps6b_0zt3.d(29): Error: found `)` when expecting `.` following char

    /tmp/tmps6b_0zt3.d(29): Error: found `)` when expecting identifier following `char`.

    /tmp/tmps6b_0zt3.d(30): Error: found `{` when expecting `,`

    /tmp/tmps6b_0zt3.d(31): Error: expression expected, not `while`

    /tmp/tmps6b_0zt3.d(31): Error: found `as` when expecting `,`

    /tmp/tmps6b_0zt3.d(31): Error: found `)` when expecting `.` following char

    /tmp/tmps6b_0zt3.d(31): Error: found `)` when expecting identifier following `char`.

    /tmp/tmps6b_0zt3.d(32): Error: found `{` when expecting `,`

    /tmp/tmps6b_0zt3.d(33): Error: found `;` when expecting `,`

    /tmp/tmps6b_0zt3.d(34): Error: found `;` when expecting `,`

    /tmp/tmps6b_0zt3.d(35): Error: expression expected, not `if`

    /tmp/tmps6b_0zt3.d(36): Error: found `{` when expecting `,`

    /tmp/tmps6b_0zt3.d(37): Error: found `;` when expecting `,`

    /tmp/tmps6b_0zt3.d(38): Error: expression expected, not `break`

    /tmp/tmps6b_0zt3.d(38): Error: fo'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int count=0;\n    bool flag=true;\n\
    \    string[] arr=new string[100];\n    int arrIndex=0;\n    string temp=s;\n\
    \    if(s==\"\"||n<=0){\n        return arr;\n    }\n    do{\n        flag=true;\n\
    \        do{\n            count++;\n            temp=temp.trim();\n          \
    \  int tempCount=0;\n            for(int i=0; i<s.length();i++)\n            {\n\
    \                if(s[i]!=' ') {\n                    tempCount++;\n         \
    \       }\n            }\n            if(tempCount>=n)\n            {\n      \
    \          arr[arrIndex++]=temp.trim();\n                flag=false;\n       \
    \     }\n        }while(tempCount==n && temp!=\"\");\n    }while(temp!=\"\" &&\
    \ flag);\n    return arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis was the\
    \ solution I came up with that solves the problem in linear time O(n) and O(1)\
    \ space. Using this solution, there is no need to keep track of the number of\
    \ vowels and consonants. \n<code>\ndef select_words(s: str, n: int) -> list[str]:\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = [\n        'b', 'c',\
    \ 'd', 'f', 'g', 'h',\n        'j', 'k', 'l', 'm', 'n', 'p',\n        'q', 'r',\
    \ 's', 't', 'v', 'w',\n        'x', 'y', 'z',\n    ]\n    vowel_consonants = {\n\
    \        'a': ['aeiou'],\n        'e': ['aeiou'],\n        'i': ['aeiou'],\n \
    \       'o': ['aeiou'],\n        'u': ['aeiou']\n    }\n    result = []\n    word\
    \ = ''\n    count = 1\n    for i in range(0, len(s)):\n        if s[i] in vowels:\n\
    \            if count != n:\n                word += s[i]\n                count\
    \ += 1\n        elif s[i] in consonants:\n            if word != '':\n       \
    \         result.append(word)\n                count = 0\n                word\
    \ = ''\n        else:\n            if word != '':\n                result.append(word)\n\
    \                count = 0\n                word = ''\n    if word != '':\n  \
    \      result.append(word)\n    return result\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu608j0e.d(53): Error: declaration expected, not `<`

    /tmp/tmpvu608j0e.d(67): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(67): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(68): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(68): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(69): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(69): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(70): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(70): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(71): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(71): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(74): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(82): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(85): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(87): Error: unterminated character constant

    /tmp/tmpvu608j0e.d(90): Error: unterminated character constant

    /tmp/tmpvu608j0e.d'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    std.string[] arr = new std.string[s.Length];\n\
    \    int counter = 1;\n    char[] s_chars = s.ToCharArray();\n    for(int i=0;\
    \ i < s_chars.Length; ++i)\n    {\n        if(s_chars[i] == 'A' || s_chars[i]\
    \ == 'E' || s_chars[i] == 'I' || s_chars[i] == 'O' || s_chars[i] == 'U')\n   \
    \     {\n            if(counter >= n)\n            {\n                arr[counter-1]\
    \ = s_chars.ToString();\n                counter = 0;\n            }\n       \
    \     else\n            {\n                counter += 1;\n            }\n    \
    \    }\n    }\n    return arr;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\n\
    This code is wrong. I checked the code with some test cases and it return \"U\"\
    . Not sure what I'm doing wrong here.\n<|/ c |>\n<| c |>\nPlease note that I wrote\
    \ this code before the OP specified that he was only allowed to use arrays. Also,\
    \ he wrote this as an answer to his own question. There could be a discrepancy.\n\
    <|/ c |>\n<| c |>\nOops sorry I missed the array part in your answer. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=c#,algorithm |>\nOkay, I thought I'd post\
    \ my own solution even though it's in Python and I'm sure it's very inefficient.\n\
    <code>\ndef consonants(text):\n    consonants = {}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy_u99v4.d(44): Error: declaration expected, not `<`

    /tmp/tmpcy_u99v4.d(47): Error: unterminated character constant

    /tmp/tmpcy_u99v4.d(56): Error: unterminated character constant

    /tmp/tmpcy_u99v4.d(56): Error: unterminated character constant

    /tmp/tmpcy_u99v4.d(56): Error: unterminated character constant

    /tmp/tmpcy_u99v4.d(56): Error: unterminated character constant

    /tmp/tmpcy_u99v4.d(64): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(65): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(66): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(67): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(68): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(69): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(70): Error: declaration expected, not `assert`

    /tmp/tmpcy_u99v4.d(71): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy_u99v4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string word = \"\";\n    string\
    \ ans = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c = s[i];\n\
    \        int count = 0;\n        while (isConsonant(c)) {\n            count++;\n\
    \            c = s[i + 1];\n            i++;\n        }\n        if (count ==\
    \ n) {\n            ans += word;\n            word = \"\";\n        }\n      \
    \  else {\n            word += c;\n        }\n    }\n    if (ans.length() != 0)\
    \ {\n        ans += word;\n    }\n    return ans.Split(' ');\n}\n/*\nGiven a string\
    \ s, a number k, and a natural number n, you have been tasked to \nimplement a\
    \ function that returns an array of all words from string s that contain exactly\
    \ \nn vowels, in order these words appear in the string s. If the string s is\
    \ empty then \nthe function should return an empty array.\n    Note: you may assume\
    \ the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L, 2L)\n    [\"little\"]\n    >>> select_words(\"Mary\
    \ had a little lamb\", 3L, 2L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"\
    simple white space\", 2L, 2L)\n    []\n    >>> select_words(\"Hello world\", 4L,\
    \ 2L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L, 2L)\n    [\"Uncle\"\
    ]\n    \n*/\nstring[] select_words(string s, long k, long n) \n{\n    string word\
    \ = \"\";\n    string ans = \"\";\n    for (int i = 0; i < s.length(); i++) {\n\
    \        char c = s[i];\n        int count = 0;\n        while (isVowel(c)) {\n\
    \            count++;\n            c = s[i + 1];\n            i++;\n        }\n\
    \        if (count == n) {\n            ans += word;\n            word = \"\"\
    ;\n        }\n        else {\n            word += c;\n        }\n    }\n    if\
    \ (ans.length() != 0) {\n        ans += word;\n    }\n    return ans.Split(' ');\n\
    }\n/*\nGiven a string s, a natural number n, and a number k, you have been tasked\
    \ \nto implement a function that returns an array of all words from string s that\
    \ \nare at most k characters long but with at most n consonants, in order these\
    \ \nwords appear in the string s. If the string s is empty then the function should\
    \ \nreturn an empty array.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little\
    \ lamb\", 4L, 3L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little\
    \ lamb\", 3L, 3L)\n    [\"lamb\"]\n    >>> select_words(\"simple white space\"\
    , \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzov3upf_.d(91): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzov3upf_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] res = new string[100];\n\
    \    int c = 0;\n    if (s.Length == 0)\n        return new string[0];\n    if\
    \ (n > s.Length)\n        n = s.Length;\n    int i = 0;\n    int j = -1;\n   \
    \ while (i < s.Length && j < s.Length)\n    {\n        char c = s[i];\n      \
    \  if (c != ' ') \n        {\n            int k = 0;\n            if (c == s[j])\
    \ \n            {\n                while (k < n && j < s.Length) \n          \
    \      {\n                    char d = s[j];\n                    k = k + 1;\n\
    \                    j = j + 1;\n                    if (k == n)\n           \
    \         {\n                        res[c] = s.Substring(i, j);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        i = i + 1;\n    }\n    return res;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nYour original program was failing because you were comparing the\
    \ current character to the previously processed characters. Instead, you should\
    \ compare the counter to the length of the string you are currently looking at.\
    \ As you loop through the string, you should also set the current counter to 0\
    \ when you encounter a space. This will allow you to compare the counter to the\
    \ length of the string you are currently looking at.\nThe below program should\
    \ work:\n<code>\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\
    import java.util.ArrayList;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9hrbz0na.d(57): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9hrbz0na.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // your code here\n    std.string[]\
    \ w = new std.string[]{};\n    if (s.isEmpty())\n        return w;\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpow1i_www.d(25): Error: semicolon expected, not `{`

    /tmp/tmpow1i_www.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpow1i_www.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpow1i_www.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int n = n % 2L;\n    long i =\
    \ s.length();\n    string[] arr = new string[i];\n    \n    while (n > 0) \n \
    \   {\n        for (int j = 0; j < i; j++)\n        {\n            if (s.Substring(0,\
    \ j).Contains(\"c\"))\n            {\n                if (n == 1)\n          \
    \          arr[j] = s.Substring(0, j);\n                else\n               \
    \ {\n                    arr[j] = s.Substring(0, j);\n                    n =\
    \ n - 1;\n                    break;\n                }\n            }\n     \
    \   }\n        i = i / 2L;\n    }\n    return arr;\n}\n/*\nGiven a string, you\
    \ need to implement a function that returns another string where \n    the character\
    \ \"-\" has been replaced with the character \"o\" and the character \n    \"\
    o\" has been replaced with \"-\".\n    \nExample:\n    \n    >>> replace_o(\"\
    -ooo-ooo\", \"ooo-ooo\", \"o\")\n    '-ooo-ooo'\n    \n    Note:\n    >>> replace_o(\"\
    abc\", \"a\", \"b\")\n    'abb'\n    >>> replace_o(\"a-bc-de\", \"a\", \"-\")\n\
    \    'a-bc-de'\n    >>> replace_o(\"a-bc-de\", \"a\", \"-\")\n    'a-bc-de'\n\
    \    \n*/\nstring replace_o(string s, string a, string b)\n{\n    string s = s\
    \ + \"-\";\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s.Substring(i).Contains(a))\n\
    \        {\n            s = s.Replace(s.Substring(i), s.Substring(i).Replace(a,\
    \ b));\n        }\n    }\n    return s + \"-\";\n}\n/*\nGiven a string, you need\
    \ to implement a function that returns a boolean value\n    that indicates if\
    \ the character \"-\" has been replaced with a character \n    \"o\" in the string.\n\
    \    \nExample:\n    \n    >>> replace_o(\"-ooo-ooo\", \"ooo-ooo\", \"o\")\n \
    \   True\n    >>> replace_o(\"abc\", \"a\", \"b\")\n    False\n    \n    Note:\n\
    \    >>> replace_o(\"a-bc-de\", \"a\", \"-\")\n    False\n    >>> replace_o(\"\
    a-bc-de\", \"a\", \"-\")\n    False\n*/\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3avkaca5.d(24): Error: variable `n` is shadowing variable `tmp3avkaca5.select_words.n`

    /tmp/tmp3avkaca5.d(25): Error: no property `length` for type `string`

    /tmp/tmp3avkaca5.d(32): Error: no property `Substring` for type `string`

    /tmp/tmp3avkaca5.d(35): Error: no property `Substring` for type `string`

    /tmp/tmp3avkaca5.d(38): Error: no property `Substring` for type `string`

    /tmp/tmp3avkaca5.d(69): Error: invalid array operation `s + "-"` (possible missing
    [])

    /tmp/tmp3avkaca5.d(69): Error: variable `s` is shadowing variable `tmp3avkaca5.replace_o.s`

    /tmp/tmp3avkaca5.d(70): Error: no property `length` for type `string`

    /tmp/tmp3avkaca5.d(72): Error: no property `Substring` for type `string`

    /tmp/tmp3avkaca5.d(74): Error: no property `Replace` for type `string`

    /tmp/tmp3avkaca5.d(77): Error: invalid array operation `s + "-"` (possible missing
    [])

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3avkaca5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long word = 0;\n    string words[]\
    \ = new string[100];\n    if(s == null)\n        return words;\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rpk7ttk.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] words`

    /tmp/tmp8rpk7ttk.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rpk7ttk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0cmili9k.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e15]

    ??:? void tmp0cmili9k.__unittest_L26_C1() [0x427c0a]

    ??:? void tmp0cmili9k.__modtest() [0x42807c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428b6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a59d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a62c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b45]

    ??:? runModuleUnitTests [0x42d4c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List<string> result = new List<string>();\n\
    \    foreach(char c in s) \n    { \n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n        {\n            result.Add(c);\n        }\n\
    \        if (c == 'y')\n        {\n            result.Add(c);\n        }\n   \
    \     if (c == 's')\n        {\n            result.Add(c);\n        }\n      \
    \  if (c == 'd')\n        {\n            result.Add(c);\n        }\n    }\n  \
    \  long count = 0;\n    foreach(string item in result)\n    {\n        count +=\
    \ std.string.length(item);\n    }\n    result.RemoveAll(a => std.string.length(a)\
    \ < n);\n    if (count > n)\n    {\n        result.RemoveAll(a => std.string.length(a)\
    \ == n);\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,linq\
    \ |>\n<| c |>\nYou don't have to `return result.ToArray();` - you can just `return\
    \ result;`\n<|/ c |>\n<| c |>\nYes, but he is trying to write this in linq. Thats\
    \ why he is doing return result.ToArray();\n<|/ c |>\n<| c |>\nYeah, but `return\
    \ result` is just going to call `ToArray()`\n<|/ c |>\n<| c |>\nYeah. Because\
    \ he is trying to do this in linq. He can't use the foreach loop. He is trying\
    \ to learn linq using foreach.\n<|/ c |>\n<| c |>\nYour answer is perfectly right\
    \ but its not what i wanted.\n<|/ c |>\n<| a |>\nThe issue here is that you are\
    \ creating two lists.  You have a List and a List.  You then try to remove elements\
    \ from each of them, which removes from the lists themselves, not the elements\
    \ of the list.  I believe you could do this in LINQ like this:\n<code>\nList<string>\
    \ words = new List<string>();\nwords.Add(\"Hello\");\nwords.Add(\"World\");\n\
    List<string> wordsToRemove = words.Where(word => word == \"World\").ToList();\n\
    words.RemoveAll(wordsToRemove);\n</code>\nThis will give you the result of having\
    \ the two lists switched places.\n<|/ a tags=c#,linq dscore=0 |>\n<| c |>\nI cannot\
    \ do it with LINQ. Can you suggest me any other way around. I'm new at this.\n\
    <|/ c |>\n<| c |>\nI wouldn't bother trying to do this with LINQ.  LINQ is good\
    \ for apply\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctqrh03y.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpctqrh03y.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpctqrh03y.d(24): Error: expression expected, not `)`

    /tmp/tmpctqrh03y.d(24): Error: found `;` when expecting `)`

    /tmp/tmpctqrh03y.d(25): Error: found `foreach` when expecting `;` following statement

    /tmp/tmpctqrh03y.d(25): Error: found `in` when expecting `)`

    /tmp/tmpctqrh03y.d(25): Error: missing `{ ... }` for function literal

    /tmp/tmpctqrh03y.d(25): Error: found `s` when expecting `;` following statement

    /tmp/tmpctqrh03y.d(25): Error: found `)` instead of statement

    /tmp/tmpctqrh03y.d(31): Error: declaration expected, not `if`

    /tmp/tmpctqrh03y.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctqrh03y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n\tstring[] result = new string[1000];\n\
    \tstring[] words = {\"Hello\", \"World\", \"Hi\", \"Uncle\", \"sam\"};\n\tbool\
    \ found = false;\n\tfor(int i = 0; i < words.length; i++)\n\t{\n\t\tif(words[i].Length\
    \ == n)\n\t\t{\n\t\t\tint x = s.IndexOf(words[i]);\n\t\t\tif(x != -1)\n\t\t\t\
    {\n\t\t\t\tfound = true;\n\t\t\t\tint index = x;\n\t\t\t\twhile(s.IndexOf(words[i],\
    \ index + 1) != -1)\n\t\t\t\t{\n\t\t\t\t\tindex = s.IndexOf(words[i], index +\
    \ 1);\n\t\t\t\t\tresult[i - 1] = s.Substring(index, 1);\n\t\t\t\t}\n\t\t\t\tif(s.IndexOf(words[i],\
    \ index) == -1)\n\t\t\t\t{\n\t\t\t\t\tresult[i - 1] = s.Substring(index, 1);\n\
    \t\t\t\t}\n\t\t\t\tif(s.IndexOf(words[i], index) == -1)\n\t\t\t\t{\n\t\t\t\t\t\
    result[i - 1] = s.Substring(index, 1);\n\t\t\t\t}\n\t\t\t\tif(s.IndexOf(words[i],\
    \ index) == -1)\n\t\t\t\t{\n\t\t\t\t\tresult[i - 1] = s.Substring(index, 1);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(found == false)\n\t{\n\t\treturn null;\n\t\
    }\n\treturn result;\n}\n</code>\n<|/ a tags=algorithm,string,c# dscore=0 |>\n\
    <| c |>\nYour approach is good - but why do you think you cannot use a dictionary?\
    \ The strings can be quite long strings - not less than a million or so. I also\
    \ think this approach would require looping through the dictionary multiple times\
    \ (once to find out how many words contain n consonants and again to find out\
    \ which words are in the string).\n<|/ c |>\n<| c |>\nI did NOT suggest using\
    \ a dictionary. Dictionaries are meant for storing key-value pairs while you are\
    \ trying to find out if a key already exists. I suggested using a dictionary because\
    \ you only have keys to look up so you dont need a loop to find out if that key\
    \ exists or not. On the other hand, when you have a large list of words to look\
    \ up, you dont need a loop to find out if that word exists. But since your question\
    \ mentioned you were supposed to use an array, a dictionary is the right way to\
    \ go.\n<|/ c |>\n<| c |>\nI agree, my point was that your approach is bad because\
    \ you cannot use a dictionary. There is no reason to use a dictionary when you\
    \ can use a list. In any case, I am not arguing about your solution. I appreciate\
    \ your answer - but I don't think its an appropriate answer for this particular\
    \ question. I'm sure others would appreciate your approach, and I still think\
    \ its an appropriate solution to my original question.\n<|/ c |>\n<| c |>\nI totally\
    \ agree \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyto9gxlg.d(62): Error: declaration expected, not `<`

    /tmp/tmpyto9gxlg.d(71): Error: unterminated character constant

    /tmp/tmpyto9gxlg.d(71): Error: unterminated character constant

    /tmp/tmpyto9gxlg.d(79): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(80): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(81): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(82): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(83): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(84): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(85): Error: declaration expected, not `assert`

    /tmp/tmpyto9gxlg.d(86): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyto9gxlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long m = s.length;\n    bool\
    \ has_ncons = false;\n    bool has_con = false;\n    string temp = \"\";\n   \
    \ string[] result = new string[m];\n    for(int i = 0; i < m; i++)\n    {\n  \
    \      if(s[i] == ' ')\n        {\n            result[i] = temp;\n           \
    \ has_ncons = has_con = false;\n            temp = \"\";\n        }\n        else\
    \ if(s[i] == '\\'' || s[i] == '-' || s[i] == '_' || s[i] == '\\\\')\n        {\n\
    \            result[i] = temp;\n            has_ncons = has_con = true;\n    \
    \        temp = \"\";\n        }\n        else if(s[i] == ',' || s[i] == '.' ||\
    \ s[i] == '!' || s[i] == '?')\n        {\n            result[i] = temp;\n    \
    \        has_ncons = has_con = true;\n            temp = \"\";\n        }\n  \
    \      else if (ncons(s[i]) == 1 && has_con)\n        {\n            result[i]\
    \ = temp;\n            has_ncons = has_con = true;\n            temp = \"\";\n\
    \        }\n        else if (ncons(s[i]) == 1 && has_ncons)\n        {\n     \
    \       result[i] = temp;\n            has_ncons = has_con = true;\n         \
    \   temp = \"\";\n        }\n        else if (s[i] == 'a' && ncons(s[i + 1]) ==\
    \ 2 && has_con)\n        {\n            result[i] = temp;\n            has_ncons\
    \ = has_con = true;\n            temp = \"\";\n        }\n        else if (s[i]\
    \ == 'a' && ncons(s[i + 1]) == 2 && !has_ncons)\n        {\n            result[i]\
    \ = temp;\n            has_ncons = has_con = true;\n            temp = \"\";\n\
    \        }\n        else if (s[i] == 'a' && ncons(s[i + 1]) == 1 && !has_ncons)\n\
    \        {\n            result[i] = temp;\n            has_ncons = has_con = true;\n\
    \            temp = \"\";\n        }\n        else if (s[i] == 'a' && ncons(s[i\
    \ + 1]) == 3 && !has_ncons)\n        {\n            result[i] = temp;\n      \
    \      has_ncons = has_con = true;\n            temp = \"\";\n        }\n    \
    \    else if (s[i] == 'a' && ncons(s[i + 1]) == 3 && has_ncons)\n        {\n \
    \           result[i] = temp;\n            has_ncons = has_con = true;\n     \
    \       temp = \"\";\n        }\n        else if (s[i] == 'a' && ncons(s[i + 1])\
    \ == 2 && has_con && has_ncons)\n        {\n            result[i] = temp;\n  \
    \          has_ncons = has_con = true;\n            temp = \"\";\n        }\n\
    \        else if (s[i] == 'a' && ncons(s[i + 1]) == 2 && has_con && has_ncons\
    \ && ncons(s[i + 2]) == 1 && has_con)\n        {\n            result[i] = temp;\n\
    \            has_ncons = has_con = true;\n            temp = \"\";\n        }\n\
    \        else if (s[i] == 'a' && ncons(s[i + 1]) == 2 && has_\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpemvuo3kj.d(104): Error: found `unittest` when expecting `)`

    /tmp/tmpemvuo3kj.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpemvuo3kj.d(116): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpemvuo3kj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] indexArray = new int[26];\n\
    \    int[] letter = new int[26];\n    char c;\n    int count = 0;\n    string\
    \ word = \"\";\n    \n    // Count how many consonants there are in s\n    for\
    \ (int i = 0; i < s.length(); i++)\n    {\n        c = s[i];\n        if (c ==\
    \ 'a') letter[0]++;\n        if (c == 'e') letter[1]++;\n        if (c == 'i')\
    \ letter[2]++;\n        if (c == 'o') letter[3]++;\n        if (c == 'u') letter[4]++;\n\
    \        if (c == 'y') letter[5]++;\n        if (c == 'a') letter[6]++;\n    \
    \    if (c == 'e') letter[7]++;\n        if (c == 'i') letter[8]++;\n        if\
    \ (c == 'o') letter[9]++;\n        if (c == 'u') letter[10]++;\n        if (c\
    \ == 'y') letter[11]++;\n        if (c == 'a') letter[12]++;\n        if (c ==\
    \ 'e') letter[13]++;\n        if (c == 'i') letter[14]++;\n        if (c == 'o')\
    \ letter[15]++;\n        if (c == 'u') letter[16]++;\n        if (c == 'y') letter[17]++;\n\
    \        if (c == 'a') letter[18]++;\n        if (c == 'e') letter[19]++;\n  \
    \      if (c == 'i') letter[20]++;\n        if (c == 'o') letter[21]++;\n    \
    \    if (c == 'u') letter[22]++;\n        if (c == 'y') letter[23]++;\n      \
    \  if (c == 'a') letter[24]++;\n        if (c == 'e') letter[25]++;\n    }\n \
    \   \n    // Create a set of all consonants\n    for (int i = 0; i < 26; i++)\n\
    \    {\n        if ((letter[i] >= n) && (letter[i] <= 25))\n        {\n      \
    \      indexArray[i] = true;\n        }\n    }\n    \n    // Get the consonants\
    \ in s and add them to the array\n    for (int i = 0; i < 26; i++)\n    {\n  \
    \      if (!indexArray[i])\n        {\n            c = s[i];\n            if ((c\
    \ == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c == 'u') || (c == 'y'))\n\
    \            {\n                count++;\n                indexArray[i] = true;\n\
    \                word += c;\n            }\n        }\n    }\n    \n    // Return\
    \ the array that only contains words containing n consonants\n    if (count ==\
    \ 0)\n    {\n        count = 0;\n        return word;\n    }\n    else if (count\
    \ == 1)\n    {\n        return word;\n    }\n    \n    // Create an array to store\
    \ the words that are made up with exactly n conson\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_542m9r.d(98): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_542m9r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[s.Length];\n\
    \    string word = null;\n    int count = 0;\n    int j = 0;\n    bool found =\
    \ false;\n    while (j < s.Length)\n    {\n        word = \"\";\n        for (int\
    \ i = 0; !found && i < s.Length; i++)\n        {\n            char c = s[i]; \n\
    \            if (IsConsonant(c))\n            {\n                if (count < n)\n\
    \                {\n                    word += c;\n                    count++;\n\
    \                }\n            }\n            else\n            {\n         \
    \       if (IsConsonant(s[i]))\n                {\n                    if (count\
    \ < n)\n                    {\n                        word += c;\n          \
    \              count++;\n                    }\n                }\n          \
    \  }\n        }\n        if (word != null && word.Length == n)\n        {\n  \
    \          result[j++] = word;\n            found = true;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\n \
    \   assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjnr25r82.d(24): Error: no property `Length` for type `string`

    /tmp/tmpjnr25r82.d(29): Error: no property `Length` for type `string`

    /tmp/tmpjnr25r82.d(32): Error: no property `Length` for type `string`

    /tmp/tmpjnr25r82.d(35): Error: undefined identifier `IsConsonant`

    /tmp/tmpjnr25r82.d(39): Error: slice `word` is not mutable

    /tmp/tmpjnr25r82.d(45): Error: undefined identifier `IsConsonant`

    /tmp/tmpjnr25r82.d(49): Error: slice `word` is not mutable

    /tmp/tmpjnr25r82.d(55): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjnr25r82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return select_words(s, n, 0);\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8i437pxi.d(24): Error: function `tmp8i437pxi.select_words(string
    s, long n)` is not callable using argument types `(string, long, int)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8i437pxi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(s == null || n == 0) return\
    \ new string[0];\n    \n    if(s.length() == 0) return new string[0];\n    \n\
    \    string t = \"\";\n    \n    int count = 0;\n    \n    for(int i = 0; i <\
    \ s.length(); i++)\n    {\n        if(s[i] == ' ')\n        {\n            count++;\n\
    \            t = t + \" \";\n        }\n        else if(s[i] == '.' || s[i] ==\
    \ ',' || s[i] == ';' || s[i] == '(' || s[i] == ')' || s[i] == '[' || s[i] == ']'\
    \ || s[i] == '{' || s[i] == '}' || s[i] == '&' || s[i] == '|' || s[i] == '!' ||\
    \ s[i] == '<' || s[i] == '>' || s[i] == '~')\n        {\n            \n      \
    \  }\n        else if(s[i] == ',' && count == n) //this makes sure there are n\
    \ commas and that all commas are followed by a space.\n        {\n           \
    \ t = t + \" \" + s[i];\n            count = 0;\n        }\n    }\n    \n    string[]\
    \ result = new string[1];\n    result[0] = t;\n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add the solution here, not on another site\
    \ like pastebin\n<|/ c |>\n<| c |>\nI did it already :) I wanted to use lists\
    \ because I wasn't sure about how to use them. But now I see that lists are even\
    \ better and easier to use than arrays.\n<|/ c |>\n<| a |>\nIf you're not opposed\
    \ to using an ArrayList, try this:\n<code>\npackage test;\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_v1629pc.d(54): Error: declaration expected, not `<`

    /tmp/tmp_v1629pc.d(60): Error: unterminated character constant

    /tmp/tmp_v1629pc.d(63): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_v1629pc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words;\n    \n    //\
    \ TODO: Write your code here\n    \n    string[] result = new string[4];\n   \
    \ if (s.length() == 0) {\n        return result;\n    }\n    \n    int count =\
    \ s.length();\n    \n    for(int i = 0; i < count; i += 1)\n    {\n        char\
    \ ch = s[i];\n        for (int j = 1; j <= s.length()-i+1; j++)\n        {\n \
    \           if (ch == s[j] && s[i-1] == s[j+1] && s[i+1] == s[j+2])\n        \
    \    {\n                result[0] = s;\n                result[1] = s;\n     \
    \           result[2] = s;\n                result[3] = s;\n                return\
    \ result;\n            }\n        }\n    }\n    return null;\n}\n</code>\n<|/\
    \ a tags=string,arrays,c dscore=0 |>\n<| c |>\nHi can you please explain me this\
    \ part \nfor(int i = 0; i < count; i += 1)\n<|/ c |>\n<| c |>\nHi i tried your\
    \ solution but it is giving me an unexpected output:\nInput : \"Mary had a little\
    \ lamb\"\noutput : []\n<|/ c |>\n<| c |>\nHi, thanks for your input. I was confused\
    \ because i thought you wanted the function to return only 1 word. I edited my\
    \ answer to address your question and also added my code so that you can test\
    \ it out.\n<|/ c |>\n<| c |>\nIt still doesnt seem to work. i have edited my question\
    \ with the code which i have written, can you please take a look and help me out\
    \ on this.\n<|/ c |>\n<| c |>\nI edited my answer with a new solution that works\
    \ as you intended it. Please check out my answer again.\n<|/ c |>\n<| a dscore=0\
    \ tags=string,arrays,c |>\nThere are several problems with your code:\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp973iol4t.d(52): Error: declaration expected, not `<`

    /tmp/tmp973iol4t.d(56): Error: no identifier for declarator `i`

    /tmp/tmp973iol4t.d(56): Error: declaration expected, not `<`

    /tmp/tmp973iol4t.d(56): Error: no identifier for declarator `i`

    /tmp/tmp973iol4t.d(56): Error: declaration expected, not `+=`

    /tmp/tmp973iol4t.d(78): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(79): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(80): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(81): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(82): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(83): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(84): Error: declaration expected, not `assert`

    /tmp/tmp973iol4t.d(85): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp973iol4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    std.typecons.ListNode node =\
    \ new std.typecons.ListNode(0);\n    stack<long> select_word = new stack<long>();\n\
    \    stack<std.typecons.ListNode> result = new stack<std.typecons.ListNode>();\n\
    \    \n    for (long i=0; i<s.length(); i++)\n    {\n        if (s[i] == '\\0')\n\
    \            break;\n        else\n            select_word.push(s.charAt(i));\n\
    \    }\n    \n    while (!select_word.isEmpty() && select_word.top() >= n)\n \
    \   {\n        result.push(node);\n        \n        select_word.pop();\n    }\n\
    \    \n    if (select_word.isEmpty())\n        return [];\n    else\n        while\
    \ (select_word.isEmpty())\n            select_word.pop();\n    \n    while (!select_word.isEmpty())\n\
    \    {\n        \n        \n        if (select_word.top() >= n)\n        {\n \
    \           result.push(node);\n            select_word.pop();\n        }\n  \
    \      else\n        {\n            \n            \n            node.next = new\
    \ std.typecons.ListNode(select_word.pop());\n            node = node.next;\n \
    \           \n        }\n        \n    }\n    \n    while (!result.isEmpty())\n\
    \    {\n        std.typecons.ListNode node = result.pop();\n        \n       \
    \ if (node.next != null)\n        {\n            result.push(node);\n        \
    \    node = node.next;\n        }\n        \n        select_word.pop();\n    \
    \    \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpml133o29.d(25): Error: found `>` when expecting `.` following long

    /tmp/tmpml133o29.d(25): Error: found `>` when expecting `.` following long

    /tmp/tmpml133o29.d(25): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpml133o29.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmpml133o29.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpml133o29.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpml133o29.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpml133o29.d(26): Error: expression expected, not `)`

    /tmp/tmpml133o29.d(26): Error: found `;` when expecting `)`

    /tmp/tmpml133o29.d(28): Error: found `for` when expecting `;` following statement

    /tmp/tmpml133o29.d(28): Error: found `i` when expecting `.` following long

    /tmp/tmpml133o29.d(28): Error: found `=` when expecting identifier following `long`.

    /tmp/tmpml133o29.d(28): Error: found `0` when expecting `)`

    /tmp/tmpml133o29.d(28): Error: found `)` when ex'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.isEmpty())\n        return\
    \ string[];\n    char[] chars = s.toCharArray();\n    int max = 0;\n    for (char\
    \ c : chars) {\n        if (std.string.eof(c))\n            break;\n        if\
    \ (std.string.eof(c))\n            break;\n        if (std.string.count(c) ==\
    \ n)\n            max = std.string.count(c) > max ? std.string.count(c) : max;\n\
    \    }\n    if (max > 0)\n        return std.array.create(s);\n    return string[];\n\
    }\n</code>\n<|/ a tags=arrays,string,java dscore=0 |>\n<| a dscore=0 tags=arrays,string,java\
    \ |>\nThis is an old question, but I wanted to provide an answer because I thought\
    \ this would be an interesting exercise to learn about. I believe this solution\
    \ is much simpler than the other posted answers, and is also slightly different\
    \ in terms of memory usage.\nThe key here is the Java Stream API and its Streams\
    \ class and it's filter() method. \nThe filter() method allows you to apply a\
    \ predicate to each element in a collection. The predicate will receive the element,\
    \ and return true if the element should be included, and false if it should be\
    \ excluded from the result. The filter() method also returns an iterator of the\
    \ filtered elements, and this is returned by the iterator() method. \nThe filter()\
    \ method can be applied to the Collection class by passing the predicate as a\
    \ function argument.\n<code>\n//Filters the collection to only include elements\
    \ which contain the specified string as a substring.\nCollection.filter(predicate)\n\
    </code>\nThe predicate here will receive a string parameter and return a boolean\
    \ value.\n<code>\n//Filters the collection to only include elements which contain\
    \ the specified string as a substring.\nPredicate<String> filter = s -> s.contains(stringToLookFor);\n\
    Collection.filter(filter)\n</code>\nThe above would return a collection containing\
    \ the elements that contain the specified string. \nThe following example shows\
    \ this in action:\n<code>\npublic static void main(String[] args) {\n    List<String>\
    \ list = Arrays.asList(\"hello\", \"goodbye\");\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj7h840g5.d(28): Error: semicolon expected, not `:`

    /tmp/tmpj7h840g5.d(28): Error: expression expected, not `:`

    /tmp/tmpj7h840g5.d(28): Error: found `chars` when expecting `;` following `for`
    condition

    /tmp/tmpj7h840g5.d(40): Error: declaration expected, not `<`

    /tmp/tmpj7h840g5.d(44): Error: unterminated character constant

    /tmp/tmpj7h840g5.d(55): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpj7h840g5.d(56): Error: no identifier for declarator `Collection.filter(filter)`

    /tmp/tmpj7h840g5.d(56): Error: semicolon expected following function declaration

    /tmp/tmpj7h840g5.d(56): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj7h840g5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    string[] ans = new string[0];\n\
    \    if (n == 0) {\n        return ans;\n    }\n    \n    unordered_set<Character>\
    \ st = new unordered_set<Character>();\n    \n    for (int i = 0; i < s.length();\
    \ i++) {\n        \n        if (st.count(s[i]) == 0) {\n            st.insert(s[i]);\n\
    \        }\n    }\n    \n    for (auto i: st) {\n        long count = 0;\n   \
    \     \n        for (int j = i; j > 0; j--) {\n            if (s.substr(i, j)\
    \ == j) {\n                count++;\n            }\n        }\n        \n    \
    \    if (count == n) {\n            ans.push_back(i);\n        }\n    }\n    \n\
    \    return ans;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| c |>\nThis code\
    \ doesn't work if you have the same word multiple times. Example: `select_words(\"\
    Hello world hello world\", 3L)` will return [\"Hello world\", \"world\", \"Hello\"\
    ]\n<|/ c |>\n<| c |>\nIt should be `unordered_set<string>` instead of `unordered_set<char>`,\
    \ but other than that it is a great solution.\n<|/ c |>\n<| a dscore=0 |>\nA simple\
    \ approach would be to sort your list of words by the number of consonants in\
    \ each word, and then start checking the sorted list for the first consonant sequence\
    \ longer than the desired length, and then return all the words from this sublist.\
    \  \nThe sorting step can be done using a custom comparator that simply uses str::npos\
    \ to compare the strings, and then std::sort to sort the strings.  Since strings\
    \ are sorted lexicographically, this comparator will put all words in the correct\
    \ order based on the number of consonants in the words.  This approach will be\
    \ O(n log n) in the worst case, since we sort the words by consonant count.\n\
    <code>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include\
    \ <utility>\n#include <cstdlib>\n#include <cctype>\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnszhevtd.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpnszhevtd.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpnszhevtd.d(30): Error: expression expected, not `)`

    /tmp/tmpnszhevtd.d(30): Error: found `;` when expecting `)`

    /tmp/tmpnszhevtd.d(32): Error: found `for` when expecting `;` following statement

    /tmp/tmpnszhevtd.d(32): Error: found `i` when expecting `.` following int

    /tmp/tmpnszhevtd.d(32): Error: found `=` when expecting identifier following `int`.

    /tmp/tmpnszhevtd.d(32): Error: found `0` when expecting `)`

    /tmp/tmpnszhevtd.d(32): Error: found `)` when expecting `;` following statement

    /tmp/tmpnszhevtd.d(39): Error: no identifier for declarator `i`

    /tmp/tmpnszhevtd.d(39): Error: expression expected, not `:`

    /tmp/tmpnszhevtd.d(39): Error: found `st` when expecting `;` following `for` condition

    /tmp/tmpnszhevtd.d(55): Error: declaration expected, not `<`

    /tmp/tmpnszhevtd.d(58): Error: unterminated character constant

    /tmp/tmpnszhevtd.d(77): Error'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long l = 0;\n    int i = 0;\n\
    \    while(i < s.length())\n    {\n        if (std.string(\"aeiouAEIOU\").indexOf(s.charAt(i))\
    \ != -1) \n        {\n            l++;\n        }\n        if (l >= n) \n    \
    \    {\n            if(i == s.length()-1)\n            {\n                return\
    \ new string[0];\n            }\n            else\n            {\n           \
    \     return new string[]{s.substring(i,s.length())};\n            }\n       \
    \ }\n        i++;\n    }\n    return new string[0];\n}\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nl75626.d(40): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp6nl75626.d(40): Error: found `}` when expecting `;` following statement

    /tmp/tmp6nl75626.d(40): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nl75626.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[0];\n\
    \    std.sort(s, true, true);\n    for(long i = 0; i < s.length; )\n    {\n  \
    \      string word = s.substring(i, i + n);\n        if(word.IndexOf(' ') >= 0)\n\
    \        {\n            while(!word.IndexOf(' ', 1) >= 0)\n                word\
    \ = word.substring(0, word.IndexOf(' '));\n            while(!word.IndexOf(' ',\
    \ 1) >= 0)\n                word = word.substring(1);\n        }\n        result.Add(word);\n\
    \        i += n + 1;\n    }\n    std.sort(result, true, true);\n    return result;\n\
    }\n</code>\n<|/ q dscore=1 tags=c# |>\n<| c |>\nCould you please show what you\
    \ have tried? It looks like you are trying to solve the problem on your own, but\
    \ it is difficult to tell what your problem is. What does the question have to\
    \ do with C#?\n<|/ c |>\n<| c |>\nPlease don't edit questions to add \"Solved\"\
    \ or any other text that comes after your question has been solved. Instead, accept\
    \ an answer that solved your problem (and is correct) and then post your own answer\
    \ to show how you solved it. This will help others who encounter the same problem\
    \ in the future, and will encourage others to answer your question in a different\
    \ way that may help you find the answer in the future.\n<|/ c |>\n<| a |>\nThis\
    \ is a question about string processing, not a question about C#.\nThe basic idea\
    \ is to iterate through all the possible words in the string and count the number\
    \ of consonants that appear in each word. Then you need to find the longest word\
    \ with the right number of consonants. There are many ways of finding the longest\
    \ word with a given number of consonants. One method is to use dynamic programming.\
    \ You can create a two-dimensional array that contains the number of consonants\
    \ for each possible word of length k and for each possible number of consonants\
    \ n. Then iterate through all the possible combinations of words of length k,\
    \ starting with the longest word. Then compare the number of consonants in each\
    \ word and choose the word with the highest number of consonants.\nYou can do\
    \ that as follows:\n<code>\npublic static void Main(String[] args)\n{\n    String\
    \ s = \"Mary had a little lamb\";\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4kv0gpdg.d(42): Error: declaration expected, not `<`

    /tmp/tmp4kv0gpdg.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4kv0gpdg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code here!\n    List<String>\
    \ result = new List<String>();\n    result.AddRange(Enumerable.Range(0, s.Length).Where((int\
    \ i) => s.ToCharArray()[i].ToString().ToLower() == \"a\" ||\n                \
    \                                                 s.ToCharArray()[i].ToString().ToLower()\
    \ == \"e\" ||\n                                                              \
    \   s.ToCharArray()[i].ToString().ToLower() == \"i\" ||\n                    \
    \                                             s.ToCharArray()[i].ToString().ToLower()\
    \ == \"o\" ||\n                                                              \
    \   s.ToCharArray()[i].ToString().ToLower() == \"u\" ||\n                    \
    \                                             s.ToCharArray()[i].ToString().ToLower()\
    \ == \"y\").Select(i => s.Substring(i, 1)));\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThat's pretty cool. I've always wondered how you could do something\
    \ like this with LINQ. Thanks for sharing!\n<|/ c |>\n<| c |>\nIt's a great way\
    \ to solve this problem, but it's not the most efficient way to solve it. The\
    \ original code runs in O(n) time. The code in this answer runs in O(n*k) time,\
    \ so this algorithm runs in O(n^2).\n<|/ c |>\n<| c |>\nI believe that the original\
    \ is O(n), not O(n^2) since it builds result list from the beginning.  And the\
    \ original code runs in O(n) time even if it builds result list from the end (as\
    \ you already suggested).\n<|/ c |>\n<| c |>\nThe original is O(n) because it's\
    \ building the list from the beginning. The second one (using ToLower() instead\
    \ of == operators) runs in O(n*k) time because it runs in O(n) time and uses a\
    \ hash table to find matching characters.\n<|/ c |>\n<| c |>\nSorry, I forgot\
    \ about the O(n) time for the first one.  I edited the answer to fix the O(n)\
    \ time for the second one.\n<|/ c |>\n<| a tags=c# |>\nYou probably want to use\
    \ a regex matcher here\n<code>\nstring input = \"Mary had a little lamb\";\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo7t5bhc8.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpo7t5bhc8.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpo7t5bhc8.d(25): Error: expression expected, not `)`

    /tmp/tmpo7t5bhc8.d(25): Error: found `;` when expecting `)`

    /tmp/tmpo7t5bhc8.d(26): Error: found `result` when expecting `;` following statement

    /tmp/tmpo7t5bhc8.d(34): Error: declaration expected, not `<`

    /tmp/tmpo7t5bhc8.d(37): Error: unterminated character constant

    /tmp/tmpo7t5bhc8.d(37): Error: unterminated character constant

    /tmp/tmpo7t5bhc8.d(40): Error: unterminated character constant

    /tmp/tmpo7t5bhc8.d(40): Error: unterminated character constant

    /tmp/tmpo7t5bhc8.d(46): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo7t5bhc8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] ws = new string[n];\n\
    \    long start = 0;\n    long end = s.length();\n    while(end > start)\n   \
    \ {\n        int m = std.math.min(end - 1, std.math.min(start + n, end));\n  \
    \      string w = s.substr(start, m);\n        if(w.length() == n)\n         \
    \   ws[std.math.abs(n - w.length())-1] = w;\n        start = std.math.max(start,\
    \ m + 1);\n        end = std.math.min(end, start);\n    }\n    return ws;\n}\n\
    </code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nimport std.algorithm.search;\nimport\
    \ std.algorithm;\nimport std.array;\nimport std.conv;\nimport std.range;\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprjudm1p9.d(38): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjudm1p9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] ans;\n    long i;\n\
    \    long maxWords=0, index=0;\n    string word=\"\";\n    for(i=0; i<s.length();\
    \ i++)\n    {\n        if(s[i]=='a')\n            maxWords++;\n    }\n    \n \
    \   long numWords = 0;\n    for(index=0; index<s.length(); index++)\n    {\n \
    \       if(s[index] == 'a')\n            numWords++;\n    }\n    if(numWords <=\
    \ maxWords)\n        ans=new string[numWords];\n    else\n        ans=new string[maxWords];\n\
    \    \n    for(i=0; i<s.length(); i++)\n    {\n        if(s[i]=='a')\n       \
    \ {\n            if(numWords <= maxWords)\n            {\n                word+=s[index];\n\
    \                ans[numWords]=word;\n                numWords++;\n          \
    \  }\n            else\n            {\n                word+=s[index];\n     \
    \           ans[maxWords]=word;\n                maxWords++;\n            }\n\
    \        }\n    }\n    return ans;\n}\n</code>\n<|/ a |>\n<| c |>\nThe function\
    \ fails for \"El que sobran\" when it should return \"Le que sobran\" as it doesn't\
    \ include an \"a\". Same with \"Que\" when it should return \"Que\".\n<|/ c |>\n\
    <| c |>\nI modified the code slightly to address this.\n<|/ c |>\n<| c |>\nThe\
    \ last test case returns \"Le que sobran\" instead of \"Le que sobran\" as it\
    \ doesn't include an \"a\". Same with \"Que\" instead of \"Que\". That last test\
    \ case is due to the fact that maxWords is always 0 in this case, as it doesn't\
    \ contain any \"a\" characters. Try calling this function with: select_words(\"\
    Le que sobran\", 2L). maxWords will become 1 and then you will get \"Le que sobran\"\
    \ instead of \"Le que\".\n<|/ c |>\n<| c |>\nI've just fixed that bug. I've also\
    \ added some comments to the code. Hope it helps :)\n<|/ c |>\n<| c |>\nThanks\
    \ for the corrections! I did some more tests and also corrected some bugs. If\
    \ you have time, you can run a test suite on the code and see if it is still passing.\
    \ Otherwise, let me know what problems you still have and I'll be happy to help\
    \ you with it.\n<|/ c |>\n<| a dscore=0 |>\nHere is a simpler solution than the\
    \ one above. \n<code>\nunittest\n{\n    alias candidate = select_words;\n\n  \
    \  assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvl7wgz7t.d(65): Error: declaration expected, not `<`

    /tmp/tmpvl7wgz7t.d(68): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(74): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(74): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(77): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(77): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(80): Error: unterminated character constant

    /tmp/tmpvl7wgz7t.d(89): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(90): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(91): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(92): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(93): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(94): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(95): Error: declaration expected, not `assert`

    /tmp/tmpvl7wgz7t.d(96): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl7wgz7t.d", "-I'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int counter = 0;\n    int length\
    \ = s.length();\n    string[] result = new string[length];\n    for(int i = 0;\
    \ i < length; i++){\n        counter = 0;\n        for(int j = 0; j < s.length();\
    \ j++){\n            if(s.charAt(j) == ' '){\n                break;\n       \
    \     }\n            if(s.charAt(j) == s.charAt(j)){\n                counter++;\n\
    \                if(counter == n){\n                    result[i] = s.substring(0,j\
    \ + 1);\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    if(counter == 0){\n        result = new string[0];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nMy solution\
    \ is:\n<code>\npackage com.company;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8rha99a.d(47): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8rha99a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] a = new string[s.length];\n\
    \    int i, count = 0;\n    for(i = 0; i < s.length; i++)\n    {\n        if(s[i]\
    \ == '\\0')\n            break;\n        else\n        {\n            if(i+1 <\
    \ s.length && s[i+1] == s[i] && s[i+1] != '\\0')\n            {\n            \
    \    i++;\n                count++;\n            }\n            if(count == n)\n\
    \                a[count-1] += s.substring(i);\n        }\n    }\n    return a;\n\
    }\n</cell>\n<cell>\nimport std.array;\nimport std.string;\nimport std.algorithm;\n\
    /*\nWrite a function, select_words, that takes a string s and a natural number\
    \ n, \n    which returns the array of all words from string s that contain exactly\
    \ n \n    consonants, in order these words appear in the string s.\n    If the\
    \ string s is empty then the function should return an empty array.\n    Note:\
    \ you may assume the input string contains only letters and spaces.\n    Examples:\n\
    \    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>>\
    \ select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n   \
    \ >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"\
    Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n\
    \    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    string[]\
    \ a = new string[s.length];\n    int i, count = 0;\n    for(i = 0; i < s.length;\
    \ i++)\n    {\n        if(s[i] == '\\0')\n            break;\n        else\n \
    \       {\n            if(i+1 < s.length && s[i+1] == s[i] && s[i+1] != '\\0')\n\
    \            {\n                i++;\n                count++;\n            }\n\
    \            if(count == n)\n                a[count-1] += s.substring(i);\n \
    \       }\n    }\n    return a;\n}\n</cell>\n<text>\nTests\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbbz2yeg.d(43): Error: declaration expected, not `<`

    /tmp/tmphbbz2yeg.d(88): Error: declaration expected, not `<`

    /tmp/tmphbbz2yeg.d(95): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(96): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(97): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(98): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(99): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(100): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(101): Error: declaration expected, not `assert`

    /tmp/tmphbbz2yeg.d(102): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbbz2yeg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[0];\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpqkjar2.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpqkjar2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] results = new string[s.length];\n\
    \    for(int i = 0; i < s.length; ++i){\n        long count = std.string.length(s.substring\
    \ (i, i+n)) - n;\n        if(count < 0){\n            throw new IndexOutOfRangeException();\n\
    \        }\n        else{\n            results[i] = s.substring (i, i+n);\n  \
    \      }\n    }\n    return results;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6k7u_xfw.d(26): Error: undefined identifier `string` in package
    `std`

    /tmp/tmp6k7u_xfw.d(28): Error: undefined identifier `IndexOutOfRangeException`

    /tmp/tmp6k7u_xfw.d(31): Error: no property `substring` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6k7u_xfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    stack<string> stk = new stack<string>();\n\
    \    stk.push(s);\n    string[] res = new string[0];\n    while(stk.top() != \
    \ null){\n        int count = 0;\n        string a = stk.top();\n        for(int\
    \ i =0 ; i < a.length() ; i++){\n            if(consonants.contains(a.charAt(i))){\n\
    \                count++;\n            }\n            if(count == n){\n      \
    \          stk.pop();\n                res = new string[res.length + 1];\n   \
    \             res[res.length - 1] = a;\n                res = res.reverse();\n\
    \                stk.push(a);\n            }\n        }\n    }\n    return res;\n\
    }\n/* \nProblem 13\nUsing the string\n\"Mary had a little lamb\"\nand the parameter\
    \ \n2L\nreturn the array\n[\"little\"]\n*/\nunittest\n{\n    alias candidate =\
    \ select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpowf51tes.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpowf51tes.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpowf51tes.d(24): Error: expression expected, not `)`

    /tmp/tmpowf51tes.d(24): Error: found `;` when expecting `)`

    /tmp/tmpowf51tes.d(25): Error: found `stk` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowf51tes.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] _s = new string[10000];\n\
    \    for (int i = 0; i < s.length(); i++)\n    {\n        for (int j = 0; j <\
    \ n; j++)\n        {\n            if (s[i] != \"c\")\n            {\n        \
    \        _s[j] = _s[j] + s[i];\n            }\n        }\n    }\n    return _s;\n\
    }\n</code>\n<|/ q |>\n<| c |>\nHave you tried anything at all? There are many\
    \ ways to approach this. As a general rule of thumb, try to find a common task\
    \ and then see if there's already existing code around that task to solve the\
    \ problem.\n<|/ c |>\n<| c |>\nI have no idea where to start. I'm sorry.\n<|/\
    \ c |>\n<| c |>\nStart by writing a test that can find words that contain `n`\
    \ consonants.\n<|/ c |>\n<| c |>\nI guess it's pretty clear that you should start\
    \ by writing a function that can find the count of the number of consonants in\
    \ a string. Have a look at [this question](https://stackoverflow.com/questions/24665442/counting-consonants-in-java)\
    \ and let us know if that has helped.\n<|/ c |>\n<| c |>\nI have. I've added an\
    \ update at the bottom of my question with an attempt at the count function. I\
    \ feel like I'm getting closer, but something isn't quite right with the count\
    \ function, as when I run the test case, the correct output is returned, but when\
    \ I run the code from my IDE it returns something else (an answer I haven't worked\
    \ out yet).\n<|/ c |>\n<| a tags=string,arrays,c#,algorithm |>\nIf your input\
    \ string contains only letters and spaces, you can just count consonants in it\
    \ and output all words that contain that number.\nIf it may contain other characters,\
    \ you can write a simple parser to determine if the word contains only letters\
    \ and spaces.\nIf your input string contains letters only, you can do as suggested\
    \ by user3666197 and write a simple function to determine the count of consonants\
    \ in a word.\nIt seems you haven't worked on these concepts yet. I would suggest\
    \ you go on youtube and do some online videos on those topics. As a beginner you\
    \ can do some practice on some of these topics and ask a more specific questions\
    \ later. I am sure you will be able to solve the problem on your own.\n<|/ a dscore=0\
    \ |>\n<| a tags=string,arrays,c#,algorithm |>\nThe best approach would be to use\
    \ regular expressions (regex).\nHere are some links for you to get started:\n\
    https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions\n\
    https://www.w3schools.com/CSharp/\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0ym6_2r.d(37): Error: declaration expected, not `<`

    /tmp/tmpz0ym6_2r.d(40): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(43): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(49): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(52): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(52): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(52): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(52): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(58): Error: unterminated character constant

    /tmp/tmpz0ym6_2r.d(69): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(70): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(71): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(72): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(73): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(74): Error: declaration expected, not `assert`

    /tmp/tmpz0ym6_2r.d(75): Error: declaration expected, not `asser'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s == \"\")\n    {\n     \
    \   return string[];\n    }\n    List<string> l = new List<string>();\n    for\
    \ (int i = 0; i < s.Length; i++)\n    {\n        for (int j = 0; j < Consonants.Length;\
    \ j++)\n        {\n            if (s.Length >= Consonants[j] && s[i] >= Consonants[j])\n\
    \            {\n                if (s.Length >= Consonants[j] + n && s[i] >= Consonants[j]\
    \ + n)\n                {\n                    l.Add(s.Substring(0, Consonants[j]));\n\
    \                    return l;\n                }\n            }\n        }\n\
    \    }\n    return l;\n}\n</code>\nAnd I wanted to show you how it could be done\
    \ with LINQ:\n<code>\nusing System.Linq;\nusing System;\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw1d1qs5.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmppw1d1qs5.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmppw1d1qs5.d(28): Error: expression expected, not `)`

    /tmp/tmppw1d1qs5.d(28): Error: found `;` when expecting `)`

    /tmp/tmppw1d1qs5.d(29): Error: found `for` when expecting `;` following statement

    /tmp/tmppw1d1qs5.d(29): Error: found `i` when expecting `.` following int

    /tmp/tmppw1d1qs5.d(29): Error: found `=` when expecting identifier following `int`.

    /tmp/tmppw1d1qs5.d(29): Error: found `0` when expecting `)`

    /tmp/tmppw1d1qs5.d(29): Error: found `)` when expecting `;` following statement

    /tmp/tmppw1d1qs5.d(45): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw1d1qs5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\n</code>\nHere's\
    \ a test:\n<code>\npublic static void main(String[] args){\n    select_words(\"\
    Mary had a little lamb\", 4L);\n    select_words(\"Mary had a little lamb\", 3L);\n\
    \    select_words(\"simple white space\", 2L);\n    select_words(\"Hello world\"\
    , 4L);\n    select_words(\"Uncle sam\", 3L);\n}\n</code>\nResults:\n<code>\n[little]\n\
    [Mary]\n[]\n[world]\n[Uncle]\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe function\
    \ should return an empty array if the string does not contain exactly n consonants.\n\
    <|/ c |>\n<| c |>\nI added an explanation for the empty array case.\n<|/ c |>\n\
    <| a tags=string,c#,algorithm |>\nUsing LINQ:\n<code>\nvar result = string.Concat(strings.Select(s\
    \ => new string(s.Where(c => char.IsConsonant(c))\n                          \
    \                          .ToArray())));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nThis seems to work fine for me:\n<code>\nprivate static string[] select_words(string\
    \ s, long n) \n{\n    var wordsArray = new List<string>();\n    foreach (var word\
    \ in s.Split(' '))\n    {\n        var currentWord = word;\n        var consonants\
    \ = word.Where(c => Char.IsConsonant(c)).ToList();\n        consonants.Sort();\n\
    \        var consonantsToRemove = currentWord.Take(consonants.Count);\n      \
    \  if (consonantsToRemove.Count == consonants.Count)\n        {\n            wordsArray.Add(word);\n\
    \        }\n    }\n    return wordsArray.ToArray();\n}\n</code>\n<|/ a tags=string,c#,algorithm\
    \ |>\n<| c |>\nWhy not just `return consonants.Take(n).ToArray()`? I personally\
    \ find it easier to read this way in comparison to `Where(c => Char.IsConsonant(c)).ToList()`\n\
    <|/ c |>\n<| c |>\n, thanks, I've just replaced my code with yours, I've updated\
    \ the answer.\n<|/ c |>\n<| c |>\nThe `consonants` array isn't really necessary.\
    \ You can just do `currentWord.Take(consonants.Count).ToList()`\n<|/ c \nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjy_a406.d(26): Error: declaration expected, not `<`

    /tmp/tmpxjy_a406.d(27): Error: unterminated character constant

    /tmp/tmpxjy_a406.d(31): Error: unexpected `(` in declarator

    /tmp/tmpxjy_a406.d(31): Error: basic type expected, not `"Mary had a little lamb"`

    /tmp/tmpxjy_a406.d(31): Error: found `"Mary had a little lamb"` when expecting
    `)`

    /tmp/tmpxjy_a406.d(31): Error: no identifier for declarator `select_words(_error_)`

    /tmp/tmpxjy_a406.d(31): Error: semicolon expected following function declaration

    /tmp/tmpxjy_a406.d(31): Error: declaration expected, not `,`

    /tmp/tmpxjy_a406.d(32): Error: unexpected `(` in declarator

    /tmp/tmpxjy_a406.d(32): Error: basic type expected, not `"simple white space"`

    /tmp/tmpxjy_a406.d(32): Error: found `"simple white space"` when expecting `)`

    /tmp/tmpxjy_a406.d(32): Error: no identifier for declarator `select_words(_error_)`

    /tmp/tmpxjy_a406.d(32): Error: semicolon expected following function declaration

    /tmp/tmpxjy_a406.d(32): Error: declaration expected, not `,`

    /tmp'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var result = [];\n    var count\
    \ = 0;\n    foreach(char c in s)\n    {\n        if (c == 'a') \n        {\n \
    \           count++;\n        }\n        else if (c == ' ' || c == '\\n' || c\
    \ == '\\t') \n        {\n            \n        }\n        else if (c == ' ') \n\
    \        {\n            if (count > n) \n            {\n                result.push(s);\n\
    \            }\n        }\n        else if (count > n)\n        {\n          \
    \  result.push(s);\n        }\n    }\n    return result.ToArray();\n}\n/*\nGiven\
    \ a string s and a natural number n, you have been tasked to implement \n    a\
    \ function that returns an array of all words from string s that contain exactly\
    \ \n    n consonants, in order these words appear in the string s.\n    If the\
    \ string s is empty then the function should return an empty array.\n    Note:\
    \ you may assume the input string contains only letters and spaces.\n    Examples:\n\
    \    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>>\
    \ select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n   \
    \ >>> select_words(\"simple white space\", 2L)\n    []\n    >>> select_words(\"\
    Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n\
    \    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long n) \n{\n    var\
    \ result = [];\n    foreach(char c in s)\n    {\n        if (c == 'a') \n    \
    \    {\n            count++;\n        }\n        else if (c == ' ' || c == '\\\
    n' || c == '\\t') \n        {\n            \n        }\n        else if (c ==\
    \ ' ') \n        {\n            if (count > n) \n            {\n             \
    \   result.push(s);\n            }\n        }\n    }\n    return result.ToArray();\n\
    }\n/*\nGiven a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns an array of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty array.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"\
    little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\"\
    , \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>>\
    \ select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd9l54l6u.d(26): Error: found `in` when expecting `;`

    /tmp/tmpd9l54l6u.d(72): Error: found `in` when expecting `;`

    /tmp/tmpd9l54l6u.d(112): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd9l54l6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // your code here\n    // you\
    \ may assume that n is a natural number and is greater than or equal to zero\n\
    \    var result = new string[s.Count()];\n    int j = 0;\n    foreach(char c in\
    \ s)\n    {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n\
    \            result[j++] = c;\n        }\n    }\n    for (int i = 0; i < j; i++)\n\
    \    {\n        for (int j = 0; j < s.Length - 1; j++)\n        {\n          \
    \  if (s[j] == result[i])\n            {\n                break;\n           \
    \ }\n            else\n            {\n                for (int k = 0; k < s.Length\
    \ - i - 1 ; k++)\n                {\n                    if (s[k] == result[j])\n\
    \                    {\n                        break;\n                    }\n\
    \                    else\n                    {\n                        if (s[k\
    \ + 1] == result[k + 1])\n                        {\n                        \
    \    break;\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        if (s.Length - i == n)\n        {\n  \
    \          result[i] = \"\";\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your reply. I tried it but still I am getting an\
    \ output like ['e', 'a', 'm', ' '] which is not expected.\n<|/ c |>\n<| c |>\n\
    I edited the code. Now it works.\n<|/ c |>\n<| c |>\nThanks a lot man. Working\
    \ like a charm. Can you please help me with one more doubt? I tried to search\
    \ online but didn't get proper result. My question is how do we get the same resultant\
    \ array in C++ (sort of like a string[] in C#). My code is working fine in C#\
    \ but not in C++.\n<|/ c |>\n<| c |>\nI edited the answer to provide you with\
    \ a C++ version of the code. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nI suggest\
    \ you use regular expressions to solve this. Here is a very simple regex that\
    \ you can use (it matches a string with a specific length, which can contain letters\
    \ and digits):\n<code>\n^[a-zA-Z0-9\\s]{n}$\n</code>\nHere is an example in C#:\n\
    <code>\nusing System;\nusing System.Text.RegularExpressions;\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxgy69g1n.d(28): Error: found `in` when expecting `;`

    /tmp/tmpxgy69g1n.d(68): Error: declaration expected, not `<`

    /tmp/tmpxgy69g1n.d(77): Error: unterminated character constant

    /tmp/tmpxgy69g1n.d(85): Error: character ''\'' is not a valid token

    /tmp/tmpxgy69g1n.d(90): Error: semicolon expected, not `.`

    /tmp/tmpxgy69g1n.d(90): Error: no identifier for declarator `.Text.RegularExpressions`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxgy69g1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long count = 1;\n    string word\
    \ = \"\";\n    \n    for (int i = 0; i < s.length(); i++)\n    {\n        char\
    \ c = s[i];\n        if ((c.isUpper() || c.isDigit()) && count > n)\n        {\n\
    \            word = \"\";\n            count = 1;\n            \n        }\n \
    \       \n        else\n        {\n            word += c;\n            count++;\n\
    \        }\n    }\n    \n    string[] result = { word };\n    \n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis answer does not work if the word is `\"He\
    \ said it wouldn't be too bad if it was his birthday next week.\"`\n<|/ c |>\n\
    <| c |>\n, that would be very hard to fix without changing his entire code base\
    \ for other reasons.  This answer was intended to solve the problem given in the\
    \ question, which is just as simple.  It would not be a good idea to implement\
    \ this into production code.\n<|/ c |>\n<| c |>\nYes, I understand that.  Just\
    \ wanted to point out that this solution does not meet the requirement that the\
    \ word have \"exactly n consonants\".  In your case, the result would be `[\"\
    h\", \"i\", \"am\"]`.\n<|/ c |>\n<| c |>\n, this is why I said \"in order these\
    \ words appear in the string s.\"  The order of the words does not matter.\n<|/\
    \ c |>\n<| c |>\nOh, I see.  I didn't notice that part of the requirement.  However,\
    \ I still think your code would not produce the correct answer for that case.\n\
    <|/ c |>\n<| a |>\n<code>\npublic class Main {\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzh41xohb.d(48): Error: declaration expected, not `<`

    /tmp/tmpzh41xohb.d(63): Error: unterminated character constant

    /tmp/tmpzh41xohb.d(72): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(73): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(74): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(75): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(76): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(77): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(78): Error: declaration expected, not `assert`

    /tmp/tmpzh41xohb.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzh41xohb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n\t/*\n\tTODO: \n\t*/\n\treturn \"\
    \";\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldsg_ntu.d(27): Error: cannot implicitly convert expression `""`
    of type `string` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpldsg_ntu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    list<string> lst;\n    string\
    \ word;\n    int i, j, k, ncons;\n    ncons = n;\n    for (i = 1; i <= length(s);\
    \ ++i) \n    {\n        word = s.substr(0,i);\n        j = 0;\n        while (j\
    \ < ncons && j < length(word)) \n        {\n            if (word[j] != std.typecons.cons(s[i]))\n\
    \            {\n                break;\n            }\n            ++j;\n    \
    \    }\n        if (j == ncons)\n        {\n            lst.push(word);\n    \
    \    }\n    }\n    sort(lst.begin(), lst.end());\n    return lst.begin();\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your time and effort on solving\
    \ this problem. Unfortunately, I cannot use anything outside of the stdlib functions\
    \ as you mentioned. I did find the `substr()` function which was helpful but still\
    \ cannot think of a way to solve this problem without using the STD.\n<|/ c |>\n\
    <| a dscore=0 |>\nI believe this will do the trick, although it's not particularly\
    \ elegant.\n<code>\ndef select_words(s, n)\n  r = Array.new\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rg03xo1.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp7rg03xo1.d(48): Error: declaration expected, not `<`

    /tmp/tmp7rg03xo1.d(54): Error: unterminated character constant

    /tmp/tmp7rg03xo1.d(62): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(63): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(64): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(65): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(66): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(67): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(68): Error: declaration expected, not `assert`

    /tmp/tmp7rg03xo1.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rg03xo1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    char s[s.length];\n    \n   \
    \ long i = 0;\n    \n    while(i<s.length){\n        s[i] = s[i];\n        i++;\n\
    \    }\n    \n    int index = 0;\n    \n    int count = 0;\n    \n    while(index<s.length){\n\
    \        if(s[index]=='a' || s[index]=='e' || s[index]=='i' || s[index]=='o' ||\
    \ s[index]=='u') count++;\n        index++;\n    }\n    \n    long total = 0;\n\
    \    \n    while(index<s.length){\n        total += s.charAt(index);\n       \
    \ if(total==n){\n            string word = \"\";\n            \n            while(index<s.length){\n\
    \                word += s.charAt(index);\n                index++;\n        \
    \    }\n            \n            \n            \n            return new string[]{word};\n\
    \            \n        }\n        index++;\n    }\n    \n    return new string[0];\n\
    \    \n}\n</code>\n<|/ q tags=string,java |>\n<| c |>\nIt would be more clear\
    \ if you add the code snippet directly to your question instead of just in a screenshot.\n\
    <|/ c |>\n<| c |>\nWelcome to Stack Overflow. Please read [How do I ask a good\
    \ question?](https://stackoverflow.com/help/how-to-ask) before attempting to ask\
    \ more questions.\n<|/ c |>\n<| c |>\nWhy not show what you have tried to solve\
    \ the problem?\n<|/ c |>\n<| a dscore=0 |>\nIf you just want to see how many times\
    \ a substring occurs you can just use the substring method:\n<code>\nString s\
    \ = \"Mary had a little lamb\";\ns.substring(3, 6);\n</code>\n<|/ a tags=string,java\
    \ |>\n<| c |>\nThanks, that is a useful method, but I think I need to return the\
    \ entire word rather than the substring. Do you know how I can do that?\n<|/ c\
    \ |>\n<| c |>\nOh I see. Well you could split on the space and then take the first\
    \ n elements from the resulting array. Or if you split on the space then loop\
    \ through each element in the array and count the amount of occurences. That might\
    \ be a bit hard, but I'll give it a go\n<|/ c |>\n<| c |>\nThanks, I added my\
    \ code to my question. If you could help would be much appreciated!\n<|/ c |>\n\
    <| c |>\nAh I think I see what your trying to do. Can you explain what exactly\
    \ you are trying to accomplish in the code snippet you posted?\n<|/ c |>\n<| a\
    \ |>\nI think this is what you are looking for:\n<code>\nimport java.util.HashMap;\n\
    import java.util.Map\nunittest\n{\n    alias candidate = select_words;\n\n   \
    \ assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmponk_alyy.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `char[s.length] s`

    /tmp/tmponk_alyy.d(56): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmponk_alyy.d(56): Error: found `}` when expecting `;` following statement

    /tmp/tmponk_alyy.d(56): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmponk_alyy.d(65): Error: declaration expected, not `<`

    /tmp/tmponk_alyy.d(80): Error: unexpected `(` in declarator

    /tmp/tmponk_alyy.d(80): Error: basic type expected, not `3`

    /tmp/tmponk_alyy.d(80): Error: found `3` when expecting `)`

    /tmp/tmponk_alyy.d(80): Error: no identifier for declarator `s.substring(_error_)`

    /tmp/tmponk_alyy.d(80): Error: semicolon expected following function declaration

    /tmp/tmponk_alyy.d(80): Error: declaration expected, not `,`

    /tmp/tmponk_alyy.d(81): Error: declaration expected, not `<`

    /tmp/tmponk_alyy.d(87): Error: unterminated character constant

    /tmp/tmponk_alyy.d(100): Error: `;` expected

    /tmp/tmponk_alyy.d(101): Error: declara'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] r;\n    std.string[]\
    \ sa;\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n      \
    \  if(std.string.contains(s, std.string.substr(s, i))) {\n            count++;\n\
    \        }\n    }\n    if(count > n) {\n        sa = std.string.split(s, \" \"\
    );\n        std.sort(sa, std.string.comparer);\n        r = new string[sa.length];\n\
    \        for(int i = 0; i < sa.length; i++) {\n            r[i] = sa[i];\n   \
    \     }\n    } else {\n        r = new string[]{s};\n    }\n    return r;\n}\n\
    </code>\n<|/ a dscore=1 tags=algorithm,c++,string |>\n<| c |>\nThanks for your\
    \ response, I was going to use std::count_if but since I am not allowed to use\
    \ the header file I couldn't do it. I tried to rewrite my code using your function\
    \ but it doesn't seem to work. Any suggestions why it isn't working?\n<|/ c |>\n\
    <| c |>\nYou need two for loops, one to count the total count of letters, and\
    \ another to loop through the input string. The return value of the function will\
    \ be an array of strings. I'll post the code in a few minutes.\n<|/ c |>\n<| c\
    \ |>\nI appreciate your help. I was able to fix the issue I was having. Thank\
    \ you!\n<|/ c |>\n<| c |>\nSorry, it took me a while to respond. Your method works\
    \ but there is still an issue. If the string contains more than one word with\
    \ a number greater than the parameter n, the function will return the first word\
    \ it finds. So if the function was called select_words(\"Mary had a little lamb\"\
    , 3L) it would return Mary. Is there a way to fix this?\n<|/ c |>\n<| c |>\nYes,\
    \ you can just change the return value from a string[] to a string. I'll edit\
    \ the answer shortly.\n<|/ c |>\n<| a |>\nHere is a version using C++ algorithms\
    \ instead of loops.\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <algorithm>\nusing namespace std;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3dk6nwpu.d(40): Error: found `{` when expecting `;` following statement

    /tmp/tmp3dk6nwpu.d(40): Error: found `}` when expecting `;` following statement

    /tmp/tmp3dk6nwpu.d(40): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp3dk6nwpu.d(44): Error: declaration expected, not `<`

    /tmp/tmp3dk6nwpu.d(47): Error: unterminated character constant

    /tmp/tmp3dk6nwpu.d(47): Error: unterminated character constant

    /tmp/tmp3dk6nwpu.d(47): Error: unterminated character constant

    /tmp/tmp3dk6nwpu.d(50): Error: unterminated character constant

    /tmp/tmp3dk6nwpu.d(59): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3dk6nwpu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long result = 0;\n    std.typecons.List<string>\
    \ list = std.typecons.List.of();\n    for(long i = 0; i < s.length(); i++)\n \
    \   {\n        string word = s.Substring(i, 1);\n        result = std.math.bitAnd(std.typecons.List.contains(word,\
    \ n));\n        if(result == 1)\n        {\n            list.add(word);\n    \
    \    }\n    }\n    return list.toArray();\n}\n</code>\n<|/ a |>\n<| a |>\nThe\
    \ trick here is to convert the problem to finding how many consonants are in the\
    \ first 'n' letters of the string and counting how many of these consonants appear\
    \ in the word. Let's try to solve it with Java8 streams:\n<code>\nList<String>\
    \ words = Arrays.asList(\"Mary had a little lamb\", \"Hello world\", \"Uncle sam\"\
    );\nlong totalConsonants = words.stream().flatMap(w -> w.substring(0, n).chars().map(c\
    \ -> c - 'a' + 1)).count();\n</code>\nWhat we are doing here is creating a stream\
    \ of all the words from the sentences, then we are using flatMap to transform\
    \ each word into a stream of consonants. Then we are counting the number of consonants\
    \ in the stream.\nIf we were using Java 8 Streams, it would look like this:\n\
    <code>\nlong totalConsonants = words.stream().flatMapToInt(w -> w.substring(0,\
    \ n).chars().mapToObj(c -> c - 'a' + 1)).count();\n</code>\nIf you want a more\
    \ functional approach, you can use Stream.iterate which can be used to iterate\
    \ over the characters in a string:\n<code>\nlong totalConsonants = Stream.iterate(words.get(0),\
    \ 1, (cur, acc) -> cur + 1).limit(n).sum();\n</code>\n<|/ a dscore=0 tags=string,algorithm,java\
    \ |>\n<| a dscore=0 tags=string,algorithm,java |>\nI would write a recursive function\
    \ which would keep track of the number of consonants remaining in the string as\
    \ well as the number of consonants already in the string. Once we hit the desired\
    \ length (or number of consonants already in the string) we simply return the\
    \ answer. Below is a simple example using your input:\n<code>\npublic static void\
    \ main(String args[]){\n    String s = \"Mary had a little lamb\";\n    System.out.println(select_words(s,4));\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4f2csjfy.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmp4f2csjfy.d(37): Error: declaration expected, not `<`

    /tmp/tmp4f2csjfy.d(40): Error: unterminated character constant

    /tmp/tmp4f2csjfy.d(43): Error: use `.` for member lookup, not `->`

    /tmp/tmp4f2csjfy.d(43): Error: use `.` for member lookup, not `->`

    /tmp/tmp4f2csjfy.d(44): Error: declaration expected, not `<`

    /tmp/tmp4f2csjfy.d(49): Error: declaration expected, not `<`

    /tmp/tmp4f2csjfy.d(53): Error: declaration expected, not `<`

    /tmp/tmp4f2csjfy.d(60): Error: identifier expected following `.` instead of `out`

    /tmp/tmp4f2csjfy.d(60): Error: no identifier for declarator `System`

    /tmp/tmp4f2csjfy.d(60): Error: declaration expected, not `out`

    /tmp/tmp4f2csjfy.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f2csjfy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long count = 0;\n    int len\
    \ = s.length();\n    string[] result = new string[len];\n    foreach(string[]\
    \ r, result) {\n        count = 0;\n        foreach(char c, r) {\n           \
    \ if (c.equals('a') || c.equals('e') || c.equals('i') || c.equals('o') || c.equals('u'))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            r.push(s);\n        }\n    }\n    return std.array.toArray(result);\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72bt777v.d(27): Error: no identifier for declarator `result`

    /tmp/tmp72bt777v.d(27): Error: found `)` when expecting `;`

    /tmp/tmp72bt777v.d(29): Error: no identifier for declarator `r`

    /tmp/tmp72bt777v.d(29): Error: found `)` when expecting `;`

    /tmp/tmp72bt777v.d(34): Error: found `if` when expecting `)`

    /tmp/tmp72bt777v.d(34): Error: found `==` when expecting `)`

    /tmp/tmp72bt777v.d(34): Error: missing `{ ... }` for function literal

    /tmp/tmp72bt777v.d(34): Error: found `n` when expecting `;` following statement

    /tmp/tmp72bt777v.d(34): Error: found `)` instead of statement

    /tmp/tmp72bt777v.d(37): Error: found `}` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72bt777v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n\
    \    return words;\n}\n</code>\n<|/ a |>\n<| c |>\nthanks alot, can you give me\
    \ the link to the java documentation?\n<|/ c |>\n<| c |>\nThe link to the Java\
    \ documentation is at the bottom of the code I provided (under the **Notes** section).\
    \ You probably already know this, but if you want a link to the Java documentation\
    \ itself, this link should help: http://docs.oracle.com/javase/7/docs/api/\n<|/\
    \ c |>\n<| a |>\nI have written this in python that works in O(n)\n<code>\ndef\
    \ count_consonants(phrase,k):\n    count=0\n    for i in range(len(phrase)-k+1):\n\
    \        for j in range(k+1):\n            if phrase[i:i+k]==consonants[j]:\n\
    \                count+=1\n    return count\n</code>\n<|/ a dscore=1 tags=algorithm,java,consonant,string,python\
    \ |>\n<| a |>\nA concise solution using regex:\n<code>\npublic static String[]\
    \ findConsonants(String input) {\n    return input.matches(\"(?=(.).{\" + input.length()\
    \ - Integer.toString(input.length() - 1) + \",})[b-df-hj-np-tv-xzA-\xDF\xE0-\xFF\
    ]+\");\n}\n</code>\n<|/ a tags=algorithm,java,consonant,string,python dscore=1\
    \ |>\n<| a dscore=1 |>\nI have written a simple solution in Java.\nThe idea is\
    \ to count the number of consonants for each substring from the first character\
    \ to the length of the string. And we get one consonant for each of the substrings\
    \ starting from the last character and finishing the first character, i.e. we\
    \ count the number of consonants in the last substring and add it to the number\
    \ of consonants in previous substrings.\n<code>\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyl5wjaf.d(27): Error: declaration expected, not `<`

    /tmp/tmpnyl5wjaf.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyl5wjaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long n = n % 7;\n    long i =\
    \ 0;\n    string[] result = new string[s.length];\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdoegkbms.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdoegkbms.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string w;\n    long cnt = 0;\n\
    \    string[] list = new string[100];\n    \n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        cnt++;\n        for(int j = 0; j < s.length(); j++)\n \
    \       {\n            if (s[i] == s[j])\n            {\n                if (s.length()\
    \ - j == n)\n                {\n                    w = (new string((new string(s.substr(0,\
    \ i), 2))).trim() + \" \" + new string((new string(s.substr(i + 1))).trim()).trim()).trim();\n\
    \                    list[cnt] = w;\n                    i++;\n              \
    \      break;\n                }\n            }\n        }\n    }\n    \n    return\
    \ list;\n}\n</code>\n<|/ a tags=algorithm,string,arrays |>\n<| c |>\nThis is what\
    \ a programmer would expect, if it would work. Unfortunately, it doesn't. :(\n\
    <|/ c |>\n<| a tags=algorithm,string,arrays dscore=0 |>\n<code>\n#include <stdio.h>\n\
    #include <string.h>\n#include <stdlib.h>\n#include <stdbool.h>\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimsur_hq.d(48): Error: declaration expected, not `<`

    /tmp/tmpimsur_hq.d(51): Error: unterminated character constant

    /tmp/tmpimsur_hq.d(63): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(64): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(65): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(66): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(67): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(68): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(69): Error: declaration expected, not `assert`

    /tmp/tmpimsur_hq.d(70): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimsur_hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] w;\n    // TODO: write\
    \ your solution here\n    \n    return w;\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcpvcpzzb.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e15]

    ??:? void tmpcpvcpzzb.__unittest_L29_C1() [0x427c0e]

    ??:? void tmpcpvcpzzb.__modtest() [0x428080]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428b6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a59d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a62c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b45]

    ??:? runModuleUnitTests [0x42d4c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int nConsonants = s.findAll(w\
    \ => (w.getConsonantCount() == n));\n    if (nConsonants == 0) return new string[]\
    \ {};\n    \n    ArrayList words = new ArrayList();\n    for (String w : s.split(\"\
    \ \")) {\n        if (w.length() == nConsonants) words.add(w);\n    }\n    \n\
    \    return words.toArray(new string[words.size()]);\n}\n</code>\n<|/ a tags=java,algorithm,string\
    \ |>\n<| a dscore=0 |>\nHere's a solution in Java using the String#split method\
    \ with regex \"(?=[aeiou])\" that only keeps the consonants.  \n<code>\npublic\
    \ static void main(String args[])\n{\n    String consonants = \"aeiou\";\n   \
    \ String s = \"Mary had a little lamb\";\n    String[] words = new String[s.length()];\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        String word = s.substring(i,\
    \ i + consonants.length());\n        if(consonants.indexOf(word.substring(1, word.length()))\
    \ >= 0)\n        {\n            words[i] = word;\n        }\n    }\n}\n</code>\n\
    <|/ a tags=java,algorithm,string |>\n<| c |>\nPlease don't post only code as answer,\
    \ but also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    Thank you for the suggestion.  I will edit my answer with more description.\n\
    <|/ c |>\n<| a dscore=0 tags=java,algorithm,string |>\n<code>\nimport java.io.BufferedReader;\n\
    import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\
    import java.util.Scanner;\nimport java.util.StringTokenizer;\nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4m904973.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp4m904973.d(28): Error: declaration expected, not `for`

    /tmp/tmp4m904973.d(30): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4m904973.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.isEmpty())\n    {\n   \
    \     return new string[]{\"\"};\n    }\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprlaojvjr.d(26): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprlaojvjr.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmprlaojvjr.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprlaojvjr.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprlaojvjr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int i = 0;\n    while(i < s.length())\n\
    \    {\n        if(s.charAt(i) == '_')\n        {\n            if(s.charAt(i +\
    \ 1) == ' ')\n            {\n                i++;\n            }\n           \
    \ else if(s.charAt(i + 1) == '_')\n            {\n                i++;\n     \
    \       }\n            else\n            {\n                break;\n         \
    \   }\n        }\n        else\n        {\n            if(s.charAt(i) == ' ')\n\
    \            {\n                i++;\n            }\n            else\n      \
    \      {\n                break;\n            }\n        }\n    }\n    string[]\
    \ arr= new string[(int)s.length()-n+1];\n    long count = 0;\n    for(int j=0;\
    \ j < s.length(); j++)\n    {\n        if(s.charAt(j) == ' ')\n        {\n   \
    \         continue;\n        }\n        if(s.charAt(j) == s.charAt(j+1))\n   \
    \     {\n            count++;\n            if(count == n)\n            {\n   \
    \             arr[count] = s.substring(j, j+1);\n            }\n        }\n  \
    \  }\n    return arr;\n}\n</code>\n<|/ a tags=string,java,arrays |>\n<| c |>\n\
    This is O(n^2). It would be nice to have a solution with O(n), but for now this\
    \ is fine.\n<|/ c |>\n<| c |>\nYeah I suppose that could be but this only goes\
    \ up to n^2 so I don't think it would really matter. Also if you would like to\
    \ improve it let me know.\n<|/ c |>\n<| c |>\nIt would matter if you're dealing\
    \ with large strings. Also your solution doesn't work if you're trying to count\
    \ vowels.\n<|/ c |>\n<| c |>\nThank you so much for all the help.  I have used\
    \ my code for the time being and will review the code now that I have better knowledge\
    \ of the language and its libraries.\n<|/ c |>\n<| c |>\nIt seems that someone\
    \ downvoted this answer but I do not have enough reputation to reverse it unless\
    \ it is edited.  If you revise it I will change my vote.  Thank you.\n<|/ c |>\n\
    <| a tags=string,java,arrays |>\nYou can use streams and filter to do this:\n\
    <code>\n    long n = 2;\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqetuzg85.d(54): Error: C style cast illegal, use `cast(int)s.length()`

    /tmp/tmpqetuzg85.d(73): Error: declaration expected, not `<`

    /tmp/tmpqetuzg85.d(79): Error: unterminated character constant

    /tmp/tmpqetuzg85.d(82): Error: unterminated character constant

    /tmp/tmpqetuzg85.d(82): Error: unterminated character constant

    /tmp/tmpqetuzg85.d(82): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqetuzg85.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(s==null || s.length()==0)\
    \ return new string[0];\n    long l=s.length();\n    bool flag=false;\n    string[]\
    \ res=new string[l];\n    long count=0;\n    for(int i=0;i<l;i++)\n    {\n   \
    \     if(s.charAt((int)i)=='n')\n        {\n            flag=true;\n        }\n\
    \        if(!flag) count++;\n        if(flag && count == n) res[(int) i]=s.charAt((int)i);\n\
    \        if(flag && count > n) res[(int) i]=\"\";\n    }\n    return res;\n}\n\
    </code>\n<|/ a tags=algorithm,arrays,string,sorting |>\n<| c |>\nThanks Sarah!\
    \ This is great! I hope you don't mind me asking you a few questions if you don't\
    \ mind :) 1) What exactly are these two lines of code doing? `if(s.charAt((int)i)=='n')`\
    \ and `if(!flag) count++;`. 2) I don't think we can use `std.typecons` because\
    \ we haven't learned it yet, and I'm assuming it is for homework anyways.\n<|/\
    \ c |>\n<| c |>\nThe first line checks if the current character is equal to 'n'.\
    \ The second checks if the current character is equal to something other than\
    \ 'n'. With the latter, we have no way of knowing if the string is empty because\
    \ we never encountered an empty string in the problem statement. Using the first\
    \ check, we know we're working with non-empty strings. The second check is used\
    \ to see if the string is empty, which we'll have to test for later in the code.\
    \ Hence the comment in the code.\n<|/ c |>\n<| c |>\nThanks! That makes a lot\
    \ more sense now.\n<|/ c |>\n<| c |>\nI edited the answer so it doesn't use a\
    \ library. Also, it's good practice to upvote answers you find helpful, or to\
    \ accept an answer if it solves your problem. :)\n<|/ c |>\n<| a dscore=0 tags=algorithm,arrays,string,sorting\
    \ |>\nHere's an answer using a HashMap\n<code>\nimport java.util.*;\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6wnu2yq3.d(31): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp6wnu2yq3.d(36): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp6wnu2yq3.d(36): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp6wnu2yq3.d(37): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp6wnu2yq3.d(41): Error: declaration expected, not `<`

    /tmp/tmp6wnu2yq3.d(44): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(44): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(44): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(44): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(44): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(47): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(47): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(53): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(53): Error: unterminated character constant

    /tmp/tmp6wnu2yq3.d(56): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6w'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string [] ans;\n    foreach(char\
    \ a in s) \n    {\n        if(n == 0) \n            ans = append(ans, a);\n  \
    \      else\n            foreach(char b in anagrams[a]) \n                if(contains(s,\
    \ b)) \n                    ans = append(ans, b);\n        n--;\n    }\n    return\
    \ ans;\n}\n</code>\n<|/ a |>\n<| a tags=string,algorithm,java |>\nUse a HashSet<String>\
    \ to store the characters of a word and when you encounter a word that has n characters\
    \ then return the characters in the HashSet.\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nThis is my solution to the problem using Java.\n<code>\npublic class WordCount{\n\
    \    public static void main(String args[]){\n        HashSet<String> set = new\
    \ HashSet<String>();\n        System.out.println(\"Enter the text to count: \"\
    );\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n\
    \        for(int i = 0; i< s.length();i++){\n            char c = s.charAt(i);\n\
    \            if(Character.isLetter(c)){\n                if(c==' ')\n        \
    \            continue;\n                else\n                    set.add(Character.toString(c));\n\
    \            }\n        }\n        System.out.println(\"Total number of words\
    \ are: \"+set.size());\n    }\n}\n</code>\n<|/ a tags=string,algorithm,java |>\n\
    <| a dscore=0 |>\n<code>\nimport java.io.*;\nimport java.util.*;\npublic class\
    \ Solution\n{\npublic static void main(String[] args) throws IOException\n{\n\
    \    Scanner sc=new Scanner(System.in);\n    long n = sc.nextLong();\n    ArrayList<String>\
    \ words=new ArrayList<String>();\n    String s=sc.next();\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        for(int j=i+1;j<s.length();j++)\n        {\n            if(s.charAt(i)==s.charAt(j))\n\
    \            {\n                words.add(s.substring(i,j+1));\n             \
    \   i++;\n            }\n        }\n    }\n    for(int i=0;i<words.size();i++)\n\
    \    {\n        for(String s:words)\n        {\n            if(s.equals(words.get(i)))\n\
    \            {\n                System.out.println(i);\n                break;\n\
    \            }\n        }\n    }\n}\n}\n</code>\n<|/ a tags=string,algorithm,java\
    \ |>\n<| c |>\nThis algorithm works very well for this question. Can you explain\
    \ how it works, please?\n<|/ c |>\n<| c |>\nIt works by comparing the two characters\
    \ of the string one by one, and if they are equal \nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq_zc9hf.d(25): Error: found `in` when expecting `;`

    /tmp/tmpqq_zc9hf.d(30): Error: found `in` when expecting `;`

    /tmp/tmpqq_zc9hf.d(37): Error: declaration expected, not `<`

    /tmp/tmpqq_zc9hf.d(48): Error: identifier expected following `.` instead of `out`

    /tmp/tmpqq_zc9hf.d(48): Error: no identifier for declarator `System`

    /tmp/tmpqq_zc9hf.d(48): Error: declaration expected, not `out`

    /tmp/tmpqq_zc9hf.d(49): Error: identifier expected following `.`, not `in`

    /tmp/tmpqq_zc9hf.d(51): Error: declaration expected, not `for`

    /tmp/tmpqq_zc9hf.d(51): Error: no identifier for declarator `i`

    /tmp/tmpqq_zc9hf.d(51): Error: declaration expected, not `<`

    /tmp/tmpqq_zc9hf.d(51): Error: no identifier for declarator `i`

    /tmp/tmpqq_zc9hf.d(51): Error: declaration expected, not `++`

    /tmp/tmpqq_zc9hf.d(53): Error: declaration expected, not `if`

    /tmp/tmpqq_zc9hf.d(56): Error: declaration expected, not `else`

    /tmp/tmpqq_zc9hf.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq_zc'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\n</code>\n<|/\
    \ q tags=c#,string,arrays dscore=0 |>\n<| c |>\nI don't see your problem. Can\
    \ you clarify your question?\n<|/ c |>\n<| c |>\nI'm just not sure how to do it.\n\
    <|/ c |>\n<| c |>\n\"I cannot figure out how to do it\" is really vague. Maybe\
    \ try a couple things and if you get stuck you can come back with a *specific*\
    \ question. If all else fails, read the documentation on `String`s and `Linq`.\n\
    <|/ c |>\n<| a tags=c#,string,arrays |>\nYou can do some thing like this.\n<code>\n\
    \ string[] select_words(string s, long n) \n    {\n        if (s == null)\n  \
    \      {\n            return new string[0];\n        }\n        else\n       \
    \ {\n            List<string> list = new List<string>();\n            string[]\
    \ words = s.Split(' ').ToArray();\n            foreach (string word in words)\n\
    \            {\n                if (word.Count(x => x == 'a') == n || word.Count(x\
    \ => x == 'e') == n || word.Count(x => x == 'i') == n || word.Count(x => x ==\
    \ 'o') == n || word.Count(x => x == 'u') == n)\n                    list.Add(word);\n\
    \            }\n            return list.ToArray();\n        }\n    }\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks Sachin for helping me out. I'm trying now to\
    \ modify it so that it checks for multiple consonants in the same word. For example,\
    \ if I enter \"Hello World\" where n is 3, I would like it to return \"Hell World\"\
    .\n<|/ c |>\n<| a dscore=0 |>\nYou can achieve this using Linq:\n<code>\nusing\
    \ System;\nusing System.Linq;\nusing System.Collections.Generic;\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzsgoczi7.d(26): Error: declaration expected, not `<`

    /tmp/tmpzsgoczi7.d(29): Error: unterminated character constant

    /tmp/tmpzsgoczi7.d(32): Error: unterminated character constant

    /tmp/tmpzsgoczi7.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzsgoczi7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = new string[0];\n\
    \    string currentWord = \"\";\n    \n    for (int i = 0; i < s.length(); i++)\n\
    \    {\n        char current = s[i];\n        currentWord = currentWord + current;\n\
    \        if (currentWord == s.substring(n + 1).trim())\n        {\n          \
    \  words.add(currentWord.trim());\n            currentWord = \"\";\n        }\n\
    \    }\n    \n    if (currentWord.length() > 0)\n        words.add(currentWord.trim());\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx29yjfqh.d(40): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx29yjfqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = new string[1000];\n\
    \    for(long i = 0; i < s.length(); i++)\n    {\n        bool found = false;\n\
    \        for(long j = 0; j < words.length; j++)\n        {\n            if(words[j].length()\
    \ >= n) \n            {\n                found = true;\n                break;\n\
    \            }\n        }\n        if(!found)\n        {\n            words.push_back(\"\
    null\");\n        }\n    }\n    return words;\n}\n</code>\n<|/ a tags=string,java\
    \ dscore=1 |>\n<| a tags=string,java |>\nThis isn't the best solution, but here's\
    \ some pseudocode:\n<code>\nArrayList<String> list = Arrays.asList(\"string\"\
    );\n// get the max length of all strings\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpncra8gwy.d(43): Error: declaration expected, not `<`

    /tmp/tmpncra8gwy.d(46): Error: unterminated character constant

    /tmp/tmpncra8gwy.d(46): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpncra8gwy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  std.typecons.Vector<string> results;\n\
    \  std.string[] strings = std.string.split(s);\n  std.string[] filter;\n  filter\
    \ = new std.string[strings.length];\n  for( int i = 0; i < filter.length; i++\
    \ )\n  {\n    filter[i] = strings[i].toLower();\n  }\n  filter = new std.string[filter.length];\n\
    \  for( int i = 0; i < filter.length; i++ )\n  {\n    bool found = false;\n  \
    \  for( int j = 0; j < filter.length; j++ )\n    {\n      if( filter[j] == filter[i]\
    \ )\n      {\n        found = true;\n        break;\n      }\n    }\n    if( !found\
    \ )\n    {\n      results.push_back(filter[i]);\n    }\n  }\n  results = std.string.sort_by_key(results);\n\
    \  results = std.string.remove_duplicate_entries(results);\n  std.string[] stringResults;\n\
    \  stringResults = new std.string[results.length];\n  for( int i = 0; i < stringResults.length;\
    \ i++ )\n  {\n    if( results[i] == s ) \n    {\n      stringResults[i] = results[i];\n\
    \    }\n  }\n  stringResults = std.string.sort_by_key(stringResults);\n  stringResults\
    \ = std.string.remove_duplicate_entries(stringResults);\n  for( int i = 0; i <\
    \ stringResults.length; i++ )\n  {\n    if( stringResults[i].length() == n )\n\
    \    {\n      results.push_back(stringResults[i]);\n    }\n  }\n  results = std.string.sort_by_key(results);\n\
    \  results = std.string.remove_duplicate_entries(results);\n  return results;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjg9d_1n.d(24): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjg9d_1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr = new string[100];\n\
    \    char ch;\n    for(long i=0;i<s.length;i++){\n        ch = s[i];\n       \
    \ if(n == 1) //one consonant\n        {\n            for(int j=i;j<s.length();j++){\n\
    \                ch = s[j];\n                if((ch == ' ')||(ch == '\\t')||(ch\
    \ == '\\n')||(ch == '\\r')||(ch == '\\t')||(ch == '\\t'))\n                {\n\
    \                    arr[arr.length] = \"\";\n                }\n            \
    \    else if(ch == 'a')||(ch == 'e')||(ch == 'i')||(ch == 'o')||(ch == 'u')\n\
    \                {\n                    arr[arr.length] = \"\";\n            \
    \    }\n                else if(ch == 'b')\n                {\n              \
    \      arr[arr.length] = \"\";\n                }\n                else if(ch\
    \ == 'c')\n                {\n                    arr[arr.length] = \"\";\n  \
    \              }\n                else if(ch == 'd')\n                {\n    \
    \                arr[arr.length] = \"\";\n                }\n                else\
    \ if(ch == 'f')\n                {\n                    arr[arr.length] = \"\"\
    ;\n                }\n                else if(ch == 'h')\n                {\n\
    \                    arr[arr.length] = \"\";\n                }\n            \
    \    else if(ch == 'k')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'l')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 'm')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'n')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 'p')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'q')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 'r')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 's')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 't')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'v')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 'w')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'x')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else if(ch == 'y')\n                {\n                    arr[arr.length]\
    \ = \"\";\n                }\n                else if(ch == 'z')\n           \
    \     {\n                    arr[arr.length] = \"\";\n                }\n    \
    \            else\n                {\n                    arr[arr.length] = ch;\n\
    \                }\n            }\n        }\n        else  //more than consonant\n\
    \        {\n            for(int j=i;j<s.length();j++)\n            {\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr4exxiyj.d(36): Error: found `||` instead of statement

    /tmp/tmpr4exxiyj.d(40): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpr4exxiyj.d(122): Error: declaration expected, not `else`

    /tmp/tmpr4exxiyj.d(124): Error: no identifier for declarator `j`

    /tmp/tmpr4exxiyj.d(124): Error: declaration expected, not `<`

    /tmp/tmpr4exxiyj.d(124): Error: no identifier for declarator `j`

    /tmp/tmpr4exxiyj.d(124): Error: declaration expected, not `++`

    /tmp/tmpr4exxiyj.d(130): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(131): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(132): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(133): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(134): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(135): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(136): Error: declaration expected, not `assert`

    /tmp/tmpr4exxiyj.d(137): Error: unrecognized declaration

    Failed: ["'
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] array = new string[s.length()];\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqkosx9rw.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqkosx9rw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  int count = 0;\n  string [] ans;\n\
    \  string word;\n  int j = 0;\n  if (s == \"\") \n  {\n    ans = new string[];\n\
    \  } \n  else \n  {\n    int i = 0;\n    while (count < n && i < s.length()) \n\
    \    {\n      word = s.substring(i, j);\n      if (consonant(word))\n      {\n\
    \        ans[count++] = word;\n        j++;\n        i++;\n      } \n      else\
    \ \n      {\n        i++;\n      }\n    }\n  }\n  return ans;\n}\n/*\nGiven a\
    \ string s, return a string with the characters in s that appear only once\nin\
    \ the entire string, where \"once\" means that the same character appears only\
    \ once \nin the entire string. For example, given s = \"abacabad\", the function\
    \ should return \"ad\".\nNote: you may assume the input string contains only lowercase\
    \ letters and spaces.\nExamples:\n>>> char_once_only(\"a bb cccaabaa\")\n\"bb\"\
    \n>>> char_once_only(\"acaacaa\")\n\"\"\n*/\nstring char_once_only(string s)\n\
    {\n  string ans;\n  set<string> seen;\n  int j = 0;\n  ans = \"\";\n  for (int\
    \ i = 0; i < s.length(); i++) \n  {\n    if (seen.find(s.substring(i, j + 1))\
    \ == seen.end())\n    {\n      ans += s.substring(i, j + 1);\n      seen.insert(s.substring(i,\
    \ j + 1));\n      j++;\n    }\n  }\n  return ans;\n}\n/*\nGiven an array of integers,\
    \ return an array where each element is the product of the \nelements of the original\
    \ array except the one at index i. For example: if there are \ntwo elements in\
    \ the original array a = [2,3]. The return array should be a = [6,6]. The \nproduct\
    \ of the other two elements is not included because it equals 1.\nThe input array\
    \ will always be valid.\n*/\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qirurj8.d(66): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qirurj8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] res = new string[1000000];\n\
    \    \n    for(int i=0; i <= s.length() ; i++)\n    {\n        string word = s.substr(i,\
    \ (s.length()) - i);\n        res.Remove(word);\n    }\n    \n    return res;\n\
    }\n</code>\n<|/ a |>\n<| a |>\nThis solution uses the same technique as in the\
    \ solution by Eric Lee. You basically iterate the String from right to left and\
    \ store all words that contain at least n consonants in a HashSet. This is O(n)\
    \ runtime and O(n^2) space.\n<code>\npublic static List<String> wordsContainingNConsonants(String\
    \ input, int n) {\n    List<String> result = new ArrayList<String>();\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvza_kuc0.d(34): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvza_kuc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string t = \"\";\n    int len\
    \ = 0;\n    int k = 0;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(s[i] == \" \") \n        {\n            if(!t.isEmpty()) \n      \
    \      {\n                string[] result = new string[len];\n               \
    \ \n                for(int j = 0; j < len; j++)\n                {\n        \
    \            result[j] = t;\n                }\n                \n           \
    \     len = 0;\n                t = \"\";\n                k = 0;\n          \
    \      \n                return result;\n            }\n        }\n        \n\
    \        else if(s[i] == \"d\") \n        {\n            if(!t.isEmpty())\n  \
    \          {\n                string[] result = new string[len];\n           \
    \     \n                for(int j = 0; j < len; j++)\n                {\n    \
    \                result[j] = t;\n                }\n                \n       \
    \         len = 0;\n                t = \"\";\n                k = 0;\n      \
    \          \n                return result;\n            }\n        }\n      \
    \  \n        else if(s[i] == \"h\")\n        {\n            if(k == 0) \n    \
    \        {\n                t = s + \"h\";\n                len += 1;\n      \
    \          k = 1;\n            }\n            else \n            {\n         \
    \       t = s + \"h\";\n                len += 1;\n                k = 0;\n  \
    \          }\n        }\n        \n        else if(s[i] == \"a\")\n        {\n\
    \            if(k == 0) \n            {\n                t = s + \"a\";\n    \
    \            len += 1;\n                k = 1;\n            }\n            else\
    \ \n            {\n                t = s + \"a\";\n                len += 1;\n\
    \                k = 0;\n            }\n        }\n        \n        else if(s[i]\
    \ == \"o\")\n        {\n            if(k == 0) \n            {\n             \
    \   t = s + \"o\";\n                len += 1;\n                k = 1;\n      \
    \      }\n            else \n            {\n                t = s + \"o\";\n \
    \               len += 1;\n                k = 0;\n            }\n        }\n\
    \        \n        else if(s[i] == \"l\")\n        {\n            if(k == 0) \n\
    \            {\n                t = s + \"l\";\n                len += 1;\n  \
    \              k = 1;\n            }\n            else \n            {\n     \
    \           t = s + \"l\";\n                len += 1;\n                k = 0;\n\
    \            }\n        }\n        \n        else if(s[i] == \"l\")\n        {\n\
    \            if(k == 0) \n            {\n                t = s + \"l\";\n    \
    \            len += 1;\n                k = 1;\n            }\n            else\
    \ \n            {\n                t = s + \"l\";\n                len += 1;\n\
    \                k = 0;\n            }\n        }\n        \n        else if(s[i]\
    \ == \"b\")\n        {\n            if(k == 0) \n            {\n             \
    \   t = s + \"b\";\n                len += 1;\n                k = 1;\n      \
    \      }\n            else \n            {\n                t = s + \"b\";\n \
    \               len += \nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31wa8r6h.d(160): Error: expression expected, not `unittest`

    /tmp/tmp31wa8r6h.d(161): Error: found `{` when expecting `;` following statement

    /tmp/tmp31wa8r6h.d(172): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp31wa8r6h.d(172): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp31wa8r6h.d(172): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31wa8r6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string s2;\n    string[] ret;\n\
    \    int count = 0;\n    int start = 0;\n    \n    if (s.length() == 0)\n    \
    \    return ret;\n    \n    if (s.indexOf(\"a\", n) > -1) {\n        start = s.indexOf(\"\
    a\", n);\n    }\n    \n    for (int i = start; i < s.length(); i++) {\n      \
    \  if (s.charAt(i) == \" \")\n            count++;\n        else if (s.charAt(i)\
    \ == \"a\")\n            count--;\n    }\n    \n    for (int i = start; i < s.length();\
    \ i++) {\n        if (s.charAt(i) == \" \")\n            count++;\n        else\
    \ if (s.charAt(i) == \"a\")\n            count--;\n        else if (s.charAt(i)\
    \ == \" \")\n            count++;\n    }\n    \n    if (count == 0)\n        count\
    \ = 0;\n    \n    s2 = s.substring(0, start);\n    if (s2.length() == 0)\n   \
    \     ret = new string[] {s2};\n    else {\n        ret = new string[s2.length()\
    \ + count];\n        \n        int j = 0;\n        for (int i = start; i < s.length();\
    \ i++) {\n            if (s.charAt(i) == \" \")\n                ret[j++] = s2;\n\
    \            else if (s.charAt(i) == \"a\")\n                ret[j++] = \"\";\n\
    \        }\n    }\n    return ret;\n}\n</code>\n<|/ a tags=java,string,algorithm,arrays\
    \ |>\n<| c |>\nThanks a lot, I'll try to implement this on my own.\n<|/ c |>\n\
    <| c |>\nYou're welcome. Feel free to ask questions if you have any.\n<|/ c |>\n\
    <| c |>\nI have one problem with the code you provided. When input string was\
    \ \"Mary had a little lamb\", I got \"little\" instead of \"little,\" \"lamb\"\
    . But I guess it may be simple to fix this bug. I'll try to figure it out.\n<|/\
    \ c |>\n<| c |>\nIt is a bug because you only take the first letter of the first\
    \ word to count how many consonants are in the string. I'll fix that in my code.\n\
    <|/ c |>\n<| c |>\nIt's done. The bug is now fixed and the solution is working.\
    \ You can see the code here.\nhttps://onlinegdb.com/rJH4G1oMj\n<|/ c |>\n<| a\
    \ |>\nHere is the solution that I used after seeing all the other solutions:\n\
    <code>\npublic class Solution {\n    public static String getWords(String s, int\
    \ n) {\n        int start = 0;\n        int count = 0;\n        int count = 0;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1y2k17p.d(57): Error: found `{` when expecting `;` following statement

    /tmp/tmpe1y2k17p.d(57): Error: found `}` when expecting `;` following statement

    /tmp/tmpe1y2k17p.d(57): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpe1y2k17p.d(58): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpe1y2k17p.d(69): Error: declaration expected, not `return`

    /tmp/tmpe1y2k17p.d(70): Error: unrecognized declaration

    /tmp/tmpe1y2k17p.d(74): Error: unterminated character constant

    /tmp/tmpe1y2k17p.d(77): Error: unterminated character constant

    /tmp/tmpe1y2k17p.d(80): Error: unterminated character constant

    /tmp/tmpe1y2k17p.d(83): Error: unterminated character constant

    /tmp/tmpe1y2k17p.d(86): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1y2k17p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int count = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c != ' ' && c != '\\0')\n        {\n            count++;\n\
    \            switch(c)\n            {\n                case 'a': case 'e': case\
    \ 'i': case 'o': case 'u':\n                case 'A': case 'E': case 'I': case\
    \ 'O': case 'U':\n                case '\xC0': case 'E': case 'I': case 'O': case\
    \ 'U':\n                case '\xE0': case '\xE8': case '\xEE': case '\xF4': case\
    \ '\xFB':\n                    count++;\n                    break;\n        \
    \        default:\n                    break;\n            }\n        }\n    }\n\
    \    int k = 0;\n    int count = 0;\n    foreach(char c in s)\n    {\n       \
    \ if(c != ' ' && c != '\\0')\n        {\n            count++;\n            switch(c)\n\
    \            {\n                case 'a': case 'e': case 'i': case 'o': case 'u':\n\
    \                case 'A': case 'E': case 'I': case 'O': case 'U':\n         \
    \       case '\xC0': case 'E': case 'I': case 'O': case 'U':\n               \
    \ case '\xE0': case '\xE8': case '\xEE': case '\xF4': case '\xFB':\n         \
    \           count++;\n                    break;\n                default:\n \
    \                   break;\n            }\n        }\n    }\n    int k = 0;\n\
    \    int count = 0;\n    foreach(char c in s)\n    {\n        if(c != ' ' && c\
    \ != '\\0')\n        {\n            count++;\n            switch(c)\n        \
    \    {\n                case 'a': case 'e': case 'i': case 'o': case 'u':\n  \
    \              case 'A': case 'E': case 'I': case 'O': case 'U':\n           \
    \     case '\xC0': case 'E': case 'I': case 'O': case 'U':\n                case\
    \ '\xE0': case '\xE8': case '\xEE': case '\xF4': case '\xFB':\n              \
    \      count++;\n                    break;\n                default:\n      \
    \              break;\n            }\n        }\n    }\n    int k = 0;\n    int\
    \ count = 0;\n    foreach(char c in s)\n    {\n        if(c != ' ' && c != '\\\
    0')\n        {\n            count++;\n            switch(c)\n            {\n \
    \               case 'a': case 'e': case 'i': case 'o': case 'u':\n          \
    \      case 'A': case 'E': case 'I': case 'O': case 'U':\n                case\
    \ '\xC0': case 'E': case 'I': case 'O': case 'U':\n                case '\xE0\
    ': case '\xE8': case '\xEE': case '\xF4': case '\xFB':\n                    count++;\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n    }\n    int k = 0;\n    int count = 0;\n    foreach(char\
    \ c in s)\n    {\n        if(c != ' ' && c != '\\0')\n        {\n            count++;\n\
    \            switch(c)\n            {\n                case 'a': case 'e': case\
    \ 'i': case 'o': case 'u':\n                case 'A': case 'E': case 'I': case\
    \ 'O': case 'U':\n                case '\xC0': case 'E': case 'I': case 'O': case\
    \ 'U':\n                case '\xE0': case '\xE8': case '\uFFFD\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_u_gs2r.d(25): Error: found `in` when expecting `;`

    /tmp/tmpp_u_gs2r.d(45): Error: found `in` when expecting `;`

    /tmp/tmpp_u_gs2r.d(65): Error: found `in` when expecting `;`

    /tmp/tmpp_u_gs2r.d(85): Error: found `in` when expecting `;`

    /tmp/tmpp_u_gs2r.d(105): Error: found `in` when expecting `;`

    /tmp/tmpp_u_gs2r.d(115): Error: unterminated character constant

    /tmp/tmpp_u_gs2r.d(116): Error: found `unittest` when expecting `:`

    /tmp/tmpp_u_gs2r.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp_u_gs2r.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp_u_gs2r.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp_u_gs2r.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_u_gs2r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long len = 0;\n    string[] rs\
    \ = new string[0];\n    if(s==null || s.isEmpty())\n        return rs;\n    string\
    \ temp = \"\";\n    for(char c: s)\n    {\n        len++;\n        if(c!=' ' &&\
    \ c!='\\t' && c!='\\n')\n            temp += c;\n        if(len==n)\n        {\n\
    \            rs = new string[temp.length()];\n            long start = 0;\n  \
    \          long finish = temp.length()-1;\n            while(start <= finish)\n\
    \            {\n                rs[start] = temp.substring(start, finish);\n \
    \               start = finish+1;\n                finish++;\n            }\n\
    \            break;\n        }\n    }\n    return rs;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4u00562d.d(29): Error: semicolon expected, not `:`

    /tmp/tmp4u00562d.d(29): Error: expression expected, not `:`

    /tmp/tmp4u00562d.d(29): Error: found `s` when expecting `;` following `for` condition

    /tmp/tmp4u00562d.d(50): Error: declaration expected, not `<`

    /tmp/tmp4u00562d.d(58): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(59): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(60): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(61): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(62): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(63): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(64): Error: declaration expected, not `assert`

    /tmp/tmp4u00562d.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u00562d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result=null;\n    string\
    \ word = null;\n    for(int i=0;i<s.length();i++)\n    {\n        if(s[i]==' ')\n\
    \        {\n            if(word !=null)\n            {\n                if(result.size()!=0)\n\
    \                {\n                    result=new string[result.size()+1];\n\
    \                    result[result.size()-1]=word;\n                }\n      \
    \      }\n            word=s[i];\n        }\n        else if(s[i]==s[n])\n   \
    \     {\n            if(word !=null)\n            {\n                if(result.size()!=0)\n\
    \                {\n                    result=new string[result.size()+1];\n\
    \                    result[result.size()-1]=word;\n                }\n      \
    \      }\n            word=s[i];\n        }\n        else if(s[i]!=s[n])\n   \
    \     {\n            if(word !=null)\n            {\n                if(result.size()!=0)\n\
    \                {\n                    result=new string[result.size()+1];\n\
    \                    result[result.size()-1]=word;\n                }\n      \
    \      }\n            word=s[i];\n        }\n    }\n    if(word !=null)\n    {\n\
    \        if(result.size()!=0)\n        {\n            result=new string[result.size()+1];\n\
    \            result[result.size()-1]=word;\n        }\n    }\n    return result;\n\
    }\n/*\nGiven a binary tree and a natural number n, you have been tasked to implement\
    \ \n    a function that returns an array containing all leaf nodes of the binary\
    \ tree \n    with exactly n children.\n    If the tree is empty then you should\
    \ return an empty array.\n    Note: you may assume that the root of the binary\
    \ tree is always non-null.\n    For example, a binary tree can be represented\
    \ as [2,3,5,null,8,null,null,13]\n    and the root is 2, a leaf node is 8 and\
    \ a non-leaf node is 13.\n    Examples:\n    >>> getLeaves(2)\n    [2]\n    >>>\
    \ getLeaves(6)\n    [3, 5]\n    >>> getLeaves(8)\n    [8]\n    >>> getLeaves(10)\n\
    \    [10]\n    >>> getLeaves(13)\n    [null, 13]\n    >>> getLeaves(14)\n    [null,\
    \ null, 13]\n*/\nlong[] getLeaves(Node<long>root, n) \n{\n    long[] result=null;\n\
    \    Node<long> current=root;\n    while(current.left != null)\n    {\n      \
    \  current=current.left;\n    }\n    long count=0;\n    if(current.right!=null)\n\
    \    {\n        count=n+1;\n    }\n    while(current.right !=null)\n    {\n  \
    \      count++;\n        current=current.right;\n    }\n    if(count < n)\n  \
    \  {\n        result=new long[count];\n        int index=0;\n        while(current.left\
    \ !=null)\n        {\n            result[index]=current.left.data;\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq3c3dvz5.d(97): Error: found `<` when expecting `)`

    /tmp/tmpq3c3dvz5.d(97): Error: semicolon expected following function declaration

    /tmp/tmpq3c3dvz5.d(97): Error: no identifier for declarator `long`

    /tmp/tmpq3c3dvz5.d(97): Error: declaration expected, not `>`

    /tmp/tmpq3c3dvz5.d(100): Error: no identifier for declarator `Node`

    /tmp/tmpq3c3dvz5.d(100): Error: declaration expected, not `<`

    /tmp/tmpq3c3dvz5.d(101): Error: declaration expected, not `while`

    /tmp/tmpq3c3dvz5.d(104): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq3c3dvz5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var wordsArray = new string[0];\n\
    \    if(s == \"\" || n == 0)\n        return wordsArray;\n    else\n    {\n  \
    \      for(var i=0; i < s.Length; i++)\n        {\n            if(char.IsLetter(s[i]))\n\
    \            {\n                var wordsList = new List<string>();\n        \
    \        var wordsListArray = words.Split(\" \");\n                foreach(var\
    \ word in wordsListArray)\n                {\n                    if(word.Length\
    \ == n)\n                        wordsList.Add(word);\n                }\n   \
    \             wordsArray = wordsList.ToArray();\n            }\n        }\n  \
    \  }\n    return wordsArray;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code\
    \ is incorrect for the example. It should be `[\"little\", \"lamb\"]`\n<|/ c |>\n\
    <| c |>\nThanks, you are right :) I will change it\n<|/ c |>\n<| c |>\nI updated\
    \ the code. Now it works as you want.\n<|/ c |>\n<| c |>\n, thank you very much\
    \ for your response. I am new to C# and I really appreciate your help!\n<|/ c\
    \ |>\n<| c |>\nI updated the code. Now it works as you want.\n<|/ c |>\n<| a dscore=0\
    \ tags=c#,arrays |>\n<code>\npublic static int[] CountConsonants(string str)\n\
    {\n    int[] counter = new int[26];\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5x6_h5m2.d(33): Error: semicolon expected, not `>`

    /tmp/tmp5x6_h5m2.d(33): Error: found `>` instead of statement

    /tmp/tmp5x6_h5m2.d(35): Error: found `in` when expecting `;`

    /tmp/tmp5x6_h5m2.d(46): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5x6_h5m2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    char ch;\n    List<string> ret\
    \ = new List<string>();\n    if (s.Length == 0)\n        return ret;\n    char[]\
    \ chars = s.ToCharArray();\n    int[] counts = new int[256];\n    foreach(char\
    \ c in chars)\n    {\n        if (chars.IndexOf(c) >= 0)\n        {\n        \
    \    counts[c]++;\n        }\n    }\n    int counter = 0;\n    foreach (char c\
    \ in chars)\n    {\n        if (chars.IndexOf(c) >= 0)\n        {\n          \
    \  counter = counter - chars.IndexOf(c);\n        }\n        if (counter == n)\n\
    \        {\n            ret.Add(new string(chars.Take(chars.IndexOf(c) + 1).ToArray()));\n\
    \        }\n    }\n    return ret.ToArray();\n}\n/*\n    Given a string s consisting\
    \ only of digits, \n    and the number k, \n    you need to implement a function\
    \ that returns an array \n    of k words whose letters appear the most in the\
    \ \n    string s.\n    If the string s is empty then return an empty array.\n\
    \    Note: you may assume that the string contains only digits and spaces.\n \
    \   Examples:\n    >>> select_most_frequent_words(\"Mary had a little lamb\",\
    \ 4L)\n    [\"little\"]\n    >>> select_most_frequent_words(\"Mary had a little\
    \ lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_most_frequent_words(\"\
    simple white space\", 2L)\n    []\n    >>> select_most_frequent_words(\"Hello\
    \ world\", 4L)\n    [\"world\"]\n    >>> select_most_frequent_words(\"Uncle sam\"\
    , 3L)\n    [\"sam\", \"Uncle\"]\n*/\nstring[] select_most_frequent_words(string\
    \ s, long k) \n{\n    char ch;\n    List<string> ret = new List<string>();\n \
    \   if (s.Length == 0)\n        return ret;\n    int[] counts = new int[256];\n\
    \    foreach(char c in s.ToCharArray())\n    {\n        if (s.IndexOf(c) >= 0)\n\
    \        {\n            counts[c]++;\n        }\n    }\n    int counter = 0;\n\
    \    foreach (char c in s.ToCharArray())\n    {\n        if (s.IndexOf(c) >= 0)\n\
    \        {\n            counter = counter - s.IndexOf(c);\n        }\n       \
    \ if (counter == k)\n        {\n            ret.Add(new string(s.Take(s.IndexOf(c)\
    \ + 1).ToArray()));\n        }\n    }\n    return ret.ToArray();\n}\n</code>\n\
    <|/ a tags=string,c#,string,algorithm |>\n<| c |>\nIt doesn't work for the example\
    \ of `\"Mary had a little lamb\", 4L\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpahvt3h39.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(25): Error: expression expected, not `)`

    /tmp/tmpahvt3h39.d(25): Error: found `;` when expecting `)`

    /tmp/tmpahvt3h39.d(26): Error: found `if` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(27): Error: found `return` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(30): Error: found `in` when expecting `;`

    /tmp/tmpahvt3h39.d(38): Error: found `in` when expecting `;`

    /tmp/tmpahvt3h39.d(74): Error: found `>` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(74): Error: found `>` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(74): Error: expression expected, not `)`

    /tmp/tmpahvt3h39.d(74): Error: found `;` when expecting `)`

    /tmp/tmpahvt3h39.d(75): Error: found `if` when expecting `;` following statement

    /tmp/tmpahvt3h39.d(76): Error: found `return` when expecting `;` following statement

    /tmp/tmpah'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    Stack<string> st = new Stack<string>();\n\
    \    int i;\n    for (i = 0; i < s.length(); i++)\n    {\n        char letter\
    \ = s[i];\n        if (letter == 'a')\n        {\n            st.push(\"a\");\n\
    \        }\n        else if (letter == 'e')\n        {\n            st.push(\"\
    e\");\n        }\n        else if (letter == 'i')\n        {\n            st.push(\"\
    i\");\n        }\n        else if (letter == 'o')\n        {\n            st.push(\"\
    o\");\n        }\n        else if (letter == 'u')\n        {\n            st.push(\"\
    u\");\n        }\n        else if (letter == 'y')\n        {\n            st.push(\"\
    y\");\n        }\n        else\n        {\n            if (st.empty())\n     \
    \       {\n                return new string[0];\n            }\n            else\n\
    \            {\n                if (st.top().Count(x => x == letter) == n)\n \
    \               {\n                    st.pop();\n                    st.push(letter);\n\
    \                }\n                else\n                {\n                \
    \    return new string[0];\n                }\n            }\n        }\n    }\n\
    \    if (st.empty())\n    {\n        return new string[0];\n    }\n    else\n\
    \    {\n        return new string[st.size()];\n    }\n}\n</code>\n<|/ a tags=algorithm,c#,.net\
    \ |>\n<| c |>\nThank you for your input. However there are still some issues.\
    \ First, if n=1, then the algorithm won't return any string. Second, it doesn't\
    \ seem to take into consideration spaces. Third, it returns wrong answer for words\
    \ like \"Mary had a little lamb\".\n<|/ c |>\n<| c |>\nThanks for pointing those\
    \ out. I updated the code as per your suggestions. However, you seem to have found\
    \ a bug in the `Count` method, which still doesn't handle spaces. I'll edit my\
    \ answer so that spaces are handled properly as well.\n<|/ c |>\n<| c |>\nThank\
    \ you. I figured it out myself and edited the answer. However there should be\
    \ a bug in the Count.\n<|/ c |>\n<| a |>\nHere is the solution, using Regex to\
    \ find and count the consonants:\n<code>\nstatic Regex regex = new Regex(\"[b-df-hj-np-tv-z]\"\
    );\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7n8yi7p.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpa7n8yi7p.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpa7n8yi7p.d(24): Error: expression expected, not `)`

    /tmp/tmpa7n8yi7p.d(24): Error: found `;` when expecting `)`

    /tmp/tmpa7n8yi7p.d(25): Error: found `int` when expecting `;` following statement

    /tmp/tmpa7n8yi7p.d(82): Error: declaration expected, not `<`

    /tmp/tmpa7n8yi7p.d(85): Error: unterminated character constant

    /tmp/tmpa7n8yi7p.d(85): Error: unterminated character constant

    /tmp/tmpa7n8yi7p.d(88): Error: unterminated character constant

    /tmp/tmpa7n8yi7p.d(88): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7n8yi7p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long i;\n    long count = 0;\n\
    \    for(i = 0; i < s.length(); i++)\n    {\n        if(s.find_first_of(\"aeiou\"\
    ) == -1 && s.find_first_of(\"AEIOU\") == -1 && s.find_first_of(\"aeiouAEIOU\"\
    ) == -1)\n        {\n            count++;\n        }\n    }\n    string [] words\
    \ = new string[count];\n    for(i = 0; i < s.length(); i++)\n    {\n        if(s.find_first_of(\"\
    aeiou\") == -1 && s.find_first_of(\"AEIOU\") == -1 && s.find_first_of(\"aeiouAEIOU\"\
    ) == -1)\n        {\n            words[count] = s.substr(i);\n            count++;\n\
    \        }\n    }\n    return words;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6d_olr9.d(26): Error: no property `length` for type `string`

    /tmp/tmpp6d_olr9.d(28): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(28): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(28): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(34): Error: no property `length` for type `string`

    /tmp/tmpp6d_olr9.d(36): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(36): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(36): Error: no property `find_first_of` for type `string`

    /tmp/tmpp6d_olr9.d(38): Error: no property `substr` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6d_olr9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n\t/*\n\t\tYour code should implement\
    \ this function\n\t\tYou should use two loops: one to go over the length of the\
    \ string and \n\t\t\tanother to go over the length of the array you wish to return.\n\
    \t\tYou should use two variables to keep track of whether the current letter in\
    \ s\n\t\t\tmatches the current letter in n and how many consonants are in each\
    \ word.\n\t\tYour code should store the words in an array.\n\t\tYour code should\
    \ return the array.\n\t\tYour code should probably return an array containing\
    \ all words with exactly \n\t\t\tn consonants. For example, if the word \"Uncle\"\
    \ appears with 3 consonants, \n\t\t\tthen your function should return the array\
    \ [\"Uncle\"]. \n\t\t\t\n\t\tHint: there are several ways to go about solving\
    \ this problem. One way is to \n\t\t\twrite two loops, one to go over each letter\
    \ in s and another to go over \n\t\t\teach letter in n. Keep track of how many\
    \ consonants you have in each \n\t\t\tword. Compare each letter in s to the letter\
    \ in n and add each consonant to \n\t\t\ta word array.\n\t\t\t\n\t\t\tYou may\
    \ want to use std.algorithm.countEqual\n\t\t\tYou can use the std.algorithm.countEqual\n\
    \t\t\tfunction to help you solve the problem. The function takes in two \n\t\t\
    \tstrings and returns the number of times the characters in s1 appear in \n\t\t\
    \tthe other string. The function takes no arguments.\n\t*/\n\tstring w[]=new string[10];\n\
    \tint i=0,j=0;\n\tfor(i=0;s[i]!='\\0';i++)\n\t{\n\t\tfor(j=0;n[j]!='\\0';j++)\n\
    \t\t{\n\t\t\tif(s[i]==n[j])\n\t\t\t{\n\t\t\t\tif(countEqual(s[i+1],n[j+1])==1)\n\
    \t\t\t\t{\n\t\t\t\t\tw[i]=w[i]+s[i+1];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn w;\n}\n/*\n    Given a string s and a natural number n, you\
    \ have been tasked to implement \n        a function that returns an array of\
    \ all words from string s that contain exactly \n        n vowels, in order these\
    \ words appear in the string s.\n        If the string s is empty then the function\
    \ should return an empty array.\n    Examples:\n    >>> select_words(\"Mary had\
    \ a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had a little\
    \ lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\"\
    , 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"world\"]\n  \
    \  >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n*/\nstring[] select_words(\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqjc13nj.d(48): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] w`

    /tmp/tmpxqjc13nj.d(84): Error: basic type expected, not `unittest`

    /tmp/tmpxqjc13nj.d(84): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqjc13nj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n   //write your code here\n    HashSet<string>\
    \ set = new HashSet<string>();\n    for (int i = 0; i < s.length(); i++)\n   \
    \ {\n        if (s.Contains(i.toString()))\n            set.Add(s.Substring(i,1));\n\
    \    }\n    \n    HashSet<string> res = new HashSet<string>();\n    foreach (string\
    \ x in set)\n    {\n        if (x.Count() == n)\n        {\n            res.Add(x);\n\
    \        }\n    }\n    string[] result = new string[res.Count];\n    \n    int\
    \ i = 0;\n    foreach (string x in res)\n    {\n        result[i++] = x;\n   \
    \ }\n    \n    return result;\n}\n</code>\n<|/ a tags=algorithm,c#,string,arrays\
    \ |>\n<| a |>\nA simple linq solution:\n<code>\nvar words = \"Uncle sam\";\nvar\
    \ result = words.Split()\n    .Where(word => Regex.Matches(word, \"[^aeiou]\"\
    ).Count == n)\n    .ToArray();\n</code>\nRegex solution without linq:\n<code>\n\
    var words = \"Uncle sam\";\nvar resultArray = new string[n];\nfor (int i = 0;\
    \ i < n; i++)\n{\n    string word = null;\n    var match = Regex.Matches(words,\
    \ \"[^aeiou]\");\n    if (match.Count > 0)\n        word = match[0].Value;\n \
    \   else\n        break;\n    resultArray[i] = word;\n}\n</code>\n<|/ a tags=algorithm,c#,string,arrays\
    \ dscore=0 |>\n<| c |>\nI appreciate your effort, but a linq solution was more\
    \ important for me :)\n<|/ c |>\n<| c |>\nWell, this is not linq, but more functional\
    \ solution\n<|/ c |>\n<| c |>\nYeah. That's why I couldn't accept your answer\
    \ as correct :D I'm glad you added some more efforts to it, though!\n<|/ c |>\n\
    <| c |>\nI added Regex solution too, but it is much simpler.\n<|/ c |>\n<| c |>\n\
    Yeah, that is more simple solution, but I'm not a regex expert.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n    string[] str = \"Uncle sam\".Split();\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjwtanef.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(25): Error: expression expected, not `)`

    /tmp/tmpzjwtanef.d(25): Error: found `;` when expecting `)`

    /tmp/tmpzjwtanef.d(26): Error: found `for` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(26): Error: found `i` when expecting `.` following int

    /tmp/tmpzjwtanef.d(26): Error: found `=` when expecting identifier following `int`.

    /tmp/tmpzjwtanef.d(26): Error: found `0` when expecting `)`

    /tmp/tmpzjwtanef.d(26): Error: found `)` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(32): Error: found `>` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(32): Error: found `>` when expecting `;` following statement

    /tmp/tmpzjwtanef.d(32): Error: expression expected, not `)`

    /tmp/tmpzjwtanef.d(32): Error: found `;` when expecting `)`

    /tmp/tmpzjwtanef.d(33): Error: found `foreach` when expecting `;` following statemen'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    list<string> words = new list<string>();\n\
    \    \n    if (s == \"\")\n        return words;\n    \n    foreach(char c in\
    \ s)\n    {\n        if (std.typecons.cons(c))\n        {\n            foreach(string\
    \ s1 in select_words(s,n-1))\n            {\n                words.push_back(s1+\"\
    \ \"+c);\n            }\n        }\n    }\n    return words;\n}\n</code>\n<|/\
    \ a tags=string,c++ dscore=1 |>\n<| c |>\nThanks so much! You helped me understand\
    \ recursion a little bit better!\n<|/ c |>\n<| c |>\nHmmm I'm getting errors when\
    \ I run the code. Could you please help me figure out what I am doing wrong? I\
    \ fixed it up so now it compiles and runs, but when I put in \"Mary had a little\
    \ lamb\" and run my function I get a bunch of errors in my output window saying:\
    \ `Untitled2.exe has triggered a breakpoint. ` Could you please take a look at\
    \ my code and tell me what I am doing wrong?\n<|/ c |>\n<| c |>\nI just realized\
    \ that the problem with my code is that when I run it it doesn't print out any\
    \ words from the dictionary that are under a certain length. Could you help me\
    \ figure out why it doesn't print out words with less than 4 consonants? It just\
    \ returns an empty array...\n<|/ c |>\n<| c |>\nYour program will always return\
    \ an empty array as no word is greater than 4 letters. You might want to change\
    \ the second condition of the `if` to `n>4`.\n<|/ c |>\n<| c |>\nAh I see. Is\
    \ there a way to make it so it returns words that are less than 4 letters?\n<|/\
    \ c |>\n<| a dscore=0 |>\nThe trick is to think of your problem as working out\
    \ what all the ways there are of doing this with n consonants (ignoring the empty\
    \ string).\nTo do this, we can write a function that takes in a string s and a\
    \ number n, and returns an array<string> (not list) of all possible strings of\
    \ length n+1 containing the same letters as s (i.e. not including the empty string).\
    \ The function should return an empty array if the string s is empty or if the\
    \ string s has less than n consonants.\n<code>\nstring[] select_words(string s,\
    \ long n) {\n    if (s.empty())\n        return {};\n    if (n <= 0)\n       \
    \ return {};\n    if (std.typecons.cons(s[0]))\n        return {s};\n    auto\
    \ words = select_words(s, n - 1);\n    auto words_2 = words.front();\n    for\
    \ (auto &word : words) {\n        \nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2k9z0s2.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpg2k9z0s2.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpg2k9z0s2.d(24): Error: expression expected, not `)`

    /tmp/tmpg2k9z0s2.d(24): Error: found `;` when expecting `)`

    /tmp/tmpg2k9z0s2.d(26): Error: found `if` when expecting `;` following statement

    /tmp/tmpg2k9z0s2.d(27): Error: found `return` when expecting `;` following statement

    /tmp/tmpg2k9z0s2.d(29): Error: found `in` when expecting `;`

    /tmp/tmpg2k9z0s2.d(33): Error: found `in` when expecting `;`

    /tmp/tmpg2k9z0s2.d(41): Error: declaration expected, not `<`

    /tmp/tmpg2k9z0s2.d(47): Error: unterminated character constant

    /tmp/tmpg2k9z0s2.d(50): Error: unterminated character constant

    /tmp/tmpg2k9z0s2.d(50): Error: unterminated character constant

    /tmp/tmpg2k9z0s2.d(65): Error: declaration expected, not `if`

    /tmp/tmpg2k9z0s2.d(67): Error: declaration expected, not `if`

    /tmp/tmpg2k9z0s2.d(71): Error: declaration expected, not `for`

    /tmp/tmpg2k9z0s2.d('
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] words = new string[10000];\n\
    \    int i = 0;\n    for (auto word : s.split(' '))\n    {\n        if (word.length()\
    \ <= n)\n        {\n            words[i] = word;\n            i++;\n        }\n\
    \    }\n    return words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is an\
    \ O(n^2) solution\n<|/ c |>\n<| c |>\nThis is not O(n^2) since `words.length()`\
    \ is constant at run-time and `i` keeps increasing.\n<|/ c |>\n<| c |>\nyes, you\
    \ are right, I fixed this issue\n<|/ c |>\n<| c |>\nThank you all for your help,\
    \ I'll try this solution!\n<|/ c |>\n<| c |>\nI believe it's O(n*m), where m is\
    \ the number of letters in the input string. m is O(n) since it's just iterating\
    \ over s once, and n is O(m) since it's iterating over s once for each possible\
    \ letter in the input string.\n<|/ c |>\n<| a |>\nThis is an O(n*m) solution:\n\
    <code>\n#include <string>\n#include <vector>\n#include <cctype>\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvybwqp9e.d(26): Error: no identifier for declarator `word`

    /tmp/tmpvybwqp9e.d(26): Error: expression expected, not `:`

    /tmp/tmpvybwqp9e.d(26): Error: found `s` when expecting `;` following `for` condition

    /tmp/tmpvybwqp9e.d(36): Error: declaration expected, not `<`

    /tmp/tmpvybwqp9e.d(48): Error: unterminated character constant

    /tmp/tmpvybwqp9e.d(51): Error: unterminated character constant

    /tmp/tmpvybwqp9e.d(51): Error: unterminated character constant

    /tmp/tmpvybwqp9e.d(51): Error: unterminated character constant

    /tmp/tmpvybwqp9e.d(63): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(64): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(65): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(66): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(67): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(68): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(69): Error: declaration expected, not `assert`

    /tmp/tmpvybwqp9e.d(70): Error: unrec'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    list<string> result;\n    \n\
    \    if (s.empty())\n    {\n        result = new list<string>();\n    }\n    else\n\
    \    {\n        result = s.split(\" \");\n    }\n    \n    unordered_map<string,\
    \ int> count_map;\n    \n    for (auto i : result)\n    {\n        int count =\
    \ 0;\n        \n        for (auto j : i)\n        {\n            auto it = count_map.find(j);\n\
    \            \n            if (it != count_map.end())\n            {\n       \
    \         count += it->second;\n            }\n            else\n            {\n\
    \                count_map[j] = 1;\n            }\n        }\n        \n     \
    \   if (count >= n)\n        {\n            result.push_back(i);\n        }\n\
    \    }\n    \n    return result.to_array();\n}\n</code>\n<|/ a tags=c++ |>\n<|\
    \ a dscore=0 |>\nThe correct algorithm would involve two arrays, one containing\
    \ all the possible consonants, one containing all the words that can be made by\
    \ appending one of these consonants.\nYou will need a method to check if a given\
    \ string can be made from these two arrays (\"A\" is in the array \"vowels\" but\
    \ not in the array \"consonants\" because \"A\" is not a vowel, and \"B\" is not\
    \ a consonant).  \nThen you can make a list of words that can be made from these\
    \ two arrays, and then test each of these words for your requirements.\n<|/ a\
    \ tags=c++ |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\nusing namespace\
    \ std;\n#include <string.h>\n#include <algorithm>\n#include <set>\n#include <cmath>\n\
    #include <cstdlib>\n#include <stdio.h>\n#include <stdlib.h>\nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4tu3ay4o.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp4tu3ay4o.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmp4tu3ay4o.d(28): Error: expression expected, not `)`

    /tmp/tmp4tu3ay4o.d(28): Error: found `;` when expecting `)`

    /tmp/tmp4tu3ay4o.d(29): Error: found `}` when expecting `;` following statement

    /tmp/tmp4tu3ay4o.d(30): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp4tu3ay4o.d(35): Error: found `>` when expecting `.` following int

    /tmp/tmp4tu3ay4o.d(37): Error: no identifier for declarator `i`

    /tmp/tmp4tu3ay4o.d(37): Error: expression expected, not `:`

    /tmp/tmp4tu3ay4o.d(37): Error: found `result` when expecting `;` following `for`
    condition

    /tmp/tmp4tu3ay4o.d(41): Error: no identifier for declarator `j`

    /tmp/tmp4tu3ay4o.d(41): Error: expression expected, not `:`

    /tmp/tmp4tu3ay4o.d(41): Error: found `i` when expecting `;` following `for` condition

    /tmp/tmp4tu3ay4o.d(47): Error: use `.` for member lookup, no'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string [] w = new string[s.length()];\n\
    \    for(int i = 0; i < s.length(); i++) \n    {\n        for(int j = 1; j <=\
    \ n; j++) \n        {\n            if(s.charAt(i) == s[j]) \n            {\n \
    \               w[i] = w[i] + s.charAt(i);\n                break;\n         \
    \   }\n        }\n    }\n    return w;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you, I understand the logic behind the code but I am having trouble implementing\
    \ it into my code.  I am not sure how to implement the function `select_words()`\
    \ in my `select_word()`\n<|/ c |>\n<| c |>\n: See [my edit](http://stackoverflow.com/revisions/29073752/3).\
    \ The `select_words()` function is called from `select_word()` and is implemented\
    \ in the function body. Since `select_word()` returns a `string[]` you can assign\
    \ the result to a `string[]` variable.\n<|/ c |>\n<| c |>\nThank you for your\
    \ help.  When I try compiling I get this error `error CS1520: Method must have\
    \ a return type`.  How would I go about fixing this?\n<|/ c |>\n<| c |>\n: I've\
    \ added a sample implementation (it uses .NET languages since that's what I know).\
    \ Not sure why your compiler is complaining about the return type though. Are\
    \ you using `csc.exe` or some other compiler? Are you sure you're using the C#\
    \ compiler? Maybe try to add the `string[]` type to the method declaration.\n\
    <|/ c |>\n<| c |>\nThank you for helping me with this problem but my function\
    \ now isn't returning an array.  It is just returning `void`.  My function looks\
    \ like this: `static string [] select_words(string s, long n)\n        {\n   \
    \         string [] w = new string[s.length()];\n            for (int i = 0; i\
    \ < s.length(); i++)\n            {\n                for (int j = 1; j <= n; j++)\n\
    \                {\n                    if (s.charAt(i) == s[j])\n           \
    \         {\n                        w[i] = w[i] + s.charAt(i);\n            \
    \            break;\n                    }\n                }\n            }\n\
    \            return w;\n        }`\n<|/ c |>\n<| a tags=function,arrays,java,methods\
    \ dscore=0 |>\nIt would be better to use a regular expression to get the matching\
    \ words. \nFor example:\n<code>\npublic static void main(String[] args) {\n  \
    \  String s = \"Mary had a little lamb\";\n    long n = 3;\n    String[] words\
    \ = selectWords(s, n);\nunittest\n{\n    alias candidate = select_words;\n\n \
    \   assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyysvk8cx.d(38): Error: declaration expected, not `<`

    /tmp/tmpyysvk8cx.d(50): Error: unterminated character constant

    /tmp/tmpyysvk8cx.d(50): Error: unterminated character constant

    /tmp/tmpyysvk8cx.d(50): Error: unterminated character constant

    /tmp/tmpyysvk8cx.d(53): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyysvk8cx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List <string> res =new ArrayList\
    \ <string>();\n    string [] arr=s.split(\" \");\n    for (String word : arr)\
    \ {\n        if (word.length()==n)\n            res.add(word);\n    }\n    return\
    \ (res.toArray());\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere's a more compact\
    \ and robust version:\n<code>\nstring words;\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjfa42_jd.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpjfa42_jd.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpjfa42_jd.d(24): Error: expression expected, not `)`

    /tmp/tmpjfa42_jd.d(24): Error: found `;` when expecting `)`

    /tmp/tmpjfa42_jd.d(25): Error: found `string` when expecting `;` following statement

    /tmp/tmpjfa42_jd.d(25): Error: found `arr` when expecting `;` following statement

    /tmp/tmpjfa42_jd.d(25): Error: found `=` instead of statement

    /tmp/tmpjfa42_jd.d(26): Error: found `word` when expecting `;` following statement

    /tmp/tmpjfa42_jd.d(26): Error: expression expected, not `:`

    /tmp/tmpjfa42_jd.d(26): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmpjfa42_jd.d(32): Error: declaration expected, not `<`

    /tmp/tmpjfa42_jd.d(35): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfa42_jd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    std.string w = \"hello world\
    \ this is a function\";\n    std.string[] arr = std.array[].of();\n    \n    if(s.length()\
    \ == 0)\n    {\n        return std.array[].of();\n    }\n    \n    int n = n.toInt();\n\
    \    \n    for(int i = 0; i < w.length(); i++)\n    {\n        if((s[i]) == n.toInt())\n\
    \        {\n            arr.add(w.substring (i, w.length()));\n        }\n   \
    \ }\n    \n    return arr;\n}\n</code>\n<|/ a dscore=0 tags=dart,flutter |>\n\
    <| c |>\nHello, thank you for answering my question, unfortunately I couldn't\
    \ get it to work. I'm not really sure I understand how to use the for loop and\
    \ I couldn't find any information on how to convert a String to int, although\
    \ I know how to convert it to double. Could you show me an example code of how\
    \ to use it?\n<|/ c |>\n<| c |>\nHello, I've added a more advanced code that I\
    \ wrote in my post. Hope it helps.\n<|/ c |>\n<| a tags=dart,flutter |>\nHere\
    \ is a more advanced version. I'm using a StreamBuilder instead of a for loop.\n\
    <code>\nimport 'package:flutter/material.dart';\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgito7d9.d(44): Error: declaration expected, not `<`

    /tmp/tmpzgito7d9.d(47): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(47): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(47): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(50): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(53): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(55): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(55): Error: unterminated character constant

    /tmp/tmpzgito7d9.d(60): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(61): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(62): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(63): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(64): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(65): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(66): Error: declaration expected, not `assert`

    /tmp/tmpzgito7d9.d(67): Error: unrecognized declaration

    Fail'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var list = new List<string>();\n\
    \    \n    if (s == null)\n        return list;\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbegz5myf.d(24): Error: semicolon expected, not `>`

    /tmp/tmpbegz5myf.d(24): Error: found `>` instead of statement

    /tmp/tmpbegz5myf.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbegz5myf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string t = s;\n    bool ok =\
    \ true;\n    while(ok) {\n        ok = false;\n        string a = t;\n       \
    \ int i = 0;\n        int j = 0;\n        while(i < a.length && j < n) {\n   \
    \         string b = a.substring (j,j+1);\n            if(!std.typecons.contains(b))\
    \ {\n                a = a.substr(0,i)+a.substr(j+1);\n                ok = true;\n\
    \            }\n            else\n                i++;\n            j++;\n   \
    \     }\n        if(j == n) {\n            if(!a.empty()) {\n                t.append(a);\n\
    \                t.append(\", \");\n                ok = true;\n            }\n\
    \        }\n    }\n    if(s.length() != 0) {\n        t.append(\", \");\n    }\n\
    \    return t.substring(0,t.length()-2);\n}\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7po52_nf.d(32): Error: no property `substring` for type `string`

    /tmp/tmp7po52_nf.d(33): Error: undefined identifier `contains` in module `std.typecons`

    /tmp/tmp7po52_nf.d(34): Error: no property `substr` for type `string`

    /tmp/tmp7po52_nf.d(34): Error: no property `substr` for type `string`

    /tmp/tmp7po52_nf.d(42): Error: no property `empty` for type `string`

    /tmp/tmp7po52_nf.d(43): Error: no property `append` for type `string`

    /tmp/tmp7po52_nf.d(44): Error: no property `append` for type `string`

    /tmp/tmp7po52_nf.d(49): Error: no property `length` for type `string`

    /tmp/tmp7po52_nf.d(50): Error: no property `append` for type `string`

    /tmp/tmp7po52_nf.d(52): Error: no property `substring` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7po52_nf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code goes here\n    string\
    \ ret[1000];\n    for(int i=0;i<s.length;i++)\n    {\n        int j=0;\n     \
    \   for(int k=0;k<s[i];k++)\n        {\n            if(s[k]=='c')\n          \
    \  {\n                j++;\n            }\n            if(j>=n)\n            {\n\
    \                break;\n            }\n        }\n        ret[i]=s.substr(0,j+1);\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you!! but\
    \ i need to implement it in C++\n<|/ c |>\n<| c |>\nThen you just have to replace\
    \ everything that is Java code with C++ code\n<|/ c |>\n<| c |>\n`std::vector<std::unique_ptr<std::string>>\
    \ select_words(const std::string &s, int n) {\n  std::vector<std::unique_ptr<std::string>>\
    \ ret;\n  for (int i = 0; i < s.length(); i++) {\n    int j = 0;\n    for (int\
    \ k = 0; k < s[i]; k++) {\n      if (s[k] == 'c') {\n        j++;\n      }\n \
    \     if (j >= n) {\n        break;\n      }\n    }\n    ret.push_back(std::make_unique<std::string>(s.substr(0,\
    \ j + 1)));\n  }\n  return ret;\n}`\n<|/ c |>\n<| c |>\nThank you. Since this\
    \ is a homework problem, I decided to keep it simpler. I would have used vectors\
    \ just as I did before, but they were not allowed for this problem.\n<|/ c |>\n\
    <| a tags=c++ |>\nThis is my solution:\n<code>\n// I wrote this algorithm with\
    \ a lambda function which could be translated into many other languages\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxfhvrt0.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `string[1000] ret`

    /tmp/tmpaxfhvrt0.d(44): Error: declaration expected, not `<`

    /tmp/tmpaxfhvrt0.d(81): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(82): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(83): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(84): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(85): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(86): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(87): Error: declaration expected, not `assert`

    /tmp/tmpaxfhvrt0.d(88): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxfhvrt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164730
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.isEmpty())\n    {\n   \
    \     return std.array<string>();\n    }\n    \n    std.vector<string> words;\n\
    \    string word = \"\";\n    for (long i = 0; i < s.length(); i++)\n    {\n \
    \       char c = s[i];\n        if (c == 'a')\n        {\n            word = word\
    \ + \" \" + \"a\";\n            continue;\n        }\n        if (c == 'e')\n\
    \        {\n            word = word + \" \" + \"e\";\n            continue;\n\
    \        }\n        if (c == 'i')\n        {\n            word = word + \" \"\
    \ + \"i\";\n            continue;\n        }\n        if (c == 'o')\n        {\n\
    \            word = word + \" \" + \"o\";\n            continue;\n        }\n\
    \        if (c == 'u')\n        {\n            word = word + \" \" + \"u\";\n\
    \            continue;\n        }\n        if (c == 'y')\n        {\n        \
    \    word = word + \" \" + \"y\";\n            continue;\n        }\n        if\
    \ (c == 'A')\n        {\n            word = word + \" \" + \"A\";\n          \
    \  continue;\n        }\n        if (c == 'E')\n        {\n            word =\
    \ word + \" \" + \"E\";\n            continue;\n        }\n        if (c == 'I')\n\
    \        {\n            word = word + \" \" + \"I\";\n            continue;\n\
    \        }\n        if (c == 'O')\n        {\n            word = word + \" \"\
    \ + \"O\";\n            continue;\n        }\n        if (c == 'U')\n        {\n\
    \            word = word + \" \" + \"U\";\n            continue;\n        }\n\
    \        if (c == 'Y')\n        {\n            word = word + \" \" + \"Y\";\n\
    \            continue;\n        }\n        if (c == 'S')\n        {\n        \
    \    word = word + \" \" + \"S\";\n            continue;\n        }\n        if\
    \ (c == 'Z')\n        {\n            word = word + \" \" + \"Z\";\n          \
    \  continue;\n        }\n        if (c == 'a')\n        {\n            word =\
    \ word + \" \" + \"a\";\n            continue;\n        }\n        if (c == 'e')\n\
    \        {\n            word = word + \" \" + \"e\";\n            continue;\n\
    \        }\n        if (c == 'i')\n        {\n            word = word + \" \"\
    \ + \"i\";\n            continue;\n        }\n        if (c == 'o')\n        {\n\
    \            word = word + \" \" + \"o\";\n            continue;\n        }\n\
    \        if (c == 'u')\n        {\n            word = word + \" \" + \"u\";\n\
    \            continue;\n        }\n        if (c == 'y')\n        {\n        \
    \    word = word + \" \" + \"y\";\n            continue;\n        }\n        if\
    \ (c == 'A')\n        {\n            word = word + \" \" + \"A\";\n          \
    \  continue;\n        }\n        if (c == 'E')\n        {\n            word =\
    \ word + \" \" + \"E\";\n            continue;\n        }\n        if (c == 'I')\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8o8dzha.d(26): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmpw8o8dzha.d(26): Error: expression expected, not `)`

    /tmp/tmpw8o8dzha.d(26): Error: found `;` when expecting `)`

    /tmp/tmpw8o8dzha.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmpw8o8dzha.d(29): Error: found `>` when expecting `;` following statement

    /tmp/tmpw8o8dzha.d(145): Error: found `unittest` instead of statement

    /tmp/tmpw8o8dzha.d(157): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpw8o8dzha.d(157): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8o8dzha.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] consonants = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255};\n\
    \    int[] vowels = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n    \n    string\
    \ str = \"\";\n    if (s.Length > 0)\n        str = s;\n    else\n        return\
    \ null;\n\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxx9dtvhd.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxx9dtvhd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] chars = toCharArray(s);\n\
    \    long count = chars.reduce(0,(a,b)->{\n        if(isConsonant(b)) \n     \
    \       a++;\n        return a;\n    });\n    \n    if(n>count) \n        return\
    \ [];\n    \n    long limit = count-n;\n    int[] newChars = chars.filter((a,b)->{\n\
    \        if(isConsonant(b)) \n            return false;\n        else \n     \
    \       return true;\n    });\n    \n    int[] result = toCharArray(s).filter((a,b)->{\n\
    \        if(a==b) \n            return false;\n        if(isConsonant(a)) \n \
    \           return false;\n        else\n            return true;\n    });\n \
    \   \n    int n = newChars.length; //number of consonants in n\n    \n    //loop\
    \ through words in result\n    for(int[] result : result) {\n        int[] newWord\
    \ = toCharArray(result);\n        \n        //loop through characters in result\n\
    \        for(int i = 1; i<newWord.length; i++) {\n            int k = newWord[i];\
    \ //character at i\n            \n            //check if k at i matches any of\
    \ n's consonants\n            for(int j = 0; j < n; j++) \n                if(k\
    \ == consonants[j]) \n                    break;\n            if(j == n) \n  \
    \              //if it does, add it to result\n                result.add(k);\n\
    \        }\n    }\n    \n    //if there are less than n consonants in the result\n\
    \    if(result.length<n) \n        return result;\n    else \n        return result.filter((a,b)->{\n\
    \            if(isConsonant(b)) \n                return false;\n            else\n\
    \                return true;\n        });\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThe question isn't about homework, though.\n<|/ c |>\n<| c |>\nOh, I didn't\
    \ notice that. Sorry! I'll remove the flag then.\n<|/ c |>\n<| c |>\nThanks a\
    \ lot for your response. This is an interesting approach and I will try to adapt\
    \ it to my problem. Also thank you for your time on the answer. Best wishes.\n\
    <|/ c |>\n<| a tags=arrays,java |>\nIn your program, you don't seem to have used\
    \ a loop at all. Instead of using if statements directly, you can use the for\
    \ loop where you use an int to loop through each character of the string.\nYou\
    \ can use the charAt method to get the character at the specified index and then\
    \ test it with the isConsonant method to see if the current character is a consonant.\
    \ Finally, use the append method to add the character to a string. \n<code>\n\
    import java.util.Array\nunittest\n{\n    alias candidate = select_words;\n\n \
    \   assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ppq3oai.d(25): Error: expression expected, not `>`

    /tmp/tmp2ppq3oai.d(25): Error: found `{` when expecting `,`

    /tmp/tmp2ppq3oai.d(26): Error: expression expected, not `if`

    /tmp/tmp2ppq3oai.d(27): Error: found `a` when expecting `,`

    /tmp/tmp2ppq3oai.d(27): Error: expression expected, not `;`

    /tmp/tmp2ppq3oai.d(28): Error: found `return` when expecting `,`

    /tmp/tmp2ppq3oai.d(28): Error: found `;` when expecting `,`

    /tmp/tmp2ppq3oai.d(29): Error: expression expected, not `}`

    /tmp/tmp2ppq3oai.d(35): Error: expression expected, not `>`

    /tmp/tmp2ppq3oai.d(35): Error: found `{` when expecting `,`

    /tmp/tmp2ppq3oai.d(36): Error: expression expected, not `if`

    /tmp/tmp2ppq3oai.d(37): Error: found `return` when expecting `,`

    /tmp/tmp2ppq3oai.d(37): Error: found `;` when expecting `,`

    /tmp/tmp2ppq3oai.d(38): Error: expression expected, not `else`

    /tmp/tmp2ppq3oai.d(39): Error: found `return` when expecting `,`

    /tmp/tmp2ppq3oai.d(39): Error: found `;` when expecting `,`

    /tmp/tmp2ppq3oai.d(40): Error: expression ex'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code here\n    return\
    \ null;\n}\n</cell>\n<text>\nQuestion: Implement the select_words() function\n\
    HINT: Your code can use the std.string and std.long libraries, specifically the\
    \ std:string.length() and std:string.slice() functions.\nThe code will also work\
    \ with strings containing symbols other than letters and spaces.\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwwcsfm4d.d(27): Error: declaration expected, not `<`

    /tmp/tmpwwcsfm4d.d(36): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(37): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(38): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(39): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(40): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(41): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(42): Error: declaration expected, not `assert`

    /tmp/tmpwwcsfm4d.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwwcsfm4d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    map<int, string> map = new map<int,\
    \ string>();\n    map[0]=s;\n    int i = 0;\n    while (map[i].length()!=n)\n\
    \    {\n        if (map[i].length()>n) map[i] += s.substr(0,n-1);\n        else\
    \ map[i] += s.substr(0,map[i].length());\n        i++;\n    }\n    map[i] = map[i].substr(0,n);\n\
    \    \n    map[0] = map[0].substr(0,n);\n    int j = 0;\n    map[i]=map[i].substr(n-1);\n\
    \    for (int j=0; j<map[j].length()-1; j++)\n    {\n        if (map[j+1] == map[j].substr(j+1,1))\n\
    \        {\n            map[i] = map[i] + map[j+1];\n            map[i] = map[i]\
    \ + map[j+1];\n            i++;\n            \n        }\n    }\n    return map.values();\n\
    }\n</code>\nThe code will work for small values of n, say between 2 and 30. For\
    \ the above examples, you will be given the following results for the above cases:\n\
    <code>\nselect_words(\"Mary had a little lamb\", 4L)\n[\"little\"]\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4fe3jkyh.d(24): Error: found `,` when expecting `.` following int

    /tmp/tmp4fe3jkyh.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp4fe3jkyh.d(24): Error: found `,` when expecting `.` following int

    /tmp/tmp4fe3jkyh.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp4fe3jkyh.d(24): Error: expression expected, not `)`

    /tmp/tmp4fe3jkyh.d(24): Error: found `;` when expecting `)`

    /tmp/tmp4fe3jkyh.d(25): Error: found `map` when expecting `;` following statement

    /tmp/tmp4fe3jkyh.d(50): Error: declaration expected, not `<`

    /tmp/tmp4fe3jkyh.d(59): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(60): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(61): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(62): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(63): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(64): Error: declaration expected, not `assert`

    /tmp/tmp4fe3jkyh.d(65): Error: declaration expected, not '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n     // Your code goes here\n   \
    \  string[] arr = new string[length(s)];\n     int count = 0;\n     int index\
    \ = 0;\n     for(char c : s){\n         if ( c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' ){\n             arr[count] = s.substring(index,index);\n\
    \             index = index;\n             count++;\n         }\n         else\
    \ {\n             index = index+1;\n         }\n         if(count > n) break;\n\
    \     }\n     return arr;\n}\n</code>\n<|/ a tags=java,string,arrays |>\n<| c\
    \ |>\nThank you, your code looks great, but when I input \"Hello world\" and n\
    \ = 4 for some reason it does not return [\"world\"] and instead returns [\"world\"\
    , \"world\", \"world\"]. Why is this?\n<|/ c |>\n<| c |>\nYour code works now\
    \ after I changed it to this: \nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpow0d9ku1.d(28): Error: semicolon expected, not `:`

    /tmp/tmpow0d9ku1.d(28): Error: expression expected, not `:`

    /tmp/tmpow0d9ku1.d(28): Error: found `s` when expecting `;` following `for` condition

    /tmp/tmpow0d9ku1.d(41): Error: declaration expected, not `<`

    /tmp/tmpow0d9ku1.d(52): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(53): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(54): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(55): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(56): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(57): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(58): Error: declaration expected, not `assert`

    /tmp/tmpow0d9ku1.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpow0d9ku1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result;\n    \n    if\
    \ (s.isEmpty())\n        return result;\n    \n    long count = 0;\n    \n   \
    \ foreach(char c in s)\n    {\n        if (c == ' ') \n        {\n           \
    \ if (count > n)\n            {\n                break;\n            }\n     \
    \       count++;\n        }\n        else if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n        {\n            count++;\n        }\n    }\n\
    \    \n    if (count == n)\n    {\n        result = new string[1];\n        result[0]\
    \ = s;\n    }\n    else\n    {\n        string[] arr = new string[count];\n  \
    \      count = 0;\n        \n        foreach(char c in s)\n        {\n       \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    {\n                arr[count] = s;\n                count++;\n          \
    \  }\n            else\n            {\n                if (count < n)\n      \
    \          {\n                    arr[count] = s;\n                    count++;\n\
    \                }\n            }\n        }\n        \n        result = arr;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5u8sd9jj.d(31): Error: found `in` when expecting `;`

    /tmp/tmp5u8sd9jj.d(57): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5u8sd9jj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(s.isEmpty()) return new string[];\n\
    \    long n2 = n*n;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n  \
    \      long count = 0;\n        for(int j = 0; j < s.length(); j++)\n        {\n\
    \            if(s[i] == s[j]) count++;\n        }\n        if(count >= n2)\n \
    \       {\n            string[] s2 = new string[n+1];\n            for(int j =\
    \ 0; j < s2.length; j++)\n            {\n                s2[j] = (string) s.charAt(j);\n\
    \            }\n            s2[n] = \"\";\n            return s2;\n        }\n\
    \    }\n    \n    return new string[0];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=performance,java,string\
    \ |>\n<code>\n// A utility method to print an array of string.\nstatic void printStringArray(\
    \ String[] arr ) {\n    for ( String s : arr ) {\n        System.out.print( s\
    \ + \" \" );\n    }\n}\nunittest\n{\n    alias candidate = select_words;\n\n \
    \   assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt80d3_vm.d(39): Error: C style cast illegal, use `cast(string)s.charAt(j)`

    /tmp/tmpt80d3_vm.d(48): Error: declaration expected, not `<`

    /tmp/tmpt80d3_vm.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt80d3_vm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string result = \"\";\n    string\
    \ word = \"\";\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    int c\
    \ = 0;\n    while (i<s.length()) \n    {\n        word = \"\";\n        j = i;\n\
    \        while(j<s.length() && s[j] != ' ') \n        {\n            if (s[j]\
    \ == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u' || s[j] ==\
    \ 'y' || s[j] == 'h' || s[j] == 'r')\n            {\n                word += s[j];\n\
    \                j++;\n            }\n            else\n            {\n      \
    \          if (word.equals(\"\")) \n                {\n                    count++;\n\
    \                    if (count == n)\n                    {\n                \
    \        result += word;\n                        count = 1;\n               \
    \     }\n                }\n                else\n                {\n        \
    \            count = 1;\n                }\n            }\n        }\n       \
    \ i++;\n    }\n    if (count != n) \n    {\n        return result;\n    }\n  \
    \  else\n    {\n        return string[]();\n    }\n}\n</code>\n<|/ a tags=arrays,c,string\
    \ dscore=0 |>\n<| c |>\nThanks for helping me out! But this is my task from my\
    \ assignment:\n\"Write a function that takes a string and an integer, n, and returns\
    \ the strings in the array that contain exactly n consonants.\"\n<|/ c |>\n<|\
    \ c |>\nI edited the question. Hopefully it helps. I still have a few questions\
    \ to answer but I think I got the answer.\n<|/ c |>\n<| a |>\nOk after a lot of\
    \ thinking and googling I've come to the solution to my own problem. I'm sharing\
    \ my solution here because I saw this question on the internet and wanted to share\
    \ my solution to it.\n<code>\n#include <stdio.h>\n#include <string.h>\n#include\
    \ <stdlib.h>\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_lehtcf.d(69): Error: declaration expected, not `<`

    /tmp/tmp7_lehtcf.d(79): Error: unterminated character constant

    /tmp/tmp7_lehtcf.d(79): Error: unterminated character constant

    /tmp/tmp7_lehtcf.d(88): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(89): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(90): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(91): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(92): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(93): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(94): Error: declaration expected, not `assert`

    /tmp/tmp7_lehtcf.d(95): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_lehtcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result;\n    char[]\
    \ chars = s.toCharArray();\n    \n    int n = n % 26 + 1;\n    if(s == \"\" ||\
    \ n < 0)\n    {\n        result=new string[0];\n    }\n    else\n    {\n     \
    \   char[] consonants = {'a','e','i','o','u'};\n        \n        for(int i =\
    \ 0; i < chars.length; ++i)\n        {\n            int pos = chars[i]-'a';\n\
    \            bool contain = false;\n            for(int j = 0; j < consonants.length;\
    \ ++j)\n            {\n                if(pos == consonants[j])\n            \
    \    {\n                    contain = true;\n                    break;\n    \
    \            }\n            }\n            if(!contain)\n            {\n     \
    \           result.push(s);\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=algorithm,arrays,java dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I'll try to read it carefully and understand\
    \ it.\n<|/ c |>\n<| c |>\nThank you very much! I understand the solution and it's\
    \ working perfectly :)\n<|/ c |>\n<| a |>\nHere's a solution using Java 8 streams\
    \ to find the first character that appears n-1 times before being followed by\
    \ the remaining characters. If none exist, we return an empty array. Otherwise,\
    \ we return the array that contains those characters. \n<code>\npublic static\
    \ String[] selectWords(String s, long n) {\n    return s.chars()\n           \
    \ .filter(c -> Character.isLetter(c) && c - 'a' <= n)\n            .mapToObj(c\
    \ -> s.substring(s.indexOf(c) + 1, s.length()))\n            .collect(Collectors.toList())\n\
    \            .stream()\n            .filter(s -> s.matches(\".*[\" + Character.toChars(0x1f1e6)\
    \ + \"].*\"))\n            .findFirst()\n            .map(s -> s.substring(s.indexOf(\"\
    [\") + 1, s.indexOf(\"]\")))\n            .orElse(Collections.emptyList());\n\
    }\n</code>\n<|/ a dscore=1 tags=algorithm,arrays,java |>\n<| c |>\nThank you for\
    \ your answer. I try to run your solution on my machine and it works. But when\
    \ I tried to run my previous solution, it gave me a StackOverflowError. Do you\
    \ know why that happened?\n<|/ c |>\n<| c |>\n.Jenkins The issue with your solution\
    \ is that the regex is consuming characters from `s`. Hence the call to `indexOf`\
    \ to find out where it ends. You should use [the method I suggested](http://stackoverflow.com/a/43069443/1790644)\
    \ instead.\n<|/\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpudyovuf0.d(57): Error: declaration expected, not `<`

    /tmp/tmpudyovuf0.d(60): Error: unterminated character constant

    /tmp/tmpudyovuf0.d(63): Error: unterminated character constant

    /tmp/tmpudyovuf0.d(66): Error: unterminated character constant

    /tmp/tmpudyovuf0.d(78): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpudyovuf0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long counter = 0;\n    string[]\
    \ strs = new string[s.length()];\n    foreach (char ch in s)\n    {\n        if\
    \ ((int)ch == (int)'a')\n            counter += (int)'w'-(int)'a';\n        else\
    \ if ((int)ch == (int)'e')\n            counter += (int)'w'-(int)'e';\n      \
    \  else if ((int)ch == (int)'i')\n            counter += (int)'w'-(int)'i';\n\
    \        else if ((int)ch == (int)'o')\n            counter += (int)'w'-(int)'o';\n\
    \        else if ((int)ch == (int)'u')\n            counter += (int)'w'-(int)'u';\n\
    \        else if ((int)ch == (int)'y')\n            counter += (int)'w'-(int)'y';\n\
    \        else if ((int)ch == (int)'s')\n            counter += (int)'w'-(int)'s';\n\
    \        else if ((int)ch == (int)'e')\n            counter += (int)'w'-(int)'e';\n\
    \        else if ((int)ch == (int)'h')\n            counter += (int)'w'-(int)'h';\n\
    \        else if ((int)ch == (int)'l')\n            counter += (int)'w'-(int)'l';\n\
    \        else if ((int)ch == (int)'L')\n            counter += (int)'w'-(int)'L';\n\
    \        else if ((int)ch == (int)'\\'')\n            counter += (int)'w'-(int)'\\\
    '';\n        else if ((int)ch == (int)'r')\n            counter += (int)'w'-(int)'r';\n\
    \        else if ((int)ch == (int)'v')\n            counter += (int)'w'-(int)'v';\n\
    \        else if ((int)ch == (int)'a')\n            counter += (int)'w'-(int)'a';\n\
    \        else if ((int)ch == (int)'b')\n            counter += (int)'w'-(int)'b';\n\
    \        else if ((int)ch == (int)'c')\n            counter += (int)'w'-(int)'c';\n\
    \        else if ((int)ch == (int)'d')\n            counter += (int)'w'-(int)'d';\n\
    \        else if ((int)ch == (int)'E')\n            counter += (int)'w'-(int)'E';\n\
    \        else if ((int)ch == (int)'g')\n            counter += (int)'w'-(int)'g';\n\
    \        else if ((int)ch == (int)'i')\n            counter += (int)'w'-(int)'i';\n\
    \        else if ((int)ch == (int)'k')\n            counter \nunittest\n{\n  \
    \  alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9nnzrukz.d(26): Error: found `in` when expecting `;`

    /tmp/tmp9nnzrukz.d(28): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmp9nnzrukz.d(28): Error: C style cast illegal, use `cast(int)''a''`

    /tmp/tmp9nnzrukz.d(29): Error: C style cast illegal, use `cast(int)''w''`

    /tmp/tmp9nnzrukz.d(29): Error: C style cast illegal, use `cast(int)''a''`

    /tmp/tmp9nnzrukz.d(30): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmp9nnzrukz.d(30): Error: C style cast illegal, use `cast(int)''e''`

    /tmp/tmp9nnzrukz.d(31): Error: C style cast illegal, use `cast(int)''w''`

    /tmp/tmp9nnzrukz.d(31): Error: C style cast illegal, use `cast(int)''e''`

    /tmp/tmp9nnzrukz.d(32): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmp9nnzrukz.d(32): Error: C style cast illegal, use `cast(int)''i''`

    /tmp/tmp9nnzrukz.d(33): Error: C style cast illegal, use `cast(int)''w''`

    /tmp/tmp9nnzrukz.d(33): Error: C style cast illegal, use `cast(int)''i''`

    /tmp/tmp9nnzrukz.d(34): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmp9nnzrukz.d(34): Error: '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return std.array;\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8t9mzhq.d(24): Error: undefined identifier `array` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8t9mzhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\n</code>\n<|/\
    \ q |>\n<| a |>\nHere's a way that works for arbitrary strings:\n<code>\nimport\
    \ std.array;\nimport std.conv;\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexddv04f.d(26): Error: declaration expected, not `<`

    /tmp/tmpexddv04f.d(29): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexddv04f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    long count = 0;\n    \n\
    \    // Write your code here\n    \n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo2i83at8.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e15]

    ??:? void tmpo2i83at8.__unittest_L31_C1() [0x427c0a]

    ??:? void tmpo2i83at8.__modtest() [0x42807c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428b6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a59d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a62c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b45]

    ??:? runModuleUnitTests [0x42d4c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result;\n    string[]\
    \ tmp = new string[5];\n    for(int i = 0; i < tmp.length; i++)\n    {\n     \
    \   tmp[i] = \"\";\n    }\n    string word = \"\";\n    for(int i = 0; i < s.length();\
    \ i++)\n    {\n        word = word + s[i];\n        if(word.length() == n)\n \
    \       {\n            tmp[0] = tmp[0] + word;\n            for(int j = 1; j <\
    \ tmp.length; j++)\n            {\n                if(tmp[j - 1].length() == n)\n\
    \                {\n                    tmp[j] = tmp[j] + \" \" + tmp[j - 1];\n\
    \                    tmp[j-1] = \"\";\n                }\n            }\n    \
    \        for(int j = 0; j < tmp.length; j++)\n            {\n                if(tmp[j].length()\
    \ == n)\n                {\n                    tmp[j] = tmp[j] + \" \" + tmp[j];\n\
    \                }\n            }\n            for(int j = 0; j < tmp.length;\
    \ j++)\n            {\n                if(tmp[j].length() < n)\n             \
    \   {\n                    tmp[j] = tmp[j].substring(0, tmp[j].length()-n);\n\
    \                }\n            }\n            result = new string[tmp.length];\n\
    \            for(int j = 0; j < tmp.length; j++)\n            {\n            \
    \    result[j] = tmp[j];\n            }\n            break;\n        }\n    }\n\
    \    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe above code is\
    \ not working. The code should return [\"hello\", \"world\"], but it's returning\
    \ [\"hello\"] and [\"world\"]\n<|/ c |>\n<| c |>\nYes, its working. Try it out.\
    \ I'm getting the output you are looking for.\n<|/ c |>\n<| c |>\nI have tried\
    \ running your code. But the output is not correct it seems.\n<|/ c |>\n<| c |>\n\
    Which input string are you using? I am getting correct output.\n<|/ c |>\n<| c\
    \ |>\nI have tried running your code on online compiler and it is returning correct\
    \ result. However when I tried to run it on my system it is returning only [\"\
    hello\"]. My system is Ubuntu 14.04.\n<|/ c |>\n<| a tags=java |>\n<code>\npublic\
    \ class Solution {\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofjee5l1.d(69): Error: declaration expected, not `<`

    /tmp/tmpofjee5l1.d(72): Error: unterminated character constant

    /tmp/tmpofjee5l1.d(75): Error: unterminated character constant

    /tmp/tmpofjee5l1.d(93): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(94): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(95): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(96): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(97): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(98): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(99): Error: declaration expected, not `assert`

    /tmp/tmpofjee5l1.d(100): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofjee5l1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    unordered_set<char> vowels{{'a','e','i','o','u','A','E','I','O','U'}};\n\
    \    unordered_set<char> consonants{{'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}};\n\
    \    unordered_set<char> white_spaces{{'\\t','\\n','\\r','\\v','\\f','\\r'}};\n\
    \    vector<string> results;\n    for(auto c : s) {\n        if(c == ' ') {\n\
    \            for(auto w: white_spaces) {\n                results.push_back(w);\n\
    \            }\n            continue;\n        }\n        auto w = consonants.find(c);\n\
    \        if (w == consonants.end()) {\n            w = vowels.find(c);\n     \
    \   }\n        if (w == vowels.end()) {\n            results.push_back(c); \n\
    \        }\n    }\n    sort(results.begin(), results.end());\n    vector<string>\
    \ words;\n    for(auto w: results) {\n        auto start = w;\n        auto end\
    \ = start;\n        for(; end != w; end = end->next) {\n            words.push_back(w->value.to_string());\n\
    \        }\n        if(end - start != n) {\n            words.push_back(w->value.to_string());\n\
    \        }\n    }\n    return words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks, I appreciate your help. It works fine on my system but I have found one\
    \ bug where it sometimes returns an empty array if the second letter of the sentence\
    \ is upper case. e.g. \"Mary had a little lamb\" will return \"lamb\" but \"Mary\
    \ Had A Little Lamb\" will return an empty array.\n<|/ c |>\n<| c |>\nIt would\
    \ be good to point out that `unordered_set` was added in C++17.\n<|/ c |>\n<|\
    \ c |>\nYes, that is probably why. I am using C++17\n<|/ c |>\n<| c |>\nIf you\
    \ have a C++17 compiler then you can change the unordered_set implementation to\
    \ be `unordered_set<char, decltype(hash<char>()) + sizeof...(T)>`. This should\
    \ make the code a bit more robust because there may be a `hash` trait that gets\
    \ default implemented, but also a `unordered_set` constructor that will use a\
    \ hash function that always returns a unique value.\n<|/ c |>\n<| a dscore=0 |>\n\
    You can try something like this :\n<code>\n#include <iostream>\n#include <string>\n\
    \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4wemd6vl.d(24): Error: found `>` when expecting `.` following char

    /tmp/tmp4wemd6vl.d(24): Error: found `{` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4wemd6vl.d(25): Error: found `>` when expecting `.` following char

    /tmp/tmp4wemd6vl.d(25): Error: found `{` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4wemd6vl.d(26): Error: found `>` when expecting `.` following char

    /tmp/tmp4wemd6vl.d(26): Error: found `{` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmp4wemd6vl.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4wemd6vl.d(27): Error: found `>` when expecting `;` following statement

    /t'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  // TODO: your solution here!\n\
    \  long wordcount = 0;\n  \n  for(long i = 0; i < s.length(); i ++)\n  {\n   \
    \ if(s.charAt(i) == ' ')\n    {\n      wordcount++;\n    }\n    else if(s.charAt(i)\
    \ == 'a')\n    {\n      wordcount += 2;\n    }\n    else if(s.charAt(i) == 'e')\n\
    \    {\n      wordcount += 2;\n    }\n    else if(s.charAt(i) == 'i')\n    {\n\
    \      wordcount += 2;\n    }\n    else if(s.charAt(i) == 'o')\n    {\n      wordcount\
    \ += 2;\n    }\n    else if(s.charAt(i) == 'u')\n    {\n      wordcount += 2;\n\
    \    }\n    else if(s.charAt(i) == 'y')\n    {\n      wordcount += 2;\n    }\n\
    \  }\n  \n  \n  if(wordcount != n)\n  {\n    return string();\n  }\n  else\n \
    \ {\n    string w = \"\";\n    for(long i = 0; i < s.length(); i ++)\n    {\n\
    \      if(s.charAt(i) == ' ')\n      {\n        w += s.charAt(i);\n      }\n \
    \     else if(s.charAt(i) == 'a')\n      {\n        w += s.charAt(i);\n      }\n\
    \      else if(s.charAt(i) == 'e')\n      {\n        w += s.charAt(i);\n     \
    \ }\n      else if(s.charAt(i) == 'i')\n      {\n        w += s.charAt(i);\n \
    \     }\n      else if(s.charAt(i) == 'o')\n      {\n        w += s.charAt(i);\n\
    \      }\n      else if(s.charAt(i) == 'u')\n      {\n        w += s.charAt(i);\n\
    \      }\n      else if(s.charAt(i) == 'y')\n      {\n        w += s.charAt(i);\n\
    \      }\n      else\n      {\n        w += s.charAt(i);\n      }\n    }\n   \
    \ return w;\n  }\n}\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpihal2rkk.d(27): Error: no property `length` for type `string`

    /tmp/tmpihal2rkk.d(29): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(33): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(37): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(41): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(45): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(49): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(53): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(62): Error: function expected before `()`, not `string` of
    type `string`

    /tmp/tmpihal2rkk.d(67): Error: no property `length` for type `string`

    /tmp/tmpihal2rkk.d(69): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(71): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(73): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(75): Error: no property `charAt` for type `string`

    /tmp/tmpihal2rkk.d(77)'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long size = s.length();\n   \
    \ long cnt = 0;\n    long index = 0;\n    string[] result = new string[n];\n \
    \   string tmp = \"\";\n    char c;\n    while(index < (size - n))\n    {\n  \
    \      c = s.charAt(index);\n        if(isConsonant(c))\n        {\n         \
    \   cnt = cnt + 1;\n            index = index + 1;\n            tmp = tmp + c;\n\
    \        }\n        else\n        {\n            tmp = \"\";\n            cnt\
    \ = cnt + 1;\n            index = index + 1;\n        }\n        if(cnt == n)\n\
    \        {\n            result[cnt-1] = tmp;\n        }\n    }\n    return result;\n\
    }\n/*\nGiven an array of integers representing the length of words in another\
    \ string, \n    and the length of each word, write a function that returns an\
    \ array of \n    all the words in the original string that have a length of at\
    \ least one of the \n    integers in the input array. \n    Note: you may assume\
    \ the input array contains only positive integers.\n    Examples:\n    >>> select_words_length([4,2,3],\
    \ 3L)\n    [\"Mary\", \"little\"]\n    >>> select_words_length([4,2,3], 2L)\n\
    \    []\n*/\nstring[] select_words_length(List<long> arr,long n)\n{\n    long\
    \ size = arr.size();\n    long cnt = 0;\n    long index = 0;\n    string[] result\
    \ = new string[n];\n    string tmp = \"\";\n    long x;\n    while(index < (size\
    \ - n))\n    {\n        x = arr[index];\n        if(x > n)\n        {\n      \
    \      x = n;\n        }\n        cnt = cnt + 1;\n        index = index + 1;\n\
    \        tmp = tmp + x;\n    }\n    if(cnt > n)\n    {\n        cnt = n;\n   \
    \ }\n    for(cnt = cnt - 1;cnt > -1;cnt--)\n    {\n        result[cnt] = tmp;\n\
    \    }\n    return result;\n}\n/*\nGiven a string s and a natural number n, you\
    \ have been tasked to implement \n    a function that returns the shortest string\
    \ that does not contain at least \n    n consonants.\n    If the string s is empty\
    \ then the function should return an empty string.\n    Note: You may assume the\
    \ input string contains only letters and spaces.\n    Examples:\n    >>> shortest_word(\"\
    Mary had a little lamb\", 4L)\n    \"little\"\n    >>> shortest_word(\"Mary had\
    \ a little lamb\", 3L)\n    \"Mary\"\n    >>> shortest_word(\"simple white space\"\
    , 2L)\n    \"simple\"\n    >>> shortest_word(\"Hello world\", 4L)\n    \"world\"\
    \n    >>> shortest_word(\"Uncle sam\", 3L)\n    \"Uncle\"\n    \n*/\nstring shortest_word(string\
    \ s, long \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j6mz6cf.d(64): Error: found `<` when expecting `)`

    /tmp/tmp6j6mz6cf.d(64): Error: semicolon expected following function declaration

    /tmp/tmp6j6mz6cf.d(64): Error: no identifier for declarator `long`

    /tmp/tmp6j6mz6cf.d(64): Error: declaration expected, not `>`

    /tmp/tmp6j6mz6cf.d(72): Error: declaration expected, not `while`

    /tmp/tmp6j6mz6cf.d(75): Error: declaration expected, not `if`

    /tmp/tmp6j6mz6cf.d(78): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j6mz6cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    // your code here\n   \
    \ \n    return null;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,string,arrays\
    \ |>\n<code>\npublic static String [] getArrayOfWords(String str, int n) {\n \
    \   String[] arr = new String[str.length()/(n-1)];\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphjmj63ba.d(29): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphjmj63ba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr = new string[100];\n\
    \    for(int i = 0; i < arr.length; i++)\n    {\n        arr[i] = \"\" + i + 1;\n\
    \    }\n    int count = 0;\n    int pos = 0;\n    for (int i = 0; i <= s.length();\
    \ i++)\n    {\n        if(s.substring(i, i+1).contains(\" \"))\n        {\n  \
    \          pos = i + 1;\n            count++;\n        }\n    }\n    if(count\
    \ == 0)\n    {\n        arr[0] = \"empty word\";\n    }\n    else\n    {\n   \
    \     while(pos < s.length())\n        {\n            for(int i = pos + 1; i <=\
    \ s.length(); i++)\n            {\n                if(s.substring(i, i+1).contains(\"\
    \ \"))\n                {\n                    count++;\n                    pos\
    \ = i + 1;\n                }\n            }\n            if(count > n)\n    \
    \        {\n                arr[pos] = s.substring(pos, pos+1);\n            }\n\
    \            pos++;\n            count = 0;\n        }\n    }\n    return arr;\n\
    }\n</code>\n<|/ a tags=java,arrays |>\n<| a |>\n<code>\npublic static void main(String[]\
    \ args) {\n    String s = \"Sara is cool\";\n    int c = 0;\n    for (int i =\
    \ 0; i < s.length(); i++) {\n        for (int j = i + 1; j < s.length(); j++)\
    \ {\n            char ch = s.charAt(i);\n            char ch1 = s.charAt(j);\n\
    \            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u')\
    \ {\n                c++;\n                if (c == 2) {\n                   \
    \ System.out.println(s.substring(i, j));\n                }\n            }\n \
    \       }\n    }\n}\n</code>\n<|/ a dscore=0 tags=java,arrays |>\n<| a tags=java,arrays\
    \ |>\n<code>\npublic static void main(String[] args) {\n    // TODO code application\
    \ logic here\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg0s6t4im.d(65): Error: declaration expected, not `<`

    /tmp/tmpg0s6t4im.d(72): Error: declaration expected, not `for`

    /tmp/tmpg0s6t4im.d(72): Error: no identifier for declarator `i`

    /tmp/tmpg0s6t4im.d(72): Error: declaration expected, not `<`

    /tmp/tmpg0s6t4im.d(72): Error: no identifier for declarator `i`

    /tmp/tmpg0s6t4im.d(72): Error: declaration expected, not `++`

    /tmp/tmpg0s6t4im.d(73): Error: no identifier for declarator `j`

    /tmp/tmpg0s6t4im.d(73): Error: declaration expected, not `<`

    /tmp/tmpg0s6t4im.d(73): Error: no identifier for declarator `j`

    /tmp/tmpg0s6t4im.d(73): Error: declaration expected, not `++`

    /tmp/tmpg0s6t4im.d(76): Error: declaration expected, not `if`

    /tmp/tmpg0s6t4im.d(78): Error: declaration expected, not `if`

    /tmp/tmpg0s6t4im.d(80): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg0s6t4im.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string _s = s;\n    string[]\
    \ _result = new string[10];\n    ArrayList _al = new ArrayList();\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvsaxsnpa.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsaxsnpa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var arr=new ArrayList();\n  \
    \  foreach(var word in s.Split(\" \")){\n        if(consonants(word).length==n)\n\
    \            arr.Add(word);\n    }\n    arr.Sort();\n    return arr.ToArray();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease provide explanation along with\
    \ your solution.\n<|/ c |>\n<| a |>\nHere's another approach, using LINQ. Hope\
    \ it helps.\n<code>\nstring[] select_words(string s, long n) \n{\n    return s.Split('\
    \ ').Select(x => x.Where(char.IsConsonant).TakeWhile(char.IsConsonant)).ToArray();\n\
    }\n</code>\n<|/ a tags=c#,string dscore=0 |>\n<| a tags=c#,string dscore=0 |>\n\
    <code>\npublic class Program\n{\n    public static void Main(string[] args)\n\
    \    {\n        var wordsWith4Consonants = \"Mary had a little lamb\";\n     \
    \   var words = wordsWith4Consonants.Split(' ');\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph8q90l8l.d(25): Error: found `in` when expecting `;`

    /tmp/tmph8q90l8l.d(32): Error: declaration expected, not `<`

    /tmp/tmph8q90l8l.d(38): Error: unterminated character constant

    /tmp/tmph8q90l8l.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph8q90l8l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] freq = std.array.from_float(0.0);\n\
    \    for(char c:s) freq[(int)c]++;\n    for(int i=0; i<26; i++)\n        if (freq[i]\
    \ < n) freq[i] = 0;\n    \n    int[] res = std.array.from_float(0.0);\n    for(int\
    \ i=0; i<s.length(); i++){\n        if(s[i]!=' ') res[(int)s[i]-97]++;\n    }\n\
    \    return std.array.select(res, function(int x, int y){return x==y;});\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=java |>\nThe answer is given below.\n<code>\n\
    public String[] selectWords(String s, int n) {\n    Map<Integer, Integer> count\
    \ = new HashMap<>();\n    for (int i = 0; i < s.length(); i++) {\n        int\
    \ ch = s.charAt(i);\n        if (ch == ' ')\n            continue;\n        if\
    \ (count.containsKey(ch)) {\n            count.put(ch, count.getOrDefault(ch,\
    \ 0) + 1);\n        } else {\n            count.put(ch, 1);\n        }\n    }\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhg7wpns.d(25): Error: semicolon expected, not `:`

    /tmp/tmpnhg7wpns.d(25): Error: expression expected, not `:`

    /tmp/tmpnhg7wpns.d(25): Error: found `s` when expecting `;` following `for` condition

    /tmp/tmpnhg7wpns.d(25): Error: C style cast illegal, use `cast(int)c`

    /tmp/tmpnhg7wpns.d(31): Error: C style cast illegal, use `cast(int)s[i]`

    /tmp/tmpnhg7wpns.d(35): Error: declaration expected, not `<`

    /tmp/tmpnhg7wpns.d(42): Error: declaration expected, not `for`

    /tmp/tmpnhg7wpns.d(42): Error: no identifier for declarator `i`

    /tmp/tmpnhg7wpns.d(42): Error: declaration expected, not `<`

    /tmp/tmpnhg7wpns.d(42): Error: no identifier for declarator `i`

    /tmp/tmpnhg7wpns.d(42): Error: declaration expected, not `++`

    /tmp/tmpnhg7wpns.d(44): Error: declaration expected, not `if`

    /tmp/tmpnhg7wpns.d(46): Error: declaration expected, not `if`

    /tmp/tmpnhg7wpns.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhg7wpns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int counter=0;\n    string[]\
    \ words=new string[s.length()];\n    for(int i=0;i<s.length();i++)\n    {\n  \
    \      if(s[i]=='a')\n        {\n            if((i+1)<s.length() && s[i+1]=='o')\n\
    \            {\n                if(counter==n)\n                    words[counter++]=s.Substring(0,i);\n\
    \                else\n                    counter++;\n            }\n       \
    \ }\n    }\n    return words;\n}\n</code>\n<|/ a |>\n<| c |>\nCan you please explain\
    \ the algorithm/logic behind?\n<|/ c |>\n<| c |>\nWhat if the input is \"Mary\
    \ had a little lamb\"? The algorithm will find all words with 4 or more consonants.\n\
    <|/ c |>\n<| c |>\nI believe this fails on the following test case: select_words(\"\
    Mary had a little lamb\", 4L). It should return [\"little\"], but instead returns\
    \ an empty array.\n<|/ c |>\n<| c |>\nYou missed the fact that he is looking for\
    \ words with exactly **n** consonants. \"little\" has 4 consonants, which is exactly\
    \ what he wants.\n<|/ c |>\n<| c |>\nOh yes, I missed the part where he is looking\
    \ for words with exactly **n** consonants. Sorry for wasting your time.\n<|/ c\
    \ |>\n<| a tags=algorithm,c#,regex,string |>\n<code>\n using System;\n using System.Text.RegularExpressions;\n\
    \ public class Program\n {\n    public static void Main()\n    {\n        Regex\
    \ rgx = new Regex(@\"[a-z]*[^aeiou]*[a-z]*\");\n        string text = \"Mary had\
    \ a little lamb\";\n        string result = rgx.Replace(text, \"$1\");\n     \
    \   Console.WriteLine(result);\n    }\n}\n</code>\nOutput:\n<code>\nMary  lamb\n\
    </code>\nThis code replaces any word that does not contain any consonants with\
    \ a single consonant word.\n<|/ a dscore=1 |>\n<| c |>\nThis returns `Mary`, not\
    \ `Mary lamb`\n<|/ c |>\n<| c |>\n: yes, I know, but I thought that he wanted\
    \ to return all words not containing exactly **n** consonants.\n<|/ c |>\n<| c\
    \ |>\nThe OP states: \"If the string s is empty then the function should return\
    \ an empty array\".\n<|/ c |>\n<| c |>\nYes, I just noticed that. \nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptpdys360.d(41): Error: declaration expected, not `<`

    /tmp/tmptpdys360.d(61): Error: semicolon expected, not `.`

    /tmp/tmptpdys360.d(61): Error: no identifier for declarator `.Text.RegularExpressions`

    /tmp/tmptpdys360.d(66): Error: expression expected, not `@`

    /tmp/tmptpdys360.d(66): Error: found `"[a-z]*[^aeiou]*[a-z]*"` when expecting
    `,`

    /tmp/tmptpdys360.d(72): Error: declaration expected, not `<`

    /tmp/tmptpdys360.d(94): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(95): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(96): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(97): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(98): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(99): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(100): Error: declaration expected, not `assert`

    /tmp/tmptpdys360.d(101): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpdys360.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    char[] charArray = s.toCharArray();\n\
    \    map<string, string> result = new map<string, string>();\n    for(char c:\
    \ charArray) {\n        result[c + \" \" + c] = c+\" \"+c;\n    }\n    for(auto\
    \ it = result.begin(); it != result.end(); it++) {\n        if(it.second == n\
    \ || it.second == n+1) {\n            string[] result = new string[1];\n     \
    \       result[0] = it.first;\n            return result;\n        }\n    }\n\
    \    return new string[0];\n}\n</code>\n<|/ a dscore=0 tags=java,arrays,algorithm,sorting\
    \ |>\n<| a tags=java,arrays,algorithm,sorting dscore=0 |>\nHere is my implementation\
    \ in Java.\n<code>\nString[] arr = \"abcd efgh ijklm nopqr stuv\".split(\" \"\
    );\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprxqjg180.d(25): Error: expression expected, not `)`

    /tmp/tmprxqjg180.d(25): Error: found `;` when expecting `)`

    /tmp/tmprxqjg180.d(26): Error: found `for` when expecting `;` following statement

    /tmp/tmprxqjg180.d(26): Error: found `:` when expecting `)`

    /tmp/tmprxqjg180.d(26): Error: missing `{ ... }` for function literal

    /tmp/tmprxqjg180.d(26): Error: found `charArray` when expecting `;` following
    statement

    /tmp/tmprxqjg180.d(26): Error: found `)` instead of statement

    /tmp/tmprxqjg180.d(29): Error: declaration expected, not `for`

    /tmp/tmprxqjg180.d(29): Error: no identifier for declarator `it`

    /tmp/tmprxqjg180.d(29): Error: declaration expected, not `!=`

    /tmp/tmprxqjg180.d(29): Error: no identifier for declarator `it`

    /tmp/tmprxqjg180.d(29): Error: declaration expected, not `++`

    /tmp/tmprxqjg180.d(32): Error: no identifier for declarator `result[0]`

    /tmp/tmprxqjg180.d(32): Error: declaration expected, not `=`

    /tmp/tmprxqjg180.d(33): Error: declaration expected, not `return`

    /tmp/tmprxqjg180.d(34): Er'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string str = s;\n    string[]\
    \ words = new string[10000];\n    int count = 0;\n    int maxcount = 0;\n    bool\
    \ isfull = false;\n    for(int i = 0; i < str.Length; i++){\n        for(int j\
    \ = 0; j < words.length; j++){\n            if(str.Contains(words[j])){\n    \
    \            if(words[j].Length == n)\n                    count++;\n        \
    \        else if(words[j].Length > n)\n                    count++;\n        \
    \        isfull = true;\n            }\n        }\n        if(isfull == false){\n\
    \            if(count == 0){\n                if(maxcount == 0){\n           \
    \         words[count] = str;\n                    count++;\n                \
    \    maxcount++;\n                }\n                else{\n                 \
    \   words[maxcount] = str;\n                    maxcount++;\n                \
    \    count = 0;\n                }\n            }\n            else{\n       \
    \         isfull = false;\n            }\n        }\n    }\n    return words;\n\
    }\n/*\n    =================================================================\n\
    \    MATH FUNCTIONS\n    =================================================================\n\
    */\n/*\nGiven an array of integers, returns the sum of the numbers in the array.\n\
    The input array is assumed to contain only integers, and may contain duplicates.\n\
    The result will be returned as a long integer.\nExamples:\n    sum_of_array([1,\
    \ 6, 3, 8]) == 19\n    sum_of_array([1, 6, 3, 8]) == 6\n*/\nlong sum_of_array(int[]\
    \ nums)\n{\n    long sum = 0;\n    for (int i = 0; i < nums.Length; i++)\n   \
    \     sum += nums[i];\n    return sum;\n}\n/*\nGiven an array of integers, returns\
    \ the product of the numbers in the array.\nThe input array is assumed to contain\
    \ only integers, and may contain duplicates.\nThe result will be returned as a\
    \ long integer.\nExamples:\n    product_of_array([1, 6, 3, 8]) == 720\n    product_of_array([1,\
    \ 6, 3, 8]) == 24\n*/\nlong product_of_array(int[] nums)\n{\n    long prod = 1;\n\
    \    for (int i = 0; i < nums.Length; i++)\n        prod *= nums[i];\n    return\
    \ prod;\n}\n/*\n    Given a string, the function returns an integer array that\
    \ has the \n    number of occurrences of each letter in the string in the order\
    \ they appear.\n    Note: you may assume the input string contains only letters\
    \ and spaces.\n    Examples:\n        count_letters(\"Mary had a little lamb\"\
    , 4L)\n        [4, 1, 0]\n        count_letters(\"Mary had a little lamb\", 3L)\n\
    \        [4, 2]\n        count_letters(\"simple white space\", 2L)\n        [1,\
    \ 1]\n        count_letters(\"Hello world\", 4L)\n        [4, 1, 0]\n        count_letters(\"\
    Uncle sam\", 3L)\n        [4, 1]\n*/\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c8mnage.d(29): Error: no property `Length` for type `string`

    /tmp/tmp0c8mnage.d(31): Error: no property `Contains` for type `string`

    /tmp/tmp0c8mnage.d(32): Error: no property `Length` for type `string`

    /tmp/tmp0c8mnage.d(34): Error: no property `Length` for type `string`

    /tmp/tmp0c8mnage.d(75): Error: no property `Length` for type `int[]`

    /tmp/tmp0c8mnage.d(90): Error: no property `Length` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c8mnage.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s == \"\") return new string[0];\n\
    \    string[] words = select_words_helper(s, 0);\n    for (int i = 0; i < words.length;\
    \ i++) \n        if (words[i].length == n) return words;\n    return new string[0];\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikx40_5b.d(25): Error: undefined identifier `select_words_helper`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikx40_5b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    if (s.length() == 0)\n\
    \        return {};\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqhnhokoo.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhnhokoo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    string[] result = new string[];\n\
    \    long count = 0;\n    \n    for(int i = 0; i < s.length(); i++){\n       \
    \ if(s[i] == 'a'){\n            count += 2;\n            for(int j = 0; j < n;\
    \ j++){\n                result += s.substring(i, i+j);\n            }\n     \
    \   }\n        else if(s[i] == 'b'){\n            count += 1;\n            for(int\
    \ j = 0; j < n; j++){\n                result += s.substring(i, i+j);\n      \
    \      }\n        }\n        else if(s[i] == 'c'){\n            count += 1;\n\
    \            for(int j = 0; j < n; j++){\n                result += s.substring(i,\
    \ i+j);\n            }\n        }\n        else if(s[i] == 'd'){\n           \
    \ count += 2;\n            for(int j = 0; j < n; j++){\n                result\
    \ += s.substring(i, i+j);\n            }\n        }\n        else if(s[i] == 'e'){\n\
    \            count += 2;\n            for(int j = 0; j < n; j++){\n          \
    \      result += s.substring(i, i+j);\n            }\n        }\n        else\
    \ if(s[i] == 'f'){\n            count += 1;\n            for(int j = 0; j < n;\
    \ j++){\n                result += s.substring(i, i+j);\n            }\n     \
    \   }\n        else if(s[i] == 'g'){\n            count += 1;\n            for(int\
    \ j = 0; j < n; j++){\n                result += s.substring(i, i+j);\n      \
    \      }\n        }\n        else if(s[i] == 'h'){\n            count += 1;\n\
    \            for(int j = 0; j < n; j++){\n                result += s.substring(i,\
    \ i+j);\n            }\n        }\n        else if(s[i] == 'i'){\n           \
    \ count += 1;\n            for(int j = 0; j < n; j++){\n                result\
    \ += s.substring(i, i+j);\n            }\n        }\n        else if(s[i] == 'j'){\n\
    \            count += 1;\n            for(int j = 0; j < n; j++){\n          \
    \      result += s.substring(i, i+j);\n            }\n        }\n        else\
    \ if(s[i] == 'k'){\n            count += 1;\n            for(int j = 0; j < n;\
    \ j++){\n                result += s.substring(i, i+j);\n            }\n     \
    \   }\n        else if(s[i] == 'l'){\n            count += 1;\n            for(int\
    \ j = 0; j < n; j++){\n                result += s.substring(i, i+j);\n      \
    \      }\n        }\n        else if(s[i] == 'm'){\n            count += 2;\n\
    \            for(int j = 0; j < n; j++){\n                result += s.substring(i,\
    \ i+j);\n            }\n        }\n        else if(s[i] == 'n'){\n           \
    \ count += 1;\n            for(int j = 0; j < n; j++){\n                result\
    \ += s.substring(i, i+j);\n            }\n        }\n        else if(s[i] == 'o'){\n\
    \            count += 2;\n            for(int j = 0; j < \nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_ctv74_.d(116): Error: expression expected, not `unittest`

    /tmp/tmpo_ctv74_.d(117): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpo_ctv74_.d(118): Error: expression expected, not `alias`

    /tmp/tmpo_ctv74_.d(118): Error: found `candidate` when expecting `)`

    /tmp/tmpo_ctv74_.d(118): Error: found `=` instead of statement

    /tmp/tmpo_ctv74_.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpo_ctv74_.d(128): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_ctv74_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var r : string[] = [];\n    if(s.length\
    \ == 0)\n    {\n        return r;\n    }\n    int count = 0;\n    bool isConsonant\
    \ = false;\n    foreach (char c in s)\n    {\n        if(c == ' ')\n        {\n\
    \            if(!isConsonant)\n            {\n                isConsonant = true;\n\
    \                count++;\n            }\n        }\n        else\n        {\n\
    \            if(isConsonant)\n            {\n                isConsonant = false;\n\
    \                count++;\n            }\n            if(count >= n)\n       \
    \     {\n                r.push(s);\n            }\n        }\n    }\n    return\
    \ r;\n}\n</code>\n<|/ a tags=c#,string,algorithm,search dscore=2 |>\n<| c |>\n\
    What if there are no spaces in the string? Why not just do `chars.Count(c => c\
    \ == 'a') >= 4`?\n<|/ c |>\n<| c |>\nI wanted to put that in but i had no time\
    \ so i had to edit my answer :P\n<|/ c |>\n<| c |>\nYes I do see your point, but\
    \ this solution is so inefficient that its worth a little extra effort to me.\
    \ I'll try to improve mine and let you know\n<|/ c |>\n<| c |>\nI've added a solution\
    \ which does not use LINQ and will work in O(n+m).\n<|/ c |>\n<| c |>\nI appreciate\
    \ your effort in improving my solution, thanks. But your solution does not take\
    \ into account that consonants are not necessarily a contiguous sequence. For\
    \ example, \"cat\" would not be picked up.\n<|/ c |>\n<| a tags=c#,string,algorithm,search\
    \ |>\nA simple method can be to first check if your string has enough consonants\
    \ or not. If it has then you can simply iterate over it and check with substring\
    \ method. \nIf your string is empty or null then you have to return an empty string.\n\
    <|/ a dscore=0 |>\n<| c |>\nYour method does not take into account that consonants\
    \ are not necessarily a contiguous sequence. For example, \"cat\" would not be\
    \ picked up.\n<|/ c |>\n<| c |>\nI suppose that could be taken care of.\n<|/ c\
    \ |>\n<| c |>\nWhat do you mean by contiguous sequence? Consonant is a sequence\
    \ that has no gaps. So, cat could be picked up with your code.\n<|/ c |>\n<| c\
    \ |>\nSorry for my poor explanation: It means you can have \"\nunittest\n{\n \
    \   alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp30_59naw.d(24): Error: found `r` when expecting `;` following statement

    /tmp/tmp30_59naw.d(24): Error: found `:` instead of statement

    /tmp/tmp30_59naw.d(31): Error: found `in` when expecting `;`

    /tmp/tmp30_59naw.d(56): Error: declaration expected, not `<`

    /tmp/tmp30_59naw.d(65): Error: unterminated character constant

    /tmp/tmp30_59naw.d(68): Error: unterminated character constant

    /tmp/tmp30_59naw.d(98): Error: unterminated string constant starting at /tmp/tmp30_59naw.d(98)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp30_59naw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long n = n;\n    int count =\
    \ 0;\n    string newString = \"\";\n    for(int i=0; i<s.length(); i++) \n   \
    \ {\n        if(s[i].isLetter()) \n        {\n            newString += s[i];\n\
    \            if(s[i].isUpper()) \n            {\n                count++;\n  \
    \              if(count == n) \n                {\n                    string[]\
    \ newArray = newString.Split(' ');\n                    newString = \"\";\n  \
    \                  for(int j=0; j<newArray.Length; j++) \n                   \
    \ {\n                        string[] array = newArray[j].Split(' ');\n      \
    \                  if(array.Length == n)\n                        {\n        \
    \                    return newArray;\n                        }\n           \
    \         }\n                }\n            }\n            count = 0;\n      \
    \  }\n    }\n    return new string[0];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Hi, this solution is not working for me. \nI changed string[] to string[] array[]\
    \ and still getting error.\n<|/ c |>\n<| c |>\nIt works! I changed my code according\
    \ to your comment. Thank you so much!\n<|/ c |>\n<| a tags=string,c# |>\nUsing\
    \ LINQ:\n<code>\nstring[] wordsWithNConsonants(string s, int n)\n{\n    if (string.IsNullOrEmpty(s))\n\
    \        return new[]{};\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0n1lusn.d(54): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0n1lusn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    vector<string> res;\n    string\
    \ temp;\n    string sub = s;\n    long count = 0;\n    while(n>0) {\n        if\
    \ (sub.find(\"a\") != string::npos) {\n            temp.insert(temp.begin(), \"\
    a\");\n            ++count;\n            if(n-count > 1)\n            {\n    \
    \            temp += \" \";\n                count += 2;\n            }\n    \
    \    }\n        if (sub.find(\"e\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"e\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"i\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"i\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"o\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"o\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"u\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"u\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"y\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"y\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"e\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"e\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"a\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"a\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"y\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"y\");\n            ++count;\n            if(n-count > 1)\n            {\n\
    \                temp += \" \";\n                count += 2;\n            }\n\
    \        }\n        if (sub.find(\"a\") != string::npos) {\n            temp.insert(temp.begin(),\
    \ \"a\");\n            ++count;\n            if(n-count > 1)\n            {\n\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbdwflpq7.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpbdwflpq7.d(29): Error: found `:` when expecting `)`

    /tmp/tmpbdwflpq7.d(29): Error: found `:` instead of statement

    /tmp/tmpbdwflpq7.d(38): Error: found `:` when expecting `)`

    /tmp/tmpbdwflpq7.d(38): Error: found `:` instead of statement

    /tmp/tmpbdwflpq7.d(47): Error: declaration expected, not `if`

    /tmp/tmpbdwflpq7.d(49): Error: declaration expected, not `++`

    /tmp/tmpbdwflpq7.d(50): Error: declaration expected, not `if`

    /tmp/tmpbdwflpq7.d(53): Error: no identifier for declarator `count`

    /tmp/tmpbdwflpq7.d(53): Error: declaration expected, not `+=`

    /tmp/tmpbdwflpq7.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbdwflpq7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(s.length()==0)\n    {\n  \
    \      return new string[0];\n    }\n    string word = std.string(s);\n    string[]\
    \ words = std.string[].create(word.length());\n    for(long i = 0l; i<word.length();\
    \ i++)\n    {\n        bool wordContainsNconsonants = false;\n        for(long\
    \ j = i; j<word.length(); i++)\n        {\n            if(word[i] == std.char.repeat(std.char.count(word[j],\"\
    B\")-1L))\n                wordContainsNconsonants = true;\n        }\n      \
    \  if(wordContainsNconsonants)\n            words[words.size()-1] += word[i];\n\
    \    }\n    \n    std.sort(words);\n    return words.take(n);\n}\n</code>\nFor\
    \ this solution, you can use std.algorithm.sort and std.algorithm.take to speed\
    \ up the process.\n<|/ a |>\n<| c |>\nAh!  I'm so glad I asked.  I looked at these\
    \ solutions a little bit after I posted my question, and I think I like it a lot.\
    \  I really appreciate the help, and I hope you understand how this question helped\
    \ me to find an answer.  Thanks again!\n<|/ c |>\n<| a dscore=1 tags=string,algorithm,c#\
    \ |>\nThe below method finds all substrings of a string which are exactly n times\
    \ repeated. \n<code>\npublic static void FindAllSubstrings(string input, int n)\n\
    \    {\n        int m = input.Length - 1;\n        int r = n - 1;\n        int\
    \ count = 0;\n        string sub = string.Empty;\n        string currentSub =\
    \ string.Empty;\n        while (m >= 0)\n        {\n            currentSub = input.Substring(m,\
    \ r);\n            int c = 0;\n            int m = currentSub.Length - 1;\n  \
    \          while (m >= 0)\n            {\n                if (currentSub[m] ==\
    \ sub[m])\n                {\n                    c++;\n                    m--;\n\
    \                }\n                else\n                {\n                \
    \    m = m - 1;\n                }\n            }\n            if (c == r)\n \
    \           {\n                count++;\n                m--;\n            }\n\
    \            else\n            {\n                count = 0;\n               \
    \ m = m - 1;\n            }\n            if (m < 0)\n            {\n         \
    \       m = m;\n                r--;\n            }\n        }\n        if (count\
    \ == n)\n        {\n            Console.WriteLine(currentSub);\n        }\n  \
    \  }\n</code>\n<|/ a |>\n<| a tags=string,algorithm,c# |>\nIn case anyone is looking\
    \ for an implementation that also handles duplicates within the substrings:\n\
    <code>\nstatic List<string> FindAllSubstrings(string text, \nunittest\n{\n   \
    \ alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xabj6qz.d(30): Error: lower case integer suffix ''l'' is not allowed.
    Please use ''L'' instead

    /tmp/tmp5xabj6qz.d(35): Error: identifier expected following `.`, not `char`

    /tmp/tmp5xabj6qz.d(35): Error: identifier expected following `.`, not `char`

    /tmp/tmp5xabj6qz.d(45): Error: declaration expected, not `<`

    /tmp/tmp5xabj6qz.d(49): Error: unterminated character constant

    /tmp/tmp5xabj6qz.d(61): Error: declaration expected, not `while`

    /tmp/tmp5xabj6qz.d(66): Error: declaration expected, not `while`

    /tmp/tmp5xabj6qz.d(71): Error: no identifier for declarator `m`

    /tmp/tmp5xabj6qz.d(71): Error: declaration expected, not `--`

    /tmp/tmp5xabj6qz.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xabj6qz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List<string> words = new List<string>();\n\
    \    for (char c : s)\n    {\n        if ((int)c == n || std.typecons.is_consonant(c))\n\
    \        {\n            words.Add(s);\n        }\n    }\n    return words.ToArray();\n\
    }\n</code>\n<|/ a tags=algorithm,language-agnostic,string,python,c# |>\n<| a dscore=1\
    \ |>\n<code>\ndef select_words(s, n):\n    words = s.split()\n    answer = []\n\
    \    for i in words:\n        if s.count(i) == n:\n            answer.append(i)\n\
    \    return answer\n</code>\n<|/ a tags=algorithm,language-agnostic,string,python,c#\
    \ |>\n<| a tags=algorithm,language-agnostic,string,python,c# dscore=0 |>\n<code>\n\
    def select_words(s, n):\n   return [i for i in s.split() if s.count(i) == n]\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,language-agnostic,string,python,c#\
    \ |>\n<code>\ndef select_words(s, n):\n    words = s.split()\n    return [w for\
    \ w in words if s.count(w) == n]\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n\
    def select_words(s, n):\n    return [w for w in s.split() if s.count(w) == n]\n\
    </code>\n<|/ a tags=algorithm,language-agnostic,string,python,c# |>\n<| c |>\n\
    Welcome to Stack Overflow! While this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=algorithm,language-agnostic,string,python,c#\
    \ dscore=0 |>\n<code>\ndef select_words(s, n):\n    words = s.split()\n    return\
    \ [w for w in words if s.count(w) == n]\n</code>\n<|/ a |>\n<| a |>\nHere's a\
    \ recursive solution:\n<code>\ndef select_words(s, n):\n    l = len(s)\n    if\
    \ l == 0:\n        return []\n    i = 0\n    while i < l:\n        if s.count(s[i])\
    \ == n:\n            return [s[i:]] + select_words(s[i+1:], n)\n        i += 1\n\
    \    return []\n</code>\n<|/ a tags=algorithm,language-agnostic,string,python,c#\
    \ dscore=0 |>\n<| a tags=algorithm,language-agnostic,string,python,c# |>\nMy approach:\n\
    <code>\ndef select_words(s, n):\n  s = s.split()\n  result = []\n  for i in range(len(s)\
    \ - 1):\n    if s.\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5ttzbuw.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpt5ttzbuw.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpt5ttzbuw.d(24): Error: expression expected, not `)`

    /tmp/tmpt5ttzbuw.d(24): Error: found `;` when expecting `)`

    /tmp/tmpt5ttzbuw.d(25): Error: found `for` when expecting `;` following statement

    /tmp/tmpt5ttzbuw.d(25): Error: found `:` when expecting `)`

    /tmp/tmpt5ttzbuw.d(25): Error: missing `{ ... }` for function literal

    /tmp/tmpt5ttzbuw.d(25): Error: found `s` when expecting `;` following statement

    /tmp/tmpt5ttzbuw.d(25): Error: found `)` instead of statement

    /tmp/tmpt5ttzbuw.d(31): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5ttzbuw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int[] freq = consonant_freq(s);\n\
    \    List<string> result = new List<string>();\n    for (long i = 0; i < s.length;\
    \ i++)\n    {\n        bool found = true;\n        for(int j = 0; j < n; j++)\n\
    \        {\n            if (freq[j] <= 0)\n                found = false;\n  \
    \      }\n        if(found && s.Substring(i, 1) == \"a\")\n        {\n       \
    \     result.Add(s.Substring(0, i));\n            i = i + 1;\n        }\n    }\n\
    \    return result.ToArray();\n}\n</code>\n<|/ a dscore=0 tags=c# |>\n<| c |>\n\
    The code in this answer is wrong in so many ways. It does not compile. `int[]\
    \ freq = consonant_freq(s);` should be `int[] freq = consonant_freq(s.ToUpperInvariant());`\
    \ and you have a typo `consonant_freq(s.ToUpperInvariant());`. `result = new List<string>();`\
    \ should be `result = new List<string>();`\n<|/ c |>\n<| c |>\n- Please see the\
    \ [edit](https://stackoverflow.com/posts/50591048/edit) I made to the code. It\
    \ compiles now.\n<|/ c |>\n<| c |>\nThe code in the edit you did now does not\
    \ compile due to an error on line `int x = freq[(int)i];`. The error is: `Cannot\
    \ implicitly convert type 'int' to 'int[]'`. `freq` is of type `int[]` and you\
    \ attempt to assign an `int` to the `int[]` variable `freq`. `int x = freq[(int)i]`\
    \ should be `int x = freq[i]`. The same error applies to `int freq = consonant_freq(s.ToUpperInvariant());`.\n\
    <|/ c |>\n<| c |>\n- Please see the [edit](https://stackoverflow.com/posts/50591048/edit)\
    \ I made to the code. It compiles now.\n<|/ c |>\n<| a tags=c# |>\nI believe this\
    \ should be fairly simple. First we get the frequency of each letter in the string.\
    \ Then we create an array containing the indexes of the letters we want to include.\
    \ Next we create a string which we will iterate through but which only contains\
    \ the letters we want to include.\n<code>\n static void Main(string[] args)\n\
    \    {\n        var text = \"Mary had a little lamb Happy day\";\n        var\
    \ freq = text.ToUpper().ToCharArray().GroupBy(c => c).Select(x => x.Count()).ToArray();\n\
    \        var indexed = freq.Select((x, i) => new { Index = i, Value = x }).Where(x\
    \ => x.Value > \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0j4w1mgq.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmp0j4w1mgq.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmp0j4w1mgq.d(25): Error: expression expected, not `)`

    /tmp/tmp0j4w1mgq.d(25): Error: found `;` when expecting `)`

    /tmp/tmp0j4w1mgq.d(26): Error: found `for` when expecting `;` following statement

    /tmp/tmp0j4w1mgq.d(26): Error: found `i` when expecting `.` following long

    /tmp/tmp0j4w1mgq.d(26): Error: found `=` when expecting identifier following `long`.

    /tmp/tmp0j4w1mgq.d(26): Error: found `0` when expecting `)`

    /tmp/tmp0j4w1mgq.d(26): Error: found `)` when expecting `;` following statement

    /tmp/tmp0j4w1mgq.d(42): Error: declaration expected, not `<`

    /tmp/tmp0j4w1mgq.d(63): Error: basic type expected, not `{`

    /tmp/tmp0j4w1mgq.d(63): Error: found `{` when expecting `,`

    /tmp/tmp0j4w1mgq.d(63): Error: found `}` when expecting `,`

    /tmp/tmp0j4w1mgq.d(64): Error: expression expected, not `unittest`

    /tmp/tmp0j4w1mgq.d(65): Error: found `{` when expectin'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long count = 1;\n    int index\
    \ = 0;\n    if (s.length == 0)\n        return \"\";\n    \n    while(count <\
    \ n)\n    {\n        index = 0;\n        for(index = 0; index < s.length && s[index]\
    \ != '\\0'; index++)\n        {\n            if (s[index] == 'c')\n          \
    \      count++;\n        }\n    }\n    \n    string str = \"\";\n    for(index\
    \ = 0; index < s.length && s[index] != '\\0'; index++)\n    {\n        if (s[index]\
    \ == 'c')\n            str += \" \";\n        else\n            str += s[index];\n\
    \    }\n    return str.split(\" \");\n}\n</code>\n<|/ a dscore=0 tags=c#,string\
    \ |>\n<| c |>\nThank you so much for this solution\n<|/ c |>\n<| a |>\nThis works:\n\
    <code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpufchzikj.d(49): Error: declaration expected, not `<`

    /tmp/tmpufchzikj.d(58): Error: semicolon expected, not `.`

    /tmp/tmpufchzikj.d(58): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpufchzikj.d(59): Error: semicolon expected, not `.`

    /tmp/tmpufchzikj.d(59): Error: no identifier for declarator `.Linq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpufchzikj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] ret = new string[100];\n\
    \    std.string.forall(s, isSpace, i, ret);\n    std.string.forall(s, isLetter,\
    \ i, ret);\n    \n    for(long i = ret.length; i < ret.length; i++) {\n      \
    \  if(s.contains(ret[i]))\n            ret[i] = \"\";\n    }\n    \n    return\
    \ ret;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nAnother approach - which does\
    \ not require any library import at all.\n<code>\npublic List<String> consonants(String\
    \ s) {\n    List<String> result = new ArrayList<String>();\n    boolean foundSpace\
    \ = false;\n    boolean foundAlpha = false;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        char c = s.charAt(i);\n        if (c == '\\u0020') {\n     \
    \       if (!foundSpace) {\n                foundSpace = true;\n             \
    \   result.add(s.substring(0, i));\n            }\n            if (i == s.length()\
    \ - 1) {\n                if (!foundAlpha) {\n                    foundAlpha =\
    \ true;\n                    result.add(s.substring(i));\n                }\n\
    \            }\n        } else {\n            if (foundSpace) {\n            \
    \    result.add(s.substring(0, i));\n                foundSpace = false;\n   \
    \         }\n            if (foundAlpha) {\n                result.add(s.substring(i));\n\
    \                foundAlpha = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 tags=string,algorithm |>\n<| a |>\nHere\
    \ is my solution (tested on Java 8):\n<code>\npublic static List<String> findConsonants(String\
    \ str) {\n    List<String> result = new ArrayList<>();\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfcq_g66.d(35): Error: declaration expected, not `<`

    /tmp/tmpvfcq_g66.d(44): Error: declaration expected, not `for`

    /tmp/tmpvfcq_g66.d(44): Error: no identifier for declarator `i`

    /tmp/tmpvfcq_g66.d(44): Error: declaration expected, not `<`

    /tmp/tmpvfcq_g66.d(44): Error: no identifier for declarator `i`

    /tmp/tmpvfcq_g66.d(44): Error: declaration expected, not `++`

    /tmp/tmpvfcq_g66.d(46): Error: declaration expected, not `if`

    /tmp/tmpvfcq_g66.d(49): Error: unexpected `(` in declarator

    /tmp/tmpvfcq_g66.d(49): Error: unexpected `(` in declarator

    /tmp/tmpvfcq_g66.d(49): Error: basic type expected, not `0`

    /tmp/tmpvfcq_g66.d(49): Error: found `0` when expecting `)`

    /tmp/tmpvfcq_g66.d(49): Error: no identifier for declarator `result.add(s.substring(_error_),
    i)`

    /tmp/tmpvfcq_g66.d(49): Error: semicolon expected following function declaration

    /tmp/tmpvfcq_g66.d(49): Error: declaration expected, not `)`

    /tmp/tmpvfcq_g66.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var dict = new string[26];\n\
    \    string p = \"aeiou\";\n    string v = \"AEIOU\";\n    string w = \"AEIOUaeiou\"\
    ;\n    string x = \"aeiouAEIOU\";\n    string z = \"aeiouAEIOUaeiou\";\n    var\
    \ t = s.ToCharArray();\n    var a = \"\";\n    if (s.Length == 0) return new string[0];\n\
    \    for (int i = 0; i < t.Length; i++)\n    {\n        bool flag = false;\n \
    \       for (int j = 0; j < v.Length; j++)\n        {\n            if (t[i] ==\
    \ v[j])\n            {\n                flag = true;\n                break;\n\
    \            }\n        }\n        if (!flag)\n        {\n            for (int\
    \ j = 0; j < w.Length; j++)\n            {\n                if (t[i] == w[j])\n\
    \                {\n                    flag = true;\n                    break;\n\
    \                }\n            }\n            if (!flag)\n            {\n   \
    \             for (int j = 0; j < x.Length; j++)\n                {\n        \
    \            if (t[i] == x[j])\n                    {\n                      \
    \  flag = true;\n                        break;\n                    }\n     \
    \           }\n                if (!flag)\n                {\n               \
    \     for (int j = 0; j < z.Length; j++)\n                    {\n            \
    \            if (t[i] == z[j])\n                        {\n                  \
    \          flag = true;\n                            break;\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \        if (flag)\n        {\n            if (dict[(int)t[i]] == null)\n    \
    \            dict[(int)t[i]] = s.Substring(i);\n            else\n           \
    \     dict[(int)t[i]] += \", \" + s.Substring(i);\n        }\n    }\n    var list\
    \ = new string[(int)s.Length];\n    foreach (var i in dict)\n    {\n        if\
    \ (i.Value == \"\")\n            continue;\n        list.Add(i.Value);\n    }\n\
    \    list = list.OrderBy(p => p, new CaseInsensitiveComparer()).ToArray();\n \
    \   return list;\n}\n</code>\n<|/ a dscore=0 tags=string,c# |>\n<| a |>\nI took\
    \ some time to rework my code after looking at other answers here and got it to\
    \ work\n<code>\nstatic string[] SelectWords(string s, long n)\n    {\n       \
    \ var dict = new Dictionary<char, string>();\n        string p = \"aeiou\";\n\
    \        string v = \"AEIOU\";\n        string w = \"AEIOUaeiou\";\n        string\
    \ x = \"aeiouAEIOU\";\n        string z = \"aeiouAEIOUaeiou\";\n        bool flag\
    \ = true;\n        bool flag2 = true;\n        string newS = \"\";\n        bool\
    \ flag3 = true;\n        for (int i = 0; i < s.Length; i++)\n        {\n     \
    \       if (flag)\n            {\n                for (int j = 0; j < p.Length;\
    \ j++)\n                {\n                    if (s[i + j] != p[j])\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmy01157.d(79): Error: C style cast illegal, use `cast(int)t[i]`

    /tmp/tmpsmy01157.d(80): Error: C style cast illegal, use `cast(int)t[i]`

    /tmp/tmpsmy01157.d(82): Error: C style cast illegal, use `cast(int)t[i]`

    /tmp/tmpsmy01157.d(85): Error: C style cast illegal, use `cast(int)s.Length`

    /tmp/tmpsmy01157.d(86): Error: found `in` when expecting `;`

    /tmp/tmpsmy01157.d(95): Error: declaration expected, not `<`

    /tmp/tmpsmy01157.d(112): Error: declaration expected, not `for`

    /tmp/tmpsmy01157.d(112): Error: no identifier for declarator `i`

    /tmp/tmpsmy01157.d(112): Error: declaration expected, not `<`

    /tmp/tmpsmy01157.d(112): Error: no identifier for declarator `i`

    /tmp/tmpsmy01157.d(112): Error: declaration expected, not `++`

    /tmp/tmpsmy01157.d(116): Error: no identifier for declarator `j`

    /tmp/tmpsmy01157.d(116): Error: declaration expected, not `<`

    /tmp/tmpsmy01157.d(116): Error: no identifier for declarator `j`

    /tmp/tmpsmy01157.d(116): Error: declaration expected, not `++`

    /tmp/tmpsmy01157.d(123): Error: declaration expected, not `assert`

    /tmp/tmpsmy01157.d(124): Error: declaration expected, not `assert`

    /tmp/tmpsmy01157.d(125): Error: declaration expected, not `assert`

    /tmp/tmpsmy01157.d(126): Error: declaration expected, not `assert`

    /tmp/tmpsmy01157.d(127): Error: declaration expected, not `assert`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmy01157.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long len = s.length();\n    \n\
    \    int cons_count = count(s, 0);\n    \n    int n = len - cons_count;\n    \n\
    \    list<string> list = listOfSize(cons_count + n, 1);\n    \n    for(int i =\
    \ 0; i<n; ++i)\n    {\n        if(s.Substring(i+cons_count, cons_count) == Consonants)\n\
    \        {\n            list.add(s.Substring(i+cons_count, cons_count));\n   \
    \     }\n    }\n    \n    return list.toArray();\n}\n</code>\n<|/ a tags=string,python,algorithm,java,c++\
    \ |>\n<| a dscore=1 |>\nHere is a naive solution, for Java:\n<code>\nprivate static\
    \ final Set<Character> consonants = new HashSet<>();\nstatic {\n  consonants.add('a',\
    \ 'e', 'i', 'o', 'u');\n  consonants.add('b', 'd', 'g', 'p', 's');\n  consonants.add('c',\
    \ 'f', 'h', 'n', 'v');\n  consonants.add('d', 'j', 'q', 'r', 'z');\n}\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmnbgpbin.d(30): Error: found `>` when expecting `;` following statement

    /tmp/tmpmnbgpbin.d(42): Error: declaration expected, not `<`

    /tmp/tmpmnbgpbin.d(49): Error: unexpected `(` in declarator

    /tmp/tmpmnbgpbin.d(49): Error: basic type expected, not `97U`

    /tmp/tmpmnbgpbin.d(49): Error: found `97U` when expecting `)`

    /tmp/tmpmnbgpbin.d(49): Error: no identifier for declarator `consonants.add(_error_)`

    /tmp/tmpmnbgpbin.d(49): Error: semicolon expected following function declaration

    /tmp/tmpmnbgpbin.d(49): Error: declaration expected, not `,`

    /tmp/tmpmnbgpbin.d(50): Error: unexpected `(` in declarator

    /tmp/tmpmnbgpbin.d(50): Error: basic type expected, not `98U`

    /tmp/tmpmnbgpbin.d(50): Error: found `98U` when expecting `)`

    /tmp/tmpmnbgpbin.d(50): Error: no identifier for declarator `consonants.add(_error_)`

    /tmp/tmpmnbgpbin.d(50): Error: semicolon expected following function declaration

    /tmp/tmpmnbgpbin.d(50): Error: declaration expected, not `,`

    /tmp/tmpmnbgpbin.d(51): Error: unexpected `(` in declarator'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int count = 0;\n    int[] result\
    \ = new int[s.length()];\n    \n    // We keep track of consonants that have already\
    \ been used.\n    int[] consonants = new int[26];\n    \n    for (int i = 0; i\
    \ < s.length(); i++) \n    {\n        char c = s.charAt(i);\n        \n      \
    \  // Check if we have already encountered this consonant before\n        if (consonants[c\
    \ - 'a'] > 0) \n        {\n            continue;\n        }\n        \n      \
    \  if (c != ' ') \n        {\n            consonants[c - 'a']++;\n        }\n\
    \    }\n    \n    // If there are no more consonants left in the array, return\
    \ an empty array\n    if (n == 0) \n    {\n        return new string[0];\n   \
    \ }\n    \n    // If we have fewer consonants than the number, return an empty\
    \ array\n    if (s.length() < n) \n    {\n        return new string[0];\n    }\n\
    \    \n    // If the string isn't empty then we can count the number of consonants\n\
    \    // and use that value to determine how many words to return.\n    if (s.length()\
    \ > 0) \n    {\n        // Keep track of how many consonants have been used so\
    \ far\n        for (int i = 0; i < 26; i++) \n        {\n            consonants[i]\
    \ = 0;\n        }\n        \n        // The current consonant that we're looking\
    \ for\n        int current = 0;\n        \n        // The last character in the\
    \ string\n        char last = '\\0';\n        \n        // The current index of\
    \ the word being returned\n        int index = 0;\n        \n        // Loop through\
    \ each character in the string and check \n        // to see if it's the current\
    \ consonant (a letter or space)\n        for (int i = 0; i < s.length(); i++)\
    \ \n        {\n            char c = s.charAt(i);\n            \n            //\
    \ If we've reached the end of the string and we're looking for\n            //\
    \ n consonants then return an empty array\n            if (i == s.length() - 1\
    \ && n != 0) \n            {\n                return new string[0];\n        \
    \    }\n            \n            // If we've reached the end of the string and\
    \ we're looking for\n            // less consonants then return an empty array\n\
    \            if (i == s.length() - 1 && n > 0) \n            {\n             \
    \   return new string[0];\n            }\n            \n            // If we have\
    \ gone through the entire string without finding the \n            // current\
    \ consonant, return an empty array\n            if (i == s.length()) \n      \
    \      {\n                return new string[0];\n            }\n            \n\
    \            // If the current character is not a space or consonant, keep going\n\
    \            if (c != ' ' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c\
    \ != 'u') \n            {\n                current++;\n                continue;\n\
    \            }\n            \n            // If the current character \nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpshlmtfb6.d(112): Error: found `unittest` instead of statement

    /tmp/tmpshlmtfb6.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpshlmtfb6.d(124): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshlmtfb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long count = 0;\n    std.typecons.Cons<string,long>\
    \ result = std.collection.array;\n    for(long i = s.length(); i >= 0; i-=2)\n\
    \    {\n        if(s.charAt(i) != s.charAt(i+1) && std.typecons.isCons(s.charAt(i)))\n\
    \        {\n            result.push_back(s.substring(i,i+2));\n            count++;\n\
    \        }\n    }\n    if(count == 0) return std.collection.array;\n    else if(count\
    \ < n) return result.take(n);\n    else return result.takeWhile((x,i)->x==std.collection.array[n-1]);\n\
    }\n/*\nGiven a string s representing a phrase, select all words from this phrase\
    \ that\n    appear at least n times. Ignore all empty strings.\n    \n    Note:\
    \ You may assume the input string contains only letters and spaces.\n    Examples:\n\
    \    >>> select_words_at_least(\"Mary had a little lamb\", 4L)\n    [\"little\"\
    ]\n    >>> select_words_at_least(\"Mary had a little lamb\", 3L)\n    [\"Mary\"\
    , \"lamb\"]\n    >>> select_words_at_least(\"simple white space\", 2L)\n    []\n\
    \    >>> select_words_at_least(\"Hello world\", 4L)\n    [\"world\"]\n    \n*/\n\
    string[] select_words_at_least(string s, long n) \n{\n    long count = 0;\n  \
    \  std.typecons.Cons<string,long> result = std.collection.array;\n    for(long\
    \ i = s.length(); i >= 0; i-=2)\n    {\n        if(s.charAt(i) != s.charAt(i+1)\
    \ && std.typecons.isCons(s.charAt(i)))\n        {\n            result.push_back(s.substring(i,i+2));\n\
    \            count++;\n        }\n    }\n    if(count == 0) return std.collection.array;\n\
    \    else if(count < n) return result.take(n);\n    else return result.takeWhile((x,i)->x==std.collection.array[n-1]).take(n);\n\
    }\n/*\nWrite a predicate function called isPalindrome that takes one argument\
    \ (the\n    argument should be of type string), and that returns True if the argument\n\
    \    is a palindrome, and False otherwise.\n    \n    Examples:\n    >>> isPalindrome(\"\
    racecar\")\n    True\n    >>> isPalindrome(\"anna\")\n    False\n    >>> isPalindrome(\"\
    hello\")\n    False\n*/\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if ( s == null || n == 0) \n\
    \    { \n        return null; \n    } \n    else \n    {\n        long x = 0;\n\
    \        Stack<long> stack = new Stack<long>();\n        for ( int i = 0; i <\
    \ s.length(); i++ ) \n        {\n            long temp = 0;\n            if (\
    \ s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' )\n\
    \            {\n                stack.push(temp);\n                temp += (long)'a';\n\
    \            }\n            else if ( s[i] == 'c' || s[i] == 'n' || s[i] == 't'\
    \ || s[i] == 'v' )\n            {\n                stack.push(temp);\n       \
    \         temp += (long)'c';\n            }\n            else if ( s[i] == 'd'\
    \ || s[i] == 'o' || s[i] == 'p' || s[i] == 'u' )\n            {\n            \
    \    stack.push(temp);\n                temp += (long)'d';\n            }\n  \
    \          else if ( s[i] == 'f' || s[i] == 'l' || s[i] == 's' || s[i] == 'e'\
    \ )\n            {\n                stack.push(temp);\n                temp +=\
    \ (long)'f';\n            }\n            else if ( s[i] == 'g' || s[i] == 'l'\
    \ || s[i] == 's' || s[i] == 'h' )\n            {\n                stack.push(temp);\n\
    \                temp += (long)'g';\n            }\n            else if ( s[i]\
    \ == 'j' || s[i] == 'm' || s[i] == 'p' || s[i] == 'a' )\n            {\n     \
    \           stack.push(temp);\n                temp += (long)'j';\n          \
    \  }\n            else if ( s[i] == 'k' || s[i] == 'n' || s[i] == 's' || s[i]\
    \ == 'p' )\n            {\n                stack.push(temp);\n               \
    \ temp += (long)'k';\n            }\n            else if ( s[i] == 'l' || s[i]\
    \ == 'o' || s[i] == 'd' || s[i] == 'r' )\n            {\n                stack.push(temp);\n\
    \                temp += (long)'l';\n            }\n            else if ( s[i]\
    \ == 'm' || s[i] == 'a' || s[i] == 'r' || s[i] == 'u' )\n            {\n     \
    \           stack.push(temp);\n                temp += (long)'m';\n          \
    \  }\n            else if ( s[i] == 'n' || s[i] == 'u' || s[i] == 'c' || s[i]\
    \ == 't' )\n            {\n                stack.push(temp);\n               \
    \ temp += (long)'n';\n            }\n            else if ( s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'c' || s[i] == 't' )\n            {\n                stack.push(temp);\n\
    \                temp += (long)'o';\n            }\n            else if ( s[i]\
    \ == 'p' || s[i] == 'u' || s[i] == 'c' || s[i] == 't' )\n            {\n     \
    \           stack.push(\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kosh98l.d(31): Error: found `>` when expecting `.` following long

    /tmp/tmp2kosh98l.d(31): Error: found `>` when expecting `.` following long

    /tmp/tmp2kosh98l.d(31): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp2kosh98l.d(31): Error: found `)` when expecting `;` following statement

    /tmp/tmp2kosh98l.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp2kosh98l.d(38): Error: C style cast illegal, use `cast(long)''a''`

    /tmp/tmp2kosh98l.d(43): Error: C style cast illegal, use `cast(long)''c''`

    /tmp/tmp2kosh98l.d(48): Error: C style cast illegal, use `cast(long)''d''`

    /tmp/tmp2kosh98l.d(53): Error: C style cast illegal, use `cast(long)''f''`

    /tmp/tmp2kosh98l.d(58): Error: C style cast illegal, use `cast(long)''g''`

    /tmp/tmp2kosh98l.d(63): Error: C style cast illegal, use `cast(long)''j''`

    /tmp/tmp2kosh98l.d(68): Error: C style cast illegal, use `cast(long)''k''`

    /tmp/tmp2kosh98l.d(73): Error: C style cast illegal, use `cast(long)''l''`

    /tmp/tmp2kosh98l.d(78): Error: C style cast il'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr;\n    if(s.length()==0)\n\
    \        return arr;\n    arr = new string[s.length()/2+2];\n    int i,j,k;\n\
    \    for(i=0;i<arr.length;i++){\n        if(s.substring(i,i+1).Contains(\"k\"\
    )){\n            arr[i] = s.substring(i,i+1);\n            j=i+2;\n          \
    \  while((k=(s.indexOf(\" \",j))+1))<s.length()){\n                arr[i] += s.substring(j,k);\n\
    \                j=k+1;\n                arr[i] += \" \";\n            }\n   \
    \         arr[i] = arr[i].Substring(0,arr[i].Length-1);\n            arr[i+1]\
    \ = arr[i].Substring(arr[i].Length-1,arr[i].Length);\n            for(j=i+2;j<arr.length;j++)\n\
    \                arr[j] = \"k\" + arr[j];\n            arr.RemoveAt(i);\n    \
    \    }\n    }\n    arr.removeAt(arr.Length-1);\n    return arr;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI do not think this is a correct solution. Your code will return\
    \ `[\"Mary\", \"lamb\"]` for `\"Mary had a little lamb\"` because `k` will equal\
    \ `6` and `s.indexOf(\" \", k)` will return `7`. Your code is also missing a test\
    \ for `n == 0` and for words that do not contain at least `n` consonants. Try\
    \ `select_words(\"Mary had a little lamb\", 2L)`.\n<|/ c |>\n<| c |>\nThis is\
    \ **not** a correct solution. It has a number of issues. Firstly, it does not\
    \ account for consonants other than the k's. It also does not return any words\
    \ that don't contain the given number of consonants. It also doesn't return any\
    \ words that contain fewer than `n` consonants. It also does it wrong for strings\
    \ with spaces in them, or words with more than one space. It also does it wrong\
    \ for strings with multiple words separated by spaces. It also does it wrong for\
    \ strings with characters with ASCII code in the range [32, 126]. It also does\
    \ it wrong for strings with characters with ASCII code in the range [137, 159].\
    \ Finally, it does it wrong for strings with characters with ASCII code in the\
    \ range [22, 127]. There are so many issues, and I'm sure I'm missing some that\
    \ are real bugs. I'm sure this is a homework assignment...\n<|/ c |>\n<| c |>\n\
    Oops, my bad, I misread the problem description. Sorry for the confusion. :)\n\
    <|/ c |>\n<| c |>\nPlease read the question again. I am not trying to find number\
    \ of consonants. I am trying to find words that are \nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3qf0itby.d(33): Error: found `<` instead of statement

    /tmp/tmp3qf0itby.d(45): Error: unexpected `(` in declarator

    /tmp/tmp3qf0itby.d(45): Error: found `-` when expecting `)`

    /tmp/tmp3qf0itby.d(45): Error: no identifier for declarator `arr.removeAt(arr.Length)`

    /tmp/tmp3qf0itby.d(45): Error: semicolon expected following function declaration

    /tmp/tmp3qf0itby.d(45): Error: declaration expected, not `1`

    /tmp/tmp3qf0itby.d(46): Error: declaration expected, not `return`

    /tmp/tmp3qf0itby.d(47): Error: unrecognized declaration

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    /tmp/tmp3qf0itby.d(54): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3qf0itby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    List<int> res = new List<int>();\n\
    \    if (s == null || s.length == 0) return res;\n    \n    for(int i = 0; i <\
    \ n; i++){\n        if (s.Contains(consonants[i])){\n            res.Add(i);\n\
    \        }\n    }\n    return res.ToArray();\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n    public static void main(String[] args) {\n    //\
    \ TODO Auto-generated method stub\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgyeh1h8v.d(24): Error: found `>` when expecting `.` following int

    /tmp/tmpgyeh1h8v.d(24): Error: found `>` when expecting `.` following int

    /tmp/tmpgyeh1h8v.d(24): Error: found `(` when expecting identifier following `int`.

    /tmp/tmpgyeh1h8v.d(24): Error: found `)` when expecting `;` following statement

    /tmp/tmpgyeh1h8v.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpgyeh1h8v.d(34): Error: declaration expected, not `<`

    /tmp/tmpgyeh1h8v.d(44): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(45): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(46): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(47): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(48): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(49): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(50): Error: declaration expected, not `assert`

    /tmp/tmpgyeh1h8v.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgye'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    std.string[] res = new string[10];\n\
    \    for(long i = 0; i < s.length(); i++)\n    {\n        long start = 0;\n  \
    \      bool isConsonant = true;\n        for(long j = 1; j < s.length(); j++)\n\
    \        {\n            if(s[j] != ' ')\n                isConsonant = false;\n\
    \            if(isConsonant == true)\n            {\n                if(s[j] !=\
    \ s[j-1])\n                {\n                    if(isConsonant(s, i, j) == true)\n\
    \                    {\n                        if(start + j > n)\n          \
    \                  res[(int)i%10] = s.Substring(start, j);\n                 \
    \       else\n                            res[(int)i%10] = s.Substring(start,\
    \ j+1);\n                        start = j;\n                    }\n         \
    \       }\n            }\n        }\n        if(start < s.length())\n        \
    \    res[(int)i%10] = s.Substring(start);\n    }\n    return res;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nCan you explain the `if(isConsonant(s, i, j) == true)` part\
    \ a little more? What is happening there? What does it return? And how does it\
    \ compare with `true`?\n<|/ c |>\n<| c |>\nthe function is recursive and has three\
    \ arguments where the first is the current word being processed and the other\
    \ two are the indexes of the current consonant in the string and the index of\
    \ the next consonant in the string. The return value returns true if the current\
    \ word contains exactly the amount of consonants specified in the arguments otherwise\
    \ it returns false\n<|/ c |>\n<| a tags=string,c# dscore=0 |>\nHere's my solution:\n\
    <code>\n    public static string[] consonantsList(string input, int count)\n \
    \   {\n        string[] consonants = new string[100];\n        for (int i = 0;\
    \ i < input.Length; i++)\n        {\n            if (input[i] != ' ')\n      \
    \      {\n                for (int j = 0; j < count; j++)\n                {\n\
    \                    consonants[(i + j) % consonants.Length] = input[i];\n   \
    \             }\n            }\n        }\n        return consonants;\n    }\n\
    </code>\nIt should do the trick for you.\n<|/ a |>\n<| c |>\nThis code does work\
    \ but it only solves the problem if the input is \"a b c d e f g\" and there are\
    \ 4 consonants. But it only works if the input consists of letters.\n<|/ c |>\n\
    <| a tags=string,c# |>\n<code>\nvar inputString = \"Mary had a little lamb\";\n\
    var consonants = inputString.Replace(\" \", \"\").ToCharArray().Where(char.IsConsonant);\n\
    \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp79iubrac.d(40): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp79iubrac.d(42): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp79iubrac.d(49): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmp79iubrac.d(53): Error: declaration expected, not `<`

    /tmp/tmp79iubrac.d(62): Error: unterminated character constant

    /tmp/tmp79iubrac.d(67): Error: declaration expected, not `for`

    /tmp/tmp79iubrac.d(67): Error: no identifier for declarator `i`

    /tmp/tmp79iubrac.d(67): Error: declaration expected, not `<`

    /tmp/tmp79iubrac.d(67): Error: no identifier for declarator `i`

    /tmp/tmp79iubrac.d(67): Error: declaration expected, not `++`

    /tmp/tmp79iubrac.d(71): Error: no identifier for declarator `j`

    /tmp/tmp79iubrac.d(71): Error: declaration expected, not `<`

    /tmp/tmp79iubrac.d(71): Error: no identifier for declarator `j`

    /tmp/tmp79iubrac.d(71): Error: declaration expected, not `++`

    /tmp/tmp79iubrac.d(74): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp79iubrac.d", "-I/t'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr = new string[100];\n\
    \    \n    int cnt = 0;\n    bool flag = false;\n    bool flag2 = false;\n   \
    \ bool flag3 = false;\n    bool flag4 = false;\n    bool flag5 = false;\n    bool\
    \ flag6 = false;\n    bool flag7 = false;\n    \n    int i = 0;\n    \n    while(cnt\
    \ <= 100)\n    {\n        if(arr[i] == null)\n        {\n            cnt++;\n\
    \            arr[i] = s;\n        }\n    }\n    \n    long pos = 0;\n    long\
    \ num = 0;\n    \n    for(int a = 0; a <= arr.Length-1; a++)\n    {\n        if(arr[pos]\
    \ == \"M\" && arr[pos+1] == \"a\" && arr[pos+2] == \"t\" && arr[pos+3] == \"e\"\
    \ && arr[pos+4] == \"s\")\n        {\n            num++;\n            if(num ==\
    \ n)\n            {\n                flag = true;\n            }\n           \
    \ pos += 5;\n        }\n        else if(arr[pos] == \"b\" && arr[pos+1] == \"\
    l\" && arr[pos+2] == \"a\" && arr[pos+3] == \"m\" && arr[pos+4] == \"y\")\n  \
    \      {\n            num++;\n            if(num == n)\n            {\n      \
    \          flag = true;\n            }\n            pos += 6;\n        }\n   \
    \     else if(arr[pos] == \"d\" && arr[pos+1] == \"h\" && arr[pos+2] == \"l\"\
    \ && arr[pos+3] == \"e\" && arr[pos+4] == \"m\")\n        {\n            num++;\n\
    \            if(num == n)\n            {\n                flag = true;\n     \
    \       }\n            pos += 6;\n        }\n        else if(arr[pos] == \"c\"\
    \ && arr[pos+1] == \"l\" && arr[pos+2] == \"a\" && arr[pos+3] == \"l\" && arr[pos+4]\
    \ == \"a\")\n        {\n            num++;\n            if(num == n)\n       \
    \     {\n                flag = true;\n            }\n            pos += 6;\n\
    \        }\n        else if(arr[pos] == \"f\" && arr[pos+1] == \"o\" && arr[pos+2]\
    \ == \"r\" && arr[pos+3] == \"o\" && arr[pos+4] == \"s\")\n        {\n       \
    \     num++;\n            if(num == n)\n            {\n                flag =\
    \ true;\n            }\n            pos += 5;\n        }\n        else if(arr[pos]\
    \ == \"g\" && arr[pos+1] == \"o\" && arr[pos+2] == \"h\" && arr[pos+3] == \"l\"\
    \ && arr[pos+4] == \"l\")\n        {\n            num++;\n            if(num ==\
    \ n)\n            {\n                flag = true;\n            }\n           \
    \ pos += 5;\n        }\n        else if(arr[pos] == \"u\" && arr[pos+1] == \"\
    c\" && arr[pos+2] == \"s\" && arr[pos+3] == \"\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp138r_sw.d(110): Error: found `Mary` when expecting `)`

    /tmp/tmpp138r_sw.d(110): Error: found `a` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(110): Error: found `lamb` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(110): Error: found `little` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(111): Error: found `Mary` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(111): Error: found `a` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(111): Error: found `lamb` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(111): Error: found `Mary` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(111): Error: found `lamb` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(112): Error: found `simple` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(112): Error: found `space` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(113): Error: found `Hello` when expecting `;` following statement

    /tmp/tmpp138r_sw.d(113): Error: foun'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    if (s.empty()) {\n    \
    \    return std.array<string>();\n    }\n    \n    std.array<string> arr;\n  \
    \  std.array<char> chars;\n    string word = \"\";\n    string letter = \"\";\n\
    \    int count = 0;\n    \n    chars.push_back(' ');\n    \n    while (count <\
    \ s.length()) {\n        letter = s.substr(count, 1);\n        char = std.tolower(letter);\n\
    \        if (chars.contains(char)) {\n            word += letter;\n          \
    \  chars.push_back(char);\n            count += 1;\n        } else {\n       \
    \     arr.append(word);\n            count = 0;\n            word = \"\";\n  \
    \          chars.push_back(char);\n        }\n        \n    }\n    \n    if (word\
    \ != \"\") {\n        arr.append(word);\n    }\n    \n    arr = arr.sort();\n\
    \    \n    if (n > 0) {\n        return arr[0 .. n - 1];\n    } else {\n     \
    \   return arr;\n    }\n}\n</cell>\n<cell>\n%quickref\n</cell>\n<text>\nExercise\
    \ 7 - Counting characters\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplioghjgv.d(26): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmplioghjgv.d(26): Error: expression expected, not `)`

    /tmp/tmplioghjgv.d(26): Error: found `;` when expecting `)`

    /tmp/tmplioghjgv.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmplioghjgv.d(29): Error: found `>` when expecting `;` following statement

    /tmp/tmplioghjgv.d(30): Error: found `>` when expecting `.` following char

    /tmp/tmplioghjgv.d(39): Error: no identifier for declarator `char`

    /tmp/tmplioghjgv.d(39): Error: found `=` instead of statement

    /tmp/tmplioghjgv.d(40): Error: found `)` when expecting `.` following char

    /tmp/tmplioghjgv.d(40): Error: found `)` when expecting identifier following `char`.

    /tmp/tmplioghjgv.d(40): Error: found `{` when expecting `,`

    /tmp/tmplioghjgv.d(41): Error: found `;` when expecting `,`

    /tmp/tmplioghjgv.d(42): Error: found `)` when expecting `.` following char

    /tmp/tmplioghjgv.d(42): Error: found `;` when expecting identifier following `char`.

    /tmp/tmplio'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.length() < 1) return new\
    \ string[]{};\n    if (s.isEmpty()) return new string[]{};\n    std.typecons.CharEnumerator\
    \ ce = std.typecons.charEnumerator(s);\n    string[] result = new string[n];\n\
    \    string temp = \"\";\n    long index = 0;\n    while (ce.hasMoreElements())\n\
    \    {\n        temp += ce.getNext();\n        if (temp.contains(n))\n       \
    \     result[index++] = temp;\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,algorithm,java\
    \ |>\n<| c |>\nI think he meant \"words\" instead of \"word\" in the second example\
    \ you give in the question.\n<|/ c |>\n<| c |>\nI see, you are right. Let me fix\
    \ that right now. I got mixed up with 'word' and 'words'.\n<|/ c |>\n<| c |>\n\
    I ran the code, it returned an empty array when I ran it on the example I provided\
    \ in the question. I'm guessing the last case where the input is \"Uncle sam\"\
    \ is not being picked up by the code.\n<|/ c |>\n<| c |>\nYeah, I forgot about\
    \ the case when `n` is larger than the length of the string. I updated my answer\
    \ with a function that fixes that case.\n<|/ c |>\n<| c |>\nThanks for fixing\
    \ that! The code now works! I'm just confused how you got your test cases working.\
    \ I thought you had to input the string \"Mary had a little lamb\" into the function\
    \ as opposed to input the variable name \"s\" or \"n\" into the function. I just\
    \ can't figure out how you got those test cases working. Thank you so much for\
    \ the help :)\n<|/ c |>\n<| a dscore=0 |>\nI haven't looked at your code in awhile,\
    \ but here's a potential solution:\n<code>\nimport java.util.*;\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdhn7bzn.d(24): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmptdhn7bzn.d(25): Error: declaration expected, not `if`

    /tmp/tmptdhn7bzn.d(30): Error: declaration expected, not `while`

    /tmp/tmptdhn7bzn.d(33): Error: declaration expected, not `if`

    /tmp/tmptdhn7bzn.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdhn7bzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp0cmili9k.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e15]

    ??:? void tmp0cmili9k.__unittest_L26_C1() [0x427c0a]

    ??:? void tmp0cmili9k.__modtest() [0x42807c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d6ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428b6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a59d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a62c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428b45]

    ??:? runModuleUnitTests [0x42d4c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429264]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // FILL IN HERE\n    \n}\n/*\n\
    \    Given a non-empty array of integers, a target value, and a comparison function\
    \ cmp, \n    design an algorithm to find the k element in the array such that\
    \ the \n    cmp(arr[k], target) returns smallest number.\n    You may assume that\
    \ the arr contains distinct elements.\n    \n    Examples:\n    >>> arr = [-1,0,1,2,-2,3]\n\
    \    >>> find_kth_largest(arr, 1, cmp)\n    3\n    >>> arr = [5,2,4,1,6,3]\n \
    \   >>> find_kth_largest(arr, 1, cmp)\n    2\n*/\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxcjhrf3r.d(22): Error: function `tmpxcjhrf3r.select_words` has
    no `return` statement, but is expected to return a value of type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxcjhrf3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    //Your code here\n    vector<string>\
    \ retval;\n    int count = 0;\n    for (auto it = s.begin(); it != s.end(); it++)\
    \ {\n        if (isalpha(*it))\n        {\n            if (isupper(*it))\n   \
    \         {\n                if (count < n)\n                {\n             \
    \       retval.push_back(*it);\n                    count++;\n               \
    \ }\n            }\n            else\n            {\n                if (count\
    \ < n)\n                {\n                    retval.push_back(*it);\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return retval;\n}\nunittest\n{\n    alias candidate = select_words;\n\n \
    \   assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdli7yruu.d(25): Error: found `>` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdli7yruu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    // code goes here\n   \
    \ \n    return null;\n}\n</code>\nTest Case 1 :\n<code>\nTest Case 1 : select_words(\"\
    Mary had a little lamb\", 4L)\nOutput: [\"little\"]\n</code>\nTest Case 2 :\n\
    <code>\nTest Case 2 : select_words(\"Mary had a little lamb\", 3L)\nOutput: [\"\
    Mary\", \"lamb\"]\n</code>\nTest Case 3 :\n<code>\nTest Case 3 : select_words(\"\
    simple white space\", 2L)\nOutput: []\n</code>\nTest Case 4 :\n<code>\nTest Case\
    \ 4 : select_words(\"Hello world\", 4L)\nOutput: [\"world\"]\n</code>\nTest Case\
    \ 5 :\n<code>\nTest Case 5 : select_words(\"Uncle sam\", 3L)\nOutput: [\"Uncle\"\
    ]\n</code>\n<|/ a tags=c++,string |>\n<| c |>\nI believe that the OP wants an\
    \ algorithm to solve the problem and not to implement the function himself.\n\
    <|/ c |>\n<| a tags=c++,string |>\nHere is a python solution that uses regular\
    \ expressions. It is more elegant than the other answers posted so far.\n<code>\n\
    def select_words(s, n):\n    pattern = \"([^\" + re.escape(string.ascii_letters)\
    \ + \"]+)\"\n    return re.findall(pattern, s)[:n]\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=c++,string |>\nUsing two iterators, you can solve this problem in O(N)\
    \ time and O(1) space.\n<code>\n#include <iostream>\n#include <string>\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbqud0h6s.d(29): Error: declaration expected, not `<`

    /tmp/tmpbqud0h6s.d(76): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(77): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(78): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(79): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(80): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(81): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(82): Error: declaration expected, not `assert`

    /tmp/tmpbqud0h6s.d(83): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbqud0h6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    /*\n    Write your code here.\n\
    \    \n    Example:\n    Input:\n    s = \"Mary had a little lamb\"\n    n = 4\n\
    \    \n    Output:\n    [\"little\"]\n    \n    Explanation:\n    Mary had a little\
    \ lamb contains 4 consonants: L, i, l, h, a .\n    We choose the word \"little\"\
    \ because it's in the middle: we must select \n    \"little\" before \"lamb\"\
    .\n    \n    */\n    \n    vector<string> res;\n    if(s.empty())\n        return\
    \ res;\n    \n    string str = s[0];\n    int index = 1;\n    for(char c : str)\n\
    \    {\n        if(c==' ')\n        {\n            while(s[index] != ' ')\n  \
    \              index++;\n        }\n        if(c!=' ' && c!='.' && c!='!' && c!='?')\n\
    \        {\n            res.push_back(s);\n            string word = \"\";\n \
    \           while(index<=s.length() && c==s[index])\n            {\n         \
    \       word += s[index];\n                index++;\n            }\n         \
    \   res[res.size()-1] = word;\n            str = word;\n            \n       \
    \     index = 1;\n        }\n        index++;\n    }\n    \n    if(res.size()<=n)\n\
    \    {\n        for(int i=0;i<res.size();i++)\n        {\n            string word\
    \ = res[i];\n            while(word.length()>n)\n            {\n             \
    \   string word = word.substr(0, word.length()-1);\n            }\n          \
    \  res.push_back(word);\n        }\n    }\n    \n    return res;\n}\n</code>\n\
    <|/ a tags=algorithm,string,c++,sorting dscore=1 |>\n<| a |>\n<code>\n#include<bits/stdc++.h>\n\
    using namespace std;\nunittest\n{\n    alias candidate = select_words;\n\n   \
    \ assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnwuh5fng.d(42): Error: found `>` when expecting `;` following statement

    /tmp/tmpnwuh5fng.d(48): Error: semicolon expected, not `:`

    /tmp/tmpnwuh5fng.d(48): Error: expression expected, not `:`

    /tmp/tmpnwuh5fng.d(48): Error: found `str` when expecting `;` following `for`
    condition

    /tmp/tmpnwuh5fng.d(87): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnwuh5fng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string words[];\n    \n    if\
    \ ( s.isEmpty() )\n    {\n        return words;\n    }\n    \n    for (int i =\
    \ 0; i < s.length(); i++)\n    {\n        string subword = s.substring(i, i+1);\n\
    \        if (subword.length() == n) \n        {\n            words[words.length]\
    \ = subword;\n        }\n    }\n    \n    return words;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for the solution. I was struggling to understand this problem\
    \ from a different perspective.\n<|/ c |>\n<| a tags=string,c++ |>\nYou could\
    \ also do it like this, with some additional optimizations:\n<code>\n#include<iostream>\n\
    #include<algorithm>\n#include<vector>\n#include<string>\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpewdw_o8a.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] words`

    /tmp/tmpewdw_o8a.d(42): Error: declaration expected, not `<`

    /tmp/tmpewdw_o8a.d(58): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(59): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(60): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(61): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(62): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(63): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(64): Error: declaration expected, not `assert`

    /tmp/tmpewdw_o8a.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpewdw_o8a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code here\n    string\
    \ temp = \"\";\n    for(auto it = s.begin(); it != s.end(); ++it){\n        if(isConsonant(*it)){\n\
    \            temp += *it;\n        }\n        if(temp.length() == n){\n      \
    \      wordList.push_back(temp);\n        }\n        temp = \"\";\n    }\n   \
    \ \n    if(temp.length() > 0){\n        wordList.push_back(temp);\n    }\n   \
    \ \n    return wordList;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd54a4yph.d(26): Error: no property `begin` for type `string`

    /tmp/tmpd54a4yph.d(26): Error: no property `end` for type `string`

    /tmp/tmpd54a4yph.d(27): Error: undefined identifier `isConsonant`

    /tmp/tmpd54a4yph.d(30): Error: no property `length` for type `string`

    /tmp/tmpd54a4yph.d(31): Error: undefined identifier `wordList`

    /tmp/tmpd54a4yph.d(36): Error: no property `length` for type `string`

    /tmp/tmpd54a4yph.d(37): Error: undefined identifier `wordList`

    /tmp/tmpd54a4yph.d(40): Error: undefined identifier `wordList`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd54a4yph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[4];\n\
    \    if (s == \"\") return result;\n    int len = s.length();\n    if (len ==\
    \ 0) return result;\n    \n    int[] consonants = new int[26];\n    consonants[0]\
    \ = 0;\n    consonants[1] = 1;\n    consonants[2] = 2;\n    consonants[3] = 3;\n\
    \    consonants[4] = 4;\n    consonants[5] = 5;\n    consonants[6] = 6;\n    consonants[7]\
    \ = 7;\n    consonants[8] = 8;\n    consonants[9] = 9;\n    consonants[10] = 10;\n\
    \    consonants[11] = 11;\n    consonants[12] = 12;\n    consonants[13] = 13;\n\
    \    consonants[14] = 14;\n    consonants[15] = 15;\n    consonants[16] = 16;\n\
    \    consonants[17] = 17;\n    consonants[18] = 18;\n    consonants[19] = 19;\n\
    \    consonants[20] = 20;\n    consonants[21] = 21;\n    consonants[22] = 22;\n\
    \    consonants[23] = 23;\n    consonants[24] = 24;\n    consonants[25] = 25;\n\
    \    consonants[26] = 26;\n    \n    // The array that stores the result array\n\
    \    string current = \"\";\n    int num = 0;\n    \n    for (int i = 0; i < len;\
    \ i++) \n    {\n        if (s[i] == 'a') \n        {\n            current += \"\
    a\";\n            num = 1;\n        }\n        else if (s[i] == 'e') \n      \
    \  {\n            current += \"e\";\n            num = 1;\n        }\n       \
    \ else if (s[i] == 'i') \n        {\n            current += \"i\";\n         \
    \   num = 1;\n        }\n        else if (s[i] == 'o') \n        {\n         \
    \   current += \"o\";\n            num = 1;\n        }\n        else if (s[i]\
    \ == 'u') \n        {\n            current += \"u\";\n            num = 1;\n \
    \       }\n        else if (s[i] == 'A') \n        {\n            current += \"\
    A\";\n            num = 1;\n        }\n        else if (s[i] == 'E') \n      \
    \  {\n            current += \"E\";\n            num = 1;\n        }\n       \
    \ else if (s[i] == 'I') \n        {\n            current += \"I\";\n         \
    \   num = 1;\n        }\n        else if (s[i] == 'O') \n        {\n         \
    \   current += \"O\";\n            num = 1;\n        }\n        else if (s[i]\
    \ == 'U') \n        {\n            current += \"U\";\n            num = 1;\n \
    \       }\n        else if (s[i] == 'a') \n        {\n            current += \"\
    a\";\n            num = 1;\n        }\n        else if (s[i] == 'e') \n      \
    \  {\n            current += \"e\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2pz5v1l8.d(126): Error: found `Mary` when expecting `;` following
    statement

    /tmp/tmp2pz5v1l8.d(126): Error: found `a` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(126): Error: found `lamb` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(126): Error: found `little` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(127): Error: found `Mary` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(127): Error: found `a` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(127): Error: found `lamb` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(127): Error: found `Mary` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(127): Error: found `lamb` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(128): Error: found `simple` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(128): Error: found `space` when expecting `;` following statement

    /tmp/tmp2pz5v1l8.d(129): Error: found `Hello` when expecting `;` following statement

    /tmp/tmp2pz5v1l8'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string words = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++)\n    {\n        if(s.Contains(s.Substring(0, i)\
    \ + s.Substring(i + 1, s.length() - i)))\n        {\n            words += s.Substring(0,\
    \ i) + s.Substring(i + 1, s.length() - i);\n        }\n    }\n    return words.Split('\
    \ ');\n}\n</code>\n<|/ a tags=c#,linq,c#-4.0 |>\n<| a |>\nThis is how I solved\
    \ it:\n<code>\nvar result = new List<string>();\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptvjjbq6z.d(34): Error: declaration expected, not `<`

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string [] ans = std.arrayString();\n\
    \    if(s == \"\") \n        return ans;\n    char[] c = s.toCharArray();\n  \
    \  int i,j;\n    for (i=0, j=0; i<c.length; i++) \n    {\n        if (c[i] ==\
    \ 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u' || c[i] == 'y'\
    \ || c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] == 'u' ||\
    \ c[i] == 'y') \n        {\n            for (j=i; j<c.length; j++) \n        \
    \    {\n                if ((c[j] == 'a' || c[j] == 'e' || c[j] == 'i' || c[j]\
    \ == 'o' || c[j] == 'u' || c[j] == 'y' || c[j] == 'a' || c[j] == 'e' || c[j] ==\
    \ 'i' || c[j] == 'o' || c[j] == 'u' || c[j] == 'y') && (j != i)) \n          \
    \      {\n                    break;\n                }\n            }\n     \
    \       if (j == i) \n                ans.push(s.substr(i,1));\n        }\n  \
    \  }\n    return ans;\n}\n</code>\n<|/ a tags=string,c++,arrays |>\n<| c |>\n\
    I like your use of map<int,int> to simplify the algorithm.\n<|/ c |>\n<| c |>\n\
    The question asks for words that contain `exactly n` consonants. Your answer does\
    \ not take that into account. Also, your approach is too slow. You need to find\
    \ all words in your dictionary. Your solution does not take that into account.\
    \ Also, it has some flaws (like using `strchr` instead of `strch1`) and uses `strstr`\
    \ instead of `strch1`. Please see my answer for details.\n<|/ c |>\n<| c |>\n\
    : Yes, the answer isn't complete yet since I wasn't sure how to handle words that\
    \ contain the letter `e`, so I didn't address that. I also wanted to be more thorough\
    \ with the answer because I wasn't sure how long the input string is. Also, I\
    \ wanted to provide a solution that's easy to understand and easy to modify if\
    \ needed.\n<|/ c |>\n<| c |>\n: I made a revision to my answer that uses `strchr`.\
    \ I think it should work better now.\n<|/ c |>\n<| c |>\n: Oops, I didn't notice\
    \ that you also changed the `if (n > 1)` condition. I also fixed the bug that\
    \ I initially introduced into my solution. I was doing `strch1` instead of `strchr`\
    \ and I didn't re\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsq6wukjl.d(46): Error: declaration expected, not `<`

    /tmp/tmpsq6wukjl.d(55): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(55): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(55): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(55): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(55): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(61): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(61): Error: unterminated character constant

    /tmp/tmpsq6wukjl.d(66): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(67): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(68): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(69): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(70): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(71): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(72): Error: declaration expected, not `assert`

    /tmp/tmpsq6wukjl.d(73): Error: unrecognized declaration

    Fail'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  \n}\n/*\n    Given a string s and\
    \ a natural number n, you have been tasked to implement \n    a function that\
    \ returns true if a string is palindrome and false otherwise.\n    You will implement\
    \ the function using std.algorithm, std.string and std.limits.\n    Note: you\
    \ may assume the input string contains only letters and spaces.\n    Examples:\n\
    \    >>> is_palindrome(\"hello\")\n    True\n    >>> is_palindrome(\"helloolleh\"\
    )\n    True\n    >>> is_palindrome(\"hello\")\n    False\n    >>> is_palindrome(\"\
    Uncle sam\")\n    False\n*/\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpntlgzc0u.d(22): Error: function `tmpntlgzc0u.select_words` has
    no `return` statement, but is expected to return a value of type `string[]`

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] a;\n    long t=0;\n\
    \    for(int i=0;i<s.length;i++){\n        string tmp=s.substr(i,1);\n       \
    \ t+=tmp.length();\n        if(t>n){\n            if(tmp.equals(\"a\") || tmp.equals(\"\
    e\") || tmp.equals(\"i\") || tmp.equals(\"o\") || tmp.equals(\"u\"))\n       \
    \         a.add(tmp);\n        }\n    }\n    return a;\n}\n/*\n    Given a string\
    \ s, a number n and a character c, you should return \n    a string that contains\
    \ at most n copies of the character c.\n    If there are not enough copies left\
    \ in a string to satisfy the \n    requirement, return an empty string. \n   \
    \ Examples:\n    >>> select_character(\"Mary had a little lamb\", 2L, 'a')\n \
    \   \"Mary\"\n    >>> select_character(\"Mary had a little lamb\", 3L, 'a')\n\
    \    \"Mary had a little lamb\"\n    >>> select_character(\"Mary had a little\
    \ lamb\", 2L, 'x')\n    \"\"\n    >>> select_character(\"Mary had a little lamb\"\
    , 2L, 'z')\n    \"Mary had a little lamb\"\n    >>> select_character(\"Hello world\"\
    , 4L, 'x')\n    \"\"\n    \n*/\nstring select_character(string s, long n, char\
    \ c)\n{\n    long i=0;\n    long t=0;\n    while(i<t){\n        if(s.find(c) ==\
    \ -1){\n            t=i;\n        }\n        i+=1;\n    }\n    string a;\n   \
    \ if(i<t){\n        for(i=0;i<t;i++){\n            a=s+c;\n        }\n    }\n\
    \    else{\n        a=s;\n    }\n    return a;\n}\n/*\n    Given a string s, a\
    \ number n and a letter c, you should return \n    a string that contains at most\
    \ n copies of the letter c.\n    If there are not enough copies left in a string\
    \ to satisfy the \n    requirement, return an empty string. \n    Examples:\n\
    \    >>> select_letter(\"Mary had a little lamb\", 2L, 'a')\n    \"Mary\"\n  \
    \  >>> select_letter(\"Mary had a little lamb\", 3L, 'a')\n    \"Mary had a little\
    \ lamb\"\n    >>> select_letter(\"Mary had a little lamb\", 2L, 'x')\n    \"\"\
    \n    >>> select_letter(\"Mary had a little lamb\", 2L, 'z')\n    \"Mary had a\
    \ little lamb\"\n    >>> select_letter(\"Hello world\", 4L, 'x')\n    \"\"\n \
    \   \n*/\nstring select_letter(string s, long n, char c)\n{\n    string a;\n \
    \   if(n==0)\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7w26q2qz.d(97): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7w26q2qz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int i, j, count=0, count=0;\n\
    \    char[] chars = s.toCharArray();\n    string[] words = new string[chars.length];\n\
    \    for (i = 0; i < chars.length; i++) {\n        for (j = 0; j < chars.length;\
    \ j++) {\n            if (chars[i] == chars[j]) {\n                count++;\n\
    \                words[i] = words[i];\n            }\n            if (count >=\
    \ n) {\n                break;\n            }\n        }\n    }\n    return words;\n\
    }\n/*\nImplement an algorithm to generate all permutations of a list in O(n) time\
    \ \n(where n is the length of the list).\nExamples:\n>>> permutations(\"ab\",\
    \ 3L)\n[\"ab\", \"ba\", \"ab\", \"ba\"]\n>>> permutations(\"AB\", 3L)\n[\"AB\"\
    , \"BA\", \"AB\", \"BA\"]\n>>> permutations(\"ABC\", 2L)\n[\"ABC\", \"ACB\", \"\
    ACB\", \"ABC\"]\n*/\nstring[] permutations(string s, long n) \n{\n    \n}\n/*\n\
    Given an array of strings, return an array of strings each of the length\n   \
    \ specified by the given n. \n    \n    e.g.:\n    words_per_string(2, [\"hello\"\
    , \"world\"]) \n    returns [\"hell\", \"ello\", \"llo\", \"wo\", \"orld\"]\n\
    \    \n    words_per_string(1, [\"hello\", \"world\"]) \n    returns [\"hello\"\
    ]\n*/\nstring[] words_per_string(long n, string[] strings) \n{\n    int[] count\
    \ = new int[strings.length];\n    string[] result = new string[strings.length];\n\
    \    \n    for (int i = 0; i < strings.length; i++) {\n        count[i]=0;\n \
    \       result[i] = \"\";\n    }\n    \n    for (int i = 0; i < strings.length;\
    \ i++) {\n        count[strings[i].length()]++;\n    }\n    \n    for (int i =\
    \ 0; i < strings.length; i++) {\n        int temp = count[strings[i].length()];\n\
    \        for (int j = 0; j < temp; j++) {\n            result[i] += strings[i][j];\n\
    \        }\n    }\n    \n    return result;\n}\n/*\nGiven an array of strings,\
    \ return an array of strings each of the length\n    specified by the given n.\
    \ \n    \n    e.g.:\n    words_of_length(2, [\"hello\", \"world\"]) \n    returns\
    \ [\"hell\", \"ello\", \"llo\", \"wo\", \"orld\"]\n    \n    words_of_length(1,\
    \ [\"hello\", \"world\"]) \n    returns [\"hello\"]\n*/\nstring[] words_of_length(long\
    \ n, string[] strings) \n{\n    \n}\n/*\nGiven an array of ints, return an array\
    \ of ints each of the length\n    specified by the given n. \n    \n    e.g.:\n\
    \    numbers_in_array(3, [1, 2, 3]) \n    returns [1, 2, 3]\n    \n    numbers_in_array(1,\
    \ [1, 2, 3]\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ai29jo0.d(104): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ai29jo0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    /*\n    Note: the returned array\
    \ must be in order.\n    */\n    return select_words(s, n, \"count\");\n}\n/*\n\
    \    Given a string s and a natural number n, you have been tasked to implement\
    \ \n    a function that returns an array of all words from string s that contain\
    \ exactly \n    n consonants, in order these words appear in the string s.\n \
    \   If the string s is empty then the function should return an empty array.\n\
    \    Note: you may assume the input string contains only letters and spaces.\n\
    \    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4L)\n    [\"\
    little\"]\n    >>> select_words(\"Mary had a little lamb\", 3L)\n    [\"Mary\"\
    , \"lamb\"]\n    >>> select_words(\"simple white space\", 2L)\n    []\n    >>>\
    \ select_words(\"Hello world\", 4L)\n    [\"world\"]\n    >>> select_words(\"\
    Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\nstring[] select_words(string s, long\
    \ n, string order) \n{\n    int count = 0;\n    if(order == \"count\")\n    {\n\
    \        count = 0;\n        foreach(i, s)\n        {\n            if(isConsonant(i,\
    \ n) && count++ > 0)\n                pushBack(s, i);\n        }\n    }\n    else\n\
    \    {\n        foreach(i, s)\n        {\n            if(isConsonant(i, n) &&\
    \ i != \" \" && i != \".\" && i != \",\")\n                pushBack(s, i);\n \
    \       }\n    }\n    return s;\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdtrujguy.d(54): Error: no identifier for declarator `s`

    /tmp/tmpdtrujguy.d(54): Error: found `)` when expecting `;`

    /tmp/tmpdtrujguy.d(59): Error: found `}` when expecting `)`

    /tmp/tmpdtrujguy.d(60): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpdtrujguy.d(68): Error: declaration expected, not `return`

    /tmp/tmpdtrujguy.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdtrujguy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if (s.isEmpty() || n == 0)\n\
    \        return newArray<string>();\n    \n    List<string> result = new List<string>();\n\
    \    \n    for (string word : s.split(\" \"))\n    {\n        if (word.contains(char.ToLower(\"\
    a\") || char.ToLower(\"e\") || char.ToLower(\"i\") || char.ToLower(\"o\") || char.ToLower(\"\
    u\")) && word.contains(char.ToLower(\"b\") || char.ToLower(\"c\") || char.ToLower(\"\
    d\") || char.ToLower(\"f\") || char.ToLower(\"g\") || char.ToLower(\"h\") || char.ToLower(\"\
    j\") || char.ToLower(\"k\") || char.ToLower(\"l\") || char.ToLower(\"m\") || char.ToLower(\"\
    n\") || char.ToLower(\"p\") || char.ToLower(\"q\") || char.ToLower(\"r\") || char.ToLower(\"\
    s\") || char.ToLower(\"t\") || char.ToLower(\"v\") || char.ToLower(\"w\") || char.ToLower(\"\
    x\") || char.ToLower(\"y\") || char.ToLower(\"z\")))\n        {\n            result.Add(word);\n\
    \        }\n    }\n    \n    return newArray<string>(result);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\nThis solution does work but requires you to input the\
    \ string twice:\n<code>\npublic string[] getConsonants(string sentence)\n{\n \
    \   string[] consonants = new string[1];\n    string consonantsString = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    int count = 0;\n    int startIndex = sentence.IndexOfAny(consonantsString);\n\
    \    while (startIndex != -1)\n    {\n        startIndex++;\n        foreach (char\
    \ c in sentence[startIndex])\n        {\n            if (consonantsString.Contains(c.ToString()))\n\
    \            {\n                consonants[count] = sentence.Substring(startIndex,\
    \ startIndex + 1).Trim();\n                count++;\n                break;\n\
    \            }\n        }\n        startIndex = sentence.IndexOfAny(consonantsString,\
    \ startIndex);\n    }\n    return consonants;\n}\n</code>\n<|/ a tags=c#,string,algorithm\
    \ dscore=1 |>\n<| a |>\nIf you are not allowed to use LINQ, it can be done with\
    \ a foreach loop (which can easily be converted into a recursive solution with\
    \ similar logic). Something like this should do:\n<code>\npublic static List<\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw19w_mz.d(25): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmpjw19w_mz.d(25): Error: expression expected, not `)`

    /tmp/tmpjw19w_mz.d(25): Error: found `;` when expecting `)`

    /tmp/tmpjw19w_mz.d(27): Error: found `List` when expecting `;` following statement

    /tmp/tmpjw19w_mz.d(27): Error: found `<` instead of statement

    /tmp/tmpjw19w_mz.d(29): Error: found `word` when expecting `;` following statement

    /tmp/tmpjw19w_mz.d(29): Error: expression expected, not `:`

    /tmp/tmpjw19w_mz.d(29): Error: found `s` when expecting `;` following `for` condition

    /tmp/tmpjw19w_mz.d(37): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmpjw19w_mz.d(39): Error: declaration expected, not `<`

    /tmp/tmpjw19w_mz.d(50): Error: declaration expected, not `while`

    /tmp/tmpjw19w_mz.d(53): Error: declaration expected, not `foreach`

    /tmp/tmpjw19w_mz.d(58): Error: no identifier for declarator `count`

    /tmp/tmpjw19w_mz.d(58): Error: declaration expected, not `++`

    /tmp/tmpjw19w_mz.d(59): Error'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  string[] ret;\n  if (s.isEmpty())\
    \ return ret;\n  \n  string[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"\
    y\"};\n  \n  for (int i = 0; i < s.length(); i++)\n  {\n    if (!isUpper(s[i])\
    \ && !isLower(s[i]) && vowels.contains(s[i]))\n    {\n      string sub = s.substring(i,\
    \ i + n);\n      \n      if (sub.contains(\" \"))\n      {\n        ret.Add(sub);\n\
    \      }\n    }\n  }\n  \n  return ret;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,arrays,java\
    \ dscore=0 |>\n<code>\npublic static String[] getConsonants(String s) {\n    String[]\
    \ consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"};\n    String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n\
    \    String[] arr = new String[0];\n    for (int i = 0; i <= s.length() - 1; i++)\
    \ {\n        if (!vowels.contains(s.charAt(i))) {\n            for (int j = 0;\
    \ j < consonants.length; j++) {\n                if (s.substring(i, j + 1).contains(consonants[j]))\
    \ {\n                    arr = new String[arr.length + 1];\n                 \
    \   arr[arr.length - 1] = s.substring(i, j + 1);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return arr;\n}\n</code>\n\
    <|/ a |>\n<| a |>\nYou can do this without an array:\n<code>\npublic String getConsonants(String\
    \ s) {\n    String vowels = \"aeiouy\";\n    StringBuilder res = new StringBuilder();\n\
    \    for (char c : s.toCharArray()) {\n        if(vowels.indexOf(c) == -1) {\n\
    \            res.append(c);\n        }\n    }\n    return res.toString();\n}\n\
    </code>\n<|/ a tags=string,arrays,java dscore=0 |>\n<| c |>\nThis answer has already\
    \ been posted to this [link](https://stackoverflow.com/a/64901528/6134989). Instead\
    \ of adding an answer you should flag the question as a duplicate and provide\
    \ a link to an answer that has been already answered.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n\
    \    System.out.print(\"Enter a String: \");\n    String str = sc.nextLine();\n\
    \    int noOfConsonants = str.length();\n    int count = 0;\n    for(int i = 0;\
    \ i< str.length(); i++){\n        if(str.charAt(i) != 'a')\n            count++;\n\
    \    }\n    \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpot0wyfiv.d(44): Error: declaration expected, not `<`

    /tmp/tmpot0wyfiv.d(52): Error: declaration expected, not `for`

    /tmp/tmpot0wyfiv.d(52): Error: no identifier for declarator `i`

    /tmp/tmpot0wyfiv.d(52): Error: declaration expected, not `<=`

    /tmp/tmpot0wyfiv.d(52): Error: no identifier for declarator `i`

    /tmp/tmpot0wyfiv.d(52): Error: declaration expected, not `++`

    /tmp/tmpot0wyfiv.d(54): Error: no identifier for declarator `j`

    /tmp/tmpot0wyfiv.d(54): Error: declaration expected, not `<`

    /tmp/tmpot0wyfiv.d(54): Error: no identifier for declarator `j`

    /tmp/tmpot0wyfiv.d(54): Error: declaration expected, not `++`

    /tmp/tmpot0wyfiv.d(57): Error: no identifier for declarator `arr[arr.length -
    1]`

    /tmp/tmpot0wyfiv.d(57): Error: declaration expected, not `=`

    /tmp/tmpot0wyfiv.d(58): Error: declaration expected, not `break`

    /tmp/tmpot0wyfiv.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpot0wyfiv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // TODO: implement this function\n\
    }\n</code>\n<|/ q tags=java,arrays |>\n<| c |>\nHi, thank you for the response,\
    \ I did try this but for some reason it keeps returning the string \"null\" even\
    \ though it prints the correct output when I test it.\n<|/ c |>\n<| c |>\nIn your\
    \ last example, you're passing `s` as the parameter to `select_words`, but you're\
    \ calling `select_words` with that parameter equal to `null`. Are you sure you're\
    \ testing it correctly? Also, it would be helpful to see your test code (the `test_select_words`\
    \ function).\n<|/ c |>\n<| c |>\nYeah I'm sure, its my test class and it passes\
    \ the test for the first test but if I change the string \"Mary had a little lamb\"\
    \ to \"Hello world\" it should print out \"Hello world\" but it doesn't and I\
    \ don't understand why, I updated my post to include the test code\n<|/ c |>\n\
    <| c |>\nDid you change the parameter value to be `s` instead of `null`? If so,\
    \ that's why it returned null. You're just passing a value into the function that\
    \ doesn't match the function signature, which explains why it returns null.\n\
    <|/ c |>\n<| c |>\nOkay I fixed that but now I get this error \"Exception in thread\
    \ \"main\" java.lang.ArrayIndexOutOfBoundsException: 8\" when I run my test class\
    \ which is weird because when I test it with my main it works just fine but with\
    \ test class it doesn't, also I updated my main to show how I call the function\
    \ \"select_words\" from my test class\n<|/ c |>\n<| a |>\n<code>\npublic static\
    \ String select_words(String s, long n) {\n    String[] output = select_words(s,\
    \ 0);\n    StringBuilder outputStr = new StringBuilder();\n    for (int i = 0;\
    \ i < output.length; i++) {\n        outputStr.append(output[i]);\n        if\
    \ (i == output.length - 1) {\n            break;\n        }\n    }\n    return\
    \ outputStr.toString();\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk9lwyc32.d(26): Error: declaration expected, not `<`

    /tmp/tmpk9lwyc32.d(32): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(32): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(32): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(35): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(35): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(35): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(38): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(38): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(38): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(41): Error: unterminated character constant

    /tmp/tmpk9lwyc32.d(48): Error: declaration expected, not `for`

    /tmp/tmpk9lwyc32.d(48): Error: no identifier for declarator `i`

    /tmp/tmpk9lwyc32.d(48): Error: declaration expected, not `<`

    /tmp/tmpk9lwyc32.d(48): Error: no identifier for declarator `i`

    /tmp/tmpk9lwyc32.d(48): Error: declaration expected, not `++`

    /tmp/tmpk9lwyc32.d('
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string result = \"\";\n    long\
    \ count = 0;\n    foreach(const char a s, char[] a)\n    {\n        string w =\
    \ \"\";\n        if(!std.typecons.isLetter(a))\n        {\n            count +=\
    \ 1;\n            continue;\n        }\n        if(count > n)\n        {\n   \
    \         result += \"\\n\" + a;\n            count += 1;\n        }\n       \
    \ if(count == n)\n        {\n            result += a;\n        }\n    }\n    return\
    \ result.split(\"\\n\").slice(0,n);\n}\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_3vvpd6.d(26): Error: found `s` when expecting `;`

    /tmp/tmph_3vvpd6.d(26): Error: expression expected, not `,`

    /tmp/tmph_3vvpd6.d(26): Error: found `char` when expecting `)`

    /tmp/tmph_3vvpd6.d(26): Error: found `a` when expecting `;` following statement

    /tmp/tmph_3vvpd6.d(26): Error: found `)` instead of statement

    /tmp/tmph_3vvpd6.d(44): Error: declaration expected, not `return`

    /tmp/tmph_3vvpd6.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_3vvpd6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] a = new string[s.length()];\n\
    \    for(int i = 0; i < s.length(); i++)\n    {\n        if (s.Substring(0, i).Contains(\"\
    consonant\"))\n        {\n            if (s.Substring(0, i).Count(c => c == '\
    \ ') == n)\n            {\n                a[i] = s.Substring(0, i);\n       \
    \     }\n        }\n    }\n    return a;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\nFirst of all, here is a solution that uses regular expressions to match\
    \ only those words in the given string which consist of exactly three non-space\
    \ and non-letter characters:\n<code>\nstring input = \"Mary had a little lamb\"\
    ;\nRegex r = new Regex(\"(^\\\\S+\\\\S+\\\\S+)\");\nforeach (Match m in r.Matches(input))\n\
    \    Console.WriteLine(m.Groups[1]);\n</code>\nThe output is:\n<code>\nMary\n\
    lamb\n</code>\n<|/ a tags=string,c#,string dscore=0 |>\n<| c |>\nHi Mate, Thank\
    \ you for your suggestion. I tried the solution but I get the following error\
    \ `string does not contain a definition for 'Count' and no extension method 'Count'\
    \ accepting a first argument of type 'string' could be found (are you missing\
    \ a using directive or an assembly reference?) `\n<|/ c |>\n<| c |>\nThis doesn't\
    \ compile on my machine. `m.Groups[1].Count()` doesn't work. `m.Groups[1].Length`\
    \ does.\n<|/ c |>\n<| a tags=string,c#,string dscore=0 |>\n<code>\npublic static\
    \ IEnumerable<string> GetStrings(string str, int count)\n{\n    int count = 0;\n\
    \    int index = str.Length - 1;\n    while (index > 0)\n    {\n        if (str[index]\
    \ == ' ' && count >= count) return str.Substring(0, index).Split();\n        index--;\n\
    \        count++;\n    }\n    return Enumerable.Empty<string>();\n}\n</code>\n\
    <|/ a |>\n<| c |>\nPlease explain your code\n<|/ c |>\n<| a |>\n<code>\npublic\
    \ static string[] GetWords(string input, int count)\n{\n    string pattern = @\"\
    \\b[\\w'-]+\\b.*\\b\";\n    Regex regexObj = new Regex(pattern);\n    MatchCollection\
    \ matches = regexObj.Matches(input);\n    if (matches.Count > 0)\n    {\n    \
    \    StringBuilder wordBuilder = new StringBuilder();\n        foreach (Match\
    \ m in matches)\n        {\n            wordBuilder.Append(\" \");\n         \
    \   wordBuilder.Append(m.Value);\n        }\n        \nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp44v3s786.d(37): Error: declaration expected, not `<`

    /tmp/tmp44v3s786.d(44): Error: declaration expected, not `foreach`

    /tmp/tmp44v3s786.d(46): Error: declaration expected, not `<`

    /tmp/tmp44v3s786.d(57): Error: unterminated character constant

    /tmp/tmp44v3s786.d(57): Error: unterminated character constant

    /tmp/tmp44v3s786.d(65): Error: declaration expected, not `while`

    /tmp/tmp44v3s786.d(68): Error: no identifier for declarator `index`

    /tmp/tmp44v3s786.d(68): Error: declaration expected, not `--`

    /tmp/tmp44v3s786.d(69): Error: no identifier for declarator `count`

    /tmp/tmp44v3s786.d(69): Error: declaration expected, not `++`

    /tmp/tmp44v3s786.d(70): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44v3s786.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    if(n==0)\n        return empty_string();\n\
    \    \n    string tmp=s;\n    for(long i=0;i<s.length();i++)\n        if(tmp[i]=='\
    \ ') tmp=tmp.substr(0,i);\n        \n    string res=new string();\n    long count=0;\n\
    \    for(char c:tmp) \n        if(is_consonant(c)) count++;\n    \n    while(count>0)\
    \ \n    {\n        long sub=0;\n        string tmp1=new string(tmp);\n       \
    \ for(long i=0;i<s.length();i++) \n            if(tmp[i]==' ') tmp1=tmp1.substr(0,i);\n\
    \            \n        if(tmp1.length()>sub) \n        {\n            res=res\
    \ + \" \" + tmp1.substr(0,sub);\n            count=count-sub;\n        }\n   \
    \     else\n        {\n            res=res + \" \" + tmp1;\n            count=count-1;\n\
    \        }\n    }\n    \n    return res==\" \"?empty_string():res.split(\" \"\
    );\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI agree with you, but the question\
    \ was how to do it with recursion. With your solution you get `[\"Mary\", \"lamb\"\
    ]` but `[\"little\"]` should be also returned. Could you fix your solution?\n\
    <|/ c |>\n<| c |>\nOk I did some changes, could you check and let me know your\
    \ opinion?\n<|/ c |>\n<| c |>\nThe algorithm is still wrong. `select_words(\"\
    Mary had a little lamb\", 4L)` returns `[\"lamb\"]`. `select_words(\"Mary had\
    \ a little lamb\", 3L)` returns `[\"Mary\", \"lamb\"]` which is not what OP wants.\n\
    <|/ c |>\n<| a |>\nThis is a classic interview question that I have been asked\
    \ in my college.\n<code>\npublic static void main(String[] args) {\n    String[]\
    \ strings = getStrings(\"aa ab ac ad\");\n    String[] strings = getStrings(\"\
    ab ab ac\");\n    String[] strings = getStrings(\"bb bc bd be\");\n    String[]\
    \ strings = getStrings(\"bb bc bd bb bc bd bb bc\");\n    String[] strings = getStrings(\"\
    a a a a a a a\");\n    String[] strings = getStrings(\"aa ab ac ad ae af ag ah\
    \ ai aj ak al am an ao ap aq ar as\");\n    String[] strings = getStrings(\"ab\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbjgx1a7.d(33): Error: semicolon expected, not `:`

    /tmp/tmpkbjgx1a7.d(33): Error: expression expected, not `:`

    /tmp/tmpkbjgx1a7.d(33): Error: found `tmp` when expecting `;` following `for`
    condition

    /tmp/tmpkbjgx1a7.d(57): Error: declaration expected, not `<`

    /tmp/tmpkbjgx1a7.d(83): Error: found `Mary` when expecting `,`

    /tmp/tmpkbjgx1a7.d(83): Error: found `a` when expecting `,`

    /tmp/tmpkbjgx1a7.d(83): Error: found `lamb` when expecting `,`

    /tmp/tmpkbjgx1a7.d(83): Error: found `little` when expecting `,`

    /tmp/tmpkbjgx1a7.d(84): Error: found `Mary` when expecting `,`

    /tmp/tmpkbjgx1a7.d(84): Error: found `a` when expecting `,`

    /tmp/tmpkbjgx1a7.d(84): Error: found `lamb` when expecting `,`

    /tmp/tmpkbjgx1a7.d(84): Error: found `Mary` when expecting `,`

    /tmp/tmpkbjgx1a7.d(84): Error: found `lamb` when expecting `,`

    /tmp/tmpkbjgx1a7.d(85): Error: found `simple` when expecting `,`

    /tmp/tmpkbjgx1a7.d(85): Error: found `space` when expecting `,`

    /tmp/tmpkbjgx1a7.d(86): Error: found `Hello` when expecting `,`

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[(int)\
    \ Math.Ceiling(s.length/n)]; \n    for(int i = 0; i<result.length; i++)\n    {\n\
    \        int sum = 0;\n        for(int j=0; j<s.length(); j++)\n        {\n  \
    \          if (s[j] == ' ')\n                continue;\n            if(s[j] >=\
    \ 'A' && s[j] <= 'Z')\n                sum += (n - 1);\n        }\n        if(sum\
    \ == n)\n            result[i] = s;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a |>\n<| a |>\nThe below code will work:\n<code>\nfunction selectWords(s: string,\
    \ n: long): string[] {\n  if (s == null || s.isEmpty) {\n    return [];\n  }\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5o0g_c9n.d(24): Error: C style cast illegal, use `cast(int)Math.Ceiling(s.length
    / n)`

    /tmp/tmp5o0g_c9n.d(40): Error: declaration expected, not `<`

    /tmp/tmp5o0g_c9n.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5o0g_c9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n\t// Complete this function\n\t\n\
    \tstring result = \"\";\n\t\n\tfor (long i = 0; i < s.length(); ++i)\n\t{\n\t\t\
    string word = s.substr(i, s.size());\n\t\t\n\t\tif (word.length() < n) \n\t\t\t\
    continue;\n\t\t\n\t\tfor (long j = 0; j < word.length(); ++j)\n\t\t{\n\t\t\tchar\
    \ letter = word.at[j];\n\t\t\tif (std.typecons.char_is_vowel(letter))\n\t\t\t\
    {\n\t\t\t\tif (std.string.find(s, letter, j) == j)\n\t\t\t\t{\n\t\t\t\t\tresult\
    \ += word;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn std.string.split(result);\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg38o0ew_.d(28): Error: no property `length` for type `string`

    /tmp/tmpg38o0ew_.d(30): Error: no property `substr` for type `string`

    /tmp/tmpg38o0ew_.d(32): Error: no property `length` for type `string`

    /tmp/tmpg38o0ew_.d(35): Error: no property `length` for type `string`

    /tmp/tmpg38o0ew_.d(37): Error: no property `at` for type `string`

    /tmp/tmpg38o0ew_.d(38): Error: undefined identifier `char_is_vowel` in module
    `std.typecons`

    /tmp/tmpg38o0ew_.d(40): Error: undefined identifier `string` in package `std`

    /tmp/tmpg38o0ew_.d(42): Error: slice `result` is not mutable

    /tmp/tmpg38o0ew_.d(49): Error: undefined identifier `string` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg38o0ew_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] w = new string[100];\n\
    \    for(int i = 0; i < s.length(); i+=1) \n    {\n        if(s[i] == 'n' || s[i]\
    \ == 'N' || s[i] == 'p' || s[i] == 'P' || s[i] == 'u' || s[i] == 'U' || s[i] ==\
    \ 'y' || s[i] == 'Y') \n        {\n            w[i] = w[i-1];\n        }\n   \
    \     else\n        {\n            if(w[w[0].length-1] != \"\")\n            {\n\
    \                w[w[0].length-1] += s[i].toUpperCase();\n            }\n    \
    \        else\n            {\n                w[0] += s[i].toUpperCase();\n  \
    \          }\n        }\n    }\n    return w;\n}\n</code>\n<|/ a tags=java |>\n\
    <| c |>\nI cannot use ArrayList\n<|/ c |>\n<| c |>\nI'm very new to this forum,\
    \ so I apologize if I don't have much to say about this code. Also, I'm new to\
    \ Java, my professor is unaware of Stack Overflow and we're using it only for\
    \ assignments. Thanks for the help!\n<|/ c |>\n<| c |>\nno worries, I'm glad I\
    \ could help. I understand where you're coming from. Your professor might be unaware\
    \ but he's very aware of the Stack Overflow site and most coding problems get\
    \ answered by people willing to help. Best of luck!\n<|/ c |>\n<| c |>\nI understand\
    \ your logic, however, I'm having trouble implementing it. I understand the concept\
    \ of converting strings to arrays, but am having a hard time implementing the\
    \ part where you use the 'for' loop to see whether the 'i' index is equal to the\
    \ length\n<|/ c |>\n<| c |>\nthe for loop is comparing the index with the length.\
    \ You can do that with an if statement like I did in the code. Just change the\
    \ condition to `if (i != s.length())` instead of `if (i==s.length())`\n<|/ c |>\n\
    <| a |>\n<code>\npublic class StringWordCount {\n    public static void main(String[]\
    \ args) {\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph5rqf5xn.d(45): Error: declaration expected, not `<`

    /tmp/tmph5rqf5xn.d(51): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(51): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(51): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(51): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(54): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(54): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(54): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(57): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(57): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(57): Error: unterminated character constant

    /tmp/tmph5rqf5xn.d(70): Error: declaration expected, not `assert`

    /tmp/tmph5rqf5xn.d(71): Error: declaration expected, not `assert`

    /tmp/tmph5rqf5xn.d(72): Error: declaration expected, not `assert`

    /tmp/tmph5rqf5xn.d(73): Error: declaration expected, not `assert`

    /tmp/tmph5rqf5xn.d(74): Error: declaration expected, not `assert`

    /tm'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    long i;\n    string[] res=new\
    \ string[0];\n    if (s==null || s.length()==0)\n        return res; \n    i=0;\n\
    \    for(;i<s.length();i++)\n    {\n        if(s.substr(i, n)==string.Empty)\n\
    \            res=append(res, s.substr(0, i));\n    }\n    return res;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI really appreciate this answer, but I still cant\
    \ get it to work. I am working with your select_words function and I just cant\
    \ get it to work. It should return an array of words from string that have only\
    \ 1 occurrence of a consonant.\n<|/ c |>\n<| c |>\nHi, I have edited my answer.\
    \ You can refer to the new select_words() function.\n<|/ c |>\n<| c |>\nOkay I\
    \ just changed your code to mine and it doesn't work. I just don't understand\
    \ why since you are looping through a string and checking if the substring matches\
    \ the string Empty and adding it to a string[] but this doesn't seem to work.\
    \ I just want to know why or what I am doing wrong. Thanks\n<|/ c |>\n<| c |>\n\
    Okay, I will edit my answer and post the code here in a while.\n<|/ c |>\n<| a\
    \ |>\n<code>\nvar text = \"Mary had a little lamb\";\nvar count = text.Count(x\
    \ => x != ' ');\nvar words = new List<string>();\nvar temp = text.Split(new char[]\
    \ { ' ' });\nfor (int i = 0; i < temp.Length; i++)\n{\n    if (temp[i].Count(x\
    \ => x == 'a') > 1 || temp[i].Count(x => x == 'e') > 1 || temp[i].Count(x => x\
    \ == 'i') > 1 || temp[i].Count(x => x == 'o') > 1 || temp[i].Count(x => x == 'u')\
    \ > 1)\n    {\n        words.Add(temp[i]);\n    }\n}\nreturn words.ToArray();\n\
    </code>\n<|/ a tags=algorithm,arrays,c# dscore=1 |>\n<| c |>\nThis seems to work,\
    \ but I have no clue how it does. Could you possibly explain each line of the\
    \ code in the loop\n<|/ c |>\n<| c |>\nIt's just a linq expression, it does the\
    \ job of `if(x.Count(y => y=='a') > 1 || x.Count(y => y=='e') > 1 || x.Count(y\
    \ => y=='i') > 1 || x.Count(y => y=='o') > 1 || x.Count(y => y=='u') > 1)`\n<|/\
    \ c |>\n<| a tags=algorithm,array\nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafmvr_qq.d(36): Error: declaration expected, not `<`

    /tmp/tmpafmvr_qq.d(45): Error: unterminated character constant

    /tmp/tmpafmvr_qq.d(45): Error: unterminated character constant

    /tmp/tmpafmvr_qq.d(45): Error: unterminated character constant

    /tmp/tmpafmvr_qq.d(54): Error: semicolon expected, not `>`

    /tmp/tmpafmvr_qq.d(54): Error: declaration expected, not `>`

    /tmp/tmpafmvr_qq.d(55): Error: found `{` when expecting `,`

    /tmp/tmpafmvr_qq.d(55): Error: found `}` when expecting `,`

    /tmp/tmpafmvr_qq.d(56): Error: declaration expected, not `for`

    /tmp/tmpafmvr_qq.d(56): Error: no identifier for declarator `i`

    /tmp/tmpafmvr_qq.d(56): Error: declaration expected, not `<`

    /tmp/tmpafmvr_qq.d(56): Error: no identifier for declarator `i`

    /tmp/tmpafmvr_qq.d(56): Error: declaration expected, not `++`

    /tmp/tmpafmvr_qq.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafmvr_qq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] results = new string[(int)s.length()];\n\
    \    Stack<long> stack = new Stack<long>();\n    long[] counters = new long[26];\n\
    \    \n    for (int i = 0; i < s.length(); ++i)\n    {\n        char ch = s[i];\n\
    \        if (ch == ' ')\n        {\n            if (counters[(int) ch] <= n)\n\
    \            {\n                if (stack.Count == 0)\n                {\n   \
    \                 results[(int) i] = \"\";\n                }\n              \
    \  else\n                {\n                    results[(int) i] = stack.Peek().ToString();\n\
    \                    stack.Pop();\n                }\n            }\n        \
    \    else\n            {\n                counters[(int) ch] -= n;\n         \
    \   }\n        }\n        else\n        {\n            counters[(int) ch] += 1;\n\
    \            if (counters[(int) ch] > n)\n            {\n                stack.Push(counters[(int)\
    \ ch]);\n                counters[(int) ch] = 0;\n            }\n        }\n \
    \   }\n    \n    stack.Pop();\n    if (stack.Count > 0)\n    {\n        results[(int)\
    \ s.length()] = stack.ToString();\n    }\n    \n    return results;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you so much for helping! I have been stuck on this for\
    \ quite a while now. Would it be possible for you to write it in a simpler way?\n\
    <|/ c |>\n<| c |>\nYes, sure! I updated my answer with your implementation as\
    \ well, hope it helps.\n<|/ c |>\n<| c |>\nThat is awesome! Thank you so much\
    \ for the help. Now that I know how to find the consonants I can try to find a\
    \ way to use this to solve the puzzle!\n<|/ c |>\n<| c |>\nYes, glad it helped\
    \ :)\n<|/ c |>\n<| c |>\nHi again! Sorry for bothering you again, but my program\
    \ is throwing an IndexOutOfRangeException (System.IndexOutOfRangeException: 'Index\
    \ was outside the bounds of the array.') at the line where I try to pop my stack\
    \ and get the string from it. Any idea why?\n<|/ c |>\n<| a dscore=0 tags=c#,string,arrays\
    \ |>\nHere is a simple solution where you are able to pass in an array of strings\
    \ and return the array with strings that are the length you are looking for passed\
    \ in.\n<code>\nstatic string[] FilterStrings(string[] strings, int length)\n{\n\
    \    string[] result = new string[strings.Length];\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvo5gfjcx.d(24): Error: C style cast illegal, use `cast(int)s.length()`

    /tmp/tmpvo5gfjcx.d(25): Error: found `>` when expecting `.` following long

    /tmp/tmpvo5gfjcx.d(25): Error: found `>` when expecting `.` following long

    /tmp/tmpvo5gfjcx.d(25): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpvo5gfjcx.d(25): Error: found `)` when expecting `;` following statement

    /tmp/tmpvo5gfjcx.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpvo5gfjcx.d(33): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmpvo5gfjcx.d(37): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpvo5gfjcx.d(41): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpvo5gfjcx.d(47): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmpvo5gfjcx.d(52): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmpvo5gfjcx.d(53): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmpvo5gfjcx.d(55): Error: C style cast illegal, use `cast(int)ch`

    /tmp/tmpvo5gfjcx.d(56): Error: C style cast illegal, use'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // FILL IN YOUR CODE HERE\n \
    \   if(s.length()==0) return null;\n    std.typecons.list<string> l = new std.typecons.list<string>();\n\
    \    for(char c: s)\n    {\n        if(c.isLetter())\n        {\n            if(n>0)\
    \ l.addAll(std.typecons.list.of<string>());\n            else\n            {\n\
    \                if(l.size()==0) l.add(\"\"); \n                l.add(c.toString());\n\
    \            }\n        }\n    }\n    return l.toArray();\n}\n</code>\n<|/ a tags=string,algorithm,string\
    \ |>\n<| c |>\nNice job. Your solution is clear, concise and efficient.\n<|/ c\
    \ |>\n<| c |>\nGreat job but this solution does not work in all cases. For example,\
    \ `select_words(\"Mary had a little lamb\", 2L)` returns `[\"little\", \"lamb\"\
    ]`. But the input string does not contain words with 2 consonants.\n<|/ c |>\n\
    <| c |>\n- Please see my updated solution.  It is now complete in all cases.\n\
    <|/ c |>\n<| c |>\n- I believe you meant to write `2` and not `2L`\n<|/ c |>\n\
    <| c |>\nSorry. You're right. I've fixed it.\n<|/ c |>\n<| a dscore=3 |>\nSolution\
    \ using regular expressions:\n<code>\nimport java.util.regex.Matcher;\nimport\
    \ java.util.regex.Pattern;\npublic String[] findWordsExactlyNCharacters(String\
    \ input, int n) {\n    String[] words = new String[0];\n    if (n < 0) {\n   \
    \     return words;\n    }\n    Pattern pattern = Pattern.compile(\"\\\\w+\");\n\
    \    Matcher matcher = pattern.matcher(input);\n    if (matcher.matches()) {\n\
    \        int index = 0;\n        boolean first = true;\n        while (matcher.find()\
    \ && index < n) {\n            if (first) {\n                words[0] = matcher.group();\n\
    \                first = false;\n            } else {\n                words[words.length-1]\
    \ = matcher.group();\n            }\n            index++;\n        }\n    }\n\
    \    return words;\n}\n</code>\n<|/ a tags=string,algorithm,string |>\n<| c |>\n\
    Please see my updated solution.  It is now complete in all cases.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere is a solution that takes advantage of the fact that a regex\
    \ will match as many consecutive consonants as possible (and therefore will take\
    \ any string of consonants). The regex \nunittest\n{\n    alias candidate = select_words;\n\
    \n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n   \
    \ assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n\
    \    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqqy2utl3.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpqqy2utl3.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpqqy2utl3.d(26): Error: expression expected, not `)`

    /tmp/tmpqqy2utl3.d(26): Error: found `;` when expecting `)`

    /tmp/tmpqqy2utl3.d(27): Error: found `for` when expecting `;` following statement

    /tmp/tmpqqy2utl3.d(27): Error: found `:` when expecting `)`

    /tmp/tmpqqy2utl3.d(27): Error: missing `{ ... }` for function literal

    /tmp/tmpqqy2utl3.d(27): Error: found `s` when expecting `;` following statement

    /tmp/tmpqqy2utl3.d(27): Error: found `)` instead of statement

    /tmp/tmpqqy2utl3.d(32): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmpqqy2utl3.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqqy2utl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return s.isEmpty()? new string[]\
    \ {} : s.isLetter()? select_words(s, s.chars().filter(ch=>!ch.isSpace()).map(c=>c.toUpper()).join(\"\
    \"), n) : string[]{};\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't need to use a\
    \ ternary operator in these cases, since you don't have any code that would actually\
    \ use the `else` branch of an `if` statement, it's more efficient to use `if/else`\
    \ statements.\n<|/ c |>\n<| a tags=java,collections,string |>\n<code>\npublic\
    \ static String[] consonantsList(String s) {\n    List<String> list = new ArrayList<String>();\n\
    \    for(char c: s.toCharArray()){\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' || c ==\n            'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n            list.add(c);\n    }\n    return list.toArray(new\
    \ String[0]);\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nAnother way to do it using\
    \ a stream and a filter:\n<code>\npublic String[] consonantsList(String str){\n\
    \    return Arrays.stream(str.split(\"\")).filter(s -> s.matches(\"[aeiouAEIOU]\"\
    ))\n            .toArray(String[]::new);\n}\n</code>\n<|/ a tags=java,collections,string\
    \ dscore=1 |>\n<| c |>\nWhat is the benefit of doing this with a stream?\n<|/\
    \ c |>\n<| c |>\nTo me it's a clean and short solution, readable and understandable.\
    \ That's all I consider when I have to use streams. By the way it's better to\
    \ declare the type with Arrays.<String> stream() instead of Arrays.stream() (no\
    \ need for generic types)\n<|/ c |>\n<| a dscore=0 |>\n<code>\nprivate static\
    \ String[] consonantsList(String s) {\n        char[] array = s.toCharArray();\n\
    \        int index = 0;\n        List<String> list = new ArrayList<String>();\n\
    \        while(index < array.length) {\n            if (array[index] == 'a' ||\
    \ array[index] == 'e' || array[index] == 'i' || array[index] == 'o' || array[index]\
    \ == 'u') {\n                list.add(String.valueOf(array[index]));\n       \
    \         index++;\n                continue;\n            }\n            index++;\n\
    \        }\n        return list.toArray(new String[0]);\n    }\n</code>\n<|/ a\
    \ tags=java,collections,string |>\n<| c |>\nPlease don't post only code as an\
    \ answer, \nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobu8h7i7.d(24): Error: found `{` when expecting `:`

    /tmp/tmpobu8h7i7.d(24): Error: expression expected, not `}`

    /tmp/tmpobu8h7i7.d(24): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmpobu8h7i7.d(24): Error: found `{` when expecting `;` following statement

    /tmp/tmpobu8h7i7.d(25): Error: unrecognized declaration

    /tmp/tmpobu8h7i7.d(29): Error: unterminated character constant

    /tmp/tmpobu8h7i7.d(29): Error: unterminated character constant

    /tmp/tmpobu8h7i7.d(29): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobu8h7i7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[0];\n\
    \    int[] freq = new int[256];\n    for (int i = 0; i < s.length(); i++)\n  \
    \  {\n        if (freq[(int)s.charAt(i)] == 0)\n        {\n            freq[(int)s.charAt(i)]\
    \ = 1;\n            result[result.length] = s.substr(0, i);\n        }\n    }\n\
    \    \n    int k = 0;\n    for (int i = 0; i < freq.length; i++)\n    {\n    \
    \    if (freq[i] > k)\n        {\n            k = freq[i];\n        }\n    }\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| a tags=c#,algorithm\
    \ |>\nHere is my solution. It doesn't use LINQ, so I hope you find it easy to\
    \ understand.\n<code>\nprivate static bool ContainsLetters(string s, int n)\n\
    {\n    foreach (var letter in s)\n    {\n        if (n > 0 && char.IsLetter(letter))\n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0j80hfle.d(28): Error: C style cast illegal, use `cast(int)s.charAt(i)`

    /tmp/tmp0j80hfle.d(30): Error: C style cast illegal, use `cast(int)s.charAt(i)`

    /tmp/tmp0j80hfle.d(46): Error: declaration expected, not `<`

    /tmp/tmp0j80hfle.d(49): Error: unterminated character constant

    /tmp/tmp0j80hfle.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j80hfle.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    return null;\n}\n</cell>\n<text>\n\
    Problem 5\nWrite a function that removes leading and trailing occurrences of any\
    \ char from input string.\nunittest\n{\n    alias candidate = select_words;\n\n\
    \    assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz18srkw8.d(26): Error: declaration expected, not `<`

    /tmp/tmpz18srkw8.d(34): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(35): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(36): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(37): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(38): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(39): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(40): Error: declaration expected, not `assert`

    /tmp/tmpz18srkw8.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz18srkw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    // your code goes here\n\
    \    \n    string[] words= new string[1000];\n    List<string> consonantList =\
    \ new List<string>();\n    \n    for (int i = 0; i<s.length(); i++)\n    {\n \
    \       char character = s[i];\n        if (character == 'a' || character == 'e'\
    \ || character == 'i' || character == 'o' || character == 'u' || character ==\
    \ 'A' || character == 'E' || character == 'I' || character == 'O' || character\
    \ == 'U')\n        {\n            consonantList.add(character);\n        }\n \
    \   }\n    \n    if (consonantList.Count>0)\n    {\n        for (int i = 0; i<s.length();\
    \ i++)\n        {\n            char character = s[i];\n            if (character\
    \ == 'a' || character == 'e' || character == 'i' || character == 'o' || character\
    \ == 'u' || character == 'A' || character == 'E' || character == 'I' || character\
    \ == 'O' || character == 'U')\n            {\n                for (int j=0; j<consonantList.Count;\
    \ j++)\n                {\n                    if (consonantList[j] == character)\n\
    \                    {\n                        int index = i;\n             \
    \           int count = 1;\n                        for (int k=0; k<consonantList.Count;\
    \ k++)\n                        {\n                            if (consonantList[k]\
    \ == consonantList[j])\n                            {\n                      \
    \          count = count + 1;\n                            }\n               \
    \         }\n                        \n                        for (int k=0; k<consonantList.Count;\
    \ k++)\n                        {\n                            if (k == j && consonantList[k]\
    \ == consonantList[j])\n                            {\n                      \
    \          count = count - 1;\n                            }\n               \
    \         }\n                        \n                        if (count <= n\
    \ )\n                        {\n                            for (int k=0; k<consonantList.Count;\
    \ k++)\n                            {\n                                if (k !=\
    \ j)\n                                {\n                                    string\
    \ temp = new string(consonantList.ToArray());\n                              \
    \      words[index] = temp;\n                                    index = index\
    \ + 1;\n                                }\n                            }\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return words;\n}\n</code>\n<|/ a tags=c#,string |>\n\
    <| a |>\n<code>\npublic static string[] ExtractStrings(string inputString, string\
    \ subString, int noOfCharacters)\n    {\n        string[] stringArray = new string[noOfCharacters];\n\
    \        for (int i = 0; i < noOfCharacters; i++)\n        {\n            string\
    \ stringToCompare = new string(new char[subString.Length]);\n            for (int\
    \ j = 0; j < subString.Length; j++)\n            {\n                stringToCompare[j]\
    \ = inputString[i + j];\n            }\n            \nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0n74d0em.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmp0n74d0em.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmp0n74d0em.d(28): Error: expression expected, not `)`

    /tmp/tmp0n74d0em.d(28): Error: found `;` when expecting `)`

    /tmp/tmp0n74d0em.d(30): Error: found `for` when expecting `;` following statement

    /tmp/tmp0n74d0em.d(30): Error: found `i` when expecting `.` following int

    /tmp/tmp0n74d0em.d(30): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp0n74d0em.d(30): Error: found `0` when expecting `)`

    /tmp/tmp0n74d0em.d(30): Error: found `)` when expecting `;` following statement

    /tmp/tmp0n74d0em.d(87): Error: declaration expected, not `<`

    /tmp/tmp0n74d0em.d(94): Error: declaration expected, not `for`

    /tmp/tmp0n74d0em.d(94): Error: no identifier for declarator `i`

    /tmp/tmp0n74d0em.d(94): Error: declaration expected, not `<`

    /tmp/tmp0n74d0em.d(94): Error: no identifier for declarator `i`

    /tmp/tmp0n74d0em.d(94): Error: declaration expected'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    var ar = s.Split(' ');\n    var\
    \ words = new List<string>();\n    foreach (var item in ar) \n    {\n        if\
    \ (item.Length > n && consonants(item)) \n        {\n            var tmp = item.ToUpper().Trim();\n\
    \            foreach (var tmpItem in tmp.Split(' '))\n            {\n        \
    \        if (consonants(tmpItem)) \n                {\n                    words.Add(tmpItem);\n\
    \                }\n            }\n        }\n    }\n    return words.ToArray();\n\
    }\n</code>\nThe above code is O(n), O(n*m) where m is the length of the longest\
    \ word in the input string. \nBelow is the code written in C#, which was compiled\
    \ in Release mode.\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0lgu0i_w.d(25): Error: semicolon expected, not `>`

    /tmp/tmp0lgu0i_w.d(25): Error: found `>` instead of statement

    /tmp/tmp0lgu0i_w.d(26): Error: found `in` when expecting `;`

    /tmp/tmp0lgu0i_w.d(31): Error: found `in` when expecting `;`

    /tmp/tmp0lgu0i_w.d(42): Error: declaration expected, not `<`

    /tmp/tmp0lgu0i_w.d(47): Error: semicolon expected, not `.`

    /tmp/tmp0lgu0i_w.d(47): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmp0lgu0i_w.d(48): Error: semicolon expected, not `.`

    /tmp/tmp0lgu0i_w.d(48): Error: no identifier for declarator `.Linq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lgu0i_w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr=new string[s.length];\n\
    \    \n    for(int i=0;i<s.length;i++)\n    {\n        arr[i]=\"\";\n        for(int\
    \ j=i;j<s.length;j++)\n        {\n            if(s[i]==s[j] && s[i]!=' ')\n  \
    \          {\n                arr[i]=arr[i]+s[j];\n                for(int k=j+1;k<s.length;k++)\n\
    \                {\n                    if(s[k]==' ' || s[k]=='-')\n         \
    \           {\n                        arr[i]=arr[i]+s[k];\n                 \
    \       break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n        if(arr[i].length()==n)\n        {\n       \
    \     break;\n        }\n    }\n    return arr;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nThis works for me...\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary\
    \ had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn2spuiqz.d(52): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2spuiqz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] arr = new string[1];\n\
    \    if(!s.isEmpty())\n    {\n        for(var i = 0; i < s.length(); i++)\n  \
    \      {\n            bool found = false;\n            for(j=0; j < arr.length;\
    \ j++)\n            {\n                if(arr[j] == \"a\")\n                {\n\
    \                    if(n == j)\n                    {\n                     \
    \   arr[j] = s.substring(i, i+1);\n                        found = true;\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n            if(!found)\n            {\n                arr[0] += \"\
    \ \" + s.substring(i, i+1);\n            }\n        }\n    }\n    return arr;\n\
    }\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaj4i9izo.d(25): Error: no property `isEmpty` for type `string`

    /tmp/tmpaj4i9izo.d(27): Error: undefined identifier `var`

    /tmp/tmpaj4i9izo.d(27): Error: no property `length` for type `string`

    /tmp/tmpaj4i9izo.d(30): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(30): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(30): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(32): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(34): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(36): Error: undefined identifier `j`

    /tmp/tmpaj4i9izo.d(44): Error: no property `substring` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaj4i9izo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    int i = 0;\n    string temp =\
    \ \"\";\n    while(i < s.length() && i < n && s[i] != '\\0')\n    {\n        temp\
    \ = temp + s[i];\n        i++;\n    }\n    if(i > s.length())\n    {\n       \
    \ temp = \"\";\n    }\n    string[] arr = new string[n];\n    for(int j = 0; j\
    \ < n; j++)\n    {\n        arr[j] = temp;\n        temp = temp + s[j];\n    }\n\
    \    return arr;\n}\n</code>\nAnd here's how I solved it:\n<code>\nstring[] res\
    \ = select_words(\"Mary had a little lamb\", 4L);\nfor(int i = 0; i < res.Length;\
    \ i++)\n    Console.WriteLine((i + 1).ToString() + \": \" + res[i]);\n</code>\n\
    Output:\n<code>\n1: Mary\n2: had\n3: a\n4: little\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=java,algorithm |>\nI did this in java with two for loops. \n\
    First one to find the number of consonants in the given string. Second one to\
    \ loop through the words in string. \n<code>\npublic static void main(String[]\
    \ args) {\nunittest\n{\n    alias candidate = select_words;\n\n    assert(candidate(\"\
    Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had\
    \ a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple\
    \ white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"\
    world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xs219mh.d(43): Error: declaration expected, not `<`

    /tmp/tmp3xs219mh.d(44): Error: unterminated character constant

    /tmp/tmp3xs219mh.d(47): Error: declaration expected, not `for`

    /tmp/tmp3xs219mh.d(47): Error: no identifier for declarator `i`

    /tmp/tmp3xs219mh.d(47): Error: declaration expected, not `<`

    /tmp/tmp3xs219mh.d(47): Error: no identifier for declarator `i`

    /tmp/tmp3xs219mh.d(47): Error: declaration expected, not `++`

    /tmp/tmp3xs219mh.d(49): Error: declaration expected, not `<`

    /tmp/tmp3xs219mh.d(67): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(68): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(69): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(70): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(71): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(72): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(73): Error: declaration expected, not `assert`

    /tmp/tmp3xs219mh.d(74): Error: unrecognized declaration

    Failed:'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    \n    vector<string> result;\n\
    \    if ( s.length() == 0)\n    {\n        return result;\n    }\n    map<string,\
    \ vector<string>> map;\n    map[\"y\"] = {\"\", \"ie\", \"y\"}; //yes and ye\n\
    \    map[\"ee\"] = {\"\", \"ay\", \"ee\"}; //yeah\n    map[\"b\"] = {\"\", \"\
    ab\", \"ba\", \"be\", \"bey\", \"bo\"}; //ba, eba, baby, babe, ...\n    map[\"\
    m\"] = {\"\", \"am\", \"me\", \"mo\", \"mos\", \"mes\", \"mose\"}; //me, mo, me,\
    \ mos, mes, mose\n    map[\"o\"] = {\"\", \"o\"}; //o\n    map[\"p\"] = {\"\"\
    , \"p\"}; //p\n    map[\"r\"] = {\"\", \"r\"}; //r\n    map[\"l\"] = {\"\", \"\
    l\"}; //l\n    map[\"s\"] = {\"\", \"s\"}; //s\n    map[\"t\"] = {\"\", \"t\"\
    }; //t\n    map[\"v\"] = {\"\", \"v\"}; //v\n    map[\"h\"] = {\"\", \"h\"}; //h\n\
    \    map[\"w\"] = {\"\", \"w\"}; //w\n    map[\"z\"] = {\"\", \"ze\", \"zo\",\
    \ \"zoe\"}; //ze, zo, zoe, ...\n    map[\"rz\"] = {\"\", \"rze\", \"zze\"}; //rze,\
    \ zze, ...\n    map[\"zz\"] = {\"\", \"zy\", \"zyz\", \"zyze\"}; //zy, zyz, zyze,\
    \ ...\n    map[\"yz\"] = {\"\", \"yz\", \"yze\"}; //yz, yze, ...\n    map[\"zy\"\
    ] = {\"\", \"zy\"}; //zy\n    map[\"zzz\"] = {\"\", \"zzz\"}; //zzz\n    map[\"\
    bv\"] = {\"\", \"bv\", \"bve\"}; //bv, bve, ...\n    map[\"bf\"] = {\"\", \"bf\"\
    }; //bf\n    map[\"bfb\"] = {\"\", \"bfb\"}; //bfb\n    map[\"b\"] = {\"\", \"\
    b\"}; //b\n    map[\"yzx\"] = {\"\", \"yzx\"}; //yzx\n    map[\"zzz\"] = {\"\"\
    , \"zzz\"}; //zzz\n    map[\"zyz\"] = {\"\", \"zyz\"}; //zyz\n    map[\"z\"] =\
    \ {\"\", \"z\"}; //z\n    map[\"rz\"] = {\"\", \"rz\"}; //\nunittest\n{\n    alias\
    \ candidate = select_words;\n\n    assert(candidate(\"Mary had a little lamb\"\
    , 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L)\
    \ == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L)\
    \ == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"\
    Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n  \
    \  assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrru6roz.d(25): Error: found `>` when expecting `;` following statement

    /tmp/tmptrru6roz.d(31): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(31): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptrru6roz.d(32): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(32): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptrru6roz.d(33): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptrru6roz.d(34): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(34): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptrru6roz.d(35): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(35): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmptrru6roz.d(36): Error: found `}` when expecting `;` following statement

    /tmp/tmptrru6roz.d(36): Deprecation: use `{ }` for an empty statement'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code here\n}\n</code>\n\
    <|/ q tags=string,java |>\n<| c |>\n\"Your code here\" is not an answerable question.\
    \  Please explain what it is that you're having trouble with and what you've tried\
    \ to solve it.  Include the relevant code and any error messages or problems that\
    \ you're having.\n<|/ c |>\n<| c |>\nThis is not a free code-writing service.\
    \ You are expected to make an attempt to solve the problem yourself first. If\
    \ you run into problems with your code, you can ask a specific question about\
    \ that. See [ask].\n<|/ c |>\n<| c |>\nIf this is homework don't add the 'homework'\
    \ tag.\n<|/ c |>\n<| c |>\nThis looks like a homework question to me. Have you\
    \ tried solving this yourself? It's a good idea to try to solve it yourself, this\
    \ way you can learn something in the process.\n<|/ c |>\n<| c |>\nIt looks like\
    \ you are trying to find all the words in an English dictionary that contain n\
    \ consonants... Do you know where such a dictionary is hosted? I would think there\
    \ would be one out there somewhere...\n<|/ c |>\n<| a |>\nYou have to split a\
    \ string into a char array. The easiest way to do that is to use String.toCharArray(),\
    \ which returns a char array. Now you just need to iterate through this array\
    \ and use String.contains() to check if each character is contained in your word.\n\
    <|/ a tags=string,java dscore=1 |>\n<| c |>\nThanks for your help\n<|/ c |>\n\
    <| c |>\nYou are welcome. Consider accepting one of the answers that solved your\
    \ question. It will help other users in the future when they have the same problem.\n\
    <|/ c |>\n<| a tags=string,java |>\n<code>\npublic class Main {\nunittest\n{\n\
    \    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92h9dbky.d(26): Error: declaration expected, not `<`

    /tmp/tmp92h9dbky.d(29): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(29): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(29): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(35): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(35): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(35): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(38): Error: unterminated character constant

    /tmp/tmp92h9dbky.d(59): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(60): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(61): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(62): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(63): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(64): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(65): Error: declaration expected, not `assert`

    /tmp/tmp92h9dbky.d(66): Error: unrecognized declaration

    Fail'
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n  \n    std.string cons = std.string.fromCharCode('b');\n\
    \    std.string vowel = std.string.fromCharCode('a');\n    std.string cons_vowel\
    \ = cons + vowel;\n    std.vector<string> v;\n    std.vector<string> result;\n\
    \    int i = 0;\n    bool isWord = false;\n    \n    if (s != \"\")\n    {\n \
    \       \n        std.string current_word = \"\";\n        for (int j = 0; j <\
    \ s.length(); j++)\n        {\n            char c = s.charAt(j);\n           \
    \ char current = c;\n            \n            if (isWord)\n            {\n  \
    \              current_word += current;\n                isWord = false;\n   \
    \         }\n            \n            else if (c != ' ')\n            {\n   \
    \             isWord = true;\n            }\n            \n            else if\
    \ ((std.array.length(current_word) == n) && std.array.isSubstring(cons_vowel,\
    \ current_word, false))\n            {\n                v.push_back(current_word);\n\
    \                isWord = false;\n                current_word = \"\";\n     \
    \       }\n            \n        }\n        \n        if (std.array.length(v)\
    \ == 0)\n        {\n            return result;\n        }\n        \n        for\
    \ (int j = 0; j < std.array.length(v); j++)\n        {\n            result.push_back(v[j]);\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=string,c++,algorithm,c++17\
    \ dscore=0 |>\n<| c |>\nThis is great code, but please don't post it as a screenshot.\n\
    <|/ c |>\n<| c |>\nThis is my first question on StackOverflow, but thank you for\
    \ giving me a great idea to improve my question.\n<|/ c |>\n<| c |>\nThe code\
    \ has been updated and fixed.\n<|/ c |>\n<| a dscore=0 |>\nThis is my first time\
    \ answering a question on Stack Overflow but I think your problem is actually\
    \ the algorithmic one. Here is a simple algorithm that will do the job for you\
    \ and doesn't require any loops (and should be considerably faster):\nunittest\n\
    {\n    alias candidate = select_words;\n\n    assert(candidate(\"Mary had a little\
    \ lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"Mary had a little lamb\"\
    , 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"simple white space\",\
    \ 2L) == []);\n    assert(candidate(\"Hello world\", 4L) == [\"world\"]);\n  \
    \  assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n    assert(candidate(\"\
    \", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L) == [\"b\", \"c\", \"\
    d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqs0u_ty9.d(28): Error: found `>` when expecting `;` following statement

    /tmp/tmpqs0u_ty9.d(29): Error: found `>` when expecting `;` following statement

    /tmp/tmpqs0u_ty9.d(75): Error: declaration expected, not `<`

    /tmp/tmpqs0u_ty9.d(78): Error: unterminated character constant

    /tmp/tmpqs0u_ty9.d(87): Error: unterminated character constant

    /tmp/tmpqs0u_ty9.d(92): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(93): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(94): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(95): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(96): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(97): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(98): Error: declaration expected, not `assert`

    /tmp/tmpqs0u_ty9.d(99): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqs0u_ty9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    // Your code goes here\n    string\
    \ word = \"\";\n    string[] result = new string[100000];\n    long index = 0;\n\
    \    int flag = 0;\n    for (int i = 0; i< s.length();i++)\n    {\n        if\
    \ ((s[i] == 'a') || (s[i] == 'e') || (s[i] == 'i') || (s[i] == 'o') || (s[i] ==\
    \ 'u') || (s[i] == ' '))\n        {\n            word+=s[i];\n        }\n    \
    \    else if (word.length >= n)\n        {\n            result[index] = word;\n\
    \            index++;\n            word = \"\";\n            flag = 1;\n     \
    \   }\n    }\n    if (flag == 0)\n    {\n        result[index] = word;\n     \
    \   index++;\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I added a comment to your code which explains your `flag` check. Basically the\
    \ flag check is there because the first word (which has the longest length) cannot\
    \ be longer than the required amount of letters. So you only add that first word\
    \ into the result array. Without the flag check, you would not have added that\
    \ first word into the array. The flag check is there because if you look at the\
    \ example input data you have given, the first word will always be longer than\
    \ the required amount of letters. I hope this helps.\n<|/ c |>\n<| c |>\nI have\
    \ tested the code in the IDE I used and it compiles fine. Also, I changed your\
    \ `long` data type to be `int` because the `long` data type is not big enough\
    \ to store `10000` words. The only reason I used `long` is because `int` only\
    \ has values from `-10^9` to `10^9`. So your array will always be full of empty\
    \ strings.\n<|/ c |>\n<| c |>\nAlso, I have added a couple of comments to the\
    \ code which will explain my method of checking the length of the first word.\
    \ I have added comments to your code as well.\n<|/ c |>\n<| c |>\nThank you so\
    \ much for the comments i really appreciate it\n<|/ c |>\n<| c |>\nNo problem.\
    \ I'm glad I could help.\n<|/ c |>\n<| a tags=string,algorithm,java |>\n<code>\n\
    /**\n * \n * \n * \n */\npublic class FindString {\nunittest\n{\n    alias candidate\
    \ = select_words;\n\n    assert(candidate(\"Mary had a little lamb\", 4L) == [\"\
    little\"]);\n    assert(candidate(\"Mary had a little lamb\", 3L) == [\"Mary\"\
    , \"lamb\"]);\n    assert(candidate(\"simple white space\", 2L) == []);\n    assert(candidate(\"\
    Hello world\", 4L) == [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) ==\
    \ [\"Uncle\"]);\n    assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"\
    a b c d e f\", 1L) == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cny3kkm.d(50): Error: declaration expected, not `<`

    /tmp/tmp3cny3kkm.d(65): Error: unterminated character constant

    /tmp/tmp3cny3kkm.d(79): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(80): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(81): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(82): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(83): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(84): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(85): Error: declaration expected, not `assert`

    /tmp/tmp3cny3kkm.d(86): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cny3kkm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a string s and a natural\
    \ number n, you have been tasked to implement \n    a function that returns an\
    \ array of all words from string s that contain exactly \n    n consonants, in\
    \ order these words appear in the string s.\n    If the string s is empty then\
    \ the function should return an empty array.\n    Note: you may assume the input\
    \ string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"\
    Mary had a little lamb\", 4L)\n    [\"little\"]\n    >>> select_words(\"Mary had\
    \ a little lamb\", 3L)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple\
    \ white space\", 2L)\n    []\n    >>> select_words(\"Hello world\", 4L)\n    [\"\
    world\"]\n    >>> select_words(\"Uncle sam\", 3L)\n    [\"Uncle\"]\n    \n*/\n\
    string[] select_words(string s, long n) \n{\n    string[] result = new string[s.length()];\n\
    \    foreach (string word in s){\n        result[result.length()-1] = word;\n\
    \    }\n    return result;\n}\n</code>\n<|/ q dscore=1 tags=c#,linq |>\n<| c |>\n\
    You want to return all words that contain exactly **n** consonants, regardless\
    \ of other characters?\n<|/ c |>\n<| c |>\nYes, this is what I am trying to do.\
    \ I think I might have phrased it poorly.\n<|/ c |>\n<| c |>\nI see two problems\
    \ with this - your solution isn't very efficient (O(n^2)), and you also need to\
    \ use recursion.\n<|/ c |>\n<| c |>\nYou haven't specified what to return for\
    \ empty string and no match.  What if `n` is zero?\n<|/ c |>\n<| c |>\nHow do\
    \ you expect to compare the string and integer `n` without using the `==` operator?\n\
    <|/ c |>\n<| a tags=c#,linq |>\nYou have a lot of issues with your code, so let's\
    \ take a closer look:\nunittest\n{\n    alias candidate = select_words;\n\n  \
    \  assert(candidate(\"Mary had a little lamb\", 4L) == [\"little\"]);\n    assert(candidate(\"\
    Mary had a little lamb\", 3L) == [\"Mary\", \"lamb\"]);\n    assert(candidate(\"\
    simple white space\", 2L) == []);\n    assert(candidate(\"Hello world\", 4L) ==\
    \ [\"world\"]);\n    assert(candidate(\"Uncle sam\", 3L) == [\"Uncle\"]);\n  \
    \  assert(candidate(\"\", 4L) == []);\n    assert(candidate(\"a b c d e f\", 1L)\
    \ == [\"b\", \"c\", \"d\", \"f\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3ii_zbs.d(25): Error: found `in` when expecting `;`

    /tmp/tmpu3ii_zbs.d(30): Error: declaration expected, not `<`

    /tmp/tmpu3ii_zbs.d(39): Error: unterminated character constant

    /tmp/tmpu3ii_zbs.d(42): Error: unterminated character constant

    /tmp/tmpu3ii_zbs.d(48): Error: unterminated character constant

    /tmp/tmpu3ii_zbs.d(53): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(54): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(55): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(56): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(57): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(58): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(59): Error: declaration expected, not `assert`

    /tmp/tmpu3ii_zbs.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3ii_zbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164731
