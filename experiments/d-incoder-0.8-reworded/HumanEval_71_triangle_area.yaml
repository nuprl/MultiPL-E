name: HumanEval_71_triangle_area
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n    Otherwise return -1\n \
  \   Three sides make a valid triangle when the sum of any two sides is greater \n\
  \    than the third side.\n    Example:\n    >>> triangle_area(3L, 4L)\n    6.0\n\
  \    >>> triangle_area(1L, 2L)\n    -1L\n    \n*/\nfloat triangle_area(long a, long\
  \ b, long c) \n"
tests: "unittest\n{\n    alias candidate = triangle_area;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == 6.0);\n    assert(candidate(1L, 2L, 10L) == -1L);\n    assert(candidate(4L,\
  \ 8L, 5L) == 8.18);\n    assert(candidate(2L, 2L, 2L) == 1.73);\n    assert(candidate(1L,\
  \ 2L, 3L) == -1L);\n    assert(candidate(10L, 5L, 7L) == 16.25);\n    assert(candidate(2L,\
  \ 6L, 3L) == -1L);\n    assert(candidate(1L, 1L, 1L) == 0.43);\n    assert(candidate(2L,\
  \ 2L, 10L) == -1L);\n}\nvoid main(){}"
completions: ["{\n\tfloat triangle_area_result;\n\tif((a>b)&&(b>c))\n\t{\n\t\tif(a>c)\n\
    \t\t{\n\t\t\ttriangle_area_result = sqrt(pow(a,2)+pow(b,2));\n\t\t\ttriangle_area_result\
    \ = triangle_area_result * 4.0;\n\t\t\ttriangle_area_result = triangle_area_result\
    \ / 2.0;\n\t\t\ttriangle_area_result = triangle_area_result * 2.0;\n\t\t}\n\t\t\
    else\n\t\t{\n\t\t\ttriangle_area_result = sqrt(pow(a,2)+pow(c,2));\n\t\t\ttriangle_area_result\
    \ = triangle_area_result * 4.0;\n\t\t\ttriangle_area_result = triangle_area_result\
    \ / 2.0;\n\t\t\ttriangle_area_result = triangle_area_result * 2.0;\n\t\t}\n\t\
    }\n\telse if((a>b)&&(c>b) )\n\t{\n\t\ttriangle_area_result = sqrt(pow(a,2)+pow(c,2));\n\
    \t\ttriangle_area_result = triangle_area_result * 4.0;\n\t\ttriangle_area_result\
    \ = triangle_area_result / 2.0;\n\t\ttriangle_area_result = triangle_area_result\
    \ * 2.0;\n\t}\n\telse if((b>a)&&(c>a) )\n\t{\n\t\ttriangle_area_result = sqrt(pow(b,2)+pow(c,2));\n\
    \t\ttriangle_area_result = triangle_area_result * 4.0;\n\t\ttriangle_area_result\
    \ = triangle_area_result / 2.0;\n\t\ttriangle_area_result = triangle_area_result\
    \ * 2.0;\n\t}\n\telse if((b>a)&&(a>c) )\n\t{\n\t\ttriangle_area_result = sqrt(pow(b,2)+pow(a,2));\n\
    \t\ttriangle_area_result = triangle_area_result * 4.0;\n\t\ttriangle_area_result\
    \ = triangle_area_result / 2.0;\n\t\ttriangle_area_result = triangle_area_result\
    \ * 2.0;\n\t}\n\telse if((a>b)&&(a>c) )\n\t{\n\t\ttriangle_area_result = sqrt(pow(a,2)+pow(b,2));\n\
    \t\ttriangle_area_result = triangle_area_result * 4.0;\n\t\ttriangle_area_result\
    \ = triangle_area_result / 2.0;\n\t\ttriangle_area_result = triangle_area_result\
    \ * 2.0;\n\t}\n\telse\n\t{\n\t\ttriangle_area_result = -1;\n\t}\n\treturn triangle_area_result;\n\
    }\n/*", "{\n    if (a > b && a > c) {\n        float s = a + b + c;\n        if\
    \ (s > 0)\n            return 0.5 * (s - sqrtf(s));\n        else\n          \
    \  return -1;\n    } \n    else if (b > a && b > c) {\n        float s = a + b\
    \ + c;\n        if (s > 0)\n            return 0.5 * (s - sqrtf(s));\n       \
    \ else\n            return -1;\n    }\n    else if (c > a && c > b) {\n      \
    \  float s = a + b + c;\n        if (s > 0)\n            return 0.5 * (s - sqrtf(s));\n\
    \        else\n            return -1;\n    }\n    else {\n        float s = a\
    \ + b + c;\n        if (s > 0)\n            return 0.5 * (s - sqrtf(s));\n   \
    \     else\n            return -1;\n    }\n}", "{\n    float s;\n    \n    s =\
    \ (a+b+c)/2;", "{\n  long area;\n  int sides, a, b, c;", "{\n    float s = (a+b+c)/2;\n\
    \    if(s>=s && s<=b+a && s<=c+b) return s;\n    else return -1;\n}", "{\n\tif((a\
    \ + b) > c && (c + d) > b && (a + d) > b) \n\t{\n\t\tlong ab_area = triangleArea(a,b);\n\
    \t\tlong cd_area = triangleArea(c,d);\n\t\tlong abd_area = triangleArea(a,b);\n\
    \t\tlong abc_area = triangleArea(a,c);\n\t\tlong cdab_area = triangleArea(c,d);\n\
    \t\tlong cdac_area = triangleArea(c,a);\n\t\tfloat area_tri = (float)(ab_area\
    \ + cd_area - abd_area - abc_area + cdab_area - cdac_area);\n\t\treturn round(area_tri\
    \ * 100.0) / 100.0;\n\t}\n\treturn -1;\n}", "{\n    float a2 = a * a, a3 = a2\
    \ * a, a4 = a3 * a, a5 = a2 * b, a6 = a5 * b, a7 = a3 * b, \n        a8 = a6 *\
    \ c, a9 = a7 * c, a10 = a8 * c, a11 = a9 * c;\n    long s, t, u;\n    s = ((a3\
    \ + b2 + c2 + d2) - (a2 + b + c + d)) * ((a2 + b2 + c2 + d2) - (a3 + b2 + c2 +\
    \ d)) \n        + ((a2 + b + c + d2) - (a2 + b2 + c2 + d)) * ((a3 + b2 + c2 +\
    \ d) - (a2 + b + c + d2));\n    t = ((a2 + b + c + d2) - (a2 + b2 + c2 + d)) *\
    \ ((a2 + b + c + d2) - (a3 + b2 + c2 + d)) \n        + ((a3 + b2 + c2 + d2) -\
    \ (a2 + b + c + d)) * ((a2 + b2 + c2 + d) - (a2 + b + c + d2));\n    u = ((a4\
    \ + b3 + c4 + d3) - (a4 + b2 + c4 + d)) * ((a4 + b3 + c4 + d3) - (a4 + b3 + c4\
    \ + d)) \n        + ((a4 + b2 + c4 + d3) - (a4 + b2 + c4 + d)) * ((a4 + b3 + c4\
    \ + d2) - (a4 + b2 + c4 + d));\n    return std.sqrt(u * u - a2 * u * t * 0.5);\n\
    }\n// END OF TRIANGLE_AREA\n</code>\n<|/ a tags=c++,geometry |>\n<| a |>\nI like\
    \ the approach of using Pythagoras for the hypotenuse. \nIf your triangle is equilateral,\
    \ then you can use the Pythagoras formula to calculate the area of the triangle.\
    \ If it is not equilateral, then you can use the Pythagoras formula to calculate\
    \ the area of the equilateral triangle, then subtract that area from the area\
    \ of the trapezoidal triangle. Here is an example for equilateral triangles:\n\
    <code>\n//returns area of triangle\ndouble GetTriangleArea()\n{\n     double a\
    \ = 3; //triangle sides\n     double b = 6; //triangle sides\n     double c =\
    \ 3; //triangle sides", "{\n    float area_1, area_2;\n    \n    area_1 = b *\
    \ b - a * c;\n    area_2 = a * c + b * b;\n    \n    if((area_1 > 0L) && (area_2\
    \ > 0L) && (area_1 > area_2)) \n    {\n        area_1 = std.math.round(area_1);\n\
    \        area_2 = std.math.round(area_2);\n        \n        return area_1;\n\
    \    }\n    else\n    {\n        area_1 = -1L;\n        area_2 = -1L;\n    }\n\
    \    \n    return area_1;\n}", "{\n    if( (a > 0 && b > 0 && c > 0) || (a > 0\
    \ && c > 0 && b > 0) ) \n    {\n        return std.math.rectangle(a,b,c).radius;\n\
    \    }\n    else if( (a > 0 && b > 0 && c < 0) || (a > 0 && c > 0 && b < 0) )\
    \ \n    {\n        return std.math.rectangle(a,b,c).length - (double)(triangle_area(b,a,c))/2;\n\
    \    }\n    else\n    {\n        return -1L;\n    }\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=c#,algorithm,geometry |>\nFor a more detailed version of what\
    \ Andras suggested, you can look into triangle area algorithms. Wikipedia provides\
    \ nice descriptions. And these are implemented in C#. Here is one of the algorithms\
    \ I implemented recently in C#.\n<code>\npublic double GetTriangleArea(double\
    \ x, double y, double z, double a1, double b1, double c1)\n{\n    double a2 =\
    \ (a1 + b1) * z - (a1 + c1) * y;\n    double b2 = (a2 + b1) * x - (a1 + c1) *\
    \ z;\n    double c2 = (a2 + c1) * y - (a1 + b1) * x;", "{\n    return std.math.abs(a\
    \ * b) + std.math.abs(a * c) - std.math.abs(b * c);\n}\n\"\"\"", "{\n    if (a\
    \ > b)\n    {\n        swap(a, b);\n    }\n    if (b > c)\n    {\n        swap(b,\
    \ c);\n    }\n    return (a * b) / sqrt(a * a + b * b + c * c);\n}\n</code>\n\
    <|/ a tags=math,geometry |>\n<| c |>\nThis doesn't work for all edge cases of\
    \ triangles. For example, consider the case where the sides are equal.\n<|/ c\
    \ |>\n<| c |>\n- It does.  It is not an isosceles triangle.\n<|/ c |>\n<| c |>\n\
    I haven't done any testing on that case yet, but I suspect it works. I checked\
    \ my answer against yours and it seems like yours works for all edge cases and\
    \ mine does not. Which do you think is wrong?\n<|/ c |>\n<| c |>\nI guess I just\
    \ don't understand what you're saying. I believe your answer is correct.\n<|/\
    \ c |>\n<| c |>\n- Yeah, my answer is wrong and that's probably what you're saying.\
    \  I tested it myself before posting my answer and it failed.  I'm a little concerned\
    \ that you're claiming that my answer is wrong.\n<|/ c |>\n<| a dscore=5 |>\n\
    To add to the previous answer, here's a solution in JavaScript which uses a square\
    \ root of a negative number. This was added as a separate answer because it's\
    \ simpler to include a snippet in an answer.", "{\n    float s = (a + b + c) *\
    \ .5;\n    if (s > a)\n        return -1;\n    if (s > b)\n        return -1;\n\
    \    if (s > c)\n        return -1;", "{\n    float area_triangle;\n    if(a ==\
    \ b && b == c){\n        area_triangle = (float)a * 0.5;\n        return area_triangle;\n\
    \    }\n    else if((a + b) > c || (a + c) > b || (b + c) > a){\n        return\
    \ -1;\n    }\n    else{\n        area_triangle = (float)(a+b+c) * 0.5;\n     \
    \   return area_triangle;\n    }\n}", "{\n    float s, a, b, c, area, temp;\n\
    \    long side;\n    \n    if (b > c && a > b) {\n        side = a;\n    } else\
    \ {\n        side = b;\n    }\n    \n    if (a > c && a > b) {\n        side =\
    \ a;\n    } else {\n        side = b;\n    }\n    \n    if (side > c && side >\
    \ b) {\n        side = a;\n    } else {\n        side = b;\n    }\n    \n    temp\
    \ = (float)sqrt(pow((float)side * side - (float)b * b, 2));\n    s = (float)sqrt(pow((float)side\
    \ * side - (float)a * a, 2));\n    area = roundf((float)(s / (float)temp) * 100.0)\
    \ / 100.0F;\n    return area;\n}", "{\n    if (a > b && b > c && c > a)\n    {\n\
    \        long sideSum = a + b + c;\n        float triangleArea = sideSum / 2.0f;\n\
    \        return std.roundf(fabs(triangleArea - triangleArea * 0.01f));\n    }\n\
    \    return -1.0f;\n}", "{\n    if(a+b>c) return 0.0;\n    else if(a==b) return\
    \ c;\n    else if(b==c) return a*c;\n    else return -1;\n}", "{\n    // If the\
    \ triangle doesn't have any sides, return -1\n    if((a == 0 && b == 0) || (c\
    \ == a)) {\n        return -1;\n    }\n    // If sum of any two sides is greater\
    \ than the third side, return -1\n    if((a + b > c) && (a > b)) {\n        return\
    \ -1;\n    }\n    // Return the area of a triangle with given sides\n    return\
    \ std.math.fabs(std.math.sqr(a) + std.math.sqr(b) + std.math.sqr(c));\n}", "{\n\
    \tif (a >= 0 && b >= 0 && c >= 0) \n\t{\n\t\tfloat s = a * b + c;\n\t\tif (s >\
    \ 0) \n\t\t{\n\t\t\ts *= 0.5f;\n\t\t\treturn std.round(s);\n\t\t}\n\t\telse \n\
    \t\t\treturn -1;\n\t}\n\telse \n\t{\n\t\treturn -1;\n\t}\n}\n'''", "{\n    float\
    \ area, area1;\n    if ( fabs(b-c) >  fabs(a-b) ) \n    {\n        area = 0.5\
    \ * (a + b + c);\n        area1 = 0.5 * fabs(a - b - c);\n    }\n    else\n  \
    \  {\n        area = 0.5 * (a + c + b);\n        area1 = 0.5 * fabs(b - a - c);\n\
    \    }\n    return (area1 == 0 ? area : round(area,2));\n}", "{\n    if(a > b){\n\
    \        if (c>b) return (b-a)/(double)c;\n        else       return (a-b)/(double)c;\n\
    \    }\n    else if(b > c){\n        return (a-c)/(double)b;\n    }\n    else{\n\
    \        return 0.0;\n    }\n}\n</code>\n<|/ a tags=math,c++ |>\n<| c |>\nI appreciate\
    \ you writing a proper algorithm, but why are you using `long` and not `int`?\
    \ In `triangle_area(7L, 5L, 9L)` the answer is `22.0`, but an `int` will give\
    \ `22`.\n<|/ c |>\n<| c |>\n: Because `double` can't accurately represent a triangle.\
    \ See the accepted answer [here](http://stackoverflow.com/questions/2745949/are-the-floating-point-numbers-in-c-and-math-accurate/2746008#2746008).\n\
    <|/ c |>\n<| c |>\nOh... I see why you thought that. Thanks for clarifying.\n\
    <|/ c |>\n<| c |>\n: You will find that `int` is also insufficient.  Consider\
    \ `triangle_area(7L, 5L, 9L)`.  That is not an integer, but it will fit in an\
    \ `int` without a problem.  So the only time `long` or `double` is really worth\
    \ the trouble is when you actually need `triangle_area(7L, 5L, 9L)` as `7`, `5`\
    \ and `9` are actually numbers, and you do not want to lose accuracy in the computations.\n\
    <|/ c |>\n<| a dscore=3 |>\nIn terms of finding the area of a triangle, the easiest\
    \ way is to get the area of a right triangle using the formula:\n<code>\nA = sqrt(\
    \ (r1^2 + r2^2 + r3^2)/2 )\n</code>\nThe area of a triangle can be calculated\
    \ using:\n<code>\nA = sqrt( (r1^2 + r2^2 + r3^2)/2 )\n   + sqrt( (r2^2 + r3^2\
    \ + r4^2)/2 )\n   + sqrt( (r3^2 + r4^2 + r5^2)/2 )\n</code>\nThis can be computed\
    \ with three triangle functions as shown below. First compute the area of all\
    \ the right triangles using the formula:\n<code>\nA = sqrt( (r1^2 + r2^2 + r3^2)/2\
    \ )\n</code>\nThen multiply all the right triangles by the area to get a triangle\
    \ of the form", "{\n    // Calculate the area of a triangle if its sides are a,\
    \ b, and c\n    float s = (a+b+c)/2;\n    if (a == b && b == c) {\n        return\
    \ s;\n    } else if (a == b) {\n        return -1;\n    } else if (b == c) {\n\
    \        return -1;\n    } else {\n        return -1.0f;\n    }\n}", "{\n    return\
    \ std.math.top_right_bottom_left(a, b, c).right - std.math.top_right_bottom_left(a,\
    \ b, c).left;\n}", "{\n  float trianglearea = 0.0;\n  if (a + b > c && a + c >\
    \ b && b + c > a) \n  { \n    trianglearea = 0.5 * (a + b + c); \n  }\n  else\
    \ if (a + c > b && b + c > a) \n  { \n    trianglearea = 0.5 * (b + c + a); \n\
    \  }\n  else \n  { \n    trianglearea = -1L; \n  }\n  return trianglearea; \n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 tags=c#,geometry |>\nFor anyone who wants\
    \ a simple c# answer:\n<code>\n    private static double areaOfTriangle(double\
    \ a, double b, double c)\n    {\n        return a * b * c / 2;\n    }\n</code>\n\
    <|/ a |>\n<| c |>\nWelcome to StackOverflow! Please don't answer with a solution\
    \ that uses `double` for area calculation, it makes it confusing for someone who\
    \ looks at this later. `decimal` would be a better solution. Also `double` can\
    \ be inaccurate with some calculations (e.g. `sqrt(3)`). A better solution would\
    \ be to use `Math.Sqrt()`.\n<|/ c |>\n<| a tags=c#,geometry |>\n<code>\ndouble\
    \ AreaofTriangle(double a, double b, double c)\n{\n    double s = (a + b + c)\
    \ / 2;\n    return Math.Sqrt(s * (s - a) * (s - b) * (s - c));\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWelcome to StackOverflow! Please don't answer with a\
    \ solution that uses `double` for area calculation, it makes it confusing for\
    \ someone who looks at this later. `decimal` would be a better solution. Also\
    \ `double` can be inaccurate with some calculations (e.g. `sqrt(3)`). A better\
    \ solution would be to use `Math.Sqrt()`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    double AreaofTriangle(double a, double b, double c)\n{\n    double s = (a + b\
    \ + c) / 2;\n    double area = (s * (s - a) * (s - b) * (s - c));\n    return\
    \ Math.Sqrt(area);\n}\n</code>\n<|/ a tags=c#,geometry |>\n<| c |>\nWelcome to\
    \ StackOverflow! Please don't answer with a solution that uses `double` for area\
    \ calculation, it makes it confusing for someone who looks at this later. `decimal`\
    \ would be a better solution. Also `double` can be inaccurate with ", "{ \n  \
    \  long abs = max(a, b); \n    long cs = max(c, abs);\n    long abc = min(abs,\
    \ cs);", "{\n\tfloat s = 0.0;\n\tfloat area = 0.0;\n\t\n\t//test if the sum of\
    \ any two sides is greater than the third side.\n\tif((a + b) > c)\n\t{\n\t\t\
    s = (b-(a-c));\n\t\tarea = a*s/2;\n\t}\n\t\n\t//test if the sum of the three sides\
    \ is greater than the third side.\n\tif((b + c) > a)\n\t{\n\t\ts = (a - b);\n\t\
    \tarea = a*s/2;\n\t}\n\t\n\t//test if the sum of the three sides is greater than\
    \ the third side.\n\tif((a + c) > b)\n\t{\n\t\ts = (a-b);\n\t\tarea = a*s/2;\n\
    \t}\n\t\n\treturn area;\n}\n</code>\n<|/ a |>\n<| c |>\nThe formula is correct.\
    \ There is an issue with the calculation. Consider if the triangles are of length\
    \ 1, 3, 5 (which is NOT a triangle) and the answer should be 4 but your code outputs\
    \ 6.\n<|/ c |>\n<| c |>\nyes this answer is correct. One of the edge cases needs\
    \ to be handled, I guess.\n<|/ c |>\n<| c |>\nThanks for pointing out the mistake.\
    \ Fixed the formula now :). But I still think this answer is wrong. In the case\
    \ mentioned in the question, the triangle is a valid triangle so this answer should\
    \ be correct. I checked this by calculating it manually on paper and it came out\
    \ to be 6. Can you give me a test case where the formula is wrong?\n<|/ c |>\n\
    <| c |>\nYes that is right. Now it is giving wrong answer.\n<|/ c |>\n<| a tags=c++,algorithm\
    \ |>\n<code>\n//C++ code", "{\n    int area;\n    float perimeter = a + b + c;\n\
    \    float area = sqrt(pow(perimeter, (float)2) / 4);\n    area = fmodf(area,\
    \ 2);\n    return area;\n}", "{\n\tif (a >= b && a >= c) {\n\t\tif (b > c) {\n\
    \t\t\treturn std.math.hypot(a, std.math.hypot(b, c));\n\t\t} else {\n\t\t\treturn\
    \ std.math.hypot(a, c) * 0.5;\n\t\t}\n\t} else if (b >= c && b >= a) {\n\t\tif\
    \ (a > c) {\n\t\t\treturn std.math.hypot(b, std.math.hypot(a, c));\n\t\t} else\
    \ {\n\t\t\treturn std.math.hypot(b, c) * 0.5;\n\t\t}\n\t} else if (c >= a && c\
    \ >= b) {\n\t\tif (b > a) {\n\t\t\treturn std.math.hypot(c, std.math.hypot(a,\
    \ b));\n\t\t} else {\n\t\t\treturn std.math.hypot(c, a) * 0.5;\n\t\t}\n\t} else\
    \ {\n\t\treturn -1;\n\t}\n}\n/*", "{\n\treturn (a + b + c) / 2.0f;\n}", "{\n \
    \   return ((a < b && b < c) ? d : ((b < a && a < c) ? d : ((a < b && b < c) ?\
    \ a : -1L)));\n}\n</code>\n<|/ a tags=math,c++,geometry |>\n<| a dscore=3 |>\n\
    If you can assume that the three points are distinct, you can use this:\n<code>\n\
    float area = -(a * (b - c)) / (2.0f*(c-a));\n</code>\n<|/ a tags=math,c++,geometry\
    \ |>\n<| c |>\nThe area of a triangle is equal to the area of the convex hull\
    \ of the three points. But your solution works for an arbitrary set of points.\n\
    <|/ c |>\n<| a tags=math,c++,geometry |>\nThis should work:\n<code>\nfloat TriangleArea(long\
    \ a, long b, long c) {\nfloat d1,d2,d3;\n  d1=b*b-a*c;\n  d2=a*c-b*a;\n  d3=a*b+b*c;\n\
    \  return 0.5*(sqrt(d1*d1+d2*d2)+sqrt(d3*d3));\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThe algorithm is incorrect because you should be computing the squared\
    \ sum, not the sum of the squares.\n<|/ c |>\n<| c |>\n: I believe the math is\
    \ correct. d1 and d2 are correct because a^2 + b^2 = c^2. But d3 is wrong: (a*a\
    \ + b*b) is the same as (a*b + b*a). The algorithm is correct.\n<|/ c |>\n<| c\
    \ |>\nI agree with you. However, that's what the OP seems to have in mind. My\
    \ code calculates the sum of squared distances. Which is equivalent to computing\
    \ the sum of the squared distances.\n<|/ c |>\n<| a |>\n<code>\nfloat area(float*\
    \ a,float* b,float* c)\n{\n    float s=0;\n    int i;\n    int j,k;\n    for(i=0;i<3;i++)\n\
    \    {\n        for(j=0;j<3;j++)\n        {\n            if(abs(a[i] - b[j])<\
    \ 10E-2)\n            {\n                if(abs(a[i] - c[j])<10E-2)\n        \
    \            s+=(abs(a[i]-b[j])+abs(a[i]-c[j]));\n            }\n        }\n \
    \   }\n    return s;\n}\n</code>\n<|/ a dscore=2 tags=math,c++,geometry |>\n<|\
    \ a |>\nUsing C++ STL:\n<code>\n#include <iostream>\n#include <vector", "{\n \
    \   return std.fabs(b * std.sqrt(std.fabs(a * a + b * b - c * c)))/2;\n}\n</code>\n\
    <|/ a tags=c#,math,c++,algorithm dscore=2 |>\n<| c |>\nThe OP asks about a C++\
    \ algorithm that could possibly be converted to C# and C++. Your answer doesn't\
    \ seem to do either of them.\n<|/ c |>\n<| a dscore=1 |>\nHere's a simple c++\
    \ program that will calculate area of triangle using formula mentioned above:\n\
    <code>\n#include<iostream>", "{\n  // TODO: implement the solution \n  // Write\
    \ your solution here\n  return -1;\n}\n</code>\n<|/ a dscore=2 tags=java |>\n\
    <| a tags=java |>\nHere is a Java program that solves your problem.\n<code>\n\
    public class Triangle {", "{\n    if (a > b)\n        if (b > c)\n           \
    \ return a + b + c;\n        else\n            return -1;\n    else\n        return\
    \ -1;\n}", "{ \n  float area = 0.0f; \n  float side1 = 3f * a; \n  float side2\
    \ = 3f * b; \n  float side3 = 3f * c; \n  float s1,s2,s3;\n  float smin;\n  \n\
    \  s1 = min(side1, side2); \n  s2 = min(side1, side3); \n  s3 = min(side2, side3);\
    \ \n  \n  smin = min(s1,s2,s3); \n  \n  if(smin == s3) return triangle_area(a,b,c);\
    \ \n  if(smin == s2) return triangle_area(b,a,c); \n  if(smin == s1) return triangle_area(c,a,b);\
    \ \n  \n  s1 = side1 - s1; \n  s2 = side2 - s2; \n  s3 = side3 - s3; \n  \n  if(s1\
    \ <= 0.001 && s2 <= 0.001 && s3 <= 0.001) return -1.0f; \n  area = s1 * s2;\n\
    \  return 0.5f * (s1 + s2 + s3)/(area + 0.5f); \n} ", "{\n  if((c==0)||(b==0))\
    \ return 0;\n  if(a > c) return -1L;\n  if(b > c) return -1L;\n  if(b < a) return\
    \ -1L;\n  long x = (a+b+c)/2;\n  return std.sqrt(a*a+b*b+c*c)/x;\n}\n</code>\n\
    The above function can be called in any way you want. The only restriction is\
    \ that the three sides make valid triangles whenever the sum of any two sides\
    \ is greater than the third side. \nOne thing that may come in handy is when you\
    \ have to find the perimeter of a triangle whose three sides are given by vectors.\
    \ This function can be called as follows\n<code>\nimport std.stdio;\nimport std.string;\n\
    import std.algorithm:map;\nimport std.math;\nimport std.typecons;\nimport std.math;\n\
    /*\n    Function that returns the perimeter of a triangle given its three sides\
    \ as vectors\n    Example:\n    >>> print_float(triangle_perimeter(1L, 2L, 3L))\n\
    \    6.18\n    \n*/\nfloat triangle_perimeter(long a, long b, long c) \n{\n  if((c==0)||(b==0))\
    \ return 0;\n  if(a > c) return -1L;\n  if(b > c) return -1L;\n  if(b < a) return\
    \ -1L;\n  long x = (a+b+c)/2;\n  return 2*std.sqrt(a*a+b*b+c*c);\n}\n</code>\n\
    The function above is able to accept any length argument. The only restriction\
    \ here is that the three sides make valid triangles whenever the sum of any two\
    \ sides is greater than the third side. \nOne last thing that may come in handy\
    \ is when you have to find the area of a triangle whose three sides are given\
    \ by vectors. This function can be called as follows\n<code>\nimport std.stdio;\n\
    import std.string;\nimport std.algorithm:map;\nimport std.math;\nimport std.typecons;\n\
    import std.math;\n/*\n    Function that returns the area of a triangle given its\
    \ three sides as vectors\n    Example:\n    >>> print_float(triangle_area(1L,\
    \ 2L, 3L))\n    6.0\n    \n*/\nfloat triangle_area(long a, long b, long c) \n\
    {\n  if((c==0)||(b==0)) return 0;\n  if(a > c) return -1L;\n  if(b > c) return\
    \ -1L;\n  ", "{\n    long a, b, c;\n    \n    long s = a + b + c;\n    \n    float\
    \ r = sqrt(s * 0.5);\n    \n    if (a < b) {\n        long delta = a;\n      \
    \  a = b;\n        b = delta;\n    }\n    if (a > c) {\n        long delta = c;\n\
    \        c = a;\n        a = delta;\n    }\n    if (b < c) {\n        long delta\
    \ = b;\n        b = c;\n        c = delta;\n    }\n    \n    return r * r * 0.5;\n\
    }", "{\n    if( a >= b && a >= c ) \n        return ((a + b + c) / 2) * 0.5;\n\
    \    else if( b >= c ) \n        return (b + (b - c)) / 2;\n    else if( c >=\
    \ a )\n        return (c + (c - a)) / 2;\n    else\n        return -1;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYou don't have to take into account negative lengths, so you\
    \ can simplify the code as `float triangle_area(long a, long b, long c) { return\
    \ (a + b + c) / 2.0; }`\n<|/ c |>\n<| a |>\nHere is another implementation in\
    \ C++.\n<code>", "{\n    float side1 = float(b)*float(b)+float(c)*float(c);\n\
    \    float side2 = (float(a)+float(c))*float(a)+(float(a)+float(b))*float(c);\n\
    \    float side3 = (float(a)+float(b))*float(a)+(float(c)+float(b))*float(c);\n\
    \    float side4 = (float(a)+float(b))*float(a)+(float(c)+float(a))*float(c);\n\
    \    float area;\n    if (side1 > side2 && side1 > side3 && side1 > side4) \n\
    \    {\n        area = float(sqrt(side1));\n        return round(area, 2);\n \
    \   }\n    else if (side2 > side3 && side2 > side4)\n    {\n        area = float(sqrt(side2));\n\
    \        return round(area, 2);\n    }\n    else if (side3 > side4)\n    {\n \
    \       area = float(sqrt(side3));\n        return round(area, 2);\n    }\n  \
    \  else\n    {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ |>\n<code>\npublic int triangleArea(int a, int b, int c)\n{\n    return (float)Math.sqrt(a*a\
    \ + b*b + c*c);\n}\n</code>\n<|/ a dscore=0 tags=java |>\n<| a dscore=0 |>\nHere\
    \ is my solution for that:\n<code>\npublic class TriangleArea {\n    private int\
    \ a, b, c;", "{\n    float s;\n    if(a < b+c || a < c-b) \n        s = 0\n  \
    \  else if(a == b+c && b > c) \n        s = 1\n    else if(a == c-b && c > b)\
    \ \n        s = -1\n    else if(a > c-b) \n        s = 0\n    else\n        s\
    \ = 1;\n    return float(round(s*1000000000000.0));\n}", "{\n    long area_sides\
    \ = a + b + c;\n    float area_tri = area_sides / 2;\n    if(area_tri > c)\n \
    \       return area_tri;\n    return -1;\n}", "{\n    // The formula below is\
    \ derived from the formula on page 122 of:\n    // http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Explanations/Formulas/TrigArea.html\n\
    \    float s = (a + b + c) / 2.0f;\n    float t = (a * b) / ((2.0f * s) * (2.0f\
    \ * a + b + c));", "{\n    return ((a+b+c)==0)?0:(a > b+c)?(a-b+c):(a-b-c);\n\
    }\n</code>\n<|/ a tags=python,geometry |>\n<| a tags=python,geometry |>\n<code>\n\
    from math import *\ndef triangleArea(l, w, h):\n    area = 0.5 * abs((abs(l) +\
    \ abs(w) + abs(h))**2 - l * w + w * h + h * l) * 0.5\n    return area\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a Python program to compute the area\
    \ of a triangle which includes the case where lengths of the sides are equal.\n\
    <code>\nimport math", "{\n    float side1, side2, side3;\n    float area_calc;\n\
    \    side1 = (a+b+c)/2.0;\n    side2 = 2*a*b;\n    side3 = 2*b*c;\n    area_calc\
    \ = sqrt(pow(side1,2) + pow(side2,2) + pow(side3,2));\n    return area_calc;\n\
    }", "{\n    // Check that the sides are valid.\n    long s = a + b + c;\n    if\
    \ (s > 0 && isinf(s)) {\n        // Check that the sum of any two sides is greater\
    \ than the third side.\n        if (s > c) {\n            // If so, return the\
    \ area of the triangle.\n            return (s * (s - a) * (s - b) * (s - c))\
    \ / (4 * a * b * c);\n        } else {\n            return -1;\n        }\n  \
    \  } else {\n        return -1;\n    }\n}\n</code>\n<|/ a tags=c++,math dscore=2\
    \ |>\n<| c |>\nThis answer has nothing to do with the question, which is about\
    \ a formula for triangle area that works correctly even when two sides are equal.\n\
    <|/ c |>\n<| c |>\nOops. I misread the question as asking about an area of a triangle\
    \ with sides a, b, and c. The question has been edited to reflect that. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| a tags=c++,math |>\nIn mathematics, the area\
    \ of a triangle is equal to the product of the legs times their hypotenuse divided\
    \ by the square root of the product of the squares of their lengths:", "{\n  \
    \  return std.math.abs(std.math.sqrt(std.math.pow(a, 2) + std.math.pow(b, 2) +\
    \ std.math.pow(c, 2) - 2 * std.math.pow(a, 2) * std.math.pow(b, 2) - std.math.pow(a,\
    \ 2) * std.math.pow(c, 2)) - std.math.sqrt(std.math.pow(b, 2) + std.math.pow(c,\
    \ 2) - 2 * std.math.pow(b, 2) * std.math.pow(a, 2) - std.math.pow(b, 2) * std.math.pow(c,\
    \ 2)));\n}", "{\n    float area;\n    \n    if (a + b > c && b + c > a && a +\
    \ c > b) {\n        area = 0.5 * sqrt(pow((a + b - c), 2.0) + pow((b + c - a),\
    \ 2.0) + pow((a + c - b), 2.0));\n    } else {\n        area = -1;\n    }\n  \
    \  return float(area);\n}", "{\n    float triarea = (a * b) + (b * c) - (a * c);\n\
    \    \n    if(triarea < 0)\n        triarea = -1 * triarea;", "{ \n  long s, t,\
    \ area_of_triangle, a, b, c;\n  \n  s = a + b + c; \n  \n  if (s < 0) \n    return\
    \ -1;\n  \n  if (s == 0) \n    return 0L;\n  \n  t = abs(s); \n  \n  a = s / t;\n\
    \  b = t / a - b;\n  c = s / t - b - a;\n  \n  area_of_triangle = a * b;\n  \n\
    \  if (c < 0)\n    return area_of_triangle;\n  else\n    return round(area_of_triangle\
    \ + 0.000000000000001);\n} ", "{\n    float area;\n    float side;\n    \n   \
    \ side = a+b+c;\n    if (side <= 0) {\n        return -1;\n    }\n    \n    area\
    \ = sqrt(pow(side,2) - (pow(a,2)+pow(b,2)+pow(c,2)));\n    if (area >= 1) {\n\
    \        return area;\n    } else {\n        return round(area * 100.0) / 100.0;\n\
    \    }\n}\n</code>\n<|/ a dscore=4 tags=c |>\n<| c |>\nThe second one is the easiest,\
    \ by far. There are some additional checks you can do to make sure the sides are\
    \ valid, like checking if a < b < c. You would also need to consider how you would\
    \ treat the situation where a == b or b == c. Depending on your needs and how\
    \ you use the result, you can determine how you should treat these cases.\n<|/\
    \ c |>\n<| c |>\nThe second one does not check for valid sides. `sqrt(pow(side,2)\
    \ - (pow(a,2)+pow(b,2)+pow(c,2)));` will always evaluate to `0` with negative\
    \ sides\n<|/ c |>\n<| a dscore=4 |>\nHere's my solution which uses an optimised\
    \ version of Sam Varshavchik's answer:\n<code>\n// Returns area of triangle given\
    \ length of sides of triangle\nfloat triangle_area(float a, float b, float c)\
    \ {\n    return (a + b + c) / 2.0f; \n}", "{\n    float area = 0;\n    if((a +\
    \ b < c) && (a + c < b)) \n    {\n        area = 0.5f * sqrtf(powf((a + b), 2)\
    \ + powf((a + c), 2) + powf((b + c), 2));\n    } \n    else \n    {\n        return\
    \ -1L;\n    }\n    return round(area, 2);\n}\n</code>\n<|/ a tags=math,c,c++,algorithm\
    \ dscore=5 |>\n<| c |>\n+1. Very nice solution. I had to make a small change to\
    \ make it work properly for me. `if (a + b < c && a + c < b)` I changed it to:\
    \ `if (a < b && b < c)`.\n<|/ c |>\n<| c |>\nGood point! I updated my solution\
    \ to reflect that change as well.\n<|/ c |>\n<| c |>\n: Thank you very much for\
    \ posting this solution. I am working on something similar and found it interesting\
    \ to see how you handled the negative sides.\n<|/ c |>\n<| c |>\nThis is great.\
    \ I like that you gave an explanation for how to handle the negative sides. That\
    \ is exactly what I was looking for.\n<|/ c |>\n<| c |>\nThis code works only\
    \ if the inputs are positive, otherwise it does not work\n<|/ c |>\n<| a tags=math,c,c++,algorithm\
    \ |>\nThe general formula for triangle area is: \n<code>\nA = (a*a + b*b - c*c)\
    \ / 2\n</code>\nIf you solve this recurrence relation, you will have the following\
    \ formulas for A, B, C for every value of a, b, c:\n<code>\nA = (a*a + b*b - c*c)\
    \ / 2\nB = sqrt(A * a / 2)\nC = sqrt(A * b / 2)\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nHow do you go about finding A? It seems like if you did that, you wouldn't\
    \ be able to solve the recurrence relation.\n<|/ c |>\n<| c |>\nThe two sides\
    \ of the triangle are symmetrical - i.e. if you solve the two equations for a\
    \ and b, you can solve the recurrence relation.\n<|/ c |>\n<| c |>\n, how did\
    \ you get `A` from two sides of triangle?\n<|/ c |>\n<| c |>\nSee http://mathworld.wolfram.com/TriangleArea.html\
    \ and http://mathworld.wolfram.com/TriangleEquation.html\n<|/ c |>\n<| c |>\n\
    , I ", "{\n    float s = (a + b + c) / 2.0;\n    long a, b, c;\n    float area;",
  "{\n    if (a + b > c && a + c > b && b + c > a) \n    {\n        float s = (a +\
    \ b + c) / 2.0f;\n        return sqrt(s * s - 4.0f);\n    } \n    return -1L;\n\
    }", "{\n    if((a + b) > c || (b + c) > a || (c + a) > b) return -1L;\n    float\
    \ s = (a + b + c) / 2;\n    return (a + b + c + s) / 4;\n}", "{\n    return std.math.abs((std.math.abs(a-b)\
    \ + std.math.abs(a-c) + std.math.abs(b-c)) / (2.0*std.math.abs(a-b)));\n}", "{\n\
    \tlong a, b, c, s, t;\n\t\n\tif (a == 0) \n\t\treturn (b*b - c*c);\n\tif (b ==\
    \ 0)\n\t\treturn (-a*b - c*c);\n\tif (c == 0)\n\t\treturn (-a*a - b*b);\n\t\n\t\
    s = a + b + c;\n\tt = (long)((s - a) * (s - b) * (s - c));\n\t\n\treturn (std.math.round(t\
    \ * std.math.abs(b - a)) / 2.0f);\n}", "{\n    float d1, d2, d3;\n    d1 = (b*b)\
    \ - (4*a*c);\n    d2 = ((a*a) + (b*b));\n    d3 = (2*(b*b));\n    if (d1 > 0)\
    \ \n    {\n        if (d2 > 0) \n        {\n            if (d3 > 0) \n       \
    \     {\n                return (float)sqrt(d1/(d1*d1) + (d2/(d2*d2)) + (d3/(d3*d3)));\n\
    \            } \n            else \n            {\n                return (float)sqrt(d1/(d1*d1));\n\
    \            }\n        } \n        else \n        {\n            return (float)sqrt(d1/(d1*d1));\n\
    \        }\n    }\n    else \n    {\n        return (float)sqrt(d1/(d1*d1));\n\
    \    }\n}", "{\n    return std.math.toFloat((a + b + c) / 2.0f);\n}", "{\n   \
    \ // Check for valid triangle area\n    if((a + b > c) || (a + c > b) || (b +\
    \ c > a))\n        return -1L;", "{\n\t/*\n\t\n\tThe equation for calculating\
    \ the area of a triangle is:\n\t\n\ta*b + c*(a+c) = 2*b\n\t\n\tTherefore\n\t\n\
    \ta*b + c*(a+c) = 2*b + 2*(a+c)\n\t\n\tTherefore\n\t\n\t2*b + 2*(a+c) =\n\t\n\t\
    (a + c) - (a + b) + (c + b)\n\t\n\t\n\t\n\t*/\n\treturn sqrt(pow((a + c), 2.0)\
    \ + pow((a + b), 2.0)) - pow((c + b), 2.0);\n}\n/*", "{\n    float a1 = a-b;\n\
    \    float b1 = b-c;\n    float c1 = c-a;\n    if(a1 > b1 && a1 > c1)\n      \
    \  return round(a1/(b1*c1))*(b*c)-(b*a1)*(c*b1)-(a*c1)*(b*a1);\n    else if(b1\
    \ > c1)\n        return round(b1/(c1*a1))*(a*c)-(a*b1)*(c*a1)-(b*a1)*(c*b1);\n\
    \    else if(c1 > a1)\n        return round(c1/(a1*b1))*(b*a)-(b*c1)*(a*b1)-(c*a1)*(b*c1);\n\
    \    else\n        return -1L;\n}", "{\n    return std.math.sqrt ((std.math.pow\
    \ (a,2)) + (std.math.pow (b,2)) + (std.math.pow (c,2)));\n}\n</code>\n<|/ a dscore=0\
    \ tags=math,c,c++,geometry |>\n<| a |>\nHere is your program in C++ which takes\
    \ three numbers as input from user and return their area in cm^2:\n<code>\n#include\
    \ <iostream>\nusing namespace std;\n// return area of the triangle given by sides\n\
    float triangle_area(float a, float b, float c)\n{\n    return a * a + b * b +\
    \ c * c;\n}", "{\n    float absa, absb;\n    float acsb, acsc, absab;\n    float\
    \ det, a, b, c; // = a, b, c\n    float acsdet, acsdet2 ; // = acsdet * acsdet,\
    \ acsdet * acsdet2\n    float acsdet2inv;", "{\n    // write your code here\n\
    \    if( a >= b && a >= c )\n        return ( long(a) * long(b) )/2;\n    else\
    \ if(a >= c && b >= c)\n        return -1;\n    else if( b > a )\n        return\
    \ ( long(c) * long(b) )/2;\n    else\n        return -1;\n}", "{\n    return std.math.abs(std.math.sqrt(std.math.pow(std.math.sqrt(std.math.pow(a,\
    \ 2) + std.math.pow(b, 2) + std.math.pow(c, 2)), 1/3)));\n}", "{ \n    if (a +\
    \ b > c) \n    {\n        long d = a - b; \n        long e = c - (a + b); \n \
    \       long f = d - (a + c); \n        long g = e - (b + c);\n        long h\
    \ = f - (b + d);\n        return std.math.sqrt(std.pow(a, 2) + std.pow(b, 2) +\
    \ std.pow(c, 2) + std.pow(d, 2) + std.pow(e, 2) + std.pow(f, 2) + std.pow(g, 2)\
    \ + std.pow(h,2));\n    } \n    else \n    {\n        return -1L; \n    }\n}\n\
    </code>\n<|/ a tags=algorithm,geometry,c++,math dscore=1 |>\n<| c |>\nIt seems\
    \ that this algorithm is actually wrong, and produces wrong answers for the examples\
    \ given. Example: for `triangle_area(4, 2, 4)`, it returns `16.0`, when it should\
    \ return `1.0`.\n<|/ c |>\n<| c |>\nIt's not wrong as you claim, but `a` is actually\
    \ `4.0 - 2.0 == 2.0`, so `pow(a, 2)` returns `2.0`.\n<|/ c |>\n<| c |>\nI'm curious\
    \ - how is it wrong? It seems like a valid triangle to me. If `a`, `b`, and `c`\
    \ are all equal, no matter what, there would obviously not be any area, and thus\
    \ no other side of the triangle could be greater than or less than or equal to\
    \ the other side.\n<|/ c |>\n<| c |>\nNope. My code is exactly as you wrote it\
    \ - all variables are floats. It's valid for me. Plus, the output of `triangle_area(1,2,1)`\
    \ should be `1.0`, not `-1L`. And my code returns `1.0` with your example.\n<|/\
    \ c |>\n<| c |>\nYou're right, it seems that my code is wrong. I was convinced\
    \ that `a`, `b` and `c` would be integers, and thus `pow(a, 2)` would return an\
    \ integer power, but I suppose it's just wrong... Sorry, I misunderstood your\
    \ comment and thought that `a`, `b` and `c` were integers, and thus the `pow`\
    \ would return an integer power.\n<|/ c |>\n<| a dscore=1 tags=algorithm,geometry,c++,math\
    \ |>\nThis is what worked for me :\n<code>\n#include <math.h>\n#include <cstdlib>\n\
    #include <iostream>\nusing namespace std;\nfloat triangle_area(float a,float b,float\
    \ c)\n{\n    float triangle_area;\n    if(sqrt((a*", "{\n    return std.math.float(a*b*c\
    \ - std.math.pow(std.math.pow(a, 2) + std.math.pow(b, 2), 1.5))/2;\n}", "{\n \
    \   // write your code in C\n    if(a >= b)\n    {\n        if(c >= b) \n    \
    \    {\n            return sqrtf(a*a + b*b);\n        }\n        else\n      \
    \  {\n            return -1;\n        }\n    }\n    else\n    {\n        if(c\
    \ >= a) \n        {\n            return -1;\n        }\n        else\n       \
    \ {\n            return sqrtf(a*a + c*c);\n        }\n    }\n}\n</code>\n<|/ a\
    \ tags=c,geometry,triangle |>\n<| c |>\nWhat about a more interesting case? `triangle_area(5L,\
    \ 2L, 10L)` ?\n<|/ c |>\n<| c |>\nIt should return -1 but its returning 1.\n<|/\
    \ c |>\n<| c |>\nIt does not work, e.g. triangle_area(1L, 2L, 4L) returns -1\n\
    <|/ c |>\n<| c |>\nIt should return 1 because it's a triangle. How should it return\
    \ -1 for a triangle with one side? I'm only checking for an intersection.\n<|/\
    \ c |>\n<| c |>\nMy bad, I was thinking of \"sides\".\n<|/ c |>\n<| a tags=c,geometry,triangle\
    \ |>\nHere is my code for the same in C++\n<code>", "{\n    if (a + b <= c) return\
    \ 0.0;\n    if (a + c <= b) return 0.0;\n    if (b + c <= a) return 0.0;\n   \
    \ float s = (a + b + c) / 2.0;\n    return sqrt ((s * s) - (s * (s - a) * (s -\
    \ b) * (s - c)));\n}", "{\n    return (a + b + c) / 2.0;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 tags=c++ |>\n<code>\n#include <iostream>", "{\n    int triSum\
    \ = (a+b+c); \n    int triSum2 = (a+b) * (a+c) * (b+c); \n    return (float) (a+b+c)\
    \ / Math.sqrt(triSum2);\n}", "{ \n    if (a <= 0 || b <= 0 || c <= 0) \n     \
    \   return -1; \n    long d; \n    d = a + b + c; \n    if (d > long(Long.MAX_VALUE))\n\
    \        return -1; \n    return std.math.sqrt(std.pow((double) a, (double) 2)\
    \ + std.pow((double) b, (double) 2)\n                    + std.pow((double) c,\
    \ (double) 2)) / d; \n} \n</code>\n<|/ a dscore=5 |>\n<| c |>\nIf you have to\
    \ use floats, then `float triangle_area(float a, float b, float c) {\n    double\
    \ d; \n    d = a + b + c; \n    if (d > long(Long.MAX_VALUE))\n        return\
    \ -1; \n    return std.sqrt(std.pow((double) a, (double) 2) + std.pow((double)\
    \ b, (double) 2)\n                + std.pow((double) c, (double) 2)) / d; \n}`\n\
    <|/ c |>\n<| c |>\nI got an answer from someone else (https://stackoverflow.com/a/26505221/5068791),\
    \ and I find it very helpful to have my answer on here in the event others come\
    \ across this thread as well.\n<|/ c |>\n<| c |>\nThanks Boris. I just added your\
    \ version of the code to the answer.\n<|/ c |>\n<| a tags=area,geometry,python\
    \ dscore=5 |>\nHere's a very simple python implementation that returns the answer\
    \ as a floating point number, rather than an integer value.\n<code>\ndef triangle_area(a,\
    \ b, c):\n    perimeter = a + b + c\n    area = (perimeter/2) * (perimeter/2)*3.14\n\
    \    return float(area)\n</code>\n<|/ a |>\n<| c |>\nYou forgot an open brace\
    \ on the line above the `return`.\n<|/ c |>\n<| c |>\nYou don't need that extra\
    \ brace after the return.\n<|/ c |>\n<| c |>\nI disagree with the edit of the\
    \ question, though it is very interesting. What would be the answer if the sides\
    \ were 5?\n<|/ c |>\n<| c |>\n: That's a separate question ;)\n<|/ c |>\n<| c\
    \ |>\nHmm, that seems wrong to me. It does not return an int. It returns a float.\n\
    <|/ c |>\n<| a tags=area,geometry,python |>\nMy answer is this:\n<code>\nfrom\
    \ math import sqrt", "{\n  float s, area, angle;", "{\n\treturn float(pow(a, b)*pow(c,2));\n\
    }", "{\n    if((a + b < c) && (a + c < b) && (b + c < a)) return std.sqrt(a*a\
    \ + b*b + c*c);\n    else return -1L;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    It's not what was asked, but it's what I was looking for when I found this question.\n\
    <|/ c |>\n<| a tags=c++,c dscore=0 |>\nI implemented a python script for finding\
    \ area of a triangle using it's formulae\n<code>\nimport math\nn = input(\"enter\
    \ the number of sides you want to find triangle area \\n\")\na=input(\"enter the\
    \ length of 1st side \\n\")\nb=input(\"enter the length of 2nd side \\n\")\nc=input(\"\
    enter the length of 3rd side \\n\")\nif n==1:\n    area=(a**2)*(b**2)\n    area_c=(a**2)*(c**2)\n\
    \    area_s=(a**2)*(s**2)\nelse:\n    area=(a**2)*(b**2)*(c**2)\n    area_c=(a**2)*(b**2)*(c**2)\n\
    \    area_s=(a**2)*(c**2)*((b**2)*s)\nprint(\"the area of triangle is =\",area)\n\
    print(\"the area of triangle is =\",area_c)\nprint(\"the area of triangle is =\"\
    ,area_s)\n</code>\n<|/ a |>\n<| c |>\nIt would be good to add some explanation\
    \ of how this code works -- how you arrived at those particular formulae, and\
    \ how you came up with the results. Also, have you tested this with different\
    \ numbers of sides?\n<|/ c |>\n<| a tags=c++,c |>\n<code>\n/*\n    Program to\
    \ find the area of a triangle using it's formula \n    The following code is a\
    \ simple program to find the area of a triangle using it's formula \n    Algorithm\
    \ : \n    1. Get the side lengths of the triangle \n    2. Get the sum of two\
    \ sides \n    3. Calculate the area of the triangle \n    4. Calculate the area\
    \ of the triangle using the formula for area \n*/", "{\n    if (b > a && b > c\
    \ && a > c) {\n        return round(sqrt((pow(b, 2)) + (pow(a, 2)) + (pow(c, 2))));\n\
    \    } else {\n        return -1;\n    }\n}\n</code>\n<|/ a |>\n<| a tags=floating-point,java,math,c\
    \ |>\nThis would be simpler to implement in Java or C if you used BigDecimal instead\
    \ of float.\nIn Java:\n<code>\npublic static BigDecimal triangleArea(BigDecimal\
    \ a, BigDecimal b, BigDecimal c) {\n    return BigDecimal.ZERO.plus(b.divide(a).divide(c))\n\
    \                   .abs()\n                   .compareTo(a);\n}\n</code>\nIn\
    \ C:\n<code>\ndouble triangle_area(double a, double b, double c) {\n    return\
    \ fabs((b * b - a * c) / sqrt(b * b - a * c));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThe C version should also be `sqrt(b * b - a * c)` not `sqrt(b) - sqrt(a)`\n\
    <|/ c |>\n<| a dscore=0 tags=floating-point,java,math,c |>\nThis code does not\
    \ use floating point numbers. Instead it uses integer numbers which are much more\
    \ efficient than floating-point numbers. \nIt is also easier to understand as\
    \ it is written in Java.\n<code>\nstatic int triangle_area(int a, int b, int c)\
    \ {\n    int l = (a + b + c) / 2;\n    int m = (a + b) * (b + c) - (a * b) * (a\
    \ + c);\n    int n = (a + b) * (a + c) - (b + c) * (a + b + c);\n    return Math.min(l,\
    \ m, n) * 0.5;\n}\n</code>\n<|/ a |>\n<| c |>\nthis answer gives incorrect results\
    \ when `a<b<c`\n<|/ c |>\n<| a tags=floating-point,java,math,c |>\nThis code works\
    \ fine for me\n<code>\nimport java.util.Scanner;", "{\n    float a, b, c, s, area\
    \ = 0;\n    float u1 = b - a;\n    float u2 = c - b;\n    float u3 = a - c;\n\
    \    float four_of_the_sides = (u1 * u1 + u2 * u2 + u3 * u3) * 0.5f;\n    float\
    \ u1_bar, u2_bar, u3_bar;\n    u1_bar = (u1 * u1) / (u1 * u1);\n    u2_bar = (u2\
    \ * u2) / (u2 * u2);\n    u3_bar = (u3 * u3) / (u3 * u3);\n    if (four_of_the_sides\
    \ > 0.0 && four_of_the_sides < 1.0) {\n        area = sqrt(u1_bar + u2_bar + u3_bar);\n\
    \        if (fabs(a) > fabs(b) && fabs(a) > fabs(c))\n            area = fabs(area)\
    \ - 1.0f;\n    }\n    return area;\n}\n/*\n    Write a function that accepts a\
    \ list consisting of a letter\n    and a number. Return the number if the given\
    \ list consists\n    of a valid triangle, otherwise return -1.\n    \n    Example:\n\
    \    Input list: \"A\" 1\n    Expected result: 1.0\n    Input list: \"B\" -1\n\
    \    Expected result: -1\n    Input list: \"C\" 3\n    Expected result: 3.0\n\
    */\nfloat triangle_number(char letter, long number)\n{\n    float a, area;\n \
    \   float sum = 0;\n    int i = 0;\n    while(letter != 'A' && letter != 'B' &&\
    \ letter != 'C')\n    {\n        if (number == i)\n            return number;\n\
    \        i++;\n    }\n    if (letter == 'A')\n    {\n        a = 1;\n        area\
    \ = triangle_area(1, number, 3);\n        sum += area;\n    }\n    else if (letter\
    \ == 'B')\n    {\n        a = -1;\n        area = triangle_area(number, 1, 3);\n\
    \        sum += area;\n    }\n    else if (letter == 'C')\n    {\n        a =\
    \ 3;\n        area = triangle_area(1, 3, number);\n        sum += area;\n    }\n\
    \    return sum;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for posting\
    \ your solution. Would you kindly [edit] your answer to to include an explanation\
    \ of your code? That will help future readers better understand what is going\
    \ on, and especially those members of the community who are new to the language\
    \ and struggling to understand the concepts.\n<|/ c |>\n<| c |>\nHi, this solution\
    \ can handle any number of sides and any number of numbers, which is ", "{\n \
    \   if((a<b) && (b<c))\n    {\n        return sqrt(pow(b, 2.0) + pow(c, 2.0));\n\
    \    }\n    else if((a<b) && (c<b))\n    {\n        return sqrt(pow(b, 2.0) +\
    \ pow(a, 2.0));\n    }\n    else if(b<a) \n    {\n        return sqrt(pow(a, 2.0)\
    \ + pow(c, 2.0));\n    }\n    return -1;\n}", "{\n    if(a > 0 && b > 0 && c >\
    \ 0)\n    {\n        if( a >= b && a >= c )\n            return std.math.remainder(\
    \ a * b + c * b , 2.0f );\n        if( b >= c )\n            return std.math.remainder(\
    \ a * b + c * c , 2.0f );\n        if( c >= a )\n            return std.math.remainder(\
    \ a * c + b * c , 2.0f );\n        return -1;\n    }\n    else\n        return\
    \ -1;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\nIt is an old question but I have\
    \ found a way to find out if two points are in same triangle or not. \nAlgorithm\
    \ used is as follows-\n-We need two points to be in same triangle or not.\n-We\
    \ want to find the angles in both lines and find the common angle between them\
    \ and then divide it by two. \n-If remainder is 0 then the angle is same else\
    \ different \n<code>\n#include<stdio.h>\n#include<stdlib.h>", "{\n    //Triangle\n\
    \    if (b > c && a > b){\n        //The sum of the sides equals the third side\n\
    \        if (a == c){\n            return a;\n        }\n        //The sum of\
    \ the sides equals the second side\n        if (b == c){\n            return b;\n\
    \        }\n        //The sum of the sides equals the second side\n        if\
    \ (a == b){\n            return c;\n        }\n    }\n    //None of the sides\
    \ are valid\n    return -1;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=c#,.net\
    \ |>\nThe code you provided is just one method, and it has nothing to do with\
    \ drawing. What you probably need to do is refactor the code so that instead of\
    \ it checking for a single triangle that intersects, it checks for multiple triangles\
    \ intersect (maybe one area is zero and the rest are non-zero) and then checks\
    \ to see if the sum of the areas is non-zero to see if there are any triangles\
    \ that intersect.\n<|/ a |>\n<| c |>\nNo, i just want to draw that triangle, I\
    \ don't want to find any triangles that intersect. ", "{\n    // Your code here\n\
    \    // return (a+b+c)/2.0\n    float result = (a + b + c) / 2.0;\n    if (result\
    \ > b)\n        result = b;\n    if (result < a)\n        result = a;\n    return\
    \ result;\n}", "{\n    float result = 0.0;\n    if (a + b > c)\n    {\n      \
    \  result = c / b;\n    }\n    else if (b + c > a)\n    {\n        result = a\
    \ / c;\n    }\n    else\n    {\n        result = a + b + c;\n    }\n    float\
    \ rounded = round(result * 100) / 100;\n    return rounded * 0.5;\n}", "{\n  \
    \  // TODO: Write your code here", "{\n    if (a >= b && a >= c) {\n        return\
    \ 0;\n    }\n    if (b >= a && b >= c) {\n        return 0;\n    }\n    if (c\
    \ >= a && c >= b) {\n        return 0;\n    }\n    if (a + b + c <= 3) {\n   \
    \     return 0;\n    }\n    double x1 = (a + b) / 2;\n    double x2 = (a + c)\
    \ / 2;\n    double x3 = (b + c) / 2;\n    double y1 = Math.sqrt(x1 * x1 + x2 *\
    \ x2);\n    double y2 = Math.sqrt(x3 * x3 + x1 * x1);\n    double y3 = Math.sqrt(x2\
    \ * x2 + x3 * x3);\n    double s = x1 * y2 + x2 * y3 + x3 * y1;\n    if (s > 0)\
    \ {\n        s = 1 / s;\n    } else {\n        s = 0;\n    }\n    return a * s\
    \ * s;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nA general solution which\
    \ can handle triangles with any number of sides can be found here - https://gist.github.com/bpeters/634708\
    \ (Thanks goes to Barry).\n<code>\nimport std.stdio;\nimport std.string;\nimport\
    \ std.algorithm;\nimport std.array;\nimport std.algorithm;\nimport std.typecons;\n\
    import std.math;\nimport std.algorithm;", "{\n    if (a <= 0 || b <= 0 || c <=\
    \ 0)\n        return -1;\n    if (a + b <= c)\n        return -1;\n    if (a +\
    \ c <= b)\n        return -1;\n    if (b + c <= a)\n        return -1;\n    \n\
    \    return round(Math.sqrt(a + b + c)) / 2;\n}\n/*", "{\n\tfloat area;\n\tif\
    \ (a >= b)\n\t{\n\t\tif (b >= c)\n\t\t{\n\t\t\tarea = (b * b) - 4 * a * c;\n\t\
    \t}\n\t\telse\n\t\t{\n\t\t\tarea = ((a * a) + (b * b)) - (4 * a * c);\n\t\t}\n\
    \t}\n\telse\n\t{\n\t\tif (c >= a)\n\t\t{\n\t\t\tarea = (c * c) - 4 * (a * b);\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tarea = ((a * a) + (c * c)) - (4 * (a * b));\n\t\t\
    }\n\t}\n\tif (area > 0)\n\t{\n\t\tarea = sqrt(area);\n\t\tif (area >= 1.0)\n\t\
    \t{\n\t\t\treturn round(area * 100) / 100;\n\t\t}\n\t}\n\treturn -1;\n}\n/*",
  "{\n    return std.math.abs((std.math.abs(std.math.sqrt(std.math.pow(a, 2.0) + std.math.pow(b,\
    \ 2.0)) - std.math.pow(std.math.hypot(a, b), 2.0))) + (std.math.pow(std.math.hypot(a,\
    \ b), 2.0) * (std.math.pow(c, 2.0) - std.math.pow(std.math.hypot(b, c), 2.0))));\n\
    }", "{\n    float area = ((a + b + c)/2);\n    bool isValid = isValidTriangle(a,b,c);\n\
    \    if(isValid)\n    {\n        area = round(area*100.0) / 100.0;\n    }\n  \
    \  return area;\n}", "{\n    if (b > c) {\n        swap(a, b, c);\n    }\n   \
    \ long d = b - a;\n    long e = c - a;\n    if (e == 0)\n        return 0;\n \
    \   long f = sqrt(pow(d, 2) + pow(e, 2));\n    if (f < 1e-12)\n        return\
    \ -1L;\n    return acos(float((a+b+c)/2)) / f;\n}", "{ \n\tfloat sideA = std.sqrt(a*a\
    \ + b*b);\n\tfloat sideB = std.sqrt(b*b + c*c);\n\tfloat sideC = std.sqrt(c*c\
    \ + a*a);", "{\n    if((a + b + c) > 0) {\n        long s = a + b + c;\n     \
    \   return roundf(sqrt(pow(a, 2.0f) + pow(s, 2.0f)));\n    }\n    return -1.0f;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHow is this any different from Danny's answer?\
    \ Please elaborate. [Link-only answers are discouraged](http://meta.stackexchange.com/questions/8231/are-answers-that-just-contain-links-elsewhere-really-good-answers).\n\
    <|/ c |>\n<| c |>\nI added my own implementation and some comments just to point\
    \ out my error. I am not very familiar with Stackoverflow and I thought I was\
    \ providing a direct answer to the question. Now I see it is not.\n<|/ c |>\n\
    <| a tags=geometry,java,triangular,math,area |>\n<code>\nimport java.util.ArrayList;\n\
    import java.util.List;", "{\n    bool result = false;\n    long s = a + b > c;\n\
    \    long t = b + c > a;\n    long u = c + a > b;\n    \n    // the only valid\
    \ case\n    if (s != t && s != u) \n    {\n        result = true;\n    }\n   \
    \ // not valid\n    else\n    {\n        // a is not equal to a or b is greater\
    \ than a\n        if (s == t)\n        {\n            if (s == u) \n         \
    \   {\n                result = false;\n            }\n            // b is not\
    \ greater than or equal to a or c is greater than a\n            else if (u ==\
    \ c) \n            {\n                result = false;\n            }\n       \
    \     // c is not greater than or equal to a or b is greater than a\n        \
    \    else if (t == u)\n            {\n                result = false;\n      \
    \      }\n        }\n        // b is not equal to a or c is greater than a\n \
    \       else if (s == u)\n        {\n            if (s == t) \n            {\n\
    \                result = false;\n            }\n            // a is not greater\
    \ than or equal to a or c is greater than a\n            else if (t == c)\n  \
    \          {\n                result = false;\n            }\n            // c\
    \ is not greater than or equal to a or b is greater than a\n            else if\
    \ (u == c)\n            {\n                result = false;\n            }\n  \
    \      }\n        // c is not equal to a or b is greater than a\n        else\n\
    \        {\n            if (s == t) \n            {\n                result =\
    \ false;\n            }\n            // b is not greater than or equal to a or\
    \ c is greater than a\n            else if (u == c)\n            {\n         \
    \       result = false;\n            }\n            // a is not greater than or\
    \ equal to a or c is greater than a\n            else if (t == u)\n          \
    \  {\n                result = false;\n            }\n        }\n    }\n    //\
    \ not valid\n    if (!result) \n    {\n        return -1L;\n    }\n    // valid\
    \ case\n    return round(sqrt(s*(s - t) * (s - u) * (s - t) + t*(t-u) * (u-t))\
    \ * 1000.0) / 1000.0; \n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=c++,trigonometry,math\
    \ |>\n<code>\n#include<iostream>\nusing namespace std;", "{\n    float area;\n\
    \    long a, b, c;\n    a = length(a);\n    b = length(b);\n    c = length(c);\n\
    \    area = std.math.mul(a, std.math.mul(b, c));\n    if (area > c)\n        area\
    \ = std.math.mul(area, std.math.sub(b, c));\n    else if (area < b)\n        area\
    \ = std.math.mul(area, std.math.sub(a, b));\n    return std.math.roundToFloat(area,\
    \ 2);\n}\n</code>\n<|/ a |>\n<| c |>\nThis is a nice answer but if you want area\
    \ of triangle then your function should be `float triangle_area(float a, float\
    \ b, float c)`. You should also add `if (area >= c) return area;` after `area\
    \ = std.math.mul(area, std.math.sub(b, c));`\n<|/ c |>\n<| c |>\nI missed that,\
    \ thank you!\n<|/ c |>\n<| a |>\n<code>\nfloat myTriangleArea(float,float,float);\n\
    </code>\nfunction declaration:\n<code>\nfloat myTriangleArea(float a, float b,\
    \ float c);\n</code>\nfunction definition:\n<code>\nfloat myTriangleArea(float\
    \ a, float b, float c)\n{\n    float area;\n    area= a*b*c;\n    return area;\n\
    }\n</code>\n<|/ a dscore=3 tags=algorithm,geometry,c |>\n<| a tags=algorithm,geometry,c\
    \ |>\n<code>\nfloat triangle_area(float a, float b, float c){\n    float area;\n\
    \    area = a*b*c;\n    return area;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Can you explain why this works?\n<|/ c |>\n<| a tags=algorithm,geometry,c dscore=2\
    \ |>\n<code>\nfloat triangle_area(float a, float b, float c)\n{\n    float area;\n\
    \    area = a*b*c;\n    return area;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,geometry,c\
    \ dscore=1 |>\n<code>\nfloat triangle_area(float a, float b, float c)\n{\n   \
    \ float area;\n    area = a*b*c;\n    return area;\n}\n</code>\n<|/ a |>\n<| a\
    \ |>\n<code>\n#include <stdio.h>\n#include <math.h>", "{ \n    return std.math.rectangle(a,\
    \ b, c, true).radius;\n} \n</code>\n<|/ a |>\n<| a |>\nThe mathematical definition\
    \ of area for a triangle is:", "{\n\tif (std.typecons.eq(long.zero,a))\n\t\treturn\
    \ long.zero;\n\tif (std.typecons.eq(long.zero,b))\n\t\treturn long.zero;\n\tif\
    \ (std.typecons.eq(long.zero,c))\n\t\treturn long.zero;\n\t\n\tif (std.math.greater_eq(a,b)\
    \ && std.math.greater_eq(b,c))\n\t{\n\t\tfloat s = float(b - a);\n\t\tfloat t\
    \ = float(b - c);\n\t\treturn std.math.round_to_even(s * 0.5F + t * 0.5F);\n\t\
    }\n\telse\n\t{\n\t\tif (std.math.greater_eq(a,c))\n\t\t\treturn long.zero;\n\t\
    \telse\n\t\t\treturn long.one;\n\t}\n}", "{\n    float s = (a + b < c) ? a + b\
    \ : c;\n    float e = (a + c < b) ? a + c : b;\n    float f = (b + c < a) ? b\
    \ + c : a;\n    float area = 0.5 * (s + e - f);\n    \n    return round (area,\
    \ 2);\n}\n</code>\n<|/ a dscore=0 tags=java,geometry,triangle |>\n<| c |>\nIt\
    \ would be more helpful to the OP and further visitors, if you add some explaination\
    \ to your intension.\n<|/ c |>\n<| c |>\nThank you for your suggestions.\n<|/\
    \ c |>\n<| a tags=java,geometry,triangle |>\n<code>\npublic class Triangle{\n\
    \    private int A;\n    private int B;\n    private int C;", "{\n    // The formula\
    \ is area = sqrt(s * (s-a) * (s-b) * (s-c))\n    // where s = (a+b+c)/2\n    float\
    \ s = (a + b + c) / 2.0F;\n    return std::sqrt(s * (s - a) * (s - b) * (s - c));\n\
    }\n</code>\n<|/ a tags=geometry,c++,triangle,area |>\n<| a dscore=0 tags=geometry,c++,triangle,area\
    \ |>\nHere is a solution without using STL.\n<code>\nfloat triangle_area(float\
    \ a,float b,float c) {\n    float s = (a + b + c) / 2.0F;\n    return std::sqrt(s\
    \ * (s-a) * (s-b) * (s-c));\n}\n</code>\n<|/ a |>\n<| a |>\nHere is my answer\
    \ which uses only STL\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>", "{\n\tlong area = 0.0;\n\tif (a >= b + c || b >= a + c || c >=\
    \ a + b) \n\t\treturn -1.0;\n\telse \n\t{\n\t\tarea = std.math.rectangle(a,b,c,b+c).h\
    \ / 2.0f;\n\t}\n\treturn area;\n}\n/*", "{\n    float area;\n    if((a + b > c)\
    \ && (b + c > a) && (a + c > b)) {\n        area = 0.5f * (a + b + c);\n     \
    \   return area;\n    } else {\n        area = (float) -1L;\n        return area;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| c |>\nA more mathematically correct answer is\
    \ `0.5*(a + b + c - a*b)` since `area = (a + b + c - a*b)` will always be `0.5\
    \ * (a + b + c)`.\n<|/ c |>\n<| c |>\nIt's been a while but why `0.5*` instead\
    \ of `1L` ? I'm really curious. I don't understand what that is.\n<|/ c |>\n<|\
    \ c |>\n`1L` is a long, which can hold values up to 2^63-1. `a*b` will overflow\
    \ a long long int (2^63-1) when `a` is larger. So `1L*a` will overflow while `a*b`\
    \ won't. Instead of getting a negative value, you get a very large number that\
    \ can cause overflow in the next step `a + b > c`. It makes more sense to round\
    \ it to 0.\n<|/ c |>\n<| c |>\nThanks for the explanation!\n<|/ c |>\n<| a tags=algorithm,geometry,math\
    \ |>\nIf you have 3 points P1, P2 and P3 the triangle area is :\n<code>\nArea\
    \ = abs((Area of segment 1 of triangle + Area of segment 2 of triangle)/2)\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=algorithm,geometry,math |>\nThe area of a triangle\
    \ is calculated using the formula \n<code>\narea = a * b * h\n</code>\nWhere a\
    \ is the length of the 1st side, b is the length of the 2nd side and h is the\
    \ length of the 3rd side.\nThis can be calculated using the following code:\n\
    <code>\npublic static double getArea(int side1, int side2, int side3) {", "{\n\
    \tif(a>b && b>c)\n\t\treturn triangle_area(a-b,b-a,c-a);\n\telse if(b>a && a>c)\n\
    \t\treturn triangle_area(b-a,a-b,c-a);\n\telse\n\t\treturn 0;\n}\n'''", "{\n \
    \   float area = sqrt((a*a) + (b*b) + (c*c));\n    if (area > 0) \n        return\
    \ round((area+1e-12)*100)/100.0; \n    else \n        return -1;\n}", "{\n  long\
    \ d1 = (b-a)*0.5f;\n  long d2 = (c-b)*0.5f;\n  long d3 = (c-a)*0.5f;\n  if(d1>d2\
    \ && d2>d3) return std.sqrt(d1*d1+d2*d2+d3*d3);\n  if(d1>d2) return -1;\n  if(d2>d3)\
    \ return -1;\n  return std.sqrt(d1*d1+d2*d2+d3*d3);\n}", "{\n    float x1;\n \
    \   float x2;\n    float x3;\n    float area;", "{\n    return std.math.abs (a\
    \ * b - c * c);\n}", "{\n    // Write your code here\n    long sum = b+c;\n  \
    \  if(sum>a){\n        sum-=a;\n    }\n    if(sum>b){\n        sum-=b;\n    }\n\
    \    if(sum>c){\n        sum-=c;\n    }\n    return (float)sum/2.0f;\n}", "{\n\
    \    // First check if one of the sides is greater than the other\n    if(a +\
    \ b > c)\n    {\n        return -1;\n    }\n    if(b + c > a)\n    {\n       \
    \ return -1;\n    }\n    if(a + c > b)\n    {\n        return -1;\n    }\n   \
    \ // If all sides are equal\n    if(a == b && a == c)\n    {\n        return 0;\n\
    \    }\n    // If all sides are equal\n    if(a == b)\n    {\n        return c;\n\
    \    }\n    return (float) ((a * b * c)/((a + b) * (b + c) * (a + c)));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nIf `a` = `b` and you perform the other `if` statement, will\
    \ the third `if` statements be satisfied?\n<|/ c |>\n<| c |>\nGood question. I\
    \ believe you are correct. I changed the `if(a == b)` to `if(a == b && (b != c))`\
    \ and then tested it. Good call. Thank you!\n<|/ c |>\n<| a tags=java,math |>\n\
    Here is a simple solution which returns the area of valid triangles. You have\
    \ to add 2 if statements just to check if all three sides are equal\n<code>\n\
    public static double triangleArea(long side1, long side2, long side3) {\n    if\
    \ (side1 == side2 && side2 == side3 && side1 == side3) {\n        return 0.0;\n\
    \    }\n    if (side1 == side2 && side1 == side3) {\n        return side1;\n \
    \   }\n    if (side2 == side3 && side1 == side2) {\n        return side1;\n  \
    \  }\n    if (side2 == side3 && side1 == side3) {\n        return side1;\n   \
    \ }\n    return side1 * side2 / (Math.sqrt((side1 * (side1 - side2)) * (side1\
    \ * (side1 - side3)) * (side2 * (side2 - side3)) * (side3 * (side3 - side1)));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\nAnother solution:\n<code>\npublic class\
    \ Triangle {\n    public static void main(String[] args) {\n        double ans\
    \ = 0.0;\n        \n        System.out.println(\"Enter three sides of Triangle\"\
    );\n        \n        Scanner sc = new Scanner(System.in);\n        \n       \
    \ long s1,s2,s3;\n        \n        s1 = sc.nextLong();\n        s2 = sc.nextLong();\n\
    \        s3 = sc.nextLong();\n        \n        ans = triangleArea(s1, s2, s3);\n\
    \        \n        System.out.println(ans);\n    }\n    \n    public static double\
    \ triangleArea(long a, long b, long c) {\n        if (", "{\n    if (a <= 0 ||\
    \ b <= 0 || c <= 0)\n        return -1;", "{\n    // The triangle is valid if\
    \ the sum of any two sides is greater than the third side\n    return a < b ?\
    \ a + b : b < c ? b + c : a + c;\n}", "{\n    if ( a == b )\n    {\n        if\
    \ ( b == c )\n        {\n            return 0;\n        }\n        else\n    \
    \    {\n            return -1;\n        }\n    }\n    else if ( b == c )\n   \
    \ {\n        return 0;\n    }\n    else\n    {\n        float s = a + b + c;\n\
    \        if ( s > 0 )\n        {\n            return float( s / a );\n       \
    \ }\n        else\n        {\n            return -1;\n        }\n    }\n}\n</code>\n\
    <|/ a tags=c,math,geometry |>\n<| a tags=c,math,geometry |>\nThe simple solution\
    \ is to use Heron's formula. \n<code>\ndouble getArea(double a, double b, double\
    \ c){\n    double s = (a + b + c) / 2.0;\n    return s*sqrt(s*(s-a)*(s-b)*(s-c));\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nI did it in an oneliner using\
    \ awk:\n<code>\n$ awk '{print -sqrt(a^2+b^2+c^2)}'\n</code>\n<|/ a tags=c,math,geometry\
    \ |>\n<| a tags=c,math,geometry dscore=3 |>\nHere is my approach (python):\n<code>\n\
    import math", "{\n\tfloat s;\n\tfloat area;", "{ \n    return std.math.tof((std.math.fabs(a+b)\
    \ > std.math.fabs(a+c)) ? a + b : a + c) / 2.0f; \n} ", "{\n\tif (a+b>c) \n\t\t\
    return -1L;\n\telse\n\t{\n\t\tfloat s = (a + b + c)/2;\n\t\treturn std.math.sqrt(s\
    \ * (s-a) * (s-b) * (s-c));\n\t}\n}", "{\n\treturn (a + b + c) / 2.0f;\n}", "{\n\
    \    if (a < b+c) return (float)(sqrt(pow(b,2)+pow(c,2)));\n    if (b < a+c) return\
    \ (float)(sqrt(pow(a,2)+pow(c,2)));\n    if (c < a+b) return (float)(sqrt(pow(a,2)+pow(b,2)));\n\
    \    return -1L;\n}", "{\n    float area;\n    if (a+b+c > c) {\n        area\
    \ = sqrt(pow(a+b+c-a,2)/2);\n    } else {\n        area = -1;\n    }\n    \n \
    \   return (area == -1) ? 0.0 : round(area,2);\n}\n/*\n    Write a function that\
    \ determines if two numbers are equal\n    Example:\n    >>> is_equal(1, 2)\n\
    \    True\n*/", "{\n    float d, area, e, f, g, h;\n    d = ((a * b) + (c * 3));\n\
    \    g = ((b * 3) - (a * 2));\n    h = ((c * 3) - (a * 2));\n    if (d <= 0) {\n\
    \        return -1;\n    }\n    if (g < 0) {\n        return -1;\n    }\n    if\
    \ (h < 0) {\n        return -1;\n    }\n    area = f / h;\n    e = (f*g) / h;\n\
    \    area = std.math.pi * std.math.abs((area) / (e));\n    return area;\n}\n</code>\n\
    <|/ a tags=geometry,c++,trigonometry,c dscore=5 |>\n<| c |>\nGood answer, but\
    \ it would have made a lot more sense to link to a site that would have included\
    \ your code.\n<|/ c |>\n<| c |>\nYeah, but nobody can give me any link to download\
    \ the source code of those libraries. I posted it here because I had the solution\
    \ and I thought it might be helpful to someone else.\n<|/ c |>\n<| a tags=geometry,c++,trigonometry,c\
    \ |>\nUse a standard library function or write your own. This will make it much\
    \ easier to maintain and extend. Also easier to understand for others.\n<|/ a\
    \ dscore=3 |>\n<| a tags=geometry,c++,trigonometry,c dscore=3 |>\nThis code calculates\
    \ the area of a triangle. The triangle is defined by three points. \n<code>\n\
    // this program calculates the area of a triangle. \n#include<iostream> \nusing\
    \ namespace std; ", "{\n    // write your code here\n    float area = -1;", "{\n\
    \tdouble area;\n\tif (a+b > c && b+c > a && c+a > b)\n\t{\n\t\tarea = sqrt(pow((float)(a-b),2)+pow((float)(b-c),2)+pow((float)(c-a),2));\n\
    \t\tarea = area/2;\n\t}\n\telse\n\t\tarea = -1;\n\treturn area;\n}\n/*", "{\n\t\
    if (a >= b && a >= c)\n\t\treturn a + b + c;\n\tif (b >= a && b >= c)\n\t\treturn\
    \ b + a + c;\n\tif (c >= a && c >= b)\n\t\treturn c + a + b;\n\tif (a == 0 ||\
    \ b == 0 || c == 0)\n\t\treturn -1L;\n\tfloat s = (a * b + c * a + b * c) / (2\
    \ * c);\n\treturn s;\n}\n//============================================================================\n\
    //========================= END OF FUNCTIONS =====================================\n\
    //============================================================================",
  "{\n  if((a+b) > c) {\n    return -1.0;\n  }\n  else if((b+c) > a) {\n    return\
    \ -1.0;\n  }\n  else if((c+a) > b) {\n    return -1.0;\n  }\n  else {\n    return\
    \ math.round(math.sqrt(a*b + b*c + c*a) * 100.0) / 100.0;\n  }\n}\n\"\"\"", "{\n\
    \    if(a<0 || b<0 || c<0)\n    {\n        return -1;\n    }\n    \n    //Get\
    \ the hypotenuse\n    float a = sqrt ((float) ((a * a) + (b * b)));\n    float\
    \ b = sqrt ((float) ((a * a) + (c * c)));\n    float c = sqrt ((float) ((b * b)\
    \ + (c * c)));\n    \n    if(b < c || a < b)\n    {\n        return -1;\n    }\n\
    \    \n    //get the area of the triangle\n    float h = a * b * c;\n    \n  \
    \  //round the area to the 2 decimals\n    return round (sqrt (h / 2) / 10) /\
    \ 10.0f;\n}", "{\n    bool aIsValid = true;\n    bool bIsValid = true;\n    bool\
    \ cIsValid = true;\n    if (a < 0 || b < 0 || c < 0) {\n        return -1;\n \
    \   }\n    else if (a + b > c) {\n        aIsValid = false;\n    }\n    else if\
    \ (a + c > b) {\n        bIsValid = false;\n    }\n    else if (b + c > a) {\n\
    \        cIsValid = false;\n    }\n    if (aIsValid && bIsValid && cIsValid) {\n\
    \        return round(sqrt(pow((a + b + c) / 2, 2L)));\n    } else {\n       \
    \ return -1;\n    }\n}\n</code>\n<|/ a |>\n<| a |>\nHere is an implementation\
    \ in C#:\n<code>\npublic double AreaOfTriangle(double a, double b, double c) //\
    \ formula from Wikipedia\n{\n    double d; // the discriminant\n    double s;\
    \ // the side lengths\n    double q; // the area of the triangle\n    double h;\
    \ // the area of the base of the triangle", "{\n  if((a+b+c) <= (a+b) || \n  \
    \   (a+b+c) <= (b+c) || \n     (a+b+c) <= (c+a)) {\n    return std.math.toFloat(std.typecons.sign((a\
    \ + b + c) / 2)) * sqrt((a*a) + (b*b) + (c*c))\n  } else {\n    return -1L;\n\
    \  }\n}", "{\n  if(abs(a-b) > abs(c-b) && abs(a-b) > abs(c-a))\n    return (float)(sqrt((a+b)*(a\
    \ + c) + (b+c)*(b + a))/2);\n  else if(abs(a-c) > abs(c-a) && abs(a-c) > abs(c-b))\n\
    \    return (float)(sqrt((a+c)*(a+b) + (b+c)*(b+a))/2);\n  else if(abs(b-c) >\
    \ abs(c-a) && abs(b-c) > abs(c-b))\n    return (float)(sqrt((b+c)*(b+a) + (a+c)*(a+b))/2);\n\
    \  else \n    return -1L;\n}", "{\n    long s, x, y, z;\n    long area;\n    \n\
    \    s = a + b + c;\n    if(s == 0) \n    {\n        return -1;\n    }\n    \n\
    \    x = a < b ? (a-b) : (a - b);\n    y = a < c ? (a-c) : (a-c);\n    z = b <\
    \ c ? (b - c) : (b - c);\n    \n    area = x*y/z;\n    return std.math.round(area,\
    \ 2);\n}", "{\n    if (a <= 0)\n        return -1;\n    \n    float side1 = (float)\
    \ (a * sqrt(3.0));\n    float side2 = (float) (b * sqrt(3.0));\n    float side3\
    \ = (float) (c / sqrt(3.0));", "{\n    float ab, bc, ac;\n    \n    ab = b-a;\n\
    \    bc = c-b;\n    ac = a-c;\n    \n    if (ab > bc) {\n        if (ab > ac)\
    \ {\n            return (a + c)/2.0;\n        } else {\n            return (c\
    \ + b)/2.0;\n        }\n    } else {\n        if (bc > ac) {\n            return\
    \ (a + b)/2.0;\n        } else {\n            return (c + a)/2.0;\n        }\n\
    \    }\n    \n}", "{\n  float area = 0.5f*(a+b+c);\n  return area;\n}", "{\n \
    \   if( (b - a) > c || (c - b) > a ) return -1L;\n    if( a + b + c > 3 ) return\
    \ -1L;\n    return ( a * b * c ) / std.sqrt( (b - a) * (c - b) * (a - c) );\n}",
  "{\n\tlong s = (a + b > c) ? b + c : b - c;\n\tlong area;", "{\n    float s = (a\
    \ + b + c) / 2;\n    float area;\n    \n    if (a < b) {\n        if ((b > c))\
    \ {\n            area = sqrt(s * (s - a) * (s - b) * (s - c));\n        } else\
    \ {\n            area = sqrt(s * (s - a) * (s - b) * (b - c));\n        }\n  \
    \  } else {\n        if ((a > c)) {\n            area = sqrt(s * (s - a) * (a\
    \ - b) * (s - c));\n        } else {\n            area = sqrt(s * (s - a) * (a\
    \ - b) * (a - c));\n        }\n    }\n    \n    if (area > 0)\n    {\n       \
    \ return roundf(area, 2);\n    }\n    else\n    {\n        return -1L;\n    }\n\
    }\n</code>\n<|/ a tags=c++,function,math,geometry dscore=4 |>\n<| c |>\n\"If the\
    \ first three sides are equal then there are no side lengths that are greater\
    \ than the third side\" -- this is not true. If you consider two equal sides being\
    \ zero, then the third side must be greater. Consider three equal sides being\
    \ 10, 11, and 12. Your function will return `0` instead of `0`.\n<|/ c |>\n<|\
    \ c |>\nYou're right. My bad. I'll fix that.\n<|/ c |>\n<| c |>\nAnd this would\
    \ give the wrong result for input `1,2` and `1,2`.\n<|/ c |>\n<| a tags=c++,function,math,geometry\
    \ dscore=4 |>\n<code>\n#include <math.h>", "{\n    float a, b, c, s, area_sum;",
  "{\n\tif(a>b+c) return -1;\n\tif(b>a+c) return -1;\n\tif(a>b+c) return -1;\n\tlong\
    \ sides = a+b+c;\n\tif(sides>2)\n\t{\n\t\tdouble area=(a+b+c-sides)*0.5;\n\t\t\
    return round(area, 2);\n\t}\n\telse\n\t\treturn -1;\n}", "{\n    long sum = a+b+c;\
    \ // to make sure sum is greater than the third side\n    long a = sqrt(a*a+b*b+c*c);\n\
    \    if (a>b)\n        if (b > c)\n            return sum/2;\n        else\n \
    \           return -1;\n    else\n        return -1;\n}", "{\n    float s = (a\
    \ + b > c ? a : (b + c > a ? b : c));\n    return (a + b > c ? s * 0.5 : (a +\
    \ c > b ? s : (c + b > s ? c : s)));\n}\n</code>\n<|/ a tags=c,algorithm,geometry\
    \ |>\n<| c |>\nWhy are you multiplying by 0.5? Is it possible to make an argument\
    \ in favor of dividing by 2?\n<|/ c |>\n<| c |>\nI think it's better to just divide\
    \ the sum by the total area of the triangle instead of just dividing the sum by\
    \ 2.\n<|/ c |>\n<| c |>\nIt's true that dividing by 2 works better for certain\
    \ triangle shapes, but that's not the point of this question. He was asking for\
    \ a more general solution that would work for any triangle shape, and this is\
    \ the simplest possible solution that still works.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. My point was just that this is probably a slightly more complicated\
    \ solution than necessary for most real-world situations, since for most shapes,\
    \ a triangle is symmetric, so you can just check that the area of the perimeter\
    \ is equal to the area of the triangle, and then divide by two. No need to complicate\
    \ the code. Not that I don't think the code above is more complicated than necessary,\
    \ but it seems like an overly complicated solution.\n<|/ c |>\n<| c |>\nIt is\
    \ a valid solution for some cases but not for all cases. For example, triangles\
    \ with negative sides. Also it seems that this solution doesn't work for triangles\
    \ with angles close to 90 degrees.\n<|/ c |>\n<| a tags=c,algorithm,geometry |>\n\
    <code>", "{\n\tlong sum = a+b+c;\n\tfloat answer = 0.0f;\n\tlong h1 = sqrt(a)*sqrt(b);\n\
    \tlong h2 = sqrt(a)*sqrt(c);\n\tlong h3 = sqrt(b)*sqrt(c);\n\tif(h1>0 && h2>0\
    \ && h3>0) {\n\t\tif(h1>h2 && h2>h3) {\n\t\t\tanswer = sqrt(a)*sqrt(b);\n\t\t\t\
    answer = sqrt(a)*sqrt(c);\n\t\t\tanswer = sqrt(b)*sqrt(c);\n\t\t} else {\n\t\t\
    \tanswer = 0.0f;\n\t\t}\n\t} else {\n\t\tanswer = -1.0f;\n\t}\n\tif(answer < 0.01f)\
    \ answer = -1.0f;\n\treturn answer + 0.01f;\n}\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis code is great, but I have some concerns. First, can you explain how\
    \ it works? Second, are you sure it's correct? Last but not least, how about performance?\n\
    <|/ c |>\n<| c |>\nThe code works fine, as it is. I just added some comments.\n\
    <|/ c |>\n<| c |>\n\"The code works fine, as it is. I just added some comments.\"\
    \ -- Why did you add the comments? Are you certain that they work?\n<|/ c |>\n\
    <| c |>\nThe comments don't work for my code, so I added some of my own. Also,\
    \ I don't have direct access to the internet, so I can't see for certain if it\
    \ works. I know it works. However, I wouldn't use this code if I had to optimize\
    \ it for performance.\n<|/ c |>\n<| c |>\n\"The comments don't work for my code,\
    \ so I added some of my own.\" -- In general, it would be good to add the code\
    \ that fails. Otherwise, I cannot see any reason why it should not work, unless\
    \ someone else was able to figure out what was going on in your code.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nimport java.io.BufferedReader;\nimport java.io.File;\n\
    import java.io.FileReader;\nimport java.io.IOException;", "{\n    if (a + b <=\
    \ c) return 0L;\n    float s = (a + b + c) / 2L;\n    if (s >= b) return (float)b;\n\
    \    if (s >= c) return (float)c;\n    float a1 = (a + b) / 2L;\n    float b1\
    \ = (b + c) / 2L;\n    float s1 = (float)(a1 + b1);\n    float b2 = (b + a) /\
    \ 2L;\n    float s2 = (float)(a1 + b2);\n    return (float)sqrt(s1 * s1 + s2 *\
    \ s2);\n}\n</code>\n<|/ a tags=c,c++ |>\n<| a dscore=1 |>\n<code>\n#include<stdio.h>\n\
    #include<conio.h>", "{\n    if(b <= a || c <= a || c <= b)\n        return -1L;\n\
    \    if(b > c && a > c)\n        return std.sqrt(b * b - 4 * a * c);\n    if(b\
    \ > c || a > c)\n        return std.sqrt(c * c - 4 * a * b) + b * b;\n    return\
    \ a * b / c;\n}\n</code>\n<|/ a |>\n<| c |>\nWhy does this work? `-` means subtract\
    \ a number, `a * b / c` is an expression that evaluates to a number. I don't know\
    \ how it works in this context.\n<|/ c |>\n<| c |>\nOh! I understand now. `a *\
    \ b / c` would normally be interpreted as `a * (b / c)`, but `a * b` evaluates\
    \ to a number. So `a * b / c` is effectively an expression like `(a + b) * c /\
    \ 2`. `a * (b / c)` is interpreted as `a + (b / c)`.\n<|/ c |>\n<| c |>\nNope,\
    \ that's not right. It's really `a + (b / c)`\n<|/ c |>\n<| c |>\nyeah, it's my\
    \ fault, you're absolutely right. `a * b / c` would be interpreted as `a * (b\
    \ / c)`.\n<|/ c |>\n<| a dscore=1 tags=c++,geometry,math,algorithm |>\nHere is\
    \ an implementation in c++ for checking if three given sides of a triangle form\
    \ a right triangle:\n<code>\n#include <cmath>\n#include <iostream>\n#include <vector>",
  "{\n    float area_triangle =0.0f;\n    long area_bracket = b , bracket = c;", "{\
    \ \n    float s, area, u, v, t;\n    s = (a+b+c)/2;\n    u = b*b - 4*a*c;\n  \
    \  v = a*a - b*b;\n    t = sqrt(u);\n    area = s*(t * (t * 0.5 + 1.0));\n   \
    \ \n    if (area > 0)\n        return area;\n    else\n        return -1L;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=java,geometry,math,geometry dscore=0 |>\n\
    I've been trying to do the same thing recently, and while I haven't found an answer\
    \ yet, I wanted to share how I did it. After doing the math I can say that my\
    \ method of using the three sides makes sense and appears correct.\n<code>\n/*\n\
    \    Compute area of a triangle given the lengths of the three sides. If the \n\
    \    lengths of the three sides don't form a valid triangle return -1.", "{\n\
    \    if (a >= b+c) {\n        return -1;\n    }\n    return a * b * c / std.math.remainder((a\
    \ + b + c), 2);\n}\n/*", "{\n    double result;\n    \n    if((a>0 && b>0) ||\
    \ (a==0 && b==0)) {\n        if(b<c) result = (a+b+c)/2;\n        else result\
    \ = (a+b+c)/2;\n    } else {\n        if(b<c) result = ((a*a+b*b)+(c*c)/2);\n\
    \        else result = ((a*a+b*b)+(c*c)/2);\n    }\n    result = round(result*100)/100;\n\
    \    return result;\n}", "{\n\treturn std.float(a * c / std.float(a + b + c));\n\
    }", "{\n    return abs(a - (b*b - c*c)) < 0.00001 ? 0 : sqrt(sqr(a) - sqr(b) +\
    \ sqr(c));\n}\n</code>\n<|/ a |>\n<| a tags=c++,geometry,math dscore=0 |>\nThe\
    \ answer provided is fine.\nHere is a Python implementation of triangle area:\n\
    <code>\nimport math", "{\n    if((a + b + c) < 4)\n        return -1;\n    return\
    \ (((a + b) - (c))/2);\n}", "{\n    float s = (a + b + c) / 2.0f;\n    return\
    \ s * (s - a) * (s - b) * (s - c); \n}\n/*", "{\n    // write your code here\n\
    \    long a1 = min(a,b);\n    long a2 = max(a,b);\n    long b1 = min(b,c);\n \
    \   long b2 = max(b,c);\n    long c1 = min(c,a);\n    long c2 = max(c,a);\n  \
    \  long total = a1+b1+c1+b2+c2;\n    if (total < 0){\n        return -1;\n   \
    \ }\n    long a3 = min(a1,a2);\n    long a4 = max(a1,a2);\n    long b3 = min(b1,b2);\n\
    \    long b4 = max(b1,b2);\n    long c3 = min(c1,c2);\n    long c4 = max(c1,c2);\n\
    \    float perimeter = a1*b2*c3-a2*b1*c3+a1*b2*c4-a2*b1*c4;\n    if (perimeter\
    \ > 0){\n        return round(sqrt(pow(perimeter,1.0/3.0)));\n    }else{\n   \
    \     return -1;\n    }\n}", "{\n    float area = 0.0;\n    if(a>b) {\n      \
    \  if(b>c) {\n            area = area_triangle(a, b, c);\n        }\n        else\
    \ {\n            area = area_triangle(b, c, a);\n        }\n    }\n    else {\n\
    \        if(a>c) {\n            area = area_triangle(a, c, b);\n        }\n  \
    \      else {\n            area = area_triangle(a, a, b);\n        }\n    }\n\
    \    return area;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nOne of the\
    \ best answers I've found so far is here:\n<code>\nstatic long TriangleArea(long\
    \ a, long b, long c)\n{\n    long a = a * (long) Math.Sqrt(3L);\n    long b =\
    \ b * (long) Math.Sqrt(3L);\n    long c = c * (long) Math.Sqrt(3L);", "{\n   \
    \ float side1;\n    float side2;\n    float side3;\n    \n    side1 = (a + b +\
    \ c) / 2;\n    side2 = (a + b) / 2;\n    side3 = (a + c) / 2;", "{\n    if(b==0)\n\
    \    {\n        return 0;\n    }\n    else if(b>c) return triangle_area(a+c, b+b,\
    \ c);\n    else return triangle_area(a, b, c);\n}", "{\n    if( a>=b+c )\n   \
    \ {\n        return -1;\n    }\n    if( b>=c )\n    {\n        return -1;\n  \
    \  }\n    if( c>b )\n    {\n        return -1;\n    }\n    float s = (b-a)*(c-a)*((b+c)/2.0);\n\
    \    return s;\n}\n</code>\n<|/ a |>\n<| c |>\nIt would be better to have some\
    \ sort of condition in the `else` clause that returns a positive value if `a`\
    \ > `b + c`, because otherwise you could end up with the situation where `a` is\
    \ greater than `c` but `b + c` is less than `a`, in which case the function returns\
    \ `-1` instead of `0`.\n<|/ c |>\n<| a dscore=4 |>\nI didn't want to write an\
    \ answer because this kind of problem is very easy using Math.hypot():\n<code>\n\
    #include <cmath>", "{\n    return std.math.sqrt (std.math.sqrt (a) + std.math.sqrt\
    \ (b) + std.math.sqrt (c)) ;\n}", "{\n  float area;\n  \n  area = length(a) +\
    \ length(b) + length(c);\n  if (area < 0)\n    return -1L;\n  return round(area\
    \ * 100.0) / 100.0;\n}", "{\n    if (a + b > c) {\n        float s = (a + c) /\
    \ b;\n        return 2.0 * s*(s - b) * (s - c);\n    }\n    float s = (a + b)\
    \ / c;\n    return 2.0 * s * (s - b) * (s - c);\n}", "{\n    float s = (a + b\
    \ + c) / 2;\n    if (a > b + c) {\n        return -1;\n    }\n    return std.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n}\n</code>\n<|/ a tags=algorithm,geometry,c++,area\
    \ |>\n<| c |>\nThank you for your help. I appreciate you not providing the code\
    \ directly, but instead giving a description.\n<|/ c |>\n<| a tags=algorithm,geometry,c++,area\
    \ |>\nHere is a recursive C++ solution that uses STL and C++11. I tested it on\
    \ an online IDE.\n<code>\n#include<iostream>\n#include<numeric>\n#include<vector>",
  "{\n    // If the sum of any two sides is greater than the third side\n    // or\
    \ if the two sides are equal, return -1\n    if((a + b > c) || (b + c > a) ||\
    \ (a + b > c)) return -1L;\n    \n    // Now we know that the two sides are valid.\
    \ Calculate their area.\n    long s = (a + b + c) / 2.0L;\n    return std.math.sqr(s\
    \ - a * s - b * s) - std.math.sqr(s - b * s - a * s);\n}", "{\n    float area\
    \ = 0.0F;\n    int isvalid = 1; // check if a triangle is valid or not\n    \n\
    \    if(a + b > c) \n    {\n        isvalid = 0; // if a + b > c then this is\
    \ not a valid triangle\n    }\n    else\n    {\n        area += a * b;\n     \
    \   area += a * c;\n        area += b * c;\n    }\n    \n    if(area >= b)\n \
    \   {\n        isvalid = 0; // if area >= b then this is not a valid triangle\n\
    \    }\n    else if(area >= c)\n    {\n        isvalid = 0; // if area >= c then\
    \ this is not a valid triangle\n    }\n    else\n    {\n        area = sqrtf(area);\n\
    \    }\n    \n    return isvalid ? roundf(area) : -1.0f;\n}\n</code>\n<|/ a dscore=3\
    \ tags=java |>\n<| c |>\nThe area of a triangle is defined as the sum of the sides\
    \ times their lengths. You need `long` instead of `int` to get the answer `6.0`.\n\
    <|/ c |>\n<| c |>\nYes I realized that and changed it. I just saw the other answer\
    \ after I submitted the answer. But thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=java |>\nYou can use Math#sqrt to calculate the square root of a number:\n\
    <code>\nimport java.math.*;", "{\n    float s = (a + b + c) / 2;\n    float area;\n\
    \    if (s > (a + b)) {\n        area = (b * c) - (a * b);\n    } else {\n   \
    \     area = (b * c) - (a * s);\n    }\n    return round(area / 2) == round (area);\n\
    }", "{\n    float a1, b1, c1;\n    \n    a1 = a * 0.5;\n    b1 = b * 0.5;\n  \
    \  c1 = c * 0.5;\n    \n    if(a1 + b1 + c1 < 2.0)\n    {\n        return (a *\
    \ b * c);\n    }\n    else\n    {\n        return -1;\n    }\n}", "{\n    return\
    \ (a + b > c ? c + b : a + c > b ? a + c : b);\n}", "{\n    long abs = Math.abs(a)\
    \ + Math.abs(b) + Math.abs(c);\n    float adivabs = (a+b+c) / abs;\n    float\
    \ bdivabs = (b+c) / abs;\n    float cdivabs = (a+b) / abs;\n    float absa = a\
    \ + b + c;\n    float adivabsa = (a+b+c) / absa;\n    float bdivabsa = (b+c) /\
    \ absa;\n    float cdivabsa = (a+b) / absa;\n    \n    float area_tri = 0;\n \
    \   \n    if(adivabs > adivabsa) {\n        area_tri = sqrt(absa * adivabsa +\
    \ bdivabsa * bdivabs + cdivabsa * cdivabs);\n        if(area_tri > a) \n     \
    \   {\n            area_tri = a;\n        }\n        if(area_tri > b) \n     \
    \   {\n            area_tri = b;\n        }\n        if(area_tri > c) \n     \
    \   {\n            area_tri = c;\n        }\n    }\n    else if(bdivabs > bdivabsa)\
    \ {\n        area_tri = sqrt(absa * bdivabsa + cdivabsa * cdivabs + adivabsa *\
    \ adivabs);\n        if(area_tri > a) \n        {\n            area_tri = a;\n\
    \        }\n        if(area_tri > b) \n        {\n            area_tri = b;\n\
    \        }\n        if(area_tri > c) \n        {\n            area_tri = c;\n\
    \        }\n    }\n    else if(cdivabs > cdivabsa) {\n        area_tri = sqrt(absa\
    \ * cdivabsa + adivabsa * adivabs + bdivabsa * bdivabs);\n        if(area_tri\
    \ > a) \n        {\n            area_tri = a;\n        }\n        if(area_tri\
    \ > b) \n        {\n            area_tri = b;\n        }\n        if(area_tri\
    \ > c) \n        {\n            area_tri = c;\n        }\n    }\n    else if(adivabs\
    \ == adivabsa) {\n        if(bdivabs == bdivabsa) {\n            if(cdivabs ==\
    \ cdivabsa) {\n                area_tri = abs;\n            }\n            else\
    \ if(cdivabs < cdivabsa) {\n                area_tri = sqrt(absa * cdivabsa +\
    \ adivabsa * adivabs + bdivabsa * bdivabs);\n            }\n            else {\n",
  "{\n    float result;\n    if (a > b)\n    {\n        if (a > c)\n        {\n  \
    \          result = a * (b - c) / (a - b);\n            return result;\n     \
    \   }\n        return b * (c - a) / (b - a);\n    }\n    if (b > c)\n    {\n \
    \       return a * (b - c) / (a - b);\n    }\n    return a * (c - b) / (b - a);\n\
    }", "{\n    if((a + b > c) && (a + c > b) && (b + c > a)){\n        return float(a\
    \ + b + c)/2;\n    }\n    else{\n        return -1L;\n    }\n}\n</code>\n<|/ a\
    \ tags=language-agnostic,geometry,computational-geometry,math,algorithm dscore=5\
    \ |>\n<| c |>\nYou might also want to consider using the Pythagorean theorem for\
    \ area if you think you'll need it a lot.\n<|/ c |>\n<| c |>\n+1 for the Pythagorean\
    \ Theorem (which is why I thought about posting my answer too!). That way you\
    \ don't have to write that function, and you can reuse it elsewhere. For triangle\
    \ areas this is very important, and Pythagorean is definitely the way to go.\n\
    <|/ c |>\n<| a |>\nThe solution by Straight Triangle Area is good and can be easily\
    \ generalized using Pythagorean theorem. Here is my code (Java implementation):\n\
    <code>\npublic double triangleArea(int a, int b, int c)\n{\n    int a1 = Math.abs(a),\
    \ b1 = Math.abs(b), c1 = Math.abs(c);", "{\n\treturn ((a*(b-a))+((c-a)*(b-c))+((a*c-b)*(c-a)))\
    \ / (float) sqrt((a*a)+(b*b)+(c*c));\n}", "{\n    long triangleArea;\n    \n \
    \   triangleArea = (a + b + c) / 2;\n    \n    bool validTriangle = \n       \
    \ (a <= b + c && b <= a + c && c <= a + b && triangleArea <= Math.pow(b, c));\n\
    \    \n    float triangleArea = triangleArea;\n    \n    if(!validTriangle) {\n\
    \        triangleArea = -1L;\n    }", "{\n    // Make sure the three sides make\
    \ valid triangle\n    if (a == b && b == c) return a;\n    if (a == c) return\
    \ 0;\n    if (b == c) return 0;\n    \n    // Make sure that the sum of the three\
    \ sides is greater than the third side\n    if (a + b < c) return -1;\n    \n\
    \    // Calculate the area of the triangle\n    float s = (float)(a + b + c)/2;\n\
    \    return (float)std.math.sqrt(s * (s - a) * (s - b) * (s - c));\n}", "{\n \
    \   float s = (a + b > c) ? a + b : c;\n    float t = (s + b > a) ? s + b : a;\n\
    \    float u = (s + c > b) ? s + c : b;\n    float v = (u + c > a) ? u + c : a;\n\
    \    float w = ((u + v + c) > s) ? u + v + c : s;", "{\n    float area_a = (float)\
    \ (a * c);\n    float area_b = (float) (b * c);\n    float area_c = (a * b) *\
    \ (c - a);\n    return area_a + area_b - area_c;\n}\n</code>\n<|/ a tags=c,math,geometry,c++\
    \ |>\n<| a |>\nIn a sense, this is like a set of math problems that is better\
    \ solved using different techniques. \nFirst off, there is a lot of math in the\
    \ area function. As you already know, area is a function of three variables, and\
    \ you're only really interested in its side lengths (and your formula actually\
    \ looks pretty complicated as it's just some simple multiplications). This means,\
    \ this area function should be written to take in three sides and return a value\
    \ in range [-1,1], instead of just taking in a single side and returning a value.\
    \ This means you can just plug your input into this function, and get the area\
    \ of your triangle:\n<code>\nfloat area(const float &a, const float &b, const\
    \ float &c) \n{\n    return (a*b*c - a*b*b) / (2.0f*a*c);\n}\n</code>\nNext, we\
    \ can look at how we want the triangles to form when they intersect each other.\
    \ The simplest way is to have one of the sides be the hypotenuse, meaning they\
    \ should be the same length. This can be solved by using the Pythagorean Theorem:\n\
    <code>\nfloat area(const float &a, const float &b, const float &c) \n{\n    return\
    \ (a*b*c - a*b*b) / (2.0f*a*c);\n}", "{\n    // The formula is (a+b+c) / 2d\n\
    \    long d = a + b + c;\n    if (d > 0)\n    {\n        return ((float)d / (float)(a*a+b*b+c*c))*0.02f;\n\
    \    }\n    return -1L;\n}\n</code>\n<|/ a tags=c++,trigonometry,algorithm,geometry,c\
    \ |>\n<| c |>\nThis is wrong - you didn't add up all the angles, you just calculated\
    \ the lengths of each triangle. You'd need to do `2*a + 2*b + 2*c` instead of\
    \ `a + b + c`.\n<|/ c |>\n<| c |>\nNo, you are correct about it. Thanks!\n<|/\
    \ c |>\n<| c |>\nThank you for the explanation and solution. Unfortunately this\
    \ doesn't work when all sides are negative. Also it doesn't work if all sides\
    \ are zero. I need to test all three sides.\n<|/ c |>\n<| c |>\nI see you figured\
    \ that out. You'd have to check all three sides.\n<|/ c |>\n<| c |>\nHow do you\
    \ check all three? The third side is infinity, so I can't test it.\n<|/ c |>\n\
    <| a |>\nHere is my answer. \n<code>\n#include <stdio.h>\n#include <math.h>\n\
    #define TRIANGLE_SIDES 3", "{\n    if((a + b + c) == 0) {\n        return 0;\n\
    \    }\n    if((a < b) && (b < c)) {\n        if(c < b) {\n            return\
    \ (float)(Math.sqrt(a*a*b + b*b*c))/Math.sqrt(a*a + b*b);\n        } else {\n\
    \            return (float)(Math.sqrt(a*a*c + c*c*b))/Math.sqrt(a*a + c*c);\n\
    \        }\n    }\n    if(c < b) {\n        if(a < c) {\n            return (float)(Math.sqrt(a*a*b\
    \ + b*b*c))/Math.sqrt(a*a + b*b);\n        } else {\n            return (float)(Math.sqrt(a*a*c\
    \ + c*c*b))/Math.sqrt(a*a + c*c);\n        }\n    } else {\n        if(a < c)\
    \ {\n            return (float)(Math.sqrt(a*a*c + c*c*b))/Math.sqrt(a*a + c*c);\n\
    \        } else {\n            return (float)(Math.sqrt(a*a*b + b*b*c))/Math.sqrt(a*a\
    \ + b*b);\n        }\n    }\n}", "{\n    if(a < b)\n    {\n        float t = a;\n\
    \        a = b;\n        b = t;\n    }\n    if(a < c)\n    {\n        float t\
    \ = a;\n        a = c;\n        c = t;\n    }\n    if(b < c)\n    {\n        float\
    \ t = b;\n        b = c;\n        c = t;\n    }\n    if(a == b)\n    {\n     \
    \   return c;\n    }\n    float s = (a + b) / 2.0;\n    float t = (a + c) / 2.0;\n\
    \    return s * (t - s);\n}\n</code>\nThe result is:\n<code>\n/*\n    import std.math;\n\
    \    \n    \n    */\n    \n</code>\nThe test code:\n<code>\nimport std.stdio;",
  "{\n    // a & b are greater or equal to c\n    if(b>c && b!=a)\n        return\
    \ (a+b+c)/2.0;\n    else if(a>c && b!=a)\n        return (b+c+a)/2.0;\n    else\
    \ if(b>c && a!=b)\n        return (a+b+c)/2.0;\n    else if(a>c && a!=b)\n   \
    \     return (b+c+a)/2.0;\n    else\n        return -1;\n}\n/*", "{\n    float\
    \ denom;\n    if (a > b && a > c)\n    {\n        denom = a;\n    }\n    else\
    \ if (b > a && b > c)\n    {\n        denom = b;\n    }\n    else\n    {\n   \
    \     denom = c;\n    }\n    \n    if (denom == 0.0f || denom == 1.0f)\n    {\n\
    \        return 0.0f;\n    }", "{\n    if (a > b && b > c && c > a) return std.math.sqrt(a\
    \ * a + b * b + c * c);\n    else if (a > b) return std.math.sqrt(a * a + b *\
    \ b + c * c);\n    else if (b > c) return std.math.sqrt(a * b + b * a + c * c);\n\
    \    else return std.math.sqrt(a * b + c * c);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI think this is very helpful to me. Thank you for taking your time out\
    \ to write this!\n<|/ c |>\n<| a tags=c#,geometry,math |>\nI dont know if this\
    \ is what you are looking for, but its an idea, maybe it helps you to find your\
    \ answer.\nIm assuming you already have 2 points on your triangle.\n<code>\ndouble\
    \ hypotenuse = sqrt(pow(x1-x2,2)+pow(y1-y2,2)+pow(z1-z2,2));\ndouble area=hypotenuse/(2*sqrt(3));\n\
    </code>\nI dont know if its correct to calculate area from 2 points, if so you\
    \ should add some more points to the equation.\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for responding! The problem with this equation is that if I used 2 points\
    \ I'd be trying to find an area based on one point only.\n<|/ c |>\n<| c |>\n\
    Oh sorry i didn't understand that, anyways, i think you can do it in your application\
    \ by adding a third point that is equal to the sum of your first two.\n<|/ c |>\n\
    <| c |>\nThat may be true, but it's going to be my next homework assignment ;)\
    \ But thank you for the input I appreciate it!\n<|/ c |>\n<| c |>\nI hope you\
    \ learned something out of it :), please accept the answer if it helped you!\n\
    <|/ c |>\n<| c |>\nThank you I did. Thanks for your help!\n<|/ c |>\n<| a |>\n\
    I found the answer.\n<code>\ndouble area = (Math.Sqrt(Math.Pow(a1 - a2, 2) + Math.Pow(a1\
    \ - a3, 2)) \n    +Math.Sqrt(Math.Pow(a1 - a4, 2) + Math.Pow(a1 - a5, 2)) \n \
    \   +Math.Sqrt(Math.Pow(a1 - a6, 2) + Math.Pow(a1 - a7, 2)) \n    +Math.Sqrt(Math.Pow(a1\
    \ - a8, 2) + Math.Pow(a1 - a9, 2)) \n    +Math.Sqrt(Math.Pow(a1 - ", "{\n\tif(b\
    \ >= c) return std.sqrt(a*a+b*b);\n\tif(b < c) return std.sqrt(c*c-a*a);\n\treturn\
    \ -1;\n}", "{\n\tfloat s;\n\t\n\tif((a + b > c) || (b + c > a) || (a + c > b))\
    \ {\n\t\treturn -1L;\n\t}\n\ts = (b+c)/2.0L;\n\treturn (a+b+c)/2.0L * (s*(s-a)*(s-b)*(s-c));\n\
    }", "{\n    if(b > a)\n    {\n        if(b > c)\n            return triangle_area(a\
    \ - b, b - a, c - b);\n        return triangle_area(a - b, c, c - a);\n    }\n\
    \    else if(b < a)\n    {\n        if(c > a)\n            return triangle_area(a,\
    \ b - a, c - b);\n        return triangle_area(a, b, c);\n    }\n    return a;\n\
    }", "{\n    float s1=((b+c)/2)*tan(0.5*(b+c));\n    float s2=(b*(b+c))/2;\n  \
    \  float s3=sqrt((b*b)-(s3*s2));\n    float s4=sqrt(s3*s3);\n    float area=s1/(s4*s4);\n\
    \    return area;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport java.util.Scanner;",
  "{\n\tif(a+b>c)\n\t{\n\t\tfloat s = (a+b+c)/2;\n\t\treturn 2.0*s;\n\t}\n\telse if(b+c>a)\n\
    \t{\n\t\tfloat s = (b+c+a)/2;\n\t\treturn 2.0*s;\n\t}\n\telse \n\t{\n\t\tfloat\
    \ s = (a+b+c)/2;\n\t\treturn 2.0*s;\n\t}\n}", "{\n\t// TODO: Write your solution\
    \ here\n\t\n\tif(a>b && b>c && a>c)\n\t{\n\t\treturn float (a*(a + b + c));\n\t\
    }\n\telse if(b>a && b>c && b > c)\n\t{\n\t\treturn float (b*(a + b + c));\n\t\
    }\n\telse if(a>b&&b>c&&a>c)\n\t{\n\t\treturn float (a*(a + b + c));\n\t}\n\telse\n\
    \t{\n\t\treturn -1;\n\t}\n}", "{\n\tlong d, ab, ac;\n\tif (a < b)\n\t{\n\t\tif\
    \ (a < c)\n\t\t{\n\t\t\td = a + b;\n\t\t\tab = d - c;\n\t\t\tac = d - a;\n\t\t\
    \treturn ((std.typecons.signOf((double)ab) * std.math.signOf((double)ac)) * std.math.signOf((double)d));\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\td = c;\n\t\t\tab = d - b;\n\t\t\tac = d - c;\n\t\
    \t\treturn ((std.typecons.signOf((double)ab) * std.math.signOf((double)ac)) *\
    \ std.math.signOf((double)d));\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (b < c)\n\t\t\
    {\n\t\t\td = a + c;\n\t\t\tab = d - a;\n\t\t\tac = d - b;\n\t\t\treturn ((std.typecons.signOf((double)ab)\
    \ * std.math.signOf((double)ac)) * std.math.signOf((double)d));\n\t\t}\n\t\telse\n\
    \t\t{\n\t\t\td = c;\n\t\t\tab = d - a;\n\t\t\tac = d - c;\n\t\t\treturn ((std.typecons.signOf((double)ab)\
    \ * std.math.signOf((double)ac)) * std.math.signOf((double)d));\n\t\t}\n\t}\n\t\
    return -1;\n}", "{\n    return math.abs((a + b + c) - (a + b + c));\n}\n/*\n \
    \   Write a program to find the area of a triangle given three sides.\n    Sample\
    \ Run:\n    >>> triangle_area(3, 4, 5)\n    12\n    */\nfloat triangle_area(float\
    \ a, float b, float c)\n{\n    if (abs(a - b) <= abs(a - c))\n        return triangle_area(a,\
    \ b, c);\n    if (abs(a - b) <= abs(a - c))\n        return triangle_area(b, a,\
    \ c);\n    return triangle_area(c, a, b);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n\
    function area(side) {\nvar area = Math.abs((side*side*side) - (side*side*side));\n\
    return (area / Math.sqrt(5));\n}", "{\n    return std.math.abs(a*b*c - a*b*b -\
    \ a*c*c - b*b*c)/2;\n}", "{\n\tif((a + b > c) && (b + c > a) && (c + a > b))\n\
    \t\treturn std.sqrt(std.pow(c - (a + b), 2) + std.pow((b - a), 2));\n\telse\n\t\
    \treturn -1;\n}\n/*\n\tGiven an angle in radians. Return true if that angle is\
    \ between 90 degrees and 270 degrees.\n\tExample: \n\t>>> is_between_90_270(std.angleToRad(std.pi))\n\
    \tTrue\n\t>>> is_between_90_270(std.angleToRad(std.pi + std.pi / 2))\n\tTrue\n\
    \t>>> is_between_90_270(std.angleToRad(std.pi - std.pi / 2))\n\tTrue\n\t>>> is_between_90_270(std.angleToRad(std.pi\
    \ + std.pi - std.pi / 4))\n\tFalse\n\t>>> is_between_90_270(std.angleToRad(std.pi\
    \ - std.pi - std.pi / 4))\n\tFalse\n*/", "{\n\tif((a + b > c) && (a + c > b) &&\
    \ (b + c > a))\n\t\treturn (float)(a + b + c)/2;\n\telse\n\t\treturn -1;\n}",
  "{\n    float area;\n    float x1,x2,y1,y2;\n    \n    if(a==0 && b==0 && c==0)\
    \ return 0L;", "{\n    // Return area if the triangle is a valid one. Otherwise\
    \ return -1\n    float area_of_triangle;", "{\n    float triangleArea;\n    \n\
    \    triangleArea = a*b - a*c;\n    \n    return std.math.round(triangleArea *\
    \ 100)/100;\n}", "{\n    if((long)(a+b+c) < 0)\n        return -1L;\n    long\
    \ sides = a+b+c;\n    float side_a = a/sides;\n    float side_b = b/sides;\n \
    \   float side_c = c/sides;\n    float s_area = triangle_area(side_a, side_b,\
    \ side_c);\n    long a_inv = 1/side_a;\n    long b_inv = 1/side_b;\n    long c_inv\
    \ = 1/side_c;\n    return s_area*a_inv*b_inv*c_inv;\n}", "{\n    return std.sqrt(a\
    \ * a + b * b + c * c) / 3.0;\n}\n/*", "{\n    // write your code in C/C++\n \
    \   float s = (a + b + c) / 2.0f;\n    float area = s * s;", "{\n    float area_sides\
    \ = (a + b + c) / 2.0;\n    if (area_sides > c)\n        return -1;\n    float\
    \ area_triangle = area_sides * (area_sides - a) * (area_sides - b); \n    return\
    \ std.round(area_triangle, 2); \n}\n/*", "{\n    if((long)(a+b+c) <= 0) return\
    \ -1L;", "{\n    if ( a + b > c )\n    {\n        int m = a;\n        a = b;\n\
    \        b = m;\n        m = c;\n        c = m;\n    }\n    return 2.0F*std.math.sqr((a+b)*(c-a)\
    \ - (a-b)*(c+a));\n}\n</code>\nThe result of this function will be:\n<code>\n\
    0\n-1\n0.0\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI do not know if it is a valid\
    \ solution, But here is mine:\n<code>\nimport std.stdio;\nimport std.stringio;\n\
    import std.typecons;\nimport std.math;", "{\n    float s = (a + b + c) / 2;\n\
    \    if (s > 0) {\n        if (s > a) {\n            if (s > b) {\n          \
    \      return s;\n            }\n            else {\n                return (b\
    \ - c) * (s - a);\n            }\n        }\n        else if (s > b) {\n     \
    \       return (a * (s - b));\n        }\n        else {\n            return (c\
    \ * (s - b));\n        }\n    }\n    else {\n        if (s > a) {\n          \
    \  return -1L;\n        }\n        else if (s > b) {\n            return -1L;\n\
    \        }\n        else {\n            return -1L;\n        }\n    }\n}\n</code>\n\
    <|/ a tags=python |>\n<| a |>\nHere's a solution using sympy module:\n<code>\n\
    from sympy import pi, solve, Symbol, sign", "{\n    int side1 = abs(a-b);\n  \
    \  int side2 = abs(a-c);\n    int side3 = abs(b-c);", "{\n    float area;\n  \
    \  \n    // a must be greater than b\n    if (a > b) \n    {\n        long temp\
    \ = a;\n        a = b;\n        b = temp;\n    }\n    // c must be greater than\
    \ b\n    if (c > b) \n    {\n        long temp = b;\n        c = b;\n        b\
    \ = temp;\n    }\n    \n    if (a * a + b * b > c * c) \n    {\n        // a valid\
    \ triangle\n        area = sqrtf((a * a + b * b) * (c * c - a * b));\n    }\n\
    \    else \n    {\n        area = -1L;\n    }\n    \n    // round the area to\
    \ 2 decimal points\n    area = roundf(area, 2L);\n    \n    return area;\n}",
  "{\n    double side1 = sqrt(a * a + b * b);\n    double side2 = sqrt(c * c + d *\
    \ d);\n    double sum = a + b + c;\n    double area = sqrt(sum * sum - (side1\
    \ * side1) - (side2 * side2));\n    bool ok = false;\n    if (a > b && b > c &&\
    \ area > 0)\n    {\n        double area2 = sqrt(c * c + d * d);\n        ok =\
    \ (area2 > 0 && area <= area2);\n    }\n    else if (a > c && b > c && area >\
    \ 0)\n    {\n        double area2 = sqrt(a * a + b * b);\n        ok = (area2\
    \ > 0 && area <= area2);\n    }\n    else if (a > b && a > c && area > 0)\n  \
    \  {\n        double area2 = sqrt(c * c + d * d);\n        ok = (area2 > 0 &&\
    \ area <= area2);\n    }\n    else if (b > a && b > c && area > 0)\n    {\n  \
    \      double area2 = sqrt(a * a + b * b);\n        ok = (area2 > 0 && area <=\
    \ area2);\n    }\n    else if (c > a && c > b && area > 0)\n    {\n        double\
    \ area2 = sqrt(c * c + d * d);\n        ok = (area2 > 0 && area <= area2);\n \
    \   }\n    if (ok)\n        return float(area);\n    else\n        return -1;\n\
    }\n</code>\n<|/ a tags=c++,math,trigonometry,area |>\n<| a |>\nThis is very similar\
    \ to the answer from. I would like to add that you can calculate the area of the\
    \ triangle using only integer arithmetics. This is because integer arithmetic\
    \ only has precision to ~16 decimal places and as soon as you get more than that,\
    \ you start getting rounding errors.\nSo we could calculate the area of the triangle\
    \ like this:", "{\n    return (a + b + c) / 2.0;\n}", "{\n    return ((a + b +\
    \ c) / 2.0f) / std.length(a, b, c);\n}\n</code>\n<|/ a dscore=1 tags=floating-point,math,python\
    \ |>\n<| c |>\nThis answer fails with `triangle_area(10,0,0)` which is valid and\
    \ returning a value of `-1.0` when it should return `0.0`.\n<|/ c |>\n<| c |>\n\
    Thanks for the catch! I updated my answer to correct the problem with the calculation\
    \ of zero lengths.\n<|/ c |>\n<| a tags=floating-point,math,python |>\nThis answer\
    \ will produce incorrect results when the function arguments are floating point\
    \ numbers. It may also fail to correctly calculate the area of a triangle if the\
    \ three sides form an equilateral triangle or if the function arguments are zero.\
    \ It also ignores any input that is negative, which may not be acceptable in all\
    \ cases.\n<code>\nfrom math import sqrt", "{\n    long d = b - c;\n    long e\
    \ = c - a;\n    float area;\n    if (a >= b && a >= c && e >= d && e >= b) {\n\
    \        area = float(a) / 4;\n    }\n    else if (a <= c && a <= b && e >= c\
    \ && e >= a) {\n        area = float(a + b + c) / 4;\n    }\n    else if (a >=\
    \ c && a <= b && e <= b && e <= c) {\n        area = float((a + b + c) / 3);\n\
    \    }\n    else if (a <= c && a >= b && e <= b && e <= c) {\n        area = float(a\
    \ + b) / 2;\n    }\n    else {\n        area = -1L;\n    }\n    area = float(fabs(area));\n\
    \    area = round(area, 2);\n    return area;\n}\n</code>\n<|/ a tags=triangular,math\
    \ |>\n<| c |>\nIt's worth noting that this approach is based on the triangle inequality.\
    \  It's easy to verify, for example, that the formula returns correct results\
    \ even for the following cases:", "{\n    float area, side1, side2;\n    if(b\
    \ <= a)\n    {\n        side1 = b; side2 = a;\n    }\n    else\n    {\n      \
    \  side1 = a; side2 = b;\n    }\n    \n    if((side1 + side2) > c)\n    {\n  \
    \      area = -1;\n    }\n    else\n    {\n        area = (side1 + side2) * (2.0\
    \ * c);\n    }\n    return std.round(area);\n}\n</code>\n<|/ a tags=c++,geometry\
    \ dscore=1 |>\n<| a dscore=0 |>\nThis problem can be solved in O(n log n) time\
    \ using the following steps:"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
