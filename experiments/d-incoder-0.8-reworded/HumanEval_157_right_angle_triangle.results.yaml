language: d
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    \n    long x, y, z;\n\
    \    x = a;\n    y = b;\n    z = c;\n    if ( (x>y) && (x>z) )\n    {\n      \
    \  long t;\n        t = x;\n        x = y;\n        y = t;\n    }\n    if ( (y>z)\
    \ && (y>x) )\n    {\n        long t;\n        t = y;\n        y = z;\n       \
    \ z = t;\n    }\n    if ( (z>x) && (z>y) )\n    {\n        long t;\n        t\
    \ = z;\n        z = x;\n        x = t;\n    }\n    if ( (x==y) && (x==z) )\n \
    \   {\n        return true;\n    }\n    else if ( (x==z) && (y==z) )\n    {\n\
    \        return false;\n    }\n    else if ( (x==z) && (y!=z) )\n    {\n     \
    \   long t;\n        t = x;\n        x = y;\n        y = t;\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15sa8vfl.d(16): Error: function `tmp15sa8vfl.right_angle_triangle`
    no `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15sa8vfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int ra = atan2(a - b,\
    \ c);\n    int rb = atan2(b - a, c);\n    int rc = atan2(c, a - b);\n    \n  \
    \  // Check if angle is greater than 180 degrees\n    if (ra > 180) \n       \
    \ return false; // Triangle is not right-angled\n    \n    // If ra is less than\
    \ 0, then it is in the left half of the triangle\n    if (ra < 0) \n        ra\
    \ += 360.0;\n    \n    // Check for any common factors in ra and rb\n    int common_factor\
    \ = gcd_of_three(a, b);\n    if (common_factor == 1)\n    {\n        common_factor\
    \ = gcd_of_three(b, c);\n    }\n    \n    if (common_factor == 1)\n    {\n   \
    \     common_factor = gcd_of_three(c, a);\n    }\n    \n    if (common_factor\
    \ > 1)\n    {\n        double temp = ra / common_factor;\n        if (temp > rb)\n\
    \            return false;\n        else if (temp < rc - 90)\n            return\
    \ false;\n        else\n            return true;\n    }\n    \n    return ra >\
    \ rb;\n}\n</code>\nIt can then be used like the following:\n<code>\nlong a = 4L,\
    \ b = 6L, c = 6L;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86u6_50v.d(55): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86u6_50v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a == 0 || b == 0 ||\
    \ c == 0)\n    {\n        return false\n    }\n    long long ac = abs(a), bc =\
    \ abs(b), cc = abs(c);\n    if(ac == bc)\n    {\n        if(a+c == b+c)\n    \
    \    {\n            if(b == c)\n            {\n                return true;\n\
    \            }\n            return false\n        }\n        return false;\n \
    \   }\n    long long acb = ac*bc, bcc = bc*cc, acc = ac*cc;\n    long long abc\
    \ = acb+bcc, acb = acc-abc;\n    bool aIsOdd = (acb != 0)\n    if(acb < bcc ||\
    \ acb < abc) // acb and bcc are equal, acb is not odd\n    {\n        bool acIsOdd\
    \ = (acc != 0)\n        if(acIsOdd && bc < ac)\n        {\n            return\
    \ false\n        }\n        else if(bc < ac || acIsOdd)\n        {\n         \
    \   return true\n        }\n        else if(bc == 0)\n        {\n            if((ac%bc)\
    \ == 0)\n            {\n                return true\n            }\n         \
    \   else\n            {\n                return false\n            }\n       \
    \ }\n        return false;\n    }\n    return false\n}\n</code>\n<|/ a tags=algorithm,geometry\
    \ |>\n<| c |>\nCan you explain what this algorithm is doing? I have not seen it\
    \ before.\n<|/ c |>\n<| a |>\nI solved this problem in Java using the standard\
    \ triangle inequality for triangles and this algorithm for convex polygons. You\
    \ can find the Java code and the math implementation here: https://stackoverflow.com/a/54873942/6843393\n\
    <|/ a dscore=2 tags=algorithm,geometry |>\n<| a tags=algorithm,geometry |>\nI\
    \ see that my answer is kind of old, but here is how I solved it:\nLet the side\
    \ length be A. Let the line segment A-B be the line segment that splits the rectangle\
    \ into two parts. The line segment B-A must have a length of zero.\nThe point\
    \ C is such that ABC equals zero and ABBC equals zero.\nHence if the line segment\
    \ A-C has a length of zero, the rectangle is convex, otherwise it is concave.\n\
    If the rectangle is not convex, then the line segment B-C must have a length of\
    \ zero.\n<|/ a dscore=2 |>\n<| a dscore=2 tags=algorithm,geometry |>\nI ran into\
    \ a similar problem and I thought I should post the solution I came up with in\
    \ C#. Hope it helps \nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91xumt02.d(21): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp91xumt02.d(22): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp91xumt02.d(32): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp91xumt02.d(35): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp91xumt02.d(36): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp91xumt02.d(38): Error: semicolon expected, not `if`

    /tmp/tmp91xumt02.d(41): Error: semicolon expected, not `if`

    /tmp/tmp91xumt02.d(44): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp91xumt02.d(45): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp91xumt02.d(54): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp91xumt02.d(55): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    /tmp/tmp91xumt02.d(63): Error: found `}` when expecting `;` following `return`
    s'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a>b&&b>c)\n    {\n\
    \        return (a-b) == (c-b);\n    }\n    if(a>b&&a>c)\n    {\n        return\
    \ (b-a) == (c-a);\n    }\n    if(a>b&&b>c)\n    {\n        return (a-c) == (b-c);\n\
    \    }\n    if(b>c&&b>a)\n    {\n        return (b-c) == (a-c);\n    }\n    if(b>c&&b>a)\n\
    \    {\n        return (c-a) == (b-c);\n    }\n    if(b>c&&a>a)\n    {\n     \
    \   return (a-b) == (c-b);\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph_892_a8.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmph_892_a8.__unittest_L44_C1() [0x427ae2]

    ??:? void tmph_892_a8.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  long a, b, c, ans;\n  a\
    \ = c; b = a;\n  c = a;\n  ans = false;\n  if (((b * b) - (a * c)) < 0)\n  {\n\
    \    a = b; c = a;\n    b = (long) ((-((b * b) + (a * c))) / (2 * a));\n  }\n\
    \  if (((b * b) - (a * c)) > 0)\n  {\n    a = b; c = a;\n    b = (long) ((-((b\
    \ * b) + (a * c))) / (2 * a));\n  }\n  ans = true;\n  return ans;\n}\n/*\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_wpxbnp.d(25): Error: C style cast illegal, use `cast(long)(-(b
    * b + a * c) / (2 * a))`

    /tmp/tmpy_wpxbnp.d(30): Error: C style cast illegal, use `cast(long)(-(b * b +
    a * c) / (2 * a))`

    /tmp/tmpy_wpxbnp.d(35): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_wpxbnp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\t// Write your code here.\n\
    \treturn (a+b+c) == sqrt((b*b)-(4*a*c));\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ddem15j.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ddem15j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    float bsq = pow(b, 2);\n\
    \    float csq = pow(c, 2);\n    float asq = pow(a, 2);\n    \n    if(a > bsq\
    \ && b > csq){\n        return true; \n    }\n    if(b > csq && c > asq){\n  \
    \      return true;\n    }\n    if(bsq > csq){\n        return true;\n    }\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xterp4v.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ffd]

    ??:? void tmp4xterp4v.__unittest_L33_C1() [0x427b3e]

    ??:? void tmp4xterp4v.__modtest() [0x427d7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abb6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab8d]

    ??:? runModuleUnitTests [0x42baf9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42844c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d, x, y;\n    //\
    \ a -> x -> y\n    d = b - a;\n    y = c;\n    x = (y - a) / d;\n    return !isZero(x);\
    \ // the two sides are parallel\n}\n</code>\n<|/ a dscore=0 tags=c++ |>\n<| c\
    \ |>\nI believe a right angle triangle would have 3 sides equally long, and two\
    \ of them longer than the other. Your code is correct if the sides are of equal\
    \ length.\n<|/ c |>\n<| c |>\nI think `!isZero(x)` should be `!isZero(y, x)`.\n\
    <|/ c |>\n<| c |>\nThanks, fixed. That's what I get for just answering questions,\
    \ without actually trying them ;)\n<|/ c |>\n<| a |>\nUsing STL, this can be done\
    \ pretty concisely:\n<code>\n#include <iostream>\n#include <vector>\n#include\
    \ <algorithm>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp9q4ecjd.d(25): Error: declaration expected, not `<`

    /tmp/tmpp9q4ecjd.d(34): Error: unterminated character constant

    /tmp/tmpp9q4ecjd.d(34): Error: declaration expected, not `)`

    /tmp/tmpp9q4ecjd.d(46): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(47): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(48): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(49): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(50): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(51): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(52): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(53): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(54): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(55): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(56): Error: declaration expected, not `assert`

    /tmp/tmpp9q4ecjd.d(57): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp9q4ec'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b > a) && (c > b))\
    \ // a right angle or 90 degree\n        return (a+b == c || a-b == c);\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc341s3h7.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpc341s3h7.__unittest_L22_C1() [0x427a5e]

    ??:? void tmpc341s3h7.__modtest() [0x427c04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\t// calculate the length\
    \ of the side\n\tfloat d = sqrt(pow((b - a), 2) + pow((c - a), 2));\n\t// if the\
    \ length of the side is 90 degree, return true\n\treturn (d == sqrt(pow(b - a,\
    \ 2) + pow(c - a, 2)));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaiudpz3l.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpaiudpz3l.d(21): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaiudpz3l.d", "-I/tm'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (is_even(b) && is_even(c))\
    \ \n    {\n        return false;\n    }\n    \n    if (is_even(b) || is_even(c))\n\
    \    {\n        return is_right(a, b, c);\n    }\n    \n    return is_right(c,\
    \ a, b);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppfu1f8ss.d(18): Error: undefined identifier `is_even`

    /tmp/tmppfu1f8ss.d(18): Error: undefined identifier `is_even`

    /tmp/tmppfu1f8ss.d(23): Error: undefined identifier `is_even`

    /tmp/tmppfu1f8ss.d(23): Error: undefined identifier `is_even`

    /tmp/tmppfu1f8ss.d(25): Error: undefined identifier `is_right`

    /tmp/tmppfu1f8ss.d(28): Error: undefined identifier `is_right`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppfu1f8ss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int angle;\n    \n   \
    \ // if the triangle is vertical\n    if ( c == 0 )\n        return true; // return\
    \ true if c is a vertical angle (0 degree)\n    \n    // get the angle formed\
    \ by the sides\n    angle = atan2( float(b) - float(a), float(c) - float(a));\n\
    \    \n    // if angle is 90 degrees\n    if ( angle == (float) M_PI )\n     \
    \   return true;\n    \n    // if angle is less than 90 degrees\n    if ( angle\
    \ < 0 )\n        return false;\n    \n    // if angle is between 90 and 135 degrees\n\
    \    if ( angle >= (float) M_PI )\n        return true;\n    \n    // if angle\
    \ is greater than 135 degrees\n    if ( angle < M_PI )\n        return false;\n\
    \    \n    // if the triangle is horizontal, return false\n    // NOTE: this code\
    \ is equivalent to the if/else, above\n    return ( c == a );\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2cb3b75l.d(28): Error: C style cast illegal, use `cast(float)M_PI`

    /tmp/tmp2cb3b75l.d(36): Error: C style cast illegal, use `cast(float)M_PI`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2cb3b75l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\t// We are checking for right\
    \ angle only if b and c are equal\n\tif (b == c) return b == a || b == 0;\n\t\
    if (a == 0) return false;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfwq9wzf1.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfwq9wzf1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a == 0 || b == 0 ||\
    \ c == 0) return false;\n    if(a + b < c || b + c < a || a + c < b) return false;\n\
    \    long t1 = a + b + c;\n    long t2 = b + c + a;\n    long t3 = a + b + c;\n\
    \    long t4 = b + c + a;\n    long t5 = a + c + b;\n    long t6 = c + a + b;\n\
    \    long t7 = a + c + b;\n    long t8 = c + b + a;\n    long t9 = a + b + c;\n\
    \    long t10 = b + c + a;\n    long t11 = a + c + b;\n    long t12 = b + c +\
    \ a;\n    long t13 = a + c + b;\n    long t14 = c + a + b;\n    long t15 = a +\
    \ b + c;\n    long t16 = b + c + a;\n    long t17 = a + c + b;\n    long t18 =\
    \ c + a + b;\n    long t19 = a + b + c;\n    long t20 = b + c + a;\n    long t21\
    \ = a + c + b;\n    long t22 = c + a + b;\n    long t23 = a + b + c;\n    long\
    \ t24 = b + c + a;\n    long t25 = a + c + b;\n    long t26 = c + a + b;\n   \
    \ long t27 = a + b + c;\n    long t28 = b + c + a;\n    long t29 = a + c + b;\n\
    \    long t30 = c + a + b;\n    long t31 = a + b + c;\n    long t32 = b + c +\
    \ a;\n    long t33 = a + c + b;\n    long t34 = c + a + b;\n    long t35 = a +\
    \ b + c;\n    long t36 = b + c + a;\n    long t37 = a + c + b;\n    long t38 =\
    \ c + a + b;\n    long t39 = a + b + c;\n    long t40 = b + c + a;\n    long t41\
    \ = a + c + b;\n    long t42 = b + c + a;\n    long t43 = a + b + c;\n    long\
    \ t44 = c + a + b;\n    long t45 = a + c + b;\n    long t46 = c + a + b;\n   \
    \ long t47 = a + b + c;\n    long t48 = b + c + a;\n    long t49 = a + c + b;\n\
    \    long t50 = c + a + b;\n    long t51 = a + b + c;\n    long t52 = b + c +\
    \ a;\n    long t53 = a + c + b;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx80t_q44.d(73): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx80t_q44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int d = (b - c);\n   \
    \ if (a > b || a > c) return false; \n    if (b > c || b > d) return false; \n\
    \    else return (a == c || a == d || (a == b && d == c));\n}\n</code>\n<|/ a\
    \ tags=c#,algorithm,c++ |>\n<| a tags=c#,algorithm,c++ |>\n<code>\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpio2oosin.d(23): Error: declaration expected, not `<`

    /tmp/tmpio2oosin.d(31): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(32): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(33): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(34): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(35): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(36): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(37): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(38): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(39): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(40): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(41): Error: declaration expected, not `assert`

    /tmp/tmpio2oosin.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpio2oosin.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  long d1 = abs(b - c);\n\
    \  long d2 = abs(c - a);\n  long d3 = abs(a - b);\n  if (d1 > d2 || d2 > d3)\n\
    \    return true;\n  else\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmxz73x4o.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpmxz73x4o.__unittest_L26_C1() [0x427af3]

    ??:? void tmpmxz73x4o.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle1 = acos((a*a\
    \ + b*b - c*c)/sqrt(a*a + b*b));\n    long angle2 = acos((a*a + c*c - b*b)/sqrt(a*a\
    \ + c*c + b*b));\n    return (angle1 <= angle2);\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppar4fcg_.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmppar4fcg_.d(19): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppar4fcg_.d", "-I/tm'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // Calculate the side\
    \ of the triangle. \n    long s1 = b * b - 4 * a * c;\n    long s2;\n    \n  \
    \  // If the side is negative, return false.\n    if (s1 < 0) \n    {\n      \
    \  return false;\n    }\n    \n    // If the side is positive, calculate the other\
    \ two sides.\n    else \n    {\n        s2 = a * a + b * b + c * c - 4 * a * b\
    \ * c;\n        if (s2 > 0) \n        {\n            return true;\n        }\n\
    \        else\n        {\n            long u = (b * b + c * c - 4 * a * c) / s1;\n\
    \            long v = (b * b - a * c + 4 * a * b) / s1;\n            return (((s1\
    \ <= 0) || ((s2 <= 0) && ((u >= 0) && (v >= 0))))\n                    || (((s1\
    \ <= 0) || ((s2 <= 0) && ((u <= 0) && (v <= 0))))\n                    || (((s1\
    \ <= 0) || ((s2 <= 0) && ((u >= 0) && (v >= 0))))\n                    || (((s1\
    \ <= 0) || ((s2 <= 0) && ((u <= 0) && (v <= 0)))));\n        }\n    }\n}\n</code>\n\
    <|/ a tags=geometry,c#,java,math,algorithm dscore=2 |>\n<| c |>\nThat looks like\
    \ some great C# code.  However, I don't understand how it could determine if there\
    \ were any sides being \"right angled\" if the sides do not have a common point\
    \ on their perimeter. Can you explain what you're doing here?\n<|/ c |>\n<| c\
    \ |>\nI realized I wrote this in the wrong language. The code above is a Python\
    \ 3 version. The math is explained in the Python 2 version. I'll leave it here\
    \ anyway in case anyone is curious.\n<|/ c |>\n<| c |>\nThis is really nice code,\
    \ but I'm having a hard time wrapping my head around how this could possibly determine\
    \ if any \"triangles\" were \"right-angled\".\n<|/ c |>\n<| a tags=geometry,c#,java,math,algorithm\
    \ |>\nHere is another solution which has worst case time complexity of O(n log\
    \ n):\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8gs9kupq.d(42): Error: found `;` when expecting `)`

    /tmp/tmp8gs9kupq.d(41): Error: found `}` when expecting `)`

    /tmp/tmp8gs9kupq.d(40): Error: found `}` when expecting `)`

    /tmp/tmp8gs9kupq.d(46): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp8gs9kupq.d(47): Error: found `<` instead of statement

    /tmp/tmp8gs9kupq.d(50): Error: unterminated character constant

    /tmp/tmp8gs9kupq.d(50): Error: unterminated character constant

    /tmp/tmp8gs9kupq.d(53): Error: unterminated character constant

    /tmp/tmp8gs9kupq.d(56): Error: unterminated character constant

    /tmp/tmp8gs9kupq.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp8gs9kupq.d(77): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gs9kupq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n   bool result = true;\n \
    \  long tempA, tempB, tempC;\n   \n   tempA = a + b + c;\n   tempB = a + b - c;\n\
    \   tempC = a - b + c;\n   \n   if(!(!(a < b) ^ !(b < c) ^ !(a < c))) return true;\
    \ //a right angle triangle\n   \n   if(!tempA ^ !tempB) return false; //no common\
    \ edge\n   \n   if(!(tempA < tempB) ^ !((tempA > tempC) ^ !tempB)) return false;\
    \ //both angles must be greater\n   \n   if(!tempB ^ !tempC) return false; //no\
    \ common edge\n   \n   if(!(tempB < tempC) ^ !((tempB > tempC) ^ !tempC)) return\
    \ false; //both angles must be greater\n   \n   return true;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nthank you for that code , will try this but what if\
    \ I want to check if my triangle is valid or not ? how do I check if two edges\
    \ are valid ? thanks again\n<|/ c |>\n<| c |>\nYou just do that by checking the\
    \ result of the function `right_angle_triangle()`. In the function `right_angle_triangle()`\
    \ I check the results of `tempA`, `tempB`, `tempC` by calling `!(!(a < b) ^ !(b\
    \ < c) ^ !(a < c))` which checks if `tempA` is greater than `tempB` or `tempB`\
    \ is greater than `tempC` or `tempC` is greater than `tempA`. Then I check if\
    \ `tempA`, `tempB` and `tempC` are not equal (`!(tempA ^ tempB)` and `!(tempB\
    \ ^ tempC)`).\n<|/ c |>\n<| c |>\nthank you so much for your help , but I got\
    \ confused I changed my code to the one I posted below but I am getting a wrong\
    \ output , can you please help me to check my code ?\n<|/ c |>\n<| c |>\n, your\
    \ example is incorrect. As I mentioned in my answer, your function `right_angle_triangle()`\
    \ checks if `a`, `b` and `c` form a right angle triangle. If you have `a = 1,\
    \ b = 2, c = 3` then this triangle is not right angle triangle because `a` is\
    \ greater than `c` and `b` is greater than `c`. And if you have `a = 2, b = 2,\
    \ c = 1` then this triangle is right angle triangle. If, however, you have `a\
    \ = 1`, `b = 1` and `\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_rhittr.d(37): Error: declaration expected, not `<`

    /tmp/tmph_rhittr.d(49): Error: unterminated string constant starting at /tmp/tmph_rhittr.d(49)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_rhittr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return std.fabs(a - b)\
    \ > std.fabs(c - b) && std.fabs(a - c) > std.fabs(b - c);\n}\n</code>\n<|/ a dscore=0\
    \ tags=c++,c,function,boolean |>\n<| a dscore=0 tags=c++,c,function,boolean |>\n\
    The original answer was correct.  Here is a more C++-esque answer:\n<code>\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2of4cr0v.d(20): Error: declaration expected, not `<`

    /tmp/tmp2of4cr0v.d(29): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(30): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(31): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(32): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(33): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(34): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(35): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(36): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(37): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(38): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(39): Error: declaration expected, not `assert`

    /tmp/tmp2of4cr0v.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2of4cr0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    /* \n        Check that\
    \ the sides are > 0 and are equal or less than twice the \n        largest side.\n\
    \    */\n    if(a <= 0 || b <= 0 || c <= 0 || a >= b+c || b >= a+c || a > 2*b\
    \ || b > 2*a || c > 2*a)\n    {\n        return false;\n    }\n    \n    /* \n\
    \        Calculate the area of the triangle using the Heron's formula\n    */\n\
    \    double a2 = a*a;\n    double b2 = b*b;\n    double c2 = c*c;\n    double\
    \ s = (a + b + c) * 0.5;\n    double area = (a2 + b2 - c2) * (s - a2 - b2 + c2);\n\
    \    \n    /* \n        Check that the area is greater than zero.\n    */\n  \
    \  if(area <= 0)\n    {\n        return false;\n    }\n    \n    /* \n       \
    \ Check that the area is equal to the sum of both sides divided by two.\n    */\n\
    \    double a3 = (a2 + b2 + c2) * (s - a2 - b2 + c2);\n    double b3 = (a2 + b2\
    \ + c2) * (s - a2 + b2 - c2);\n    double c3 = (a2 + b2 + c2) * (s - a2 + b2 +\
    \ c2);\n    return a3 == b3 && b3 == c3 && a3 == c3;\n}\n</cell>\n<cell>\n%run\
    \ \"../src/_solutions/verify_equal.py\"\n</cell>\n<cell>\n%run \"../src/_solutions/verify_reverse.py\"\
    \n</cell>\n<text>\nExercise: Write a function that takes a triangle of sides and\
    \ return a new triangle that is the other side of the original triangle rotated\
    \ by 90 degrees.\nExample:\n    >>> tri_right_side(2L, 3L, 4L)\n    (2L, 3L, 4L)\n\
    \    >>> tri_right_side(2L, 3L, 4L).sides\n    (2L, 3L, 4L)\n    >>> tri_right_side(2L,\
    \ 3L, 4L).sides\n    (2L, 3L, 4L)\n    >>> tri_right_side(2L, 3L, 4L).sides\n\
    \    (2L, 3L, 4L)\n    >>> tri_right_side(2L, 3L, 4L).sides\n    (2L, 3L, 4L)\n\
    \    >>> tri_right_side(2L, 3L, 4L).sides\n    (2L, 3L, 4L)\n    >>> tri_right_side(2L,\
    \ 3L, 4L).sides\n    (2L, 3L, 4L)\n    >>> tri_\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjph_x_68.d(52): Error: declaration expected, not `<`

    /tmp/tmpjph_x_68.d(81): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(82): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(83): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(84): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(85): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(86): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(87): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(88): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(89): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(90): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(91): Error: declaration expected, not `assert`

    /tmp/tmpjph_x_68.d(92): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjph_x_68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle = 0;\n    long\
    \ d = b * b - 4 * a * c;\n    if (d >= 0)\n    {\n        d = sqrt(d);\n     \
    \   angle = atan2(c/b, d/2 * a);\n    }\n    return (d >= 0) && (angle <= pi);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nYou should probably add this as a comment to Tom's\
    \ answer since the answers are basically identical except the variable names are\
    \ different. :)\n<|/ c |>\n<| a dscore=4 tags=c,geometry |>\n<code>\n#include\
    \ <math.h>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57zyr1dp.d(27): Error: declaration expected, not `<`

    /tmp/tmp57zyr1dp.d(30): Error: unterminated character constant

    /tmp/tmp57zyr1dp.d(39): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(40): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(41): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(42): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(43): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(44): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(45): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(46): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(47): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(48): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(49): Error: declaration expected, not `assert`

    /tmp/tmp57zyr1dp.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57zyr1dp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tlong temp1 = b+c;\n\tlong\
    \ temp2 = b+a;\n\tlong temp3 = c+a;\n\treturn (temp1 >  temp2 >  temp3) ? true\
    \ : false;\n}\n/* \n    Given the length of the sides of a triangle. Return true\
    \ if they form a \n    right-angled triangle, false otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    >>> right_angle_triangle(5L)\n    true\n    \n*/\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy4etlzvr.d(21): Error: found `>` when expecting `)`

    /tmp/tmpy4etlzvr.d(21): Error: found `temp3` when expecting `;` following `return`
    statement

    /tmp/tmpy4etlzvr.d(21): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy4etlzvr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int angle1 = atan((double)b\
    \ / (double)a);\n    int angle2 = atan((double)c / (double)a);\n    return (angle1\
    \ - angle2 >= 0.0) ? true : false;\n}\n</cell>\n<code language=xeus-cling-cpp11>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl7pqw_ai.d(18): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmpl7pqw_ai.d(18): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmpl7pqw_ai.d(19): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmpl7pqw_ai.d(19): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmpl7pqw_ai.d(22): Error: declaration expected, not `<`

    /tmp/tmpl7pqw_ai.d(28): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(29): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(30): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(31): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(32): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(33): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(34): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(35): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(36): Error: declaration expected, not `assert`

    /tmp/tmpl7pqw_ai.d(37): Error: declaration expected, not `assert`

    /tmp/tmpl7p'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool is_right_angled =\n\
    \        ((b > c ? b - c : a - c) < 0)\n        && (a > b ? b - a : a - b) < 0;\n\
    \    if (is_right_angled)\n        std::cout << \"is_right_angled\" << std::endl;\n\
    \    return is_right_angled;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you\
    \ for your answer! I tested this with some examples and it worked. But when I\
    \ tried to run it on SPOJ, the output was \"wrong answer\". I tried to run it\
    \ on my personal computer and I got the same error. Do you know why?\n<|/ c |>\n\
    <| c |>\nI checked the code and the first test case is false, but second case\
    \ is true. So the code works, it just fails for some test cases. Maybe the test\
    \ case is invalid? I don't know. My code works for `long_long_long` and `long\
    \ long` only. So, if SPOJ is giving you wrong answer, it is possible that my code\
    \ is not correct and SPOJ test cases are wrong. My code is correct and correct\
    \ test cases are wrong. I don't know why. I only can tell you that your code fails\
    \ on some test cases. Maybe there is some bug in your code or the test cases are\
    \ wrong.\n<|/ c |>\n<| c |>\nThe code works for me as well. I'm wondering if this\
    \ is because I'm working with very small numbers and SPOJ is giving me wrong answer.\n\
    <|/ c |>\n<| c |>\nSPOJ probably uses some kind of \"big num\" library, not `std`.\n\
    <|/ c |>\n<| c |>\nYeah I'm thinking so. Thank you for your effort!\n<|/ c |>\n\
    <| a |>\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc1s6n0gg.d(22): Error: use `.` for member lookup, not `::`

    /tmp/tmpc1s6n0gg.d(22): Error: found `:` when expecting `;` following statement

    /tmp/tmpc1s6n0gg.d(22): Error: found `:` instead of statement

    /tmp/tmpc1s6n0gg.d(25): Error: declaration expected, not `<`

    /tmp/tmpc1s6n0gg.d(31): Error: unterminated character constant

    /tmp/tmpc1s6n0gg.d(31): Error: unterminated character constant

    /tmp/tmpc1s6n0gg.d(34): Error: unterminated character constant

    /tmp/tmpc1s6n0gg.d(34): Error: unterminated character constant

    /tmp/tmpc1s6n0gg.d(40): Error: unterminated character constant

    /tmp/tmpc1s6n0gg.d(48): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(49): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(50): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(51): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(52): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(53): Error: declaration expected, not `assert`

    /tmp/tmpc1s6n0gg.d(54): Error: declaration '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((abs(a - c) <\
    \ b) && (abs(a - b) < c)) \n    || ((abs(a - b) < b) && (abs(b - c) < c)) \n \
    \   || ((abs(b - a) < c) && (abs(a - c) < c)) ;\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp42mxfwi7.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmp42mxfwi7.__unittest_L22_C1() [0x427b27]

    ??:? void tmp42mxfwi7.__modtest() [0x427cbc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a > b)\n    {\n  \
    \      if ((b - a) > c)\n        {\n            if (b > c)\n            {\n  \
    \              return true;\n            }\n            else\n            {\n\
    \                return false;\n            }\n        }\n        else\n     \
    \   {\n            return false;\n        }\n    }\n    else if (b > c)\n    {\n\
    \        return true;\n    }\n    else\n    {\n        return false;\n    }\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmcyhcf8d.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpmcyhcf8d.__unittest_L45_C1() [0x427a6e]

    ??:? void tmpmcyhcf8d.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // If sides are equal,\
    \ triangles are right-angled.\n    if (a == b) return true;\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9b_3g3t.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9b_3g3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // The equation to find\
    \ out if its a right angle triangle is as follows\n    //\n    // ax^2 + bx +\
    \ c = 0\n    //\n    // The discriminant is given by the following formula:\n\
    \    //\n    // | a - c| b^2\n    //\n    // Therefore, the area of a right angle\
    \ triangle is given by:\n    //\n    // | a - c | ^2 |\n    // |b^2 |  |b|\n \
    \   //\n    // Therefore:\n    //\n    // a = | - c | b^2 | \n    // b = |b|^2\
    \ | b\n    // c = | c | c\n    //\n    // So the two triangles share the same\
    \ equation to find out the area of them. \n    \n    long discriminant;\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgx5vn28e.d(40): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgx5vn28e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (b-a)==(c-a) ||\
    \ std.abs(c-b)==std.abs(c-a) || std.abs(b-a)==std.abs(b-c);\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa3ibuyo6.d(18): Error: undefined identifier `abs` in package `std`

    /tmp/tmpa3ibuyo6.d(18): Error: undefined identifier `abs` in package `std`

    /tmp/tmpa3ibuyo6.d(18): Error: undefined identifier `abs` in package `std`

    /tmp/tmpa3ibuyo6.d(18): Error: undefined identifier `abs` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa3ibuyo6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool flag = (a == b) ||\
    \ (a == c) || (b == c);\n    return flag;\n}\n</code>\n<|/ a tags=c++,algorithm,geometry\
    \ dscore=3 |>\n<| c |>\nYou have an unnecessary semicolon in your second `for`\
    \ loop in `right_angle_triangle`.\n<|/ c |>\n<| a |>\nIf you don't mind using\
    \ Boost libraries then you may find the following functions useful:\n<code>\n\
    #include <boost/geometry.hpp>\n#include <boost/geometry/geometries/point_xy.hpp>\n\
    #include <boost/geometry/geometries/polygon.hpp>\n</code>\nYou can create a polygon\
    \ as follows:\n<code>\n#include <boost/geometry/io/wkt/wkt.hpp>\n#include <boost/algorithm/string/split.hpp>\n\
    #include <boost/algorithm/string/classification.hpp>\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppk2g5ioz.d(21): Error: declaration expected, not `<`

    /tmp/tmppk2g5ioz.d(27): Error: unterminated character constant

    /tmp/tmppk2g5ioz.d(42): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(43): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(44): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(45): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(46): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(47): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(48): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(49): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(50): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(51): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(52): Error: declaration expected, not `assert`

    /tmp/tmppk2g5ioz.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppk2g5ioz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long discriminant = b\
    \ * b - 4 * a * c;\n    if (discriminant < 0)\n        return false;\n    else\
    \ if (discriminant > 0)\n        return true;\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr1_f1bv5.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr1_f1bv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b - a == 0) || (c\
    \ - b == 0))\n        return false; \nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5039hji5.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5039hji5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n   //write your code here\n\
    \   return ((a>=b) && (b>=c) && (c>=a));\n}\n</code>\n<|/ a tags=algorithm,geometry,triangulation,math\
    \ |>\n<| c |>\nI like the way you explain it. What is the advantage of using triangle\
    \ over right angle triangle? Why would you prefer one over the other?\n<|/ c |>\n\
    <| c |>\nI thought about it but was not sure how to explain it. So I thought I\
    \ should post the solution that I came up with.\n<|/ c |>\n<| c |>\nWhy would\
    \ you use triangle over right angle triangle? What advantages does this have?\
    \ Why would you prefer one over the other?\n<|/ c |>\n<| c |>\nI am sorry I did\
    \ not get your question correctly. I am not saying any thing that triangle is\
    \ better than right angle triangle I just thought the solution posted by you is\
    \ more intuitive.\n<|/ c |>\n<| c |>\nSorry for being unclear. Your answer is\
    \ more intuitive. It is a better answer because it is shorter and easier to understand.\
    \ I am looking for the advantages and disadvantages of using a right angle triangle\
    \ over triangle (or a right triangle over triangle) because I want to know how\
    \ to use right angle triangles to solve this.\n<|/ c |>\n<| a tags=algorithm,geometry,triangulation,math\
    \ dscore=0 |>\nThis question has already been answered in the following thread:\n\
    How to check if 3 sides of a triangle are perpendicular?\nHere is the code from\
    \ the link:\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5qz3dzwf.d(21): Error: declaration expected, not `<`

    /tmp/tmp5qz3dzwf.d(47): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(48): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(49): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(50): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(51): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(52): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(53): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(54): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(55): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(56): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(57): Error: declaration expected, not `assert`

    /tmp/tmp5qz3dzwf.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5qz3dzwf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long c1 = sqr(a) + sqr(b);\n\
    \    long c2 = sqr(b) + sqr(c);\n    if (c1 < c2) return false;\n    long ac =\
    \ abs(a) - abs(b);\n    long bc = abs(b) - abs(c);\n    long cc = abs(c) - abs(a);\n\
    \    long cb = sqrt(cb*cb - cc*ac);\n    return (cc + cb < ac);\n}\n'''\n# Write\
    \ your code here.\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f62o4up.d(27): Error: unterminated character constant

    /tmp/tmp7f62o4up.d(27): Error: declaration expected, not `63U`

    /tmp/tmp7f62o4up.d(27): Error: unterminated character constant

    /tmp/tmp7f62o4up.d(33): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(34): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(35): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(36): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(37): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(38): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(39): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(40): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(41): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(42): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(43): Error: declaration expected, not `assert`

    /tmp/tmp7f62o4up.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\treturn (a + b > c && a +\
    \ c > b && b + c > a);\n}\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sftavc1.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sftavc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (c+b) > a && (c+a)\
    \ > b && b > a;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpza6kirsq.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpza6kirsq.__unittest_L20_C1() [0x427a7f]

    ??:? void tmpza6kirsq.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long deg1 = math.degrees(math.acos((a\
    \ * a + b * b - c * c) / (2 * a * b)));\n    long deg2 = math.degrees(math.acos((a\
    \ * b + c * b - b * c) / (2 * a * b)));\n    return (deg1 >= 0 && deg1 <= 180\
    \ && deg2 >= 0 && deg2 <= 180);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphmo05cf.d(18): Error: undefined identifier `math`, did you mean
    function `main`?

    /tmp/tmpphmo05cf.d(19): Error: undefined identifier `math`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphmo05cf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // Code here ...\n   \
    \ bool a1 = b > c;\n    bool a2 = c > a;\n    bool a3 = c > b;\n    bool a4 =\
    \ b > a;\n    return a1 && a2 && a3 && a4;\n}\n</code>\n<|/ a tags=c++,algorithm,trigonometry,geometry\
    \ dscore=3 |>\n<| c |>\nYour answer is correct, however it could use a bit of\
    \ explanation.\n<|/ c |>\n<| c |>\nYour solution works perfectly for a triangle\
    \ with side length 1, 2, or 3. However, when side length is 1, the triangle is\
    \ considered to be right-angled. However, this does not work in all cases. For\
    \ example, for 1L and 2L, the triangle is considered right-angled. This can be\
    \ fixed by simply testing if a1+a2+a3=a4, and then returning true. Or you can\
    \ return false if a1+a2+a3!=a4. Or you can return false if a1+a2+a3>a4\n<|/ c\
    \ |>\n<| c |>\nI actually thought about that, I just thought that the simplest\
    \ solution is going to be the most \"correct\". It will work for the conditions\
    \ I thought about at least. I'll post a comment on my answer explaining why this\
    \ solution is not the best.\n<|/ c |>\n<| c |>\nI added an explanation to my answer\
    \ explaining why it might not be the best.\n<|/ c |>\n<| c |>\nYour answer has\
    \ the advantage of being both short and simple. Strangely enough, it has the disadvantage\
    \ of being unreadable.\n<|/ c |>\n<| a tags=c++,algorithm,trigonometry,geometry\
    \ |>\nYou don't need to compute the area of the triangle, since it's only relevant\
    \ in the case of a right-angled triangle. So it's enough to test whether a is\
    \ greater than or equal to b and b is greater than or equal to c:\n<code>\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_01ll__.d(25): Error: declaration expected, not `<`

    /tmp/tmp9_01ll__.d(34): Error: unterminated character constant

    /tmp/tmp9_01ll__.d(43): Error: unterminated character constant

    /tmp/tmp9_01ll__.d(43): Error: unterminated character constant

    /tmp/tmp9_01ll__.d(43): Error: unterminated character constant

    /tmp/tmp9_01ll__.d(49): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(50): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(51): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(52): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(53): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(54): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(55): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(56): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(57): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(58): Error: declaration expected, not `assert`

    /tmp/tmp9_01ll__.d(59): Error: declaration expected'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a == b) \n    {\n\
    \        if (b == c) \n        {\n            return true;\n        }\n      \
    \  if (a == c) \n        {\n            return false;\n        }\n    }\n    else\
    \ if (a == c) \n    {\n        if (b == c) \n        {\n            return false;\n\
    \        }\n        if (a == b) \n        {\n            return true;\n      \
    \  }\n    }\n    else \n    {\n        if (b == c) \n        {\n            return\
    \ false;\n        }\n        if (b == a || c == a)\n        {\n            return\
    \ true;\n        }\n    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcey72ba4.d(51): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcey72ba4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // the line equation\n\
    \    // x = a * (1 - b / c)\n    long x = (long) a * (1 - ((double) b) / (double)\
    \ c);\n    // the triangle equation\n    // y = sqrt(a * a + b * b)\n    long\
    \ y = (long) Math.sqrt((double) a * (double) a + (double) b * b);\n    \n    //\
    \ the line equation is solvable\n    // y = a * (1 - b / c)\n    long y2 = (long)\
    \ a * (1 - ((double) b) / (double) c);\n    \n    // the triangle equation is\
    \ solvable\n    // sqrt(a * a + b * b)\n    long y3 = (long) Math.sqrt((double)\
    \ a * (double) a + (double) b * b);\n    \n    // y = a * (1 - b / c)\n    long\
    \ y4 = (long) a * (1 - ((double) b) / (double) c);\n    \n    // the triangle\
    \ equation is solvable\n    // sqrt((a - x) * (a - x) + (b - y) * (b - y))\n \
    \   long y5 = (long) Math.sqrt((a - x) * (a - x) + (b - y) * (b - y));\n    \n\
    \    // the triangle equation is solvable\n    // sqrt((a - x) * (a - x) + (b\
    \ + y) * (b + y))\n    long y6 = (long) Math.sqrt((a - x) * (a - x) + (b + y)\
    \ * (b + y));\n    \n    // the triangle equation is solvable\n    // sqrt((a\
    \ + x) * (a + x) + (b + y) * (b + y))\n    long y7 = (long) Math.sqrt((a + x)\
    \ * (a + x) + (b + y) * (b + y));\n    \n    // the triangle equation is solvable\n\
    \    // sqrt((a + x) * (a + x) + (b - y) * (b - y))\n    long y8 = (long) Math.sqrt((a\
    \ + x) * (a + x) + (b - y) * (b - y));\n    \n    // the triangle equation is\
    \ solvable\n    // sqrt((a - x) * (a - x) + (b + y) * (b + y))\n    long y9 =\
    \ (long) Math.sqrt((a - x) * (a - x) + (b + y) * (b + y));\n    \n    // the triangle\
    \ equation is solvable\n    // sqrt((a + x) * (a + x) + (b - y) * (b - y))\n \
    \   long y10 = (long) Math.sqrt((a + x) * (a + x) + (b - y) * (b - y));\n    \n\
    \    // the triangle equation is solvable\n    // sqrt((a + x) * (a + x) + (b\
    \ + y) * (b + y))\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4up8x1wq.d(20): Error: C style cast illegal, use `cast(long)a`

    /tmp/tmp4up8x1wq.d(20): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmp4up8x1wq.d(20): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmp4up8x1wq.d(23): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmp4up8x1wq.d(23): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmp4up8x1wq.d(23): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmp4up8x1wq.d(23): Error: C style cast illegal, use `cast(long)Math.sqrt(cast(double)a
    * cast(double)a + cast(double)b * b)`

    /tmp/tmp4up8x1wq.d(27): Error: C style cast illegal, use `cast(long)a`

    /tmp/tmp4up8x1wq.d(27): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmp4up8x1wq.d(27): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmp4up8x1wq.d(31): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmp4up8x1wq.d(31): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmp4up8x1wq.d(31): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmp4up8x1wq.d(31)'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  if((b == c) && (b == a -\
    \ 1)) \n  {\n    return true;\n  }\n  else \n  {\n    return false;\n  }\n}\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpk7wceml_.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpk7wceml_.__unittest_L27_C1() [0x427a4a]

    ??:? void tmpk7wceml_.__modtest() [0x427bf0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return !((a-b)*(c-a)*(c-b)>0);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxpscyvxi.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpxpscyvxi.__unittest_L20_C1() [0x427a8f]

    ??:? void tmpxpscyvxi.__modtest() [0x427c0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  if(c>a || b>c)\n    return\
    \ false;\n  else if(c==a || c==b)\n    return true;\n  else\n    return (a+b <\
    \ c) && (a+c < b);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks, I thought\
    \ of doing it with a formula, but was wondering if there was a way to do it with\
    \ just logic to save computational time.\n<|/ c |>\n<| c |>\n`abs(a-b) > abs(b\
    \ - c)` could also be used.\n<|/ c |>\n<| a |>\nIf you just want to check for\
    \ right angle, you could use this:\n<code>\n#include <iostream>\n#include <cmath>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikjcutqc.d(25): Error: declaration expected, not `<`

    /tmp/tmpikjcutqc.d(42): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(43): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(44): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(45): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(46): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(47): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(48): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(49): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(50): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(51): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(52): Error: declaration expected, not `assert`

    /tmp/tmpikjcutqc.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikjcutqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    float ab = abs(b - a);\n\
    \    float ac = abs(c - a);\n    float bc = abs(b - c);\n    float abc = ab +\
    \ bc;\n    float acb = ac + ab;\n    if (abc < acb)\n    {\n        float angle\
    \ = 180.0f - math::acos(bc) / math::pi;\n        if (math::abs(angle) < math::pi\
    \ / 2.0f) \n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a tags=c++,math,trigonometry,geometry |>\n<| a |>\n\
    The question was \"how do I detect if a point lies inside a triangle\". My solution\
    \ is based on the fact that there are 4 solutions to the equation of a triangle\
    \ that have a positive area and a negative area. So, if the point is within the\
    \ triangle, it must have at least one positive solution and at least one negative\
    \ solution (the other 2 solutions can be of either directions). \nA possible algorithm\
    \ could look like this:\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vd1eppd.d(25): Error: semicolon expected, not `:`

    /tmp/tmp0vd1eppd.d(25): Error: found `:` instead of statement

    /tmp/tmp0vd1eppd.d(26): Error: found `:` when expecting `)`

    /tmp/tmp0vd1eppd.d(26): Error: found `:` instead of statement

    /tmp/tmp0vd1eppd.d(31): Error: declaration expected, not `return`

    /tmp/tmp0vd1eppd.d(32): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vd1eppd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b - c) > 0) {\n  \
    \      return (((b - a) > c && a > b) || ((b - a) < c && a > b));\n    }\n   \
    \ else {\n        return (((b - a) < c && a > b) || ((b - a) > c && a > b));\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a C# console application\
    \ to solve this problem in about 30 seconds. I'm sure it can be optimised further,\
    \ but it works. Hope it helps.\n<code>\npublic class Triangle\n{\n    public enum\
    \ Sides { A, B, C }\n    public enum TriangleType { EightSided, SixSided, Quartered,\
    \ Equilateral, Isosceles, Scalene}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpexz2ad4n.d(25): Error: declaration expected, not `<`

    /tmp/tmpexz2ad4n.d(28): Error: unterminated character constant

    /tmp/tmpexz2ad4n.d(38): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(39): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(40): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(41): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(42): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(43): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(44): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(45): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(46): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(47): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(48): Error: declaration expected, not `assert`

    /tmp/tmpexz2ad4n.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexz2ad4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (b > c)\n    {\n  \
    \      long tmp = c;\n        c = b;\n        b = tmp;\n    }\n    if (b < a)\n\
    \    {\n        long tmp = a;\n        a = b;\n        b = tmp;\n    }\n    if\
    \ (c < a)\n    {\n        long tmp = a;\n        a = c;\n        c = tmp;\n  \
    \  }\n    long x0 = a;\n    long x1 = b;\n    long x2 = c;\n    long dx = x2 -\
    \ x1;\n    if (dx > 0)\n    {\n        long dy = (x0 - x1) / (x2 - x1);\n    \
    \    if (dy == 0)\n        {\n            long dy = dx;\n        }\n        else\n\
    \        {\n            long dy = dx;\n        }\n        while (x0 != x1)\n \
    \       {\n            long y = x0 - dy;\n            long yx = y + x0;\n    \
    \        if (yx >= 0 && yx <= x2)\n            {\n                if (yx == x2\
    \ || yx == x1)\n                {\n                    return true;\n        \
    \        }\n            }\n            long y0 = y;\n            long y1 = y +\
    \ dx;\n            if (y1 > x2 && y1 > x1)\n            {\n                long\
    \ y0 = y;\n                long y1 = y + dx;\n                if (y1 > x2 && y1\
    \ > x1)\n                {\n                    if (y0 != y1)\n              \
    \      {\n                        long tmp = y1;\n                        y1 =\
    \ y0;\n                        y0 = tmp;\n                        long tmp = y0;\n\
    \                        y0 = y1;\n                        y1 = tmp;\n       \
    \             }\n                    dx = dx + (y0 - y1) / (x2 - x1);\n      \
    \              dy = dy + (yx - x0) / (x2 - x1);\n                }\n         \
    \   }\n            x0 = x1;\n            x1 = x2;\n            x2 = yx;\n    \
    \    }\n    }\n    return false;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| a\
    \ tags=c#,algorithm dscore=0 |>\n<code>\n// Right Angle Triangle with given Lengths\n\
    static bool RightAngleTriangle(long a, long b, long c)\n{\n    // Check Length\
    \ of triangle is valid\n    if (a < b + c)\n    {\n        long tmp = a;\n   \
    \     a = b;\n        b = tmp;\n    }\n    if (c < a + b)\n    {\n        long\
    \ tmp = c;\n        c = b;\n        b = tmp;\n    }\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj5cnvcoo.d(90): Error: declaration expected, not `<`

    /tmp/tmpj5cnvcoo.d(101): Error: no identifier for declarator `a`

    /tmp/tmpj5cnvcoo.d(101): Error: declaration expected, not `=`

    /tmp/tmpj5cnvcoo.d(102): Error: no identifier for declarator `b`

    /tmp/tmpj5cnvcoo.d(102): Error: declaration expected, not `=`

    /tmp/tmpj5cnvcoo.d(103): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj5cnvcoo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (((b*b) - ((a+b)*(c-b)))\
    \ == (a - (b*c)));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb449oc7l.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpb449oc7l.__unittest_L20_C1() [0x427a72]

    ??:? void tmpb449oc7l.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  // right angle if a>b or\
    \ a>c and b>c\n  // right angle if a==b or a==c and b==c\n  // right angle if\
    \ a==b or b==c and a==c\n  if (a > b) \n  {\n    if (a > c) \n    {\n      if\
    \ (b > c) \n      {\n        return true;\n      } \n      else\n      {\n   \
    \     return false;\n      } \n    } \n    else \n    {\n      return false;\n\
    \    }\n  } \n  else \n  {\n    if (a > c) \n    {\n      if (b > c) \n      {\n\
    \        return true;\n      } \n      else \n      {\n        return false;\n\
    \      }\n    } \n    else \n    {\n      return false;\n    }\n  }\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx2ejecjf.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmpx2ejecjf.__unittest_L58_C1() [0x427a66]

    ??:? void tmpx2ejecjf.__modtest() [0x427c0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = b * b - 4 * a\
    \ * c;\n    if (d < 0) return false;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxag99kok.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxag99kok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // TODO: write code\n\
    \    \n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp257eeysp.d(16): Error: function `tmp257eeysp.right_angle_triangle`
    has no `return` statement, but is expected to return a value of type `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp257eeysp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif(b>c){\n\t\tint temp=b;\n\
    \t\tb=c;\n\t\tc=temp;\n\t}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4f9rizxk.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f9rizxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int d1 = (a <= c) ? 1\
    \ : 0;\n    int d2 = (c <= b) ? 1 : 0;\n    return (!(d1 == d2)) && (!(b == c));\n\
    }\n</cell>\n<cell>\n%%python\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxf3aus7.d(22): Error: declaration expected, not `<`

    /tmp/tmpdxf3aus7.d(29): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(30): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(31): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(32): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(33): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(34): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(35): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(36): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(37): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(38): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(39): Error: declaration expected, not `assert`

    /tmp/tmpdxf3aus7.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxf3aus7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // write your code here\n\
    \    return (a + b < c);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbr7i88gw.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e6d]

    ??:? void tmpbr7i88gw.__unittest_L21_C1() [0x427a46]

    ??:? void tmpbr7i88gw.__modtest() [0x427bec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbb9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430068]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]

    ??:? runModuleUnitTests [0x42b969]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // a side\n    long s1\
    \ = (a + b) * (b + c) * (a + c) - \n            (a + b) * (b + 1) * (a + c) +\
    \ \n            (a + 1) * (b + 1) * (a + c);\n    // b side\n    long s2 = (b\
    \ + c) * (a + c) * (b + 1) - \n            (b + c) * (a + 1) * (b + 1) + \n  \
    \          (b + 1) * (a + 1) * (a + c);\n    // c side\n    long s3 = (a + b)\
    \ * (b + 1) * (a + c) + \n            (a + 1) * (b + 1) * (a + c) + \n       \
    \     (b + 1) * (a + 1) * (a + c);\n    // check signs\n    if (s1 == 0) return\
    \ (s2 == 0); \n    if (s2 == 0) return (s3 == 0); \n    if (s3 == 0) return (s1\
    \ == 0);\n    // if only one side is 0, return false\n    if ((s1 == 0) && (s2\
    \ == 0) && (s3 == 0)) return false;\n    // else, return true \n    return true;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 tags=math,c++ |>\nIn addition to\
    \ the above, here's a Python script that implements the algorithm that Bill Karwin\
    \ has in C++. It can be run interactively using Python's built-in interactive\
    \ interpreter (built into Python 3.x).\n<code>\n#! /usr/bin/env python3\n\"\"\"\
    Test if three sides of a triangle form a right angled triangle\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71tj4u_k.d(39): Error: declaration expected, not `<`

    /tmp/tmp71tj4u_k.d(42): Error: unterminated character constant

    /tmp/tmp71tj4u_k.d(42): Error: unterminated character constant

    /tmp/tmp71tj4u_k.d(45): Error: unterminated string constant starting at /tmp/tmp71tj4u_k.d(45)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71tj4u_k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if ( a == b )\n      \
    \  return b != c;\n    if ( a == c )\n        return b != c;\n    if ( b == c\
    \ )\n        return true;\n    long e  = b - c;\n    long f  = a - c;\n    long\
    \ g  = a + c;\n    long h  = b + c;\n    long i  = a + b;\n    long j  = a + c;\n\
    \    long k  = c + b;\n    long l  = b + a;\n    long m = a + b;\n    long n =\
    \ c + a;\n    return ( h + e * i - f * j == 0 && \n             k * m - l * n\
    \ == 0 &&\n             e * j + f * n == 0 );\n}\n</code>\n<|/ a tags=triangular,c++\
    \ |>\n<| a dscore=0 |>\nI solved the problem in O(N) time complexity by iterating\
    \ through both sides and calculating the distance between any two sides (side\
    \ A or B). And then checking the results of these distances to determine if the\
    \ triangle is right or not.\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhw9kv82.d(38): Error: declaration expected, not `<`

    /tmp/tmplhw9kv82.d(47): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(48): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(49): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(50): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(51): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(52): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(53): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(54): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(55): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(56): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(57): Error: declaration expected, not `assert`

    /tmp/tmplhw9kv82.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhw9kv82.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle1 = (a + b +\
    \ c) / 2;\n    long angle2 = (a - b - c) / 2;\n    long angle3 = (b - a * c /\
    \ 2) / a;\n    \n    // if the sides are all equal, triangle must be on the right\
    \ side\n    if (a == b)\n    {\n        if (b == c)\n            return true;\n\
    \        return false;\n    }\n    \n    // if the two angles are equal, triangle\
    \ must be on the right side\n    if (a == angle2)\n    {\n        if (b == angle3)\n\
    \            return true;\n        return false;\n    }\n    \n    // if only\
    \ two angles are equal, triangle must be on the right side\n    if (a == angle1)\n\
    \    {\n        if (b == angle3)\n            return true;\n        return false;\n\
    \    }\n    \n    // if angle1 and angle2 are equal, triangle must be on the right\
    \ side\n    if (a == angle1 && b == angle2)\n    {\n        if (b == angle3)\n\
    \            return true;\n        return false;\n    }\n    \n    // if angle1\
    \ and angle3 are equal, triangle must be on the right side\n    if (a == angle1\
    \ && b == angle3)\n    {\n        if (b == angle2)\n            return true;\n\
    \        return false;\n    }\n    \n    // if angle1 and angle3 are equal, triangle\
    \ must be on the right side\n    if (a == angle1 && b == angle2)\n    {\n    \
    \    if (b == angle1)\n            return true;\n        return false;\n    }\n\
    \    \n    // if angle1 and angle2 are equal, triangle must be on the right side\n\
    \    if (a == angle1 && b == angle3)\n    {\n        if (b == angle1)\n      \
    \      return true;\n        return false;\n    }\n    \n    // if angle1 and\
    \ angle2 are equal, triangle must be on the right side\n    if (a == angle2 &&\
    \ b == angle3)\n    {\n        if (b == angle1)\n            return true;\n  \
    \      return false;\n    }\n    \n    // if angle1 and angle3 are equal, triangle\
    \ must be on the right side\n    if (a == angle2 && b == angle3)\n    {\n    \
    \    if (b == angle2)\n            return true;\n        return false;\n    }\n\
    \    \n    // if angle1 and angle3 are equal, triangle must be on the right side\n\
    \    if (a == angle2 && b == angle1)\n    {\n        if (b == angle3)\n      \
    \      return true;\n        return false;\n    }\n    \n    // if angle1 and\
    \ angle2 are equal, triangle must be on the right side\n    if (a == angle2 &&\
    \ b == angle3)\n    {\n        if (b == angle1)\n            return true;\n  \
    \      return false;\n    }\n    \n    // if angle1 and angle3 are equal, triangle\
    \ must be on the right side\n    if (a == angle3 && b == angle1)\n    {\n\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe_17dwzn.d(114): Error: found `unittest` instead of statement

    /tmp/tmpe_17dwzn.d(130): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_17dwzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\t// This triangle is a right\
    \ angled triangle if the sum of the two angles\n\t// is less than 180 degrees\n\
    \tlong angle1 = (a + b + c) * math.min(a + b, c) - math.max(a + b, c);\n\tlong\
    \ angle2 = math.min(a, b);\n\tlong angle3 = math.min(c, a);\n\treturn (angle1\
    \ <= 180 && angle2 <= 180 && angle3 <= 180);\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl7skodym.d(20): Error: undefined identifier `math`, did you mean
    function `main`?

    /tmp/tmpl7skodym.d(20): Error: undefined identifier `math`, did you mean function
    `main`?

    /tmp/tmpl7skodym.d(21): Error: undefined identifier `math`, did you mean function
    `main`?

    /tmp/tmpl7skodym.d(22): Error: undefined identifier `math`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl7skodym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tbool is_right_angle = false;\n\
    \tlong side_1 = a - b;\n\tlong side_2 = c - b;\n\tlong side_3 = c - a;\n\tif (side_1\
    \ == side_2 || side_1 == side_3)\n\t{\n\t\tif (side_1 == side_3)\n\t\t{\n\t\t\t\
    if (a == b)\n\t\t\t{\n\t\t\t\tis_right_angle = true;\n\t\t\t}\n\t\t\telse\n\t\t\
    \t{\n\t\t\t\tif (a == c)\n\t\t\t\t{\n\t\t\t\t\tis_right_angle = true;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (side_2 == side_3)\n\t\t\t{\n\t\t\
    \t\tif (b == c)\n\t\t\t\t{\n\t\t\t\t\tis_right_angle = true;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (side_1 == side_2)\n\t\t{\n\t\t\tif (b == c)\n\
    \t\t\t{\n\t\t\t\tis_right_angle = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn is_right_angle;\n\
    }\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt_abofba.d(61): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt_abofba.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif (a < b) {\n\t\tif (c\
    \ < a) return true;\n\t\tif (c < b) return false;\n\t\t\n\t\tif (a < c) return\
    \ true;\n\t\tif (a < b) return false; \n\t}\n\t\n\tif (a > b) {\n\t\tif (c < b)\
    \ return true;\n\t\tif (c < a) return false; \n\t\tif (c < b) return false; \n\
    \t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_zqgtov8.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp_zqgtov8.__unittest_L34_C1() [0x427aab]

    ??:? void tmp_zqgtov8.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(isSameSide(a, b, c)\
    \ == false)\n    {\n        float d = getHypotenuse(a, b);\n        if(d < 0)\n\
    \            d = -d; // a right triangle\n        float e = getHypotenuse(c, a);\n\
    \        if(e < 0)\n            e = -e;\n        // now compare with 90 degree\n\
    \        float f = (float)(Math.atan2(b, a) / (2.0 * M_PI));\n        if( f >\
    \ d && f < e)\n            return true;\n    }\n    return false;\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx9_7qv9k.d(27): Error: C style cast illegal, use `cast(float)(Math.atan2(b,
    a) / (2.00000 * M_PI))`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx9_7qv9k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long delta;\n    \n  \
    \  if (a + b > c) \n    {\n        delta = b - c;\n        \n        if (delta\
    \ > a) \n        {\n            return false;\n        }\n    } \n    else \n\
    \    {\n        delta = a;\n        \n        if (delta > b) \n        {\n   \
    \         return false;\n        }\n    }\n    \n    return (delta - a + b) %\
    \ 360 == 180;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkrjza6d8.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmpkrjza6d8.__unittest_L41_C1() [0x427aae]

    ??:? void tmpkrjza6d8.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]

    ??:? runModuleUnitTests [0x42b9d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long sides = b*b - a*c;\n\
    \    return (b != 0 && (sides % 2) == 0) ? true : false;\n}\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4ryxquis.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmp4ryxquis.__unittest_L21_C1() [0x427a72]

    ??:? void tmp4ryxquis.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    \n    if(ab > ac)\n    {\n        return abs(a\
    \ - c) > abs(b - c);\n    }\n    else\n    {\n        return abs(a - b) > abs(c\
    \ - b);\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx9h_lp6j.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f3d]

    ??:? void tmpx9h_lp6j.__unittest_L30_C1() [0x427b02]

    ??:? void tmpx9h_lp6j.__modtest() [0x427cc0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc63]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaf6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aacd]

    ??:? runModuleUnitTests [0x42ba39]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42838c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool result;\n    bool\
    \ v1 = is_left_angle(a, b, c);\n    bool v2 = is_left_angle(b, c, a);\n    bool\
    \ v3 = is_left_angle(c, a, b);\n    result = v1 ^ v2 ^ v3;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw38npuh7.d(19): Error: undefined identifier `is_left_angle`

    /tmp/tmpw38npuh7.d(20): Error: undefined identifier `is_left_angle`

    /tmp/tmpw38npuh7.d(21): Error: undefined identifier `is_left_angle`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw38npuh7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((std.math.toDegrees(a)\
    \ == std.math.toDegrees(b) && std.math.toDegrees(a) == std.math.toDegrees(c))\
    \ || (std.math.toDegrees(b) == std.math.toDegrees(a) && std.math.toDegrees(b)\
    \ == std.math.toDegrees(c)) || (std.math.toDegrees(c) == std.math.toDegrees(a)\
    \ && std.math.toDegrees(c) == std.math.toDegrees(b)));\n}\n</code>\n<|/ a tags=java\
    \ dscore=4 |>\n<| a |>\nIn short, you need to check that the triangle is convex\
    \ and not concave by checking that the sum of the angles (clockwise and counterclockwise)\
    \ is 180 degrees.  In fact, it's probably easier to use Math.toDegrees(180 - Math.acos(...))\
    \ than to check whether the triangle is convex or concave with the angles you\
    \ mention.  Note that if your triangle is convex, then the angle of a line from\
    \ the origin to the point on the opposite side of the triangle is 180 degrees.\
    \  If it is concave, then the angle of a line from the origin to the point on\
    \ the opposite side of the triangle is 0 degrees.\n<|/ a tags=java dscore=4 |>\n\
    <| a |>\nI think you can do this in O(n), where n is the number of vertices (edges)\
    \ of your triangle:\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q1uafrt.d(20): Error: declaration expected, not `<`

    /tmp/tmp6q1uafrt.d(23): Error: unterminated character constant

    /tmp/tmp6q1uafrt.d(31): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(32): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(33): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(34): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(35): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(36): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(37): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(38): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(39): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(40): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(41): Error: declaration expected, not `assert`

    /tmp/tmp6q1uafrt.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q1uafrt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(b>c && b>a)\n    {\n\
    \        long d = (a+b+c)/2;\n        long a1 = (b+d)/2;\n        long a2 = (b-d)/2;\n\
    \        return right_angle_triangle(a1,a2,c) || right_angle_triangle(a1,a2,b);\n\
    \    }\n    if(c>a && c>b)\n    {\n        long d = (a+b+c)/2;\n        long b1\
    \ = (a+d)/2;\n        long b2 = (a-b)/2;\n        return right_angle_triangle(a,b1,b2)\
    \ || right_angle_triangle(a,b2,b1);\n    }\n    if(b>c && c>a)\n    {\n      \
    \  long d = (a+b+c)/2;\n        long b1 = (a+d)/2;\n        long b2 = (b-d)/2;\n\
    \        return right_angle_triangle(a,b1,b2) || right_angle_triangle(b1,b2,b1);\n\
    \    }\n    if(b>c && b>a)\n    {\n        long d = (a+b+c)/2;\n        long a1\
    \ = (b+d)/2;\n        long a2 = (b-d)/2;\n        return right_angle_triangle(a1,a2,c)\
    \ || right_angle_triangle(a2,a1,c);\n    }\n    if(c>a && c>b)\n    {\n      \
    \  long d = (a+b+c)/2;\n        long a1 = (a+d)/2;\n        long a2 = (b-d)/2;\n\
    \        return right_angle_triangle(a1,a2,c) || right_angle_triangle(a2,a1,b);\n\
    \    }\n    return false;\n}\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwrswhw47.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwrswhw47.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long s1;\n    long s2;\n\
    \    long s3;\n    s1 = b * b - 4 * a * c;\n    s2 = b * b - 4 * a * b;\n    s3\
    \ = a * a - b * b + c;\n    if (s2 <= 0)\n    {\n        return false; // Triangle\
    \ is right angle\n    }\n    else if (s3 <= 0)\n    {\n        return true; //\
    \ Triangle is right angle\n    }\n    return s1 == s2;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nThe other answers provide the simplest way to solve the problem\
    \ (which was to determine if a triangle was a right angle triangle), but they\
    \ miss the main point of the question (which was to determine if it is a right\
    \ angle triangle).\nThere are two ways to determine if a triangle is right angle\
    \ triangle or not:\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp26wwv1b5.d(34): Error: declaration expected, not `<`

    /tmp/tmp26wwv1b5.d(43): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(44): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(45): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(46): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(47): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(48): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(49): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(50): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(51): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(52): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(53): Error: declaration expected, not `assert`

    /tmp/tmp26wwv1b5.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26wwv1b5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d;\n    if ( a >\
    \ b )\n    {\n        d = a;\n        a = b;\n        b = d;\n    }\n    if (\
    \ a > c )\n    {\n        d = a;\n        a = c;\n        c = d;\n    }\n    if\
    \ ( b > c )\n    {\n        d = b;\n        b = c;\n        c = d;\n    }\n  \
    \  return ( a * a + b * b == c * c );\n}\n/*\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsegiy7vh.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsegiy7vh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = (b - a) * (c\
    \ - a);\n    long ac = abs(b - c);\n    long bc = abs(a - c);\nunittest\n{\n \
    \   alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6jpcczih.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6jpcczih.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return std.cos(std.radians(a))\
    \ * std.cos(std.radians(b)) * std.cos(std.radians(c)) \n\t- (std.sin(std.radians(a))\
    \ * std.sin(std.radians(b)) * std.sin(std.radians(c)))  == 0;\n}\n    \nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1ruw0nd.d(18): Error: undefined identifier `cos` in package `std`

    /tmp/tmpq1ruw0nd.d(18): Error: undefined identifier `cos` in package `std`

    /tmp/tmpq1ruw0nd.d(18): Error: undefined identifier `cos` in package `std`

    /tmp/tmpq1ruw0nd.d(19): Error: undefined identifier `sin` in package `std`

    /tmp/tmpq1ruw0nd.d(19): Error: undefined identifier `sin` in package `std`

    /tmp/tmpq1ruw0nd.d(19): Error: undefined identifier `sin` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1ruw0nd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  long d = (long) sqrt(a *\
    \ a + b * b + c * c);\n  long angle = acos(((b*b) - (a*a)) / (2 * a * d));\n \
    \ return (angle <= pi / 2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcq7zf2l.d(18): Error: C style cast illegal, use `cast(long)sqrt(a
    * a + b * b + c * c)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcq7zf2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // We must check that\
    \ the sides are non zero.\n    // It doesn't matter if the sides are the same\
    \ so long as it is non zero.\n    if(a <= 0 && b <= 0 && c <= 0) return false;\n\
    \    // We must check the triangle is non right-angled.\n    // This check will\
    \ exclude a triangle where the two sides are the same angle\n    // We must check\
    \ that the sum of the two sides is 180 (right angle).\n    // This means any of\
    \ the three sides must be > 0.\n    if(a+b <= c && a+c <= b+c) return false;\n\
    \    // The sides must be equal in all three triangles.\n    // If the sides are\
    \ the same the triangle is considered as not right-angled.\n    if(a==b==c) return\
    \ true;\n    // The sides cannot all be equal. \n    // In this case, the triangle\
    \ is considered as not right-angled.\n    if(a==c || b==c) return false;\n   \
    \ // The sides must be equal in all three triangles.\n    // If the sides are\
    \ the same the triangle is considered as not right-angled.\n    if(a==b) return\
    \ true;\n    // The sides cannot all be equal. \n    // In this case, the triangle\
    \ is considered as not right-angled.\n    if(b==c) return true;\n    // The sides\
    \ must be equal in all three triangles.\n    // If the sides are the same the\
    \ triangle is considered as not right-angled.\n    if(a==b) return true;\n   \
    \ // The sides cannot all be equal. \n    // In this case, the triangle is considered\
    \ as not right-angled.\n    if(a==c) return true;\n    // The sides cannot all\
    \ be equal. \n    // In this case, the triangle is considered as not right-angled.\n\
    \    if(b==c) return true;\n    // The sides must all be equal. \n    // In this\
    \ case, the triangle is considered as not right-angled.\n    return false;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis code does not work. Try it with `right_angle_triangle(4,\
    \ 3, 2)`.\n<|/ c |>\n<| a tags=c++,math dscore=0 |>\n<code>\n#include <stdio.h>\n\
    #include <stdlib.h>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_5l__ydu.d(28): Error: found `==` when expecting `)`

    /tmp/tmp_5l__ydu.d(28): Error: found `)` when expecting `;` following statement

    /tmp/tmp_5l__ydu.d(51): Error: declaration expected, not `<`

    /tmp/tmp_5l__ydu.d(64): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(65): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(66): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(67): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(68): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(69): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(70): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(71): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(72): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(73): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(74): Error: declaration expected, not `assert`

    /tmp/tmp_5l__ydu.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-"'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a < b)\n    {\n  \
    \      if (a < c)\n        {\n            if (b == c)\n                return\
    \ true;\n            else\n                return false;\n        }\n        else\n\
    \        {\n            if (b == c)\n                return true;\n          \
    \  else\n                return false;\n        }\n    }\n    else\n    {\n  \
    \      if (b < c)\n        {\n            if (b == c)\n                return\
    \ true;\n            else\n                return false;\n        }\n        else\n\
    \        {\n            if (b == c)\n                return true;\n          \
    \  else\n                return false;\n        }\n    }\n}\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8nffcbmz.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmp8nffcbmz.__unittest_L53_C1() [0x427a76]

    ??:? void tmp8nffcbmz.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // check which sides of\
    \ the triangle are longer than the others\n    if (a > b) {\n        if (c > b)\
    \ {\n            if (b > a) {\n                return true;\n            }\n \
    \           else {\n                return false;\n            }\n        }\n\
    \        else {\n            if (a > c) {\n                return false;\n   \
    \         }\n            else {\n                return true;\n            }\n\
    \        }\n    }\n    else {\n        if (b > c) {\n            if (a > c) {\n\
    \                return false;\n            }\n            else {\n          \
    \      return true;\n            }\n        }\n        else {\n            if\
    \ (a > b) {\n                return false;\n            }\n            else {\n\
    \                return true;\n            }\n        }\n    }\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpv65ff2zk.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmpv65ff2zk.__unittest_L56_C1() [0x427a9f]

    ??:? void tmpv65ff2zk.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d1, d2, d3;\n   \
    \ // compute d1, d2 and d3\n    d1 = (a + b + c) - (a + c - b);\n    d2 = (a +\
    \ b) - (a + c);\n    d3 = (b + c) - (a - b);\n    // check if three sides have\
    \ the same length\n    if (abs(d1) < abs(d2) && abs(d2) < abs(d3)) return true;\n\
    \    // compute angles\n    long angle1 = atan2(d2, d1);\n    long angle2 = atan2(d3,\
    \ d2);\n    long angle3 = atan2(d1, d3);\n    // return true if angle1 < angle2\
    \ and angle2 < angle3\n    return ((angle1 < angle2) && (angle2 < angle3)) ? true\
    \ : false;\n}\n</code>\n<|/ a |>\n<| a |>\nYou can calculate the Area and find\
    \ out the two sides are right angle or not. This code will do the work.\n<code>\n\
    #include <iostream>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjlxfk5e3.d(32): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjlxfk5e3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long a, b, c;\n    bool\
    \ result = false;\n    bool positive = (a+b > c);\n    a = positive? a - b : c\
    \ - b;\n    b = positive? b - c : b - a;\n    c = positive? c - a : b - c;\n \
    \   if (a >= 0 && b >= 0 && c >= 0 && a < b+c && b < a+c && c < a+b)\n    {\n\
    \        result = true;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtsa2bor.d(18): Error: variable `a` is shadowing variable `tmpxtsa2bor.right_angle_triangle.a`

    /tmp/tmpxtsa2bor.d(18): Error: variable `b` is shadowing variable `tmpxtsa2bor.right_angle_triangle.b`

    /tmp/tmpxtsa2bor.d(18): Error: variable `c` is shadowing variable `tmpxtsa2bor.right_angle_triangle.c`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtsa2bor.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int x1 = -1, x2 = -1;\n\
    \    long x3 = -1, x4 = -1;\n    if(b>a && c>a) \n    {\n        x1 = a; x2 =\
    \ b; x3 = c; x4 = a;\n    }\n    else if(b>a && c<a) \n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b>a && c>b)\n    {\n        x1 =\
    \ a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c<a)\n    {\n        x1\
    \ = a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c<b)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<b)\n    {\n        x1 = a; x2\
    \ = b; x3 = c; x4 = a;\n    }\n    else if(b<b&&c<b)\n    {\n        x1 = a; x2\
    \ = b; x3 = c; x4 = a;\n    }\n    else if(b<b&&c<a) \n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<b&&c>a)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<b&&c>b)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c<a) \n    {\n        x1 =\
    \ a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c>a)\n    {\n        x1\
    \ = a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c>b)\n    {\n        x1\
    \ = a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c<b)\n    {\n        x1 = a;\
    \ x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c<a) \n    {\n        x1 =\
    \ a; x2 = b; x3 = c; x4 = a;\n    }\n    else if(b<a&&c>a)\n    {\n        x1\
    \ = a; x2 = b; x\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05e1ipgn.d(91): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp05e1ipgn.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp05e1ipgn.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05e1ipgn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n   double d = (a + b + c)\
    \ / 2;\n   double angle = acos( \n      ((a * b + c * d - a * c - b * d) * cos(\
    \ M_PI / 180 ) ) / \n      ((pow(a, b) + pow(c, d)) * ((pow(a, b) - pow(c, d)))\
    \ ) );\n   //double angle = atan2(b,c);\n   return angle <= M_PI / 180;\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=2 |>\nHere is a simple way to check if a triangle\
    \ is right angled or not:\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjwp4i996.d(25): Error: declaration expected, not `<`

    /tmp/tmpjwp4i996.d(34): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(35): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(36): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(37): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(38): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(39): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(40): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(41): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(42): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(43): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(44): Error: declaration expected, not `assert`

    /tmp/tmpjwp4i996.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjwp4i996.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif((a*b+b*c==c*a+a*b+a*c)&&(a*a+b*b==b*c+c*a))\n\
    \t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp6jna4y4.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmpp6jna4y4.__unittest_L27_C1() [0x427aa2]

    ??:? void tmpp6jna4y4.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif (a < b)\n\t\treturn (b\
    \ < c);\n\telse \n\t\treturn (c<a); \n}\nlong a = (lengthOfSide(side1, side2,\
    \ side3) == 0) ? 0 : 1;\nlong b = (lengthOfSide(side2, side3, side4) == 0) ? 0\
    \ : 1;\nlong c = (lengthOfSide(side3, side4, side5) == 0) ? 0 : 1;\nreturn right_angle_triangle(a,\
    \ b, c);\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nHere's a javascript solution.\
    \  \n<code>\nvar isRightAngleTriangle = function(a, b, c) {\n  if (a == 0) return\
    \ (c > b) && (c > a)\n  else if (b == 0) return (a > c) && (a > b)\n  else if\
    \ (c == 0) return (a > b) && (a > c)\n  else {\n    var cMax = Math.max(a, b,\
    \ c),\n      bMax = Math.min(a, b, c),\n      aMax = Math.min(a, b, c),\n    \
    \  aInt = Math.floor(a),\n      bInt = Math.floor(b),\n      cInt = Math.floor(c);\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7s0wt00h.d(26): Error: declaration expected, not `return`

    /tmp/tmp7s0wt00h.d(27): Error: unrecognized declaration

    /tmp/tmp7s0wt00h.d(31): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7s0wt00h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a==b || a==c || b==c)\
    \ \n    {\n        return false; \n    }\n    else \n    {\n        //if the two\
    \ sides are equals, return false\n        if(a==b+c || b==c+a || c==a+b) \n  \
    \          return false;\n        //if the two sides aren't equals, return true\n\
    \        if((a+b+c) <= ((double) (a+b+c)/3))\n            return true;\n     \
    \   else\n            return false;\n    }\n}\n</code>\n<|/ a tags=c++,algorithm,geometry\
    \ |>\n<| c |>\nThis answer should probably be the accepted answer. Most people\
    \ probably aren't as experienced as you, and this one was extremely helpful.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n#include <algorithm>\n#include <vector>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmmcs0h9.d(28): Error: C style cast illegal, use `cast(double)(a
    + b + c)`

    /tmp/tmpqmmcs0h9.d(34): Error: declaration expected, not `<`

    /tmp/tmpqmmcs0h9.d(37): Error: unterminated character constant

    /tmp/tmpqmmcs0h9.d(47): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(48): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(49): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(50): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(51): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(52): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(53): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(54): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(55): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(56): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(57): Error: declaration expected, not `assert`

    /tmp/tmpqmmcs0h9.d(58): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool isRightAngle=false;\n\
    \    long a2=a/2;\n    long b2=b/2;\n    long c2=c+a2-b2;\n    long x=b2;\n  \
    \  long y=a2+b2;\n    long z=c2-a2-b2;\n    long l=a2+c2;\n    long m=(b+c)+(a2+c2);\n\
    \    long n=(a+b+c)+(a2+b2);\n    long o=(a+b)+(a2+c);\n    long p=(a+b)+(c+a2);\n\
    \    long q=(c+a2)+(b+c);\n    long r=(m+n)+(o+p);\n    long s=(a+b+c)+(c+a2);\n\
    \    long t=(a+b+c)+(b+c);\n    long u=(s+t)+(m+n)+(o+p);\n    long v=(s+t)+(m+n)+(p+o);\n\
    \    long w=(s+t)+(o+p)+(m+n);\n    long x=(a+b+c+(a2+b2+c2));\n    long y=(s+t)+(p+o)+(a2+b2+c2);\n\
    \    long z=(a+b+c+(a2+b2+c2));\n    long x1=(a+b+c+(a2+b2+c2));\n    long y1=(a+b+c+(a2+b2+c2));\n\
    \    long z1=(a+b+c+(a2+b2+c2));\n    long x2=(a+b+c+(a2+b2+c2));\n    long y2=(a+b+c+(a2+b2+c2));\n\
    \    long z2=(a+b+c+(a2+b2+c2));\n    long x3=(a+b+c+(a2+b2+c2));\n    long y3=(a+b+c+(a2+b2+c2));\n\
    \    long z3=(a+b+c+(a2+b2+c2));\n    long x4=(a+b+c+(a2+b2+c2));\n    long y4=(a+b+c+(a2+b2+c2));\n\
    \    long z4=(a+b+c+(a2+b2+c2));\n    long x5=(a+b+c+(a2+b2+c2));\n    long y5=(a+b+c+(a2+b2+c2));\n\
    \    long z5=(a\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1t08hce.d(54): Error: found `unittest` when expecting `)`

    /tmp/tmpz1t08hce.d(56): Error: semicolon expected, not `{`

    /tmp/tmpz1t08hce.d(71): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1t08hce.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b - a) == (c - b))\n\
    \    {\n        if((b - a) == 0)\n        {\n            return true;\n      \
    \  }\n        else\n        {\n            return false;\n        }\n    }\n \
    \   else\n    {\n        if((b - a) > 0)\n        {\n            return ((c *\
    \ b) - (a * c)) > (((a * b) + (b * a)) - (c * b));\n        }\n        else\n\
    \        {\n            return ((c * b) - (a * c)) < (((a * b) + (b * a)) - (c\
    \ * b));\n        }\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd9hcoju9.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f25]

    ??:? void tmpd9hcoju9.__unittest_L41_C1() [0x427afe]

    ??:? void tmpd9hcoju9.__modtest() [0x427ca4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc4b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aade]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc71]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430120]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbfd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]

    ??:? runModuleUnitTests [0x42ba21]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428374]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a==b || a==c || b==c)\n\
    \    {\n        if(a==b)\n            return true;\n        if(a==c)\n       \
    \     return true;\n        if(b==c)\n            return true;\n        return\
    \ false;\n    }\n    else if((a+b)==(b+c) || (a+c)==(c+b) || (a+b)==(b+c) || (a+c)==(c+b))\n\
    \    {\n        if(a==b)\n        {\n            return true;\n        }\n   \
    \     if(a==c)\n        {\n            return true;\n        }\n        if(b==c)\n\
    \        {\n            return true;\n        }\n        return false;\n    }\n\
    \    else\n        return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpi65cel06.d(51): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmpi65cel06.__unittest_L47_C1() [0x427abe]

    ??:? void tmpi65cel06.__modtest() [0x427c64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ac, ad, bc, bd, cd;\n\
    \    long cs, bs;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7u6vsequ.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7u6vsequ.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a == 0)\n        return\
    \ (b == 0);\n    else if (b == 0)\n        return ((c == 0) || (c == 180));\n\
    \    else if (c == 0)\n        return ((a == 0) || (a == 180));\n    else\n  \
    \      return ((b > 0) || (b == 180) || (b == 360) || (b == 0));\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpng8v99v9.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmpng8v99v9.__unittest_L27_C1() [0x427aef]

    ??:? void tmpng8v99v9.__modtest() [0x427c6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa7d]

    ??:? runModuleUnitTests [0x42b9e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    double dx = b - c;\n \
    \   double dy = c - a;\n    double angle1 = -atan2(dy, dx);\n    double angle2\
    \ = -angle1;\n    \n    return ((angle1 > angle2) || (fabs(angle1) < fabs(angle2)));\n\
    }\n</cell>\n<cell>\n%run main.py\n</cell>\n<text>\nTasks\nWrite a function that\
    \ given a triangle (a list of three lengths a, b, c), returns the area of the\
    \ triangle if it is right-angled.\nWrite a function that given a triangle (a list\
    \ of three lengths a, b, c), returns the area of the triangle if it is left-angled.\n\
    Write a function that given a triangle (a list of three lengths a, b, c), returns\
    \ the area of the triangle if it is equilateral.\nWrite a function that given\
    \ a triangle (a list of three lengths a, b, c), returns the area of the triangle\
    \ if it is isosceles.\nWrite a function that given a triangle (a list of three\
    \ lengths a, b, c), returns the area of the triangle if it is scalene.\nWrite\
    \ a function that given a triangle (a list of three lengths a, b, c), returns\
    \ the area of the triangle if it is equilateral or isosceles.\nWrite a function\
    \ that given a triangle (a list of three lengths a, b, c), returns the area of\
    \ the triangle if it is scalene or isosceles.\nWrite a function that given a triangle\
    \ (a list of three lengths a, b, c), returns the area of the triangle if it is\
    \ isosceles or scalene.\nWrite a function that given a triangle (a list of three\
    \ lengths a, b, c), returns the area of the triangle if it is equilateral or scalene\
    \ or isosceles.\nWrite a function that given a triangle (a list of three lengths\
    \ a, b, c), returns the area of the triangle if it is scalene or equilateral or\
    \ isosceles.\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzjjaybx5.d(25): Error: declaration expected, not `<`

    /tmp/tmpzjjaybx5.d(45): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(46): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(47): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(48): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(49): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(50): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(51): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(52): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(53): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(54): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(55): Error: declaration expected, not `assert`

    /tmp/tmpzjjaybx5.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzjjaybx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a + b + c) ==\
    \ (a + b + c + 1));\n}\n</code>\n<|/ a |>\n<| c |>\nPlease explain your solution.\
    \ Where is this being used?\n<|/ c |>\n<| c |>\nThe solution works great, but\
    \ the answer is wrong if a triangle's sides don't form a right angle. Your function\
    \ returns true.\n<|/ c |>\n<| a tags=c++,geometry,math,algorithm dscore=4 |>\n\
    You can check whether three sides are parallel or equal:\n<code>\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9uo2atx4.d(20): Error: declaration expected, not `<`

    /tmp/tmp9uo2atx4.d(26): Error: unterminated character constant

    /tmp/tmp9uo2atx4.d(26): Error: unterminated character constant

    /tmp/tmp9uo2atx4.d(35): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(36): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(37): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(38): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(39): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(40): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(41): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(42): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(43): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(44): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(45): Error: declaration expected, not `assert`

    /tmp/tmp9uo2atx4.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9uo2'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // We check if our length\
    \ are equal\n    if (a == b) \n    {\n        return c == b;\n    }\n    else\
    \ if (a == c) \n    {\n        return b == c;\n    }\n    \n    // Now we check\
    \ if our angles are equal\n    // We get the cos of our angles and divide by the\
    \ sum of the length \n    // We use arccos because we want to avoid errors with\
    \ float\n    long dc = cos((double)c / a + 1.0);\n    long db = cos((double)b\
    \ / a + 1.0);\n    long dab = cos((double)a / a + 1.0);\n    long aSum = a + b;\n\
    \    long cSum = c + d;\n    \n    // If one of our angles are smaller than the\
    \ others \n    // we check if the smaller angle is bigger than 90.\n    if (dc\
    \ > dab)\n    {\n        // The smaller one is bigger than 90 degree\n       \
    \ if ((dab - dc) > aSum) \n        {\n            // The smaller one is the biggest\
    \ one\n            return false;\n        }\n        else\n        {\n       \
    \     // We check if our sum is greater than the other one\n            if ((aSum\
    \ - cSum) > bSum)\n            {\n                // Our sum is bigger than the\
    \ other one\n                return false;\n            }\n            else\n\
    \            {\n                // Our sum is smaller than the other one\n   \
    \             return true;\n            }\n        }\n    }\n    else\n    {\n\
    \        if ((dc - db) > aSum) \n        {\n            // The larger one is bigger\
    \ than 90 degree\n            if ((dab - dc) > bSum) \n            {\n       \
    \         // The smaller one is the biggest one\n                return false;\n\
    \            }\n            else\n            {\n                // Our sum is\
    \ smaller than the other one\n                return true;\n            }\n  \
    \      }\n        else\n        {\n            // The smaller one is bigger than\
    \ 90 degree\n            if ((db - da) > bSum) \n            {\n             \
    \   // The larger one is the biggest one\n                return false;\n    \
    \        }\n            else\n            {\n                // Our sum is smaller\
    \ than the other one\n                return true;\n            }\n        }\n\
    \    }\n    \n    // If we get here either one of our angles is bigger than 90\
    \ degree\n    return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwehyt3oc.d(31): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmpwehyt3oc.d(32): Error: C style cast illegal, use `cast(double)b`

    /tmp/tmpwehyt3oc.d(33): Error: C style cast illegal, use `cast(double)a`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwehyt3oc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool result = false;\n\
    \    \n    //left side check\n    if( a < b )\n    {\n        long x = b;\n  \
    \      b = a;\n        a = x;\n    }\n    \n    //right side check\n    if( a\
    \ < c )\n    {\n        long x = c;\n        c = a;\n        a = x;\n    }\n \
    \   \n    //90 degree check\n    if( a > b && b > c )\n    {\n        result =\
    \ true;\n    }\n    \n    return result;\n}\n</cell>\n<cell>\nimport std.conv;\n\
    import std.string;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0zg3iati.d(44): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zg3iati.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // The Triangle is right\
    \ if either the first or second side is greater than or equal to 90 degrees.\n\
    \    return (std.cond.is_lessThanOrEqualTo(a.degree, 90.0)) || (std.cond.is_lessThanOrEqualTo(b.degree,\
    \ 90.0) || (std.cond.is_greaterThanOrEqualTo(b.degree, 90.0) && (std.cond.is_lessThanOrEqualTo(a.degree,\
    \ 90.0) || std.cond.is_lessThanOrEqualTo(c.degree, 90.0)));\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_sx9vod.d(19): Error: found `;` when expecting `)`

    /tmp/tmpm_sx9vod.d(20): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpm_sx9vod.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_sx9vod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (is_equilateral(a,\
    \ b, c))\n        return true;\n    long ab = abs(b);\n    long ac = abs(c);\n\
    \    long bc = abs(ab - ac);\n    bool result = false;\n    if (a < bc && b <\
    \ ac)\n    {\n        if (bc >= a)\n        {\n            long temp = a;\n  \
    \          a = b;\n            b = temp;\n        }\n        result = true;\n\
    \    }\n    else if (a < ab && b >= ac)\n    {\n        if (ab >= b)\n       \
    \ {\n            long temp = b;\n            b = c;\n            c = temp;\n \
    \       }\n        result = true;\n    }\n    else if (c < ab && bc >= a)\n  \
    \  {\n        if (ab >= c)\n        {\n            long temp = c;\n          \
    \  c = a;\n            a = temp;\n        }\n        result = true;\n    }\n \
    \   return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,javascript,c++\
    \ dscore=0 |>\nHere you go:\n<code>\nfunction right_angle_triangle(a, b, c){\n\
    \  var ab = abs(b);\n  var ac = abs(c);\n  var bc = abs(ab - ac);\n  if(a<bc &&\
    \ b<ac){\n    return (a<ab && b<ac) || (a<bc && c<ab);\n  }\n  if(a<ab && b<ac){\n\
    \    return (a<ab && c<ab) || (a<bc && c<ab);\n  }\n  if(a<ab && b<ac){\n    return\
    \ (a<ab && b<ac) || (a<bc && b<ac);\n  }\n  return true;\n}\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6nz4a6s.d(56): Error: declaration expected, not `<`

    /tmp/tmpi6nz4a6s.d(65): Error: declaration expected, not `if`

    /tmp/tmpi6nz4a6s.d(67): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6nz4a6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return a>b && b>c && c>a;\n\
    }\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp28ed53hd.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp28ed53hd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = long.sqrt((b*b)\
    \ - 4 * (a*c));\n    return d >= 0\n            && d < ((b + long.sqrt((b*b) -\
    \ 4 * (a*c)))/2);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp629s_fr6.d(18): Error: cannot pass type `long` as a function argument

    /tmp/tmp629s_fr6.d(20): Error: cannot pass type `long` as a function argument

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp629s_fr6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a*a + b*b - c*c)\
    \ >= 0);\n}\n</code>\n<|/ a dscore=4 |>\n<| a |>\nA right angle triangle is one\
    \ in which all the three angles are 90 degrees or less\n<|/ a tags=math,geometry\
    \ dscore=4 |>\n<| a tags=math,geometry |>\nThe algorithm is simple if you understand\
    \ vectors. Let a,b,c be vectors pointing in the direction of the angles, let ab,ac\
    \ and bc be the lengths of the two sides.\nNow the formula for the angle between\
    \ them is\n<code>\ncosine = ab*ac - bc*bc\n</code>\nand \n<code>\nsine = acos(cosine)\n\
    </code>\nSo if a,b,c are equal, sine=0 so the angle is 0, if they are opposite\
    \ each other then the angle between them is 180 degrees.\n<|/ a dscore=4 |>\n\
    <| c |>\nThis formula is valid only for circles whose centre is at the origin.\n\
    <|/ c |>\n<| c |>\nThe centre is at the origin. But the angle between vectors\
    \ a,b,c is not between 0 and 180 degrees.\n<|/ c |>\n<| c |>\nIt should work for\
    \ the cases I mentioned, but in any case you should check whether the angles are\
    \ really between 0 and 180 degrees.\n<|/ c |>\n<| c |>\nAhaha it seems I had not\
    \ read the question carefully, you're right of course. Sorry.\n<|/ c |>\n<| a\
    \ |>\nYou can solve this with one line of code:\n<code>\ndef right_angle_triangle(a,\
    \ b):\n    return (a*a+b*b - c*c) >= 0\n</code>\n<|/ a tags=math,geometry dscore=4\
    \ |>\n<| a |>\n<code>\nfunction right_triangle(a, b, c){\n    return (Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)) <= Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2)) && Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(b, 2)) <= Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)))\n}\n</code>\n\
    <|/ a tags=math,geometry dscore=3 |>\n<| c |>\nIt's a good idea to explain why\
    \ you think this would work\n<|/ c |>\n<| c |>\nMath.pow(a, 2) is an integer so\
    \ there is no point for Math.sqrt() and Math.pow().\n<|/ c |>\n<| a tags=math,geometry\
    \ |>\nI know it's an old thread, but for people looking to solve this with vector\
    \ maths, I thought I'd \nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ssccr93.d(20): Error: declaration expected, not `<`

    /tmp/tmp7ssccr93.d(47): Error: unterminated character constant

    /tmp/tmp7ssccr93.d(64): Error: unterminated character constant

    /tmp/tmp7ssccr93.d(70): Error: unterminated character constant

    /tmp/tmp7ssccr93.d(70): Error: unterminated character constant

    /tmp/tmp7ssccr93.d(75): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(76): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(77): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(78): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(79): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(80): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(81): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(82): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(83): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(84): Error: declaration expected, not `assert`

    /tmp/tmp7ssccr93.d(85): Error: declaration expected'
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if( std::abs(b - c) >\
    \ a || std::abs(a - c) > a) \n        return false;\n    long d = std::abs(a +\
    \ b - c);\n    if( std::abs(a - b) == d || std::abs(a + b) == d || std::abs(a\
    \ - c) == d ) \n        return true;\n    return false;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nHere's a solution that checks if the triangle is right-angled.\n<code>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp0m0iox_.d(18): Error: found `:` when expecting `)`

    /tmp/tmpp0m0iox_.d(18): Error: found `:` instead of statement

    /tmp/tmpp0m0iox_.d(20): Error: semicolon expected, not `:`

    /tmp/tmpp0m0iox_.d(20): Error: found `:` instead of statement

    /tmp/tmpp0m0iox_.d(21): Error: found `:` when expecting `)`

    /tmp/tmpp0m0iox_.d(21): Error: found `:` instead of statement

    /tmp/tmpp0m0iox_.d(25): Error: declaration expected, not `<`

    /tmp/tmpp0m0iox_.d(28): Error: unterminated character constant

    /tmp/tmpp0m0iox_.d(34): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(35): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(36): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(37): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(38): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(39): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(40): Error: declaration expected, not `assert`

    /tmp/tmpp0m0iox_.d(41): Error: declaration expected, not `assert`

    /tmp/tm'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // TODO: Add your solution\
    \ here\n    return true; \n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmahqb7nk.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpmahqb7nk.__unittest_L21_C1() [0x427a5f]

    ??:? void tmpmahqb7nk.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    /* Write your code here\
    \ */\n    if (b==c){\n        if (a==b) \n        {\n            return true;\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    if\
    \ (a>b) \n    {\n        if (b==c) return true;\n        else\n        {\n   \
    \         float temp = b;\n            b=c;\n            c=temp;\n           \
    \ return right_angle_triangle(--a,b,--c);\n        }\n    }\n    else{\n     \
    \   if (a>c) \n        {\n            float temp = a;\n            a=c;\n    \
    \        c=temp;\n            return right_angle_triangle(--b,--a,--c);\n    \
    \    }\n        else\n        {\n            if (c==b) return true;\n        \
    \    else{\n                float temp = b;\n                b=c;\n          \
    \      c=temp;\n                return right_angle_triangle(--a,--b,--c);\n  \
    \          }\n        }\n    }\n}\n</code>\n<|/ a tags=c++,algorithm,c,triangle\
    \ |>\n<| c |>\nWhat about a triangle with 3 right angles?\n<|/ c |>\n<| c |>\n\
    If a==b==c==0, and a<b<c<0, then right_angle_triangle(a,b,c) is true.\n<|/ c |>\n\
    <| c |>\n, Oops. I didn't think about that situation. I had intended that to be\
    \ handled as a special case. I'll update the code accordingly.\n<|/ c |>\n<| c\
    \ |>\nNice one. I just tested your solution with inputs (-1, 1, 1) and it worked.\
    \ Didn't check all edge cases yet.\n<|/ c |>\n<| a tags=c++,algorithm,c,triangle\
    \ |>\nYou can do it with just one loop through array without using recursion like\
    \ below:\n<code>\n#include <iostream>\nusing namespace std;\nunittest\n{\n   \
    \ alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwm_17cup.d(59): Error: declaration expected, not `<`

    /tmp/tmpwm_17cup.d(68): Error: unterminated character constant

    /tmp/tmpwm_17cup.d(68): Error: unterminated character constant

    /tmp/tmpwm_17cup.d(71): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwm_17cup.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tdouble angle = acos((b*b\
    \ + c*c - a*a)/(2*b*c));\n\treturn angle > PI / 2;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmniyvorx.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmniyvorx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164056
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool right = true;\n \
    \   if((b*b - 4*a*c) > (c*c - a*a))\n        right = false; // the hypotenuse\
    \ is longer than the side\n    else if(b == c)\n        right = true; // the triangle\
    \ is vertical because the hypotenuse is longer than the side\n    else if((b*b\
    \ - a*a) > (c*c - a*a))\n        right = false; // the hypotenuse is longer than\
    \ the side\n    else\n        right = false; // the triangle is not right\n  \
    \  return right;\n}\n</code>\n<|/ a tags=c++ |>\n<| a tags=c++ |>\nThe first thing\
    \ I notice is that your function doesn't return a boolean value.  Try changing\
    \ the last line of the function as follows:\n<code>\nreturn right;\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nThere are several problems in your code.\
    \ \nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjndp1us5.d(29): Error: declaration expected, not `<`

    /tmp/tmpjndp1us5.d(32): Error: unterminated character constant

    /tmp/tmpjndp1us5.d(35): Error: declaration expected, not `<`

    /tmp/tmpjndp1us5.d(43): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(44): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(45): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(46): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(47): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(48): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(49): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(50): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(51): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(52): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(53): Error: declaration expected, not `assert`

    /tmp/tmpjndp1us5.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjndp1u'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long side;\n    bool result\
    \ = false;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxykv031v.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxykv031v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d;\n    if(a == b)\
    \ { d = a + c; return (d > a && d < c); }\n    if(a == c) { d = a + b; return\
    \ (d > a && d < b); }\n    if(b == c) { d = b + a; return (d > b && d < a); }\n\
    \    else \n    {\n        d = a + b;\n        if(c > d) { d = c; c = a; }\n \
    \       if(a > d) { a = d; d = b; }\n        if(b > d) { b = d; d = c; }\n   \
    \     return (d > a && d < c);\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt_kezzco.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f55]

    ??:? void tmpt_kezzco.__unittest_L31_C1() [0x427b2e]

    ??:? void tmpt_kezzco.__modtest() [0x427cd4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc7b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fca1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430150]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc2d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae5]

    ??:? runModuleUnitTests [0x42ba51]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283a4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    double angle1, angle2,\
    \ angle3;\n    angle1 = std.math.angle( (double) a / b);\n    angle2 = std.math.angle(\
    \ (double) c / b);\n    angle3 = std.math.angle( (double) c / a);\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjqdhz5p.d(19): Error: C style cast illegal, use `cast(double)a`

    /tmp/tmpnjqdhz5p.d(20): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmpnjqdhz5p.d(21): Error: C style cast illegal, use `cast(double)c`

    /tmp/tmpnjqdhz5p.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjqdhz5p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    //  cout << \"a: \"<<\
    \ a << \"b: \"<< b << \"c: \"<< c << endl;\n    long side1 = (a+b+c) / 2;\n  \
    \  long side2 = (a+b+c) - (side1);\n    long side3 = (b+c) - (side2);\n    bool\
    \ result = true;\n    //  cout << \"side1: \" << side1 << \" side2: \" << side2\
    \ << \" side3: \" << side3 << endl;\n    if(side1==side2 && side1==side3)\n  \
    \  {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = true;\n    }\n    else if(side1==side2 && side2==side3)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = true;\n    }\n    else if(side1==side2 && side2!=side3)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = false;\n    }\n    else if(side1==side3 && side1==side2)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = true;\n    }\n    else if(side1==side3 && side2==side3)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = true;\n    }\n    else if(side1==side3 && side2!=side3)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = false;\n    }\n    else if(side1!=side2 && side1!=side3)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side3 << \"\\n\";\n        // cout << \"result =\" << result <<\
    \ endl;\n        result = false;\n    }\n    else if(side1!=side3 && side1!=side2)\n\
    \    {\n        // cout << \"side1 =\" << side1 << \", side2 =\" << side2 << \"\
    , side3 =\" << side\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvl5seh7s.d(69): Error: found `unittest` instead of statement

    /tmp/tmpvl5seh7s.d(85): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvl5seh7s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long b0 = b;\n    long\
    \ c0 = c;\n    long b1 = b - a;\n    long c1 = c - a;\n    long b2 = b - c;\n\
    \    long c2 = c - b;\n    long cross = b * b * c0 - b1 * b1 * c1 - c1 * c1 *\
    \ b1;\n    long det = b0 * b1 - b1 * b0;\n    return det == cross;\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdrgubs_t.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmpdrgubs_t.__unittest_L28_C1() [0x427aae]

    ??:? void tmpdrgubs_t.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]

    ??:? runModuleUnitTests [0x42b9d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return !std.isEqual(std.cos(std.toDegrees(std.toRadians(std.acos(std.toRadians(std.toRadians(std.toDegrees(a),\
    \ std.toRadians(std.toRadians(std.toRadians(b)), std.toRadians(std.toRadians(c))))))));\n\
    }\n/*\n    Define a struct. \n*/\nstruct Vector\n{\n    Vector();\n    Vector(float\
    \ x, float y, float z);\n    \n    float x;\n    float y;\n    float z;\n};\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmzhe1a5e.d(18): Error: found `;` when expecting `,`

    /tmp/tmpmzhe1a5e.d(19): Error: expression expected, not `}`

    /tmp/tmpmzhe1a5e.d(23): Error: found `struct` when expecting `,`

    /tmp/tmpmzhe1a5e.d(24): Error: found `{` when expecting `,`

    /tmp/tmpmzhe1a5e.d(25): Error: found `;` when expecting `,`

    /tmp/tmpmzhe1a5e.d(26): Error: found `x` when expecting `.` following float

    /tmp/tmpmzhe1a5e.d(26): Error: found `,` when expecting identifier following `float`.

    /tmp/tmpmzhe1a5e.d(26): Error: found `float` when expecting `,`

    /tmp/tmpmzhe1a5e.d(26): Error: found `z` when expecting `.` following float

    /tmp/tmpmzhe1a5e.d(26): Error: found `)` when expecting identifier following `float`.

    /tmp/tmpmzhe1a5e.d(26): Error: found `;` when expecting `,`

    /tmp/tmpmzhe1a5e.d(28): Error: found `x` when expecting `.` following float

    /tmp/tmpmzhe1a5e.d(28): Error: found `;` when expecting identifier following `float`.

    /tmp/tmpmzhe1a5e.d(29): Error: found `float` when expecting `,`

    /tmp/tmpmzhe1a5e.d(29): Error: found `;` when'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long discriminant = (b\
    \ * c) - (4 * a * b);\n    return (discriminant < 0);\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4aw03g8e.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmp4aw03g8e.__unittest_L21_C1() [0x427a83]

    ??:? void tmp4aw03g8e.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // Check if any of the\
    \ sides are zero\n    if (a == 0 || b == 0 || c == 0) \n    {\n        return\
    \ false; \n    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_0xz9x1d.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_0xz9x1d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    float rad_a, rad_b, rad_c;\n\
    \    rad_a = math::radians(a);\n    rad_b = math::radians(b);\n    rad_c = math::radians(c);\n\
    \    return fabs(std.tan(rad_b) - std.tan(rad_a)) >= fabs(std.tan(rad_c) - std.tan(rad_b));\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsqnit7h.d(19): Error: found `:` when expecting `;` following statement

    /tmp/tmptsqnit7h.d(19): Error: found `:` instead of statement

    /tmp/tmptsqnit7h.d(20): Error: found `:` when expecting `;` following statement

    /tmp/tmptsqnit7h.d(20): Error: found `:` instead of statement

    /tmp/tmptsqnit7h.d(21): Error: found `:` when expecting `;` following statement

    /tmp/tmptsqnit7h.d(21): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsqnit7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (abs(a) <= 90 && abs(b)\
    \ <= 90 && abs(c) <= 90) \n    {\n        if (a == b || a == c) return true;\n\
    \        if (a == c || b == c) return true;\n    }\n    return false;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI find this to be the best answer, but I do have one concern\
    \ regarding performance. Since the `atan2` call is going to be evaluated every\
    \ time, it might be better to just calculate it once, and then compare the angles\
    \ directly. I'm currently writing a test case, and I'll post an update when I\
    \ get it working. Thanks!\n<|/ c |>\n<| a tags=c dscore=3 |>\nHere's an answer\
    \ in one line. No functions to call nor conditional branching.\n<code>\n#include\
    \ <stdio.h>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpedwaytqc.d(25): Error: declaration expected, not `<`

    /tmp/tmpedwaytqc.d(28): Error: unterminated character constant

    /tmp/tmpedwaytqc.d(28): Error: unterminated character constant

    /tmp/tmpedwaytqc.d(31): Error: unterminated character constant

    /tmp/tmpedwaytqc.d(38): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(39): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(40): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(41): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(42): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(43): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(44): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(45): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(46): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(47): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(48): Error: declaration expected, not `assert`

    /tmp/tmpedwaytqc.d(49): Error: unrecognized decl'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long x, y, len;\n    \n\
    \    // Calculate the side lengths\n    x = a;\n    y = b;\n    len = x;\n   \
    \ x -= y;\n    y += x;\n    len += y;\n    x += y;\n    y += x;\n    len += y;\n\
    \    x += y;\n    y += x;\n    len += y;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbgib9iy.d(33): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbgib9iy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a*a + b*b - c*c)\
    \ < 0);\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\nThanks for that. I'm having trouble\
    \ trying to implement it into my code. I'm working on a project for school and\
    \ I have to do the function myself. I've got my program finished and all I need\
    \ to do is add in the triangle checker into the code which I can't do because\
    \ I can't seem to figure out where to put it.\n<|/ c |>\n<| c |>\nI added my code\
    \ to the bottom of my original post\n<|/ c |>\n<| c |>\nI edited my answer to\
    \ add the code for your function `right_angle_triangle`\n<|/ c |>\n<| c |>\nI'm\
    \ sorry, but I don't understand how to implement that into my code. I'm really\
    \ not that advanced at this and I'm just looking for a little bit of help\n<|/\
    \ c |>\n<| c |>\nYou don't need to use it in your code, it's just a utility function\
    \ you could use elsewhere if you needed to. I've added an example of how you might\
    \ use it in the code you posted.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\nusing namespace std;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp90txnqc4.d(20): Error: declaration expected, not `<`

    /tmp/tmp90txnqc4.d(23): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(23): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(23): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(23): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(23): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(32): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(32): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(32): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(32): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(35): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(35): Error: unterminated character constant

    /tmp/tmp90txnqc4.d(35): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp90txnqc4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool result = false;\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa5_2oxx1.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa5_2oxx1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ac, bc, cb, sqa,\
    \ sqb, sqc;\n    sqa = a * a;\n    sqb = b * b;\n    sqc = c * c;\n    ac = sqa\
    \ + sqb;\n    bc = sqa - sqb;\n    cb = sqa - sqc;\n    return (bc > ac) || ((cb\
    \ >= ac) && (bc >= ac));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1jbu151h.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp1jbu151h.__unittest_L27_C1() [0x427a7e]

    ??:? void tmp1jbu151h.__modtest() [0x427c24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((a == b) || (a == c)\
    \ || (b == c))\n    {\n        return false; \n    }\n    else if(a == b)\n  \
    \  {\n        if(c == b)\n        {\n            return true;\n        }\n   \
    \     else\n        {\n            return false;\n        }\n    }\n    else if(a\
    \ == c)\n    {\n        return right_angle_triangle(b,b,c);\n    }\n    else if(b\
    \ == c)\n    {\n        return right_angle_triangle(a,b,c);\n    }\n    else\n\
    \    {\n        // double angle = atan(y/x)\n        double angle = atan( ((sqrt(b\
    \ * b + c * c - a * a) - sqrt(a * a + b * b - c * c)) / sqrt(a * a + b * b - c\
    \ * c)) / ((sqrt(a * a + b * b - c * c) - sqrt(b * b + c * c - a * a)) / sqrt(a\
    \ * a + b * b - c * c)));\n        \n        if (angle > 1.5707963267948966f)\
    \ // double angle = atan(y/x)\n            return true;\n        else\n      \
    \      return false;\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fw1863i.d(44): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp9fw1863i.d(44): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp9fw1863i.d(44): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a >= b + c) return\
    \ false;\n    if (b >= a + c) return false;\n    if (c >= a + b) return false;\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvx108s_9.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmpvx108s_9.__unittest_L23_C1() [0x427aed]

    ??:? void tmpvx108s_9.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // The lengths of a triangle\
    \ can be computed with Math package \n    // https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Math-Double-Arith.html#lx931\n\
    \    double len = sqrt(pow(b, 2) + pow(c, 2));\n    return std.math.abs(a - b)\
    \ == std.math.abs(a - c) == len;\n}\n</code>\n<|/ a tags=c++,algorithm,math |>\n\
    <| c |>\nThe only problem with this solution is that it requires brute force (O(n^2)\
    \ comparisons) in the worst case.\n<|/ c |>\n<| c |>\n: Yes, but it's faster than\
    \ a solution which requires only O(n) comparisons, because it's O(log(n)) instead\
    \ of O(n log n).\n<|/ c |>\n<| c |>\nAh yes. That's much better - thanks!\n<|/\
    \ c |>\n<| c |>\n, is this O(n)?\n<|/ c |>\n<| c |>\n: Yes, the O(n) comes from\
    \ the fact that you only need to check two sides of a triangle, instead of the\
    \ complete triangle. Still, there's no need to check all three sides, you can\
    \ just check two sides.\n<|/ c |>\n<| a tags=c++,algorithm,math |>\n<code>\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaw_lk9ir.d(21): Error: found `==` when expecting `;` following
    `return` statement

    /tmp/tmpaw_lk9ir.d(23): Error: declaration expected, not `<`

    /tmp/tmpaw_lk9ir.d(29): Error: unterminated character constant

    /tmp/tmpaw_lk9ir.d(29): Error: unterminated character constant

    /tmp/tmpaw_lk9ir.d(32): Error: unterminated character constant

    /tmp/tmpaw_lk9ir.d(38): Error: unterminated character constant

    /tmp/tmpaw_lk9ir.d(46): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(47): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(48): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(49): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(50): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(51): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(52): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(53): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(54): Error: declaration expected, not `assert`

    /tmp/tmpaw_lk9ir.d(55): Err'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (b != c) {\n      \
    \  if (((b - a) % (b - c)) <= (b + c)) {\n            if (b > a) {\n         \
    \       if (((b + a) % (b - a)) <= (b + c)) {\n                    if (b > c)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return false;\n}\n</code>\n<|/ a\
    \ dscore=0 tags=c++,math |>\n<| c |>\nThis only works for a *triangle* with 4\
    \ sides. Also, it doesn't work for triangles that share 2 sides.\n<|/ c |>\n<|\
    \ c |>\n`a` can be `b` or `c` and the code works. `a` and `b` can be different,\
    \ but `a` and `c` must be the same for the function to return `true`.\n<|/ c |>\n\
    <| c |>\nI know, I was just pointing out that your answer wouldn't work in the\
    \ general case.\n<|/ c |>\n<| a tags=c++,math |>\nThis can be done in O(logN)\
    \ time with a single loop by doing an early exit if one of the triangle sides\
    \ is greater than the other. Here's how I would do it.\n<code>\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsoi0x7wm.d(31): Error: declaration expected, not `<`

    /tmp/tmpsoi0x7wm.d(34): Error: unterminated character constant

    /tmp/tmpsoi0x7wm.d(40): Error: unterminated character constant

    /tmp/tmpsoi0x7wm.d(43): Error: unterminated character constant

    /tmp/tmpsoi0x7wm.d(49): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(50): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(51): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(52): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(53): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(54): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(55): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(56): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(57): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(58): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(59): Error: declaration expected, not `assert`

    /tmp/tmpsoi0x7wm.d(60): Error: unrecognized decl'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a + b > c) &&\
    \ (a + c > b)) || ((a + c > b) && (a + b > c));\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr36j7uad.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e85]

    ??:? void tmpr36j7uad.__unittest_L20_C1() [0x427ad9]

    ??:? void tmpr36j7uad.__modtest() [0x427c08]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbab]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa3e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430080]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb5d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa15]

    ??:? runModuleUnitTests [0x42b981]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return !(a == b && b ==\
    \ c && c <= a);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpur9ug1zs.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmpur9ug1zs.__unittest_L20_C1() [0x427a77]

    ??:? void tmpur9ug1zs.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a * b) > 0 &&\
    \ (c * b) > 0 && (c * a) > 0);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuv8d8ouy.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpuv8d8ouy.__unittest_L20_C1() [0x427a9b]

    ??:? void tmpuv8d8ouy.__modtest() [0x427c18]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    //return (a == b) || (a\
    \ == c) || (b == c); \n    bool x = abs(a - b) == abs(a - c);\n    bool y = abs(a\
    \ - b) == abs(b - c);\n    bool z = abs(a - b) == abs(c - a);\n    return x ||\
    \ y || z; \n}\n</code>\n<|/ a tags=c++,boolean,c#,javascript |>\n<| c |>\nThe\
    \ two problems are that `Math.abs` returns a `double` and that `long` isn't necessarily\
    \ 32-bit.\n<|/ c |>\n<| c |>\n: That wasn't the question. He was simply asking\
    \ for the C# equivalent of the JS function. That was the question. He didn't really\
    \ care what he was asking for, and just wanted to know what he was looking for.\
    \ The solution is in C#. He didn't care if it was written in C#, or in JS or in\
    \ C. But he asked for the equivalent of C#'s Math.abs(), and that's what he asked\
    \ for. He didn't ask for an alternative to Math.abs, or even about what type of\
    \ data type to use to use Math::abs. And that was the question.\n<|/ c |>\n<|\
    \ c |>\nHe stated that he didn't care about the data type of the variables. He\
    \ simply wanted to know what was a correct C# equivalent of the JS function. He\
    \ wasn't looking for an alternative to Math.abs.\n<|/ c |>\n<| c |>\n: In that\
    \ case I must not have understood the question. He clearly stated that he didn't\
    \ care about the data type of the variables. He simply wanted to know what was\
    \ a correct C# equivalent of the JS function. He wasn't looking for an alternative\
    \ to Math.abs.\n<|/ c |>\n<| c |>\nI understand that he didn't care about the\
    \ data type of the variables, but he did say he wanted to know what was a correct\
    \ C# equivalent of the JS function. He didn't say he didn't care about the data\
    \ type of the variables. He asked for the equivalent of C#'s Math.abs(), and that's\
    \ what he asked for. He didn't ask for an alternative to Math.abs, or even about\
    \ what type of data type to use to use Math::abs. And that was the question.\n\
    <|/ c |>\n<| a |>\nHere's a quick translation of your JavaScript function to C#:\n\
    <code>\nstatic bool RightAngleTriangle(long a, long b, long c)\n{\n    bool x\
    \ = Math.Abs(a - b) == Math.Abs(a - c);\n    bool y = Math.Abs(a - b) == Math.Abs(b\
    \ - c);\n    bool z = Math.Abs(\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiw7yrdjb.d(24): Error: declaration expected, not `<`

    /tmp/tmpiw7yrdjb.d(27): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(30): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(33): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(33): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(36): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(36): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(39): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(39): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(39): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d(39): Error: unterminated character constant

    /tmp/tmpiw7yrdjb.d'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a==0 || b==0 || c==0)\
    \ return false;\n    long u=(a+b+c)/2;\n    if((a==b==c) && (b==u)) return true;\n\
    \    else if((a==b) || (a==c) || (b==c)) return false;\n    else if(u*(a+b) >=\
    \ (u+c)) return right_angle_triangle(a,b,u);\n    else return right_angle_triangle(a,u,c);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63b9oems.d(20): Error: found `==` when expecting `)`

    /tmp/tmp63b9oems.d(20): Error: found `c` when expecting `)`

    /tmp/tmp63b9oems.d(20): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63b9oems.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long temp = a;\n    a\
    \ = b;\n    b = c;\n    c = temp;\n    \n    long a1, b1, c1;\n    a1 = b1 * c1\
    \ - a1 * b1 * c1;\n    if (a1 < 0)\n        return false;\n    b1 = c1 - b1 *\
    \ c1;\n    if (b1 < 0)\n        return false;\n    c1 = b1 * c1 + a1 * b1 * c1;\n\
    \    if (c1 < 0)\n        return false;\n    return true;\n}\n</code>\n<|/ a tags=c++,geometry,math,trigonometry,triangle\
    \ |>\n<| c |>\nThank you so much! Your solution was very helpful and solved the\
    \ problem.\n<|/ c |>\n<| c |>\nGlad it helped you. Good luck on your coding journey\
    \ :)\n<|/ c |>\n<| c |>\nThanks again! I appreciate your help. I tried to upvote\
    \ but I need more reputation :(\n<|/ c |>\n<| c |>\nGlad I could help. Welcome\
    \ to Stack Overflow, and welcome to contributing. I'm glad you're contributing\
    \ to the community -- I'm happy to help you get to where you need to be. :-) I\
    \ do have one other suggestion: when providing information like this, please be\
    \ sure to make it as complete as possible. I would have expected you to have done\
    \ that already. For example, your code doesn't use any `std::` functions, nor\
    \ do any of the variables you use have names like `a`, `b`, or `c`. That helps\
    \ both you and me understand your program better.\n<|/ c |>\n<| c |>\nHi John.\
    \ I am new to posting here and I am still learning. Thank you for explaining what\
    \ I did wrong. I will keep it in mind for next time I post a question. Thanks\
    \ again for your help!\n<|/ c |>\n<| a tags=c++,geometry,math,trigonometry,triangle\
    \ |>\nMy attempt at a solution might be simpler than it looks, because it doesn't\
    \ involve trigonometry or even the C++ standard library, and is also easy to understand.\
    \ Here's what I came up with:\n<code>\n#include <iostream>\n#include <cmath>\n\
    #include <cstdlib>\n#include <cstring>\n#include <string>\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwdizu97w.d(35): Error: declaration expected, not `<`

    /tmp/tmpwdizu97w.d(47): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(47): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(47): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(47): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(53): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(53): Error: unterminated character constant

    /tmp/tmpwdizu97w.d(64): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(65): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(66): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(67): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(68): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(69): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(70): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(71): Error: declaration expected, not `assert`

    /tmp/tmpwdizu97w.d(72): Error: declaration expected, not '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // TODO: Implement\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpebe6axfd.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e5d]

    ??:? void tmpebe6axfd.__unittest_L21_C1() [0x427a5f]

    ??:? void tmpebe6axfd.__modtest() [0x427bdc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa16]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fba9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430058]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]

    ??:? runModuleUnitTests [0x42b959]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    bool result = true;\n\
    \    \n    double ang1      = math::degrees(math::atan2(c - b, a - b));\n    double\
    \ ang2      = math::degrees(math::atan2(b, a));\n    double ang3      = math::degrees(math::atan2(c,\
    \ b));\n    \n    bool isRight = ang1 < ang2 && ang1 < ang3;\n    \n    if(!isRight)\n\
    \    {\n        ang1 += 180;\n    }\n    \n    if(!isRight)\n    {\n        ang2\
    \ += 180;\n    }\n    \n    bool isRight = ang1 < ang2 && ang1 < ang3;\n    \n\
    \    if(!isRight)\n    {\n        ang3 += 180;\n    }\n    \n    if(!isRight)\n\
    \    {\n        result = false;\n    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9uh0tzd7.d(20): Error: semicolon expected, not `:`

    /tmp/tmp9uh0tzd7.d(20): Error: found `:` instead of statement

    /tmp/tmp9uh0tzd7.d(21): Error: semicolon expected, not `:`

    /tmp/tmp9uh0tzd7.d(21): Error: found `:` instead of statement

    /tmp/tmp9uh0tzd7.d(22): Error: semicolon expected, not `:`

    /tmp/tmp9uh0tzd7.d(22): Error: found `:` instead of statement

    /tmp/tmp9uh0tzd7.d(47): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9uh0tzd7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return std.math.angle(b,c)\
    \ == std.math.angle(a,c) || \n\tstd.math.angle(a,b) == std.math.angle(b,c);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3skkgz7.d(18): Error: undefined identifier `angle` in module `std.math`

    /tmp/tmpj3skkgz7.d(18): Error: undefined identifier `angle` in module `std.math`

    /tmp/tmpj3skkgz7.d(19): Error: undefined identifier `angle` in module `std.math`

    /tmp/tmpj3skkgz7.d(19): Error: undefined identifier `angle` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3skkgz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ( a * b >= b *\
    \ c );\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnt_8ahhb.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpnt_8ahhb.__unittest_L20_C1() [0x427a56]

    ??:? void tmpnt_8ahhb.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // calculate the sides'\
    \ length\n    long sA = abs(a), sB = abs(b), sC = abs(c);\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptgurdk7b.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptgurdk7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if( a >= b + c )\n   \
    \     return false; // Triangle not valid\n    if( a >= b - c )\n        return\
    \ b >= c - a; // Triangle not valid\n    if( a >= c + b )\n        return c >=\
    \ b - a; // Triangle not valid\n    // if b is greater than a, then b is greater\
    \ than c\n    if(b >= a && b >= c)\n        return true;\n    else \n        return\
    \ false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplyp5uvmo.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmplyp5uvmo.__unittest_L30_C1() [0x427ae3]

    ??:? void tmplyp5uvmo.__modtest() [0x427c60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (b - c) >= 0;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph53co9ng.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e75]

    ??:? void tmph53co9ng.__unittest_L20_C1() [0x427a4e]

    ??:? void tmph53co9ng.__modtest() [0x427bf4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bb9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]

    ??:? runModuleUnitTests [0x42b971]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282c4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a == 0 || b == 0 ||\
    \ c == 0 || a + b + c == 0) \n    {\n        return false;\n    }\n    else if\
    \ (fabs(b * b - 4 * a * c) >= std.pow2(b)) \n    {\n        return true;\n   \
    \ }\n    else \n    {\n        return (b > 0 && c < 0 && a >= 0 &&\n         \
    \       b * c > 0 && fabs(b * b - 4 * a * c) < std.pow2(a));\n    }\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps447vm6_.d(22): Error: `std.math.fabs` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4126):     `std.math.fabs(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4132):     `std.math.fabs(float
    x)`

    /tmp/tmps447vm6_.d(22): Error: undefined identifier `pow2` in package `std`

    /tmp/tmps447vm6_.d(29): Error: `std.math.fabs` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4126):     `std.math.fabs(real
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(4132):     `std.math.fabs(float
    x)`

    /tmp/tmps447vm6_.d(29): Error: undefined identifier `pow2` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps447vm6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // Triangle is defined\
    \ by sides a, b, c\n    if(a == 0 || b == 0 || c == 0) return false; \nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4n_f2he8.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4n_f2he8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long d = a - b - c;\n\
    \    if(d > 0)\n    {\n        if(d == 1)\n        {\n            return true;\n\
    \        }\n        else if(d == 2)\n        {\n            return b > c;\n  \
    \      }\n        else\n        {\n            return false;\n        }\n    }\n\
    \    else\n    {\n        if(d == 0)\n        {\n            return false;\n \
    \       }\n        else if(d == 1)\n        {\n            return b < c;\n   \
    \     }\n        else\n        {\n            return c < a;\n        }\n    }\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is exactly the right idea, but if you look\
    \ at it carefully, you'll notice that if one side is zero, the other two are also\
    \ zero. That's not a valid right angle triangle.\n<|/ c |>\n<| c |>\n- I just\
    \ checked the code.  I must have missed it earlier.  Thanks.\n<|/ c |>\n<| c |>\n\
    The function should be named `right_angle_triangle` to avoid confusion with the\
    \ one from the standard library.\n<|/ c |>\n<| a dscore=4 |>\nThe other answers\
    \ look good, but I think the following is simpler and clearer (to me).\n<code>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fpl0cg0.d(50): Error: declaration expected, not `<`

    /tmp/tmp5fpl0cg0.d(53): Error: unterminated character constant

    /tmp/tmp5fpl0cg0.d(53): Error: unterminated character constant

    /tmp/tmp5fpl0cg0.d(68): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(69): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(70): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(71): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(72): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(73): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(74): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(75): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(76): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(77): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(78): Error: declaration expected, not `assert`

    /tmp/tmp5fpl0cg0.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fpl'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((a==0 || b==0 || c==0)\
    \ && a!=0 && b!=0 && c!=0)\n        return false;\n    else if((b==0 || c==0 ||\
    \ a==0 || b==c) || (b==a && c==b) || (c==b && a==c) || (b==a && c==c))\n     \
    \   return false;\n    else if((c==0 || a==0 || c==a) || (c==b && a==b) || (a==b\
    \ && c==a))\n        return false;\n    if((b==0 && c==0) || (a==0 && c==0) ||\
    \ (a==0 && b==0))\n        return true;\n    if((b==0 && a==0) || (a==0 && b==0))\n\
    \        return false;\n    long d0 = (a==0 && b==0) ? 0 : sqr(a)*sqr(b);\n  \
    \  long d1 = (c==0 && a==0) ? 0 : sqr(c)*sqr(a);\n    long d2 = (c==0 && b==0)\
    \ ? 0 : sqr(c)*sqr(b);\n    long d3 = (b==0 && c==0) ? 0 : sqr(a)*sqr(c);\n  \
    \  long det = d0*d1 - d2*d3;\n    if(det>0)\n        return false;\n    bool isRight\
    \ = true;\n    if((a==0 && b==0) || (c==0 && a==0) || (b==0 && c==0))\n      \
    \  isRight = false;\n    if((d0>d1) || (d2==0))\n        isRight = false;\n  \
    \  return isRight;\n}\n</code>\n<|/ a |>\n<| a tags=math,c++,geometry |>\nThe\
    \ most efficient way to find the length of any triangle is by using the Pythagorean\
    \ Theorem.\n<code>\nlengthOfTriangle (basePoint, point1, point2)\n{\n    double\
    \ baseXDiff = point2.x - basePoint.x;\n    double baseYDiff = point2.y - basePoint.y;\n\
    \    double baseLengthSquared = baseXDiff * baseXDiff + baseYDiff * baseYDiff;\n\
    \    double point1XDiff = point1.x - basePoint.x;\n    double point1YDiff = point1.y\
    \ - basePoint.y;\n    double point1LengthSquared = point1XDiff * point1XDiff +\
    \ point1YDiff * point1YDiff;\n    double point2XDiff = point2.x - basePoint.x;\n\
    \    double point2YDiff = point2.y - basePoint.y;\n    double point2LengthSquared\
    \ = point2XDiff * point2XDiff + point2Y\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq20ht1oe.d(42): Error: declaration expected, not `<`

    /tmp/tmpq20ht1oe.d(58): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq20ht1oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n   long a, b, c;\n   \n  \
    \ // if all are zero, return false\n   if (a == 0 || b == 0 || c == 0)\n     \
    \ return false;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnl9gx4zf.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnl9gx4zf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (std.typecons.__eq__(a*a\
    \ + b*b - 4*a*c, std.math.__mul__(a,b)) || std.math.__eq__(-a*a + b*b, std.math.__mul__(a,b)));\n\
    }\n</cell>\n<cell>\nimport std.typecons;\nimport std.math;\n/*\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl5wmlhyt.d(20): Error: declaration expected, not `<`

    /tmp/tmpl5wmlhyt.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5wmlhyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a>b && b>c && a>c)\
    \ {\n        return true;\n    }\n    else if(a>c && c>b && a>b) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n/*\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkk4y1vbp.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkk4y1vbp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\t// The sides are all positive.\n\
    \tif (a < b && b < c)\n\t{\n\t\tlong d = (b - c)/2;\n\t\tif (std::abs(a-c) <=\
    \ d && std::abs(a-b) <= d && std::abs(b-a) <= d)\n\t\t\treturn true;\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\telse\n\t{\n\t\tlong e = (a - b)/2;\n\t\tif (std::abs(b-a)\
    \ <= e && std::abs(b-c) <= e && std::abs(a-c) <= e)\n\t\t\treturn true;\n\t\t\
    else\n\t\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73esco5g.d(22): Error: found `:` when expecting `)`

    /tmp/tmp73esco5g.d(22): Error: found `:` instead of statement

    /tmp/tmp73esco5g.d(30): Error: found `:` when expecting `)`

    /tmp/tmp73esco5g.d(30): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73esco5g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if ( b != 0 ) \n    {\n\
    \        if ( b > a ) return right_angle_triangle(a, b, c - 1);\n        if (\
    \ b == a ) return (c > a && c > b);\n        if ( b > c ) return right_angle_triangle(a,\
    \ b, c + 1);\n    }\n    if ( c == 0 ) return false; // two zero sides\n    if\
    \ ( c > b ) return right_angle_triangle(a - 1, b, c);\n    if ( c == b ) return\
    \ true;\n    if ( c < b ) return right_angle_triangle(a - 1, c, b);\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp34baavgn.d(16): Error: function `tmp34baavgn.right_angle_triangle`
    no `return exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp34baavgn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long sA = b * b - a *\
    \ a;\n    long sB = 2 * a * b - c * a;\n    long sC = 2 * b * c - a * a;\n   \
    \ if(sA < 0L) \n    {\n        long temp = sC;\n        sC = sB;\n        sB =\
    \ temp;\n    }\n    if(sB < 0L) \n    {\n        long temp = sA;\n        sA =\
    \ sC;\n        sC = temp;\n    }\n    if(sC < 0L) \n    {\n        long temp =\
    \ sB;\n        sB = sA;\n        sA = temp;\n    }\n    if(sA > sB) \n    {\n\
    \        if(sA > sC) \n        {\n            return true;\n        }\n      \
    \  else\n        {\n            return false;\n        }\n    }\n    else \n \
    \   {\n        if(sB > sC) \n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }\n    }\n}\n</code>\n\
    <|/ a |>\n<| a tags=c++,geometry dscore=1 |>\nHere is a C++ solution:\n<code>\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2lfsj7c.d(62): Error: declaration expected, not `<`

    /tmp/tmpx2lfsj7c.d(71): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(72): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(73): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(74): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(75): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(76): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(77): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(78): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(79): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(80): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(81): Error: declaration expected, not `assert`

    /tmp/tmpx2lfsj7c.d(82): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2lfsj7c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b > a && a > c) ||\
    \ (b > c && c > a) || (a > b && b > c))\n    {\n        return false;\n    }\n\
    \    else if(b == c || (a == b && b == c-a))\n    {\n        return true;\n  \
    \  }\n    else if(b > a && a > c && (b - c) > a && (b - a) > c)\n    {\n     \
    \   return true; \n    }\n    else if(b > c && c > a && (c - b) > a && (c - a)\
    \ > b)\n    {\n        return true;\n    }\n    return false;\n}\n</code>\n<|/\
    \ a tags=geometry,python |>\n<| c |>\nWhile this link may answer the question,\
    \ it is better to include the essential parts of the answer here and provide the\
    \ link for reference. Link-only answers can become invalid if the linked page\
    \ changes\n<|/ c |>\n<| a |>\n<code>\ndef isRightTriangle(a,b,c):\n    if(a==b\
    \ and a==c): return True\n    if b==c or (a==b and a==c-a): return True\n    if\
    \ a<b and a<c and b<c and a>=b and a>c:\n        return True\n    return False\n\
    </code>\n<|/ a dscore=2 tags=geometry,python |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a tags=geometry,python |>\n\
    <code>\ndef right_angle_triangle(a, b, c):\n    # check all three sides\n    if\
    \ (a == b and a == c) or (b == c and a == c-a) or (a == b and b == c) or (a ==\
    \ c and b == c-a):\n        return True\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumdwau35.d(36): Error: declaration expected, not `<`

    /tmp/tmpumdwau35.d(64): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(65): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(66): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(67): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(68): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(69): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(70): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(71): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(72): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(73): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(74): Error: declaration expected, not `assert`

    /tmp/tmpumdwau35.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumdwau35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    /* The three sides lengths\
    \ are */\n    long length1 = sqrt(a * a + b * b + c * c);\n    long length2 =\
    \ sqrt(a * b + b * a + c * c);\n    long length3 = sqrt(a * c + b * c + c * a);\n\
    \    \n    /* To verify that all three sides have the same length we must ensure\
    \ that they are */\n    /* positive. Otherwise the test is useless. Thus if the\
    \ first two sides lengths */\n    /* are equal, the third one must be zero. \n\
    \    \n    If any of those three sides has zero length then we conclude that the\
    \ three sides */\n    /* are not right-angled. */\n    \n    if (length1 == 0)\
    \ \n    {\n        if (length2 == 0) \n            return false;\n        return\
    \ true; \n    }\n    if (length2 == 0) \n    {\n        return true; \n    }\n\
    \    if (length3 == 0) \n    {\n        return false; \n    }\n    \n    /* The\
    \ test for the common length must be true only if all three sides */\n    /* have\
    \ length 1, that is, if their dot product is zero. */\n    \n    long a_dot, b_dot,\
    \ c_dot;\n    \n    a_dot = b * b - c * c;\n    b_dot = a * c - b * a;\n    c_dot\
    \ = a * b - c * a;\n    \n    return a_dot == 0 && b_dot == 0 && c_dot == 0; \n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmnejymn.d(19): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpwmnejymn.d(20): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpwmnejymn.d(21): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a == b) \n        return\
    \ a == c;\n    else if(b == c) \n        return a == b;\n    else \n        return\
    \ ((a*a + b*b) == (c*c + b*b)) || (((b*b - a*a) == (c*c - b*b)) || ((b*b - a*a)\
    \ == (c*c - b*b));\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nHere is my simple\
    \ solution:\n<code>\ndef triangle(a,b,c):\n    return (a==b or b==c or a==c) and\
    \ a>0 and b>0 and c>0 and a<b and b<c and a < c\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeswtlpn2.d(23): Error: found `;` when expecting `)`

    /tmp/tmpeswtlpn2.d(24): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmpeswtlpn2.d(25): Error: found `<` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeswtlpn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long lcm = lcm(a, b);\n\
    \    if (lcm == 0 || lcm == a) {\n        if (b != 0) return false;\n    }\n \
    \   else if (lcm == b) {\n        if (a%2 == 0) return false;\n    }\n    else\
    \ if ((a * b) == (c / 2)) {\n        return (a * a + b * b + c) > lcm;\n    }\n\
    \    else {\n        return (a * b + a * c + b * c) > lcm;\n    }\n}\n</code>\n\
    <|/ a dscore=2 tags=algorithm,java |>\n<| c |>\n`a % 2 == 0` returns `true` for\
    \ even `a`, which is not right. You can fix that by adding `if (a%2==0) {return\
    \ false}`. And you can also simplify your code by using `return lcm(a,b) == a*a\
    \ + b*b + c;` instead of `if`s.\n<|/ c |>\n<| c |>\n: Thanks for pointing that\
    \ out. I edited my answer accordingly.\n<|/ c |>\n<| a tags=algorithm,java |>\n\
    You can use the formula for right angled triangles to determine whether one side\
    \ is right or wrong.\nLet's suppose you have three sides: a, b, c.\nThe formula\
    \ for right angled triangles is:\n<code>\nif(a + b > c && a + c > b && b + c >\
    \ a) {\n    // triangle is right angled\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    You will have to compute the GCD of the lengths of the 3 sides. If the GCD is\
    \ 1 (all common divisors including 1 and itself), then it is an equilateral triangle.\
    \ If it is 2 (two equal elements), then it is a scalene triangle. If it is >2\
    \ (all equal), then it is a right angled triangle.\n<|/ a dscore=1 tags=algorithm,java\
    \ |>\n<| a dscore=1 |>\n<code>\npublic boolean isRightAngled(int a, int b, int\
    \ c)\n{\n    if(a==0 && b==0 && c==0) return true;\n    if(a==0 || b==0 || c==0)\
    \ return false;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvyg_mrt.d(32): Error: declaration expected, not `<`

    /tmp/tmpwvyg_mrt.d(42): Error: unterminated character constant

    /tmp/tmpwvyg_mrt.d(58): Error: declaration expected, not `if`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvyg_mrt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if( (b==0)&&(c==0))\n\
    \    {\n        return true;\n    }\n    else\n    {\n        if( c>b )\n    \
    \    {\n            long temp=a;\n            a=b;\n            b=temp;\n    \
    \    }\n        if(a>c)\n        {\n            long temp=a;\n            a=c;\n\
    \            c=temp;\n        }\n        if(a>b)\n        {\n            long\
    \ temp=b;\n            b=a;\n            a=temp;\n        }\n        bool isRightAngle\
    \ = false;\n        long l1 = (b - a) / 2, l2 = (c-b) / 2;\n        if (l1 * l2\
    \ > 0)\n        {\n            isRightAngle = true;\n            if (l1 == l2)\n\
    \            {\n                long temp = l1;\n                l1 = l2;\n  \
    \              l2 = temp;\n            }\n            long tmp = (l2 + l1) / 2;\n\
    \            isRightAngle = is_right_angle(a , c, tmp);\n        }\n        return\
    \ isRightAngle;\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzw703i0i.d(54): Error: undefined identifier `is_right_angle`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzw703i0i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tlong a1 = abs(a); \n\tlong\
    \ a2 = abs(b);\n\tlong a3 = abs(c);\n\tlong b1 = abs(b - a); \n\tlong b2 = abs(c\
    \ - b); \n\tlong b3 = abs(a - c); \n\t\n\tlong s = a * b * c3 + b * c2 * c3 +\
    \ c * a2 * c3;\n\tlong t = a1 * a2 * c3 + b1 * a3 * c3 + c1 * a3 * c3;\n\tlong\
    \ n = a1 * a2 * c3 + (a2 + a1) * b2 * c3 + (b2 + b1) * c2 * c3;\n\t\n\tif((b2\
    \ - b1) < 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif((b3 - b2) < 0)\n\t{\n\t\t\
    return false;\n\t}\n\t\n\tif((b3 - b1) < 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\
    \tif((n - s) / t < 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6kc238z0.d(25): Error: undefined identifier `c3`, did you mean
    variable `a3`?

    /tmp/tmp6kc238z0.d(25): Error: undefined identifier `c2`, did you mean variable
    `a2`?

    /tmp/tmp6kc238z0.d(25): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(25): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(26): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(26): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(26): Error: undefined identifier `c1`, did you mean variable
    `a1`?

    /tmp/tmp6kc238z0.d(26): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(27): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(27): Error: undefined identifier `c3`, did you mean variable
    `a3`?

    /tmp/tmp6kc238z0.d(27): Error: undefined identifier `c2`, did you mean variable
    `a2`?

    /tmp/tmp6kc238z0.d(27): Error: undefined identifier `c3`, did you mean variabl'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long A, B, C;\n    if((b\
    \ - a) >= (c-a))\n    {\n        A = b; B = c;\n        C = a ;\n    }\n    else\n\
    \    {\n        A = a; B = c;\n        C = b ;\n    }\n    \n    float d = (C\
    \ - A) * (B - A);\n    float e = (C - A) * (C - B);\n    float f = (A - B) * (C\
    \ - A);\n    \n    if(d == 0)\n    {\n        if(e == 0)\n        {\n        \
    \    return true;\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    \n    if( e == 0)\n    {\n        if( f == 0)\n       \
    \ {\n            return true;\n        }\n        else\n        {\n          \
    \  return false;\n        }\n    }\n    \n    float g = d / (e * f);\n    return\
    \ ((g == Math.PI || g == -Math.PI) && (a <= C && b <= A || a <= A && b <= C))\
    \ ;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13g3xm5s.d(59): Error: undefined identifier `Math`

    /tmp/tmp13g3xm5s.d(59): Error: undefined identifier `Math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13g3xm5s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    /*\n        We want to\
    \ see if any of these three sides are equal\n    */\n    bool eq = true;\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ljz4qwe.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ljz4qwe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (b - a) * (c -\
    \ b) <= 0;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n  \
    \  assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8w6lgef6.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmp8w6lgef6.__unittest_L20_C1() [0x427a56]

    ??:? void tmp8w6lgef6.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    //check all points are\
    \ on same line\n    if(b!=c)\n    {\n        float s = (b-c)*b - (a-c)*a;\n  \
    \      if (s > 0.0f)\n        {\n            return false;\n        }\n    }\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxood_9x.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxood_9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\treturn (a != 0 && b != 0\
    \ && a * b > c * c);\n}\n</code>\n<|/ a dscore=1 tags=python,algorithm,geometry,computational-geometry,c++\
    \ |>\n<| a tags=python,algorithm,geometry,computational-geometry,c++ |>\nThis\
    \ is another way of doing it.\n<code>\ndef triangle_angle_check(triangle_side_lengths):\n\
    \    three_side = triangle_side_lengths\n    if len(three_side) == 2:\n      \
    \  return False\n    length = len(three_side)\n    sum1 = (three_side[0] ** 2)\
    \ + (three_side[1] ** 2)\n    sum2 = ((length - 1) * three_side[0]) - ((length\
    \ - 1) * three_side[1])\n    if sum1 == sum2:\n        return True\n    if sum1\
    \ < sum2:\n        return True\n    else:\n        return False\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=python,algorithm,geometry,computational-geometry,c++\
    \ |>\nThe other answers are correct, but they don't give all the details. Here\
    \ is a more complete implementation which includes edge cases and a test suite.\n\
    <code>\ndef is_rightangle(a, b, c):\n    if a == 0 and b == 0 and c == 0:\n  \
    \      return True\n    if a == 0 or b == 0 or c == 0:\n        return False\n\
    \    return b**2 == c**2 and (a+b+c)**2 <= (a*a+b*b+c*c)\n</code>\nThe test suite\
    \ is as follows:\n<code>\ndef t_is_rightangle(test):\n    test.assert_equals(is_rightangle(0,\
    \ 0, 1), True)\n    test.assert_equals(is_rightangle(0, 1, 1), False)\n    test.assert_equals(is_rightangle(1,\
    \ 0, 0), False)\n    test.assert_equals(is_rightangle(1, 1, 1), True)\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_op0o76z.d(20): Error: declaration expected, not `<`

    /tmp/tmp_op0o76z.d(41): Error: unterminated character constant

    /tmp/tmp_op0o76z.d(61): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(62): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(63): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(64): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(65): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(66): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(67): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(68): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(69): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(70): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(71): Error: declaration expected, not `assert`

    /tmp/tmp_op0o76z.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_op0o76z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (((b * c + a *\
    \ c) - (b * a + a * b)) > 0);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu3_m_7vc.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmpu3_m_7vc.__unittest_L20_C1() [0x427a9f]

    ??:? void tmpu3_m_7vc.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return !(b != c && b !=\
    \ a && c != a && c != b);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd7fr0d_3.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpd7fr0d_3.__unittest_L20_C1() [0x427a56]

    ??:? void tmpd7fr0d_3.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  // compute the length of\
    \ the sides\n  long length = sqrt(pow(a, 2) + pow(b, 2));\n  \n  // check if we\
    \ get a right angle\n  if (length == 0 || length == 1) return false;\n  \n  //\
    \ compute whether each side is longer than the other\n  double angle = atan2(b,\
    \ a);\n  if (angle > pi / 2.0) \n  {\n    angle = -angle;\n  }\n  double angleDiff\
    \ = angle - pi / 2.0;\n  double diffSin = sin(angleDiff);\n  double diffCos =\
    \ cos(angleDiff);\n  \n  long diff = (long)((b - c) * diffSin - a * diffCos);\n\
    \  \n  long diffSquare = diff * diff;\n  \n  long result = (long)(length * diffSquare\
    \ - diff);\n  \n  return result >= 0L;\n}\nunittest\n{\n    alias candidate =\
    \ right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2a6ikbbh.d(34): Error: C style cast illegal, use `cast(long)((b
    - c) * diffSin - a * diffCos)`

    /tmp/tmp2a6ikbbh.d(38): Error: C style cast illegal, use `cast(long)(length *
    diffSquare - diff)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2a6ikbbh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tbool result = false;\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp071fm6x2.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp071fm6x2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return std.algorithm.right_angle(a,\
    \ b, c) == 90;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwoyv6sc.d(18): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwoyv6sc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (a+b+c == lt(a,b,c));\n\
    }\n</code>\n<|/ a |>\n<| c |>\n`abs(a) > abs(b) || abs(b) > abs(c)` can also be\
    \ `(a<b<c)`\n<|/ c |>\n<| a tags=c++,math,geometry,geometry dscore=0 |>\nJust\
    \ for the record, here are three functions to check whether three points are collinear.\n\
    <code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwlob3sc7.d(20): Error: declaration expected, not `<`

    /tmp/tmpwlob3sc7.d(32): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(33): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(34): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(35): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(36): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(37): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(38): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(39): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(40): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(41): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(42): Error: declaration expected, not `assert`

    /tmp/tmpwlob3sc7.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwlob3sc7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (((b * b) - (c\
    \ * c)) == ((a * a) - (b * b)));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzqxuwh3v.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmpzqxuwh3v.__unittest_L20_C1() [0x427a5a]

    ??:? void tmpzqxuwh3v.__modtest() [0x427c00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle = (a*b + c*a)\
    \ mod 180;\n    return angle == 90 || angle == 270;\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0aahu4oh.d(18): Error: semicolon expected, not `mod`

    /tmp/tmp0aahu4oh.d(18): Error: found `180` when expecting `;` following statement

    /tmp/tmp0aahu4oh.d(18): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0aahu4oh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    //return ((a*a + b*b ==\
    \ c*c) && ((a+b > c) && (a+c > b)) && !(a + b > c));\n    \n    int aa = a * a;\n\
    \    int bb = b * b;\n    int cc = c * c;\n    if (aa + bb > cc)\n    {\n    \
    \    if ((aa + cc > bb) && (aa + bb > cc))\n        {\n            if (bb > cc)\n\
    \            {\n                return true;\n            }\n            else\n\
    \            {\n                return false;\n            }\n        }\n    \
    \    else \n        {\n            return false;\n        }\n    }\n    else\n\
    \    {\n        return false;\n    }\n}\n</cell>\n<cell>\nassert(right_angle_triangle(7,\
    \ 4, 7) == True)\nassert(right_angle_triangle(9, 5, 9) == False)\nassert(right_angle_triangle(12,\
    \ 6, 10) == True)\nassert(right_angle_triangle(5, 3, 7) == False)\nassert(right_angle_triangle(4,\
    \ 2, 7) == True)\nassert(right_angle_triangle(5, 1, 9) == True)\nassert(right_angle_triangle(7,\
    \ 3, 5) == True)\nassert(right_angle_triangle(5, 7, 4) == False)\nassert(right_angle_triangle(9,\
    \ 8, 9) == True)\nassert(right_angle_triangle(11, 12, 12) == True)\n</cell>\n\
    <text>\nA triangle can be represented as a vector of three sides: $(a,b,c)$. An\
    \ equilateral triangle has sides $(1,3,5)$ and $(4,6,8)$. There are 8 equilateral\
    \ triangles: $1,2,3,4,5,6,7,8$.\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8g6bm2wb.d(46): Error: declaration expected, not `<`

    /tmp/tmp8g6bm2wb.d(65): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(66): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(67): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(68): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(69): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(70): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(71): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(72): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(73): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(74): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(75): Error: declaration expected, not `assert`

    /tmp/tmp8g6bm2wb.d(76): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8g6bm2wb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a < b && b < c)\n\
    \    {\n        long angleA = std.typecons.angle(a);\n        long angleB = std.typecons.angle(b);\n\
    \        long angleC = std.typecons.angle(c);\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fjxuwww.d(23): Error: found `unittest` instead of statement

    /tmp/tmp5fjxuwww.d(39): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fjxuwww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a == b && c ==\
    \ b) || (a == c && b == c)) || ((b == a && c == a) || (b == c && c == c) || (c\
    \ == a && b == b));\n}\n</code>\n<|/ a |>\n<| a tags=geometry,language-agnostic,algorithm\
    \ dscore=3 |>\nI implemented the other answers already and was happy to see them\
    \ being up-voted.\nI decided to implement a very efficient version of this algorithm\
    \ that does not require the use of floating point operations. It is written in\
    \ Pascal. Here is the source code.\nThe program is designed to run in 2ms on a\
    \ desktop computer. Even when compiled for 64bit the speed is around 4ms.\nThe\
    \ program takes in three numbers and calculates the area of any convex polygon.\
    \ I then added a function that calculates the area of any polygon given two vertices.\
    \ The polygon is assumed to be convex.\nThe function returns the calculated area\
    \ in floating point arithmetic.\nThe function also checks if a point is inside\
    \ the polygon. \n<code>\nfunction Area(A, B, C: TPoint): real;\nvar\n  R1, R2,\
    \ R3: real;\nbegin\n  R1 := ((B - A) * (C - B)) - ((C - A) * (B - A));\n  R2 :=\
    \ ((C - A) * (B - C)) - ((B - A) * (C - C));\n  R3 := ((B - A) * (C - B)) - ((C\
    \ - A) * (B - A));\n  if ((R1 + R2 + R3) < 0) then\n    begin\n      Area:=+Infinity;\n\
    \      Exit;\n    end\n  else if ((R1 + R2 + R3) > 0) then\n    begin\n      Area:=-Infinity;\n\
    \      Exit;\n    end\n  else\n    begin\n      Area:=SQRT((R1 * R1) + (R2 * R2)\
    \ + (R3 * R3));\n      Exit;\n    end;\nend;\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6yq4nci.d(20): Error: declaration expected, not `<`

    /tmp/tmpp6yq4nci.d(25): Error: radix 10 digit expected, not `b`

    /tmp/tmpp6yq4nci.d(32): Error: semicolon expected, not `:`

    /tmp/tmpp6yq4nci.d(32): Error: declaration expected, not `:`

    /tmp/tmpp6yq4nci.d(34): Error: semicolon expected, not `:`

    /tmp/tmpp6yq4nci.d(34): Error: declaration expected, not `:`

    /tmp/tmpp6yq4nci.d(35): Error: no identifier for declarator `R2`

    /tmp/tmpp6yq4nci.d(35): Error: declaration expected, not `:`

    /tmp/tmpp6yq4nci.d(36): Error: no identifier for declarator `R3`

    /tmp/tmpp6yq4nci.d(36): Error: declaration expected, not `:`

    /tmp/tmpp6yq4nci.d(37): Error: declaration expected, not `if`

    /tmp/tmpp6yq4nci.d(40): Error: no identifier for declarator `Exit`

    /tmp/tmpp6yq4nci.d(42): Error: no identifier for declarator `end`

    /tmp/tmpp6yq4nci.d(42): Error: declaration expected, not `else`

    /tmp/tmpp6yq4nci.d(45): Error: no identifier for declarator `Exit`

    /tmp/tmpp6yq4nci.d(47): Error: no identifier for declarator `end`

    /tmp/tmpp6yq4nc'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif((b - c) > 0) return false;\n\
    \tif((b - a) < 0) return false;\n\tif((b + a) > c) return false;\n\treturn true;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuo08yrnv.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e9d]

    ??:? void tmpuo08yrnv.__unittest_L23_C1() [0x427a76]

    ??:? void tmpuo08yrnv.__modtest() [0x427c1c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbc3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa56]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430098]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]

    ??:? runModuleUnitTests [0x42b999]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif((b - a) * (c - b) < 0)\n\
    \t\treturn false;\n\tif(a == b) \n\t{\n\t\tif(c > b) \n\t\t\treturn true;\n\t\t\
    return false;\n\t}\n\tif(a == c) \n\t{\n\t\tif(b > c) \n\t\t\treturn true;\n\t\
    \treturn false;\n\t}\n\tif(a > b) \n\t{\n\t\tif(b > c) \n\t\t\treturn true;\n\t\
    \telse \n\t\t\treturn false;\n\t}\n\telse \n\t{\n\t\tif(b > c) \n\t\t\treturn\
    \ false;\n\t\telse \n\t\t\treturn true;\n\t}\n}\n/*\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwi0nyo6r.d(47): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwi0nyo6r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return \n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) || \n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c)) ||\n         (std.math.isRightAngle(a)\
    \ && std.math.isRightAngle(b) && std.math.isRightAngle(c));\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1i2eu_sc.d(19): Error: undefined identifier `isRightAngle` in module
    `std.math`

    /tmp/tmp1i2eu_sc.d(19): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(19): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(20): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(20): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(20): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(21): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(21): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(21): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(22): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(22): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(22): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(23): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(23): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(23): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(24): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(24): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(24): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(25): Error: undefined identifier `isRightAngle` in module `std.math`

    /tmp/tmp1i2eu_sc.d(25): Error: undefined identifier `isRightAngle` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1i2eu_sc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a <= b) {\n      \
    \  if ((b - a) > (c - a)) {\n            long d1 = (b - a) / 2;\n            long\
    \ d2 = (c - a) / 2;\n            if (d2 == 0) return false;\n            return\
    \ right_angle_triangle(a + d1, b + d2, c);\n        } else {\n            long\
    \ d1 = (c - a) / 2;\n            long d2 = (b - a) / 2;\n            if (d2 ==\
    \ 0) return false;\n            return right_angle_triangle(a, b + d2, c);\n \
    \       }\n    } else {\n        if ((c - b) > (b - a)) {\n            long d1\
    \ = (c - b) / 2;\n            long d2 = (b - a) / 2;\n            if (d2 == 0)\
    \ return false;\n            return right_angle_triangle(a, b + d1, c);\n    \
    \    } else {\n            long d1 = (b - a) / 2;\n            long d2 = (c -\
    \ b) / 2;\n            if (d2 == 0) return false;\n            return right_angle_triangle(a,\
    \ b, d2);\n        }\n    }\n}\n</code>\n<|/ a dscore=1 tags=function,c++,geometry\
    \ |>\n<| c |>\nThe question mentions `return false;`. What happens if all three\
    \ sides are equal? It returns true for me (GCC 4.8.3 on Linux). You might want\
    \ to add `else` (or `else if`) to return `false` *only* if the `if`-statement\
    \ is false. Otherwise, you are returning false *always*.\n<|/ c |>\n<| a tags=function,c++,geometry\
    \ |>\nI think the problem is that your function doesn't return any value if d1=d2\
    \ and d2!=d1. That's why it says they are different.\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThat is because `d1!=d2` never happens in your code. `d2` will always be\
    \ greater or equal to `d1` when `a<b`\n<|/ c |>\n<| c |>\n: No, that's not what\
    \ happens. Even if `d1 != d2`, your function will say they are different regardless\
    \ of the values of `d1/d2` because your function returns false in all cases (regardless\
    \ of the values of `d1/d2`).\n<|/ c |>\n<| c |>\nNo, the issue is that `d1 <=\
    \ d2`. This should have been explained by in the other answer.\n<|/ c |>\n<| a\
    \ tags=function,c++,geometry |>\nIn your code, you are saying that if a <= b,\
    \ then d1 <= d2, and then you are saying that if d1 != d2, then they must be different.\n\
    This means that if the return value is true, then the 3 sides are different.\n\
    <|/ a dscore=1 |>\n\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpetqd5irw.d(44): Error: declaration expected, not `<`

    /tmp/tmpetqd5irw.d(50): Error: unterminated character constant

    /tmp/tmpetqd5irw.d(50): Error: unterminated character constant

    /tmp/tmpetqd5irw.d(56): Error: unterminated character constant

    /tmp/tmpetqd5irw.d(70): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(71): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(72): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(73): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(74): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(75): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(76): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(77): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(78): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(79): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(80): Error: declaration expected, not `assert`

    /tmp/tmpetqd5irw.d(81): Error: unrecognized decl'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return std.math.abs(std.math.angle(b,c)\
    \ - std.math.angle(a,b)) < std.math.pi;\n}\n</code>\nIn your case you have the\
    \ sides lengths, so all you have to do is compare the angles between the sides.\
    \ \nEDIT:\n<code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n\
    \    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2ybcssa.d(20): Error: declaration expected, not `<`

    /tmp/tmpg2ybcssa.d(28): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(29): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(30): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(31): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(32): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(33): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(34): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(35): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(36): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(37): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(38): Error: declaration expected, not `assert`

    /tmp/tmpg2ybcssa.d(39): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2ybcssa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2));\n    long side2 = sqrt(pow(a, 2) + pow(c, b));\n    long side3\
    \ = sqrt(pow(a, 2) + pow(b, 2));\n    bool flag;\n    \n    flag = (side1 < side2\
    \ && side2 > side3 && side3 > side1);\n    \n    return flag;\n}\nunittest\n{\n\
    \    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L)\
    \ == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpldt2i97l.d(18): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpldt2i97l.d(19): Error: `std.math.sqrt` called with argument types `(long)`
    matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmpldt2i97l.d(20): Error: `std.math.sqrt` called with argument ty'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\treturn ((a * b) > c) &&\
    \ ((b * a) > c) && ((b * c) > a) && ((a * c) > b);\n}\n*/\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpln4fkh2s.d(20): Error: declaration expected, not `*`

    /tmp/tmpln4fkh2s.d(25): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(26): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(27): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(28): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(29): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(30): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(31): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(32): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(33): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(34): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(35): Error: declaration expected, not `assert`

    /tmp/tmpln4fkh2s.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpln4fkh2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int a1 = abs(a - c);\n\
    \    int a2 = abs(b - c);\n    int b1 = abs(a - b);\n    int b2 = abs(b - a);\n\
    \    int c1 = abs(a - b);\n    int c2 = abs(b - a);\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72tfcft2.d(24): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72tfcft2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a * b) < (a *\
    \ c)) || ((b * b) < (b * c)) || ((c * c) < (a * a));\n}\nunittest\n{\n    alias\
    \ candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n\
    \    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L)\
    \ == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6f0bh337.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmp6f0bh337.__unittest_L20_C1() [0x427abf]

    ??:? void tmp6f0bh337.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if( a == b) \n    {\n\
    \        if( a == c) return true; \n        else return false;\n    }\n    else\
    \ if( a == c) \n    {\n        if(b == c) return true; \n        else return false;\n\
    \    }\n    else \n    {\n        if( b == c) return true; \n        else return\
    \ false;\n    }\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nUsing recursive functions:\n\
    <code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8yvv_osq.d(34): Error: declaration expected, not `<`

    /tmp/tmp8yvv_osq.d(43): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(44): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(45): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(46): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(47): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(48): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(49): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(50): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(51): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(52): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(53): Error: declaration expected, not `assert`

    /tmp/tmp8yvv_osq.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8yvv_osq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return !((std::abs(b -\
    \ c) >= std::abs(a - b)));\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61362ski.d(18): Error: found `:` when expecting `)`

    /tmp/tmp61362ski.d(18): Error: found `:` when expecting `)`

    /tmp/tmp61362ski.d(18): Error: found `abs` when expecting `;` following `return`
    statement

    /tmp/tmp61362ski.d(18): Error: found `:` when expecting `;` following statement

    /tmp/tmp61362ski.d(18): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp61362ski.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // right angled triangle\n\
    \    if(a==b) \n    {\n        if(a==c)\n            return true;\n        else\n\
    \            return false;\n    }\n    // right angled triangle - 90 degree\n\
    \    if(a==c)\n    {\n        if(b==c)\n            return true;\n        else\n\
    \            return false;\n    }\n    // left angled triangle\n    if(b==c)\n\
    \    {\n        if(a==b)\n            return true;\n        else\n           \
    \ return false;\n    }\n    // triangle\n    return false;\n}\n</code>\n<|/ a\
    \ tags=c#,c++,c++-cli dscore=0 |>\n<| c |>\n`a==b`? That's not right angled triangle.\
    \ `a!=b`? That's right angled triangle.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    #include <bits/stdc++.h>\nusing namespace std;\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5tlgsgy.d(45): Error: declaration expected, not `<`

    /tmp/tmpi5tlgsgy.d(48): Error: unterminated character constant

    /tmp/tmpi5tlgsgy.d(48): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5tlgsgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  // Write your code here\n\
    \  // write code here\n   float x = ((float)(b * b) - (float)(b * c)) / ((float)(a\
    \ * a) - (float)(b * b));\n    float y = ((float)(b * b) - (float)(b * c)) / ((float)(a\
    \ * a) - (float)(b * b));\n    float z = ((float)(b * b) - (float)(b * c)) / ((float)(a\
    \ * a) - (float)(b * b));\n   bool flag = false;\n   if (x == 0.0f && y == 0.0f\
    \ && z == 0.0f)\n     flag = true;\n   else\n     flag = false;\n   return flag;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk5m2mfkd.d(20): Error: C style cast illegal, use `cast(float)(b
    * b)`

    /tmp/tmpk5m2mfkd.d(20): Error: C style cast illegal, use `cast(float)(b * c)`

    /tmp/tmpk5m2mfkd.d(20): Error: C style cast illegal, use `cast(float)(a * a)`

    /tmp/tmpk5m2mfkd.d(20): Error: C style cast illegal, use `cast(float)(b * b)`

    /tmp/tmpk5m2mfkd.d(21): Error: C style cast illegal, use `cast(float)(b * b)`

    /tmp/tmpk5m2mfkd.d(21): Error: C style cast illegal, use `cast(float)(b * c)`

    /tmp/tmpk5m2mfkd.d(21): Error: C style cast illegal, use `cast(float)(a * a)`

    /tmp/tmpk5m2mfkd.d(21): Error: C style cast illegal, use `cast(float)(b * b)`

    /tmp/tmpk5m2mfkd.d(22): Error: C style cast illegal, use `cast(float)(b * b)`

    /tmp/tmpk5m2mfkd.d(22): Error: C style cast illegal, use `cast(float)(b * c)`

    /tmp/tmpk5m2mfkd.d(22): Error: C style cast illegal, use `cast(float)(a * a)`

    /tmp/tmpk5m2mfkd.d(22): Error: C style cast illegal, use `cast(float)(b * b)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk5m2mfkd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if ( (a==b) || (a==c)\
    \ || (b==c) )\n        return true;\n    else if ((b<0) && (a<0))\n        return\
    \ true;\n    else if ((b<0) && (c<0))\n        return true;\n    else if ((b>0)\
    \ && (c<0))\n        return true;\n    else if ((a>0) && (b>0))\n        return\
    \ true;\n    else if ((a>0) && (c>0))\n        return true;\n    else if ((b>0)\
    \ && (a>0))\n        return true;\n    else\n        return false;\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5f0ju83t.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmp5f0ju83t.__unittest_L35_C1() [0x427acb]

    ??:? void tmp5f0ju83t.__modtest() [0x427c48]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n   if(a > b+c || b > a+c ||\
    \ c > a+b) \n      return false;\n   long s = (a + b - c) / 2;\n   return (b -\
    \ s) * (s - a) * (s - b) < 0;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsur8kumv.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpsur8kumv.__unittest_L23_C1() [0x427a9a]

    ??:? void tmpsur8kumv.__modtest() [0x427c40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tlong d, e, f, g;\n\tlong\
    \ delta;\n\tint result;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppyrtp4vd.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppyrtp4vd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long det = a*d - b*c;\n\
    \    if (det < 0) \n    {\n        bool b1 = (b >= c);\n        bool b2 = (b <=\
    \ c);\n        if (b1 && b2) \n        {\n            return true;\n        }\n\
    \        else \n        {\n            return false;\n        }\n    }\n    else\
    \ \n    {\n        return det >= 0;\n    }\n}\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplaekwfcn.d(18): Error: undefined identifier `d`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaekwfcn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    int ra = abs(a);\n   \
    \ int rb = abs(b);\n    int rc = abs(c);\n    int det = ra * rb - rc * ra;\n \
    \   if(det == 0) \n        return false;\n    else if(det > 0) \n        return\
    \ ((ra * c - rb * c) / det) < 90;\n    else\n        return ((rb * c - ra * c)\
    \ / det) < 90;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the right\
    \ way to solve this question. The questioner is asking about the difference between\
    \ sides of triangle where only 4 points are given and you are considering 3 sides.\n\
    <|/ c |>\n<| c |>\nIt doesn't matter how many sides are given.  Just use all the\
    \ given points to determine whether you have the right triangle or not.\n<|/ c\
    \ |>\n<| c |>\nThe point of this answer is to show how to determine the angles\
    \ needed to make a right triangle, regardless of how many sides the triangle has.\n\
    <|/ c |>\n<| a tags=c++,geometry,math,trigonometry |>\nYou can draw a line to\
    \ each side, get its perpendicular lines to each other side and compare the slopes.\
    \ If slope are equal, then you have a right triangle.\n<|/ a dscore=2 |>\n<| a\
    \ |>\nIf there are only 4 points in the triangle then you can't do any more complex\
    \ calculations. \nYou will have to take the sides parallel to each other and calculate\
    \ the angles of the lines to the other sides. If the angles are the same, then\
    \ you have a right triangle (assuming they are all positive).\n<|/ a tags=c++,geometry,math,trigonometry\
    \ dscore=1 |>\n<| c |>\nHow do you do that? Can you please provide some example\
    \ code?\n<|/ c |>\n<| c |>\nThis is incorrect. If there are more than 4 points,\
    \ the 4 sides aren't parallel to each other.\n<|/ c |>\n<| c |>\n: I'm guessing\
    \ you mean \"parallel to the same side\"? That is correct. :-)\n<|/ c |>\n<| c\
    \ |>\n: Ah, yes. I just fixed that.\n<|/ c |>\n<| c |>\n: How do you mean \"parallel\"\
    ? You mean all sides are parallel? That makes no sense as a right triangle.\n\
    <|/ c |>\n<| a dscore=1 |>\nThere are 2 possible answers:\nEither you have a right\
    \ triangle with 3 distinct sides. In which case your formula works just fine.\n\
    <code>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2blrrlux.d(29): Error: declaration expected, not `<`

    /tmp/tmp2blrrlux.d(35): Error: unterminated character constant

    /tmp/tmp2blrrlux.d(44): Error: unterminated character constant

    /tmp/tmp2blrrlux.d(51): Error: unterminated character constant

    /tmp/tmp2blrrlux.d(54): Error: unterminated character constant

    /tmp/tmp2blrrlux.d(70): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(71): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(72): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(73): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(74): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(75): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(76): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(77): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(78): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(79): Error: declaration expected, not `assert`

    /tmp/tmp2blrrlux.d(80): Error: declaration expected'
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n  return (b-a > c-a || c -\
    \ a > b - a )? false : true;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3bvs1ri.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e7d]

    ??:? void tmph3bvs1ri.__unittest_L20_C1() [0x427a56]

    ??:? void tmph3bvs1ri.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bba3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa36]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbc9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430078]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa0d]

    ??:? runModuleUnitTests [0x42b979]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // Check if one angle\
    \ is right\n    bool isRight = (a==b) || (a==c) || (b==c);\n    // Check if both\
    \ angles are equal\n    bool isEqual = (a==b);\n    if (isRight) \n    {\n   \
    \     // Check if both angles are equal\n        if (isEqual) return true;\n \
    \       // Check if angles are between 90 and 180 degrees\n        else return\
    \ ((b==0) || (b==180)) && ((a < (b+c)) || (a > (b+c)));\n    } \n    else \n \
    \   {\n        if (isEqual) return true;\n        else return ((c==0) || (c==180))\
    \ && ((a < (b+c)) || (a > (b+c)));\n    }\n}\n</code>\nThe above code can handle\
    \ all 3 side lengths.\n<|/ a dscore=1 |>\n<| a tags=c++,math,trigonometry,geometry\
    \ |>\nThis code will detect a right-angle triangle given three numbers. It's been\
    \ tested with many cases. But this code is only written for 3 numbers.\n<code>\n\
    #include <iostream>\nusing namespace std;\nunittest\n{\n    alias candidate =\
    \ right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdq_tm_c4.d(35): Error: declaration expected, not `<`

    /tmp/tmpdq_tm_c4.d(39): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdq_tm_c4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tlong angle1 = right_angle(a,\
    \ b);\n    long angle2 = right_angle(c, b);\n    long angle3 = right_angle(a,\
    \ b);\n    long angle4 = right_angle(a, c);\nunittest\n{\n    alias candidate\
    \ = right_angle_triangle;\n\n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L,\
    \ 2L, 3L) == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2l3h_xnd.d(22): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2l3h_xnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return (a < b) && (b <\
    \ c);\n}\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n   \
    \ assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiv5wx6xx.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiv5wx6xx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((std::abs(b) <= std::abs(c)))\
    \ // if one is longer than the other\n    {\n        if(a < b) // if the first\
    \ one is shorter than the other then they are different\n        {\n         \
    \   if((std::abs(b) > std::abs(c)))\n            {\n                return false;\n\
    \            }\n            else // a is longer than the other but both are equal\n\
    \            {\n                return true;\n            }\n        }\n     \
    \   else // the second one is longer than the first one\n        {\n         \
    \   if((std::abs(a) > std::abs(c)))\n            {\n                return true;\n\
    \            }\n            else // b is longer than the other but both are equal\n\
    \            {\n                return false;\n            }\n        }\n    }\n\
    \    else // if one is a shorter than other\n    {\n        if((std::abs(b) >\
    \ std::abs(c)))\n        {\n            return false;\n        }\n        else\
    \ // b is shorter than other but both are equal\n        {\n            return\
    \ true;\n        }\n    }\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp07it9o1j.d(18): Error: found `:` when expecting `)`

    /tmp/tmp07it9o1j.d(18): Error: found `:` when expecting `)`

    /tmp/tmp07it9o1j.d(18): Error: found `:` when expecting `;` following statement

    /tmp/tmp07it9o1j.d(18): Error: found `:` instead of statement

    /tmp/tmp07it9o1j.d(26): Error: declaration expected, not `else`

    /tmp/tmp07it9o1j.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp07it9o1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    // check validity of sides\n\
    \    if (a < 0)\n\ta *= -1;\n    if (b < 0)\n\tb *= -1;\n    if (c < 0)\n\tc *=\
    \ -1;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn5gmnpdd.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn5gmnpdd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164057
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\treturn (std.typecons.__less__(a,\
    \ b) && std.math.__less__(b, c) && std.math.__greater__(a, c));\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoy2js449.d(18): Error: undefined identifier `__less__` in module
    `std.typecons`

    /tmp/tmpoy2js449.d(18): Error: undefined identifier `__less__` in module `std.math`

    /tmp/tmpoy2js449.d(18): Error: undefined identifier `__greater__` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoy2js449.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    return ((a>b) && (b>c)\
    \ && (a>c)) || ((a<b) && (b<c) && (a<c)) || ((a==b) && (b==c));\n}\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3h0mj4fy.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e8d]

    ??:? void tmp3h0mj4fy.__unittest_L20_C1() [0x427a8f]

    ??:? void tmp3h0mj4fy.__modtest() [0x427c0c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbb3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa46]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbd9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430088]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb65]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa1d]

    ??:? runModuleUnitTests [0x42b989]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282dc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if(a>c && a>b)\n     \
    \   return false;\n    if(a<c && a<b)\n        return true;\n    if(a>b && a<c)\n\
    \        return true;\n    if(a<b && a>c)\n        return false;\n    if(a<c &&\
    \ a>b)\n        return false;\n    if(b<c && b<a)\n        return false;\n   \
    \ if(b>c && b<a)\n        return true;\n    if(b>a && b<c)\n        return true;\n\
    \    if(b<a && b>c)\n        return true;\n    if(a==b==c)\n        return false;\n\
    \    \n    //TODO: Implement a better algorithm for triangle intersections\n \
    \   // http://en.wikipedia.org/wiki/Line-line_intersection\n    // http://code.google.com/p/math-utils/source/browse/trunk/math-utils/src/main/java/math/Line.java?r=13\n\
    \    // http://stackoverflow.com/questions/1528335/how-can-i-test-if-a-point-lies-along-a-line-segment\n\
    \    \n    return false;\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7gzqhknz.d(36): Error: found `==` when expecting `)`

    /tmp/tmp7gzqhknz.d(36): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7gzqhknz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tlong x,y,z;\n\tif(a==0 &&\
    \ b==0 || c==0)\n\t\treturn true;\n\tx = (a * b) - (c * b);\n\tif(x<0)\n\t\tx\
    \ = -x;\n\ty = (a * c) - (b * c);\n\tif(y<0)\n\t\ty = -y;\n\tz = (b * c) - (a\
    \ * b);\n\tif(z<0)\n\t\tz = -z;\n\tif(x+y+z==0)\n\t\treturn true;\n\t\n\tbool\
    \ flag = true;\n\tif(z>=y)\n\t{\n\t\tif(z>=x)\n\t\t{\n\t\t\tif(x>y)\n\t\t\t\t\
    flag = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(y>=x)\n\t\t{\n\t\t\tif(y>=z)\n\t\
    \t\t{\n\t\t\t\tif(x>y)\n\t\t\t\t\tflag = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ flag;\n}\n/*\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n \
    \   assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) ==\
    \ false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9acqiay9.d(55): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9acqiay9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tdouble a = long(a);\n\t\
    double b = long(b);\n\tdouble c = long(c);\n\tif(a+b > c){\n\t\tif(b > c){\n\t\
    \t\tif(a+c > b){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\telse if(b+c > a){\n\t\tif(b > a){\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\telse{\n\t\treturn true;\n\t}\n}\n*/\n/* \n  Purpose:\n    Formulate\
    \ a right-angle triangle with three sides given in three separate long variables\n\
    \    using three separate equations and then check if that triangle is right-angled.\n\
    \    \n  Preconditions:\n    None\n  \n  Parameters:\n    x1 - Long variable for\
    \ the first triangle side\n    x2 - Long variable for the second triangle side\n\
    \    x3 - Long variable for the third triangle side\n    \n  Return:\n    True\
    \ or False if triangle is right-angled.\n  \n  Example Input:\n    >>> right_angle_triangle(5L,\
    \ 7L, 2L)\n    true\n    >>> right_angle_triangle(2L, 5L, 7L)\n    false\n   \
    \ \n*/\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnf8f7ut9.d(40): Error: declaration expected, not `*`

    /tmp/tmpnf8f7ut9.d(68): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(69): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(70): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(71): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(72): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(73): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(74): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(75): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(76): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(77): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(78): Error: declaration expected, not `assert`

    /tmp/tmpnf8f7ut9.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnf8f7ut9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if((b*b)-(4*a*c) < 0)\
    \ \n    {\n        return false;\n    }\n    else if((b*b)-(4*a*c) == 0) \n  \
    \  {\n        if(b+c >= a)\n            return true;\n        else \n        \
    \    return false;\n    }\n    else \n    {\n        long d = ((b*b) - (4*a*c))/(2*a);\n\
    \        if(d == a) \n        {\n            return true;\n        }\n       \
    \ else\n        {\n            return false;\n        }\n    }\n}\n</code>\n<|/\
    \ a tags=c++,geometry,algorithm |>\n<| a dscore=2 |>\nA right angle triangle is\
    \ a triangle with one angle being right angle or 90 degree, one angle being left\
    \ angle or 90 degree, and one angle being either 45, 135, or 225 degrees.\n<code>\n\
    function isRightAngleTriangle(sideA, sideB, sideC) {\n    if (Math.abs(sideA)\
    \ >= Math.abs(sideB) || Math.abs(sideB) >= Math.abs(sideC)) {\n        throw new\
    \ TypeError('Negative or zero side lengths are not allowed');\n    }\n    if (Math.abs(sideA)\
    \ >= Math.abs(sideC)) {\n        throw new TypeError('Right angle triangle must\
    \ have one angle between 180 and 360 degree');\n    }\n    if (Math.abs(sideB)\
    \ >= Math.abs(sideC)) {\n        throw new TypeError('Right angle triangle must\
    \ have one angle between 180 and 360 degree');\n    }\n    let angle = Math.round(Math.abs(Math.acos((sideB\
    \ + sideC) / Math.pow(sideA, 2))) * 360) / 360;\n    if (angle > 180) {\n    \
    \    return false;\n    }\n    let a1 = Math.tan(Math.PI * sideA / 180);\n   \
    \ let b1 = Math.tan(Math.PI * sideB / 180);\n    let c1 = Math.tan(Math.PI * sideC\
    \ / 180);\n    let d = Math.pow(a1 * b1 - a1 * c1 - b1 * c1, 2);\n    let ans\
    \ = d <= 0;\n    return ans;\n}\n</code>\n<|/ a tags=c++,geometry,algorithm |>\n\
    <| c |>\nI see a lot of good answers, but this one does just what I needed and\
    \ it doesn't require any library functions. Nice.\n<|/ c |>\n<| c |>\nThis answer\
    \ fails for inputs `0, 10, -20` as you can see here [link](https://tio.run/##hY3@3@EYQg4EiIjx7r0Ijg4Y/8M8@ZkQVkC3ZiDtQqhN3QFdYtYN5s5vEU6\n\
    unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8obpz25y.d(42): Error: declaration expected, not `<`

    /tmp/tmp8obpz25y.d(49): Error: unterminated character constant

    /tmp/tmp8obpz25y.d(49): Error: unterminated character constant

    /tmp/tmp8obpz25y.d(50): Error: unrecognized declaration

    /tmp/tmp8obpz25y.d(52): Error: unterminated character constant

    /tmp/tmp8obpz25y.d(52): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8obpz25y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a + b > c) return\
    \ false; // not a right triangle\n    if ((a + c) < b) swap(a, b, c); // not right\
    \ triangle\n    long u = -(b + c) / 2;\n    long v = (a + b) / 2;\n    long w\
    \ = -a + b;\n    bool is_right_triangle = (u <= v <= w);\n    return is_right_triangle;\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqlqsebv5.d(23): Error: found `<=` when expecting `)`

    /tmp/tmpqlqsebv5.d(23): Error: semicolon expected, not `w`

    /tmp/tmpqlqsebv5.d(23): Error: found `)` when expecting `;` following statement

    /tmp/tmpqlqsebv5.d(23): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqlqsebv5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    if (a == 0)\n        return\
    \ (b == 0 || c == 0);\n    else if (b == 0)\n        return (a==0 || c==0);\n\
    \    else if (c == 0)\n        return (b == 0 || a == 0);\n    else if (is_right_angle(a,b,c))\n\
    \        return true;\n    else\n        return is_right_angle(a,c,b) || is_right_angle(c,b,a);\n\
    }\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz26s6p61.d(24): Error: undefined identifier `is_right_angle`

    /tmp/tmpz26s6p61.d(27): Error: undefined identifier `is_right_angle`

    /tmp/tmpz26s6p61.d(27): Error: undefined identifier `is_right_angle`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz26s6p61.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long a = abs(a);\n   \
    \ long b = abs(b);\n    long c = abs(c);\n    if (a == 0 || b == 0 || c == 0)\
    \ \n    {\n        return false;\n    }\n    if (a + b > c && a + c > b && b +\
    \ c > a) \n    {\n        return true;\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c++ |>\nI solved this problem using the Pythagorean\
    \ theorem (by using the Pythagorean theorem).\n<code>\n#include <iostream>\n#include\
    \ <cmath>\nunittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
    \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpprk5m3ae.d(31): Error: declaration expected, not `<`

    /tmp/tmpprk5m3ae.d(42): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(43): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(44): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(45): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(46): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(47): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(48): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(49): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(50): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(51): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(52): Error: declaration expected, not `assert`

    /tmp/tmpprk5m3ae.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpprk5m3ae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n\tif(b == 0) return true;\n\
    \tif(b < 0 && a>0) return false;\n\tif(c == 0 || (c > 0 && a > 0)) \n\t{\n\t\t\
    if(a > b) return true;\n\t\treturn false;\n\t}\n\treturn b > c ? right_angle_triangle(a,c)\
    \ : left_angle_triangle(a, b);\n}\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vq7rwgp.d(25): Error: function `tmp0vq7rwgp.right_angle_triangle(long
    a, long b, long c)` is not callable using argument types `(long, long)`

    /tmp/tmp0vq7rwgp.d(25): Error: undefined identifier `left_angle_triangle`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vq7rwgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long angle;\n    if (b\
    \ > a && c > a && b > c)\n    {\n        if (((b - a) % 180) == 0)\n        {\n\
    \            if (((b + c) % 180) == 0)\n            {\n                if ((c\
    \ % 180) == 90)\n                {\n                    angle = 180;\n       \
    \             return true;\n                }\n                else\n        \
    \        {\n                    angle = 90;\n                    return true;\n\
    \                }\n            }\n            else\n            {\n         \
    \       angle = 0;\n                return true;\n            }\n        }\n \
    \       else\n        {\n            if (((b - c) % 180) == 0)\n            {\n\
    \                angle = 90;\n                return true;\n            }\n  \
    \          else\n            {\n                angle = 180;\n               \
    \ return true;\n            }\n        }\n    }\n    else\n    {\n        if (c\
    \ > a && a > b)\n        {\n            if (((b - a) % 180) == 0)\n          \
    \  {\n                angle = 180;\n                return true;\n           \
    \ }\n            else\n            {\n                angle = 90;\n          \
    \      return true;\n            }\n        }\n        else\n        {\n     \
    \       if (a > b)\n            {\n                angle = 90;\n             \
    \   return true;\n            }\n            else\n            {\n           \
    \     angle = 0;\n                return true;\n            }\n        }\n   \
    \ }\n    return false;\n}\n/*\n    \n    Input:\n    \n    Points A and B are\
    \ given.\n    \n    Returns: \n    \n    True if two line segments intersect,\
    \ False otherwise.\n    \n    Example:\n    \n    >>> two_line_segments_intersect(Point2d(0,\
    \ 0), Point2d(0, 1), Point2d(1, 1), Point2d(1, 0))\n    False\n    \n*/\nunittest\n\
    {\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L, 4L,\
    \ 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
    \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
    \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
    \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
    \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
    \ 2L, 10L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_uim60o8.d(108): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmp_uim60o8.__unittest_L103_C1() [0x427b33]

    ??:? void tmp_uim60o8.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d'
  stdout: ''
  timestamp: 1660164058
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of\
    \ the three sides of a triangle. Return true if the three\n    sides form a right-angled\
    \ triangle, false otherwise.\n    A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n    90 degree.\n    Example:\n    >>> right_angle_triangle(3L,\
    \ 4L)\n    true\n    >>> right_angle_triangle(1L, 2L)\n    false\n    \n*/\nbool\
    \ right_angle_triangle(long a, long b, long c) \n{\n    long ab = a*b;\n    long\
    \ ac = a*c;\n    long bc = b*c;\nunittest\n{\n    alias candidate = right_angle_triangle;\n\
    \n    assert(candidate(3L, 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L)\
    \ == false);\n    assert(candidate(10L, 6L, 8L) == true);\n    assert(candidate(2L,\
    \ 2L, 2L) == false);\n    assert(candidate(7L, 24L, 25L) == true);\n    assert(candidate(10L,\
    \ 5L, 7L) == false);\n    assert(candidate(5L, 12L, 13L) == true);\n    assert(candidate(15L,\
    \ 8L, 17L) == true);\n    assert(candidate(48L, 55L, 73L) == true);\n    assert(candidate(1L,\
    \ 1L, 1L) == false);\n    assert(candidate(2L, 2L, 10L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0zohz1xm.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zohz1xm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164058
