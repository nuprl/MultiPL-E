language: d
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    int n = arr.Length;\n    long[] sorted_arr = new long[n];\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02_im4d6.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02_im4d6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  List<string> result = new List<string>();\n    int n = 0;\n    foreach(long\
    \ i in arr)\n    {\n        n = std.math.mod(i, 10);\n        if(n < 1 || n >\
    \ 9)\n            continue;\n        result.add(String.format(\"%c\", std.typecons.chars[std.typecons.ord[\"\
    One\"] + (std.typecons.ord[\"Z\"] + n - 10)]));\n    }\n    return result.toArray();\n\
    }\n</code>\n<|/ a tags=c#,.net,arrays |>\n<| a |>\nI believe I see what you're\
    \ asking.\n<code>\nstring[] strings = new string[] {\n    \"zero\", \"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n    \"nine\"\
    , \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\",\n\
    \    \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\n};\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8rhmgnmd.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp8rhmgnmd.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmp8rhmgnmd.d(24): Error: expression expected, not `)`

    /tmp/tmp8rhmgnmd.d(24): Error: found `;` when expecting `)`

    /tmp/tmp8rhmgnmd.d(25): Error: found `int` when expecting `;` following statement

    /tmp/tmp8rhmgnmd.d(26): Error: found `in` when expecting `;`

    /tmp/tmp8rhmgnmd.d(35): Error: declaration expected, not `<`

    /tmp/tmp8rhmgnmd.d(38): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8rhmgnmd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8or3movl.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8or3movl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  std.string[] result = new std.string[arr.length];\n    \n    foreach(long l,\
    \ arr)\n    {\n        if (l == -1L) \n            continue;\n        if (l ==\
    \ 0L) \n            result[0] = std.string(\"Zero\");\n        else if (l == 1L)\
    \ \n            result[0] = std.string(\"One\");\n        else if (l == 2L) \n\
    \            result[0] = std.string(\"Two\");\n        else if (l == 3L) \n  \
    \          result[0] = std.string(\"Three\");\n        else if (l == 4L) \n  \
    \          result[0] = std.string(\"Four\");\n        else if (l == 5L) \n   \
    \         result[0] = std.string(\"Five\");\n        else if (l == 6L) \n    \
    \        result[0] = std.string(\"Six\");\n        else if (l == 7L) \n      \
    \      result[0] = std.string(\"Seven\");\n        else if (l == 8L) \n      \
    \      result[0] = std.string(\"Eight\");\n        else if (l == 9L) \n      \
    \      result[0] = std.string(\"Nine\");\n        else\n            throw new\
    \ Exception(\"Invalid number in by_length\");\n    }\n    \n    foreach(std.string\
    \ s, result)\n    {\n        std.string[] reverse = new std.string[s.length];\n\
    \        foreach(std.string r, result)\n        {\n            reverse[s.length\
    \ - r.length] = r;\n        }\n        \n        foreach(std.string t, reverse)\n\
    \        {\n            if (t == s) \n                continue;\n            \n\
    \            foreach(int i, reverse)\n            {\n                if (reverse[i].compareTo(t)\
    \ > 0)\n                {\n                    swap(t, i);\n                 \
    \   \n                    break;\n                }\n            }\n        }\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmphb7zfw.d(26): Error: no identifier for declarator `arr`

    /tmp/tmpmphb7zfw.d(26): Error: found `)` when expecting `;`

    /tmp/tmpmphb7zfw.d(54): Error: found `foreach` when expecting `)`

    /tmp/tmpmphb7zfw.d(57): Error: no identifier for declarator `result`

    /tmp/tmpmphb7zfw.d(57): Error: found `)` when expecting `;`

    /tmp/tmpmphb7zfw.d(62): Error: found `foreach` when expecting `)`

    /tmp/tmpmphb7zfw.d(67): Error: no identifier for declarator `reverse`

    /tmp/tmpmphb7zfw.d(67): Error: found `)` when expecting `;`

    /tmp/tmpmphb7zfw.d(76): Error: found `}` when expecting `)`

    /tmp/tmpmphb7zfw.d(77): Error: found `}` instead of statement

    /tmp/tmpmphb7zfw.d(79): Error: found `return` when expecting `;` following statement

    /tmp/tmpmphb7zfw.d(81): Error: found `unittest` when expecting `;` following statement

    /tmp/tmpmphb7zfw.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmphb7zfw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long max = arr[0]; // 0 is the first number\n    string[] result = new string[arr.Length];\n\
    \    for (int i = 1; i < arr.Length; i++)\n    {\n        if (arr[i] < max)\n\
    \            result[i - 1] = nameToDigits[arr[i]];\n        else\n        {\n\
    \            max = arr[i];\n            result[i - 1] = nameToDigits[max];\n \
    \       }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptboqmdv1.d(25): Error: no property `Length` for type `long[]`

    /tmp/tmptboqmdv1.d(26): Error: no property `Length` for type `long[]`

    /tmp/tmptboqmdv1.d(29): Error: undefined identifier `nameToDigits`

    /tmp/tmptboqmdv1.d(33): Error: undefined identifier `nameToDigits`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptboqmdv1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.length == 0) {\n        return [];\n    }\n    \n    long[] result =\
    \ new long[arr.length];\n    \n    long min = 0;\n    long max = arr[arr.length\
    \ - 1];\n    \n    for(long number : arr) {\n        if(number < min) {\n    \
    \        min = number;\n        }\n        \n        if(number > max) {\n    \
    \        max = number;\n        }\n    }\n    \n    for(long number : arr) {\n\
    \        if(number < min) {\n            number *= 10;\n            number--;\n\
    \        }\n        \n        if(number > max) {\n            number *= 10;\n\
    \            number++;\n        }\n    }\n    \n    for(long i = 0; i < arr.length;\
    \ i++) {\n        result[i] = \"One\";\n        \n        if(arr[i] == 0) {\n\
    \            continue;\n        }\n        \n        long number = arr[i];\n \
    \       \n        if(number < 10) {\n            result[i] = \"Zero\";\n     \
    \       continue;\n        }\n        \n        string tens = String.format(\"\
    Ten%ld\", number % 10);\n        number /= 10;\n        \n        if(number ==\
    \ 1) {\n            result[i] = tens + \" \" + result[i];\n        }\n       \
    \ else {\n            string ones = String.format(\"One%ld\", number % 10);\n\
    \            number /= 10;\n            \n            result[i] = ones + \" \"\
    \ + result[i];\n            \n            if(number == 1) {\n                result[i]\
    \ = tens + \" \" + result[i];\n            }\n            \n            for(long\
    \ j = 0; j < tens.length(); j++) {\n                result[i] += \" \";\n    \
    \        }\n        }\n    }\n    \n    for(int i = 0; i < result.length; i++)\
    \ {\n        if(result[i].length() == 1) {\n            result[i] = result[i].toUpperCase();\n\
    \        }\n    }\n    \n    return Arrays.asList(result);\n}\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps7hihfwc.d(33): Error: semicolon expected, not `:`

    /tmp/tmps7hihfwc.d(33): Error: expression expected, not `:`

    /tmp/tmps7hihfwc.d(33): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmps7hihfwc.d(43): Error: semicolon expected, not `:`

    /tmp/tmps7hihfwc.d(43): Error: expression expected, not `:`

    /tmp/tmps7hihfwc.d(43): Error: found `arr` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7hihfwc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.Length];\n    int i = 0;\n    int cur_index\
    \ = 0;\n    int next_index = 0;\n    while (i < arr.Length)\n    {\n        int\
    \ length = arr[i] - 1;\n        if (length > 9)\n        {\n            length\
    \ = length - 10;\n        }\n        result[cur_index] = std.string(std.range[1..length].name);\n\
    \        i++;\n        cur_index++;\n    }\n    if (result.Length > 0)\n    {\n\
    \        std.array.reverse(result);\n        std.range[1..9].forEach(result);\n\
    \    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptnxvl9ft.d(46): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptnxvl9ft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] intarr = new int[arr.Length];\n    for(int i = 0; i < arr.Length; i++)\n\
    \    {\n        intarr[i] = i;\n    }\n    Array.Sort(intarr);\n    string one\
    \ = \"One\", two = \"Two\", three = \"Three\", four = \"Four\", five = \"Five\"\
    , six = \"Six\", seven = \"Seven\", eight = \"Eight\", nine = \"Nine\";\n    string[]\
    \ result = new string[arr.Length];\n    for(int i = 0; i < arr.Length; i++)\n\
    \    {\n        result[i] = one;\n        for(int j = intarr[i]; j > 0; j--)\n\
    \        {\n            result[i] = result[i] + one;\n        }\n    }\n    for(int\
    \ i = arr.Length - 1; i >= 0; i--)\n    {\n        result[i] = result[i] - one;\n\
    \        for(int j = intarr[i]; j > 0; j--)\n        {\n            result[i]\
    \ = result[i] + one;\n        }\n    }\n    for(int i = 0; i < arr.Length; i++)\n\
    \    {\n        result[i] = eight + ((int)result[i].ToString(\"D2\") + \" \");\n\
    \    }\n    return result;\n}\n</code>\n<|/ a dscore=1 tags=arrays,sorting,c#\
    \ |>\n<| a dscore=1 |>\n<code>\nstatic readonly string[] names = new string[]\
    \ { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\" };\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41z35ay9.d(50): Error: C style cast illegal, use `cast(int)result[i].ToString("D2")`

    /tmp/tmp41z35ay9.d(54): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41z35ay9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length < 1) return arr;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1eu4awzc.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1eu4awzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  var\
    \ result = [];\n  var resultLength = 0;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcmwkb229.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmwkb229.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    for (int i = 0; i < arr.length; ++i)\n    {\n      \
    \  if (arr[i] >= 1 && arr[i] <= 9)\n        {\n            arr[i] = \"One\";\n\
    \        }\n        if (arr[i] >= 10 && arr[i] <= 19)\n        {\n           \
    \ arr[i] = \"Two\";\n        }\n        if (arr[i] >= 20 && arr[i] <= 99)\n  \
    \      {\n            arr[i] = \"Three\";\n        }\n        if (arr[i] >= 100\
    \ && arr[i] <= 999)\n        {\n            arr[i] = \"Four\";\n        }\n  \
    \      if (arr[i] >= 1000 && arr[i] <= 9999)\n        {\n            arr[i] =\
    \ \"Five\";\n        }\n        if (arr[i] >= 10000 && arr[i] <= 99999)\n    \
    \    {\n            arr[i] = \"Six\";\n        }\n        if (arr[i] >= 100000\
    \ && arr[i] <= 999999)\n        {\n            arr[i] = \"Seven\";\n        }\n\
    \        if (arr[i] >= 1000000 && arr[i] <= 9999999)\n        {\n            arr[i]\
    \ = \"Eight\";\n        }\n        if (arr[i] >= 10000000 && arr[i] <= 99999999)\n\
    \        {\n            arr[i] = \"Nine\";\n        }\n    }\n    Arrays.sort(arr);\n\
    \    for (int i = 0; i < arr.length; ++i)\n    {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9)\n        {\n            arr[i] = \"One\";\n        }\n        if (arr[i]\
    \ >= 10 && arr[i] <= 19)\n        {\n            arr[i] = \"Two\";\n        }\n\
    \        if (arr[i] >= 20 && arr[i] <= 99)\n        {\n            arr[i] = \"\
    Three\";\n        }\n        if (arr[i] >= 100 && arr[i] <= 999)\n        {\n\
    \            arr[i] = \"Four\";\n        }\n        if (arr[i] >= 1000 && arr[i]\
    \ <= 9999)\n        {\n            arr[i] = \"Five\";\n        }\n        if (arr[i]\
    \ >= 10000 && arr[i] <= 99999)\n        {\n            arr[i] = \"Six\";\n   \
    \     }\n        if (arr[i] >= 100000 && arr[i] <= 999999)\n        {\n      \
    \      arr[i] = \"Seven\";\n        }\n        if (arr[i] >= 1000000 && arr[i]\
    \ <= 9999999)\n        {\n            arr[i] = \"Eight\";\n        }\n       \
    \ if (arr[i] >= 10000000 && arr[i] <= 99999999)\n        {\n            arr[i]\
    \ = \"Nine\";\n        }\n    }\n    return arr;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6a45l2i.d(106): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6a45l2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int max = max(arr);\n    if (max == 1) {\n        return [\"One\"];\n    }\
    \ else if (max == 2) {\n        return [\"Two\", \"One\"];\n    } else if (max\
    \ == 3) {\n        return [\"Three\", \"Two\", \"One\"];\n    } else if (max ==\
    \ 4) {\n        return [\"Four\", \"Three\", \"Two\", \"One\"];\n    } else if\
    \ (max == 5) {\n        return [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    ];\n    } else if (max == 6) {\n        return [\"Six\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"One\"];\n    } else if (max == 7) {\n        return [\"Seven\"\
    , \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"];\n    } else if (max\
    \ == 8) {\n        return [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"One\"];\n    } else if (max == 9) {\n        return [\"\
    Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"One\"];\n    }\n    return []; // array is empty, do nothing\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfzia1zm4.d(24): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfzia1zm4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] copy = new long[arr.length];\n    System.arraycopy(arr, 0, copy, 0,\
    \ copy.length);\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7uan_zu.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7uan_zu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //assert(arr.Length > 0);\n    \n    List<string> list = new List<string>();\n\
    \    \n    if(arr.Length < 2)\n    {\n        return arr;\n    }\n    \n    \n\
    \    var maxlength = max(arr);\n    var minlength = min(arr);\n    \n    for(var\
    \ i = 0; i < arr.Length; i++)\n    {\n        long v = arr[i];\n        string\
    \ str = v >= 1 && v < 10 ? \"\" + v : v < 0 ? \"Eight\" : \"Nine\";\n        list.Insert(i*2,\
    \ str);\n        list.Insert(i*2+1, v - minlength);\n    }\n    \n    list.Reverse();\n\
    \    \n    for(int i = 0; i < list.Count; i++)\n    {\n        list[i] = list[i].Replace(\"\
    One\", \"1\").Replace(\"Two\", \"2\").Replace(\"Three\", \"3\").Replace(\"Four\"\
    , \"4\").Replace(\"Five\", \"5\").Replace(\"Six\", \"6\").Replace(\"Seven\", \"\
    7\").Replace(\"Eight\", \"8\").Replace(\"Nine\", \"9\");\n    }\n    \n    return\
    \ list;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpex8cg6bp.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpex8cg6bp.d(26): Error: found `>` when expecting `;` following statement

    /tmp/tmpex8cg6bp.d(26): Error: expression expected, not `)`

    /tmp/tmpex8cg6bp.d(26): Error: found `;` when expecting `)`

    /tmp/tmpex8cg6bp.d(28): Error: found `if` when expecting `;` following statement

    /tmp/tmpex8cg6bp.d(28): Error: found `<` when expecting `)`

    /tmp/tmpex8cg6bp.d(28): Error: missing `{ ... }` for function literal

    /tmp/tmpex8cg6bp.d(28): Error: found `2` when expecting `;` following statement

    /tmp/tmpex8cg6bp.d(28): Error: found `)` instead of statement

    /tmp/tmpex8cg6bp.d(37): Error: declaration expected, not `for`

    /tmp/tmpex8cg6bp.d(37): Error: no identifier for declarator `i`

    /tmp/tmpex8cg6bp.d(37): Error: declaration expected, not `<`

    /tmp/tmpex8cg6bp.d(37): Error: no identifier for declarator `i`

    /tmp/tmpex8cg6bp.d(37): Error: declaration expected, not `++`

    /tmp/tmpex8cg6bp.d(41): Error: unexpected `(` in declarator

    /tmp/tmpex8cg6bp.'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\n    int max = arr.length;\n    int\
    \ min = max / 10, mid = max / 2, i;\n    if (min % 2 == 0)\n        max = min\
    \ + 1;\n    else\n        mid = mid + 1;\n    long j;\n    if (max % 2 == 0)\n\
    \        i = mid - 1;\n    else\n        i = mid;\n    int temp = 0;\n    for\
    \ (j = min; j >= 0; j--) {\n        temp = arr[j];\n        arr[j] = arr[max];\n\
    \        arr[max] = temp;\n        max--;\n    }\n    for (j = max; j >= 0; j--)\
    \ {\n        temp = arr[j];\n        arr[j] = arr[i];\n        arr[i] = temp;\n\
    \        i--;\n    }\n    string[] one = { \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n    string[] two = { \"\
    Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\" };\n    string[] three = { \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\", \"Twenty\" };\n    string[] four = { \"Twenty\", \"Thirty\", \"\
    Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\", \"Hundred\"\
    \ };\n    string[] five = { \"Hundred\", \"Thousand\", \"Million\", \"Billion\"\
    , \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Henry\" };\n    string[] six\
    \ = { \"Henry\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\"\
    , \"Quintillion\", \"Henry\", \"Henry\" };\n    string[] seven = { \"Henry\",\
    \ \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\"\
    , \"Henry\", \"Henry\", \"Henry\" };\n    string[] eight = { \"Henry\", \"Thousand\"\
    , \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"\
    Henry\", \"Henry\", \"Henry\", \"Henry\" };\n    string[] nine = { \"Henry\",\
    \ \"Thousand\", \"Million\", \"Billion\", \"Trilli\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0z35vi4.d(58): Error: unterminated string constant starting at
    /tmp/tmph0z35vi4.d(67)

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.d(63): Error: comma expected separating field initializers

    /tmp/tmph0z35vi4.'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var ans = new string[arr.Length];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeaoojpg3.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeaoojpg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long min = min(arr);\n    long max = max(arr);\n    if (min == max) \n    {\n\
    \        return new string[] {\"\"};\n    }\n    long digits = (max - min) + 1;\n\
    \    string[] names = { \"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n    \n    string one = names[arr[0]\
    \ - 1];\n    string two = names[arr[1] - 1];\n    string three = names[arr[2]\
    \ - 1];\n    string four = names[arr[3] - 1];\n    string five = names[arr[4]\
    \ - 1];\n    string six = names[arr[5] - 1];\n    string seven = names[arr[6]\
    \ - 1];\n    string eight = names[arr[7] - 1];\n    string nine = names[arr[8]\
    \ - 1];\n    \n    long temp = arr[0];\n    long temp2 = arr[1];\n    long temp3\
    \ = arr[2];\n    long temp4 = arr[3];\n    long temp5 = arr[4];\n    long temp6\
    \ = arr[5];\n    long temp7 = arr[6];\n    long temp8 = arr[7];\n    long temp9\
    \ = arr[8];\n    \n    long temp1 = arr[0];\n    long temp4 = arr[3];\n    long\
    \ temp2 = arr[6];\n    long temp5 = arr[9];\n    long temp8 = arr[11];\n    long\
    \ temp3 = arr[10];\n    long temp6 = arr[13];\n    long temp7 = arr[14];\n   \
    \ long temp9 = arr[15];\n    \n    string[] result = new string[digits + 1];\n\
    \    result[0] = one;\n    result[1] = two;\n    result[2] = three;\n    result[3]\
    \ = four;\n    result[4] = five;\n    result[5] = six;\n    result[6] = seven;\n\
    \    result[7] = eight;\n    result[8] = nine;\n    \n    long x = 0;\n    \n\
    \    for(int i = 1; i < digits; i++) \n    {\n        temp = temp + arr[i];\n\
    \        temp = temp / (10 * i);\n        \n        if(temp > 0) \n        {\n\
    \            result[x++] = names[temp % 10];\n        }\n        else \n     \
    \   {\n            result[x++] = names[-(temp % 10)];\n        }\n    }\n    \n\
    \    result[digits] = x[x - 1];\n    \n    if(digits > 0) \n    {\n        temp\
    \ = temp + arr[digits];\n        temp = temp / (10 * digits - 1);\n        \n\
    \        if(temp > 0) \n        {\n            result[digits - 1] = names[temp\
    \ % 10];\n        }\n        else \n        {\n\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3d969ujo.d(28): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp3d969ujo.d(28): Error: found `}` when expecting `;` following statement

    /tmp/tmp3d969ujo.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp3d969ujo.d(105): Error: found `unittest` instead of statement

    /tmp/tmp3d969ujo.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3d969ujo.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3d969ujo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted;\n    if (arr.Length < 1) return new string[];\n    if (arr.Length\
    \ == 1) return new[] {\"One\"};\n    sorted = arr.OrderBy(n => n % 10).ToArray();\n\
    \    if (arr.Length <= 9) \n    {\n        for (int i = 0; i < sorted.Length;\
    \ i++)\n        {\n            sorted[i] = \"One\";\n        }\n    }\n    else\
    \ \n    {\n        for (int i = 0; i < sorted.Length; i++)\n        {\n      \
    \      sorted[i] = \"Nine\";\n        }\n        for (int i = sorted.Length -\
    \ 1; i > 0; i--)\n        {\n            int j = 0;\n            while (j < i)\n\
    \            {\n                if (sorted[j] > sorted[j + 1]) \n            \
    \    {\n                    string temp = sorted[j];\n                    sorted[j]\
    \ = sorted[j + 1];\n                    sorted[j + 1] = temp;\n              \
    \  }\n                j++;\n            }\n        }\n    }\n    sorted = sorted.OrderBy(n\
    \ => n % 10).ToArray();\n    string[] result = new string[sorted.Length];\n  \
    \  for (int i = 0; i < sorted.Length; i++)\n    {\n        result[i] = Enum.GetName(typeof(Number),\
    \ sorted[i]);\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n`System.Linq`\
    \ provides very nice helpers for manipulating collections and collections.\n<|/\
    \ c |>\n<| c |>\n`Enumerable.OrderBy` and `Enumerable.Reverse` can be implemented\
    \ as extension methods.\n<|/ c |>\n<| c |>\n, that's actually a very good point.\
    \ I've added an extension method for OrderBy. Thanks.\n<|/ c |>\n<| a tags=c#,arrays,sorting\
    \ |>\nHere you go! I went ahead and translated it to C# and tested it.\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjb_0txet.d(26): Error: basic type expected, not `[`

    /tmp/tmpjb_0txet.d(26): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpjb_0txet.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmpjb_0txet.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpjb_0txet.d(64): Error: declaration expected, not `<`

    /tmp/tmpjb_0txet.d(73): Error: unterminated character constant

    /tmp/tmpjb_0txet.d(73): Error: unterminated character constant

    /tmp/tmpjb_0txet.d(79): Error: semicolon expected, not `.`

    /tmp/tmpjb_0txet.d(79): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpjb_0txet.d(80): Error: semicolon expected, not `.`

    /tmp/tmpjb_0txet.d(80): Error: no identifier for declarator `.Linq`

    /tmp/tmpjb_0txet.d(81): Error: semicolon expected, not `.`

    /tmp/tmpjb_0txet.d(81): Error: no identifier for declarator `.Text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjb_0txet.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.length == 0)\n        return arr;\n    long[] reversed = new long[arr.length];\n\
    \    for(int i = 0; i != arr.length; ++i)\n        reversed[i] = arr[arr.length\
    \ - 1 - i];\n    arr = reversed;\n    string result = \"Eight\";\n    for(int\
    \ i = 0; i != arr.length; ++i)\n    {\n        string digit_name = \"One\";\n\
    \        long value = arr[i];\n        int digit = std.math.floor(std.math.log(value));\
    \ // Find the power of 10 before this value.\n        if(digit == 0)\n       \
    \     digit = 1;\n        if(value < 10)\n            digit_name = \"Zero\";\n\
    \        else if(value / 10 < 10)\n            digit_name = \"Ten\";\n       \
    \ else if(value / 100 < 10)\n            digit_name = \"Twenty\";\n        else\
    \ if(value / 100 < 100)\n            digit_name = \"Thirty\";\n        else if(value\
    \ / 100 < 1000)\n            digit_name = \"Forty\";\n        else if(value /\
    \ 1000 < 100)\n            digit_name = \"Fifty\";\n        else if(value / 1000\
    \ < 1000)\n            digit_name = \"Sixty\";\n        else if(value / 1000 <\
    \ 10000)\n            digit_name = \"Seventy\";\n        else if(value / 1000\
    \ < 100000)\n            digit_name = \"Eighty\";\n        else if(value / 1000\
    \ < 1000000)\n            digit_name = \"Ninety\";\n        result = digit_name\
    \ + result;\n    }\n    string[] result = new string[result.length()];\n    int\
    \ index = 0;\n    while(result.length > index)\n        result[index++] = result.charAt(index);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1tag3cch.d(35): Error: cannot implicitly convert expression `floor(log(cast(real)value))`
    of type `real` to `int`

    /tmp/tmp1tag3cch.d(58): Error: invalid array operation `digit_name + result` (possible
    missing [])

    /tmp/tmp1tag3cch.d(60): Error: no property `length` for type `string`

    /tmp/tmp1tag3cch.d(60): Error: declaration `tmp1tag3cch.by_length.result` is already
    defined

    /tmp/tmp1tag3cch.d(63): Error: no property `charAt` for type `string`

    /tmp/tmp1tag3cch.d(25): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    /tmp/tmp1tag3cch.d(64): Error: cannot implicitly convert expression `result` of
    type `string` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1tag3cch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\n    int len = arr.length;\n    long[]\
    \ reversed = new long[len];\n    for (int i = 0; i < len; i++)\n    {\n      \
    \  int num = (int)(arr[i]);\n        if (num < 1 || num > 9)\n            continue;\n\
    \        \n        int pos = num - 1;\n        \n        // find an index by looking\
    \ for the first non-zero number that is less than our num\n        bool found\
    \ = false;\n        for (int j = 0; j < len; j++)\n        {\n            int\
    \ num2 = (j + 1) < len ? arr[j + 1] : 0;\n            if (num2 < 0 || num2 > 9)\n\
    \                continue;\n            if (num2 < num && num == num2)\n     \
    \       {\n                found = true;\n                pos = j + 1;\n     \
    \           break;\n            }\n        }\n        \n        // if we couldn't\
    \ find an index just use the length of the array\n        if (!found)\n      \
    \      pos = len;\n        \n        // swap the current number with the number\
    \ at pos so that we are sure that pos has the correct index\n        reversed[len\
    \ - i - 1] = arr[pos];\n        arr[pos] = num;\n    }\n    \n    string[] ret\
    \ = new string[len];\n    for (int i = 0; i < len; i++)\n        ret[i] = \"One\"\
    ;\n    for (int i = 0; i < len; i++)\n    {\n        int num = arr[i];\n     \
    \   if (num < 1 || num > 9)\n            continue;\n        ret[len - i - 1] =\
    \ by_length(ret[len - i - 1] + by_length(num).Reverse());\n    }\n    return ret;\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,c#,sorting |>\n<| c |>\nThis answer seems\
    \ very close, even though it may look like it is very slow at some places, it\
    \ is very fast at some places, and it is very fast in all cases. My algorithm\
    \ is fast at 99%, and it is fast at 99% of cases. And it is fast in all cases.\
    \ I am really impressed by how good your algorithm is. It is very clear and very\
    \ easy to understand. Thank you so much, I will give it a try on my code and will\
    \ comment back.\n<|/ c |>\n<| c |>\nIt doesn't quite work how I wanted it to though.\
    \ I revised your algorithm and added it at the end of my post. Sorry if I was\
    \ unclear in my original post. Thanks again.\n<|/ c |>\n<| c |>\nI've posted my\
    \ code at the end of my original post. I tried it and it works. Thanks again.\n\
    <|/ c |>\n<| c |>\nThe last example in the description gives me this error: Array\
    \ initialization is a compile time error. `string[] ret = new string[len];` The\
    \ error read\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl8zxz2hz.d(30): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmpl8zxz2hz.d(72): Error: declaration expected, not `<`

    /tmp/tmpl8zxz2hz.d(78): Error: unterminated character constant

    /tmp/tmpl8zxz2hz.d(81): Error: unterminated character constant

    /tmp/tmpl8zxz2hz.d(89): Error: declaration expected, not `assert`

    /tmp/tmpl8zxz2hz.d(90): Error: declaration expected, not `assert`

    /tmp/tmpl8zxz2hz.d(91): Error: declaration expected, not `assert`

    /tmp/tmpl8zxz2hz.d(92): Error: declaration expected, not `assert`

    /tmp/tmpl8zxz2hz.d(93): Error: declaration expected, not `assert`

    /tmp/tmpl8zxz2hz.d(94): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8zxz2hz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  std.int[]\
    \ result = null;\n  std.sort.sort(arr);\n  \n  if (arr.length != 0)\n  {\n   \
    \ result = new std.int[arr.length];\n    \n    for (int i = 0; i < arr.length;\
    \ ++i)\n    {\n      result[i] = std.math.trunc(arr[i]);\n      \n      if (arr[i]\
    \ == 0)\n      {\n        result[i] = -1;\n      }\n    }\n  }\n  \n  return std.typecons.intArrayToString(result).split(\"\
    , \");\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp17qqh__p.d(24): Error: identifier expected following `.`, not `int`

    /tmp/tmp17qqh__p.d(24): Error: found `result` when expecting `;` following statement

    /tmp/tmp17qqh__p.d(24): Error: found `=` instead of statement

    /tmp/tmp17qqh__p.d(29): Error: identifier expected following `.` instead of `int`

    /tmp/tmp17qqh__p.d(29): Error: found `int` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp17qqh__p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long min = min(arr);\n    long max = max(arr);\n    \n    long start = max\
    \ >= 9 ? max : max - 9;\n    long end = max >= 9 ? max : min + 9;\n    \n    long\
    \ middle = (start + end) / 2;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcjabnmk4.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcjabnmk4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return null;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk8l77c38.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8l77c38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ len = arr.length;\n  if(len == 0) return arr;\n  if(len == 1) return arrayOf[arr[0]];\n\
    \  if(len == 2) return arrayOf[arr[0]] + \" Two\";\n  if(len == 3) return arrayOf[arr[0]]\
    \ + \" Three\";\n  if(len == 4) return arrayOf[arr[0]] + \" Four\";\n  if(len\
    \ == 5) return arrayOf[arr[0]] + \" Five\";\n  if(len == 6) return arrayOf[arr[0]]\
    \ + \" Six\";\n  if(len == 7) return arrayOf[arr[0]] + \" Seven\";\n  if(len ==\
    \ 8) return arrayOf[arr[0]] + \" Eight\";\n  if(len == 9) return arrayOf[arr[0]]\
    \ + \" Nine\";\n  if(len == 10) return arrayOf[arr[0]] + \" Ten\";\n  if(len ==\
    \ 11) return arrayOf[arr[0]] + \" Eleven\";\n  if(len == 12) return arrayOf[arr[0]]\
    \ + \" Twelve\";\n  if(len == 13) return arrayOf[arr[0]] + \" Thirteen\";\n  if(len\
    \ == 14) return arrayOf[arr[0]] + \" Fourteen\";\n  if(len == 15) return arrayOf[arr[0]]\
    \ + \" Fifteen\";\n  if(len == 16) return arrayOf[arr[0]] + \" Sixteen\";\n  if(len\
    \ == 17) return arrayOf[arr[0]] + \" Seventeen\";\n  if(len == 18) return arrayOf[arr[0]]\
    \ + \" Eighteen\";\n  if(len == 19) return arrayOf[arr[0]] + \" Nineteen\";\n\
    \  if(len == 20) return arrayOf[arr[0]] + \" Twenty\";\n  if(len == 21) return\
    \ arrayOf[arr[0]] + \" Twenty One\";\n  if(len == 22) return arrayOf[arr[0]] +\
    \ \" Twenty Two\";\n  if(len == 23) return arrayOf[arr[0]] + \" Twenty Three\"\
    ;\n  if(len == 24) return arrayOf[arr[0]] + \" Twenty Four\";\n  if(len == 25)\
    \ return arrayOf[arr[0]] + \" Twenty Five\";\n  if(len == 26) return arrayOf[arr[0]]\
    \ + \" Twenty Six\";\n  if(len == 27) return arrayOf[arr[0]] + \" Twenty Seven\"\
    ;\n  if(len == 28) return arrayOf[arr[0]] + \" Twenty Eight\";\n  if(len == 29)\
    \ return arrayOf[arr[0]\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwzwpfw3.d(55): Error: found `unittest` when expecting `,`

    /tmp/tmpxwzwpfw3.d(65): Error: found `void` when expecting `,`

    /tmp/tmpxwzwpfw3.d(65): Error: found `{` when expecting `,`

    /tmp/tmpxwzwpfw3.d(65): Error: expression expected, not `}`

    /tmp/tmpxwzwpfw3.d(65): Error: found `End of File` when expecting `,`

    /tmp/tmpxwzwpfw3.d(65): Error: found `End of File` when expecting `]`

    /tmp/tmpxwzwpfw3.d(65): Error: found `End of File` when expecting `;` following
    `return` statement

    /tmp/tmpxwzwpfw3.d(65): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwzwpfw3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] result = new int[arr.length];\n    int i = 0;\n    int j = arr.length;\n\
    \    while (i != j)\n    {\n        int temp = arr[i];\n        if (arr[j] - temp\
    \ > 9)\n        {\n            result[i++] = arr[j] - 10;\n            result[j]\
    \ = temp + 10;\n        }\n        else\n        {\n            result[i++] =\
    \ arr[j];\n            result[j--] = temp;\n        }\n    }\n    result[i] =\
    \ arr[j];\n    return string[](result);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for taking the time to write that up.  I hadn't realized that std.array's `sort`\
    \ method was so simple and straightforward.  However, your answer is only correct\
    \ for positive numbers.\n<|/ c |>\n<| a dscore=3 |>\nIn case someone is interested\
    \ in a JavaScript solution which is similar to Sasa's answer:\n<code>\nfunction\
    \ byLength(input) {\n  const digits = [\n    'One',\n    'Two',\n    'Three',\n\
    \    'Four',\n    'Five',\n    'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n\
    \  ];\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbujr_uy.d(44): Error: declaration expected, not `<`

    /tmp/tmplbujr_uy.d(47): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(47): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(50): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(54): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(54): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(55): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(55): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(56): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(56): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(57): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(57): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(58): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(58): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(59): Error: unterminated character constant

    /tmp/tmplbujr_uy.d(59): Error: unterminated character constant

    /tmp/tmplbujr_uy.d'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long length = arr.Length;\n    string[] result = new string[length];\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15ozf8zb.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15ozf8zb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] a = new int[arr.length];\n    bool swapped;\n    int i;\n    \n    bool\
    \ swap = true;\n    for (i = 0; i < a.length; i++) {\n      a[i] = (int)arr[i];\n\
    \    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] == a[i]) {\n    \
    \    continue;\n      }\n      if (swap && i < a.length - 1) {\n        swapped\
    \ = true;\n        a[i] = a[a.length - 1];\n        a[a.length - 1] = a[i];\n\
    \      }\n      if (a[i] == a[i] + 1) {\n        a[i] = \"One\";\n      }\n  \
    \    if (a[i] == a[i] - 1) {\n        a[i] = \"Two\";\n      }\n      if (a[i]\
    \ == a[i] - 2) {\n        a[i] = \"Three\";\n      }\n      if (a[i] == a[i] -\
    \ 3) {\n        a[i] = \"Four\";\n      }\n      if (a[i] == a[i] - 4) {\n   \
    \     a[i] = \"Five\";\n      }\n      if (a[i] == a[i] - 5) {\n        a[i] =\
    \ \"Six\";\n      }\n      if (a[i] == a[i] - 6) {\n        a[i] = \"Seven\";\n\
    \      }\n      if (a[i] == a[i] - 7) {\n        a[i] = \"Eight\";\n      }\n\
    \      if (a[i] == a[i] - 8) {\n        a[i] = \"Nine\";\n      }\n    }\n   \
    \ if (swapped) {\n      return reverse(a);\n    }\n    return a;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5d0m8o6u.d(30): Error: C style cast illegal, use `cast(int)arr[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5d0m8o6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.Length < 1)\n        return arr;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxohl0_ol.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxohl0_ol.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.Length < 1) {\n        return new string[];\n    }\n    string [] names\
    \ = new string[arr.Length];\n    int maxLen = 0;\n    for (int i = 0; i < arr.Length;\
    \ i++) {\n        if (arr[i] < 1 || arr[i] > 9) {\n            continue;\n   \
    \     }\n        int len = arr[i].ToString().Length;\n        if (len > maxLen)\
    \ {\n            maxLen = len;\n            names[i] = \"One\";\n        }\n \
    \       else if (len < maxLen) {\n            names[i] = \"Two\";\n        }\n\
    \        else {\n            names[i] = \"Three\";\n        }\n    }\n    char[]\
    \ c = new char[maxLen + 1];\n    char[] res = new char[arr.Length];\n    for (int\
    \ i = 0; i < arr.Length; i++) {\n        c[maxLen - arr[i].ToString().Length]\
    \ = names[i];\n        res[i] = c[i];\n    }\n    return res;\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=1 |>\n<code>\nclass Program\n{\n    static void Main(string[]\
    \ args)\n    {\n        int[] input = { 1, 2, 3, 4 };\n        string[] result\
    \ = new string[input.Length];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgnj0svb3.d(53): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgnj0svb3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] arr = Array.toArray(arr);\n    Array.Sort(arr);\n    Array.reverse(arr);\n\
    \    string [] names = new string[10];\n    names[0] = \"Zero\";\n    names[1]\
    \ = \"One\";\n    names[2] = \"Two\";\n    names[3] = \"Three\";\n    names[4]\
    \ = \"Four\";\n    names[5] = \"Five\";\n    names[6] = \"Six\";\n    names[7]\
    \ = \"Seven\";\n    names[8] = \"Eight\";\n    names[9] = \"Nine\";\n    for (int\
    \ i = 0; i < arr.length; ++i) {\n        arr[i] = names[arr[i]];\n    }\n    return\
    \ arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6eg8_zc.d(24): Error: undefined identifier `Array`

    /tmp/tmpp6eg8_zc.d(24): Error: variable `arr` is shadowing variable `tmpp6eg8_zc.by_length.arr`

    /tmp/tmpp6eg8_zc.d(25): Error: undefined identifier `Array`

    /tmp/tmpp6eg8_zc.d(26): Error: undefined identifier `Array`

    /tmp/tmpp6eg8_zc.d(39): Error: cannot implicitly convert expression `names[cast(ulong)arr[cast(ulong)i]]`
    of type `string` to `int`

    /tmp/tmpp6eg8_zc.d(41): Error: cannot implicitly convert expression `arr` of type
    `int[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6eg8_zc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.Length == 0) \n        return string[];\n    Array.Sort(arr);\n   \
    \ var results = new List<string>();\n    var lengths = new List<int>();\n    for\
    \ (int i = 0; i < arr.Length; i++) \n    {\n        lengths.Add(arr[i] % 10);\n\
    \        if (arr[i] > 10)\n        {\n            string result = ((lengths.Count\
    \ - 1) - (int)lengths[lengths.Count - 1]) + 9 + 1;\n            results.Add($\"\
    {result[lengths.Count - 1]}{arr[i] / 10}\");\n        }\n        else\n      \
    \  {\n            string result = ((lengths.Count - 1) - lengths[lengths.Count\
    \ - 1]) + 1 + 1;\n            results.Add($\"{result[lengths.Count - 1]}{arr[i]}\"\
    );\n        }\n    }\n    return results.ToArray();\n}\n</code>\n<|/ a tags=c#,.net,algorithm\
    \ |>\n<| c |>\nHe states that he wants it to output the digits in the right order.\
    \ Your solution outputs \"One\" twice in two places.\n<|/ c |>\n<| c |>\nYes,\
    \ I saw that too. The OP's question was confusing and the sample output I see\
    \ does not match it either. I'll be fixing that up later.\n<|/ c |>\n<| c |>\n\
    Fixed. Thanks for the feedback!\n<|/ c |>\n<| a |>\nYou can try the below code\
    \ with string and array \n<code>\nusing System;\nusing System.Collections.Generic;\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gepnwbv.d(27): Error: semicolon expected, not `>`

    /tmp/tmp0gepnwbv.d(27): Error: found `>` instead of statement

    /tmp/tmp0gepnwbv.d(28): Error: found `>` when expecting `.` following int

    /tmp/tmp0gepnwbv.d(28): Error: found `(` when expecting identifier following `int`.

    /tmp/tmp0gepnwbv.d(28): Error: semicolon expected, not `)`

    /tmp/tmp0gepnwbv.d(28): Error: found `)` instead of statement

    /tmp/tmp0gepnwbv.d(34): Error: C style cast illegal, use `cast(int)lengths[lengths.Count
    - 1]`

    /tmp/tmp0gepnwbv.d(35): Error: `$` is valid only inside [] of index or slice

    /tmp/tmp0gepnwbv.d(35): Error: found `"{result[lengths.Count - 1]}{arr[i] / 10}"`
    when expecting `,`

    /tmp/tmp0gepnwbv.d(40): Error: `$` is valid only inside [] of index or slice

    /tmp/tmp0gepnwbv.d(40): Error: found `"{result[lengths.Count - 1]}{arr[i]}"` when
    expecting `,`

    /tmp/tmp0gepnwbv.d(45): Error: declaration expected, not `<`

    /tmp/tmp0gepnwbv.d(51): Error: unterminated character constant

    /tmp/tmp0gepnwbv.d(51): Error: unterminated character '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var big = arr.ToSorted();\n    big = big.Reverse();\n    var sb = new StringBuilder(big.Length.ToString());\n\
    \    foreach (var n in big) sb.Append(\"One\", n);\n    if (sb.Length != arr.Length)\
    \ return new string[0];\n    else return sb.ToString().Split(',');\n}\n</code>\n\
    <|/ a |>\n<| a |>\nA very simple solution without using LINQ. Just a plain old\
    \ loop and some string concats :)\n<code>\nvar list = new[] {2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L};\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy0acomgm.d(27): Error: found `in` when expecting `;`

    /tmp/tmpy0acomgm.d(31): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy0acomgm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int length = (int)arr.length; // get the length of the input array\n    long[]\
    \ tmp;  // a temporary storage array\n    string[] result;  // an array to store\
    \ the result\n    int i = 0;  // the current index\n    // the array is empty\n\
    \    if(length == 0)\n    {\n        result = new string[0];\n    }\n    // the\
    \ array has some strange number\n    else if(length > 0)\n    {\n        tmp =\
    \ arr.ToLongArray();\n        Array.Sort(tmp);  // sort them in ascending order\n\
    \        for(i = 0; i < length; i++)\n        {\n            // get the current\
    \ array value\n            long value = tmp[i];\n            // if the current\
    \ value between 1 and 9\n            if(value >= 1 && value <= 9)\n          \
    \  {\n                result[i] = by_length_helper(value, length, result);\n \
    \           }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7bt3wlrj.d(24): Error: C style cast illegal, use `cast(int)arr.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bt3wlrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] sorted = arr.sort(std.math.Long::compare);\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgni7zkpz.d(24): Error: found `:` when expecting `,`

    /tmp/tmpgni7zkpz.d(24): Error: expression expected, not `:`

    /tmp/tmpgni7zkpz.d(24): Error: found `compare` when expecting `,`

    /tmp/tmpgni7zkpz.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgni7zkpz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  std.list._sort(arr,\
    \ \n    (left, right) => \n    {\n      int leftLength = Math.abs(left);\n   \
    \   int rightLength = Math.abs(right);\n      \n      return leftLength - rightLength;\n\
    \    });\n  \n  return arr.map((long i) => \"One\").concat(arr.map((long i) =>\
    \ \"Two\")).concat(arr.map((long i) => \"Three\")).concat(arr.map((long i) =>\
    \ \"Four\")).concat(arr.map((long i) => \"Five\")).concat(arr.map((long i) =>\
    \ \"Six\")).concat(arr.map((long i) => \"Seven\")).concat(arr.map((long i) =>\
    \ \"Eight\")).concat(arr.map((long i) => \"Nine\")).filter(str => !str.equals(\"\
    One\") && !str.equals(\"Two\") && !str.equals(\"Three\") && !str.equals(\"Four\"\
    ) && !str.equals(\"Five\") && !str.equals(\"Six\") && !str.equals(\"Seven\") &&\
    \ !str.equals(\"Eight\") && !str.equals(\"Nine\")).toList();\n}\n</code>\nThe\
    \ code above is slightly different than yours because the list is sorted before\
    \ it is returned, so that you don't have to use it in a for loop to generate the\
    \ strings.\n<code>\npublic static void main(String[] args) {\n    long[] longs\
    \ = new long[]{1L, 1L, 1L, 4L, 5L, 8L, 2L, 3L};\n    \n    System.out.println(longs);\n\
    \    \n    System.out.println(by_length(longs));\n    \n}\n</code>\nPrints:\n\
    <code>\n[1L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]\n[\"One\", \"One\", \"One\", \"Four\"\
    , \"Five\", \"Five\", \"Five\", \"Six\", \"Six\", \"Six\", \"One\", \"Two\", \"\
    Three\", \"Three\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n</code>\n\
    <|/ a tags=sorting,algorithm,java |>\n<| c |>\nThank you very much for your answer.\
    \ But the answer above by Oliver is more convenient for me, but I still appreciate\
    \ your help! :)\n<|/ c |>\n<| a dscore=1 |>\nHere is a simple way to do it:\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7w0cqzri.d(35): Error: declaration expected, not `<`

    /tmp/tmp7w0cqzri.d(36): Error: unterminated character constant

    /tmp/tmp7w0cqzri.d(41): Error: identifier expected following `.` instead of `out`

    /tmp/tmp7w0cqzri.d(41): Error: no identifier for declarator `System`

    /tmp/tmp7w0cqzri.d(41): Error: declaration expected, not `out`

    /tmp/tmp7w0cqzri.d(43): Error: identifier expected following `.` instead of `out`

    /tmp/tmp7w0cqzri.d(43): Error: no identifier for declarator `System`

    /tmp/tmp7w0cqzri.d(43): Error: declaration expected, not `out`

    /tmp/tmp7w0cqzri.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7w0cqzri.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    \n    bool isReverse = false;\n\
    \    \n    for(int i = 0; i < arr.length; i++) {\n        long length = arr[i];\n\
    \        \n        if(length >= 1 && length <= 9) {\n            result[i] = getName(length);\n\
    \            isReverse = isReverse ^ true;\n        } else {\n            result[i]\
    \ = \"\";\n        }\n    }\n    \n    if(isReverse) {\n        for(int i = 0;\
    \ i < arr.length; i++) {\n            long length = arr[i];\n            \n  \
    \          if(length >= 1 && length <= 9) {\n                String name = getName(length);\n\
    \                \n                if(name.equals(\"\")) {\n                 \
    \   name = getName(length - 1);\n                }\n                \n       \
    \         result[i] = name;\n            }\n        }\n    }\n    \n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| c |>\nHm, it took me a while to understand\
    \ the code, but now I see. It seems a very elegant solution. I wonder how it will\
    \ perform in terms of performance, though.\n<|/ c |>\n<| c |>\nI guess this would\
    \ work fine with integers ranging from 0 to 999.\n<|/ c |>\n<| c |>\nYes and no.\
    \ If you are going for the smallest memory consumption possible (which is likely\
    \ a requirement for a homework assignment), you could replace the `string` array\
    \ with `char` arrays (and use `getName()` instead of `getName(int)`). That way\
    \ you only have the one `String` object (the `StringBuffer`) and the array's length\
    \ would be `arr.length * 2`. I'm not sure whether this is faster or slower, though.\n\
    <|/ c |>\n<| c |>\nHm, I am not sure if I can use a char array. I'll check it\
    \ out anyway. Thank you very much for your help, I really appreciate it.\n<|/\
    \ c |>\n<| c |>\nHmm... I am not sure what you mean. Can you please give an example\
    \ for me to see? Thanks.\n<|/ c |>\n<| a tags=sorting,java,arrays |>\nYou can\
    \ do this with a custom Comparator:\n<code>\n    Arrays.sort(array, new Comparator<Integer>()\
    \ {\n        public int compare(Integer a, Integer b) {\n            if(a == null\
    \ && b == null) {\n                return 0;\n            } else if(a == null)\
    \ {\n                return -1;\n            } else if(b == null) {\n        \
    \        return 1;\n            }\n            if(a > 9) {\n                return\
    \ 1;\n            } else if(a < 9) {\n                return -1;\n           \
    \ }\n            return 0;\n        }\n    });\n</code>\nThis uses the fact that\
    \ null sorts before anything else in Java.\n<|/ a dscore=2 \nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq4hp4c6.d(57): Error: declaration expected, not `<`

    /tmp/tmpqq4hp4c6.d(66): Error: unterminated character constant

    /tmp/tmpqq4hp4c6.d(66): Error: unterminated character constant

    /tmp/tmpqq4hp4c6.d(69): Error: unterminated character constant

    /tmp/tmpqq4hp4c6.d(81): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq4hp4c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if( arr.length == 0 )\n        return arr;\n    \n    var newArr = new string[\
    \ arr.length ];\n    \n    for( int i = 0; i < arr.length; i++ )\n    {\n    \
    \    if( arr[ i ] >= 1 && arr[ i ] <= 9 )\n            newArr[ i ] = by_length.Strings[\
    \ arr[ i ] ];\n    }\n    \n    var tmpArr = new string[ newArr.length ];\n  \
    \  for( int i = 0; i < newArr.length; i++ )\n        tmpArr[ i ] = newArr[ i ][\
    \ 1 ];\n        \n    return tmpArr;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp72oy_gni.d(27): Error: undefined identifier `var`

    /tmp/tmp72oy_gni.d(35): Error: undefined identifier `var`

    /tmp/tmp72oy_gni.d(25): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp72oy_gni.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] lengths = sort_by_key(arr,i->i.length);\n    string[] result = new string[arr.length];\n\
    \    for(int i = 0; i < result.length; i++)\n        result[i] = lookup(lengths,\
    \ arr[i].intValue()) + \"\";\n    if(result.length == 0)\n        return \"\"\
    ;\n    else\n        return result.reverse();\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp05q878l_.d(24): Error: use `.` for member lookup, not `->`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05q878l_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  long\
    \ size = arr[0];\n  if (size < 0) \n  {\n    Arrays.sort(arr);\n    return arr;\n\
    \  }\n  long maxsize = size;\n  for(int i = 1; i < arr.length; i++)\n  {\n   \
    \ if (arr[i] > maxsize)\n    {\n      maxsize = arr[i];\n    }\n  }\n  long[]\
    \ result = new long[arr.length];\n  for(int i = 1; i < arr.length; i++)\n  {\n\
    \    if (arr[i] < size)\n    {\n      result[i] = arr[i - 1];\n    }\n    else\n\
    \    {\n      result[i] = size + \"-\" + (arr[i] - size);\n    }\n  }\n  Arrays.sort(result);\n\
    \  for(int i = 0; i < result.length; i++)\n  {\n    result[i] = name_by_length(arr[i]);\n\
    \  }\n  return result;\n}\n</code>\n<|/ a tags=java,sorting,arrays dscore=0 |>\n\
    <| a dscore=0 tags=java,sorting,arrays |>\nI made this function for sorting arrays\
    \ based on their length:\n<code>\npublic static int[] sort(int[] a)\n{\n    int[]\
    \ aux = new int[a.length];\n    int n = a.length;\n    int i;\n    for(i = 0;\
    \ i<n; i++){\n        aux[i] = a[i];\n    }\n    aux = sort(aux);\n    for(i =\
    \ 0; i<n; i++){\n        a[i] = aux[i];\n    }\n    return a;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3tdfz3s.d(57): Error: declaration expected, not `<`

    /tmp/tmpx3tdfz3s.d(67): Error: declaration expected, not `for`

    /tmp/tmpx3tdfz3s.d(67): Error: no identifier for declarator `i`

    /tmp/tmpx3tdfz3s.d(67): Error: declaration expected, not `<`

    /tmp/tmpx3tdfz3s.d(67): Error: no identifier for declarator `i`

    /tmp/tmpx3tdfz3s.d(67): Error: declaration expected, not `++`

    /tmp/tmpx3tdfz3s.d(69): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3tdfz3s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ len = arr.Length;\n  long[] result = new long[len];\n  int i = 0;\n  while (i\
    \ < len) {\n    result[i++] = arr[i % len];\n  }\n  Array.Sort(result, 0, len-1);\n\
    \  int j = 0;\n  while (j < len) {\n    string s = reverse_digits(result[j++]);\n\
    \    arr[j % len] = new long(s);\n  }\n  return arr;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpogw716f4.d(24): Error: no property `Length` for type `long[]`

    /tmp/tmpogw716f4.d(30): Error: undefined identifier `Array`

    /tmp/tmpogw716f4.d(33): Error: undefined identifier `reverse_digits`

    /tmp/tmpogw716f4.d(34): Error: cannot implicitly convert expression `s` of type
    `string` to `long`

    /tmp/tmpogw716f4.d(36): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpogw716f4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] a = new long[arr.length];\n    foreach(a[i], i=arr[i]) \n    {\n   \
    \     a[i] = i % 10;\n    }\n    a.reverse();\n    \n    for(int i=0; i<a.length;\
    \ ++i)\n    {\n        if(a[i] == 0 || a[i] == 9)\n        {\n            continue;\n\
    \        }\n        else \n        {\n            return new string[] {\n    \
    \            name_by_value(a[i]),\n                name_by_value(a[i-1]),\n  \
    \          };\n        }\n    }\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpief1w3b5.d(25): Error: no identifier for declarator `a[i]`

    /tmp/tmpief1w3b5.d(25): Error: no identifier for declarator `i`

    /tmp/tmpief1w3b5.d(25): Error: found `=` when expecting `;`

    /tmp/tmpief1w3b5.d(39): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpief1w3b5.d(42): Error: expression expected, not `}`

    /tmp/tmpief1w3b5.d(45): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpief1w3b5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    int[] range = new int[11];\n    range[0] = 1;\n    range[1] = 9;\n  \
    \  \n    int length = 0;\n    \n    foreach(long v in arr)\n    {\n        \n\
    \        length++;\n        \n        if(range[length] > v)\n        {\n     \
    \       range[length] = v;\n        }\n        \n    }\n    \n    for(int i =\
    \ 0; i < range.length; i++)\n    {\n        range[i] = \"One\";\n    }\n    \n\
    \    for(int i = 0; i < range.length; i++)\n    {\n        arr[i] = range[arr[i]];\n\
    \    }\n    \n    arr.reverse();\n    \n    return arr;\n    \n}\n/*\n    \n \
    \   Find the longest increasing subsequence in the array [1..n] such that the\
    \ subsequence is of length k.\n    \n    For example:\n    >>> find_k_length([1,\
    \ 1, 2, 3, 4, 4, 3, 2], 2)\n    [1, 2, 3, 4]\n    \n    If the array has any strange\
    \ number ignore it:\n    >>> find_k_length([1L, -1L, 55L], 2)\n    [-1L]\n*/\n\
    long[] find_k_length(long[] arr, int k) \n{\n    \n    long[] result = new long[k];\n\
    \    \n    if(arr.length == 0)\n    {\n        return result;\n    }\n    \n \
    \   int n = arr.length;\n    int count = 0;\n    \n    for(int i = 1; i < n; i++)\n\
    \    {\n        \n        long left = arr[i - 1];\n        long right = arr[i];\n\
    \        \n        if(left > right)\n        {\n            count = i;\n     \
    \   }\n        \n    }\n    \n    for(int i = 0; i < count; i++)\n    {\n    \
    \    result[i - 1] = arr[i - 1];\n    }\n    \n    for(int i = count; i < k; i++)\n\
    \    {\n        result[i - 1] = arr[n - 1];\n    }\n    \n    return arr;\n  \
    \  \n}\n/*\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_uxi9qiu.d(31): Error: found `in` when expecting `;`

    /tmp/tmp_uxi9qiu.d(109): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_uxi9qiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result = new string[0];\n    if (arr == null || arr.Length < 1)\n     \
    \   return result;\n    int length = 0;\n    for (int i = 0; i < arr.Length; i++)\n\
    \    {\n        if (arr[i] > 0 && arr[i] < 10)\n        {\n            length++;\n\
    \        }\n        else\n        {\n            result.Add(std.string.fromCharCode(length));\n\
    \            length = 0;\n        }\n    }\n    result.Add(std.string.fromCharCode(length));\n\
    \    arr = new long[result.Count];\n    arr.CopyTo(result, 0);\n    reverse(result);\n\
    \    for (int i = 0; i < result.Length; i++)\n    {\n        if (arr[i] > 0 &&\
    \ arr[i] < 10)\n        {\n            arr[i] = \"One\";\n        }\n        else\
    \ if (arr[i] > 10)\n        {\n            arr[i] = \"Two\";\n        }\n    \
    \    else if (arr[i] > 20)\n        {\n            arr[i] = \"Three\";\n     \
    \   }\n        else if (arr[i] > 30)\n        {\n            arr[i] = \"Four\"\
    ;\n        }\n        else if (arr[i] > 40)\n        {\n            arr[i] = \"\
    Five\";\n        }\n        else if (arr[i] > 50)\n        {\n            arr[i]\
    \ = \"Six\";\n        }\n        else if (arr[i] > 60)\n        {\n          \
    \  arr[i] = \"Seven\";\n        }\n        else if (arr[i] > 70)\n        {\n\
    \            arr[i] = \"Eight\";\n        }\n        else if (arr[i] > 80)\n \
    \       {\n            arr[i] = \"Nine\";\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays,sorting,char |>\nI know\
    \ the solution above is good and it's nice, but i think you can do this a bit\
    \ shorter using the linq extensions, it's more elegant, and it doesn't use extra\
    \ variables like i or j. \nThe way it works is by using GroupBy to group your\
    \ numbers into ranges, and then for each range, you sort it using OrderByDescending,\
    \ then you can use SelectMany to concatenate all the results into one string,\
    \ and finally you reverse it.\nHere's a working sample:\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq83xbtav.d(85): Error: declaration expected, not `<`

    /tmp/tmpq83xbtav.d(88): Error: unterminated character constant

    /tmp/tmpq83xbtav.d(88): Error: unterminated character constant

    /tmp/tmpq83xbtav.d(88): Error: unterminated character constant

    /tmp/tmpq83xbtav.d(90): Error: unterminated character constant

    /tmp/tmpq83xbtav.d(93): Error: semicolon expected, not `.`

    /tmp/tmpq83xbtav.d(93): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpq83xbtav.d(94): Error: semicolon expected, not `.`

    /tmp/tmpq83xbtav.d(94): Error: no identifier for declarator `.Linq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq83xbtav.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    if (len == 0) {\n        return [];\n    } else\
    \ if (len == 1) {\n        return [\"One\"];\n    } else {\n        long max1\
    \ = max_in(arr);\n        if (max1 == 0) {\n            return [\"One\"];\n  \
    \      } else if (max1 == 1) {\n            return [\"Two\"];\n        } else\
    \ if (max1 == 2) {\n            return [\"Three\"];\n        } else if (max1 ==\
    \ 3) {\n            return [\"Four\"];\n        } else if (max1 == 4) {\n    \
    \        return [\"Five\"];\n        } else if (max1 == 5) {\n            return\
    \ [\"Six\"];\n        } else if (max1 == 6) {\n            return [\"Seven\"];\n\
    \        } else if (max1 == 7) {\n            return [\"Eight\"];\n        } else\
    \ if (max1 == 8) {\n            return [\"Nine\"];\n        }\n        long[]\
    \ result = new long[len];\n        int max2;\n        for (int i = 0; i < len;\
    \ ++ i) {\n            max2 = max_in(arr);\n            result[i] = max2;\n  \
    \          if (max2 > 8) {\n                result[len-i-1] = max2-10;\n     \
    \       }\n        }\n        return string[result];\n    }\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| c |>\nThis doesn't solve the problem. It also doesn't\
    \ handle the case where input contains zero. I think you meant to return an empty\
    \ array instead of \"One\" when the input contains 0.\n<|/ c |>\n<| c |>\nYou're\
    \ right, I wrote it before I fully understood the question. Fixed now\n<|/ c |>\n\
    <| a tags=c++,algorithm |>\nI agree with the solutions offered by others.  But\
    \ in my opinion they don't address your question very well.  The basic problem\
    \ is that you really only need to know the position of the highest value in the\
    \ input array.  So your first step is to find that position.  This is where I\
    \ started, but in general you just need to find the highest index among a group\
    \ of indices whose value is larger than the highest value among the values in\
    \ the group.  Then that index will be the one you want to start from.\nSo the\
    \ first step is pretty simple, but you still need to know how many elements are\
    \ in the group.  Because the number of elements in the group depends on the size\
    \ of the largest value in the group, you can't just use std::max to find the largest\
    \ value in the group.  The number of elements in the group may be larger than\
    \ the largest value.  And if you do want to ignore the largest value, then std::max_element\
    \ is the function you should look at.  But because you want to ignore the largest\
    \ value, you don't want to sort it.  So that leaves us with std::min_element to\
    \ find the smallest value in a sorted range.  And so on.  And now you finally\
    \ get to the second step.\nBut what if the highest value in the group is not the\
    \ smallest value in the group?  Then the only possible index is \nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmmbfmz3c.d(62): Error: declaration expected, not `<`

    /tmp/tmpmmbfmz3c.d(65): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(65): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(68): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(71): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(72): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(72): Error: unterminated character constant

    /tmp/tmpmmbfmz3c.d(78): Error: declaration expected, not `assert`

    /tmp/tmpmmbfmz3c.d(79): Error: declaration expected, not `assert`

    /tmp/tmpmmbfmz3c.d(80): Error: declaration expected, not `assert`

    /tmp/tmpmmbfmz3c.d(81): Error: declaration expected, not `assert`

    /tmp/tmpmmbfmz3c.d(82): Error: declaration expected, not `assert`

    /tmp/tmpmmbfmz3c.d(83): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmmbfmz3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) {\n        return new string[0];\n    }\n    \n    int[]\
    \ digits = arr.map((t) => Integer.parseInt(t.toString())).filter((t) => t > 0\
    \ && t < 10).toArray();\n    \n    int min = min(digits);\n    int max = max(digits);\n\
    \    \n    int len = max - min + 1;\n    string[] result = new string[len];\n\
    \    int pos = 0;\n    \n    for (int i = 0; i < digits.length; i++) {\n     \
    \   int val = digits[i];\n        int idx = val - min;\n        if (idx >= 0 &&\
    \ idx < len) {\n            result[pos] = int2name(idx);\n            pos++;\n\
    \        }\n    }\n    \n    return result == new string[0] ? new string[0] :\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8lyx1ef.d(28): Error: no property `map` for type `long[]`

    /tmp/tmpd8lyx1ef.d(30): Error: undefined identifier `min`, did you mean function
    `main`?

    /tmp/tmpd8lyx1ef.d(31): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpd8lyx1ef.d(41): Error: undefined identifier `int2name`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8lyx1ef.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] arr2 = new string[arr.Length];\n    long maxNum = arr.Max();\n   \
    \ long minNum = arr.Min();\n    for (int i = 0; i < arr.Length; i++) {\n     \
    \   if (arr[i] == minNum) {\n            arr2[i] = \"One\";\n        }\n     \
    \   else if (arr[i] == maxNum) {\n            arr2[i] = \"Nine\";\n        }\n\
    \        else if (arr[i] > maxNum) {\n            arr2[i] = \"Nine\";\n      \
    \  }\n        else if (arr[i] < minNum) {\n            arr2[i] = \"One\";\n  \
    \      }\n        else {\n            arr2[i] = \"Two\";\n        }\n    }\n \
    \   Array.Sort(arr2);\n    return arr2;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    What about a non-C# answer?\n<|/ c |>\n<| c |>\nThis is C# code, but you could\
    \ easily convert it to a C++ or Objective-C program if you so desire.\n<|/ c |>\n\
    <| a tags=c#,algorithm,sorting |>\n<code>\nstatic bool IsInRange(long value)\n\
    {\n    return value >= 1 && value <= 9;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_txe3ejo.d(47): Error: declaration expected, not `<`

    /tmp/tmp_txe3ejo.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_txe3ejo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    for (int i = 0; i < arr.length; i++)\n    {\n      \
    \  int val = arr[i];\n        int index = val % 10;\n        if (val > 0 && val\
    \ % 10 == 1)\n        {\n            arr[i] = \"One\";\n        }\n        else\
    \ if (val > 0 && val % 10 == 2)\n        {\n            arr[i] = \"Two\";\n  \
    \      }\n        else if (val > 0 && val % 10 == 3)\n        {\n            arr[i]\
    \ = \"Three\";\n        }\n        else if (val > 0 && val % 10 == 4)\n      \
    \  {\n            arr[i] = \"Four\";\n        }\n        else if (val > 0 && val\
    \ % 10 == 5)\n        {\n            arr[i] = \"Five\";\n        }\n        else\
    \ if (val > 0 && val % 10 == 6)\n        {\n            arr[i] = \"Six\";\n  \
    \      }\n        else if (val > 0 && val % 10 == 7)\n        {\n            arr[i]\
    \ = \"Seven\";\n        }\n        else if (val > 0 && val % 10 == 8)\n      \
    \  {\n            arr[i] = \"Eight\";\n        }\n        else if (val > 0 &&\
    \ val % 10 == 9)\n        {\n            arr[i] = \"Nine\";\n        }\n     \
    \   else\n        {\n            arr[i] = \"Unknown\";\n        }\n    }\n   \
    \ return arr.to_array();\n}\n</code>\n<|/ a |>\n<| a tags=string,c# |>\nOne of\
    \ the ways to do it is to convert each string to a number with Int32.TryParse\
    \ and use a Dictionary to map each number to a string.\n<code>\nprivate static\
    \ readonly Dictionary<int, string> NumberNames = new Dictionary<int, string>\n\
    {\n    { 1, \"One\" },\n    { 2, \"Two\" },\n    { 3, \"Three\" },\n    { 4, \"\
    Four\" },\n    { 5, \"Five\" },\n    { 6, \"Six\" },\n    { 7, \"Seven\" },\n\
    \    { 8, \"Eight\" },\n    { 9, \"Nine\" },\n};\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80cpphnk.d(72): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80cpphnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  var\
    \ ans = \"\";\n  \n  if (arr.Length > 0)\n  {\n    // reverse the array\n    arr\
    \ = reverse(arr);\n    \n    // create a dictionary that maps the digits to the\
    \ names\n    var dic = new Dictionary<long, string>();\n    dic.Add(1, \"One\"\
    );\n    dic.Add(2, \"Two\");\n    dic.Add(3, \"Three\");\n    dic.Add(4, \"Four\"\
    );\n    dic.Add(5, \"Five\");\n    dic.Add(6, \"Six\");\n    dic.Add(7, \"Seven\"\
    );\n    dic.Add(8, \"Eight\");\n    dic.Add(9, \"Nine\");\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpunm5_hvd.d(32): Error: found `,` when expecting `.` following long

    /tmp/tmpunm5_hvd.d(32): Error: semicolon expected, not `>`

    /tmp/tmpunm5_hvd.d(32): Error: found `>` instead of statement

    /tmp/tmpunm5_hvd.d(42): Error: found `unittest` instead of statement

    /tmp/tmpunm5_hvd.d(52): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpunm5_hvd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  // write your code in C# here\n    if(arr.Length == 0)\n    {\n        return\
    \ new string[0];\n    }\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36lpqo7w.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36lpqo7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    string one = \"One\";\n    string two = \"Two\";\n \
    \   string three = \"Three\";\n    string four = \"Four\";\n    string five =\
    \ \"Five\";\n    string six = \"Six\";\n    string seven = \"Seven\";\n    string\
    \ eight = \"Eight\";\n    string nine = \"Nine\";\n    string zero = \"Zero\"\
    ;\n    int i = 0;\n    string output = \"\";\n    for (i = 0; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] == 1)\n            output += one + \" \";\n\
    \        else if (arr[i] == 2)\n            output += two + \" \";\n        else\
    \ if (arr[i] == 3)\n            output += three + \" \";\n        else if (arr[i]\
    \ == 4)\n            output += four + \" \";\n        else if (arr[i] == 5)\n\
    \            output += five + \" \";\n        else if (arr[i] == 6)\n        \
    \    output += six + \" \";\n        else if (arr[i] == 7)\n            output\
    \ += seven + \" \";\n        else if (arr[i] == 8)\n            output += eight\
    \ + \" \";\n        else if (arr[i] == 9)\n            output += nine + \" \"\
    ;\n        else\n            output += zero + \" \";\n    }\n    return output.Replace(\"\
    \ \", \"\");\n}\n</code>\n<|/ a |>\n<| a dscore=2 tags=c#,arrays |>\nTry this:\n\
    <code>\npublic static string GetWords(int[] array)\n{\n    if (array.Length ==\
    \ 0)\n        return \"\";\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxixw2cbe.d(62): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxixw2cbe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int max = 0;\n    for(int i=0; i<arr.Length; i++)\n    {\n        if(arr[i]\
    \ < 1) continue;\n        else if(arr[i] > 9) continue;\n        else\n      \
    \  {\n            max = Math.Max(max, arr[i]);\n        }\n    }\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8u9hut1o.d(34): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8u9hut1o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var ans = new string[arr.Length];\n    var min = 1;\n    var max = 100;\n \
    \   for (int i = 0; i < arr.Length; i++)\n    {\n        var len = std.random.Next(min,\
    \ max);\n        ans[i] = \"One\";\n        switch (len)\n        {\n        \
    \    case 1:\n                ans[i] = \"Two\";\n                break;\n    \
    \        case 2:\n                ans[i] = \"Three\";\n                break;\n\
    \            case 3:\n                ans[i] = \"Four\";\n                break;\n\
    \            case 4:\n                ans[i] = \"Five\";\n                break;\n\
    \            case 5:\n                ans[i] = \"Six\";\n                break;\n\
    \            case 6:\n                ans[i] = \"Seven\";\n                break;\n\
    \            case 7:\n                ans[i] = \"Eight\";\n                break;\n\
    \            case 8:\n                ans[i] = \"Nine\";\n                break;\n\
    \            default:\n                break;\n        }\n        min = max -\
    \ len;\n        max = len;\n    }\n    if (arr.Length > 0)\n        ans[0] = \"\
    Zero\";\n    std.arraysort(ans, (a, b) => a.Length.CompareTo(b.Length));\n   \
    \ for (int i = 1; i < arr.Length; i++)\n        ans[i] = std.string(ans[i]) +\
    \ std.string(ans[0]);\n    return ans;\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjm4bfast.d(24): Error: undefined identifier `var`

    /tmp/tmpjm4bfast.d(24): Error: no property `Length` for type `long[]`

    /tmp/tmpjm4bfast.d(25): Error: undefined identifier `var`

    /tmp/tmpjm4bfast.d(26): Error: undefined identifier `var`

    /tmp/tmpjm4bfast.d(27): Error: no property `Length` for type `long[]`

    /tmp/tmpjm4bfast.d(29): Error: undefined identifier `var`

    /tmp/tmpjm4bfast.d(29): Error: undefined identifier `random` in package `std`

    /tmp/tmpjm4bfast.d(63): Error: no property `Length` for type `long[]`

    /tmp/tmpjm4bfast.d(65): Error: undefined identifier `arraysort` in package `std`

    /tmp/tmpjm4bfast.d(66): Error: no property `Length` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjm4bfast.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr &= arr.length - 1; //clear the negatives\n    arr &= arr < 9; //clear the\
    \ numbers out of bounds.\n    \n    //sort them and put them in order.\n    arr\
    \ = arr.sort((x,y)=> x - y);\n    \n    string[] result = new string[arr.length];\n\
    \    \n    for(int i = 0; i < arr.length; ++i) \n    {\n        //get the character\
    \ of the number.\n        char number = arr[(int)i];\n        \n        //replace\
    \ it\n        result[i] = names[(int)number];\n    }\n    \n    //reverse it\n\
    \    result.reverse();\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI don't see how this is any better than just sorting the numbers, which\
    \ is what he asked for.\n<|/ c |>\n<| c |>\nThe question was to create a function\
    \ which returns the sorted array in the manner that he asked, without using any\
    \ extra packages and methods of Java.\n<|/ c |>\n<| c |>\nOk, it just seems a\
    \ bit too complicated to achieve what he wants to do with just a single method.\n\
    <|/ c |>\n<| a dscore=1 tags=arrays,java |>\nIn case you need something that won't\
    \ require any extra packages and methods of Java, try this.\n<code>\npublic class\
    \ Main {\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpny8ek1e9.d(35): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpny8ek1e9.d(38): Error: C style cast illegal, use `cast(int)number`

    /tmp/tmpny8ek1e9.d(46): Error: declaration expected, not `<`

    /tmp/tmpny8ek1e9.d(49): Error: unterminated character constant

    /tmp/tmpny8ek1e9.d(58): Error: unterminated character constant

    /tmp/tmpny8ek1e9.d(65): Error: declaration expected, not `assert`

    /tmp/tmpny8ek1e9.d(66): Error: declaration expected, not `assert`

    /tmp/tmpny8ek1e9.d(67): Error: declaration expected, not `assert`

    /tmp/tmpny8ek1e9.d(68): Error: declaration expected, not `assert`

    /tmp/tmpny8ek1e9.d(69): Error: declaration expected, not `assert`

    /tmp/tmpny8ek1e9.d(70): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny8ek1e9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int N = int(arr.length);\n    if (N == 0)\n        return string[];\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3317y7x3.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3317y7x3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) {\n        return arr;\n    }\n    string[] result = new\
    \ string[arr.length];\n    int start = 0;\n    int end = arr.length;\n    while\
    \ (start < end) {\n        int mid = (start + end) / 2;\n        if (arr[mid]\
    \ < 9) {\n            end = mid;\n        } else {\n            start = mid +\
    \ 1;\n        }\n    }\n    result[start] = arr[start];\n    for (int i = start\
    \ + 1; i < end; i++) {\n        result[i] = \"One\";\n    }\n    return arr;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays |>\nYou can use the StringBuilder\
    \ class:\n<code>\npublic static String sort(int[] arr) {\n    StringBuilder sb\
    \ = new StringBuilder();\n    int start = 0;\n    int end = arr.length;\n    while\
    \ (start < end) {\n        int mid = (start + end) / 2;\n        if (arr[mid]\
    \ < 9) {\n            end = mid;\n        } else {\n            start = mid +\
    \ 1;\n        }\n    }\n    sb.append(arr[start]).append(\"One\");\n    for (int\
    \ i = start + 2; i < end; i++) {\n        sb.append(\"One\");\n    }\n    return\
    \ sb.toString();\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=java,arrays |>\n<code>\n\
    public static String sort(int[] arr) {\n    StringBuilder sb = new StringBuilder();\n\
    \    int start = 0;\n    int end = arr.length;\n    while (start < end) {\n  \
    \      int mid = (start + end) / 2;\n        if (arr[mid] < 9) {\n           \
    \ end = mid;\n        } else {\n            start = mid + 1;\n        }\n    }\n\
    \    sb.append(arr[start]).append(\"One\");\n    for (int i = start + 2; i < end;\
    \ i++) {\n        sb.append(\"One\");\n    }\n    return sb.toString();\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nA couple explanations: 1. You probably want to start\
    \ `i` at `start+1`, or 2. You need to start `i` at `start+1`; `start+2` does not\
    \ start at `0`, but `start+1` does.\n<|/ c |>\n<| c |>\nYou also should check\
    \ for a boundary condition when `start == end`. And you may want to use `StringBuilder`\
    \ instead of `StringBuffer`.\n<|/ c |>\n<| a tags=java,arrays |>\nI guess this\
    \ is more intuitive:\n<code>\npublic static String sort(int[] arr) {\n    if (arr.length\
    \ == 0) {\n        return \"\";\n    }\n    StringBuilder result = new StringBuilder(arr[arr.length\
    \ - 1]);\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] < 9\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0gif_hq.d(44): Error: declaration expected, not `<`

    /tmp/tmps0gif_hq.d(53): Error: declaration expected, not `while`

    /tmp/tmps0gif_hq.d(55): Error: declaration expected, not `if`

    /tmp/tmps0gif_hq.d(57): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0gif_hq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if((arr.length == 0) || (arr.length == 1 && (arr[0] <= 1) || (arr[0] > 9)))\
    \ {\n        return [];\n    }\n    \n    // sort the array by length\n    Arrays.sort(arr,\
    \ (i, j) -> { return arr[i].compareTo(arr[j]); });\n    \n    // reverse the array\n\
    \    long[] reversed = reverse(long[] arr);\n    \n    // return an array with\
    \ its length property replaced by names\n    return arr == reversed\n        \
    \    ? new string[arr.length]\n            : reversed.map((l) -> byName(l)).array();\n\
    }\n    \n// helpers\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgjbsmwh0.d(29): Error: expression expected, not `>`

    /tmp/tmpgjbsmwh0.d(29): Error: found `{` when expecting `,`

    /tmp/tmpgjbsmwh0.d(29): Error: expression expected, not `return`

    /tmp/tmpgjbsmwh0.d(29): Error: found `arr` when expecting `,`

    /tmp/tmpgjbsmwh0.d(29): Error: found `;` when expecting `,`

    /tmp/tmpgjbsmwh0.d(29): Error: expression expected, not `}`

    /tmp/tmpgjbsmwh0.d(32): Error: found `[` when expecting `.` following long

    /tmp/tmpgjbsmwh0.d(32): Error: found `]` when expecting identifier following `long`.

    /tmp/tmpgjbsmwh0.d(32): Error: found `arr` when expecting `,`

    /tmp/tmpgjbsmwh0.d(37): Error: expression expected, not `>`

    /tmp/tmpgjbsmwh0.d(37): Error: found `byName` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgjbsmwh0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int size = arr.Length;\n    long[] arr = std.array.append(arr, 0)[0];\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3j6h__rf.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3j6h__rf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort((f1, f2) -> (f2 - f1));\n    long len = arr.length;\n    if (len\
    \ == 0)\n        return [];\n    \n    long result = 0;\n    Arrays.fill(result,\
    \ 1L, 9L);\n    Arrays.fill(result, (10L * len + 2L) - 1L, 9L);\n    \n    StringBuilder\
    \ sb = new StringBuilder();\n    for (long i : arr) {\n        result -= i;\n\
    \        sb.append((char) result); \n    }\n    \n    return sb.toString().split(\"\
    (?!^)\");\n}\n</code>\n<|/ a |>\n<| a tags=sorting,java |>\nYou can simply use\
    \ Collections.reverse\n<|/ a dscore=0 |>\n<| c |>\nHe is not trying to reverse\
    \ the array, he's trying to sort the array in descending order.\n<|/ c |>\n<|\
    \ c |>\nYes I was trying to sort in descending order but not sort it in ascending\
    \ order\n<|/ c |>\n<| c |>\nYes, I mean the opposite. He is trying to sort in\
    \ ascending order. Your answer is not relevant.\n<|/ c |>\n<| a tags=sorting,java\
    \ |>\nUse Collections.sort and pass a custom Comparator that compares elements\
    \ descending:\n<code>\nCollections.sort(ints, new Comparator<Integer>() {\n  \
    \  public int compare(Integer o1, Integer o2) {\n        return o2.compareTo(o1);\n\
    \    }\n});\n</code>\nAlternatively, you could use a custom Comparator with Collections.reverseOrder()\
    \ and Collections.sort(ints, Comparator.naturalOrder()).\n<|/ a dscore=0 |>\n\
    <| c |>\nThis would sort ascending. I think the OP wants descending.\n<|/ c |>\n\
    <| c |>\nThank you this works\n<|/ c |>\n<| a tags=sorting,java |>\nThe other\
    \ solutions will work fine but I think this might be a nice way to do it without\
    \ creating any custom classes. You could use Collections.sort() and use a comparator\
    \ that would simply return o2.compareTo(o1);. \n<code>\nCollections.sort(ints,\
    \ new Comparator<Integer>() {\n        public int compare(Integer o1, Integer\
    \ o2) {\n            return o2.compareTo(o1);\n        }\n    });\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=sorting,java |>\n<code>\n  Arrays.sort(ints, Comparator.comparingInt(i->i));\n\
    </code>\nThis works too\n<code>\n  Arrays.sort(ints, Comparator.comparing(\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_6mg0yz.d(24): Error: expression expected, not `>`

    /tmp/tmpk_6mg0yz.d(34): Error: semicolon expected, not `:`

    /tmp/tmpk_6mg0yz.d(34): Error: expression expected, not `:`

    /tmp/tmpk_6mg0yz.d(34): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmpk_6mg0yz.d(36): Error: C style cast illegal, use `cast(char)result`

    /tmp/tmpk_6mg0yz.d(41): Error: declaration expected, not `<`

    /tmp/tmpk_6mg0yz.d(47): Error: unterminated character constant

    /tmp/tmpk_6mg0yz.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_6mg0yz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var results = new string[arr.Length];\n    var maxLength = 1;\n    for (var\
    \ i = 0; i < arr.Length; i++)\n    {\n        maxLength = maxLength > arr[i].Length\
    \ ? maxLength : arr[i].Length;\n    }\n    var result = new List<string>();\n\
    \    for (var i = 0; i < arr.Length; i++)\n    {\n        if (maxLength == arr[i].Length)\n\
    \        {\n            var item = new string[arr[i].Length];\n            for\
    \ (var j = 0; j < arr[i].Length; j++)\n            {\n                item[j]\
    \ = new string[] {\n                    new string[] {\n                     \
    \   $\"One\"[i],\n                        $\"Two\"[i],\n                     \
    \   $\"Three\"[i],\n                        $\"Four\"[i],\n                  \
    \      $\"Five\"[i],\n                        $\"Six\"[i],\n                 \
    \       $\"Seven\"[i],\n                        $\"Eight\"[i],\n             \
    \           $\"Nine\"[i],\n                    },\n                    new string[]\
    \ {\n                        $\"Ten\"[i],\n                        $\"Eleven\"\
    [i],\n                        $\"Twelve\"[i],\n                        $\"Thirteen\"\
    [i],\n                        $\"Fourteen\"[i],\n                        $\"Fifteen\"\
    [i],\n                        $\"Sixteen\"[i],\n                        $\"Seventeen\"\
    [i],\n                        $\"Eighteen\"[i],\n                        $\"Nineteen\"\
    [i],\n                    },\n                    new string[] {\n           \
    \             $\"Twenty\"[i],\n                        $\"Thirty\"[i],\n     \
    \                   $\"Forty\"[i],\n                        $\"Fifty\"[i],\n \
    \                       $\"Sixty\"[i],\n                        $\"Seventy\"[i],\n\
    \                        $\"Eighty\"[i],\n                        $\"Ninety\"\
    [i],\n                    },\n                };\n            }\n            var\
    \ item2 = new string[arr[i].Length];\n            for (var j = 0; j < arr[i].Length;\
    \ j++)\n            {\n                item2[j] = new string[] {\n           \
    \         new string[] {\n                        $\"Twenty \"[i],\n         \
    \               $\"Thirty \"[i],\n                        $\"Fourty \"[i],\n \
    \                       $\"Fifty \"[i],\n                        $\"Sixty \"[i],\n\
    \                        $\"Seventy \"[i],\n                        $\"Eighty\
    \ \"[i],\n                        $\"Ninety \"[i],\n                    },\n \
    \                   new string[] {\n                        $\"Thirty \"[i],\n\
    \                        $\"Forty \"[i],\n                        $\"Fifty \"\
    [i],\n                        $\"Sixty \"[i],\n                        $\"Seventy\
    \ \"[i],\n                        $\"Eighty \"[i],\n                        $\"\
    Ninety \"[i],\n                    },\n                    new string[] {\n  \
    \                      $\"Fifty \"[i],\n                        $\"Sixty \"[i],\n\
    \                        $\"Seventy \"[i],\n                        \nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkz9p8lyj.d(30): Error: semicolon expected, not `>`

    /tmp/tmpkz9p8lyj.d(30): Error: found `>` instead of statement

    /tmp/tmpkz9p8lyj.d(38): Error: found `{` when expecting `;` following statement

    /tmp/tmpkz9p8lyj.d(39): Error: found `{` when expecting `;` following statement

    /tmp/tmpkz9p8lyj.d(40): Error: found `$` instead of statement

    /tmp/tmpkz9p8lyj.d(49): Error: found `,` instead of statement

    /tmp/tmpkz9p8lyj.d(61): Error: found `,` instead of statement

    /tmp/tmpkz9p8lyj.d(71): Error: found `,` instead of statement

    /tmp/tmpkz9p8lyj.d(73): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz9p8lyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] lengths = new int[arr.length];\n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        arr[i] /= 10;\n        lengths[i] = arr[i] % 10;\n    }\n    if\
    \ (arr.length == 0)\n        return new string[0];\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22uc72t_.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22uc72t_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int[]\
    \ array = new int[arr.length];\n  for (int i = 0; i < arr.length; ++i)\n    array[i]\
    \ = arr[i];\n  array.sort(by_length_fn);\n  string[] s = new string[arr.length];\n\
    \  for (int i = 0; i < arr.length; ++i)\n    s[i] = string_by_length_digit[array[i]];\n\
    \  for (int i = arr.length - 1; i >= 0; --i)\n    array[i] = arr[i];\n  for (int\
    \ i = 0; i < arr.length; ++i)\n    arr[i] = array[i];\n  return s;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nWhat about when there are numbers > 9? :)\n<|/ c |>\n\
    <| a |>\n<code>\nclass ByLengthSorting\n{\n    public static void main(String\
    \ args[])\n    {\n        int[] arr = {2, 1, 1, 4, 5, 8, 2, 3};\n        Arrays.sort(arr);\n\
    \        int[] reversed = new int[arr.length];\n        int i=0;\n        for(;\
    \ i < arr.length; i++)\n        {\n            reversed[i] = arr[arr.length -\
    \ 1 - i];\n        }\n        for(; i < arr.length; i++)\n        {\n        \
    \    arr[arr.length - 1 - i] = reversed[i];\n        }\n        System.out.print(\"\
    [\");\n        for(int i = 0; i < arr.length; i++)\n        {\n            if(i\
    \ != 0)\n                System.out.print(\", \");\n            System.out.print(arr[i]);\n\
    \        }\n        System.out.print(\"]\");\n    }\n}\n</code>\n<|/ a dscore=1\
    \ tags=sorting,arrays,java,arrays |>\n<| a |>\n<code>\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnoyo0v8x.d(37): Error: declaration expected, not `<`

    /tmp/tmpnoyo0v8x.d(49): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpnoyo0v8x.d(49): Error: no identifier for declarator `Arrays.sort(arr)`

    /tmp/tmpnoyo0v8x.d(52): Error: declaration expected, not `for`

    /tmp/tmpnoyo0v8x.d(52): Error: no identifier for declarator `i`

    /tmp/tmpnoyo0v8x.d(52): Error: declaration expected, not `<`

    /tmp/tmpnoyo0v8x.d(52): Error: no identifier for declarator `i`

    /tmp/tmpnoyo0v8x.d(52): Error: declaration expected, not `++`

    /tmp/tmpnoyo0v8x.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnoyo0v8x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr == null)\n    return null;\n  int len = arr.length;\n  long[] copy = ArrayUtil.copyOf(arr,\
    \ len);\n  ArrayUtil.sort(copy);\n  return ArrayUtil.reverse(copy);\n}\n</code>\n\
    <|/ a tags=arrays,java |>\n<| a |>\n<code>\npublic class SortArray {\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4iuyrfom.d(31): Error: declaration expected, not `<`

    /tmp/tmp4iuyrfom.d(40): Error: declaration expected, not `assert`

    /tmp/tmp4iuyrfom.d(41): Error: declaration expected, not `assert`

    /tmp/tmp4iuyrfom.d(42): Error: declaration expected, not `assert`

    /tmp/tmp4iuyrfom.d(43): Error: declaration expected, not `assert`

    /tmp/tmp4iuyrfom.d(44): Error: declaration expected, not `assert`

    /tmp/tmp4iuyrfom.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4iuyrfom.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.length == 0) \n        return array();\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8g8kkg7.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8g8kkg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] result = new int[arr.length];\n    int index = 0;\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kioqrix.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kioqrix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ret = new string[arr.Length];\n    for (int i = 0; i < arr.Length;\
    \ i++)\n    {\n        if (arr[i] == 1L)\n        {\n            ret[i] = \"One\"\
    ;\n        }\n        else if (arr[i] == 2L)\n        {\n            ret[i] =\
    \ \"Two\";\n        }\n        else if (arr[i] == 3L)\n        {\n           \
    \ ret[i] = \"Three\";\n        }\n        else if (arr[i] == 4L)\n        {\n\
    \            ret[i] = \"Four\";\n        }\n        else if (arr[i] == 5L)\n \
    \       {\n            ret[i] = \"Five\";\n        }\n        else if (arr[i]\
    \ == 6L)\n        {\n            ret[i] = \"Six\";\n        }\n        else if\
    \ (arr[i] == 7L)\n        {\n            ret[i] = \"Seven\";\n        }\n    \
    \    else if (arr[i] == 8L)\n        {\n            ret[i] = \"Eight\";\n    \
    \    }\n        else if (arr[i] == 9L)\n        {\n            ret[i] = \"Nine\"\
    ;\n        }\n        else\n        {\n            ret[i] = string.Empty;\n  \
    \      }\n    }\n    Array.Reverse(ret);\n    return ret;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy0zqp41.d(24): Error: no property `Length` for type `long[]`

    /tmp/tmpsy0zqp41.d(25): Error: no property `Length` for type `long[]`

    /tmp/tmpsy0zqp41.d(65): Error: no property `Empty` for type `string`

    /tmp/tmpsy0zqp41.d(68): Error: undefined identifier `Array`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy0zqp41.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  List<long> ints = new List<long>();\n    for( long n : arr ) ints.Add(n);\n\
    \    ints.Sort( std.complib.OrderByDescending( (int a, int b) => b-a) );\n   \
    \ \n    if( ints.Any() )\n    {\n        var reversedArray = ints.ToArray();\n\
    \        ArrayUtils.Reverse(reversedArray);\n        var result = new string[reversedArray.Length];\n\
    \        for( int i = 0; i < reversedArray.Length; i++ )\n        {\n        \
    \    result[i] = by_digit_name[reversedArray[i]];\n        }\n        return result;\n\
    \    }\n    return new string[0];\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8qyhur4x.d(24): Error: found `>` when expecting `.` following long

    /tmp/tmp8qyhur4x.d(24): Error: found `>` when expecting `.` following long

    /tmp/tmp8qyhur4x.d(24): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp8qyhur4x.d(24): Error: found `)` when expecting `;` following statement

    /tmp/tmp8qyhur4x.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp8qyhur4x.d(25): Error: semicolon expected, not `:`

    /tmp/tmp8qyhur4x.d(25): Error: expression expected, not `:`

    /tmp/tmp8qyhur4x.d(25): Error: found `arr` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8qyhur4x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] numbers = new int[arr.length];\n    string[] result = new string[arr.length];\n\
    \    bool hasNum = false;\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphxh1byfr.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphxh1byfr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.Length <= 0)\n        return arr;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaa0xuer.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaa0xuer.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int arrLen = arr.length;\n    int len = arrLen - 1;\n    long min = 0;\n  \
    \  long max = arrLen - 1;\n    int minIndex;\n    long temp;\n    string[] result\
    \ = new string[arrLen];\n    \n    for (int i = 0; i < arrLen; i++)\n    {\n \
    \       if (i == 0)\n        {\n            minIndex = i;\n            min = arr[i];\n\
    \        }\n        \n        if (arr[i] < min)\n        {\n            minIndex\
    \ = i;\n            min = arr[i];\n        }\n        else if (arr[i] > max)\n\
    \        {\n            max = arr[i];\n        }\n    }\n    \n    arr[minIndex]\
    \ = max;\n    \n    for (int i = 0; i < arrLen; i++)\n    {\n        if (i ==\
    \ 0)\n        {\n            minIndex = i;\n            temp = arr[i];\n     \
    \   }\n        else if (arr[i] == max)\n        {\n            arr[i] = temp;\n\
    \        }\n        else\n        {\n            temp = arr[i];\n        }\n \
    \       result[i] = names[arr[i]];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgzejx1v.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpdgzejx1v.d(68): Error: undefined identifier `names`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgzejx1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  long\
    \ maxValue = arr[arr.length-1];\n  \n  arr.sort((x,y)=>x.compare(y));\n  \n  for(int\
    \ i = 0; i < arr.length; ++i)\n  {\n    if(arr[i].compareTo(0) == 0)\n    {\n\
    \      continue;\n    }\n    else if(arr[i].compareTo(0) == 1)\n    {\n      arr[i]\
    \ = \"One\";\n    }\n    else if(arr[i].compareTo(0) == 2)\n    {\n      arr[i]\
    \ = \"Two\";\n    }\n    else if(arr[i].compareTo(0) == 3)\n    {\n      arr[i]\
    \ = \"Three\";\n    }\n    else if(arr[i].compareTo(0) == 4)\n    {\n      arr[i]\
    \ = \"Four\";\n    }\n    else if(arr[i].compareTo(0) == 5)\n    {\n      arr[i]\
    \ = \"Five\";\n    }\n    else if(arr[i].compareTo(0) == 6)\n    {\n      arr[i]\
    \ = \"Six\";\n    }\n    else if(arr[i].compareTo(0) == 7)\n    {\n      arr[i]\
    \ = \"Seven\";\n    }\n    else if(arr[i].compareTo(0) == 8)\n    {\n      arr[i]\
    \ = \"Eight\";\n    }\n    else if(arr[i].compareTo(0) == 9)\n    {\n      arr[i]\
    \ = \"Nine\";\n    }\n  }\n  \n  arr.reverse();\n  \n  for(int i = 0; i < arr.length;\
    \ ++i)\n  {\n    if(arr[i].compareTo(0) == 0)\n    {\n      continue;\n    }\n\
    \    else if(arr[i].compareTo(0) == 1)\n    {\n      arr[i] = \"One\";\n    }\n\
    \    else if(arr[i].compareTo(0) == 2)\n    {\n      arr[i] = \"Two\";\n    }\n\
    \    else if(arr[i].compareTo(0) == 3)\n    {\n      arr[i] = \"Three\";\n   \
    \ }\n    else if(arr[i].compareTo(0) == 4)\n    {\n      arr[i] = \"Four\";\n\
    \    }\n    else if(arr[i].compareTo(0) == 5)\n    {\n      arr[i] = \"Five\"\
    ;\n    }\n    else if(arr[i].compareTo(0) == 6)\n    {\n      arr[i] = \"Six\"\
    ;\n    }\n    else if(arr[i].compareTo(0) == 7)\n    {\n      arr[i] = \"Seven\"\
    ;\n    }\n    else if(arr[i].compareTo(0) == 8)\n    {\n      arr[i] = \"Eight\"\
    ;\n    }\n    else if(arr[i].compareTo(0) == 9)\n    {\n      arr[i] = \"Nine\"\
    ;\n    }\n  }\n  \n  for(int i = 0; i < arr.length; ++i)\n  {\n    if(arr[i].compareTo(\"\
    One\") == 0)\n    {\n      arr[i] = 0;\n    }\n\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpic28v1jl.d(125): Error: found `unittest` instead of statement

    /tmp/tmpic28v1jl.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic28v1jl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string names[9] = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"};\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgsw8ja1a.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `string[9] names`

    /tmp/tmpgsw8ja1a.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsw8ja1a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    \n    long one = 1, two = 2, three = 3, four = 4, five = 5, six = 6,\
    \ seven = 7, eight = 8, nine = 9;\n    \n    long min = 1;\n    long max = 90;\n\
    \    \n    int counter = 1;\n    \n    int[] answer = new int[arr.length];\n \
    \   \n    bool isOne = true;\n    \n    for (int i = 0; i < arr.length; i++)\n\
    \    {\n        if (counter == 1)\n        {\n            if (arr[i] == 1)\n \
    \           {\n                isOne = true;\n            }\n        }\n     \
    \   else\n        {\n            if (arr[i] > max)\n            {\n          \
    \      isOne = false;\n            }\n            else if (arr[i] < min)\n   \
    \         {\n                isOne = true;\n            }\n            \n    \
    \    }\n        \n        if (isOne)\n        {\n            answer[i] = one;\n\
    \        }\n        else\n        {\n            answer[i] = arr[counter];\n \
    \           counter++;\n        }\n    }\n    \n    \n    \n    \n    for (int\
    \ i = 0; i < arr.length; i++)\n    {\n        if (answer[i] > 0)\n        {\n\
    \            answer[i] = \"One\";\n        }\n        else if (answer[i] < 0)\n\
    \        {\n            answer[i] = \"Two\";\n        }\n        else if (answer[i]\
    \ == 0)\n        {\n            answer[i] = \"Zero\";\n        }\n        else\
    \ if (answer[i] == 1)\n        {\n            answer[i] = \"One\";\n        }\n\
    \        else if (answer[i] == 2)\n        {\n            answer[i] = \"Two\"\
    ;\n        }\n        else if (answer[i] == 3)\n        {\n            answer[i]\
    \ = \"Three\";\n        }\n        else if (answer[i] == 4)\n        {\n     \
    \       answer[i] = \"Four\";\n        }\n        else if (answer[i] == 5)\n \
    \       {\n            answer[i] = \"Five\";\n        }\n        else if (answer[i]\
    \ == 6)\n        {\n            answer[i] = \"Six\";\n        }\n        else\
    \ if (answer[i] == 7)\n        {\n            answer[i] = \"Seven\";\n       \
    \ }\n        else if (answer[i] == 8)\n        {\n            answer[i] = \"Eight\"\
    ;\n        }\n        else if (answer[i] == 9)\n        {\n            answer[i]\
    \ = \"Nine\";\n        }\n    }\n    \n    return answer;\n}\n/*\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy680wb_q.d(127): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy680wb_q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result = new string[arr.Length];\n    var min = 0, max = arr.Length - 1;\n\
    \    while(min < max) \n    {\n        while(min++ < max && arr[min] < 10L);\n\
    \        while(max-- > min && arr[max] > 10L);\n        if(min < max) \n     \
    \   {\n            result[min] = names[arr[min]];\n            result[max] = names[arr[max]];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 tags=c# |>\n\
    <| a dscore=2 |>\nThis would be my first attempt at refactoring it.\n<code>\n\
    class Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(string.Join(\"\
    \ \", by_length(new long[] { 1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L }).Select(x\
    \ => names[x])));\n        Console.ReadLine();\n    }\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkuai2pj.d(28): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmpkkuai2pj.d(29): Error: use `{ }` for an empty statement, not `;`

    /tmp/tmpkkuai2pj.d(38): Error: declaration expected, not `<`

    /tmp/tmpkkuai2pj.d(48): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpkkuai2pj.d(48): Error: no identifier for declarator `Console.ReadLine()`

    /tmp/tmpkkuai2pj.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkuai2pj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] arr1 = arr.Where((a) => a >= 1 && a <= 9).ToArray();\n    arr1.Sort();\n\
    \    arr1 = arr1.Reverse();\n    var arr2 = new List<string>();\n    arr2 = arr1.Select(x\
    \ => $\"One{x}\").ToList();\n    arr2 = arr2.Concat(new List<string>() { \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" }).ToList();\n\
    \    return arr2;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere is an\
    \ answer using only Linq\n<code>\nstatic string []namesList = new string[]{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\nstatic string [] numbers = new string[] { \"2\", \"1\", \"1\", \"\
    4\", \"5\", \"8\", \"2\", \"3\" };\nstatic void Main(string[] args)\n{\n    List<long>\
    \ numbersList = numbers.Select(a => Convert.ToInt64(a)).ToList();\n    List<long>\
    \ names = new List<long>(namesList);\n    List<long> uniqueNames = names.Distinct();\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvar_6vyr.d(27): Error: semicolon expected, not `>`

    /tmp/tmpvar_6vyr.d(27): Error: found `>` instead of statement

    /tmp/tmpvar_6vyr.d(28): Error: `$` is valid only inside [] of index or slice

    /tmp/tmpvar_6vyr.d(28): Error: found `"One{x}"` when expecting `,`

    /tmp/tmpvar_6vyr.d(29): Error: found `>` when expecting `,`

    /tmp/tmpvar_6vyr.d(29): Error: found `}` when expecting `;` following statement

    /tmp/tmpvar_6vyr.d(29): Error: found `)` instead of statement

    /tmp/tmpvar_6vyr.d(32): Error: expression expected, not `/`

    /tmp/tmpvar_6vyr.d(32): Error: found `code` when expecting `,`

    /tmp/tmpvar_6vyr.d(32): Error: expression expected, not `>`

    /tmp/tmpvar_6vyr.d(33): Error: expression expected, not `|`

    /tmp/tmpvar_6vyr.d(33): Error: found `dscore` when expecting `,`

    /tmp/tmpvar_6vyr.d(33): Error: expression expected, not `=`

    /tmp/tmpvar_6vyr.d(33): Error: found `0` when expecting `,`

    /tmp/tmpvar_6vyr.d(33): Error: expression expected, not `|`

    /tmp/tmpvar_6vyr.d(34): Error: expression expected, not `<`

    /tmp/tmpv'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    \n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        int value = arr[i];\n        int length = getStringLength(to_string(value,\
    \ 2));\n        result[i] = getString(value, length);\n    }\n    \n    return\
    \ result.reverse();\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis does not appear\
    \ to be what the OP was asking for. He wants the *names* of the integers. Your\
    \ code produces strings instead.\n<|/ c |>\n<| a dscore=2 |>\nA simple solution\
    \ (no recursion, no loops, no libraries required) is to simply convert the integer\
    \ to a string and then sort it:\n<code>\npublic String[] getNumberStrings(int[]\
    \ numbers) {\n    List<String> strings = new ArrayList<String>();\n    for(int\
    \ i : numbers) {\n        strings.add(Integer.toString(i));\n    }\n    Collections.sort(strings);\n\
    \    String[] result = new String[numbers.size()];\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        result[i] = strings.get(i);\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=c#,.net,sorting,arrays |>\n<| a dscore=2 |>\nI modified the\
    \ code of Amit Chakraborty's answer:\n<code>\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q1k_13h.d(35): Error: declaration expected, not `<`

    /tmp/tmp6q1k_13h.d(45): Error: declaration expected, not `for`

    /tmp/tmp6q1k_13h.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q1k_13h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr[0] == 0)\n    return \"\";\n  \n  Arrays.sort(arr);\n  \n  string[] result\
    \ = new string[arr.length];\n  int index = 0;\n  for (long i : arr)\n  {\n   \
    \ result[index] = name((int)i).c_str();\n    index++;\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr3su62t2.d(31): Error: semicolon expected, not `:`

    /tmp/tmpr3su62t2.d(31): Error: expression expected, not `:`

    /tmp/tmpr3su62t2.d(31): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmpr3su62t2.d(33): Error: C style cast illegal, use `cast(int)i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr3su62t2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr == null || arr.Length < 2) \n        return arr;\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrggj_eq.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrggj_eq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int length = 0;\n    int index = 0;\n    List<long> list = new List<long>();\n\
    \    \n    // Sort the array\n    list.AddRange(arr.ToList());\n    list.Sort();\n\
    \    \n    foreach (long i in list)\n    {\n        if (i > 9)\n        {\n  \
    \          list.RemoveAt(index);\n            list.Insert(index, i - 10);\n  \
    \      }\n        index++;\n    }\n    \n    // Reverse the array\n    ArrayReverse(list);\n\
    \    \n    // Replace each element in the array by its index from one...nine\n\
    \    int maxIndex = 9;\n    foreach (long i in list)\n    {\n        long num\
    \ = i;\n        while (num != 0)\n        {\n            num /= 10;\n        \
    \    maxIndex--;\n        }\n        string str = OneToNine(maxIndex + 1).ToString();\n\
    \        arr[index - 10] = str[i - 10];\n    }\n    return arr.ToArray();\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95sm0fqy.d(26): Error: found `>` when expecting `.` following long

    /tmp/tmp95sm0fqy.d(26): Error: found `>` when expecting `.` following long

    /tmp/tmp95sm0fqy.d(26): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp95sm0fqy.d(26): Error: found `)` when expecting `;` following statement

    /tmp/tmp95sm0fqy.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp95sm0fqy.d(32): Error: found `in` when expecting `;`

    /tmp/tmp95sm0fqy.d(47): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95sm0fqy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if(arr.length\
    \ == 0)\n    return arr;\n  var arr2 = new long[arr.length];\n  \n  for(int i\
    \ = 0; i < arr.length; i++)\n  {\n    if(i == 0)\n    {\n      arr2[i] = arr[i];\n\
    \    }\n    else\n    {\n      int len2 = arr[i] % 10;\n      arr2[i] = len2 +\
    \ arr[i] / 10;\n    }\n  }\n  \n  return arr2.reverse().map((i) -> names.get(Integer.valueOf(i))).toArray();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwswqi9_s.d(41): Error: expression expected, not `>`

    /tmp/tmpwswqi9_s.d(41): Error: found `names` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwswqi9_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int i, j, k;\n    \n    string[] res = new string[arr.Length];\n    \n    for\
    \ (i = 0; i < arr.Length; i++) {\n        if (arr[i] >= 0 && arr[i] <= 9) {\n\
    \            j = i - 1;\n            k = i + 1;\n            while (true) {\n\
    \                if (arr[j] > arr[i]) {\n                    res[i] = \"Nine\"\
    ;\n                    j--;\n                    break;\n                }\n \
    \               else if (arr[j] == arr[i]) {\n                    res[i] = \"\
    One\";\n                    j++;\n                }\n                else {\n\
    \                    res[i] = \"Two\";\n                    k++;\n           \
    \     }\n            }\n        }\n    }\n    \n    if (res.Length == 0) {\n \
    \       return res;\n    }\n    else {\n        System.Array.Sort(res, 0, res.Length);\n\
    \        \n        string prev = \"\";\n        \n        for (i = res.Length\
    \ - 1; i >= 0; i--) {\n            if (res[i] == prev) {\n                res[i]\
    \ = \"One\";\n                prev = res[i];\n            }\n            else\
    \ if (res[i] == \"Nine\") {\n                res[i] = \"One\";\n             \
    \   prev = res[i];\n            }\n            else if (res[i] == \"Two\") {\n\
    \                res[i] = \"Two\";\n                prev = res[i];\n         \
    \   }\n            else if (res[i] == \"Three\") {\n                res[i] = \"\
    Three\";\n                prev = res[i];\n            }\n            else if (res[i]\
    \ == \"Four\") {\n                res[i] = \"Four\";\n                prev = res[i];\n\
    \            }\n            else if (res[i] == \"Five\") {\n                res[i]\
    \ = \"Five\";\n                prev = res[i];\n            }\n            else\
    \ if (res[i] == \"Six\") {\n                res[i] = \"Six\";\n              \
    \  prev = res[i];\n            }\n            else if (res[i] == \"Seven\") {\n\
    \                res[i] = \"Seven\";\n                prev = res[i];\n       \
    \     }\n            else if (res[i] == \"Eight\") {\n                res[i] =\
    \ \"Eight\";\n                prev = res[i];\n            }\n            else\
    \ if (res[i] == \"Nine\") {\n                res[i] = \"Nine\";\n            \
    \    prev = res[i];\n            }\n        }\n        \n        return res;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question was specifically\
    \ asked to reverse the numbers, not their order. I would say that this code is\
    \ pretty similar to my solution, although it doesn't work for negative numbers.\
    \ Also, it doesn't work on the empty array.\n<|/ c |>\n<| a dscore=1 |>\nI wrote\
    \ a little function for you:\n<code>\nList<int> ReverseList(List<int> list)\n\
    {\n    List<int> reverseList = new List<int>();\n    int i = 0;\n    \n    while\
    \ (i < \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4fi788_h.d(104): Error: declaration expected, not `<`

    /tmp/tmp4fi788_h.d(107): Error: unterminated character constant

    /tmp/tmp4fi788_h.d(107): Error: unterminated character constant

    /tmp/tmp4fi788_h.d(117): Error: declaration expected, not `while`

    /tmp/tmp4fi788_h.d(122): Error: declaration expected, not `assert`

    /tmp/tmp4fi788_h.d(123): Error: declaration expected, not `assert`

    /tmp/tmp4fi788_h.d(124): Error: declaration expected, not `assert`

    /tmp/tmp4fi788_h.d(125): Error: declaration expected, not `assert`

    /tmp/tmp4fi788_h.d(126): Error: declaration expected, not `assert`

    /tmp/tmp4fi788_h.d(127): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fi788_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] arr2 = new int[arr.length];\n    int count = 0;\n    for(int i = 0; i\
    \ != arr.length; ++i)\n    {\n        if(arr[i] == 1)\n        {\n           \
    \ arr2[count] = 2;\n            ++count;\n        }\n        else if(arr[i] ==\
    \ 2)\n        {\n            arr2[count] = 3;\n            ++count;\n        }\n\
    \        else if(arr[i] == 3)\n        {\n            arr2[count] = 4;\n     \
    \       ++count;\n        }\n        else if(arr[i] == 4)\n        {\n       \
    \     arr2[count] = 5;\n            ++count;\n        }\n        else if(arr[i]\
    \ == 5)\n        {\n            arr2[count] = 6;\n            ++count;\n     \
    \   }\n        else if(arr[i] == 6)\n        {\n            arr2[count] = 7;\n\
    \            ++count;\n        }\n        else if(arr[i] == 7)\n        {\n  \
    \          arr2[count] = 8;\n            ++count;\n        }\n        else if(arr[i]\
    \ == 8)\n        {\n            arr2[count] = 9;\n            ++count;\n     \
    \   }\n        else if(arr[i] == 9)\n        {\n            arr2[count] = 10;\n\
    \            ++count;\n        }\n        else\n        {\n            arr2[count]\
    \ = arr[i];\n            ++count;\n        }\n    }\n    Arrays.sort(arr2);\n\
    \    \n    string[] result = new string[count];\n    int j = 0;\n    for(int i\
    \ = 0; i != arr2.length; ++i)\n    {\n        result[j] = byName[(int)arr2[i]];\n\
    \        ++j;\n    }\n    \n    for(int i = 0; i != arr.length; ++i)\n    {\n\
    \        if(arr[i] == -1)\n        {\n            arr[i] = -1;\n            arr2[count]\
    \ = -1;\n            ++count;\n        }\n    }\n    \n    Arrays.sort(arr);\n\
    \    \n    return Arrays.copyOf(result, count);\n}\n/*\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpruskf08v.d(85): Error: C style cast illegal, use `cast(int)arr2[i]`

    /tmp/tmpruskf08v.d(103): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruskf08v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] count = new int[10];\n    for (int i = 0; i < arr.length; i++) \n   \
    \ {\n        count[arr[i] % 10]++;\n    }\n    \n    string ans = \"\";\n    \n\
    \    for (int i = 0; i < count.length; i++) \n    {\n        ans += arr[i] + \"\
    -\" + count[i] + \" \";\n    }\n    \n    if (count.length != 0)\n    {\n    \
    \    int ones = count[0];\n        int tens = count[0];\n        for (int i =\
    \ 1; i < count.length; i++) \n        {\n            if (count[i] != 0) \n   \
    \         {\n                if (count[i] == 1 && ones < tens) \n            \
    \    {\n                    ans = \"One \" + ans;\n                    ones++;\n\
    \                } \n                else if (count[i] == 10 && tens < ones) \n\
    \                {\n                    ans = \"Ten \" + ans;\n              \
    \      tens++;\n                } \n                else if (count[i] > 10) \n\
    \                {\n                    ans = \"Hundred \" + ans;\n          \
    \      }\n            }\n        }\n    }\n    \n    return ans.Split(\" \", StringSplitOptions.RemoveEmptyEntries);\n\
    }\n</code>\n<|/ a tags=arrays,c#,algorithm |>\n<| c |>\nHmm, this is nice but\
    \ won't work when you have 0s or 1s or even negative numbers like `by_length([1L,\
    \ 0L, -1L, 0L, 0L, 0L, 0L, -1L, 0L])` => [\"One\"]\n<|/ c |>\n<| a tags=arrays,c#,algorithm\
    \ dscore=0 |>\nI used Linq to group numbers first by their length then by the\
    \ number. I then used another Linq to loop over the groups and get the max number\
    \ of characters in each group then used string.Format to format a string as you\
    \ require. \nThe Linq GroupBy and the string.Format is quite performant and easy\
    \ to read, once you get your head round how it works. \nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkx385365.d(65): Error: declaration expected, not `<`

    /tmp/tmpkx385365.d(68): Error: unterminated character constant

    /tmp/tmpkx385365.d(77): Error: declaration expected, not `assert`

    /tmp/tmpkx385365.d(78): Error: declaration expected, not `assert`

    /tmp/tmpkx385365.d(79): Error: declaration expected, not `assert`

    /tmp/tmpkx385365.d(80): Error: declaration expected, not `assert`

    /tmp/tmpkx385365.d(81): Error: declaration expected, not `assert`

    /tmp/tmpkx385365.d(82): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkx385365.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int min = 1;\n    int max = 9; \n    string[] res = new string[arr.Length];\n\
    \    \n    foreach(int i in arr) {\n        int a = i - min;\n        if (a <\
    \ 0 || a > max) { continue; }\n        int n = std.math.factorial(a); \n     \
    \   if (n != 1) { \n            throw new Exception(\"Not all numbers in array\
    \ have known length\");\n        }\n        int b = min + a; \n        res[arr.IndexOf(i)]\
    \ = by_length_helper(b); \n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuw338nc6.d(28): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuw338nc6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] sortedArray = new int[arr.length];\n    bool done = false;\n    string\
    \ result = \"\";\n    \n    for (int i = 0; i < arr.length; i++)\n    {\n    \
    \    if (arr[i] <= 9 && arr[i] >= 1) // only numbers\n        {\n            sortedArray[i]\
    \ = arr[i] - 1;\n            done = false;\n        }\n        else if (arr[i]\
    \ == arr[0]) // if the first element is the largest number then set it as is\n\
    \        {\n            sortedArray[i] = 0;\n            done = false;\n     \
    \   }\n        else if (arr[i] == arr[arr.length - 1]) // if the last element\
    \ is the smallest number then set it as is\n        {\n            sortedArray[i]\
    \ = arr.length - 1;\n            done = false;\n        }\n        else\n    \
    \    {\n            done = true;\n        }\n    }\n    \n    for (int i = 0;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] <= 9 && arr[i] >= 1) // only\
    \ numbers\n        {\n            if (sortedArray[i] <= 9)\n                result\
    \ += std.typecons.charArray[sortedArray[i]];\n            else\n             \
    \   result += std.typecons.charArray[(sortedArray[i] + 10) % 10];\n        }\n\
    \        else if (arr[i] == arr[0]) // if the first element is the largest number\
    \ then set it as is\n        {\n            result += std.typecons.charArray[i];\n\
    \        }\n        else if (arr[i] == arr[arr.length - 1]) // if the last element\
    \ is the smallest number then set it as is\n        {\n            result += std.typecons.charArray[i];\n\
    \        }\n    }\n    \n    if (done == true)\n        return result;\n    else\n\
    \        return new string[] {result};\n}\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj90r2l03.d(73): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpj90r2l03.d(73): Error: found `}` when expecting `;` following statement

    /tmp/tmpj90r2l03.d(73): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj90r2l03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.Length];\n    int[] count = new int[10];\n\
    \    \n    for(int i = 0; i < arr.Length; i++) {\n        count[arr[i]]++;\n \
    \   }\n    \n    for (int i = 1; i <= 9; i++) {\n        result[count.Length -\
    \ i] = One.Substring(0, count.Length - i) + i;\n    }\n    \n    Array.Sort(count,\
    \ arr);\n    \n    for (int i = 0; i < arr.Length; i++) {\n        result[count.Length\
    \ - arr[i]] = One.Substring(0, count.Length - arr[i]) + i;\n    }\n    \n    for\
    \ (int i = 0; i < result.Length; i++) {\n        if (result[i].Length < 1 || result[i].Length\
    \ > 9) {\n            throw new Exception(\"invalid input\");\n        }\n   \
    \ }\n    \n    return result;\n}\n/*\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeexrw3sz.d(49): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeexrw3sz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length==0) return new string[0];\n    if (arr.length==1) return new\
    \ string[]{std.array.toCString(int.Parse(arr[0]))};\n    int min = arr[0];\n \
    \   int max = arr[arr.length-1];\n    bool up=true;\n    int[] sorted_arr = new\
    \ int[arr.length];\n    for (int i=0; i<arr.length; i++)\n    {\n        if (arr[i]>max)\n\
    \        {\n            up=false;\n            break;\n        }\n        if (arr[i]<min)\
    \ break;\n        sorted_arr[i] = arr[i];\n    }\n    if (up)\n    {\n       \
    \ std.array.reverse(sorted_arr);\n    }\n    string names = new string[arr.length];\n\
    \    for (int i=0; i<arr.length; i++)\n    {\n        if (arr[i]>=10 && arr[i]<=19)\
    \ names[i] = \"Ten\";\n        else if (arr[i]>=20 && arr[i]<=99) names[i] = \"\
    Twenty\";\n        else if (arr[i]>=100 && arr[i]<=999) names[i] = \"Hundred\"\
    ;\n        else if (arr[i]>=1000 && arr[i]<=9999) names[i] = \"Thousand\";\n \
    \       else names[i] = \"One\";\n    }\n    return names;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=arrays,string,java |>\nIn Java 8 you can just do it this\
    \ way:\n<code>\nArrays.stream(new String[]{\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"})\n                .map(s\
    \ -> s.replaceAll(\"(?<=\\\\d)(?=[A-Z])\", \"$0\"))\n                .sorted()\n\
    \                .collect(Collectors.toList())\n                .toArray(new String[0]);\n\
    </code>\nIn Java 7 you have to do it this way:\n<code>\nString[] s = new String[]{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"};\nArrays.sort(s);\nCollections.sort(Arrays.asList(s));\nString[] arr\
    \ = new String[s.length];\nArrays.fill(arr, s);\nSystem.out.println(Arrays.toString(arr));\n\
    </code>\nThe output:\n<code>\n[One, Two, Three, Four, Five, Six, Seven, Eight,\
    \ Nine]\n</code>\n<|/ a dscore=1 |>\n<| a |>\nIn Java 8 you can do this:\n<code>\n\
    List<String> strings = Arrays.asList(\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n);\nstrings.sort(Comparator.comparingInt(String::length));\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8bxqvwqr.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp8bxqvwqr.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmp8bxqvwqr.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp8bxqvwqr.d(55): Error: declaration expected, not `<`

    /tmp/tmp8bxqvwqr.d(65): Error: declaration expected, not `<`

    /tmp/tmp8bxqvwqr.d(69): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp8bxqvwqr.d(69): Error: no identifier for declarator `Arrays.sort(s)`

    /tmp/tmp8bxqvwqr.d(70): Error: unexpected `(` in declarator

    /tmp/tmp8bxqvwqr.d(70): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp8bxqvwqr.d(70): Error: no identifier for declarator `Collections.sort(Arrays.asList(s))`

    /tmp/tmp8bxqvwqr.d(72): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp8bxqvwqr.d(72): Error: no identifier for decla'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr.sort((int a, int b) =>\n        {\n            int c = a - b;\n       \
    \     return c > 0 ? c : -c;\n        });\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbsthwbg.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbsthwbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  bool isSorted = true;\n    int i, j, k = arr.length;\n    int[] a = new int[arr.length];\n\
    \    for (i=0; i<k; ++i)\n        a[arr[i]-1] = i;\n    for (i=1; i<k; ++i)\n\
    \    {\n        for (j=i; (j>0) && (a[j-1]>a[j]); --j)\n        {\n          \
    \  isSorted = false;\n            int tmp = a[j];\n            a[j] = a[j-1];\n\
    \            a[j-1] = tmp;\n        }\n    }\n    \n    if (k > 1)\n    {\n  \
    \      arr = new int[k];\n        for (i=0; i<k; ++i)\n            arr[arr[i]-1]\
    \ = a[i];\n    }\n    \n    if (isSorted)\n    {\n        arr = reverseIntArray(a);\n\
    \        arr = replaceIntByNameArray(arr, \"One\", \"1\");\n        arr = replaceIntByNameArray(arr,\
    \ \"Two\", \"2\");\n        arr = replaceIntByNameArray(arr, \"Three\", \"3\"\
    );\n        arr = replaceIntByNameArray(arr, \"Four\", \"4\");\n        arr =\
    \ replaceIntByNameArray(arr, \"Five\", \"5\");\n        arr = replaceIntByNameArray(arr,\
    \ \"Six\", \"6\");\n        arr = replaceIntByNameArray(arr, \"Seven\", \"7\"\
    );\n        arr = replaceIntByNameArray(arr, \"Eight\", \"8\");\n        arr =\
    \ replaceIntByNameArray(arr, \"Nine\", \"9\");\n    }\n    return arr;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp46tb7g9n.d(25): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp46tb7g9n.d(42): Error: cannot implicitly convert expression `new int[](cast(ulong)k)`
    of type `int[]` to `long[]`

    /tmp/tmp46tb7g9n.d(49): Error: undefined identifier `reverseIntArray`

    /tmp/tmp46tb7g9n.d(50): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(51): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(52): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(53): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(54): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(55): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(56): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(57): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(58): Error: undefined identifier `replaceIntByNameArray`

    /tmp/tmp46tb7g9n.d(60): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp46tb7g9n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr[0] = 1;\n    arr[1] = 2;\n    arr[2] = 3;\n    arr[3] = 4;\n    arr[4]\
    \ = 5;\n    arr[5] = 6;\n    arr[6] = 7;\n    arr[7] = 8;\n    arr[8] = 9;\n \
    \   arr[9] = 10;\n    arr[10] = 11;\n    arr[11] = 12;\n    arr[12] = 13;\n  \
    \  arr[13] = 14;\n    arr[14] = 15;\n    arr[15] = 16;\n    arr[16] = 17;\n  \
    \  arr[17] = 18;\n    arr[18] = 19;\n    arr[19] = 20;\n    arr[20] = 21;\n  \
    \  arr[21] = 26;\n    arr[22] = 27;\n    arr[23] = 28;\n    arr[24] = 29;\n  \
    \  arr[25] = 30;\n    arr[26] = 31;\n    arr[27] = 32;\n    arr[28] = 33;\n  \
    \  arr[29] = 34;\n    arr[30] = 35;\n    arr[31] = 36;\n    arr[32] = 37;\n  \
    \  arr[33] = 38;\n    arr[34] = 39;\n    arr[35] = 40;\n    arr[36] = 41;\n  \
    \  arr[37] = 42;\n    arr[38] = 43;\n    arr[39] = 44;\n    arr[40] = 45;\n  \
    \  arr[41] = 50;\n    arr[42] = 51;\n    arr[43] = 52;\n    arr[44] = 53;\n  \
    \  arr[45] = 54;\n    arr[46] = 55;\n    arr[47] = 56;\n    arr[48] = 57;\n  \
    \  arr[49] = 58;\n    arr[50] = 59;\n    arr[51] = 60;\n    arr[52] = 61;\n  \
    \  arr[53] = 62;\n    arr[54] = 63;\n    arr[55] = 64;\n    arr[56] = 65;\n  \
    \  arr[57] = 66;\n    arr[58] = 67;\n    arr[59] = 68;\n    arr[60] = 69;\n  \
    \  arr[61] = 70;\n    arr[62] = 71;\n    arr[63] = 72;\n    arr[64] = 73;\n  \
    \  arr[65] = 74;\n    arr[66] = 75;\n    arr[67] = 76;\n    arr[68] = 77;\n  \
    \  \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg74kc3ar.d(94): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg74kc3ar.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int maxLen = findMaxLength(arr);\n    \n    if (maxLen == 0)\n        return\
    \ [];\n    \n    int len = maxLen + 1;\n    \n    int[] count = new int[len];\n\
    \    \n    for (int i = 0; i < arr.length; i++)\n    {\n        count[arr[i]]++;\n\
    \    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23l6rc4n.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23l6rc4n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int j = 0;\n    int count = 0;\n    string[] result = new string[arr.Length];\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4aar0zr3.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4aar0zr3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.isEmpty()) return arr;\n    \n    string[] result = new string[arr.length];\n\
    \    int n = arr.length-1;\n    for(int i = 0; i <= n; i+= 2)\n    {\n       \
    \ result[i / 2] = \"One\";\n        result[i / 2+1] = \"Two\";\n    }\n    \n\
    \    for(int i = n; i>= 0; i-= 2)\n    {\n        result[i / 2] = \"One\";\n \
    \       result[i / 2+1] = \"Two\";\n    }\n    \n    for(int i = 0; i <= n; i+=\
    \ 2)\n    {\n        result[i / 2] = \"Two\";\n        result[i / 2+1] = \"Three\"\
    ;\n    }\n    \n    for(int i = n; i>= 0; i-= 2)\n    {\n        result[i / 2]\
    \ = \"Two\";\n        result[i / 2+1] = \"Three\";\n    }\n    \n    for(int i\
    \ = 0; i <= n; i+= 2)\n    {\n        result[i / 2] = \"Three\";\n        result[i\
    \ / 2+1] = \"Four\";\n    }\n    \n    for(int i = n; i>= 0; i-= 2)\n    {\n \
    \       result[i / 2] = \"Three\";\n        result[i / 2+1] = \"Four\";\n    }\n\
    \    \n    for(int i = 0; i <= n; i+= 2)\n    {\n        result[i / 2] = \"Four\"\
    ;\n        result[i / 2+1] = \"Five\";\n    }\n    \n    for(int i = n; i>= 0;\
    \ i-= 2)\n    {\n        result[i / 2] = \"Four\";\n        result[i / 2+1] =\
    \ \"Five\";\n    }\n    \n    for(int i = 0; i <= n; i+= 2)\n    {\n        result[i\
    \ / 2] = \"Five\";\n        result[i / 2+1] = \"Six\";\n    }\n    \n    for(int\
    \ i = n; i>= 0; i-= 2)\n    {\n        result[i / 2] = \"Five\";\n        result[i\
    \ / 2+1] = \"Six\";\n    }\n    \n    for(int i = 0; i <= n; i+= 2)\n    {\n \
    \       result[i / 2] = \"Six\";\n        result[i / 2+1] = \"Seven\";\n    }\n\
    \    \n    for(int i = n; i>= 0; i-= 2)\n    {\n        result[i / 2] = \"Six\"\
    ;\n        result[i / 2+1] = \"Seven\";\n    }\n    \n    for(int i = 0; i <=\
    \ n; i+= 2)\n    {\n        result[i / 2] = \"Seven\";\n        result[i / 2+1]\
    \ = \"Eight\";\n    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp06n1gpql.d(105): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06n1gpql.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    long cur = 0;\n    int cur_index\
    \ = 0;\n    \n    while (cur < arr.length) \n    {\n        int index = cur;\n\
    \        int len = arr[cur];\n        \n        std.sort(index+1, arr.length-1);\n\
    \        \n        for (int i = index; i < arr.length; i++) \n        {\n    \
    \        int tmp = arr[i];\n            arr[i] = arr[cur];\n            arr[cur]\
    \ = tmp;\n            cur++;\n        }\n        \n        std.reverse(index,\
    \ arr.length-1);\n        \n        for (int i = 0; i < len; i++)\n          \
    \  result[cur_index++] = strings[(int)arr[i]];\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzvec_u96.d(46): Error: C style cast illegal, use `cast(int)arr[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzvec_u96.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    string[] result = new string[arr.Length];\n\t\n\tint[] map = new int[arr.Length];\n\
    \t\n\tfor(int i = 0; i < arr.Length; i++)\n\t{\n\t\tmap[i] = i;\n\t\t\n\t\tif(arr[i]\
    \ < 1)\n\t\t\tcontinue;\n\t\t\n\t\tif(arr[i] > 9)\n\t\t\tcontinue;\n\t\t\n\t\t\
    string digit = arr[i].ToString();\n\t\t\n\t\tif(digit.Length == 0)\n\t\t\tcontinue;\n\
    \t\t\n\t\tresult[map[i]] = digit;\n\t}\n\t\n\tfor(int i = 0; i < result.Length;\
    \ i++)\n\t{\n\t\tif(result[i].Length == 0)\n\t\t\tresult[i] = \"One\";\n\t\telse\
    \ if(result[i].Length == 1)\n\t\t\tresult[i] = \"Two\";\n\t\telse if(result[i].Length\
    \ == 2)\n\t\t\tresult[i] = \"Three\";\n\t\telse if(result[i].Length == 3)\n\t\t\
    \tresult[i] = \"Four\";\n\t\telse if(result[i].Length == 4)\n\t\t\tresult[i] =\
    \ \"Five\";\n\t\telse if(result[i].Length == 5)\n\t\t\tresult[i] = \"Six\";\n\t\
    \telse if(result[i].Length == 6)\n\t\t\tresult[i] = \"Seven\";\n\t\telse if(result[i].Length\
    \ == 7)\n\t\t\tresult[i] = \"Eight\";\n\t\telse if(result[i].Length == 8)\n\t\t\
    \tresult[i] = \"Nine\";\n\t}\n\t\n\treturn result;\n}\n</code>\n<|/ a tags=c#,string\
    \ |>\n<| a dscore=3 |>\nTry this:\n<code>\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxsj6eya7.d(70): Error: declaration expected, not `<`

    /tmp/tmpxsj6eya7.d(79): Error: declaration expected, not `assert`

    /tmp/tmpxsj6eya7.d(80): Error: declaration expected, not `assert`

    /tmp/tmpxsj6eya7.d(81): Error: declaration expected, not `assert`

    /tmp/tmpxsj6eya7.d(82): Error: declaration expected, not `assert`

    /tmp/tmpxsj6eya7.d(83): Error: declaration expected, not `assert`

    /tmp/tmpxsj6eya7.d(84): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsj6eya7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int i = 0;\n    long num = 0;\n    string[] result=new string[arr.length];\n\
    \    while (i < arr.length)\n    {\n        num = (long)arr[i] * 10 + (long)((int)arr[i]\
    \ + i - arr.length) * 100;\n        if (num > 9)\n            num = num - 10;\n\
    \        result[i] = string((int)num) + \"One\";\n        i = i + 1;\n    }\n\
    \    Arrays.sort(result);\n    Arrays.reverse(result);\n    for (int j = 0; j\
    \ < result.length; j++)\n    {\n        int k = j;\n        while (k > 0)\n  \
    \      {\n            if (result[k] == \"One\")\n            {\n             \
    \   result[k] = \"One\";\n                break;\n            }\n            k\
    \ = k - 1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,arrays,string,java\
    \ dscore=0 |>\n<| c |>\nThat is very good coding but i cannot use Arrays and Arrays\n\
    <|/ c |>\n<| c |>\nYou don't need Arrays.sort and Arrays.reverse.  Just loop through\
    \ the array and swap each index with a corresponding index from your array with\
    \ the number that corresponds to that index.  Then simply put your array back\
    \ together in the correct order.  I believe this would solve your problem...\n\
    <|/ c |>\n<| c |>\nIt worked fine thank you very much, I have used a similar code\
    \ for the string before but i never thought of using the long int for it.\n<|/\
    \ c |>\n<| a dscore=0 |>\nI think that the best way to solve this problem is using\
    \ HashMaps. First of all you must create a map which will map the numbers to their\
    \ names. Then you should create another map which will map the numbers to the\
    \ numbers as they are. I think this is the best solution because after you create\
    \ the map you will use it for other situations. So let's create a map:\n<code>\n\
    Map<Integer, String> mapNumberToName = new HashMap<>();\nmapNumberToName.put(1L,\
    \ \"One\");\nmapNumberToName.put(2L, \"Two\");\nmapNumberToName.put(3L, \"Three\"\
    );\nmapNumberToName.put(4L, \"Four\");\nmapNumberToName.put(5L, \"Five\");\nmapNumberToName.put(6L,\
    \ \"Six\");\nmapNumberToName.put(7L, \"Seven\");\nmapNumberToName.put(8L, \"Eight\"\
    );\nmapNumberToName.put(9L, \"Nine\");\n</code>\nIn the next step you should create\
    \ a new map which will contain the number as is but also the names which correspond\
    \ to the numbers:\n<code>\nMap<Integer, String> mapNumberToNumberAsIs\n</code>\n\
    And after \nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2hjt9rc0.d(29): Error: C style cast illegal, use `cast(long)arr[i]`

    /tmp/tmp2hjt9rc0.d(29): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmp2hjt9rc0.d(29): Error: C style cast illegal, use `cast(long)(cast(int)arr[i]
    + i - arr.length)`

    /tmp/tmp2hjt9rc0.d(32): Error: C style cast illegal, use `cast(int)num`

    /tmp/tmp2hjt9rc0.d(52): Error: declaration expected, not `<`

    /tmp/tmp2hjt9rc0.d(58): Error: unterminated character constant

    /tmp/tmp2hjt9rc0.d(64): Error: unterminated character constant

    /tmp/tmp2hjt9rc0.d(67): Error: unexpected `(` in declarator

    /tmp/tmp2hjt9rc0.d(67): Error: basic type expected, not `1L`

    /tmp/tmp2hjt9rc0.d(67): Error: found `1L` when expecting `)`

    /tmp/tmp2hjt9rc0.d(67): Error: no identifier for declarator `mapNumberToName.put(_error_)`

    /tmp/tmp2hjt9rc0.d(67): Error: semicolon expected following function declaration

    /tmp/tmp2hjt9rc0.d(67): Error: declaration expected, not `,`

    /tmp/tmp2hjt9rc0.d(68): Error: unexpected `(` in declarator

    /tmp/tmp2hjt9rc0.d(68): Error: basi'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr.length==0)\n    return arr;\n  \n  // sort the array by length\n  arr =\
    \ arr.sorted( (a,b) => b.length() - a.length() );\n  \n  // reverse the array\
    \ (from bigger to smaller)\n  arr.reverse();\n  \n  // for each of the digits,\
    \ replace by \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"\n  for (int i = 0; i < arr.length; ++i)\n    arr[i] = new\
    \ string(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'].subarray(i+1), '9',\
    \ i + 1);\n  \n  return arr;\n}\n</code>\n<|/ a dscore=1 tags=c++,algorithm,sorting\
    \ |>\n<| c |>\nWhat about `by_length({\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"})`?\n<|/ c |>\n<| a dscore=0 |>\n\
    I made this solution to sort the number array by the length of the digits.\n<code>\n\
    #include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <math.h>\n\
    #define M_PI 3.14159265358979323846\n#define MAX_SIZE 5\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnn1u14gz.d(39): Error: declaration expected, not `<`

    /tmp/tmpnn1u14gz.d(57): Error: declaration expected, not `assert`

    /tmp/tmpnn1u14gz.d(58): Error: declaration expected, not `assert`

    /tmp/tmpnn1u14gz.d(59): Error: declaration expected, not `assert`

    /tmp/tmpnn1u14gz.d(60): Error: declaration expected, not `assert`

    /tmp/tmpnn1u14gz.d(61): Error: declaration expected, not `assert`

    /tmp/tmpnn1u14gz.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnn1u14gz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr.length == 0)\n    return arr;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmccrbwi0.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmccrbwi0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var newArr = arr.sort();\n    return newArr.reverse().map((i) => int.ToString(i)).filter((i)\
    \ => i >= 1 && i <= 9).map((i) => \"One\" + i).concat(\"One\").asArray();\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9gt9edj.d(24): Error: undefined identifier `var`

    /tmp/tmpm9gt9edj.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9gt9edj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    if (len == 0) {\n        return string[];\n    }\n\
    \    \n    int max_len = arr.max;\n    \n    long[] arr = sort(arr);\n    \n \
    \   int i = 0;\n    while (i < len) {\n        if (arr[i] > 0 && arr[i] <= 9)\
    \ {\n            arr[arr.length - len - i] = arr[i];\n        }\n        i +=\
    \ 1;\n    }\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp207czle6.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp207czle6.d(26): Error: type `string[]` is not an expression

    /tmp/tmp207czle6.d(29): Error: no property `max` for type `long[]`

    /tmp/tmp207czle6.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp207czle6.d(31): Error: variable `arr` is shadowing variable `tmp207czle6.by_length.arr`

    /tmp/tmp207czle6.d(41): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp207czle6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] ret = new int[arr.length];\n    int i = 0;\n    for(i = 0; i < arr.length;\
    \ ++i) {\n        int index = std.random.Range.IntRange(1, 10);\n        ret[i]\
    \ = arr[index];\n    }\n    return std.array.toList(ret).OrderBy(x => x).Reverse().ToArray();\n\
    }\n</code>\n<|/ a dscore=0 tags=c#,arrays,sorting |>\n<| c |>\nSorry for the delay\
    \ in my response. The way I read the question, I thought the numbers weren't between\
    \ 1 and 9, so I used `10` in the `OrderBy` call. But I realize now that they aren't\
    \ necessarily between 1 and 9. I'll see if I can edit my answer.\n<|/ c |>\n<|\
    \ c |>\nI have added an implementation that accounts for numbers that are not\
    \ between 1 and 9\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/12152583)\n<|/ c |>\n<| c |>\n\
    This answers the question asked, I believe this is what was meant by a comment\
    \ on my answer. I can't believe I forgot that I had an implementation that doesn't\
    \ account for numbers that are not between 1 and 9. My bad.\n<|/ c |>\n<| c |>\n\
    No, this is definitely not a good answer to this question.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThis answer is based on the question asked by the OP, which is to sort an\
    \ array so that all numbers greater than 9 appear at the end of every array, but\
    \ smaller than 1 appear before every number less than 9. The OP did not ask to\
    \ sort the array in the descending order, which is what the other answers do.\n\
    <code>\npublic static string[] sortArray(int[] arr)\n{\n    string[] arr = new\
    \ string[arr.Length];\n    arr.Sort(new ArrayLessThanOrEqualsComparer());\n  \
    \  for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] < 9)\n    \
    \    {\n            arr[i] = \"1\" + arr[i];\n        }\n        else if (arr[i]\
    \ > 9)\n        {\n            arr[i] = \"9\" + arr[i];\n        }\n    }\n  \
    \  return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbce4c5f.d(32): Error: declaration expected, not `<`

    /tmp/tmpmbce4c5f.d(35): Error: unterminated character constant

    /tmp/tmpmbce4c5f.d(35): Error: unterminated character constant

    /tmp/tmpmbce4c5f.d(35): Error: unterminated character constant

    /tmp/tmpmbce4c5f.d(44): Error: unterminated character constant

    /tmp/tmpmbce4c5f.d(44): Error: unterminated character constant

    /tmp/tmpmbce4c5f.d(55): Error: unexpected `(` in declarator

    /tmp/tmpmbce4c5f.d(55): Error: basic type expected, not `new`

    /tmp/tmpmbce4c5f.d(55): Error: found `new` when expecting `)`

    /tmp/tmpmbce4c5f.d(55): Error: no identifier for declarator `arr.Sort(_error_)`

    /tmp/tmpmbce4c5f.d(55): Error: semicolon expected following function declaration

    /tmp/tmpmbce4c5f.d(55): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpmbce4c5f.d(55): Error: no identifier for declarator `ArrayLessThanOrEqualsComparer()`

    /tmp/tmpmbce4c5f.d(55): Error: semicolon expected following function declaration

    /tmp/t'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ret;\n    if (arr.length == 0)\n        return ret;\n    var min =\
    \ math.min(arr);\n    var max = math.max(arr);\n    var i = arr.length;\n    for\
    \ (; i > 0; --i) {\n        if (min > i)\n            break;\n        if (max\
    \ < i)\n            break;\n        if (arr[i] == min)\n            arr[i] = \"\
    One\";\n        else if (arr[i] == max)\n            arr[i] = \"Nine\";\n    \
    \    else\n            arr[i] = \"Two\";\n    }\n    ret.insert(0, min);\n   \
    \ ret.reverse();\n    return ret;\n}\n</code>\n<|/ a |>\n<| a tags=c,c++ |>\n\
    <code>\n#include <stdio.h>\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uxtl21r.d(46): Error: declaration expected, not `<`

    /tmp/tmp6uxtl21r.d(55): Error: declaration expected, not `assert`

    /tmp/tmp6uxtl21r.d(56): Error: declaration expected, not `assert`

    /tmp/tmp6uxtl21r.d(57): Error: declaration expected, not `assert`

    /tmp/tmp6uxtl21r.d(58): Error: declaration expected, not `assert`

    /tmp/tmp6uxtl21r.d(59): Error: declaration expected, not `assert`

    /tmp/tmp6uxtl21r.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uxtl21r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.Length];\n    for(int i = 0; i < arr.Length;\
    \ ++i)\n        result[i] = One[arr[i]];\n    Array.Sort(result);\n    for(int\
    \ i = 0; i < result.Length; ++i)\n        result[i] = Nine[result[i]];\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis looks nice, but I think\
    \ you got it backwards.  \"Zero\" should be the first digit, \"One\" the second\
    \ digit, \"Two\" the third digit, etc.\n<|/ c |>\n<| c |>\nMy apologies, I misunderstood\
    \ the order you wanted in the question.\n<|/ c |>\n<| c |>\nI guess you could\
    \ just reverse the string and use string.Insert to insert \"One\" after \"Zero\"\
    .  Or, you could use string.Insert to insert \"Zero\" after \"Zero\", and have\
    \ that return the \"reversed\" string.\n<|/ c |>\n<| c |>\nI agree, I was hoping\
    \ to avoid a whole lot of copying and pasting.\n<|/ c |>\n<| c |>\nIt looks like\
    \ you're going to have to do some copying and pasting here too.  But I like the\
    \ solution.\n<|/ c |>\n<| a tags=c#,sorting,algorithm |>\nThis should do the trick:\n\
    <code>\nvar data = new int[] { 2, 3, 4, 5 };\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfp78n2k.d(32): Error: declaration expected, not `<`

    /tmp/tmpgfp78n2k.d(47): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfp78n2k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8or3movl.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8or3movl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) {\n        return string[];\n    }\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6po0as_5.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6po0as_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ length = arr.Length;\n  if(length == 0) return new string[0];\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvx8rdvlo.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvx8rdvlo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr.length == 0)\n    return arr;\n  long min = arr[0], max = arr[0];\n  for\
    \ (int i = 1; i < arr.length; i++)\n  {\n    long current = arr[i];\n    if (current\
    \ < min)\n      min = current;\n    else if (current > max)\n      max = current;\n\
    \  }\n  arr = arr.clone();\n  for (int i = 0; i < arr.length; i++)\n    arr[i]\
    \ = (arr[i] == min) ? \"One\" : ((arr[i] == max) ? \"Nine\" : \"Six\");\n  return\
    \ arr;\n}\n\"\"\"\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ba_e2jl.d(40): Error: declaration expected, not `""`

    /tmp/tmp1ba_e2jl.d(49): Error: unterminated string constant starting at /tmp/tmp1ba_e2jl.d(49)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ba_e2jl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.Length == 0)\n        return new string[] { \"\" };\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbl516uuy.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpbl516uuy.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmpbl516uuy.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpbl516uuy.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbl516uuy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr.removeAll(0L);\n    arr.removeAll(-1L);\n    return arr.toList().sortWith((int\
    \ x, int y) -> x <= y ? -1 : x > y ? 1 : 0).map((long x) -> {\n        final int\
    \ digit = x % 10;\n        final String digitName = new Integer(digit).toString()\
    \ + \"Nine\";\n        return x % 10 == 0 ? digitName : digit;\n    }).toList().reverse().map((String\
    \ x) -> {\n        final int digit = Integer.parseInt(x);\n        return digit\
    \ == 0L ? null : Integer.toString(digit);\n    }).toArray();\n}\n</code>\nIt does\
    \ a similar thing but only works on positive numbers. I think it would be easy\
    \ to adapt if you need it for negative numbers.\n<|/ a tags=java,arrays |>\n<|\
    \ c |>\nI think it would be easier to adapt this code to work with, negative numbers,\
    \ if I could understand the code, but I am not very good at java. I will try to\
    \ understand it when I get home. Thank you very much.\n<|/ c |>\n<| c |>\nI added\
    \ a solution for negative numbers. If you need a positive version, let me know\
    \ and I will update the answer.\n<|/ c |>\n<| c |>\nI added a working java 8 solution.\
    \ I think it is easier to read and more efficient.\n<|/ c |>\n<| c |>\nThank you\
    \ very much for the detailed explanation and the code. Your answer is very helpful\
    \ for me to understand the code. I learned a lot and I learned a lot more from\
    \ it. I wish you a good day.\n<|/ c |>\n<| c |>\nSure, glad I could help. I learned\
    \ something too. I'm glad that I could help!\n<|/ c |>\n<| a tags=java,arrays\
    \ |>\nThe simple solution in Java 8 would be:\n<code>\nlong[] array = {2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L};\nOptional<String> result = Arrays.stream(array)\n \
    \   .filter(i -> i > 0 && i <= 9)\n    .map(i -> Integer.toString(i))\n    .sorted()\n\
    \    .map(Integer::valueOf)\n    .map(s -> s.equals(\"0\") ? \"Nine\" : s)\n \
    \   .collect(Collectors.toList());\n</code>\nresult would then be an Optional<String[]>\
    \ containing [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n<|/ a dscore=0 |>\n<| c |>\n\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx4lxp0vb.d(26): Error: found `x` when expecting `.` following int

    /tmp/tmpx4lxp0vb.d(26): Error: found `,` when expecting identifier following `int`.

    /tmp/tmpx4lxp0vb.d(26): Error: found `int` when expecting `)`

    /tmp/tmpx4lxp0vb.d(26): Error: found `y` when expecting `,`

    /tmp/tmpx4lxp0vb.d(26): Error: expression expected, not `>`

    /tmp/tmpx4lxp0vb.d(26): Error: found `x` when expecting `;` following `return`
    statement

    /tmp/tmpx4lxp0vb.d(26): Error: found `<=` instead of statement

    /tmp/tmpx4lxp0vb.d(30): Error: declaration expected, not `)`

    /tmp/tmpx4lxp0vb.d(32): Error: declaration expected, not `return`

    /tmp/tmpx4lxp0vb.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx4lxp0vb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  long\
    \ l = arr[0];\n  string res = \"\";\n  for (int i = 1; i < arr.length; i++) \n\
    \  {\n    if (l == arr[i]) \n    {\n      res += names[i];\n    } \n    else if\
    \ (l > arr[i]) \n    {\n      res += names[l - arr[i]];\n    }\n    l = arr[i];\n\
    \  }\n  return res;\n}\n</code>\n<|/ a tags=c#,int,sorting,arrays dscore=2 |>\n\
    <| c |>\nNice solution, I didn't know about that std.string class.\n<|/ c |>\n\
    <| c |>\nI haven't tested your code, but I tested this version: `string[] by_length(long[]\
    \ arr) {\n    long l = arr[0];\n    string res = \"\";\n    for (int i = 1; i\
    \ < arr.length; i++) \n    {\n        if (l == arr[i]) \n        {\n         \
    \   res += names[i];\n        } \n        else if (l > arr[i]) \n        {\n \
    \           res += names[l - arr[i]];\n        }\n        l = arr[i];\n    }\n\
    \    return res;\n}\n`\n<|/ c |>\n<| a dscore=1 |>\nI made a little change to\
    \ the previous answers to make it work for the new test case:\n<code>\nusing System;\n\
    using System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpky0lwjgj.d(40): Error: declaration expected, not `<`

    /tmp/tmpky0lwjgj.d(43): Error: unterminated character constant

    /tmp/tmpky0lwjgj.d(46): Error: unterminated character constant

    /tmp/tmpky0lwjgj.d(69): Error: semicolon expected, not `.`

    /tmp/tmpky0lwjgj.d(69): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpky0lwjgj.d(70): Error: semicolon expected, not `.`

    /tmp/tmpky0lwjgj.d(70): Error: no identifier for declarator `.Linq`

    /tmp/tmpky0lwjgj.d(71): Error: semicolon expected, not `.`

    /tmp/tmpky0lwjgj.d(71): Error: no identifier for declarator `.Text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky0lwjgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  arr.sort(cmp_length_longs);\n    arr.reverse();\n    for(long l : arr) \n \
    \   {\n        switch(l)\n        {\n            case 0:\n            {\n    \
    \            arr[l] = One;\n                break;\n            }\n          \
    \  case 1:\n            {\n                arr[l] = Two;\n                break;\n\
    \            }\n            case 2:\n            {\n                arr[l] = Three;\n\
    \                break;\n            }\n            case 3:\n            {\n \
    \               arr[l] = Four;\n                break;\n            }\n      \
    \      case 4:\n            {\n                arr[l] = Five;\n              \
    \  break;\n            }\n            case 5:\n            {\n               \
    \ arr[l] = Six;\n                break;\n            }\n            case 6:\n\
    \            {\n                arr[l] = Seven;\n                break;\n    \
    \        }\n            case 7:\n            {\n                arr[l] = Eight;\n\
    \                break;\n            }\n            case 8:\n            {\n \
    \               arr[l] = Nine;\n                break;\n            }\n      \
    \  }\n    }\n    return arr;\n}\nstring One = \"One\";\nstring Two = \"Two\";\n\
    string Three = \"Three\";\nstring Four = \"Four\";\nstring Five = \"Five\";\n\
    string Six = \"Six\";\nstring Seven = \"Seven\";\nstring Eight = \"Eight\";\n\
    string Nine = \"Nine\";\n</code>\n<|/ a tags=c#,sorting,arrays |>\n<| c |>\nThanks\
    \ a lot for the detailed answer, it does look more complex than I thought. Do\
    \ you know how it compares to my algorithm (I added my code to the original question)?\
    \ And is it possible to do it in just one method? Thank you very much again!\n\
    <|/ c |>\n<| c |>\nYou're welcome. Your algorithm is O(n*log(n)). The above one\
    \ is O(n) since sorting is done in O(n log n) time. In general, sorting is a \"\
    O(n log n)\" algorithm.\n<|/ c |>\n<| c |>\nThanks for the explanation! Would\
    \ it be possible (and maybe more efficient) to have a single method that can sort\
    \ it in O(n) instead of two methods? Thanks again for the help!\n<|/ c |>\n<|\
    \ c |>\nNo need to do that. Sort it once then simply iterate through the sorted\
    \ array, assigning the proper strings.\n<|/ c |>\n<| c |>\nThe thing is I want\
    \ to use both algorithms (my and your algorithm) at the same time, so I can't\
    \ use your solution and then use my method (which I posted in the original post)\n\
    <|/ c |>\n<| a dscore=1 |>\n\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppvbt9z39.d(26): Error: semicolon expected, not `:`

    /tmp/tmppvbt9z39.d(26): Error: expression expected, not `:`

    /tmp/tmppvbt9z39.d(26): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmppvbt9z39.d(88): Error: declaration expected, not `<`

    /tmp/tmppvbt9z39.d(94): Error: unterminated character constant

    /tmp/tmppvbt9z39.d(103): Error: unterminated character constant

    /tmp/tmppvbt9z39.d(111): Error: declaration expected, not `assert`

    /tmp/tmppvbt9z39.d(112): Error: declaration expected, not `assert`

    /tmp/tmppvbt9z39.d(113): Error: declaration expected, not `assert`

    /tmp/tmppvbt9z39.d(114): Error: declaration expected, not `assert`

    /tmp/tmppvbt9z39.d(115): Error: declaration expected, not `assert`

    /tmp/tmppvbt9z39.d(116): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppvbt9z39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.length < 1) return new string[0];\n    long[] temp = new long[arr.length];\n\
    \    for(int i = 0; i < arr.length; ++i)\n    {\n        int num = (int) arr[i];\n\
    \        temp[i] = num < 10 ? num : 10 * num + num % 10;\n    }\n    Arrays.sort(temp);\n\
    \    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        int num = (int) arr[i];\n        sb.append(temp[i]);\n\
    \        if(i != arr.length - 1) sb.append(\"-\");\n    }\n    return new string[]{sb.toString()};\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease explain your answer.\n<|/ c |>\n\
    <| c |>\nThis is a solution that doesn't use any built in functions. It uses Java's\
    \ Arrays Class to get the job done. The code is self-explanatory, but the comments\
    \ should help you.\n<|/ c |>\n<| a tags=algorithm,java |>\nI implemented a more\
    \ elegant solution using two methods:\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ltniwyr.d(28): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmp1ltniwyr.d(35): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmp1ltniwyr.d(39): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp1ltniwyr.d(39): Error: found `}` when expecting `;` following statement

    /tmp/tmp1ltniwyr.d(39): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp1ltniwyr.d(41): Error: declaration expected, not `<`

    /tmp/tmp1ltniwyr.d(47): Error: unterminated character constant

    /tmp/tmp1ltniwyr.d(47): Error: unterminated character constant

    /tmp/tmp1ltniwyr.d(55): Error: declaration expected, not `assert`

    /tmp/tmp1ltniwyr.d(56): Error: declaration expected, not `assert`

    /tmp/tmp1ltniwyr.d(57): Error: declaration expected, not `assert`

    /tmp/tmp1ltniwyr.d(58): Error: declaration expected, not `assert`

    /tmp/tmp1ltniwyr.d(59): Error: declaration expected, not `assert`

    /tmp/tmp1ltniwyr.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1l'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) return arr;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cvmmvvb.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cvmmvvb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length < 1)\n    {\n        return new string[0];\n    }\n    \n  \
    \  // We will store the numbers that we will sort later.\n    int[] sortIndex\
    \ = new int[100];\n    \n    // We will store the names that we will sort later.\n\
    \    string[] names = new string[100];\n    \n    // We will store the numbers\
    \ that we will replace later.\n    int[] replaceIndex = new int[100];\n    \n\
    \    // Get a copy of arr sorted by length.\n    long[] copy = arr;\n    copy.sort(Long::compare);\n\
    \    \n    int index = 0;\n    int currentLength = 0;\n    \n    // For each element\
    \ of arr...\n    for (int i = 0; i < arr.length; ++i)\n    {\n        // ... get\
    \ the length ...\n        currentLength = currentLength * 10 + (arr[i] - 1);\n\
    \        // ... and get the index of that length ...\n        sortIndex[index]\
    \ = currentLength;\n        // ... and get the name for that length ...\n    \
    \    names[index] = Ones[arr[i] - 1];\n        // ... and get the index where\
    \ the element will be replaced later\n        replaceIndex[index] = i;\n     \
    \   // ... increase the index...\n        index++;\n    }\n    \n    // We now\
    \ know what the length of the array will be.\n    int index2 = 0;\n    int nextLength\
    \ = sortIndex[index2] + Ones.length;\n    \n    // Now we can sort the array...\n\
    \    Arrays.sort(sortIndex, (a, b) -> Long.compare(nextLength, a));\n    \n  \
    \  // And finally we can replace the array...\n    for (int i = 0; i < arr.length;\
    \ ++i)\n    {\n        // ... by getting the number from the sortIndex...\n  \
    \      int newIndex = sortIndex[i];\n        // ... and replacing it with the\
    \ name from the names array ...\n        arr[i] = names[newIndex];\n        //\
    \ ... and getting the name from the names array ...\n        int replaceName =\
    \ replaceIndex[i];\n        // ... and replacing it with the name from the names\
    \ array ...\n        names[replaceName] = names[newIndex];\n    }\n    \n    //\
    \ Return the result array.\n    return arr;\n}\n</code>\nThe code above is pretty\
    \ straightforward: we first sort the numbers by the length of the numbers (we\
    \ sort them by length because we want to sort them with the numbers closest to\
    \ each other first), then we sort the numbers by their name, and finally we replace\
    \ numbers with the names.\n<|/ a dscore=0 tags=c#,sorting,arrays |>\n<| c |>\n\
    Hi Jakub, I checked your code and there is one problem:\n1. I get an error on\
    \ `sortIndex[index] = currentLength;` saying\n`Array bounds cannot appear in C#\
    \ code`\n2. I also get \nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhclof7k.d(40): Error: found `:` when expecting `,`

    /tmp/tmphhclof7k.d(40): Error: expression expected, not `:`

    /tmp/tmphhclof7k.d(40): Error: found `compare` when expecting `,`

    /tmp/tmphhclof7k.d(65): Error: expression expected, not `>`

    /tmp/tmphhclof7k.d(65): Error: found `Long` when expecting `,`

    /tmp/tmphhclof7k.d(83): Error: declaration expected, not `<`

    /tmp/tmphhclof7k.d(95): Error: declaration expected, not `assert`

    /tmp/tmphhclof7k.d(96): Error: declaration expected, not `assert`

    /tmp/tmphhclof7k.d(97): Error: declaration expected, not `assert`

    /tmp/tmphhclof7k.d(98): Error: declaration expected, not `assert`

    /tmp/tmphhclof7k.d(99): Error: declaration expected, not `assert`

    /tmp/tmphhclof7k.d(100): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhclof7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ans = arr.Length > 0 ? new string[arr.Length] : new string[0];\n \
    \   if (ans.Length > 0)\n    {\n        Array.Sort(arr);\n        foreach (long\
    \ a in arr)\n        {\n            ans[Convert.ToInt32(Math.Floor(a / 10.0))]\
    \ = \"One\";\n            ans[Convert.ToInt32(Math.Floor(a / 10.0) % 10)] = \"\
    Two\";\n            ans[Convert.ToInt32(Math.Floor(a / 100.0))] = \"Three\";\n\
    \            ans[Convert.ToInt32(Math.Floor(a / 100) % 10)] = \"Four\";\n    \
    \        ans[Convert.ToInt32(Math.Floor(a / 1000))] = \"Five\";\n            ans[Convert.ToInt32(Math.Floor(a\
    \ / 1000) % 10)] = \"Six\";\n            ans[Convert.ToInt32(Math.Floor(a / 10000))]\
    \ = \"Seven\";\n            ans[Convert.ToInt32(Math.Floor(a / 10000) % 10)] =\
    \ \"Eight\";\n            ans[Convert.ToInt32(Math.Floor(a / 100000))] = \"Nine\"\
    ;\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=sorting,c#,arrays\
    \ |>\n<| c |>\nIf this isn't an exercise in writing your own sort algorithm, then\
    \ I don't see why someone would need to do this.  It would be much simpler just\
    \ to write `if (array[i] <= 9) { array[i] = \"One\"; } else if (array[i] <= 99)\
    \ { array[i] = \"Two\"; }`...\n<|/ c |>\n<| c |>\nI was trying to solve a puzzle,\
    \ and wanted to write a sorting function by hand to find the correct result. \
    \ This answer worked wonderfully, and was extremely easy to understand.  Thank\
    \ you.\n<|/ c |>\n<| c |>\nYou just need to replace `long` with `int`\n<|/ c |>\n\
    <| a |>\n<code>\npublic static void SortByNumber(int a[], int size)\n{\n    bool\
    \ sorted = false;\n    while (!sorted)\n    {\n        sorted = true;\n      \
    \  for (int i = 0; i < size - 1; i++)\n        {\n            if (a[i]<a[i+1])\n\
    \            {\n                int temp = a[i];\n                a[i] = a[i +\
    \ 1];\n                a[i + 1] = temp;\n                sorted = false;\n   \
    \         }\n        }\n    }\n}\n</code>\n<|/ a tags=sorting,c#,arrays dscore=5\
    \ |>\n<| c |>\nThis doesn't work for a sorted array. You'll end up in an infinite\
    \ loop.\n<|/ c |>\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbp6vxnr.d(28): Error: found `in` when expecting `;`

    /tmp/tmpkbp6vxnr.d(43): Error: declaration expected, not `<`

    /tmp/tmpkbp6vxnr.d(46): Error: unterminated character constant

    /tmp/tmpkbp6vxnr.d(46): Error: unterminated character constant

    /tmp/tmpkbp6vxnr.d(59): Error: declaration expected, not `while`

    /tmp/tmpkbp6vxnr.d(62): Error: declaration expected, not `for`

    /tmp/tmpkbp6vxnr.d(62): Error: no identifier for declarator `i`

    /tmp/tmpkbp6vxnr.d(62): Error: declaration expected, not `<`

    /tmp/tmpkbp6vxnr.d(62): Error: no identifier for declarator `i`

    /tmp/tmpkbp6vxnr.d(62): Error: declaration expected, not `++`

    /tmp/tmpkbp6vxnr.d(67): Error: no identifier for declarator `a[i]`

    /tmp/tmpkbp6vxnr.d(67): Error: declaration expected, not `=`

    /tmp/tmpkbp6vxnr.d(68): Error: no identifier for declarator `a[i + 1]`

    /tmp/tmpkbp6vxnr.d(68): Error: declaration expected, not `=`

    /tmp/tmpkbp6vxnr.d(69): Error: no identifier for declarator `sorted`

    /tmp/tmpkbp6vxnr.d(69): Error: declaration expected, not `=`

    /tmp/tm'
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    long[] reverse = new long[arr.length];\n    System.arraycopy(arr,\
    \ 0, reverse, 0, arr.length);\n    for(int i = 0; i < arr.length; i++)\n    {\n\
    \        if(arr[i] == 0)\n        {\n            reverse[i] = 0;\n        }\n\
    \        else\n        {\n            reverse[i] = 1;\n        }\n    }\n    Arrays.sort(reverse);\n\
    \    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(reverse[i] == 0)\n        {\n            sb.append(\"\
    One\");\n        }\n        else\n        {\n            if(i < arr.length - 1)\n\
    \            {\n                if(arr[i] == (arr[i + 1] - 1))\n             \
    \   {\n                    sb.append(\"One\");\n                }\n          \
    \      else\n                {\n                    sb.append(\"Two\");\n    \
    \            }\n            }\n            else if(arr[i] == (9 - 1))\n      \
    \      {\n                sb.append(\"Nine\");\n            }\n            else\n\
    \            {\n                sb.append(\"Ten\");\n            }\n        }\n\
    \    }\n    return sb.toString();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71c_g23_.d(24): Error: undefined identifier `Arrays`

    /tmp/tmp71c_g23_.d(26): Error: undefined identifier `System`

    /tmp/tmp71c_g23_.d(38): Error: undefined identifier `Arrays`

    /tmp/tmp71c_g23_.d(39): Error: undefined identifier `StringBuilder`

    /tmp/tmp71c_g23_.d(39): Error: undefined identifier `StringBuilder`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71c_g23_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string result[] = new string[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        if(arr[i] < 1 || arr[i] > 9)\n            continue;\n \
    \       result[i] = \"One\";\n        result[i - 1] = \"Two\";\n        result[i\
    \ - 2] = \"Three\";\n        result[i - 3] = \"Four\";\n        result[i - 4]\
    \ = \"Five\";\n        result[i - 5] = \"Six\";\n        result[i - 6] = \"Seven\"\
    ;\n        result[i - 7] = \"Eight\";\n        result[i - 8] = \"Nine\";\n   \
    \     result[i - 9] = \"Ten\";\n    }\n    int length = (int)Math.sqrt(arr.length);\n\
    \    for(int i = 0; i < length; i++)\n    {\n        if(arr[i] < 1)\n        \
    \    continue;\n        result[length + i] = \"One\";\n        result[length +\
    \ i - 1] = \"Two\";\n        result[length + i - 2] = \"Three\";\n        result[length\
    \ + i - 3] = \"Four\";\n        result[length + i - 4] = \"Five\";\n        result[length\
    \ + i - 5] = \"Six\";\n        result[length + i - 6] = \"Seven\";\n        result[length\
    \ + i - 7] = \"Eight\";\n        result[length + i - 8] = \"Nine\";\n        result[length\
    \ + i - 9] = \"Ten\";\n    }\n    for(int i = 0; i < length; i++)\n    {\n   \
    \     for(int j = 0; j < length; j++)\n        {\n            if(arr[i + j] <\
    \ 1)\n                continue;\n            int index = (int)(Math.pow(10, length\
    \ - i - 1) * (arr[i + j] + 1)) % 10;\n            result[i + j] = \"One\";\n \
    \           result[i + j + 1] = \"Two\";\n            result[i + j + 2] = \"Three\"\
    ;\n            result[i + j + 3] = \"Four\";\n            result[i + j + 4] =\
    \ \"Five\";\n            result[i + j + 5] = \"Six\";\n            result[i +\
    \ j + 6] = \"Seven\";\n            result[i + j + 7] = \"Eight\";\n          \
    \  result[i + j + 8] = \"Nine\";\n            result[i + j + 9] = \"Ten\";\n \
    \           result[i + j + 1] = result[i + j + 1] + result[index];\n         \
    \   result[i + j + 2] = result[i + j + 2] + result[index];\n            result[i\
    \ + j + 3] = result[i + j + 3] + result[index];\n            result[i + j + 4]\
    \ = result[i + j + 4] + result[index];\n            result[i + j + 5] = result[i\
    \ + j + 5] + result[index];\n            result[i + j + 6] = result[i + j + 6]\
    \ + result[index];\n            result[i + j + 7] = result[i + j + 7] + result[index];\n\
    \            result[i + j + 8] = result[i + j + 8] + result[index];\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeahrjrwp.d(24): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] result`

    /tmp/tmpeahrjrwp.d(40): Error: C style cast illegal, use `cast(int)Math.sqrt(arr.length)`

    /tmp/tmpeahrjrwp.d(62): Error: C style cast illegal, use `cast(int)(Math.pow(10,
    length - i - 1) * (arr[i + j] + 1))`

    /tmp/tmpeahrjrwp.d(81): Error: found `unittest` instead of statement

    /tmp/tmpeahrjrwp.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpeahrjrwp.d(91): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeahrjrwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int n = (int)arr.length;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n\
    \    for(int i = 0; i < n; i++) {\n        long v = arr[i];\n        min = Math.min(min,\
    \ v);\n        max = Math.max(max, v);\n    }\n    long[] ret = new long[n];\n\
    \    int i = 0;\n    for(; i < n; i++) {\n        long v = arr[i];\n        if(v\
    \ < min) break;\n        if(v > max) break;\n        ret[i] = v;\n    }\n    \n\
    \    for(int j = n - 1; j >= i; j--) {\n        long v = arr[j];\n        if(v\
    \ < min) break;\n        if(v > max) break;\n        ret[j] = v;\n    }\n    \n\
    \    for(int j = i + 1; j < n; j++) {\n        long v = arr[j];\n        if(v\
    \ < min) break;\n        if(v > max) break;\n        ret[j] = v;\n    }\n    return\
    \ sortAndRevArray(ret);\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpes7_0rq6.d(24): Error: C style cast illegal, use `cast(int)arr.length`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpes7_0rq6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ min = 1;\n  int max = 9;\n  if (arr.length == 0)\n    return string[];\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32khf2ho.d(28): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32khf2ho.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    Arrays.reverse(arr);\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp41l88uw_.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp41l88uw_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result = new string[arr.length];\n  int i = 0;\n  int len = arr.length;\n  while\
    \ (i < len) {\n    long value = arr[i];\n    i++;\n    while (value) {\n     \
    \ int digit = value % 10;\n      value /= 10;\n      result[len-i-1] = names[digit];\n\
    \      i++;\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=algorithm,sorting,c#,arrays\
    \ |>\n<| a |>\nHere is another way to do it using LINQ:\n<code>\nstring[] digits\
    \ = new string[] { \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\" };\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91clp2rt.d(39): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91clp2rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int low = 0;\n    int high = arr.length;\n    \n    while (low < high) {\n\
    \        int middle = int((high-low)/2);\n        if (arr[middle] > 9) {\n   \
    \         int temp = arr[middle];\n            arr[middle] = arr[middle] - 10;\n\
    \            arr[middle+1] = temp;\n            high = high - 1;\n        } else\
    \ {\n            low = middle + 1;\n        }\n    }\n    \n    string[] ret =\
    \ new string[high];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 10) {\n            ret[i] = \"One\";\n        } else if (arr[i] < 100) {\n\
    \            ret[i] = \"Two\";\n        } else if (arr[i] < 1000) {\n        \
    \    ret[i] = \"Three\";\n        } else if (arr[i] < 10000) {\n            ret[i]\
    \ = \"Four\";\n        } else if (arr[i] < 100000) {\n            ret[i] = \"\
    Five\";\n        } else if (arr[i] < 1000000) {\n            ret[i] = \"Six\"\
    ;\n        } else if (arr[i] < 10000000) {\n            ret[i] = \"Seven\";\n\
    \        } else if (arr[i] < 100000000) {\n            ret[i] = \"Eight\";\n \
    \       } else {\n            ret[i] = \"Nine\";\n        }\n    }\n    \n   \
    \ Arrays.sort(ret);\n    \n    for (int i = 0; i < ret.length; i++) {\n      \
    \  ret[i] += \" \" + low;\n    }\n    \n    return ret;\n}\n</code>\nI tested\
    \ it on the following input:\n<code>\npublic static void main(String args[])\n\
    {\n    String[] data = { \"1\", \"2\", \"10\", \"100\", \"1000\", \"10000\", \"\
    100000\", \"1000000\", \"10000000\", \"100000000\" };\n    \n    System.out.println(by_length(data));\n\
    }\n</code>\nI got the following output:\n<code>\n[One, Two, Four, Six, Eight,\
    \ Nine, Five, Three, Two, One, One]\n</code>\nI hope this helps!\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer, but that does not give the correct output.\
    \ Your code would output [\"One\", \"Two\", \"One\", \"One\"]. The correct output\
    \ would be [\"One\", \"Two\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]. Sorry for the confusion, my fault.\n<|/ c |>\n<| c |>\nYou're right!\
    \ I didn't notice the reversal of the output :) The corrected code is above, take\
    \ a look.\n<|/ c |>\n<| a |>\nHere's a short one-liner version using only Arrays.sort:\n\
    <code>\nArrays.sort(arr,Comparator.comparingLong(l -> Integer.parseInt(l.substring(0,\
    \ l.length() - 1))));\n</code>\n\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgqbuejr8.d(70): Error: declaration expected, not `<`

    /tmp/tmpgqbuejr8.d(77): Error: identifier expected following `.` instead of `out`

    /tmp/tmpgqbuejr8.d(77): Error: no identifier for declarator `System`

    /tmp/tmpgqbuejr8.d(77): Error: declaration expected, not `out`

    /tmp/tmpgqbuejr8.d(78): Error: unrecognized declaration

    /tmp/tmpgqbuejr8.d(90): Error: unterminated character constant

    /tmp/tmpgqbuejr8.d(90): Error: unterminated character constant

    /tmp/tmpgqbuejr8.d(93): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgqbuejr8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  bool needReverse = false;\n    \n    for (int i = 0; i < arr.length; ++i)\n\
    \    {\n        if ((arr[i] > 1L) || (arr[i] < 9L))\n        {\n            needReverse\
    \ = true;\n            continue;\n        }\n        \n        arr[i] = std.range.One_toNine(arr[i]);\n\
    \    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7_k2xgny.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7_k2xgny.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ l = 1;\n  for (long n: arr) \n    if (n < 1)\n      continue;\n    \n    for\
    \ (long i = n; i > 9; i/=10) {\n      l = l * 10;\n      l++;\n    }\n    \n \
    \   if (l == 1) return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"];\n    return by_length(reverse(arr));\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5_c3wyc.d(25): Error: semicolon expected, not `:`

    /tmp/tmpi5_c3wyc.d(25): Error: expression expected, not `:`

    /tmp/tmpi5_c3wyc.d(25): Error: found `arr` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5_c3wyc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    Arrays.reverse(arr);\n    string str[] = new string[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        str[i] = \"One\";\n\
    \        if (arr[i] < 10)\n            str[i] += (arr[i] + 1);\n        else if\
    \ (arr[i] < 20)\n            str[i] += (arr[i] + 2);\n        else if (arr[i]\
    \ < 30)\n            str[i] += (arr[i] + 3);\n        else if (arr[i] < 40)\n\
    \            str[i] += (arr[i] + 4);\n        else if (arr[i] < 50)\n        \
    \    str[i] += (arr[i] + 5);\n        else if (arr[i] < 60)\n            str[i]\
    \ += (arr[i] + 6);\n        else if (arr[i] < 70)\n            str[i] += (arr[i]\
    \ + 7);\n        else if (arr[i] < 80)\n            str[i] += (arr[i] + 8);\n\
    \        else if (arr[i] < 90)\n            str[i] += (arr[i] + 9);\n    }\n \
    \   return str;\n}\n</code>\n<|/ a tags=arrays,arraylist,arrays,java,sorting |>\n\
    <| c |>\nYou might want to fix `new string[arr.length]` to `new string[arr.length\
    \ + 1]`\n<|/ c |>\n<| c |>\nYou might want to fix `new string[arr.length]` to\
    \ `new string[arr.length + 1]`\n<|/ c |>\n<| c |>\n: Good catch, I fixed it.\n\
    <|/ c |>\n<| a dscore=5 |>\nFor a one-liner:\n<code>\nArrays.stream(arr).map(i\
    \ -> (int) (i + 9)).sorted().map(i -> (char) ('A' + i)).toArray(String[]::new);\n\
    </code>\n<|/ a tags=arrays,arraylist,arrays,java,sorting |>\n<| c |>\nVery nice.\
    \ BTW this only works for `int` arrays (so not `byte`, `short`, `long`, ...),\
    \ but that would be a trivial tweak.\n<|/ c |>\n<| c |>\nIt's not so trivial:\
    \ you'd have to call `charAt` on every number, since you can't convert an int\
    \ to a char.\n<|/ c |>\n<| a dscore=5 tags=arrays,arraylist,arrays,java,sorting\
    \ |>\nFor Java 8 you can do this:\n<code>\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt07cf1r9.d(26): Deprecation: instead of C-style syntax, use D-style
    syntax `string[] str`

    /tmp/tmpt07cf1r9.d(51): Error: declaration expected, not `<`

    /tmp/tmpt07cf1r9.d(66): Error: declaration expected, not `<`

    /tmp/tmpt07cf1r9.d(72): Error: unterminated character constant

    /tmp/tmpt07cf1r9.d(72): Error: unterminated character constant

    /tmp/tmpt07cf1r9.d(72): Error: unterminated character constant

    /tmp/tmpt07cf1r9.d(81): Error: declaration expected, not `assert`

    /tmp/tmpt07cf1r9.d(82): Error: declaration expected, not `assert`

    /tmp/tmpt07cf1r9.d(83): Error: declaration expected, not `assert`

    /tmp/tmpt07cf1r9.d(84): Error: declaration expected, not `assert`

    /tmp/tmpt07cf1r9.d(85): Error: declaration expected, not `assert`

    /tmp/tmpt07cf1r9.d(86): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt07cf1r9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result = new string[0];\n    int size = arr.length;\n    if (size < 2)\
    \ return result;\n    \n    var arr = ArrayUtil.copy(arr);\n    \n    long[] first\
    \ = new long[size & 1];\n    long[] second = new long[size & 1];\n    \n    first[0]\
    \ = arr[0];\n    for (int i = 1; i < size; i += 2)\n    {\n        second[i >>\
    \ 1] = arr[i];\n        first[i & 1] = arr[i + 1];\n    }\n    \n    std.sort(first,\
    \ second, CompareUtil.LongComparator(new long[]{1, 0}));\n    \n    long[] reversed\
    \ = ArrayUtil.copyLongArray(first);\n    ArrayUtil.reverse(reversed, 0, reversed.length);\n\
    \    \n    for (int i = 0; i < size; i++)\n    {\n        result[i >> 1] = reversed[i\
    \ & 1];\n    }\n    \n    ArrayUtil.release(first);\n    ArrayUtil.release(second);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_df0tiu.d(40): Error: found `{` when expecting `,`

    /tmp/tmpi_df0tiu.d(40): Error: found `}` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_df0tiu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    \n    // Sort the array\
    \ based on length\n    arr.sort((left, right) =>\n    {\n        return numbers[right\
    \ - left];\n    });\n    \n    // Reverse the array\n    Array.reverse(arr);\n\
    \    \n    // Replace the numbers in the array with the numbers\n    string One\
    \ = \"One\";\n    string Two = \"Two\";\n    string Three = \"Three\";\n    string\
    \ Four = \"Four\";\n    string Five = \"Five\";\n    string Six = \"Six\";\n \
    \   string Seven = \"Seven\";\n    string Eight = \"Eight\";\n    string Nine\
    \ = \"Nine\";\n    \n    arr.forEach(element =>\n    {\n        switch (element)\n\
    \        {\n            case 1:\n                arr[0] = One;\n             \
    \   break;\n            case 2:\n                arr[1] = Two;\n             \
    \   break;\n            case 3:\n                arr[2] = Three;\n           \
    \     break;\n            case 4:\n                arr[3] = Four;\n          \
    \      break;\n            case 5:\n                arr[4] = Five;\n         \
    \       break;\n            case 6:\n                arr[5] = Six;\n         \
    \       break;\n            case 7:\n                arr[6] = Seven;\n       \
    \         break;\n            case 8:\n                arr[7] = Eight;\n     \
    \           break;\n            case 9:\n                arr[8] = Nine;\n    \
    \            break;\n            default:\n                break;\n        }\n\
    \    });\n    \n    return arr;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu4xyy41i.d(25): Error: a struct is not a valid initializer for
    a `int[]`

    /tmp/tmpu4xyy41i.d(28): Error: no property `sort` for type `long[]`

    /tmp/tmpu4xyy41i.d(34): Error: undefined identifier `Array`

    /tmp/tmpu4xyy41i.d(47): Error: no property `forEach` for type `long[]`

    /tmp/tmpu4xyy41i.d(83): Error: cannot implicitly convert expression `arr` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu4xyy41i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string One = \"One\";\n    string Two = \"Two\";\n    string Three = \"Three\"\
    ;\n    string Four = \"Four\";\n    string Five = \"Five\";\n    string Six =\
    \ \"Six\";\n    string Seven = \"Seven\";\n    string Eight = \"Eight\";\n   \
    \ string Nine = \"Nine\";\n    string ten = \"Ten\";\n    string eleven = \"Eleven\"\
    ;\n    string twelve = \"Twelve\";\n    string thirteen = \"Thirteen\";\n    string\
    \ fourteen = \"Fourteen\";\n    string fifteen = \"Fifteen\";\n    string sixteen\
    \ = \"Sixteen\";\n    string seventeen = \"Seventeen\";\n    string eighteen =\
    \ \"Eighteen\";\n    string nineteen = \"Nineteen\";\n    string Onehundred =\
    \ \"Onehundred\";\n    string Onethousand = \"Onethousand\";\n    string Onemillion\
    \ = \"Onemillion\";\n    string Onebillion = \"Onebillion\";\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqomaj4ct.d(47): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqomaj4ct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length; // The length of the array\n    int result[] = new int[len];\
    \ // The array where we'll put the result\n    \n    for (int i = 0; i < len;\
    \ ++i)\n    {\n        result[i] = std.math.min(9, std.math.max(std.math.min(9,\
    \ arr[i])+1));\n        arr[i] = std.math.max(std.math.min(9, arr[i]), 1);\n \
    \   }\n    \n    for (int i = 0; i < len; ++i)\n    {\n        int value = result[i];\
    \ // The value of the i'th digit\n        int index = arr[i] - 1; // The index\
    \ of the i'th digit\n        \n        int charValue = '' + value;\n        //\
    \ For each of the characters in the number, see if they exist in\n        // \"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"\n        for (int j = 0; j < charValue.length(); ++j)\n        {\n\
    \            if (std.string.startsWith(\"One\", charValue.charAt(j)))\n      \
    \      {\n                result[i] = \"One\";\n                break;\n     \
    \       }\n            else if (std.string.startsWith(\"Two\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Two\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Three\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Three\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Four\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Four\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Five\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Five\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Six\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Six\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Seven\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Seven\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Eight\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Eight\";\n                break;\n\
    \            }\n            else if (std.string.startsWith(\"Nine\", charValue.charAt(j)))\n\
    \            {\n                result[i] = \"Nine\";\n                break;\n\
    \            }\n        }\n    }\n    \n    return std.string.format(\"\", {result});\n\
    }\n</code>\n<|/ a tags=algorithm,java |>\n<| a tags=algorithm,java dscore=0 |>\n\
    To give an alternative solution, you may use following snippet. \n<code>\npublic\
    \ static void main(String[] args) throws Exception {\n    List<String> list =\
    \ Arrays.asList(\n            \"0123\",\n            \"3456\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdzsjlsuz.d(25): Deprecation: instead of C-style syntax, use D-style
    syntax `int[] result`

    /tmp/tmpdzsjlsuz.d(38): Error: unterminated character constant

    /tmp/tmpdzsjlsuz.d(91): Error: found `}` when expecting `;` following statement

    /tmp/tmpdzsjlsuz.d(91): Error: found `)` instead of statement

    /tmp/tmpdzsjlsuz.d(93): Error: expression expected, not `/`

    /tmp/tmpdzsjlsuz.d(93): Error: found `code` when expecting `,`

    /tmp/tmpdzsjlsuz.d(93): Error: expression expected, not `>`

    /tmp/tmpdzsjlsuz.d(94): Error: expression expected, not `|`

    /tmp/tmpdzsjlsuz.d(94): Error: found `tags` when expecting `,`

    /tmp/tmpdzsjlsuz.d(94): Error: expression expected, not `=`

    /tmp/tmpdzsjlsuz.d(94): Error: found `algorithm` when expecting `,`

    /tmp/tmpdzsjlsuz.d(94): Error: expression expected, not `,`

    /tmp/tmpdzsjlsuz.d(94): Error: found `java` when expecting `,`

    /tmp/tmpdzsjlsuz.d(94): Error: expression expected, not `|`

    /tmp/tmpdzsjlsuz.d(95): Error: expression expected, not `<`

    /tmp/tmpdzsjlsuz.d(94): Error: `0 > 0` must '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  Arrays.sort(arr);\n    Arrays.reverse(arr);\n    \n    List<string> result\
    \ = new List<string>();\n    int index = 0;\n    while(index < arr.Length)\n \
    \   {\n        string s = String.Format(\"{0}\", arr[index]);\n        string\
    \ s_number = String.Format(\"{0}\", arr[index+1]);\n        if(index == 0)\n \
    \       {\n            result.Add(s);\n            result.Add(s_number);\n   \
    \     }\n        else if(s_number.Length > s.Length)\n        {\n            result.Add(s);\n\
    \            result.Add(s_number);\n        }\n        else if(!s.Equals(s_number))\n\
    \        {\n            result.Add(s);\n            result.Add(s_number);\n  \
    \      }\n        else\n        {\n            result.Add(s_number);\n       \
    \     result.Add(s);\n        }\n        index += 2;\n    }\n    \n    return\
    \ result.ToArray();\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n// Sort the\
    \ array in ascending order.\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnp0fckl3.d(27): Error: found `>` when expecting `;` following statement

    /tmp/tmpnp0fckl3.d(27): Error: found `>` when expecting `;` following statement

    /tmp/tmpnp0fckl3.d(27): Error: expression expected, not `)`

    /tmp/tmpnp0fckl3.d(27): Error: found `;` when expecting `)`

    /tmp/tmpnp0fckl3.d(28): Error: found `int` when expecting `;` following statement

    /tmp/tmpnp0fckl3.d(58): Error: declaration expected, not `<`

    /tmp/tmpnp0fckl3.d(67): Error: declaration expected, not `assert`

    /tmp/tmpnp0fckl3.d(68): Error: declaration expected, not `assert`

    /tmp/tmpnp0fckl3.d(69): Error: declaration expected, not `assert`

    /tmp/tmpnp0fckl3.d(70): Error: declaration expected, not `assert`

    /tmp/tmpnp0fckl3.d(71): Error: declaration expected, not `assert`

    /tmp/tmpnp0fckl3.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnp0fckl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //Write your code here\n    long[] rearranged = new long[10];\n    for(int\
    \ i =0; i < arr.length; i++)\n    {\n        if(arr[i] > 0)\n        {\n     \
    \       rearranged[arr[i] % 10] = arr[i];\n        }\n    }\n    \n    return\
    \ arr == null ? new string[0] : rearranged;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,c#\
    \ |>\n<code>\n    string[] arr = new string[] {\n        \"One\",\n        \"\
    Two\",\n        \"Three\",\n        \"Four\",\n        \"Five\",\n        \"Six\"\
    ,\n        \"Seven\",\n        \"Eight\",\n        \"Nine\"\n    };\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp77b2sx4u.d(36): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77b2sx4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //write your code here\n    long[] ret = new long[arr.Length];\n    Array.Sort(arr);\n\
    \    for (int i = 0; i < arr.Length; i++)\n    {\n        long x = arr[i];\n \
    \       int pos = Mathf.FloorToInt(x / 10);\n        ret[pos] = x % 10;\n    }\n\
    \    for (int i = 0; i < ret.Length; i++)\n    {\n        ret[i] = One[ret[i]];\n\
    \    }\n    return ret;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmc792x8c.d(25): Error: no property `Length` for type `long[]`

    /tmp/tmpmc792x8c.d(26): Error: undefined identifier `Array`

    /tmp/tmpmc792x8c.d(27): Error: no property `Length` for type `long[]`

    /tmp/tmpmc792x8c.d(30): Error: undefined identifier `Mathf`

    /tmp/tmpmc792x8c.d(33): Error: no property `Length` for type `long[]`

    /tmp/tmpmc792x8c.d(35): Error: undefined identifier `One`

    /tmp/tmpmc792x8c.d(37): Error: cannot implicitly convert expression `ret` of type
    `long[]` to `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmc792x8c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result = [];\n    if(arr.length == 0) return result;\n    var len = arr.length;\n\
    \    var max = Math.pow(2, len) - 1;\n    for(int i = 0; i < len; ++i) {\n   \
    \     if(arr[i] < 1 || arr[i] > max) continue;\n        var tmp = arr[i];\n  \
    \      arr[i] = arr[max - tmp];\n        arr[max - tmp] = tmp;\n    }\n    foreach(int\
    \ i, arr)\n        result.push(names[i - 1]);\n    return result;\n}\n</code>\n\
    <|/ a tags=sorting,c# |>\n<| c |>\nI'm going to guess this one would be faster\
    \ for a large data set. Why not try it out and let us know how it works?\n<|/\
    \ c |>\n<| c |>\nI just ran this against a 1MB array and found this one to be\
    \ the fastest one.\n<|/ c |>\n<| c |>\nI wonder if it's O(logn)...O(n) would be\
    \ the obvious choice.\n<|/ c |>\n<| c |>\nI see where you're going there. Though\
    \ I would think the constant factor would be much lower.\n<|/ c |>\n<| c |>\n\
    I think this is O(n) where n is the number of items in the array.\n<|/ c |>\n\
    <| a dscore=2 |>\nMy solution:\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_ops1uq.d(34): Error: no identifier for declarator `arr`

    /tmp/tmpm_ops1uq.d(34): Error: found `)` when expecting `;`

    /tmp/tmpm_ops1uq.d(35): Error: found `;` when expecting `)`

    /tmp/tmpm_ops1uq.d(38): Error: declaration expected, not `<`

    /tmp/tmpm_ops1uq.d(41): Error: unterminated character constant

    /tmp/tmpm_ops1uq.d(47): Error: unterminated character constant

    /tmp/tmpm_ops1uq.d(50): Error: unterminated character constant

    /tmp/tmpm_ops1uq.d(59): Error: semicolon expected, not `.`

    /tmp/tmpm_ops1uq.d(59): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpm_ops1uq.d(60): Error: semicolon expected, not `.`

    /tmp/tmpm_ops1uq.d(60): Error: no identifier for declarator `.Linq`

    /tmp/tmpm_ops1uq.d(61): Error: semicolon expected, not `.`

    /tmp/tmpm_ops1uq.d(61): Error: no identifier for declarator `.Text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_ops1uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(null == arr)\n        return [];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr2wyj8g9.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr2wyj8g9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if(arr.isEmpty()) return arr;\n    \n    // sort descending\n    arr = arr.sort(Long.compareTo);\n\
    \    // reverse the array\n    arr = arr.reverse();\n    // build string array\
    \ from the numbers\n    arr\n        .map!(num -> {\n            String res =\
    \ \"\";\n            for(int i = 0; i < 9; i++) \n                res += (i ==\
    \ num) ? \"One\" : \"Two\";\n            return res;\n        })\n        .map!(name\
    \ -> {\n            int idx = arr.indexOf(num);\n            if(idx < 0) \n  \
    \              return \"Empty\";\n            return arr[idx];\n        })\n \
    \       .toList();\n    return arr;\n}\n</code>\n<|/ a |>\n<| a dscore=0 tags=java,sorting,arrays,string\
    \ |>\nThis is a Java 8 solution.\n<code>\nprivate static String getLetterName(int\
    \ i) {\n    String result = \"\";\n    if (i < 10) {\n        result = \"One\"\
    ;\n    } else if (i < 20) {\n        result = \"Two\";\n    } else if (i < 30)\
    \ {\n        result = \"Three\";\n    } else if (i < 40) {\n        result = \"\
    Four\";\n    } else if (i < 50) {\n        result = \"Five\";\n    } else if (i\
    \ < 60) {\n        result = \"Six\";\n    } else if (i < 70) {\n        result\
    \ = \"Seven\";\n    } else if (i < 80) {\n        result = \"Eight\";\n    } else\
    \ if (i < 90) {\n        result = \"Nine\";\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkrocvf16.d(32): Error: use `.` for member lookup, not `->`

    /tmp/tmpkrocvf16.d(33): Error: found `String` when expecting `)` following template
    argument list

    /tmp/tmpkrocvf16.d(33): Error: found `res` when expecting `;` following statement

    /tmp/tmpkrocvf16.d(33): Error: found `=` instead of statement

    /tmp/tmpkrocvf16.d(37): Error: declaration expected, not `)`

    /tmp/tmpkrocvf16.d(40): Error: declaration expected, not `if`

    /tmp/tmpkrocvf16.d(42): Error: declaration expected, not `return`

    /tmp/tmpkrocvf16.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrocvf16.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] indexes = { 0, 5, 7, 1, 6, 2, 8, 3, 9, 4 };\n    int[] nums  = arr.clone();\n\
    \    int[] names = new int[arr.length];\n    \n    int minIdx = nums.reduce(indexes,\
    \ x -> x.min());\n    int maxIdx = nums.reduce(indexes, x -> x.max());\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcbwrdoq5.d(28): Error: use `.` for member lookup, not `->`

    /tmp/tmpcbwrdoq5.d(29): Error: use `.` for member lookup, not `->`

    /tmp/tmpcbwrdoq5.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcbwrdoq5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  \n    // 1. get the min and max \n    long min = arr[0];\n    long max = arr[0];\n\
    \    for(long i : arr) \n    {\n        if(i>max) \n        {\n            max=i;\n\
    \        }\n        if(i<min) \n        {\n            min=i;\n        }\n   \
    \ }\n    \n    // 2. sort the array \n    arr = arr.sort((a,b) => (a-b));\n  \
    \  \n    // 3. reverse the array \n    arr = reverse(arr);\n    \n    // 4. construct\
    \ the result string \n    string res = \"\";\n    for(long i : arr) \n    {\n\
    \        int index = i - min;\n        if(index<10) // if smaller than ten, just\
    \ use it\n        {\n            res += index + \". \";\n        }\n        else\
    \ // if greater than ten, use the corresponding name \n        {\n           \
    \ string name = names[index % 10];\n            res += index + \". \" + name;\n\
    \        }\n    }\n    \n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3nzvwje.d(28): Error: semicolon expected, not `:`

    /tmp/tmpj3nzvwje.d(28): Error: expression expected, not `:`

    /tmp/tmpj3nzvwje.d(28): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmpj3nzvwje.d(48): Error: semicolon expected, not `:`

    /tmp/tmpj3nzvwje.d(48): Error: expression expected, not `:`

    /tmp/tmpj3nzvwje.d(48): Error: found `arr` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3nzvwje.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int i, j;\n    string str = \"\";\n    int count = 1;\n    bool isFirst = true;\n\
    \    for (i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] == 1)\n     \
    \   {\n            if (count == 9)\n            {\n                isFirst = false;\n\
    \                count = 1;\n            }\n            else\n            {\n\
    \                count = count + 1;\n            }\n        }\n        else\n\
    \        {\n            if (count != 1)\n            {\n                str +=\
    \ isFirst ? \"\" : \" \";\n                str += count;\n                isFirst\
    \ = false;\n                count = 1;\n            }\n        }\n    }\n    if\
    \ (isFirst)\n    {\n        str += isFirst ? \"\" : \" \";\n        str += count;\n\
    \    }\n    else\n    {\n        str += \" \";\n        str += count;\n    }\n\
    \    return str;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nimport java.io.BufferedReader;\n\
    import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\
    import java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5539xidn.d(65): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5539xidn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ans = null;\n    long min = arr[0], max = arr[0];\n    for(int i=0;\
    \ i < arr.Length; i++)\n    {\n        if(arr[i] < min)\n            min = arr[i];\n\
    \        if(arr[i] > max)\n            max = arr[i];\n    }\n    if(min != max)\n\
    \        min = min < 9L ? 9L : min - 1;\n    \n    long[] arr2 = arr.ToArray();\n\
    \    Array.Sort(arr2);\n    for(int i=0; i < arr2.Length; i++)\n    {\n      \
    \  if(arr2[i] > min)\n            arr2[i] = 9L;\n    }\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp85omu6b6.d(43): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp85omu6b6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int n = arr.Length;\n    int[] result = new int[n];\n    int[] tmp = new int[n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        result[i] = -1;\n        tmp[i]\
    \ = arr[i];\n    }\n    for (int i = 1; i < 10; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            if (tmp[j] >= i && tmp[j] <= 9)\n\
    \            {\n                result[j] = i;\n                break;\n     \
    \       }\n        }\n    }\n    tmp = result;\n    result = new string[n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        result[i] = \"One\";\n    }\n\
    \    for (int i = 0; i < n; i++)\n    {\n        if (tmp[i] > 0)\n        {\n\
    \            result[i] = \"One\" + tmp[i].ToString();\n        }\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 tags=c#,sorting,arrays |>\n<| a |>\nFor\
    \ anyone who wants to know how to do this with Linq\n<code>\nvar list = new[]\n\
    {\n    new { Value = 2, Name= \"Two\"},\n    new { Value = 5, Name= \"Five\"},\n\
    \    new { Value = 4, Name= \"Four\"},\n    new { Value = 8, Name= \"Eight\"},\n\
    \    new { Value = 7, Name= \"Seven\"},\n    new { Value = 1, Name= \"One\"},\n\
    \    new { Value = 6, Name= \"Six\"},\n    new { Value = 3, Name= \"Three\"},\n\
    \    new { Value = 9, Name= \"Nine\"}\n};\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_95_e44.d(58): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_95_e44.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long min = arr[0];\n    long max = arr[0];\n    for(int i = 1; i < arr.length;\
    \ ++i)\n    {\n        if(arr[i] < min)\n        {\n            min = arr[i];\n\
    \        }\n        else if(arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n    }\n    if(min < 1)\n    {\n        throw new IllegalArgumentException(\"\
    Array has at least one non-positive number\");\n    }\n    if(max > 9)\n    {\n\
    \        throw new IllegalArgumentException(\"Array has at least one number greater\
    \ than 9\");\n    }\n    \n    long start = min;\n    long end = max;\n    string[]\
    \ array = new string[(int) (max - min + 1) + 1];\n    for(int i = 0; i < arr.length;\
    \ ++i)\n    {\n        if(arr[i] < start)\n        {\n            array[0] +=\
    \ \"One\";\n        }\n        else if(arr[i] > end)\n        {\n            array[array.length\
    \ - 1] += \"Nine\";\n        }\n        else\n        {\n            array[(int)\
    \ (arr[i] - start + 1)] += \"One\";\n        }\n    }\n    return array;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3ktvs6t.d(48): Error: C style cast illegal, use `cast(int)(max
    - min + 1)`

    /tmp/tmpv3ktvs6t.d(61): Error: C style cast illegal, use `cast(int)(arr[i] - start
    + 1)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3ktvs6t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    \n    int min = min(arr.length);\n\
    \    int max = max(arr.length);\n    for (int i = 0; i < arr.length; i++)\n  \
    \  {\n        int current = arr[i];\n        \n        int pos = i;\n        \n\
    \        while (true)\n        {\n            if (current > max)\n           \
    \ {\n                current = current-max;\n                break;\n        \
    \    }\n            if (current < min)\n            {\n                current\
    \ = max-min;\n                break;\n            }\n            \n          \
    \  result[pos++] = Names[current];\n            \n            current = current\
    \ + 1;\n            \n            if (current > max)\n            {\n        \
    \        break;\n            }\n            if (current < min)\n            {\n\
    \                break;\n            }\n            \n        }\n    }\n    \n\
    \    for (int i = 0; i < result.length; i++)\n    {\n        result[i] = swap(result[i]);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpid3xsxsg.d(26): Error: undefined identifier `min`, did you mean
    function `main`?

    /tmp/tmpid3xsxsg.d(27): Error: undefined identifier `max`, did you mean function
    `fmax`?

    /tmp/tmpid3xsxsg.d(30): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmpid3xsxsg.d(47): Error: undefined identifier `Names`

    /tmp/tmpid3xsxsg.d(65): Error: undefined identifier `swap`, did you mean template
    `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpid3xsxsg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0) {\n        return new string[] {};\n    }\n    \n    long[]\
    \ longs = arr.Clone();\n    \n    long[] sorted = by_length(longs);\n    \n  \
    \  int minLength = longs.Min();\n    int maxLength = longs.Max();\n    \n    foreach\
    \ (long l, sorted) {\n        if (l == 1L) {\n            sorted.Remove(l);\n\
    \        }\n    }\n    \n    int[] digits = new int[maxLength - minLength + 1];\n\
    \    \n    foreach (long l, sorted) {\n        digits[l - minLength] = 1;\n  \
    \  }\n    \n    Array.Sort(digits);\n    \n    string[] result = new string[sorted.Count];\n\
    \    \n    foreach (int d, digits) {\n        int index = sorted.BinarySearch(d\
    \ > 0 ? \"One\" : \"Zero\");\n        if (index == -1) {\n            return new\
    \ string[] {};\n        }\n        result[index] = ((d > 0) ? \"One\" : \"Zero\"\
    );\n    }\n    \n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This is an amazing answer - it gets my vote.  Thanks!  Can you comment on the\
    \ speed of this solution on larger sets of data?  I find it about a third slower\
    \ than the code in the question when I test it on 100k+ integers, even on a machine\
    \ with >1GHz.  It might be fast enough for my purposes, but I'd love to hear thoughts\
    \ on the speed of the algorithm on a larger set of data.\n<|/ c |>\n<| c |>\n\
    I believe that my algorithm is O(N logN), which means for N integers you'll get\
    \ the result as fast as N logN operations. Also I've made a mistake: I didn't\
    \ count the digits between 1 and 9 when I wrote the code above :) Now it should\
    \ work correctly (I checked it on a small example and it was OK)\n<|/ c |>\n<|\
    \ c |>\nI'm still trying to figure out why the original code works in c# but not\
    \ in javascript and can't figure out why this is.\n<|/ c |>\n<| c |>\n: because\
    \ in c# you can't use anonymous types in generics, so you need to explicitly define\
    \ your types.\n<|/ c |>\n<| c |>\n: I believe that this solution is O(N logN),\
    \ since we sort by length and then get the index of each digit of the number in\
    \ sorted array. Another approach would be O(N lg N), but I'm not sure how to write\
    \ it :)\n<|/ c |>\n<| a tags=sorting,algorithm,c# |>\n<code>\n\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprigpb9t7.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmprigpb9t7.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmprigpb9t7.d(35): Error: declaration expected, not `foreach`

    /tmp/tmprigpb9t7.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprigpb9t7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ n = arr.length;\n  if (n==0) return arr;\n  // get first and last index\n  int\
    \ first = 0;\n  int last = n-1;\n  // get middle index\n  int mid = 0;\n  while\
    \ (first < last)\n  {\n    mid = first + (last - first)/2;\n    if (arr[mid] >\
    \ 9) last = mid;\n    else if (arr[mid] < 1) first = mid+1;\n    else break;\n\
    \  }\n  // reverse array\n  long[] res = new long[n];\n  for (int i=0; i<n; i++)\n\
    \    res[first+i] = arr[i];\n  // reverse string\n  String result = \"\";\n  for\
    \ (int i=0; i<n; i++)\n  {\n    result+=arr[i];\n    if (i < n-1) result+=\",\
    \ \";\n  }\n  return new string[] {result.substring(0, result.length()-1), res};\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy7r7e20s.d(49): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpy7r7e20s.d(49): Error: found `}` when expecting `;` following statement

    /tmp/tmpy7r7e20s.d(49): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7r7e20s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ result = new string[arr.length];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6bphm0lw.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6bphm0lw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long[] one_to_nine = new long[] {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L};\n   \
    \ long[] ten_to_nine = new long[] {10L, 20L, 30L, 40L, 50L, 60L, 70L, 80L, 90L};\n\
    \    long[] hundreds_to_nine = new long[] {100L, 200L, 300L, 400L, 500L, 600L,\
    \ 700L, 800L, 900L};\n    \n    if(arr.length == 0)\n        return arr;\n   \
    \ \n    if(arr.length == 1)\n    {\n        return one_to_nine[arr[0]];\n    }\n\
    \    \n    int length_of_the_array = arr.length;\n    \n    long[] sorted_arr\
    \ = new long[length_of_the_array];\n    \n    long min = long.MAX_VALUE;\n   \
    \ long max = 0;\n    \n    for(int i = 0; i < length_of_the_array; i++)\n    {\n\
    \        if(arr[i] < min)\n            min = arr[i];\n        else if(arr[i] >\
    \ max)\n            max = arr[i];\n    }\n    \n    long temp_min = min;\n   \
    \ long temp_max = max;\n    \n    while(temp_max >= ten_to_nine[length_of_the_array-1])\n\
    \    {\n        temp_max -= ten_to_nine[length_of_the_array-1];\n        temp_min--;\n\
    \        length_of_the_array--;\n    }\n    \n    while(temp_max >= hundreds_to_nine[length_of_the_array-1])\n\
    \    {\n        temp_max -= hundreds_to_nine[length_of_the_array-1];\n       \
    \ temp_min--;\n        length_of_the_array--;\n    }\n    \n    while(temp_min\
    \ <= temp_max)\n    {\n        sorted_arr[length_of_the_array] = temp_min;\n \
    \       temp_max += ten_to_nine[length_of_the_array-1];\n        length_of_the_array++;\n\
    \    }\n    \n    sorted_arr[0] = min;\n    \n    for(int i = 0; i < length_of_the_array;\
    \ i++)\n    {\n        sorted_arr[i+1] = one_to_nine[arr[i]];\n    }\n    \n \
    \   return sorted_arr;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,arrays,string,c#\
    \ dscore=0 |>\nThe approach with integer array is simple and clear, however the\
    \ integer array is needed to be converted to a string array, which requires memory\
    \ allocation. It can be avoided using the new char[maxLen] method, which will\
    \ allocate memory for you without any additional memory allocation operations.\n\
    <code>\nusing System;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppcbipnp7.d(24): Error: semicolon expected, not `{`

    /tmp/tmppcbipnp7.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmppcbipnp7.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmppcbipnp7.d(25): Error: semicolon expected, not `{`

    /tmp/tmppcbipnp7.d(25): Error: found `}` when expecting `;` following statement

    /tmp/tmppcbipnp7.d(25): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmppcbipnp7.d(26): Error: semicolon expected, not `{`

    /tmp/tmppcbipnp7.d(26): Error: found `}` when expecting `;` following statement

    /tmp/tmppcbipnp7.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmppcbipnp7.d(84): Error: found `<` instead of statement

    /tmp/tmppcbipnp7.d(90): Error: found `unittest` instead of statement

    /tmp/tmppcbipnp7.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmppcbipnp7.d(100): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int length = arr.length;\n    long[] reverse = new long[length];\n    for (int\
    \ i = 0; i < length; i++)\n    {\n        reverse[i] = (arr[i] % 10);\n    }\n\
    \    \n    sort(reverse);\n    \n    int start = 0;\n    \n    for (int i = 0;\
    \ i < length; i++)\n    {\n        if (reverse[i] > 0)\n        {\n          \
    \  swap(arr, reverse + i, reverse + start);\n            start++;\n        }\n\
    \    }\n    \n    string[] result = new string[arr.length];\n    for (int i =\
    \ 0; i < arr.length; i++)\n    {\n        result[i] = name(reverse[i], 10);\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqp6qg4f.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmpxqp6qg4f.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxqp6qg4f.d(39): Error: undefined identifier `swap`, did you mean template
    `wrap(Targets...) if (Targets.length >= 1 && allSatisfy!(isMutable, Targets))`?

    /tmp/tmpxqp6qg4f.d(47): Error: undefined identifier `name`, did you mean enum
    member `MIname`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqp6qg4f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result;\n    int maxLen = 0;\n    int i;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm8q24t3j.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm8q24t3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  var\
    \ len = arr.length;\n  var result = [];\n  for (var i = 0; i < len; i++)\n  {\n\
    \    var item = arr[i];\n    if (item >= 1 && item <= 9)\n      result.push(NumberToWord(item));\n\
    \  }\n  if (result.length > 0)\n    result.sort();\n  else\n    result = [''];\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1pgq_dcc.d(35): Error: unterminated character constant

    /tmp/tmp1pgq_dcc.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1pgq_dcc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    int min = arr.min();\n    int max = arr.max();\n\
    \    int[] tmp = new int[len];\n    int[] reversed = new int[len];\n    \n   \
    \ for (int i = 0; i < len; i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n\
    \            tmp[i] = arr[i];\n        } else if (arr[i] != min) {\n         \
    \   throw new RuntimeException(\"Invalid array\");\n        } else {\n       \
    \     tmp[i] = min - i;\n        }\n    }\n    \n    for (int i = 0; i < len;\
    \ i++) {\n        reversed[len - 1 - i] = tmp[i];\n    }\n    \n    string[] result\
    \ = new string[len];\n    for (int i = 0; i < len; i++) {\n        result[i] =\
    \ reversed[i] + \" \" + names[i];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1xcqouzr.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp1xcqouzr.d(25): Error: no property `min` for type `long[]`

    /tmp/tmp1xcqouzr.d(26): Error: no property `max` for type `long[]`

    /tmp/tmp1xcqouzr.d(32): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp1xcqouzr.d(34): Error: undefined identifier `RuntimeException`

    /tmp/tmp1xcqouzr.d(46): Error: incompatible types for `(reversed[cast(ulong)i])
    + (" ")`: `int` and `string`

    /tmp/tmp1xcqouzr.d(46): Error: undefined identifier `names`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xcqouzr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  long\
    \ lower = 0, upper = arr.length - 1;\n  string ret = \"\";\n  do\n  {\n    if\
    \ (arr[upper] > 9L)\n    {\n      ret += by_length(arr.slice(1, upper)).first;\n\
    \      arr[upper] = 9L;\n    }\n    else if (arr[upper] < 1L)\n    {\n      arr[upper]\
    \ = 9L;\n      ret += by_length(arr.slice(1, upper)).first;\n    }\n    else\n\
    \    {\n      arr[upper] = arr[upper] + by_length(arr.slice(1, upper)).length(1)\
    \ + lower;\n      ret += by_length(arr.slice(1, upper)).first;\n      lower =\
    \ by_length(arr.slice(1, upper)).length(1);\n    }\n  } while (upper - lower >\
    \ 1);\n  return ret;\n}\n</code>\n<|/ a |>\n<| c |>\nSorry, but this doesn't work\
    \ for the example given above. `by_length` should return [\"Two\",\"One\",\"One\"\
    ,\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\n<|/ c |>\n<| a |>\n\
    I took the liberty to simplify your problem a bit, and I used a map instead of\
    \ an array to store your values, and I added some comments. \nYou can now simply\
    \ iterate through the map and get a sorted list of all the values.\n<code>\nimport\
    \ std.stdio;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9cunq4jd.d(47): Error: declaration expected, not `<`

    /tmp/tmp9cunq4jd.d(50): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9cunq4jd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] int_arr = new int[arr.length];\n    for(int i=0; i<arr.length; i++) int_arr[i]\
    \ = (int)arr[i];\n    Arrays.sort(int_arr);\n    Arrays.reverse(int_arr);\n  \
    \  int sum = 0;\n    for(int i=0; i<int_arr.length; i++) {\n        sum += int_arr[i];\n\
    \    }\n    int count = 0;\n    for(int i=0; i<arr.length; i++) if(int_arr[i]\
    \ > 0 && int_arr[i] == sum) {\n        arr[count++] = i;\n    }\n    Arrays.fill(arr,\
    \ count, 0);\n    string[] result = new string[count];\n    for(int i=0; i<count;\
    \ i++) {\n        result[i] = name[int_arr[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ms4wnhb.d(25): Error: C style cast illegal, use `cast(int)arr[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ms4wnhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8or3movl.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8or3movl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164570
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return new[]{};\n    \n    // find first 1 and\
    \ swap it to front\n    int start = 1;\n    \n    for (int i = 1; i < arr.length;\
    \ ++i)\n    {\n        if (arr[i] == 1)\n        {\n            swap(arr, start,\
    \ i);\n            start = i;\n        }\n    }\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbudacrz.d(25): Error: basic type expected, not `[`

    /tmp/tmplbudacrz.d(25): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmplbudacrz.d(30): Error: declaration expected, not `for`

    /tmp/tmplbudacrz.d(30): Error: no identifier for declarator `i`

    /tmp/tmplbudacrz.d(30): Error: declaration expected, not `<`

    /tmp/tmplbudacrz.d(30): Error: declaration expected, not `++`

    /tmp/tmplbudacrz.d(35): Error: no identifier for declarator `start`

    /tmp/tmplbudacrz.d(35): Error: declaration expected, not `=`

    /tmp/tmplbudacrz.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplbudacrz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if(arr.length==0)\
    \ return new string[]{};\n  if(arr.length==1) return new string[]{arr[arr.length-1].ToString()};\n\
    \  int left = 0;\n  int right = arr.length-1;\n  while(true) \n  {\n    if(arr[left]<=9\
    \ && arr[right]<=9)\n    {\n      if(arr[left]>arr[right]) swap(arr[left],arr[right]);\n\
    \      left++;\n      right--;\n    }\n    else\n    {\n      if(arr[left]<arr[right])\
    \ swap(arr[left],arr[right]);\n      if(left==right) break;\n      left++;\n \
    \     right--;\n    }\n  }\n  string[] res = new string[arr.length-1];\n  for(int\
    \ i=0;i<arr.length-1;i++) res[i] = arr[arr.length-1-i]; \n  return res;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis isn't correct. This will fail for some values, eg `by_length([3L,\
    \ 10L, 3L, 1L, 2L, 1L, 5L, 5L, 3L, 1L, 3L, 10L, 2L, 3L, 10L, 3L, 5L, 2L, 3L, 10L,\
    \ 2L, 2L, 3L, 10L, 3L, 5L, 5L, 3L, 10L, 2L, 2L, 1L])`\n<|/ c |>\n<| c |>\n: Yes,\
    \ you're right. Fixed it now. I forgot the second `while`\n<|/ c |>\n<| c |>\n\
    : That fixed it.\n<|/ c |>\n<| a tags=algorithm,c#,sorting |>\nYou might want\
    \ to have a look at this implementation. \nIt seems to do the trick for me.\n\
    <|/ a dscore=2 |>\n<| c |>\nA little more explanation will make your answer much\
    \ better.\n<|/ c |>\n<| c |>\nThe link leads to a \"Page not found\" message.\n\
    <|/ c |>\n<| c |>\nLooks like this has been taken down due to its inability to\
    \ work with negative numbers.\n<|/ c |>\n<| a dscore=1 |>\nHere is my implementation\
    \ for C# that uses a binary search to find the lowest and highest numbers in the\
    \ list, then puts the values in the right order in the right array:\n<code>\n\
    \        static string[] SortingAlgorithm(long[] numbers)\n        {\n       \
    \     if (numbers == null || numbers.Length == 0)\n            {\n           \
    \     return new string[] { \"\" };\n            }\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q2a7yp8.d(24): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmp6q2a7yp8.d(25): Error: declaration expected, not `if`

    /tmp/tmp6q2a7yp8.d(28): Error: declaration expected, not `while`

    /tmp/tmp6q2a7yp8.d(33): Error: no identifier for declarator `left`

    /tmp/tmp6q2a7yp8.d(33): Error: declaration expected, not `++`

    /tmp/tmp6q2a7yp8.d(34): Error: no identifier for declarator `right`

    /tmp/tmp6q2a7yp8.d(34): Error: declaration expected, not `--`

    /tmp/tmp6q2a7yp8.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q2a7yp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int length = 0;\n    string res = \"\";\n    long temp = arr[0];\n    \n  \
    \  for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i] > temp)\n   \
    \     {\n            temp = arr[i];\n            length++;\n        }\n    }\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6_0ccgy.d(36): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6_0ccgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int n = arr.length;\n    if (n >= 10) return by_length(arr);\n    \n    int[]\
    \ arr = arr;\n    \n    Arrays.sort(arr);\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy26jr9mq.d(30): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy26jr9mq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int n = arr.length;\n    int i, resultLength = 1;\n    string[] result = new\
    \ string[n];\n    \n    for (i=0; i<n; i++) {\n        if (i >= 1 && i <= 9) {\n\
    \            result[resultLength++] = to_string(arr[i]);\n        }\n    }\n \
    \   \n    // Now reverse the array and copy it into another array:\n    int j\
    \ = resultLength-1;\n    while (j >= 0) {\n        result[j] = to_string(arr[j--]);\n\
    \    }\n    \n    // Finally, convert the result array back into a string:\n \
    \   return to_string(result);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27fgzfay.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp27fgzfay.d(30): Error: undefined identifier `to_string`

    /tmp/tmp27fgzfay.d(37): Error: undefined identifier `to_string`

    /tmp/tmp27fgzfay.d(41): Error: undefined identifier `to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27fgzfay.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result= new string[arr.Length];\n    for(var i=0; i<arr.Length; i++)\n\
    \    {\n        if (arr[i]<9)\n        {\n            result[i]= (arr[i]<1) ?\
    \ \"One\" : \"Zero\";\n        }\n        else if (arr[i]<100)\n        {\n  \
    \          result[i]= (arr[i]<10) ? \"Two\" : (arr[i]<100) ? \"Three\" : (arr[i]<1000)\
    \ ? \"Four\" : (arr[i]<10000) ? \"Five\" : (arr[i]<100000) ? \"Six\" : (arr[i]<1000000)\
    \ ? \"Seven\" : \"Eight\";\n        }\n        else if (arr[i]<1000)\n       \
    \ {\n            result[i]= (arr[i]<1000) ? \"Eight\" : (arr[i]<10000) ? \"Nine\"\
    \ : ((arr[i]<100000) ? \"Ten\" : (arr[i]<10000000) ? \"Eleven\" : (arr[i]<100000000)\
    \ ? \"Twelve\" : (arr[i]<1000000000) ? \"Thirteen\" : (arr[i]<10000000000) ? \"\
    Fourteen\" : (arr[i]<100000000000) ? \"Fifteen\" : (arr[i]<1000000000000) ? \"\
    Sixteen\" : (arr[i]<10000000000000) ? \"Seventeen\" : (arr[i]<100000000000000)\
    \ ? \"Eighteen\" : (arr[i]<1000000000000000) ? \"Nineteen\" : \"Neither\");\n\
    \        }\n    }\n    for(int i=result.Length-1;i>=0;i--)\n    {\n        result[i]=\
    \ \"Zero\";\n    }\n    return result.ToArray();\n}\n</code>\n<|/ a tags=c#,arrays,list\
    \ |>\n<| c |>\nThis is a great way to make my code more readable - thanks!\n<|/\
    \ c |>\n<| a |>\nWhat about this code?\n<code>\nclass Program\n{\n    static void\
    \ Main(string[] args)\n    {\n        int[] arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10 };\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d_krg0t.d(46): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d_krg0t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ j;\n  var result = new String[arr.length];\n  for (int i = 0; i < arr.length;\
    \ i++) \n  {\n    for (j = arr[i]; j <= 9; j ++) \n    {\n      if (arr[i] >=\
    \ 1)\n      {\n        int n = int.valueOf(j.toString());\n        if (j == 1)\n\
    \        {\n          result[i] = \"One\";\n        }\n        else if (j == 2)\n\
    \        {\n          result[i] = \"Two\";\n        }\n        else if (j == 3)\n\
    \        {\n          result[i] = \"Three\";\n        }\n        else if (j ==\
    \ 4)\n        {\n          result[i] = \"Four\";\n        }\n        else if (j\
    \ == 5)\n        {\n          result[i] = \"Five\";\n        }\n        else if\
    \ (j == 6)\n        {\n          result[i] = \"Six\";\n        }\n        else\
    \ if (j == 7)\n        {\n          result[i] = \"Seven\";\n        }\n      \
    \  else if (j == 8)\n        {\n          result[i] = \"Eight\";\n        }\n\
    \        else if (j == 9)\n        {\n          result[i] = \"Nine\";\n      \
    \  }\n      }\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 tags=arrays,java\
    \ |>\n<| a |>\n<code>\npublic class ArrayByLength {\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6px909br.d(74): Error: declaration expected, not `<`

    /tmp/tmp6px909br.d(83): Error: declaration expected, not `assert`

    /tmp/tmp6px909br.d(84): Error: declaration expected, not `assert`

    /tmp/tmp6px909br.d(85): Error: declaration expected, not `assert`

    /tmp/tmp6px909br.d(86): Error: declaration expected, not `assert`

    /tmp/tmp6px909br.d(87): Error: declaration expected, not `assert`

    /tmp/tmp6px909br.d(88): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6px909br.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var lengths = new []{\"\", \"\", \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    var leng = arr.Length;\n\
    \    var a = new [](leng);\n    var b = new [](leng);\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvjuv762.d(24): Error: basic type expected, not `[`

    /tmp/tmpsvjuv762.d(24): Error: semicolon expected, not `{`

    /tmp/tmpsvjuv762.d(24): Error: found `}` when expecting `;` following statement

    /tmp/tmpsvjuv762.d(24): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpsvjuv762.d(26): Error: basic type expected, not `[`

    /tmp/tmpsvjuv762.d(27): Error: basic type expected, not `[`

    /tmp/tmpsvjuv762.d(28): Error: found `unittest` instead of statement

    /tmp/tmpsvjuv762.d(38): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvjuv762.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] a = new int[arr.length];\n    for (int i = 0; i < arr.length; i++) {\n\
    \        a[i] = 0;\n        if (arr[i] > 9) {\n            while (arr[i] > 9)\
    \ {\n                a[i] = a[i] << 1;\n                a[i] = a[i] | 1;\n   \
    \             arr[i] = arr[i] / 10;\n            }\n            a[i] = a[i] <<\
    \ 1;\n            a[i] = a[i] | 1;\n        } else {\n            a[i] = arr[i];\n\
    \        }\n    }\n    \n    StringBuilder sb = new StringBuilder();\n    for\
    \ (int i = 0; i < arr.length; i++) {\n        sb.append(arr[i].toString()).append(\"\
    \ \");\n    }\n    \n    Arrays.sort(a, new Comparator<Integer>() {\n        public\
    \ int compare(Integer o1, Integer o2) {\n            return o1.compareTo(o2);\n\
    \        }\n    });\n    \n    StringBuilder reversed = new StringBuilder();\n\
    \    for (int i = a.length - 1; i >= 0; i--) {\n        reversed.append(a[i].toString()).append(\"\
    \ \");\n    }\n    \n    for (int i = 0; i < arr.length; i++) {\n        sb.setCharAt(0,\
    \ reversed.charAt(i));\n    }\n    \n    return sb.toString().trim().split(\"\
    \ \");\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n/**\n * Given\
    \ an array of numbers, return the names of the integers that are between 1 and\
    \ 9 inclusive.\n * \n * For example:\n * [\n *   2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L\n\
    \ * ]\n * would return \"Two One One Four Five Six Seven Eight Nine\".\n * \n\
    \ * If the array is empty, return an empty array:\n * []\n * \n * If the array\
    \ has any strange number ignore it:\n * [\n *   1L, -1L, 55L\n * ]\n */\npublic\
    \ String[] intToString(long[] arr) {\n    \n    long[] temp = Arrays.copyOf(arr,\
    \ arr.length);\n    Arrays.sort(temp);\n    \n    // get the max number in the\
    \ array\n    long max = Long.MIN_VALUE;\n    for (int i = 0; i < arr.length; i++)\
    \ {\n        if (temp[i] > max) {\n            max = temp[i];\n        }\n   \
    \ }\n    \n    // get all the numbers greater than max\n    List<Long> numbers\
    \ = new ArrayList<>();\n    for (int i = 0; i < arr.length; i++) {\n        if\
    \ (temp[i] > max) {\n            numbers.add(temp[i]);\n        }\n    }\n   \
    \ \n    // convert to strings\n    String[] names = new String[numbers.size()];\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        String number = String.valueOf(numbers.get(i));\n\
    \        int index = -1;\n        while (number.length() > 4) {\n            if\
    \ (number.charAt(number.\nunittest\n{\n    alias candidate = by_length;\n\n  \
    \  assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp59m0lsxk.d(45): Error: found `>` when expecting `,`

    /tmp/tmp59m0lsxk.d(46): Error: found `public` instead of statement

    /tmp/tmp59m0lsxk.d(49): Error: found `}` when expecting `,`

    /tmp/tmp59m0lsxk.d(62): Error: declaration expected, not `<`

    /tmp/tmp59m0lsxk.d(86): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp59m0lsxk.d(86): Error: no identifier for declarator `Arrays.sort(temp)`

    /tmp/tmp59m0lsxk.d(90): Error: declaration expected, not `for`

    /tmp/tmp59m0lsxk.d(90): Error: no identifier for declarator `i`

    /tmp/tmp59m0lsxk.d(90): Error: declaration expected, not `<`

    /tmp/tmp59m0lsxk.d(90): Error: no identifier for declarator `i`

    /tmp/tmp59m0lsxk.d(90): Error: declaration expected, not `++`

    /tmp/tmp59m0lsxk.d(93): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp59m0lsxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.length == 0)\n        return arr;\n    long[] ret = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; ++i)\n        ret[i] = arr[i] / 10;\n   \
    \ Arrays.sort(ret);\n    long[] reversed = new long[ret.length];\n    for(int\
    \ i = 0; i < ret.length; i++)\n        reversed[ret.length - 1 - i] = ret[i];\n\
    \    char[] chars = new char[ret.length];\n    for(int i = 0; i < ret.length;\
    \ ++i)\n        chars[ret.length - 1 - i] = to_string(ret[i]);\n    for(int i\
    \ = 0; i < ret.length; i++)\n        arr[i] = reversed[i];\n    Arrays.fill(chars,\
    \ ' ');\n    return chars;\n}\n</code>\n<|/ a tags=sorting,arrays,java |>\n<|\
    \ a dscore=1 |>\nThis problem can be solved in one line with lambdas and streams:\n\
    <code>\nString[] strings = {\"Two\", \"Four\", \"One\", \"Five\", \"Six\", \"\
    Three\", \"Seven\", \"Eight\", \"Nine\"};\nList<String> result = Arrays.stream(strings)\n\
    \    .mapToInt(s -> s.chars().mapToObj(c -> Character.getNumericValue(c)).sum())\n\
    \    .sorted()\n    .map(i -> strings[i / 10]).toArray(String[]::new);\n</code>\n\
    I assumed that the numbers range from 1 to 9 inclusive. So, if you don't want\
    \ to include 0 (zero), then just add 1 to the divisor:\n<code>\n    Arrays.stream(strings)\n\
    \        .mapToInt(s -> s.chars().mapToObj(c -> Character.getNumericValue(c)).sum())\n\
    \        .sorted()\n        .map(i -> strings[i / 10 + 1]).toArray(String[]::new);\n\
    </code>\n<|/ a tags=sorting,arrays,java |>\n<| a tags=sorting,arrays,java |>\n\
    I find this question interesting, so I created a quick and dirty solution based\
    \ on some ideas from other answers. I created a new class for the numbers I wanted\
    \ to use (so I didn't have to cast them every time) and some helper functions.\
    \ The code is pretty self-explanatory, and I hope it helps:\n<code>\npublic class\
    \ Main {\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp13wx6xvl.d(41): Error: declaration expected, not `<`

    /tmp/tmp13wx6xvl.d(47): Error: no identifier for declarator `List`

    /tmp/tmp13wx6xvl.d(47): Error: declaration expected, not `<`

    /tmp/tmp13wx6xvl.d(51): Error: declaration expected, not `<`

    /tmp/tmp13wx6xvl.d(52): Error: unterminated character constant

    /tmp/tmp13wx6xvl.d(58): Error: declaration expected, not `<`

    /tmp/tmp13wx6xvl.d(61): Error: unterminated character constant

    /tmp/tmp13wx6xvl.d(68): Error: declaration expected, not `assert`

    /tmp/tmp13wx6xvl.d(69): Error: declaration expected, not `assert`

    /tmp/tmp13wx6xvl.d(70): Error: declaration expected, not `assert`

    /tmp/tmp13wx6xvl.d(71): Error: declaration expected, not `assert`

    /tmp/tmp13wx6xvl.d(72): Error: declaration expected, not `assert`

    /tmp/tmp13wx6xvl.d(73): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp13wx6xvl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if\
    \ (arr.length == 0) \n    return [];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdc9y79k.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdc9y79k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  List<string> result = new List<string>();\n    long min = 1;\n    long max\
    \ = arr[0];\n    \n    for(int i = 1; i < arr.Length; i++)\n    {\n        if(arr[i]\
    \ > max)\n        {\n            max = arr[i];\n        }\n    }\n    for(int\
    \ i = 0; i < arr.Length; i++)\n    {\n        if(arr[i] > min)\n        {\n  \
    \          if(arr[i] == max)\n            {\n                result.Add(\"One\"\
    );\n            }\n            else if(arr[i] == max)\n            {\n       \
    \         result.Add(\"Two\");\n            }\n            else if(arr[i] == max)\n\
    \            {\n                result.Add(\"Three\");\n            }\n      \
    \      else if(arr[i] == max)\n            {\n                result.Add(\"Four\"\
    );\n            }\n            else if(arr[i] == max)\n            {\n       \
    \         result.Add(\"Five\");\n            }\n            else if(arr[i] ==\
    \ max)\n            {\n                result.Add(\"Six\");\n            }\n \
    \           else if(arr[i] == max)\n            {\n                result.Add(\"\
    Seven\");\n            }\n            else if(arr[i] == max)\n            {\n\
    \                result.Add(\"Eight\");\n            }\n            else if(arr[i]\
    \ == max)\n            {\n                result.Add(\"Nine\");\n            }\n\
    \        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnt0ww8z.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpqnt0ww8z.d(24): Error: found `>` when expecting `;` following statement

    /tmp/tmpqnt0ww8z.d(24): Error: expression expected, not `)`

    /tmp/tmpqnt0ww8z.d(24): Error: found `;` when expecting `)`

    /tmp/tmpqnt0ww8z.d(25): Error: found `long` when expecting `;` following statement

    /tmp/tmpqnt0ww8z.d(79): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnt0ww8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var len = arr.length;\n    if (len > 0)\n    {\n        var nums = arr.ToArray();\n\
    \        var maxNum = Math.Max(nums.Max());\n        var one = Enum.Parse<Enum>(typeof(NinetyNine),\
    \ \"One\");\n        var two = Enum.Parse<Enum>(typeof(NinetyNine), \"Two\");\n\
    \        var three = Enum.Parse<Enum>(typeof(NinetyNine), \"Three\");\n      \
    \  var four = Enum.Parse<Enum>(typeof(NinetyNine), \"Four\");\n        var five\
    \ = Enum.Parse<Enum>(typeof(NinetyNine), \"Five\");\n        var six = Enum.Parse<Enum>(typeof(NinetyNine),\
    \ \"Six\");\n        var seven = Enum.Parse<Enum>(typeof(NinetyNine), \"Seven\"\
    );\n        var eight = Enum.Parse<Enum>(typeof(NinetyNine), \"Eight\");\n   \
    \     var nine = Enum.Parse<Enum>(typeof(NinetyNine), \"Nine\");\n        var\
    \ ten = Enum.Parse<Enum>(typeof(NinetyNine), \"Ten\");\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmgod_p60.d(29): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(29): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(30): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(30): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(31): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(31): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(32): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(32): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(33): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(33): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(34): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(34): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(35): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(35): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(36): Error: semicolon expected, not `>`

    /tmp/tmpmgod_p60.d(36): Error: found `>` instead of statement

    /tmp/tmpmgod_p60.d(37): Error: semicolon expected, not `'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] result = new string[arr.length];\n    int i = 0; \n    int j = 0;\n\
    \    int k = 0;\n    int index = 0;\n    foreach(long x in arr) {\n        if(x\
    \ < 1 || x > 9) {\n            continue;\n        }\n        index = x;\n    \
    \    if(x < 10) {\n            result[i] = \"One\";\n            i++;\n      \
    \  }\n        else if(x < 100) {\n            result[i] = \"Two\";\n         \
    \   i++;\n        }\n        else if(x < 1000) {\n            result[i] = \"Three\"\
    ;\n            i++;\n        }\n        else if(x < 10000) {\n            result[i]\
    \ = \"Four\";\n            i++;\n        }\n        else if(x < 100000) {\n  \
    \          result[i] = \"Five\";\n            i++;\n        }\n        else if(x\
    \ < 1000000) {\n            result[i] = \"Six\";\n            i++;\n        }\n\
    \        else if(x < 10000000) {\n            result[i] = \"Seven\";\n       \
    \     i++;\n        }\n        else if(x < 100000000) {\n            result[i]\
    \ = \"Eight\";\n            i++;\n        }\n        else if(x < 1000000000) {\n\
    \            result[i] = \"Nine\";\n            i++;\n        }\n        else\
    \ {\n            result[i] = \"Zero\";\n            i++;\n        }\n    }\n \
    \   foreach(string s in result) {\n        if(!s.equals(\"Zero\")) {\n       \
    \     k = s.indexOf('.');\n            while(k != -1) {\n                j = k;\n\
    \                k = s.indexOf('.', k + 1);\n                if((j - i) != 0)\
    \ {\n                    String t = s.substring(i, j);\n                    s\
    \ = s.substring(0, i) + s.substring(j + 1, s.length());\n                    t\
    \ = t.replaceAll(\"0\", \"One\");\n                    t = t.replaceAll(\"1\"\
    , \"Two\");\n                    t = t.replaceAll(\"2\", \"Three\");\n       \
    \             t = t.replaceAll(\"3\", \"Four\");\n                    t = t.replaceAll(\"\
    4\", \"Five\");\n                    t = t.replaceAll(\"5\", \"Six\");\n     \
    \               t = t.replaceAll(\"6\", \"Seven\");\n                    t = t.replaceAll(\"\
    7\", \"Eight\");\n                    t = t.replaceAll(\"8\", \"Nine\");\n   \
    \                 s = t.concat(\".\").append(s);\n                }\n        \
    \    }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 tags=c#,sorting,arrays\
    \ |>\n<| a dscore=1 |>\nYou can use a simple linq solution to do the job:\n<code>\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbwwi_z1.d(29): Error: found `in` when expecting `;`

    /tmp/tmpmbwwi_z1.d(75): Error: found `in` when expecting `;`

    /tmp/tmpmbwwi_z1.d(100): Error: declaration expected, not `<`

    /tmp/tmpmbwwi_z1.d(109): Error: declaration expected, not `assert`

    /tmp/tmpmbwwi_z1.d(110): Error: declaration expected, not `assert`

    /tmp/tmpmbwwi_z1.d(111): Error: declaration expected, not `assert`

    /tmp/tmpmbwwi_z1.d(112): Error: declaration expected, not `assert`

    /tmp/tmpmbwwi_z1.d(113): Error: declaration expected, not `assert`

    /tmp/tmpmbwwi_z1.d(114): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbwwi_z1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  //Sort the array from least to greatest\n    Arrays.sort(arr);\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3o7sob25.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3o7sob25.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long min = 0;\n    long max = long.MaxValue;\n    if (arr.Length > 0)\n   \
    \ {\n        int min_index = 0;\n        int max_index = 0;\n        int min_len\
    \ = arr[0].ToString().Length;\n        int max_len = long.MaxValue.ToString().Length;\n\
    \        \n        // find the index of the smallest and the largest number\n\
    \        foreach (long num in arr)\n        {\n            if (num < min)\n  \
    \          {\n                min = num;\n                min_index = arr.IndexOf(num);\n\
    \            }\n            if (num > max)\n            {\n                max\
    \ = num;\n                max_index = arr.IndexOf(num);\n            }\n     \
    \   }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2sj1ipt.d(34): Error: found `in` when expecting `;`

    /tmp/tmpg2sj1ipt.d(47): Error: found `unittest` instead of statement

    /tmp/tmpg2sj1ipt.d(57): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2sj1ipt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  ArrayList results = new ArrayList();\n    ArrayList ranges = new ArrayList();\n\
    \    \n    ArrayList nums = new ArrayList(arr.length);\n    for(int i = 0; i <\
    \ arr.length; i++) \n    {\n        long num = arr[i];\n        if(num > 0 &&\
    \ num <= 9) \n        {\n            nums.add((int) num);\n            ranges.add((int)\
    \ num);\n        }\n        else\n        {\n            continue;\n        }\n\
    \    }\n    \n    //sort the ranges\n    ArrayList ranges_sorted = new ArrayList(ranges);\n\
    \    Collections.sort(ranges_sorted, Collections.reverseOrder());\n    \n    for(int\
    \ i = 0; i < ranges.size(); i++) \n    {\n        results.add(names[ranges_sorted.get(i)]);\n\
    \    }\n    \n    //reverse the list\n    ArrayList temp = new ArrayList();\n\
    \    for(int i = 0; i < results.size(); i++) \n    {\n        temp.add(results.get(i));\n\
    \    }\n    results = temp;\n    \n    //now replace each number with the corresponding\
    \ name\n    for(int i = 0; i < results.size(); i++) \n    {\n        long num\
    \ = results.get(i);\n        results.set(i, names[(int) num]);\n    }\n    \n\
    \    //now sort them again\n    Collections.sort(results);\n    \n    //now put\
    \ the names back into the original array\n    arr = new long[results.size()];\n\
    \    for(int i = 0; i < arr.length; i++) \n    {\n        arr[i] = (long) results.get(i);\n\
    \    }\n    \n    return results;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprpihjh7t.d(33): Error: C style cast illegal, use `cast(int)num`

    /tmp/tmprpihjh7t.d(34): Error: C style cast illegal, use `cast(int)num`

    /tmp/tmprpihjh7t.d(63): Error: C style cast illegal, use `cast(int)num`

    /tmp/tmprpihjh7t.d(73): Error: C style cast illegal, use `cast(long)results.get(i)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprpihjh7t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int n = arr.length;\n    if (arr.isEmpty()) return new string[0];\n    bool\
    \ swapped=false;\n    string res=new string[n];\n    string one=\"One\";\n   \
    \ string two=\"Two\";\n    string three=\"Three\";\n    string four=\"Four\";\n\
    \    string five=\"Five\";\n    string six=\"Six\";\n    string seven=\"Seven\"\
    ;\n    string eight=\"Eight\";\n    string nine=\"Nine\";\n    string ten=\"Ten\"\
    ;\n    string eleven=\"Eleven\";\n    string twelve=\"Twelve\";\n    string thirteen=\"\
    Thirteen\";\n    string fourteen=\"Fourteen\";\n    string fifteen=\"Fifteen\"\
    ;\n    string sixteen=\"Sixteen\";\n    string seventeen=\"Seventeen\";\n    string\
    \ eighteen=\"Eighteen\";\n    string nineteen=\"Nineteen\";\n    string twenty=\"\
    Twenty\";\n    string thirty=\"Thirty\";\n    string fourty=\"Fourty\";\n    string\
    \ fifty=\"Fifty\";\n    string sixty=\"Sixty\";\n    string seventy=\"Seventy\"\
    ;\n    string eighty=\"Eighty\";\n    string ninety=\"Ninety\";\n    string hundred=\"\
    Hundred\";\n    string thousand=\"Thousand\";\n    string million=\"Million\"\
    ;\n    string billion=\"Billion\";\n    string trillion=\"Trillion\";\n    string\
    \ quadrillion=\"Quadrillion\";\n    string quintillion=\"Quintillion\";\n    string\
    \ sextillion=\"Sextillion\";\n    string septillion=\"Septellion\";\n    string\
    \ octillion=\"Octillion\";\n    string nonillion=\"Nonillion\";\n    string decillion=\"\
    Decillion\";\n    string undecillion=\"Undecillion\";\n    string duodecillion=\"\
    Duodecillion\";\n    string tredecillion=\"Tredecillion\";\n    string quattuordecillion=\"\
    Quattuordecillion\";\n    string sexdecillion=\"Sexdecillion\";\n    string septendecillion=\"\
    Septendecillion\";\n    \nunittest\n{\n    alias candidate = by_length;\n\n  \
    \  assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxizhftq.d(74): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxizhftq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int arrSize = (int) arr.Length;\n    long[] reversed = reversed(arrSize);\n\
    \    string[] result = new string[arrSize];\n    for(int i=0; i < arrSize; i++)\n\
    \    {\n        if (i >= 0 && i < 9)\n        {\n            result[i] = One[reversed[i]];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c#\
    \ |>\n<| c |>\nthanks for the help but this code is not compiling. it says that\
    \ the method \"getArray\" that you are calling is unknown. what can I do to fix\
    \ this?\n<|/ c |>\n<| c |>\nI forgot to rename the method to \"getArray\", I've\
    \ updated my code so it will compile now.\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ to have helped!\n<|/ c |>\n<| a dscore=1 tags=arrays,sorting,c# |>\nI wrote\
    \ a C# class that you can use to solve your problem.\n<code>\nclass Program\n\
    {\n    private static string One = \"One\";\n    private static string Two = \"\
    Two\";\n    private static string Three = \"Three\";\n    private static string\
    \ Four = \"Four\";\n    private static string Five = \"Five\";\n    private static\
    \ string Six = \"Six\";\n    private static string Seven = \"Seven\";\n    private\
    \ static string Eight = \"Eight\";\n    private static string Nine = \"Nine\"\
    ;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxj3jlc9.d(24): Error: C style cast illegal, use `cast(int)arr.Length`

    /tmp/tmpqxj3jlc9.d(36): Error: declaration expected, not `<`

    /tmp/tmpqxj3jlc9.d(42): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxj3jlc9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    if (len == 0) return string[];\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4u4vbkgz.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u4vbkgz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length;\n    string out = \"\";\n    for(int i = 0; i < len;\
    \ i++)\n    {\n        long num = arr[i];\n        bool sorted = false;\n    \
    \    while(!sorted)\n        {\n            sorted = true;\n            string\
    \ name = \"\";\n            for(int j = 0; j < len; j++)\n            {\n    \
    \            if(j != i)\n                {\n                    long num2 = arr[j];\n\
    \                    if(num2 < num) //sort by decreasing order\n             \
    \       {\n                        num2 = num2 * -1;\n                    }\n\
    \                    if(num2 > num) //sort by increasing order\n             \
    \       {\n                        sorted = false;\n                        break;\n\
    \                    }\n                }\n            }\n            \n     \
    \       if(sorted)\n            {\n                out += name;\n            }\n\
    \        }\n    }\n    return out.split(\",\");\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_zo8tcqv.d(25): Error: found `out` when expecting `;` following
    statement

    /tmp/tmp_zo8tcqv.d(25): Error: found `=` instead of statement

    /tmp/tmp_zo8tcqv.d(53): Error: found `out` instead of statement

    /tmp/tmp_zo8tcqv.d(57): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_zo8tcqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  //\
    \ sort by length, then reverse order\n  sort(arr, arr => arr.length);\n  reverse(arr,\
    \ arr => arr.length);\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwq5ddk_1.d(27): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwq5ddk_1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result = new String[arr.Length];\n    for(int i=0;i<arr.Length;i++)\n \
    \       result[i]=nameof(arr[i]);\n    result.Sort(Comparer<long>.Compare);\n\
    \    int index=0;\n    for(int i=0;i<arr.Length;i++)\n        if(arr[i]<10)\n\
    \            arr[i]=nameof(arr[i]);\n        else\n        {\n            arr[i]=\"\
    One\";\n            arr[index++]=\"Two\";\n            arr[index++]=\"Three\"\
    ;\n            arr[index++]=\"Four\";\n            arr[index++]=\"Five\";\n  \
    \          arr[index++]=\"Six\";\n            arr[index++]=\"Seven\";\n      \
    \      arr[index++]=\"Eight\";\n            arr[index++]=\"Nine\";\n        }\n\
    \    arr.CopyTo(result,0);\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm,sorting,arrays\
    \ |>\n<| a dscore=0 |>\nHere is how I solved the problem without using any string\
    \ arrays:\n<code>\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4uk15nt.d(27): Error: found `>` when expecting `.` following long

    /tmp/tmpw4uk15nt.d(27): Error: found `.` when expecting identifier following `long`.

    /tmp/tmpw4uk15nt.d(27): Error: found `Compare` when expecting `,`

    /tmp/tmpw4uk15nt.d(47): Error: declaration expected, not `<`

    /tmp/tmpw4uk15nt.d(56): Error: declaration expected, not `assert`

    /tmp/tmpw4uk15nt.d(57): Error: declaration expected, not `assert`

    /tmp/tmpw4uk15nt.d(58): Error: declaration expected, not `assert`

    /tmp/tmpw4uk15nt.d(59): Error: declaration expected, not `assert`

    /tmp/tmpw4uk15nt.d(60): Error: declaration expected, not `assert`

    /tmp/tmpw4uk15nt.d(61): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4uk15nt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int min = arr.Min();\n    int max = arr.Max();\n    arr = (int [9]) Array.CreateInstance(typeof(long\
    \ ), 9);\n    for(int i = 0; i < arr.Length; i++)\n    {\n        if(arr[i] ==\
    \ min) arr[i] = 1;\n        if(arr[i] == max) arr[i] = 9;\n    }\n    Array.Reverse(arr);\n\
    \    foreach(long l in arr)\n    {\n        string name = std.string.One.Length\
    \ < l ? \"One\" : \n                        std.string.Two.Length < l ? \"Two\"\
    \ :\n                        std.string.Three.Length < l ? \"Three\" :\n     \
    \                   std.string.Four.Length < l ? \"Four\" :\n                \
    \        std.string.Five.Length < l ? \"Five\" :\n                        std.string.Six.Length\
    \ < l ? \"Six\" :\n                        std.string.Seven.Length < l ? \"Seven\"\
    \ :\n                        std.string.Eight.Length < l ? \"Eight\" :\n     \
    \                   std.string.Nine.Length < l ? \"Nine\" :\n                \
    \        null;\n        Console.WriteLine(\"{0} {1}\", l, name);\n    }\n    return\
    \ null;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting,c# |>\n<| c |>\nI wish\
    \ I could give this answer 10 upvotes as I thought you were a real genius.  This\
    \ is an awesome solution and I learned a lot from it.\n<|/ c |>\n<| c |>\nThanks\
    \ very much for sharing your solution!\n<|/ c |>\n<| c |>\nI like this solution,\
    \ although it is somewhat inefficient. Sure, it would be possible to use a switch\
    \ statement instead of a bunch of if statements, but that would make the code\
    \ a lot uglier.\n<|/ c |>\n<| a tags=arrays,algorithm,sorting,c# |>\nI got my\
    \ answer from another thread on SO:\n<code>\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5oqkz_sk.d(26): Error: found `)` when expecting `.` following long

    /tmp/tmp5oqkz_sk.d(26): Error: found `,` when expecting identifier following `long`.

    /tmp/tmp5oqkz_sk.d(26): Error: found `9` when expecting `)`

    /tmp/tmp5oqkz_sk.d(26): Error: C style cast illegal, use `cast(int[9])Array.CreateInstance((typeof(0)))`

    /tmp/tmp5oqkz_sk.d(33): Error: found `in` when expecting `;`

    /tmp/tmp5oqkz_sk.d(49): Error: declaration expected, not `<`

    /tmp/tmp5oqkz_sk.d(67): Error: declaration expected, not `assert`

    /tmp/tmp5oqkz_sk.d(68): Error: declaration expected, not `assert`

    /tmp/tmp5oqkz_sk.d(69): Error: declaration expected, not `assert`

    /tmp/tmp5oqkz_sk.d(70): Error: declaration expected, not `assert`

    /tmp/tmp5oqkz_sk.d(71): Error: declaration expected, not `assert`

    /tmp/tmp5oqkz_sk.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5oqkz_sk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var res = new string[arr.Length];\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3dkqy8d.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3dkqy8d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  string[] ret;\n    bool hasLength;\n    if (arr.Length > 0) \n    {\n     \
    \   hasLength = std.typecons.IsLongArray(arr);\n        if (!hasLength) throw\
    \ new System.ArgumentException(\"Invalid array\");\n        string[] ret = new\
    \ string[arr.Length];\n        for (int i = 0; i < arr.Length; i++) \n       \
    \ {\n            long num = arr[i];\n            if (num == -1L) continue;\n \
    \           ret[i] = std.typecons.LongToString(num);\n        }\n        if (hasLength)\
    \ \n        {\n            Array.Sort(ret, (a, b) => (a.Length > b.Length ? 1\
    \ : a.Length < b.Length ? -1 : 0) - (a.Length < b.Length ? 1 : 0));\n        }\n\
    \        return ret;\n    }\n    ret = new string[] {};\n    return ret;\n}\n\
    </code>\n<|/ a tags=.net,c# |>\n<| c |>\nThanks, your solution works with strings\
    \ as well, even though you mentioned the other answer was better for strings.\
    \ I hope you don't mind I accepted your solution, because it answers the question\
    \ in a more direct manner. Thanks.\n<|/ c |>\n<| c |>\nI appreciate it. Happy\
    \ programming.\n<|/ c |>\n<| c |>\nI accepted your answer, because it answers\
    \ the question in a more direct manner. I don't know if I should change my accepted\
    \ answer, but I will definitely upvote your answer. Thanks again.\n<|/ c |>\n\
    <| c |>\nIt would be much better if you didn't use the `Array.Sort` method directly.\
    \ Using LINQ would make the code easier to read and maintain. Also, you should\
    \ consider using `Enumerable.Range` instead of `new long[arr.Length]`.\n<|/ c\
    \ |>\n<| c |>\nI agree with Jon Skeet that Array.Sort() is horrible to use, especially\
    \ if you're not sure what kind of sorting algorithm you're using.\n<|/ c |>\n\
    <| a tags=.net,c# |>\nThis can be done fairly easily using LINQ:\n<code>\nvar\
    \ names = new [] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\" };\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwjrmzh7z.d(43): Error: found `{` when expecting `;` following statement

    /tmp/tmpwjrmzh7z.d(44): Error: declaration expected, not `return`

    /tmp/tmpwjrmzh7z.d(45): Error: unrecognized declaration

    /tmp/tmpwjrmzh7z.d(49): Error: unterminated character constant

    /tmp/tmpwjrmzh7z.d(55): Error: unterminated character constant

    /tmp/tmpwjrmzh7z.d(58): Error: unterminated character constant

    /tmp/tmpwjrmzh7z.d(61): Error: unterminated character constant

    /tmp/tmpwjrmzh7z.d(61): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwjrmzh7z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var arr = arr;\n    if (arr.length == 0)\n        return arr;\n    var low\
    \ = 0, high = arr.length - 1, mid;\n    while (low <= high) {\n        mid = (low\
    \ + high) / 2;\n        if (arr[mid] < 10)\n            arr[mid] *= 10;\n    \
    \    if (arr[mid] > 9)\n            arr[mid] /= 10;\n        if (arr[mid] < 1)\n\
    \            arr[mid] += 10;\n        low = mid + 1;\n        high = mid;\n  \
    \  }\n    var result = new String[arr.length];\n    for (var i = 0, len = arr.length;\
    \ i < len; i++)\n        result[len - i - 1] = arr[i];\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| a tags=c#,sorting |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7drg1ir.d(44): Error: declaration expected, not `<`

    /tmp/tmpi7drg1ir.d(49): Error: semicolon expected, not `.`

    /tmp/tmpi7drg1ir.d(49): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmpi7drg1ir.d(50): Error: semicolon expected, not `.`

    /tmp/tmpi7drg1ir.d(50): Error: no identifier for declarator `.Linq`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7drg1ir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long [] ans = clone(arr);\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcd21d4g.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcd21d4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr == null || arr.length == 0) return arr;\n    if (arr.length == 1) return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][arr[0]];\n    \n    long[] reversed = Arrays.copyOf(arr, arr.length).reverse();\n\
    \    \n    long[] result = new long[reversed.length];\n    int start = 0;\n  \
    \  \n    for (int i = 1; i < reversed.length; i++) \n    {\n        while (start\
    \ < arr.length && arr[start] >= reversed[i]) \n        {\n            result[i]\
    \ = arr[start];\n            start++;\n        }\n        \n        if (start\
    \ == arr.length) result[i] = arr[start];\n    }\n    \n    // Add any missing\
    \ numbers at the end.\n    while (start < arr.length) result[result.length - 1]++;\n\
    \    \n    return result.reverse();\n}\n</code>\n<|/ a tags=sorting,algorithm,java\
    \ dscore=2 |>\n<| c |>\nIt can be done in O(n^2) time but its probably not what\
    \ the OP wants. Also, I'm pretty sure the OP wants something that can work with\
    \ any array length, not just numbers between 1 and 9. :)\n<|/ c |>\n<| c |>\n\
    : Yes, I assumed that the array was of integers.  I was trying to keep things\
    \ similar to OP's solution (but with some tweaks).  I assumed that he could easily\
    \ adapt it to be able to work with any array length.  But maybe I was wrong.\n\
    <|/ c |>\n<| c |>\nFair enough. My bad. I was a little confused because of the\
    \ way the problem was stated in the OP but now I see that he had taken it for\
    \ granted that it was restricted to 0-9.\n<|/ c |>\n<| c |>\n- I really like the\
    \ approach you've taken. I like how it avoids recursion.  However, I don't think\
    \ it works. Please try it with \"[]\", \"[1, 2]\", \"[1, 1, 2]\", and \"[1, 9,\
    \ 9]\", and see what happens. :)\n<|/ c |>\n<| c |>\n: Yeah, I guess you're right.\
    \  I wouldn't have even considered the case of duplicates.  I guess if the first\
    \ number in the array is smaller than the smallest number in the reverse array,\
    \ then it'll just be dropped.  I may have forgotten something obvious.  It would\
    \ be better still if I could have used a LinkedList to make it a bit easier, but\
    \ I think it's probably not worth it.  :)\n<|/ c |>\n<| a |>\nThis is a simple\
    \ algorithm:\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprn7n8trh.d(48): Error: declaration expected, not `<`

    /tmp/tmprn7n8trh.d(51): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(54): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(60): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(60): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(63): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(63): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(63): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(63): Error: unterminated character constant

    /tmp/tmprn7n8trh.d(71): Error: declaration expected, not `assert`

    /tmp/tmprn7n8trh.d(72): Error: declaration expected, not `assert`

    /tmp/tmprn7n8trh.d(73): Error: declaration expected, not `assert`

    /tmp/tmprn7n8trh.d(74): Error: declaration expected, not `assert`

    /tmp/tmprn7n8trh.d(75): Error: declaration expected, not `assert`

    /tmp/tmprn7n8trh.d(76): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprn7n8trh.d", "-I/tmp"]'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  if(arr\
    \ == null || arr.Length == 0)\n  {\n    return arr == null ? new string[]{} :\
    \ new string[]{};\n  }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphde43o3w.d(26): Error: found `{` when expecting `:`

    /tmp/tmphde43o3w.d(26): Error: expression expected, not `}`

    /tmp/tmphde43o3w.d(26): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmphde43o3w.d(26): Error: found `{` when expecting `;` following statement

    /tmp/tmphde43o3w.d(26): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphde43o3w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ i = 0, n = arr.length, min = 0, max = 0;\n  string[] res; \n  \n  // first sort\
    \ the array by length\n  arr = arr.toArray();\n  Arrays.sort(arr);\n  \n  // second\
    \ find out what is the minimum and maximum value of the array\n  min = max = arr[0];\n\
    \  for (; i < n; ++i) {\n    if (arr[i] > max) max = arr[i];\n    if (arr[i] <\
    \ min) min = arr[i];\n  }\n  \n  // third sort all numbers that are between min\
    \ and max by their name\n  arr = arr.toArray();\n  for (; i < n; ++i)\n    if\
    \ (arr[i] > max)\n      for (int j = arr[i] - max; j < max; j++)\n        arr[j]\
    \ = -1;\n    else if (arr[i] < min)\n      for (int j = min - arr[i]; j < min;\
    \ j++)\n        arr[j] = -1;\n  \n  // fourth reverse the resulting array\n  res\
    \ = arr.toArray();\n  for (int i = res.length - 1; i >= 0; --i)\n    if (res[i]\
    \ == -1)\n      res[i] = \"Nine\";\n    else\n      res[i] = \"One\";\n  \n  return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0x2jdvva.d(24): Error: cannot implicitly convert expression `arr.length`
    of type `ulong` to `int`

    /tmp/tmp0x2jdvva.d(28): Error: no property `toArray` for type `long[]`

    /tmp/tmp0x2jdvva.d(29): Error: undefined identifier `Arrays`

    /tmp/tmp0x2jdvva.d(32): Error: cannot implicitly convert expression `arr[0]` of
    type `long` to `int`

    /tmp/tmp0x2jdvva.d(34): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp0x2jdvva.d(35): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp0x2jdvva.d(39): Error: no property `toArray` for type `long[]`

    /tmp/tmp0x2jdvva.d(42): Error: cannot implicitly convert expression `arr[cast(ulong)i]
    - cast(long)max` of type `long` to `int`

    /tmp/tmp0x2jdvva.d(45): Error: cannot implicitly convert expression `cast(long)min
    - arr[cast(ulong)i]` of type `long` to `int`

    /tmp/tmp0x2jdvva.d(49): Error: no property `toArray` for type `long[]`

    /tmp/tmp0x2jdvva.d(50): Error: cannot implicitly convert expres'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n\t\
    string[] result=new string[arr.Length];\n\t\n\tif (arr.Length>0)\n\t{\n\t\tint\
    \ n=1;\n\t\tfor (int i=0; i<arr.Length; i++)\n\t\t{\n\t\t\tif (n>=1 && n<=9)\n\
    \t\t\t{\n\t\t\t\tresult[i] = \"One\";\n\t\t\t\tn++;\n\t\t\t}\n\t\t\telse if (n>=10\
    \ && n<=19)\n\t\t\t{\n\t\t\t\tresult[i] = \"Two\";\n\t\t\t\tn++;\n\t\t\t}\n\t\t\
    \telse if (n>=20 && n<=99)\n\t\t\t{\n\t\t\t\tresult[i] = \"Three\";\n\t\t\t\t\
    n++;\n\t\t\t}\n\t\t\telse if (n>=100 && n<=999)\n\t\t\t{\n\t\t\t\tresult[i] =\
    \ \"Four\";\n\t\t\t\tn++;\n\t\t\t}\n\t\t\telse if (n>=1000 && n<=9999)\n\t\t\t\
    {\n\t\t\t\tresult[i] = \"Five\";\n\t\t\t\tn++;\n\t\t\t}\n\t\t\telse if (n>=10000\
    \ && n<=99999)\n\t\t\t{\n\t\t\t\tresult[i] = \"Six\";\n\t\t\t\tn++;\n\t\t\t}\n\
    \t\t\telse if (n>=1000000 && n<=999999)\n\t\t\t{\n\t\t\t\tresult[i] = \"Seven\"\
    ;\n\t\t\t\tn++;\n\t\t\t}\n\t\t\telse if (n>=10000000 && n<=9999999)\n\t\t\t{\n\
    \t\t\t\tresult[i] = \"Eight\";\n\t\t\t\tn++;\n\t\t\t}\n\t\t\telse if (n>=10000000\
    \ && n<=999999999)\n\t\t\t{\n\t\t\t\tresult[i] = \"Nine\";\n\t\t\t\tn++;\n\t\t\
    \t}\n\t\t\telse if (n>999999999)\n\t\t\t{\n\t\t\t\tresult[i] = \"None\";\n\t\t\
    \t\tn++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1s1aa3o4.d(24): Error: no property `Length` for type `long[]`

    /tmp/tmp1s1aa3o4.d(26): Error: no property `Length` for type `long[]`

    /tmp/tmp1s1aa3o4.d(29): Error: no property `Length` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1s1aa3o4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] range = new int[10];\n    \n    for (int i = 0; i < 10; i++)\n    {\n\
    \        range[i] = arr[i] % 10;\n    }\n    \n    for (int i = 0; i < 10; i++)\n\
    \    {\n        for (int j = 0; j < 10 - i; j++)\n        {\n            if (range[j]\
    \ > range[j + 1])\n            {\n                int temp = range[j];\n     \
    \           range[j] = range[j + 1];\n                range[j + 1] = temp;\n \
    \           }\n        }\n    }\n    \n    std.array<string, 10> output = new\
    \ std.array<string, 10>(arr.length / 10);\n    \n    for (int i = 0; i < arr.length;\
    \ i++)\n    {\n        output[i / 10] = string.format(\"%s%s\", names[range[arr[i]\
    \ / 10]], (arr[i] % 10));\n    }\n    \n    return std.array.toString(output);\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6lkbfu0.d(44): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpr6lkbfu0.d(44): Error: undefined identifier `output`

    /tmp/tmpr6lkbfu0.d(48): Error: undefined identifier `output`

    /tmp/tmpr6lkbfu0.d(51): Error: undefined identifier `array` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6lkbfu0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var sorted = arr.sort((a,b) => a-b);\n    var reversed = sorted.reverse();\n\
    \    var result = new String[sorted.length];\n    for (int i = 0; i < sorted.length;\
    \ i++) {\n        result[i] = to_string(sorted[i]);\n    }\n    for (int i = 0;\
    \ i < reversed.length; i++) {\n        result[reversed.length + i] = to_string(sorted[i]);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqmjsdduw.d(24): Error: undefined identifier `var`

    /tmp/tmpqmjsdduw.d(24): Error: no property `sort` for type `long[]`

    /tmp/tmpqmjsdduw.d(25): Error: undefined identifier `var`

    /tmp/tmpqmjsdduw.d(26): Error: undefined identifier `var`

    /tmp/tmpqmjsdduw.d(26): Error: undefined identifier `String`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqmjsdduw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  if (arr.Length <= 0) \n    {\n        return Array.Empty<string>();\n    }\n\
    \    \n    var length = arr.Max();\n    int min = 1;\n    int max = 9; // inclusive\n\
    \    \n    while (min <= max) \n    {\n        var index = (int)((min + (max -\
    \ min) / 2d));\n        if (arr[index] == length) \n        {\n            var\
    \ str = arr[index].ToString();\n            \n            var reversedStr = str.Reverse();\n\
    \            return reversedStr.Replace(\"0\", \"One\").Replace(\"1\", \"Two\"\
    ).Replace(\"2\", \"Three\").Replace(\"3\", \"Four\").Replace(\"4\", \"Five\").Replace(\"\
    5\", \"Six\").Replace(\"6\", \"Seven\").Replace(\"7\", \"Eight\").Replace(\"8\"\
    , \"Nine\");\n        }\n        else if (arr[index] < length) \n        {\n \
    \           min = min + 1;\n        }\n        else\n        {\n            max\
    \ = max - 1;\n        }\n    }\n    \n    return Array.Empty<string>();\n}\n</code>\n\
    <|/ a tags=algorithm,c# dscore=2 |>\n<| c |>\nIf `arr[index] <= length` then `arr[index].ToString()`\
    \ will throw `IndexOutOfRangeException`.\n<|/ c |>\n<| c |>\nIt's not exactly\
    \ efficient, just shorter. Maybe you could be more efficient by changing the return\
    \ type to `IEnumerable<string>` and using `yield return` ?\n<|/ c |>\n<| c |>\n\
    It doesn't throw an IndexOutOfRangeException. It just returns an empty string.\
    \ That's why the OP wrote this code in C#.\n<|/ c |>\n<| c |>\nThat's why I didn't\
    \ downvote. Your answer is very helpful.\n<|/ c |>\n<| c |>\nIf `arr[index] <=\
    \ length` then `arr[index].ToString()` will throw `IndexOutOfRangeException`.\n\
    <|/ c |>\n<| a dscore=2 |>\nSince you asked for an algorithm that would work for\
    \ any size array and without recursion or looping I would suggest something like\
    \ this:\n<code>\npublic static IEnumerable<string> ByLength(string[] arr, int\
    \ length)\n{\n    List<int> indexes = new List<int>();\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5lrcnqj8.d(26): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmp5lrcnqj8.d(26): Error: expression expected, not `)`

    /tmp/tmp5lrcnqj8.d(26): Error: found `;` when expecting `)`

    /tmp/tmp5lrcnqj8.d(27): Error: found `}` when expecting `;` following statement

    /tmp/tmp5lrcnqj8.d(35): Error: found `d` when expecting `)`

    /tmp/tmp5lrcnqj8.d(35): Error: C style cast illegal, use `cast(int)(min + (max
    - min) / 2)`

    /tmp/tmp5lrcnqj8.d(35): Error: semicolon expected, not `)`

    /tmp/tmp5lrcnqj8.d(35): Error: found `)` instead of statement

    /tmp/tmp5lrcnqj8.d(53): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmp5lrcnqj8.d(53): Error: expression expected, not `)`

    /tmp/tmp5lrcnqj8.d(53): Error: found `;` when expecting `)`

    /tmp/tmp5lrcnqj8.d(54): Error: found `}` when expecting `;` following statement

    /tmp/tmp5lrcnqj8.d(55): Error: found `<` instead of statement

    /tmp/tmp5lrcnqj8.d(61): Error: unterminated character constant

    /tmp/tmp5lrcnqj8.d(64): Error: unterminated char'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  long min = std.min(arr);\n    long max = std.max(arr);\n    \n    std.sort(arr);\n\
    \    \n    std.reverse(arr);\n    \n    for(long i=min; i<=max; ++i)\n    {\n\
    \        int index = (int) i;\n        arr[index] = by_digit(index);\n    }\n\
    \    \n    return stringArray(arr);\n}\n*/\nunittest\n{\n    alias candidate =\
    \ by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl9heqewl.d(33): Error: C style cast illegal, use `cast(int)i`

    /tmp/tmpl9heqewl.d(39): Error: declaration expected, not `*`

    /tmp/tmpl9heqewl.d(44): Error: declaration expected, not `assert`

    /tmp/tmpl9heqewl.d(45): Error: declaration expected, not `assert`

    /tmp/tmpl9heqewl.d(46): Error: declaration expected, not `assert`

    /tmp/tmpl9heqewl.d(47): Error: declaration expected, not `assert`

    /tmp/tmpl9heqewl.d(48): Error: declaration expected, not `assert`

    /tmp/tmpl9heqewl.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9heqewl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = arr.length; // length of the array\n    long maxLen = arr.max();\
    \ // maximum length of array\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw08nb1f1.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw08nb1f1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = 0;\n    int lastIdx = arr.length-1;\n    for (int i = 0; i < lastIdx;\
    \ i++) {\n        len += arr[i];\n    }\n    long[] res = new long[arr.length];\n\
    \    int startIdx = 0;\n    for (int i = 0; i < arr.length; i++) {\n        res[startIdx++]\
    \ = arr[len + i];\n    }\n    sort(res, startIdx);\n    long[] ones = new long[startIdx];\n\
    \    long[] tens = new long[startIdx];\n    long[] teens = new long[startIdx];\n\
    \    for (int i = 0; i < startIdx; i++) {\n        int x = res[i];\n        if\
    \ (x < 10) {\n            tens[startIdx] = x;\n        } else if (x > 10 && x\
    \ < 100) {\n            ones[startIdx] = x;\n        } else if (x > 100) {\n \
    \           teens[startIdx] = x;\n        }\n    }\n    string[] strs = new string[startIdx];\n\
    \    for (int i = 0; i < startIdx; i++) {\n        int x = ones[i];\n        strs[i]\
    \ = \"One\";\n    }\n    for (int i = 0; i < startIdx; i++) {\n        int x =\
    \ tens[i];\n        if (x < 10) {\n            strs[i] = \"Ten\";\n        } else\
    \ if (x > 10 && x < 100) {\n            strs[i] = \"Twenty\";\n        } else\
    \ if (x > 100) {\n            strs[i] = \"Hundred\";\n        }\n    }\n    for\
    \ (int i = 0; i < startIdx; i++) {\n        int x = teens[i];\n        if (x <\
    \ 10) {\n            strs[i] = \"Eleven\";\n        } else if (x > 10 && x < 100)\
    \ {\n            strs[i] = \"Twelve\";\n        } else if (x > 100) {\n      \
    \      strs[i] = \"Thirteen\";\n        }\n    }\n    return strs;\n}\n</code>\n\
    <|/ a tags=arrays,sorting,algorithm dscore=0 |>\n<| c |>\n\"Sorting\" means rearranging\
    \ the elements to match the sort algorithm's specification. An example is \"sort\"\
    \ a [bubble sort](http://en.wikipedia.org/wiki/Bubble_sort) algorithm.\n<|/ c\
    \ |>\n<| c |>\nI don't think this is what the OP was looking for. I'm looking\
    \ for an algorithm that converts a set of natural numbers into an array of alphabetical\
    \ words, such as [One, Two, Three, Four, Five, Six, Seven, Eight, Nine].\n<|/\
    \ c |>\n<| c |>\nThe OP wants an algorithm that sorts natural numbers into a set\
    \ of words. I gave an algorithm that sorts natural numbers into a set of words.\
    \ He didn't ask for a bubble sort algorithm.\n<|/ c |>\n<| a tags=arrays,sorting,algorithm\
    \ |>\nThe sorting algorithm is called \"natural order\" or \"\nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9m140cy_.d(75): Error: declaration expected, not `<`

    /tmp/tmp9m140cy_.d(78): Error: unterminated character constant

    /tmp/tmp9m140cy_.d(81): Error: unterminated character constant

    /tmp/tmp9m140cy_.d(81): Error: unterminated character constant

    /tmp/tmp9m140cy_.d(84): Error: unterminated character constant

    /tmp/tmp9m140cy_.d(96): Error: unterminated string constant starting at /tmp/tmp9m140cy_.d(96)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9m140cy_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  var result=new string[arr.length];\n    for(int i=0;i<arr.length;i++)\n   \
    \ {\n        if(arr[i]<9L)\n            result[i]=\"One\";\n        else if(arr[i]<19L)\n\
    \            result[i]=\"Two\";\n        else if(arr[i]<99L)\n            result[i]=\"\
    Three\";\n        else if(arr[i]<999L)\n            result[i]=\"Four\";\n    \
    \    else if(arr[i]<9999L)\n            result[i]=\"Five\";\n        else if(arr[i]<999999L)\n\
    \            result[i]=\"Six\";\n        else if(arr[i]<10000000L)\n         \
    \   result[i]=\"Seven\";\n        else if(arr[i]<100000000L)\n            result[i]=\"\
    Eight\";\n        else if(arr[i]<1000000000L)\n            result[i]=\"Nine\"\
    ;\n        else\n        {\n            //throw new Exception(\"Too big\");\n\
    \            continue;\n        }\n    }\n    var reverse=result.AsEnumerable().OrderByDescending(x\
    \ => x);\n    var resul=reverse.ToArray();\n    for(int i=0;i<resul.length;i++)\n\
    \        resul[i]=resul[i].Substring(0, resul[i].Length-1).Replace(\"One\", \"\
    1\")\n                                     .Replace(\"Two\", \"2\")\n        \
    \                             .Replace(\"Three\", \"3\")\n                   \
    \                  .Replace(\"Four\", \"4\")\n                               \
    \      .Replace(\"Five\", \"5\")\n                                     .Replace(\"\
    Six\", \"6\")\n                                     .Replace(\"Seven\", \"7\"\
    )\n                                     .Replace(\"Eight\", \"8\")\n         \
    \                            .Replace(\"Nine\", \"9\");\n    return resul;\n}\n\
    </code>\n<|/ a tags=sorting,arrays,c#,algorithm |>\n<| a tags=sorting,arrays,c#,algorithm\
    \ |>\nI've tested the other solutions and found that they are the slowest, probably\
    \ because of the overhead of sorting an array.  I did a quick benchmark using\
    \ the Stopwatch class and it seems that the sorting solution is actually faster\
    \ than the others, at least for larger arrays.\n<code>\nvar arr = new [] {1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9};\nunittest\n{\n    alias candidate = by_length;\n\n   \
    \ assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\",\
    \ \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmlz9g9tk.d(65): Error: declaration expected, not `<`

    /tmp/tmpmlz9g9tk.d(68): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmlz9g9tk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int N = 0;\n    for(int i = 0; i < arr.length; i++)\n    {\n        N = N *\
    \ 10 + arr[i];\n    }\n    int[] num = new int[N];\n    for(int i = 0; i < arr.length;\
    \ i++)\n    {\n        num[i] = num[i]*10+arr[i]-1;\n    }\n    int[] arr2 = new\
    \ int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n    {\n        arr2[i]\
    \ = num[arr[i]];\n    }\n    string[] output = new string[arr2.length];\n    for(int\
    \ i = 0; i < arr2.length; i++)\n    {\n        output[i] = \"One\";\n        if(arr2[i]\
    \ == 0)\n        {\n            output[i] = \"Zero\";\n        }\n        else\n\
    \        {\n            output[i] = \"Two\";\n            if(arr2[i] == 1)\n \
    \           {\n                output[i] = \"One\";\n            }\n        }\n\
    \        if(arr2[i] == 2)\n        {\n            output[i] = \"Two\";\n     \
    \       if(arr2[i] == 3)\n            {\n                output[i] = \"Three\"\
    ;\n            }\n        }\n        if(arr2[i] == 3)\n        {\n           \
    \ output[i] = \"Three\";\n            if(arr2[i] == 4)\n            {\n      \
    \          output[i] = \"Four\";\n            }\n        }\n        if(arr2[i]\
    \ == 4)\n        {\n            output[i] = \"Four\";\n            if(arr2[i]\
    \ == 5)\n            {\n                output[i] = \"Five\";\n            }\n\
    \        }\n        if(arr2[i] == 5)\n        {\n            output[i] = \"Five\"\
    ;\n            if(arr2[i] == 6)\n            {\n                output[i] = \"\
    Six\";\n            }\n        }\n        if(arr2[i] == 6)\n        {\n      \
    \      output[i] = \"Six\";\n            if(arr2[i] == 7)\n            {\n   \
    \             output[i] = \"Seven\";\n            }\n        }\n        if(arr2[i]\
    \ == 7)\n        {\n            output[i] = \"Seven\";\n            if(arr2[i]\
    \ == 8)\n            {\n                output[i] = \"Eight\";\n            }\n\
    \        }\n        if(arr2[i] == 8)\n        {\n            output[i] = \"Eight\"\
    ;\n            if(arr2[i] == 9)\n            {\n                output[i] = \"\
    Nine\";\n            }\n        }\n        if(arr2[i] == 9)\n        {\n     \
    \       output[i] = \"Nine\";\n        }\n    }\n    return output;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThank you for your help, it works perfectly.\n<|/ c |>\n<|\
    \ c |>\nI noticed that your code seems to have some bugs. For example, if the\
    \ integer array has only 1 element, it will output `[\"One\"]`, instead of `[\"\
    One\"]`. So I changed the `for(int i = 0; i < arr.length; i++)` to `for(int i\
    \ = 0; i < arr.length-1; i++)`.\n<|/ c |>\n<| c |>\nIt still \nunittest\n{\n \
    \   alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] ix = new int[arr.length];\n    for (int i = 0, j = 0; i < arr.length;\
    \ i++, j++) {\n        if (j == 0 && arr[i] < 1)\n            continue;\n    \
    \    if (j > 0)\n            ix[i - j] = arr[i];\n    }\n    sort(ix, arr.length);\n\
    \    return map(arr, i -> i == 0 ? \"\" : names[ix[i]]);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nI like the idea of doing it on a stream but you end up with very similar\
    \ code than you started with. I'm hoping there's something simpler I'm overlooking.\n\
    <|/ c |>\n<| c |>\nThanks for the answer! I went ahead and edited my original\
    \ post to reflect my original code with your solution.\n<|/ c |>\n<| c |>\nI like\
    \ the elegance of this, but I went ahead and edited my original post to reflect\
    \ my original code with your solution.\n<|/ c |>\n<| c |>\nThe reason I did it\
    \ this way was so that I don't have to worry about the case where the array doesn't\
    \ have any numbers lower than `1` (the code you posted didn't take that into account\
    \ and didn't handle negative numbers correctly). I also wanted to keep my original\
    \ code as close to yours as possible, which would let me change the output to\
    \ include a leading zero if it's below 10. I also added an optional parameter\
    \ that would allow you to do it without using a second array: `string[] by_length(long[]\
    \ arr, bool negative = false)`\n<|/ c |>\n<| a tags=arrays,sorting,java dscore=0\
    \ |>\nIf you can use streams:\n<code>\npublic static final void sort(long[] input)\
    \ {\n    Arrays.sort(input);\n    IntStream.range(0, input.length).forEach(i ->\
    \ {\n        if (i > 0 && input[i] > input[i-1]) {\n            swap(input[i],\
    \ input[i-1]);\n        }\n    });\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp035fp9d1.d(32): Error: use `.` for member lookup, not `->`

    /tmp/tmp035fp9d1.d(34): Error: declaration expected, not `<`

    /tmp/tmp035fp9d1.d(37): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(37): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(37): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(46): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(46): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(46): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(46): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(46): Error: unterminated character constant

    /tmp/tmp035fp9d1.d(53): Error: unexpected `(` in declarator

    /tmp/tmp035fp9d1.d(53): Error: basic type expected, not `0`

    /tmp/tmp035fp9d1.d(53): Error: found `0` when expecting `)`

    /tmp/tmp035fp9d1.d(53): Error: no identifier for declarator `IntStream.range(_error_)`

    /tmp/tmp035fp9d1.d(53): Error: semicolon expected following function declaration

    /tmp/tmp035fp9d1.d(53): Error: declaration e'
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int len = 0;\n    for(long l : arr)\n    {\n        if(l > 0)\n        {\n\
    \            len++;\n        }\n    }\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx2w5mmj9.d(25): Error: semicolon expected, not `:`

    /tmp/tmpx2w5mmj9.d(25): Error: expression expected, not `:`

    /tmp/tmpx2w5mmj9.d(25): Error: found `arr` when expecting `;` following `for`
    condition

    /tmp/tmpx2w5mmj9.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx2w5mmj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] ints = new int[arr.length];\n    for(int i = 0; i < arr.length; i++)\n\
    \        ints[i] = (int) arr[i];\n    for(int i = 0; i < arr.length - 1; i++)\n\
    \    {\n        long curr = ints[i];\n        \n        int j = i;\n        while(j\
    \ > 0 && ints[j - 1] > curr)\n        {\n            ints[j] = ints[j - 1];\n\
    \            j--;\n        }\n        ints[j] = curr;\n    }\n    \n    string[]\
    \ result = new string[arr.length];\n    \n    for(int i = 0; i < arr.length; i++)\n\
    \        result[i] = \"One\";\n    \n    for(int i = 1; i < arr.length; i++)\n\
    \        result[i] = \"Two\";\n    \n    for(int i = 2; i < arr.length; i++)\n\
    \        result[i] = \"Three\";\n    \n    for(int i = 3; i < arr.length; i++)\n\
    \        result[i] = \"Four\";\n    \n    for(int i = 4; i < arr.length; i++)\n\
    \        result[i] = \"Five\";\n    \n    for(int i = 5; i < arr.length; i++)\n\
    \        result[i] = \"Six\";\n    \n    for(int i = 6; i < arr.length; i++)\n\
    \        result[i] = \"Seven\";\n    \n    for(int i = 7; i < arr.length; i++)\n\
    \        result[i] = \"Eight\";\n    \n    for(int i = 8; i < arr.length; i++)\n\
    \        result[i] = \"Nine\";\n    \n    return result;\n}\n</code>\n<|/ a tags=sorting,java,arrays\
    \ |>\n<| c |>\nThe code is missing `import java.util.Arrays;` at the top and I\
    \ guess it's missing `import java.util.Collections;` at the top.\n<|/ c |>\n<|\
    \ a tags=sorting,java,arrays |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xbkw8jm.d(26): Error: C style cast illegal, use `cast(int)arr[i]`

    /tmp/tmp5xbkw8jm.d(71): Error: declaration expected, not `<`

    /tmp/tmp5xbkw8jm.d(74): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xbkw8jm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  //\
    \ write your code in C# here\n  if (arr.Length == 0)\n    return arr;\n  if (arr.Length\
    \ == 1)\n    return new string[] {\"One\"};\n  var newArr = new string[arr.Length];\n\
    \  var lastNum = arr[0];\n  var lastLetter = \"One\";\n  \n  newArr[0] = \"One\"\
    ;\n  \n  foreach (var item in arr)\n  {\n    if (item > 9)\n      lastNum = item;\n\
    \    else if (item < 0)\n      lastNum = 0;\n    else if (item < 10)\n      lastLetter\
    \ = \"Zero\";\n    else\n      lastLetter = \"One\";\n    newArr[arr.Length -\
    \ 2] = lastLetter;\n    newArr[arr.Length - 1] = lastNum.ToString();\n  }\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjfpft9v.d(28): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpvjfpft9v.d(28): Error: found `}` when expecting `;` following statement

    /tmp/tmpvjfpft9v.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpvjfpft9v.d(35): Error: found `in` when expecting `;`

    /tmp/tmpvjfpft9v.d(48): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjfpft9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  int[] sorted = new int[arr.length];\n    int j = 0;\n    \n    for(int i =\
    \ 0; i < arr.length; i++){\n        sorted[j++] = arr[i];\n    }\n    \n    Arrays.sort(sorted);\n\
    \    \n    string[] result = new string[sorted.length];\n    for(int i = 0; i\
    \ < sorted.length; i++){\n        result[i] = names[sorted[i]];\n    }\n    \n\
    \    return Arrays.asList(result).subList(0, sorted.length);\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nUse this method\n<code>\nstatic int[] sortArray(int[]\
    \ array) {\n    Arrays.sort(array);\n    return array;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjllgzeu3.d(40): Error: declaration expected, not `<`

    /tmp/tmpjllgzeu3.d(47): Error: declaration expected, not `return`

    /tmp/tmpjllgzeu3.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjllgzeu3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  \
    \  return sort(sort(long_to_string(arr).replace(digits, \"\")))\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp94_rb1as.d(25): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp94_rb1as.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp94_rb1as.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  string[]\
    \ r = new string[arr.Length];\n  for (int i = 0; i < arr.Length; ++i)\n  {\n \
    \   r[i] = \"One\";\n    if (i < arr.Length - 1)\n    {\n      if (arr[i + 1]\
    \ < 1 || arr[i + 1] > 9)\n        r[i] = \"Two\";\n      else if (arr[i + 2] <\
    \ 1 || arr[i + 2] > 9)\n        r[i] = \"Three\";\n      else if (arr[i + 3] <\
    \ 1 || arr[i + 3] > 9)\n        r[i] = \"Four\";\n      else if (arr[i + 4] <\
    \ 1 || arr[i + 4] > 9)\n        r[i] = \"Five\";\n      else if (arr[i + 5] <\
    \ 1 || arr[i + 5] > 9)\n        r[i] = \"Six\";\n      else if (arr[i + 6] < 1\
    \ || arr[i + 6] > 9)\n        r[i] = \"Seven\";\n      else if (arr[i + 7] < 1\
    \ || arr[i + 7] > 9)\n        r[i] = \"Eight\";\n      else if (arr[i + 8] < 1\
    \ || arr[i + 8] > 9)\n        r[i] = \"Nine\";\n    }\n  }\n  Array.Sort(r);\n\
    \  Array.Reverse(r);\n  for (int i = 0; i < r.Length; ++i)\n    r[i] = nameof(r[i]);\n\
    \  return r;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't compile.  You can't\
    \ sort an array of strings and then reverse them with `Array.Sort`.  I get the\
    \ error \"The type arguments for method 'System.Array.Sort(System.Array,\u2002\
    System.Comparison)' cannot be inferred from the usage. Try specifying the type\
    \ arguments explicitly.\" on the line `Array.Sort(r);`\n<|/ c |>\n<| c |>\nThe\
    \ original question was about sorting an array of ints by the lengths of the numbers.\
    \ The above was an example of sorting the array by the lengths of the ints contained\
    \ in the array. Array.Sort is one of the many built in functions available in\
    \ c# that can sort. I don't understand what your problem is. Are you running this\
    \ in LinqPad? You will have to write an extension method or write your own if\
    \ you're running this in the c# interactive window.\n<|/ c |>\n<| c |>\nThis code\
    \ doesn't compile as pointed out. The error is \"The type arguments for method\
    \ 'System.Array.Sort(System.Array,\u2002System.Comparison)' cannot be inferred\
    \ from the usage. Try specifying the type arguments explicitly.\"\n<|/ c |>\n\
    <| a tags=sorting,arrays,c#,linq |>\n<code>\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4gnuwvxh.d(54): Error: declaration expected, not `<`

    /tmp/tmp4gnuwvxh.d(57): Error: unterminated character constant

    /tmp/tmp4gnuwvxh.d(57): Error: unterminated character constant

    /tmp/tmp4gnuwvxh.d(60): Error: unterminated character constant

    /tmp/tmp4gnuwvxh.d(60): Error: unterminated character constant

    /tmp/tmp4gnuwvxh.d(63): Error: unterminated character constant

    /tmp/tmp4gnuwvxh.d(71): Error: declaration expected, not `assert`

    /tmp/tmp4gnuwvxh.d(72): Error: declaration expected, not `assert`

    /tmp/tmp4gnuwvxh.d(73): Error: declaration expected, not `assert`

    /tmp/tmp4gnuwvxh.d(74): Error: declaration expected, not `assert`

    /tmp/tmp4gnuwvxh.d(75): Error: declaration expected, not `assert`

    /tmp/tmp4gnuwvxh.d(76): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gnuwvxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n    >>> by_length([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L])\n \
    \   [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n    \n      If the array is empty, return an empty array:\n    >>> by_length([])\n\
    \    []\n    \n      If the array has any strange number ignore it:\n    >>> by_length([1L,\
    \ -1L, 55L])\n    [\"One\"]\n    \n*/\nstring[] by_length(long[] arr) \n{\n  int\
    \ min = arr[0];\n  int max = arr[arr.length - 1];\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprbkzcsiz.d(26): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbkzcsiz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164571
