name: HumanEval_81_numerical_letter_grade
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nIt is the last week of the semester\
  \ and the teacher has to give the grades\n    to students. The teacher has been\
  \ making her own algorithm for grading.\n    The only problem is, she has lost the\
  \ code she used for grading.\n    She has given you an array of GPAs for some students\
  \ and you have to write \n    a function that can output an array of letter grades\
  \ using the following table:\n             GPA       |    Letter grade\n       \
  \       4.0                A+\n            > 3.7                A \n           \
  \ > 3.3                A- \n            > 3.0                B+\n            > 2.7\
  \                B \n            > 2.3                B-\n            > 2.0    \
  \            C+\n            > 1.7                C\n            > 1.3         \
  \       C-\n            > 1.0                D+ \n            > 0.7            \
  \    D \n            > 0.0                D-\n              0.0                E\n\
  \    \n\n    Example:\n    >>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n    [\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"]\n    \n*/\nstring[] numerical_letter_grade(float[]\
  \ grades) \n"
tests: "unittest\n{\n    alias candidate = numerical_letter_grade;\n\n    assert(candidate([4.0,\
  \ 3L, 1.7, 2L, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n    assert(candidate([1.2])\
  \ == [\"D+\"]);\n    assert(candidate([0.5]) == [\"D-\"]);\n    assert(candidate([0.0])\
  \ == [\"E\"]);\n    assert(candidate([1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"]);\n    assert(candidate([0.0, 0.7]) == [\"E\", \"D-\"]);\n\
  }\nvoid main(){}"
completions: ["{\n    string grade, letter;\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        grade = std.format(\"%6.2f\", grades[i]);\n        letter\
    \ = std.format(\"%c\", std.min(\n            std.length(grade), \n           \
    \ std.max(grades.length, std.length(grades) - i + 1)));\n        if(std.equal(grade,\
    \ grades[i - 1]))\n            letter = std.substr(letter, 0, std.length(letter)\
    \ - 1) + std.substr(letter, std.length(letter) - 1, std.length(letter));\n   \
    \     grades[i] = letter;\n    }\n    return grades;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI used it on my own solution, and it worked perfectly fine, albeit\
    \ with a bug on average. Not sure if I should just mark this as a duplicate or\
    \ leave it here for others to use.\n<|/ c |>\n<| c |>\nI see your point, but this\
    \ question was asked before. So I believe it is still useful to have answers on\
    \ here.\n<|/ c |>\n<| a |>\nI solved it by splitting the string at the '.' and\
    \ then adding every element to an array. If the string is an integer, then I just\
    \ added the integers to an array. After that I just did a sort on the array and\
    \ returned the index with highest number. \n<code>\npublic static int gradesArray(String\
    \ grades)\n    {\n        // This was the only way I could think to do this. Not\
    \ sure if there is a better way of doing this\n        String[] splitGrades =\
    \ grades.split(\".\");\n        int[] grades = new int[splitGrades.length];\n\
    \        for (int i = 0; i < splitGrades.length; i++)\n        {\n           \
    \ if (splitGrades[i].length() == 2)\n            {\n                grades[i]\
    \ = Integer.valueOf(splitGrades[i]);\n            }\n            else\n      \
    \      {\n                grades[i] = Integer.valueOf(splitGrades[i]) / 10;\n\
    \            }\n        }\n        Arrays.sort(grades);\n        int highestGrade\
    \ = grades[grades.length-1];\n        return highestGrade;\n    }\n</code>\n<|/\
    \ a dscore=1 tags=string,java,arrays |>\n<| c |>\nThis doesn't work for `3.50`\
    \ for example\n<|/ c |>\n<| c |>\nTrue. Not sure if there is a better way of doing\
    \ this. This is my first time posting a question, so I wasn't sure what I was\
    \ asking exactly. I apologize for that.\n<|/ c |>\n<| a tags=string,java,arrays\
    \ |>\nThe answer from Rudiger does almost exactly what you want, but ", "{\n \
    \   var stringResult = new string[grades.Length];\n    var gpas = grades.Select(a\
    \ => Math.Round(a, 2)).ToArray();\n    for (int i = 0; i < gpas.Length; i++)\n\
    \    {\n        var a = gpas[i];\n        stringResult[i] = grades[i] >= 4.0F\
    \ ? \"A+\" : grades[i] >= 3.7F ? \"A\" : grades[i] >= 3.3F ? \"A-\" : grades[i]\
    \ >= 3.0F ? \"B+\" : grades[i] >= 2.7F ? \"B\" : grades[i] >= 2.3F ? \"B-\" :\
    \ grades[i] >= 2.0F ? \"C+\" : grades[i] >= 1.7F ? \"C\" : grades[i] >= 1.3F ?\
    \ \"C-\" : grades[i] >= 1.0F ? \"D+\" : grades[i] >= 0.7F ? \"D\" : grades[i]\
    \ >= 0.0F ? \"D-\" : \"E\";\n    }\n    return stringResult;\n}\n</code>\n<|/\
    \ a tags=c# dscore=0 |>\n<| c |>\nYour question was \"why does it work when this\
    \ isn't the case?\" I answered that, even though you didn't explicitly state it\
    \ or say why.\n<|/ c |>\n<| c |>\nI added the actual code, but I really don't\
    \ know how to make the code work. It should give the same output as your example.\
    \ There must be some logical error in the code, and I just can't find it.\n<|/\
    \ c |>\n<| c |>\nI added the actual code, but I really don't know how to make\
    \ the code work. It should give the same output as your example. There must be\
    \ some logical error in the code, and I just can't find it.\n<|/ c |>\n<| c |>\n\
    I added the actual code, but I really don't know how to make the code work. It\
    \ should give the same output as your example. There must be some logical error\
    \ in the code, and I just can't find it.\n<|/ c |>\n<| c |>\nI added the actual\
    \ code, but I really don't know how to make the code work. It should give the\
    \ same output as your example. There must be some logical error in the code, and\
    \ I just can't find it.\n<|/ c |>\n<| a dscore=0 |>\nYour code is failing because:\n\
    <code>\ngrades[i]\n</code>\nis returning a float, which is not comparable with\
    \ a string.\n<|/ a tags=c# |>\n<| c |>\nThanks for your answer. I added the actual\
    \ code, but I really don't know how to make the code work. It should give the\
    \ same output as your example. There must be some logical error in the code, and\
    \ I just can't find it.\n<|/ c |>\n<| c |>\nI added the actual code, but I really\
    \ don't know how to make the code work", "{\n    float sum = 0;\n    string letter_grades[]\
    \ = new string[grades.length];\n    for (int i = 0; i < grades.length; i++) {\n\
    \        sum += grades[i];\n    }\n    float avg = sum / grades.length;\n    \n\
    \    for (int i = 0; i < grades.length; i++)\n    {\n        letter_grades[i]\
    \ = letterGrade(grades[i]);\n    }\n    return letter_grades;\n}", "{\n    string[]\
    \ letters = new string[grades.Length];\n    for (int i = 0; i < letters.Length;\
    \ i++)\n    {\n        if (grades[i] <= 3.0f)\n        {\n            letters[i]\
    \ = \"C\";\n        }\n        else if (grades[i] <= 3.7f)\n        {\n      \
    \      letters[i] = \"C-\";\n        }\n        else if (grades[i] <= 4.0f)\n\
    \        {\n            letters[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ <= 4.3f)\n        {\n            letters[i] = \"B\";\n        }\n        else\
    \ if (grades[i] <= 4.7f)\n        {\n            letters[i] = \"B-\";\n      \
    \  }\n        else if (grades[i] <= 5.0f)\n        {\n            letters[i] =\
    \ \"A+\";\n        }\n        else if (grades[i] <= 5.3f)\n        {\n       \
    \     letters[i] = \"A\";\n        }\n        else if (grades[i] <= 5.7f)\n  \
    \      {\n            letters[i] = \"A-\";\n        }\n        else if (grades[i]\
    \ <= 6.0f)\n        {\n            letters[i] = \"A\";\n        }\n        else\
    \ if (grades[i] <= 6.3f)\n        {\n            letters[i] = \"B\";\n       \
    \ }\n        else if (grades[i] <= 6.7f)\n        {\n            letters[i] =\
    \ \"B-\";\n        }\n        else if (grades[i] <= 7.0f)\n        {\n       \
    \     letters[i] = \"B+\";\n        }\n        else if (grades[i] <= 7.3f)\n \
    \       {\n            letters[i] = \"A\";\n        }\n        else if (grades[i]\
    \ <= 7.7f)\n        {\n            letters[i] = \"A-\";\n        }\n        else\
    \ if (grades[i] <= 8.0f)\n        {\n            letters[i] = \"A\";\n       \
    \ }\n        else if (grades[i] <= 8.3f)\n        {\n            letters[i] =\
    \ \"A+\";\n        }\n        else if (grades[i] <= 8.7f)\n        {\n       \
    \     letters[i] = \"C\";\n        }\n        else if (grades[i] <= 9.0f)\n  \
    \      {\n            letters[i] = \"C-\";\n        }\n        else if (grades[i]\
    \ <= 9.3f)\n        {\n            letters[i] = \"C\";\n        }\n        else\
    \ if (grades[i] <= 9.7f)\n        {\n            letters[i] = \"C-\";\n      \
    \  }\n        else if (grades[i] <= 10.0f)\n        {\n            letters[i]\
    \ = \"C\";\n        }\n        else if (grades[i] <= 10.3f)\n        {\n     \
    \       letters[i] = \"B\";\n        }\n        else if (grades[i] <= 10.7f)\n\
    \        {\n            letters[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ <= 11.0f)\n        {\n            letters[i] = \"B+\";\n        }\n        else\
    \ if (grades[i] <= 11.3f)\n        {\n            letters[i] = \"B\";\n      \
    \  }\n        else if (grades[i] <= 11.7f)\n        {\n            letters[i]\
    \ = \"B-", "{\n    // Your code goes here\n    int gpa = 0;\n    int score = 0;\n\
    \    int i = 0;\n    while(i < grades.length && gpa <= 4.0) {\n        score =\
    \ score + grades[i];\n        gpa = gpa + (grades[i] - score)/4.0;\n        i++;\n\
    \    }\n    string[] letter_grades = new string[grades.length];\n    while(i <\
    \ grades.length) {\n        if( gpa > 3.7f || gpa < 3.0f ) {\n            letter_grades[i]\
    \ = \"D\";\n            i++;\n        }else if( gpa > 2.7f || gpa < 2.0f ) {\n\
    \            letter_grades[i] = \"C\";\n            i++;\n        }else if( gpa\
    \ > 1.7f || gpa < 1.0f ) {\n            letter_grades[i] = \"C\";\n          \
    \  i++;\n        }else if( gpa > 1.0f || gpa < 0.7f ) {\n            letter_grades[i]\
    \ = \"D\";\n            i++;\n        }else if( gpa > 0.0f || gpa < 0.0f ) {\n\
    \            letter_grades[i] = \"E\";\n            i++;\n        }else {\n  \
    \          if( gpa <= 3.3f ) {\n                letter_grades[i] = \"A\";\n  \
    \          }else if( gpa <= 2.7f ) {\n                letter_grades[i] = \"B\"\
    ;\n            }else if( gpa <= 1.7f ) {\n                letter_grades[i] = \"\
    C\";\n            }else {\n                letter_grades[i] = \"D\";\n       \
    \     }\n        }\n    }\n    return letter_grades;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nJust for fun, here's another way in one line. I'm sure it can be\
    \ improved upon, but I feel like it conveys what it's doing.\n<code>", "{\n  \
    \  int num_grades = grades.length;\n    \n    // Write your solution here...\n\
    \    \n    return letterGrades;\n}\n</code>\nYou will need to modify your grade_equation\
    \ method so that it returns a string[] rather than an int[].  \nAs mentioned by\
    \ Eitan in the comments, the question also requires the following conditions:",
  "{\n    \n    int result = 0;\n    \n    for (int i = 0; i < (grades.length); ++i)\
    \ {\n        if (grades[i] < 3.0) {\n            result += (grades[i] - 4.0) *\
    \ 0.2;\n        } else if (grades[i] < 3.7) {\n            result += (grades[i]\
    \ - 3.7) * 0.1;\n        } else if (grades[i] < 4.0) {\n            result +=\
    \ (grades[i] - 3.3) * 0.05;\n        } else if (grades[i] < 4.7) {\n         \
    \   result += (grades[i] - 4.0) * 0.1;\n        } else if (grades[i] < 5.0) {\n\
    \            result += (grades[i] - 4.7) * 0.05;\n        } else if (grades[i]\
    \ < 5.7) {\n            result += (grades[i] - 5.0) * 0.05;\n        } else if\
    \ (grades[i] < 6.0) {\n            result += (grades[i] - 5.7) * 0.01;\n     \
    \   } else if (grades[i] < 6.7) {\n            result += (grades[i] - 6.0) * 0.05;\n\
    \        } else if (grades[i] < 7.0) {\n            result += (grades[i] - 6.7)\
    \ * 0.01;\n        } else if (grades[i] < 7.7) {\n            result += (grades[i]\
    \ - 7.0) * 0.005;\n        } else if (grades[i] < 8.0) {\n            result +=\
    \ (grades[i] - 7.7) * 0.01;\n        } else if (grades[i] < 8.7) {\n         \
    \   result += (grades[i] - 8.0) * 0.05;\n        } else if (grades[i] < 9.0) {\n\
    \            result += (grades[i] - 8.7) * 0.01;\n        } else if (grades[i]\
    \ < 9.7) {\n            result += (grades[i] - 9.0) * 0.005;\n        } else if\
    \ (grades[i] < 10.0) {\n            result += (grades[i] - 9.7) * 0.01;\n    \
    \    } else if (grades[i] < 10.7) {\n            result += (grades[i] - 10.0)\
    \ * 0.05;\n        } else if (grades[i] < 11.0) {\n            result += (grades[i]\
    \ - 10.7) * 0.01;\n        } else if (grades[i] < 11.7) {\n            result\
    \ += (grades[i] - 11.0) * 0.01;\n        } else if (grades[i] < 12.0) {\n    \
    \        result += (grades[i] - 11.7) * 0.001;\n        } else if (grades[i] <\
    \ 12.7) {\n            result += (grades[i] - 12.0) * 0.05;\n        } else if\
    \ (grades[i] < 13.0) {\n            result += (grades[i] - 12.7) * 0.01;\n   \
    \     } else if (grades[i] < 13.7) {\n            result += (grades[i] - 13.0)\
    \ * 0.01;\n        } else if (grades[i] < 14.0) {\n            result += (grades[i]\
    \ - 13.7) * 0.001;\n        } else if (grades[i] < 14.7) {\n            result\
    \ += (grades[i] - 14.0) * 0.01;\n        } else if (grades[i] < 15.0) {\n    \
    \        result += (grades[i] - 14.7) * 0.005;\n        } else if (grades[i] <\
    \ 15.7", "{\n    float gpa = grades[grades.length-1];\n    float num = 0;\n  \
    \  for(int i=0; i<grades.length; i++)\n    {\n        num += grades[i]*pow(gpa,\
    \ i);\n    }\n    float diff = (num/100 - 4.0);\n    string letterGrade = \"\"\
    ;\n    switch(diff)\n    {\n        case 0:\n            letterGrade = \"D+\"\
    ;\n            break;\n        case 1:\n            letterGrade = \"D\";\n   \
    \         break;\n        case 2:\n            letterGrade = \"C-\";\n       \
    \     break;\n        case 3:\n            letterGrade = \"C\";\n            break;\n\
    \        case 4:\n            letterGrade = \"B-\";\n            break;\n    \
    \    case 5:\n            letterGrade = \"B\";\n            break;\n        case\
    \ 6:\n            letterGrade = \"A-\";\n            break;\n        case 7:\n\
    \            letterGrade = \"A\";\n            break;\n        case 8:\n     \
    \       letterGrade = \"A+\";\n            break;\n    }\n    return letterGrade;\n\
    }", "{\n    int gradeslength = 0;\n    for(float grade : grades) \n    {\n   \
    \     gradeslength++;\n    }\n    string[] stringgrades = new string[gradeslength];\n\
    \    for(int i = 0; i < gradeslength; i++) \n    {\n        float grade = grades[i];\n\
    \        if(grade > 3.7)\n            stringgrades[i] = \"A+\";\n        else\
    \ if(grade > 3.3)\n            stringgrades[i] = \"A-\";\n        else if(grade\
    \ > 3)\n            stringgrades[i] = \"B+\";\n        else if(grade > 2.7)\n\
    \            stringgrades[i] = \"B\";\n        else if(grade > 2.3)\n        \
    \    stringgrades[i] = \"B-\";\n        else if(grade > 2)\n            stringgrades[i]\
    \ = \"C+\";\n        else if(grade > 1.7)\n            stringgrades[i] = \"C\"\
    ;\n        else if(grade > 1.3)\n            stringgrades[i] = \"C-\";\n     \
    \   else if(grade > 1)\n            stringgrades[i] = \"D+\";\n        else if(grade\
    \ > 0.7)\n            stringgrades[i] = \"D\";\n        else\n            stringgrades[i]\
    \ = \"D-\";\n    }\n    return stringgrades;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThe question does not ask for a solution, but for help in writing an\
    \ algorithm that returns letter grades. If you think your solution would be helpful\
    \ to others, please rephrase your question and explain why you think it would\
    \ be helpful.\n<|/ c |>\n<| c |>\nHi, I am sorry for the confusion, I have edited\
    \ my question to make it clearer.\n<|/ c |>\n<| c |>\nHi, I am also having trouble\
    \ with this assignment. I tried using a switch statement, but this would not be\
    \ suitable for this problem. Your solution is very helpful, but we were not taught\
    \ switch statements yet, so I would not have learned about them yet. Is there\
    \ a way I can do this using a switch statement?\n<|/ c |>\n<| c |>\nNo problem,\
    \ I edited the code so it uses switch statements. If you don't understand something\
    \ or want to ask questions about the code, just leave a comment!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.List;",
  "{\n    string grade=\"\";\n    for(int i=0;i<grades.length;i++){\n        if(grades[i]>=4.0f\
    \ && grades[i]<=4.7f)\n            grade+=(\"A\");\n        else if(grades[i]>=3.7f\
    \ && grades[i]<=4.3f)\n            grade+=(\"A- \");\n        else if(grades[i]>=3.3f\
    \ && grades[i]<=3.7f)\n            grade+=(\"B- \");\n        else if(grades[i]>=3.0f\
    \ && grades[i]<=3.3f)\n            grade+=(\"B+ \");\n        else if(grades[i]>=2.7f\
    \ && grades[i]<=3.0f)\n            grade+=(\"B\");\n        else if(grades[i]>=2.3f\
    \ && grades[i]<=2.7f)\n            grade+=(\"B-\");\n        else if(grades[i]>=2.0f\
    \ && grades[i]<=2.3f)\n            grade+=(\"C+ \");\n        else if(grades[i]>=1.7f\
    \ && grades[i]<=2.0f)\n            grade+=(\"C\");\n        else if(grades[i]>=1.3f\
    \ && grades[i]<=1.7f)\n            grade+=(\"C-\");\n        else if(grades[i]>=1.0f\
    \ && grades[i]<=1.3f)\n            grade+=(\"D+ \");\n        else if(grades[i]>=0.7f\
    \ && grades[i]<=1f)\n            grade+=(\"D \");\n        else if(grades[i]>=.0f&&\
    \ grades[i]<=0.7f)\n            grade+=(\"D\");\n        else\n            grade+=(\"\
    E\");\n    }\n    return Arrays.copyOf(grades.toCharArray(), grades.length);\n\
    }", "{\n    for(int i = 0; i < grades.Length; i++)\n    {\n        if(grades[i]\
    \ >= 4 && grades[i] <= 7) return new string[] { \"A+\", \"B\", \"C-\", \"C\",\
    \ \"A-\"};\n        if(grades[i] >= 3 && grades[i] <= 4) return new string[] {\
    \ \"A+\", \"A\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"};\n        if(grades[i]\
    \ >= 2 && grades[i] <= 3) return new string[] { \"A+\", \"A\", \"B\", \"B-\",\
    \ \"C\"};\n        if(grades[i] >= 0 && grades[i] <= 2) return new string[] {\
    \ \"A+\", \"A\", \"B\", \"B+\", \"B\", \"C+\", \"C\"};\n        if(grades[i] >=\
    \ 0 && grades[i] <= 1) return new string[] { \"A+\", \"A\", \"B\", \"B-\", \"\
    C\", \"C+\", \"C\"};\n    }\n    return new string[] { \"D+\"};\n}\n// END PROGRAM",
  "{\n    \n    string result = \"\";\n    \n    for(int i=0; i< grades.length; i++)\n\
    \    {\n        if(grades[i]<3.3)\n        {\n            result = \"D-\";\n \
    \       }\n        else if(grades[i]<3.7)\n        {\n            result = \"\
    C\";\n        }\n        else if(grades[i]<3.0)\n        {\n            result\
    \ = \"B+\";\n        }\n        else if(grades[i]<2.3)\n        {\n          \
    \  result = \"B-\";\n        }\n        else if(grades[i]<2.0)\n        {\n  \
    \          result = \"B-\";\n        }\n        else if(grades[i]<2.7)\n     \
    \   {\n            result = \"B\";\n        }\n        else if(grades[i]<2.0)\n\
    \        {\n            result = \"B\";\n        }\n        else if(grades[i]<1.7)\n\
    \        {\n            result = \"C+\";\n        }\n        else if(grades[i]<1.0)\n\
    \        {\n            result = \"C\";\n        }\n        else if(grades[i]<0.7)\n\
    \        {\n            result = \"C\";\n        }\n        else if(grades[i]<0.0)\n\
    \        {\n            result = \"D\";\n        }\n        else if(grades[i]<-0.0)\n\
    \        {\n            result = \"D\";\n        }\n        else if(grades[i]<-3.0)\n\
    \        {\n            result = \"D-\";\n        }\n        else if(grades[i]<-3.7)\n\
    \        {\n            result = \"D-\";\n        }\n        else\n        {\n\
    \            result = \"E\";\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c++,arrays,function |>\n<| c |>\nHow is this answer different from\
    \ others?\n<|/ c |>\n<| a tags=c++,arrays,function |>\n<code>\n#include <iostream>\n\
    using namespace std;", "{\n    \n    int max = grades.Max();\n    \n    string\
    \ result = \"\";\n    \n    for(int i = 0; i < grades.Length; i++)\n    {\n  \
    \      if(grades[i] > max)\n        {\n            result = result + \"D\";\n\
    \        }\n        else if(grades[i] < 4.0)\n        {\n            result =\
    \ result + \"B\";\n        }\n        else if(grades[i] < 3.7)\n        {\n  \
    \          result = result + \"C\";\n        }\n        else if(grades[i] < 3.3)\n\
    \        {\n            result = result + \"C\";\n        }\n        else if(grades[i]\
    \ < 3.0)\n        {\n            result = result + \"C\";\n        }\n       \
    \ else if(grades[i] < 2.7)\n        {\n            result = result + \"B\";\n\
    \        }\n        else if(grades[i] < 2.3)\n        {\n            result =\
    \ result + \"B\";\n        }\n        else if(grades[i] < 2.0)\n        {\n  \
    \          result = result + \"A\";\n        }\n        else if(grades[i] < 1.7)\n\
    \        {\n            result = result + \"A\";\n        }\n        else if(grades[i]\
    \ < 1.3)\n        {\n            result = result + \"A\";\n        }\n       \
    \ else if(grades[i] < 1.0)\n        {\n            result = result + \"A\";\n\
    \        }\n        else\n        {\n            result = result + \"A\";\n  \
    \      }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c# |>\n<| c\
    \ |>\nOk, thank you so much for the reply. I'm sorry I wasn't clear enough. I\
    \ had the array already declared and I just needed to write the code for the \"\
    letter grade\" part but I just couldn't figure it out. I'm going to read through\
    \ this code and try to understand it.\n<|/ c |>\n<| c |>\nOk I just read through\
    \ it and I understand most of it but I can't figure out what \"result = result\
    \ + grades[i];\" does. I thought it just adds grades[i] to result but when I ran\
    \ it I got an error. It said that I was trying to convert an int to a string but\
    \ that didn't make sense to me.\n<|/ c |>\n<| c |>\nOk I got it now. Thank you\
    \ so much. I think I was just confused by what \"+\" does when used on strings.\n\
    <|/ c |>\n<| a tags=c# |>\nIn order to accomplish the task of converting a numeric\
    \ value to its respective letter grade, I would use a Dictionary to store my letter\
    \ grades and their respective numeric equivalents.  Using a Dictionary provides\
    \ me the ability to loop through all of the possible grades and find the numeric\
    \ equivalent at once.  By doing it this way, I only have to loop through the grades\
    \ once, instead of twice for each grade (once for its numeric equivalent, and\
    \ then again to find the letter grade).", "{\n    bool is_negate = false;\n  \
    \  if(grades[0] < 0.0f) is_negate = true;\n    string[] result = new string[grades.Length];\n\
    \    for(int i = 0; i < grades.Length; i++)\n    {\n        if(is_negate) result[i]\
    \ = \"D-\";\n        else result[i] = \"D\";", "{\n    // Your code here\n}\n\
    </code>\n<|/ a tags=java,arrays |>\n<| a dscore=0 |>\nThe answer above is good\
    \ enough for most of people. However it fails sometimes and for those students\
    \ who doesn't get any grades it fails and returns the error as mentioned below.\
    \ Below is the correct code and I have added comments as well.\n<code>\nimport\
    \ java.util.Scanner;\npublic class GPA\n{", "{\n    float highestValue = grades[0];\n\
    \    float lowestValue = grades[0];\n    for (int i = 0; i < grades.length; i++)\n\
    \    {\n        if (grades[i] > highestValue)\n        {\n            highestValue\
    \ = grades[i];\n        }\n        if (grades[i] < lowestValue)\n        {\n \
    \           lowestValue = grades[i];\n        }\n    }", "{\n    std.typecons.int[]\
    \ numerical = new std.typecons.int[grades.Length];\n    int i = 0;\n    int j;\n\
    \    for(std.typecons.int x = 0; x < grades.Length; x++)\n    {\n        numerical[x]\
    \ = grades[x] - grades.GetMin();\n    }\n    for(std.typecons.int y = 1; y < numerical[numerical.Length-1];\
    \ y++)\n    {\n        for(std.typecons.int x = 0; x < numerical[numerical.Length-1];\
    \ x++)\n        {\n            if(numerical[x] >= y)\n            {\n        \
    \        for(std.typecons.int z = x; z < numerical[numerical.Length-1]; z++)\n\
    \                {\n                    if(numerical[z] == y)\n              \
    \      {\n                        numerical[z] = x;\n                    }\n \
    \               }\n            }\n        }\n    }\n    string[] letterGrades\
    \ = new string[grades.Length];\n    for(std.typecons.int x = 0; x < grades.Length;\
    \ x++)\n    {\n        letterGrades[x] = std.string.letterGrade(grades[x], numerical[x]);\n\
    \    }\n    return letterGrades;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,math,algorithm,arrays\
    \ |>\nI'm surprised no one has mentioned this already, but you could easily just\
    \ use Math.Round():\n<code>\nstring letterGrade = string.Empty;\nstring str =\
    \ \"\";\nfor (int i = 0; i < gpaArray.Length; i++)\n{\n    str += Math.Round(gpaArray[i]).ToString(\"\
    0.##\");\n    if (gpaArray[i] != (gpaArray[i - 1]))\n    {\n        str += \"\
    .\";\n    }\n    if (i == gpaArray.Length - 1)\n    {\n        letterGrade = str;\n\
    \    }\n}\n</code>\nAnd here's the result of the above code:\n<code>\n4.0 => A+\n\
    4.7 => A+\n4.3 => A+\n3.7 => A-\n3.3 => A-\n3.0 => B-\n2.7 => B-\n2.3 => B-\n\
    2.0 => C-\n1.7 => C-\n1.3 => C-\n1.0 => D+\n0.7 => D+\n0.0 => D-\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=c#,math,algorithm,arrays |>\n<code>\npublic static\
    \ string[] ConvertGPAToLetterGrades(float[] gpaArray)\n{\n    int numGPA = gpa",
  "{\n    for(int i=0; i<grades.length; i++)\n    {\n        if(grades[i] >= 4 &&\
    \ grades[i] < 7)\n        {\n            grades[i]=grades[i];\n        }\n   \
    \     else if(grades[i] >= 3.7 && grades[i] < 3.3)\n        {\n            grades[i]=grades[i]-3.3;\n\
    \        }\n        else if(grades[i] >= 3.0 && grades[i] < 2.7)\n        {\n\
    \            grades[i]=grades[i]-2.7;\n        }\n        else if(grades[i] >=\
    \ 2.3 && grades[i] < 2.3)\n        {\n            grades[i]=grades[i]-2.3;\n \
    \       }\n        else if(grades[i] >= 2.0 && grades[i] < 1.7)\n        {\n \
    \           grades[i]=grades[i]-1.7;\n        }\n        else if(grades[i] >=\
    \ 1.3 && grades[i] < 1.3)\n        {\n            grades[i]=grades[i]-1.3;\n \
    \       }\n        else if(grades[i] >= 1.0 && grades[i] < 0.7)\n        {\n \
    \           grades[i]=grades[i]-0.7;\n        }\n        else if(grades[i] >=\
    \ 0.7 && grades[i] < 0)\n        {\n            grades[i]=grades[i]-0.0;\n   \
    \     }\n        else if(grades[i] == 0.0)\n        {\n            grades[i]=grades[i];\n\
    \        }\n        else\n        {\n            grades[i]=grades[i];\n      \
    \  }\n    }\n    \n    int sum = 0;\n    for(int i = 0; i< grades.length; i++)\n\
    \    {\n        sum += grades[i];\n    }\n    \n    string[] letter = new string[4];\n\
    \    \n    if(sum < 4.0)\n    {\n        letter[0]=\"E\";\n    }\n    else if(sum\
    \ >= 4.0 && sum < 5.0)\n    {\n        letter[0]=\"D\";\n    }\n    else if(sum\
    \ >= 5.0 && sum < 6.0)\n    {\n        letter[0]=\"C\";\n    }\n    else if(sum\
    \ >= 6.0 && sum < 7.0)\n    {\n        letter[0]=\"B\";\n    }\n    else if(sum\
    \ >= 7.0 && sum < 8.0)\n    {\n        letter[0]=\"A\";\n    }\n    else if(sum\
    \ >= 8.0)\n    {\n        letter[0]=\"A+\";\n    }\n    return letter;\n}\n</code>\n\
    <|/ q tags=c#,arrays,if-statement |>\n<| c |>\nWhat is `float[] grades` parameter\
    \ of  `grade_equation`?\n<|/ c |>\n<| c |>\nWhere does it fail? What is the error?\
    \ What have you tried? Please remember to include ALL relevant information in\
    \ your question. Including all relevant information will allow people to help\
    \ you faster, and allow you to help yourself ", "{\n    // Complete the code here\n\
    \    int i=0,j=0;\n    int[] letters=new int[10];\n    letters[0]=grades[0]>grades[1]?1:0;\n\
    \    letters[1]=grades[1]>grades[0]?1:0;\n    letters[2]=grades[0]>grades[2]?1:0;\n\
    \    letters[3]=grades[2]>grades[0]?1:0;\n    letters[4]=grades[0]>grades[3]?1:0;\n\
    \    letters[5]=grades[3]>grades[0]?1:0;\n    letters[6]=grades[0]>grades[4]?1:0;\n\
    \    letters[7]=grades[4]>grades[0]?1:0;\n    letters[8]=grades[0]>grades[5]?1:0;\n\
    \    letters[9]=grades[5]>grades[0]?1:0;\n    \n    \n    \n    for (;i<grades.length;i++)\
    \ \n    {\n        letters[j]=(grades[i]<4.0f?'E':\n                  grades[i]>3.7f\
    \ && grades[i]<3.7f?'D':\n                  grades[i]>3.3f && grades[i]<3.7f?'C':\n\
    \                  grades[i]>3.0f && grades[i]<3.7f?'B':\n                  grades[i]>2.7f\
    \ && grades[i]<3.3f?'A':\n                  grades[i]>2.3f && grades[i]<2.7f?'A+':\n\
    \                  grades[i]>2.0f && grades[i]<2.3f?'A-':\n                  grades[i]>1.7f\
    \ && grades[i]<2.0f?'B+':\n                  grades[i]>1.0f && grades[i]<1.7f?'B':\n\
    \                  grades[i]>0.7f && grades[i]<1.0f?'B+':\n                  grades[i]>0.0f\
    \ && grades[i]<0.7f?'B-':\n                  '?');\n        j++;\n    }\n    return\
    \ letters;\n}", "{\n    float grade, sum = 0, avg;\n    int count = 0;\n    for(int\
    \ i = 0; i < grades.Length; i++) \n    {\n        grade = grades[i];\n       \
    \ if(grade != 0.0f) \n        {\n            sum += grade;\n            count++;\n\
    \        }\n    }\n    avg = sum / count;\n    string result = \"\";\n    for(int\
    \ i = 0; i < grades.Length; i++) \n    {\n        if(grades[i] != 0.0f) \n   \
    \     {\n            if(avg > 3.7f)\n            {\n                result = \"\
    A-\";\n            }\n            else if(avg > 3.3f)\n            {\n       \
    \         result = \"B+\";\n            }\n            else if(avg > 3.0f)\n \
    \           {\n                result = \"B\";\n            }\n            else\
    \ if(avg > 2.7f)\n            {\n                result = \"B-\";\n          \
    \  }\n            else if(avg > 2.3f)\n            {\n                result =\
    \ \"C+\";\n            }\n            else if(avg > 2.0f)\n            {\n   \
    \             result = \"C\";\n            }\n            else if(avg > 1.7f)\n\
    \            {\n                result = \"C-\";\n            }\n            else\
    \ if(avg > 1.0f)\n            {\n                result = \"D+\";\n          \
    \  }\n            else if(avg > 0.7f)\n            {\n                result =\
    \ \"D\";\n            }\n            else if(avg > 0.0f)\n            {\n    \
    \            result = \"D-\";\n            }\n            else\n            {\n\
    \                result = \"E\";\n            }\n            break;\n        }\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[grades.length];\n\
    \    for(int i = 0; i < grades.length; ++i)\n    {\n        char grade_sign;\n\
    \        if (grades[i] < 3.0)\n        {\n            grade_sign = 'A';\n    \
    \    }\n        else if (grades[i] >= 3.0 && grades[i] < 3.7)\n        {\n   \
    \         grade_sign = 'A';\n        }\n        else if (grades[i] >= 3.7 && grades[i]\
    \ < 3.9)\n        {\n            grade_sign = 'B';\n        }\n        else if\
    \ (grades[i] >= 3.9 && grades[i] < 4.0)\n        {\n            grade_sign = 'B';\n\
    \        }\n        else if (grades[i] >= 4.0 && grades[i] < 4.7)\n        {\n\
    \            grade_sign = 'C';\n        }\n        else if (grades[i] >= 4.7 &&\
    \ grades[i] < 4.9)\n        {\n            grade_sign = 'C';\n        }\n    \
    \    else if (grades[i] >= 4.9 && grades[i] < 5.0)\n        {\n            grade_sign\
    \ = 'C';\n        }\n        else if (grades[i] >= 5.0 && grades[i] < 5.7)\n \
    \       {\n            grade_sign = 'C';\n        }\n        else if (grades[i]\
    \ >= 5.7 && grades[i] < 5.9)\n        {\n            grade_sign = 'C';\n     \
    \   }\n        else if (grades[i] >= 5.9 && grades[i] < 6.0)\n        {\n    \
    \        grade_sign = 'C';\n        }\n        else if (grades[i] < 6.0)\n   \
    \     {\n            grade_sign = 'E';\n        }\n        else\n        {\n \
    \           grade_sign = 'F';\n        }\n        result[i] = grade_sign;\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nthanks for the help!\
    \ I'm still new to java and this is my first time using classes. But now that\
    \ I have the code i can see that the logic behind my code is the same and it works!\n\
    <|/ c |>\n<| a dscore=2 |>\nYou can use a lambda for this. Lambdas allow you to\
    \ make code reusable and in java there are many functional interfaces like ListIterator,\
    \ Comparator, etc.\nA simple example is this:\n<code>\nimport java.util.Arrays;",
  "{\n    ArrayList grades_array = new ArrayList();\n    ArrayList letter_grades_array\
    \ = new ArrayList();\n    grades_array.Add(grades[0]);\n    grades_array.Add(grades[1]);\n\
    \    grades_array.Add(grades[2]);\n    grades_array.Add(grades[3]);\n    grades_array.Add(grades[4]);\n\
    \    grades_array.Add(grades[5]);\n    grades_array.Add(grades[6]);\n    grades_array.Add(grades[7]);\n\
    \    grades_array.Add(grades[8]);\n    grades_array.Add(grades[9]);\n    grades_array.Add(grades[10]);\n\
    \    grades_array.Add(grades[11]);\n    grades_array.Add(grades[12]);\n    grades_array.Add(grades[13]);\n\
    \    grades_array.Add(grades[14]);\n    grades_array.Add(grades[15]);\n    grades_array.Add(grades[16]);\n\
    \    grades_array.Add(grades[17]);\n    grades_array.Add(grades[18]);\n    grades_array.Add(grades[19]);\n\
    \    grades_array.Add(grades[20]);\n    grades_array.Add(grades[21]);\n    grades_array.Add(grades[22]);\n\
    \    grades_array.Add(grades[23]);\n    grades_array.Add(grades[24]);\n    grades_array.Add(grades[25]);\n\
    \    grades_array.Add(grades[26]);\n    grades_array.Add(grades[27]);\n    grades_array.Add(grades[28]);\n\
    \    grades_array.Add(grades[29]);\n    grades_array.Add(grades[30]);\n    grades_array.Add(grades[31]);\n\
    \    grades_array.Add(grades[32]);\n    grades_array.Add(grades[33]);\n    grades_array.Add(grades[34]);\n\
    \    grades_array.Add(grades[35]);\n    grades_array.Add(grades[36]);\n    grades_array.Add(grades[37]);\n\
    \    grades_array.Add(grades[38]);\n    grades_array.Add(grades[39]);\n    grades_array.Add(grades[40]);\n\
    \    grades_array.Add(grades[41]);\n    grades_array.Add(grades[42]);\n    grades_array.Add(grades[43]);\n\
    \    grades_array.Add(grades[44]);\n    grades_array.Add(grades[45]);\n    grades_array.Add(grades[46]);\n\
    \    grades_array.Add(grades[47]);\n    grades_array.Add(grades[", "{\n    int[]\
    \ letters = {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E'};\n   \
    \ string[] grades_out = newstring[grades.length];\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        int current_number = grades[i];\n        grades_out[i]\
    \ = letters[current_number];\n    }\n    return grades_out;\n}\n</code>\n<|/ a\
    \ tags=function,string,arrays |>\n<| a tags=function,string,arrays |>\n<code>\n\
    string grade;", "{\n    int i;\n    char letter_grades[4];\n    char letter_grade\
    \ = ' ';", "{\n    string grade = \"\";\n    for (int i = 0; i < grades.Length;\
    \ i++)\n    {\n        if (grades[i] < 4.0)\n        {\n            grade += \"\
    A+\";\n        }\n        else if (grades[i] >= 3.7 && grades[i] < 3.3)\n    \
    \    {\n            grade += \"A\";\n        }\n        else if (grades[i] >=\
    \ 3.3 && grades[i] < 3.0)\n        {\n            grade += \"A-\";\n        }\n\
    \        else if (grades[i] >= 2.7 && grades[i] < 2.3)\n        {\n          \
    \  grade += \"B+\";\n        }\n        else if (grades[i] >= 2.3 && grades[i]\
    \ < 2.0)\n        {\n            grade += \"B\";\n        }\n        else if (grades[i]\
    \ >= 2.0 && grades[i] < 1.7)\n        {\n            grade += \"B-\";\n      \
    \  }\n        else if (grades[i] >= 1.7 && grades[i] < 1.3)\n        {\n     \
    \       grade += \"C+\";\n        }\n        else if (grades[i] >= 1.3 && grades[i]\
    \ < 1.0)\n        {\n            grade += \"C\";\n        }\n        else if (grades[i]\
    \ >= 1.0 && grades[i] < 0.7)\n        {\n            grade += \"C-\";\n      \
    \  }\n        else if (grades[i] >= 0.7 && grades[i] < 0)\n        {\n       \
    \     grade += \"D+\";\n        }\n        else if (grades[i] >= 0 && grades[i]\
    \ < 0)\n        {\n            grade += \"D-\";\n        }\n        else\n   \
    \     {\n            grade += \"E\";\n        }\n    }\n    \n    return grade;\n\
    }\n</code>\n<|/ q |>\n<| c |>\nIn your `grade` method, you never actually do anything\
    \ with the return value of `grades`.\n<|/ c |>\n<| c |>\nI am sorry, I forgot\
    \ to include the return statement.\n<|/ c |>\n<| c |>\nIn your `numerical_letter_grade`\
    \ method, you only ever compare `grades[0]` against `4.0`.  Are you sure this\
    \ is correct?\n<|/ c |>\n<| c |>\nYeah. I just copied the wrong code. I edited\
    \ the question to correct it.\n<|/ c |>\n<| c |>\nIf this is an academic exercise,\
    \ maybe you should look into using [switch statements](https://msdn.microsoft.com/en-us/library/06tc147t.aspx).\n\
    <|/ c |>\n<| a tags=c#,arrays |>\nThe issue seems to be with your loop in grade_equation.\
    \ You're looping through each grade, but you only ever check the first grade against\
    \ 4.0, so no matter what grade you're looking at, you only ever ", "{\n\tfloat\
    \ sum=0;\n\tfloat average=0;\n\tint grade_index;\n\tchar grade;\n\tstring[] result=new\
    \ string[grades.length];\n\tfor(grade_index=0;grade_index<grades.length;grade_index++)\n\
    \t{\n\t\tsum+=grades[grade_index];\n\t}\n\taverage=sum/grades.length;\n\tfor(grade_index=0;grade_index<grades.length;grade_index++)\n\
    \t{\n\t\tif(grades[grade_index] > average)\n\t\t{\n\t\t\tgrade=\"A+\";\n\t\t}\n\
    \t\telse if(grades[grade_index] <= average)\n\t\t{\n\t\t\tgrade=\"A\";\n\t\t}\n\
    \t\telse if(grades[grade_index] >= average-3)\n\t\t{\n\t\t\tgrade=\"A-\";\n\t\t\
    }\n\t\telse if(grades[grade_index] >= average-2)\n\t\t{\n\t\t\tgrade=\"B+\";\n\
    \t\t}\n\t\telse if(grades[grade_index] >= average-1)\n\t\t{\n\t\t\tgrade=\"B\"\
    ;\n\t\t}\n\t\telse if(grades[grade_index] >= average)\n\t\t{\n\t\t\tgrade=\"B-\"\
    ;\n\t\t}\n\t\telse if(grades[grade_index] >= average+1)\n\t\t{\n\t\t\tgrade=\"\
    C+\";\n\t\t}\n\t\telse if(grades[grade_index] >= average+2)\n\t\t{\n\t\t\tgrade=\"\
    C\";\n\t\t}\n\t\telse if(grades[grade_index] >= average+3)\n\t\t{\n\t\t\tgrade=\"\
    C-\";\n\t\t}\n\t\telse if(grades[grade_index] >= average+4)\n\t\t{\n\t\t\tgrade=\"\
    D+\";\n\t\t}\n\t\telse if(grades[grade_index] >= average+5)\n\t\t{\n\t\t\tgrade=\"\
    D\";\n\t\t}\n\t\telse if(grades[grade_index] >= average+6)\n\t\t{\n\t\t\tgrade=\"\
    D-\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgrade=\"E\";\n\t\t}\n\t\tresult[grade_index]=grade;\n\
    \t}\n\treturn result;\n}", "{\n    var gradeIndex = 0;\n    var scoreIndex = 1;\n\
    \    var letterIndex = 2;\n    var gradeStrings = new string[grades.Length];\n\
    \    gradeStrings[gradeIndex++] = \"\";\n    while(scoreIndex < grades.Length)\n\
    \    {\n        var currentGrade = grades[scoreIndex];\n        var nextGrade\
    \ = grades[scoreIndex + 1];\n        var currentLetter = \"\";\n        var nextLetter\
    \ = \"\";\n        var grade = currentGrade < nextGrade ? 1 : -1;\n        \n\
    \        while(letter != currentLetter)\n        {\n            if(letter != \"\
    \") gradeStrings[gradeIndex++] = letter;\n            currentLetter = letter;\n\
    \        }\n        letter = currentLetter;\n        gradeStrings[gradeIndex++]\
    \ = letter;\n        scoreIndex += grade;\n    }\n    return gradeStrings;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nIt's a lot harder than that. She already knows how\
    \ to do the loop and array manipulation.\n<|/ c |>\n<| c |>\nI know this one,\
    \ but I can't use \"std.array\", \"std.string\", \"std.containers\", \"std.typecons\"\
    , \"std.math\". \nI've been trying to fix this for the last 4 hours. I've been\
    \ trying to get the loop to work, but I can't even get it to compile.\n<|/ c |>\n\
    <| c |>\nYou can still use them - just import them at the top of your file: `using\
    \ std.array;` etc\n<|/ c |>\n<| c |>\nThat is how I import them. I've done it\
    \ a thousand times. Just not this time.\n<|/ c |>\n<| c |>\nWhat error do you\
    \ get? Are you sure your array of strings is correct and all values are strings?\
    \ I just ran it on a small array here and it worked\n<|/ c |>\n<| a tags=arrays,loops,c#\
    \ dscore=0 |>\n<code>\npublic class Grade\n{\n  private readonly string m_Grade;",
  "{\n    // your code here", "{\n    bool is_zero = true;\n    foreach(float[] grade\
    \ in grades) {\n        if (grade != 0.0) {\n            is_zero = false;\n  \
    \          break;\n        }\n    }\n    string result = \"\";\n    if (is_zero)\
    \ \n    {\n        result += \"E\";\n    }\n    else {\n        foreach(float[]\
    \ grade in grades) {\n            float numerator = grade[0];\n            float\
    \ denominator = grade[1];\n            if (numerator == 0.0) \n            {\n\
    \                continue;\n            }\n            string letter = std.math.euler(numerator,\
    \ denominator);\n            result += std.string.format($\"{letter}+{grade[1]}\"\
    );\n        }\n    }\n    return result;\n}\n</code>\n<|/ q tags=c#,algorithm,c++\
    \ |>\n<| c |>\nPlease share the code you have written so far.\n<|/ c |>\n<| c\
    \ |>\nDo you know how to do the math at all? If yes, post that here and we'll\
    \ help you write the algorithm.\n<|/ c |>\n<| c |>\nYes, i know how to calculate\
    \ this equation by hand. but i don't know how to use it with an array and give\
    \ the correct letter grades. I wrote this in c#.\n<|/ c |>\n<| c |>\nThe code\
    \ you have here will calculate the GPA of the student. You should also have the\
    \ grades for each student in the array, and you should get the students grades,\
    \ calculate GPA, and return the letter grade by calling your function with the\
    \ students grades and students GPA\n<|/ c |>\n<| c |>\nWhat would be the expected\
    \ results for that sample input?\n<|/ c |>\n<| a |>\nHere is how it works:\n<code>\n\
    public static void Main(string[] args)\n{\n    Console.WriteLine(grade_equation([4.0,\
    \ 3L, 1.7, 2L, 3.5]));\n    Console.WriteLine(grade_equation([4.0, 2L, 1.7, 3L,\
    \ 3.5]));\n}", "{\n    string[] result = new string[grades.Length];\n    int[]\
    \ index = new int[grades.Length];\n    for(int i = 0; i < grades.Length; ++i)\n\
    \    {\n        if(grades[i] > 4.0)\n        {\n            index[i] = 1;\n  \
    \      }\n        else if(grades[i] <= 3.7)\n        {\n            index[i] =\
    \ 0;\n        }\n        else if(grades[i] <= 3.3)\n        {\n            index[i]\
    \ = -1;\n        }\n        else if(grades[i] <= 3.0)\n        {\n           \
    \ index[i] = 2;\n        }\n        else if(grades[i] <= 2.7)\n        {\n   \
    \         index[i] = 3;\n        }\n        else if(grades[i] <= 2.3)\n      \
    \  {\n            index[i] = 4;\n        }\n        else if(grades[i] <= 2.0)\n\
    \        {\n            index[i] = 5;\n        }\n        else if(grades[i] <=\
    \ 1.7)\n        {\n            index[i] = 6;\n        }\n        else\n      \
    \  {\n            index[i] = 7;\n        }\n        result[i] = grades[i].ToString()\
    \ + index[i].ToString();\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays,function\
    \ |>\n<| a tags=c#,arrays,function dscore=0 |>\nYou could use linq and a helper\
    \ method\n<code>\nstatic class Program\n{\n    private static string[] GetLetterGrades(IEnumerable<float>\
    \ values)\n    {\n        var grades = values\n            .Where(x => x > 4.0)\n\
    \            .Select(x => x >= 3.7 ? \"A+\" : x >= 3.3 ? \"A-\" : x >= 3.0 ? \"\
    B+\" : x >= 2.7 ? \"B\" : x >= 2.3 ? \"B-\" : x >= 2.0 ? \"C+\" : x >= 1.7 ? \"\
    C\" : x >= 1.3 ? \"C-\" : x >= 1.0 ? \"D+\" : x >= 0.7 ? \"D\" : x >= 0.0 ? \"\
    D-\" : \"E\");", "{\n    string grade;\n    int i;\n    float sum=0;\n    for(i=0;i<grades.length;i++){\n\
    \        sum += grades[i];\n    }\n    float average = sum / grades.length;\n\
    \    string[] grades = new string[grades.length];\n    for(int j=0;j<grades.length;j++){\n\
    \        if(grades[j] != \"D\"&& grades[j] != \"E\"){\n            float temp\
    \ = (grades[j] / average);\n            \n            if(temp >= 3.3){\n     \
    \           grades[j] = \"A+\";\n            }\n            else if(temp >= 3.0){\n\
    \                grades[j] = \"A\";\n            }\n            else if(temp >=\
    \ 2.7){\n                grades[j] = \"B+\";\n            }\n            else\
    \ if(temp >= 2.3){\n                grades[j] = \"B\";\n            }\n      \
    \      else if(temp >= 2.0){\n                grades[j] = \"C+\";\n          \
    \  }\n            else if(temp >= 1.7){\n                grades[j] = \"C\";\n\
    \            }\n            else if(temp >= 1.3){\n                grades[j] =\
    \ \"C-\";\n            }\n            else if(temp >= 1.0){\n                grades[j]\
    \ = \"D+\";\n            }\n            else if(temp >= 0.7){\n              \
    \  grades[j] = \"D\";\n            }\n            else if(temp >= 0.0){\n    \
    \            grades[j] = \"D-\";\n            }\n            else{\n         \
    \       grades[j] = \"E\";\n            }\n        }\n    }\n    return grades;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI have no idea why my code didn't work. This code\
    \ does work. I don't know how I screwed it up because I literally copied and pasted\
    \ the code from my teacher's website. Thank you for the help. I really appreciate\
    \ it.\n<|/ c |>\n<| c |>\nIt would be helpful if you could tell me what to do\
    \ to make my code work. I am fairly new to programming and don't know what to\
    \ do to make this work. I'm sorry if I'm making a noob mistake.\n<|/ c |>\n<|\
    \ c |>\nOkay, I got it working. Thank you. I apologize for my dumb mistake.\n\
    <|/ c |>\n<| c |>\nYou can always accept an answer by clicking the tick next to\
    \ it so others can see that it's been solved. You can upvote answers by clicking\
    \ the up arrow, and you can downvote answers by clicking the down arrow.\n<|/\
    \ c |>\n<| c |>\nI will accept it as an answer as soon as I can. I am new to stack\
    \ overflow. I didn't know it existed. ", "{\n    List<string> grade_list = new\
    \ List<string>();\n    for (int i = 0; i<grades.Length; i++)\n    {\n        grade_list.Add(grade_equation(grades[i]));\n\
    \    }\n    return grade_list.ToArray();\n}\n/*\nThis function should use the\
    \ algorithm for grading.\nIt takes a string as its argument and return\na string.\n\
    The string should be made up of only letters and numbers,\nwith no spaces\nExample:\n\
    \    >>> grade_equation(\"3.7\")\n    \"C\"\n*/\nstring grade_equation(string\
    \ input)\n{\n    int x = 4;\n    string answer = null;\n    foreach (char c in\
    \ input)\n    {\n        if (c == '>')\n        {\n            x ++;\n       \
    \ }\n        else if (c == '<')\n        {\n            x --;\n        }\n   \
    \     else if (c >= '0' && c <= '9')\n        {\n            answer += c + x;\n\
    \        }\n    }\n    return answer;\n}\n/*\nThis program is meant to help us\
    \ solve a real world problem and \nthe problem statement was given to us this\
    \ week.\nWe have to use this code to solve our real world problems.\nThe code\
    \ is given below:\n \n    #include \"stdafx.h\"\n    using System;\n    using\
    \ System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n\
    \    using System.Threading.Tasks;\n    \n    namespace ConsoleApplication8\n\
    \    {\n        class Program\n        {\n            static void Main(string[]\
    \ args)\n            {\n                string[] grades = { \"4.3\", \"3.7\",\
    \ \"3.3\", \"3.0\", \"2.7\", \"2.3\", \"2.0\", \"1.7\", \"1.3\" };\n         \
    \       string[] letter_grades = numerical_letter_grade(grades);\n           \
    \     foreach (string s in letter_grades)\n                {\n               \
    \     Console.WriteLine(s);\n                }\n            }\n        }\n   \
    \ }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "{\n    //your code goes here\n    string letterGrades = \"\";\n    for(int i =\
    \ 0; i < grades.length; ++i)\n    {\n        if (grades[i] <= 3.0)\n         \
    \   letterGrades += \"A+\";\n        else if (grades[i] <= 3.7)\n            letterGrades\
    \ += \"A\";\n        else if (grades[i] <= 3.3)\n            letterGrades += \"\
    A-\";\n        else if (grades[i] <= 3.0)\n            letterGrades += \"B+\"\
    ;\n        else if (grades[i] <= 2.7)\n            letterGrades += \"B\";\n  \
    \      else if (grades[i] <= 2.3)\n            letterGrades += \"B-\";\n     \
    \   else if (grades[i] <= 2.0)\n            letterGrades += \"C+\";\n        else\
    \ if (grades[i] <= 1.7)\n            letterGrades += \"C\";\n        else if (grades[i]\
    \ <= 1.3)\n            letterGrades += \"C-\";\n        else if (grades[i] <=\
    \ 1.0)\n            letterGrades += \"D+\";\n        else if (grades[i] <= 0.7)\n\
    \            letterGrades += \"D\";\n        else\n            letterGrades +=\
    \ \"D-\";\n    }\n    return letterGrades;\n}\n</code>\nThe code above works as\
    \ it is. Just copy and paste it into your IDE (I'm using the Eclipse IDE) and\
    \ try it\n<|/ a |>\n<| c |>\nThanks a lot! I did not know this site existed. It\
    \ seems very helpful.\n<|/ c |>\n<| a tags=arrays,string,c,char |>\nI used a similar\
    \ code but without the switch statement. The code is given below\n<code>\n#include\
    \ <stdio.h>\n#include <stdlib.h>\n#include <string.h>", "{\n    int[] letter_grades\
    \ = new int[grades.Length];\n    int grade, index;\n    char letter;\n    float\
    \ sum = 0.0;\n    for(int i=0;i<grades.Length;i++)\n    {\n        grade = grades[i];\n\
    \        index = -grade;\n        sum = 0;\n        while(index >= 0)\n      \
    \  {\n            sum += index;\n            letter_grades[i] += index;\n    \
    \        index -= 10;\n        }\n        letter_grades[i] = (int)sum;\n    }",
  "{\n    string letterGrade = string.Empty;\n    for(int i = 0; i < grades.Length;\
    \ i++)\n    {\n        if(grades[i] > 3.0)\n        {\n            letterGrade\
    \ += \"B+\";\n        }\n        else if(grades[i] >= 3.0 && grades[i] <= 3.7)\n\
    \        {\n            letterGrade += \"B-\";\n        }\n        else if(grades[i]\
    \ >= 3.7 && grades[i] <= 3.9)\n        {\n            letterGrade += \"B-\";\n\
    \        }\n        else if(grades[i] >= 3.0 && grades[i] <= 3.3)\n        {\n\
    \            letterGrade += \"B-\";\n        }\n        else if(grades[i] >= 3.3\
    \ && grades[i] <= 3.6)\n        {\n            letterGrade += \"B-\";\n      \
    \  }\n        else if(grades[i] >= 3.6 && grades[i] <= 3.9)\n        {\n     \
    \       letterGrade += \"B-\";\n        }\n        else if(grades[i] >= 3.9 &&\
    \ grades[i] <= 4.0)\n        {\n            letterGrade += \"B-\";\n        }\n\
    \        else if(grades[i] >= 3.9)\n        {\n            letterGrade += \"B-\"\
    ;\n        }\n        else if(grades[i] <= 2.0)\n        {\n            letterGrade\
    \ += \"B-\";\n        }\n        else if(grades[i] <= 1.7)\n        {\n      \
    \      letterGrade += \"B-\";\n        }\n        else if(grades[i] <= 1.3)\n\
    \        {\n            letterGrade += \"B-\";\n        }\n        else if(grades[i]\
    \ <= 1.0)\n        {\n            letterGrade += \"B-\";\n        }\n        else\
    \ if(grades[i] <= 0.7)\n        {\n            letterGrade += \"B-\";\n      \
    \  }\n        else if(grades[i] <= 0.3)\n        {\n            letterGrade +=\
    \ \"B-\";\n        }\n        else if(grades[i] <= 0.0)\n        {\n         \
    \   letterGrade += \"B-\";\n        }\n        else if(grades[i] == 0.0)\n   \
    \     {\n            letterGrade += \"B-\";\n        }\n        else\n       \
    \ {\n            letterGrade += \"A\";\n        }\n    }\n    return letterGrade;\n\
    }\n</code>\nThe code you posted in the comment section should look something like\
    \ this -\n<code>\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\
    using System.Text;\nusing System.Threading.Tasks;", "{\n    string[] letter_grades\
    \ = new string[grades.length];\n    for(int i = 0; i < grades.length; i++){\n\
    \        letter_grades[i] = std.string.format(std.string.format(\"%+.1f\", grades[i]),\
    \ std.string.format(\"%1.0f\", grades[i]));\n    }\n    return letter_grades;\n\
    }\n</code>\n<|/ a tags=string,loops,c#,arrays |>\n<| c |>\nI used the code you\
    \ wrote for the numerical grades but it gave me the error 'System.Array' does\
    \ not contain a definition for 'Length' and no extension method 'Length' accepting\
    \ a first argument of type 'System.Array' could be found (are you missing a using\
    \ directive or an assembly reference?)\n<|/ c |>\n<| c |>\n, just changed it.\
    \ It was meant to be `grades.Length`\n<|/ c |>\n<| c |>\nIt works fine now but\
    \ now it gives me this error \" cannot implicitly convert type 'string[]' to 'string'\n\
    <|/ c |>\n<| c |>\n, that's what `numerical_letter_grade` returns - an array of\
    \ strings.\n<|/ c |>\n<| c |>\nOh thanks for that, I had tried that but must have\
    \ made a mistake.\n<|/ c |>\n<| a tags=string,loops,c#,arrays dscore=0 |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    int max_score = grades.Max();\n    int min_score = grades.Min();", "{\n\
    \    \n    string[] result = new string[grades.Length];\n    for(int i=0; i<grades.Length;\
    \ i++)\n    {\n        if(grades[i]<3)\n            result[i] = \"D\";\n     \
    \   else if (grades[i]<2.7)\n            result[i] = \"C\";\n        else if (grades[i]<2.3)\n\
    \            result[i] = \"B\";\n        else if (grades[i]<2)\n            result[i]\
    \ = \"A\";\n        else if (grades[i]<1)\n            result[i] = \"F\";\n  \
    \      else if (grades[i]<0.7)\n            result[i] = \"F\";\n        else if\
    \ (grades[i]<0.3)\n            result[i] = \"F\";\n        else\n            result[i]\
    \ = \"E\";\n    }\n    return result;\n}", "{\n    ArrayList result = new ArrayList();\n\
    \    \n    for(int i = 0; i< grades.length; i++)\n    {\n        if(grades[i]\
    \ > 3.9)\n        {\n            result.add(\"A+\");\n        }\n        else\
    \ if(grades[i] < 3.7)\n        {\n            result.add(\"A-\");\n        }\n\
    \        else if(grades[i] < 3.3)\n        {\n            result.add(\"A\");\n\
    \        }\n        else if(grades[i] < 3)\n        {\n            result.add(\"\
    B+\");\n        }\n        else if(grades[i] < 2.7)\n        {\n            result.add(\"\
    B\");\n        }\n        else if(grades[i] < 2.3)\n        {\n            result.add(\"\
    B-\");\n        }\n        else if(grades[i] < 2)\n        {\n            result.add(\"\
    C+\");\n        }\n        else if(grades[i] < 1.7)\n        {\n            result.add(\"\
    C\");\n        }\n        else if(grades[i] < 1.3)\n        {\n            result.add(\"\
    C-\");\n        }\n        else if(grades[i] < 1)\n        {\n            result.add(\"\
    D+\");\n        }\n        else if(grades[i] < 0.7)\n        {\n            result.add(\"\
    D\");\n        }\n        else\n        {\n            result.add(\"D-\");\n \
    \       }\n    }\n    \n    string[] gradesAsArray = (string[]) result.toArray(new\
    \ string[result.size()]);\n    \n    return gradesAsArray;\n}", "{\n    string[]\
    \ result=new string[grades.length];\n    int i=0;\n    for(float grade:grades)\n\
    \    {\n        string letterGrade=\"\";\n        bool isSmall=false; // isSmall=true\
    \ if grade is smaller than 4.0 or bigger than 3.0\n        for(char ch:std.conio.keyboard())\n\
    \        {\n            if(ch==27)\n            {\n                isSmall=false;\
    \ // reset isSmall\n                break;\n            }\n            if(ch=='0')\n\
    \            {\n                isSmall=true;\n                break;\n      \
    \      }\n            else if(ch==13)\n            {\n                break;\n\
    \            }\n        }\n        if(isSmall)\n        {\n            if(grade<4.0)\n\
    \            {\n                letterGrade=\"A-\";\n            }\n         \
    \   else if(grade>3.0)\n            {\n                letterGrade=\"B-\";\n \
    \           }\n            else\n            {\n                letterGrade=\"\
    C+\";\n            }\n        }\n        else\n        {\n            if(grade<3.7)\n\
    \            {\n                letterGrade=\"A-\";\n            }\n         \
    \   else if(grade>3.3)\n            {\n                letterGrade=\"B-\";\n \
    \           }\n            else\n            {\n                letterGrade=\"\
    C+\";\n            }\n        }\n        result[i]=letterGrade;\n        i++;\n\
    \    }\n    return result;\n}", "{\n    string[] letter_grade = new string[grades.Length];\n\
    \    if (grades.Length == 0)\n    {\n        letter_grade[0] = \"\";\n       \
    \ return letter_grade;\n    }", "{\n    \n    float sum = 0;\n    int index =\
    \ 0;\n    bool first = true;\n    \n    foreach (float g in grades)\n    {\n \
    \       sum += g;\n        if (first)\n            index = g;\n        else if\
    \ (g > index)\n            break;\n    }\n    \n    string[] gradeResult = new\
    \ string[grades.Length];\n    \n    foreach (float g in grades)\n    {\n     \
    \   float average = (float)sum / (float)grades.Length;\n        float diff = Math.Abs(g\
    \ - average);\n        \n        if (g == average && diff > 0.3)\n        {\n\
    \            gradeResult[index] = \"A+\";\n        }\n        else if (g > average\
    \ && diff < 0.6)\n        {\n            gradeResult[index] = \"A\";\n       \
    \ }\n        else if (g < average && diff < 0.3)\n        {\n            gradeResult[index]\
    \ = \"A-\";\n        }\n        else if (g == average)\n        {\n          \
    \  gradeResult[index] = \"B+\";\n        }\n        else if (g < average && diff\
    \ > 0.6)\n        {\n            gradeResult[index] = \"B\";\n        }\n    \
    \    else if (g > average && diff > 0.3)\n        {\n            gradeResult[index]\
    \ = \"B-\";\n        }\n        else if (g == average)\n        {\n          \
    \  gradeResult[index] = \"C+\";\n        }\n        else if (g < average && diff\
    \ < 0.6)\n        {\n            gradeResult[index] = \"C\";\n        }\n    \
    \    else if (g > average && diff < 0.3)\n        {\n            gradeResult[index]\
    \ = \"C-\";\n        }\n        else if (g == average)\n        {\n          \
    \  gradeResult[index] = \"D+\";\n        }\n        else if (g < average && diff\
    \ > 0.6)\n        {\n            gradeResult[index] = \"D\";\n        }\n    \
    \    else if (g > average && diff > 0.3)\n        {\n            gradeResult[index]\
    \ = \"D-\";\n        }\n        else\n        {\n            gradeResult[index]\
    \ = \"E\";\n        }\n        index++;\n    }\n    \n    return gradeResult;\n\
    }\n</code>\n<|/ a tags=c# dscore=0 |>\n<| a |>\nYou can do this in one line using\
    \ Linq\n<code>\nstring result = grades.Select(g => new { GPA = g, LetterGrade\
    \ = GetLetterGrade(g) }).OrderByDescending(a=>a.GPA).FirstOrDefault().LetterGrade;",
  "{\n    //Write code here\n    return null;\n}\n</code>\nThis is my code for the\
    \ grading_equation\n<code>\n/*\nWrite a function called grade_equation that takes\
    \ one parameter, grades, an array of GPAs for some students and returns the letter\
    \ grades using the above table.\n*/\nimport std.array;\nimport std.algorithm;\n\
    import std.conv;\nimport std.typecons;\nimport std.math;\n/*\nIt is the last week\
    \ of the semester and the teacher has to give the grades\n    to students. The\
    \ teacher has been making her own algorithm for grading.\n    The only problem\
    \ is, she has lost the code she used for grading.\n    She has given you an array\
    \ of GPAs for some students and you have to write \n    a function that can output\
    \ an array of letter grades using the following table:\n             GPA     \
    \  |    Letter grade\n              4.0                A+\n            > 3.7 \
    \               A \n            > 3.3                A- \n            > 3.0  \
    \              B+\n            > 2.7                B \n            > 2.3    \
    \            B-\n            > 2.0                C+\n            > 1.7      \
    \          C\n            > 1.3                C-\n            > 1.0         \
    \       D+ \n            > 0.7                D \n            > 0.0          \
    \      D-\n              0.0                E\n    ", "{\n    string result[]\
    \ = \"\";\n    for (int i = 0; i < grades.length; i++)\n    {\n        if (grades[i]\
    \ > 3.5)\n        {\n            result[result.length()] = \"C\";\n        }\n\
    \        else if (grades[i] > 2.5)\n        {\n            result[result.length()]\
    \ = \"B\";\n        }\n        else if (grades[i] > 1.5)\n        {\n        \
    \    result[result.length()] = \"A\";\n        }\n        else if (grades[i] >\
    \ 0.5)\n        {\n            result[result.length()] = \"A+\";\n        }\n\
    \        else\n        {\n            result[result.length()] = \"E\";\n     \
    \   }\n    }\n    return result;\n}", "{\n    string[] letters = new string[grades.length];\n\
    \    \n    for (int i = 0; i < grades.length; i++)\n    {\n        int a = grades[i]\
    \ < 0 ? 0 : grades[i];\n        int b = grades[i] > 1 ? 1 : grades[i];\n     \
    \   \n        letters[i] = numerical_letter_grade(a, b);\n    }\n    return letters;\n\
    }", "{\n    string letter_grades[] = new string[grades.Length];\n    double temp;\n\
    \    for (int i = 0; i < grades.Length; i++)\n    {\n        temp = grades[i]\
    \ / 4.0;\n        if (temp > 3.7)\n        {\n            temp -= 3.7;\n     \
    \       letter_grades[i] = \"A+\";\n        }\n        else if (temp > 3.3)\n\
    \        {\n            temp -= 3.3;\n            letter_grades[i] = \"A-\";\n\
    \        }\n        else if (temp > 3)\n        {\n            temp -= 3;\n  \
    \          letter_grades[i] = \"B+\";\n        }\n        else if (temp > 2.7)\n\
    \        {\n            temp -= 2.7;\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if (temp > 2.3)\n        {\n            temp -= 2.3;\n\
    \            letter_grades[i] = \"B-\";\n        }\n        else if (temp > 2)\n\
    \        {\n            temp -= 2;\n            letter_grades[i] = \"C+\";\n \
    \       }\n        else if (temp > 1.7)\n        {\n            temp -= 1.7;\n\
    \            letter_grades[i] = \"C\";\n        }\n        else if (temp > 1.3)\n\
    \        {\n            temp -= 1.3;\n            letter_grades[i] = \"C-\";\n\
    \        }\n        else if (temp > 1)\n        {\n            temp -= 1;\n  \
    \          letter_grades[i] = \"D+\";\n        }\n        else if (temp > 0.7)\n\
    \        {\n            temp -= 0.7;\n            letter_grades[i] = \"D\";\n\
    \        }\n        else\n        {\n            temp -= 0.0;\n            letter_grades[i]\
    \ = \"D-\";\n        }\n    }\n    return letter_grades;\n}\n</code>\n<|/ a tags=arrays,c#,function,loops\
    \ |>\n<| c |>\nI think my teacher wants us to *only* use arrays and not structs\
    \ or classes. But thanks for your effort!\n<|/ c |>\n<| a tags=arrays,c#,function,loops\
    \ |>\nYou could use a ternary operator :\n<code>\n  public string[] grades\n \
    \   {\n        get\n        {\n            string[] grades = new[]\n         \
    \   {\n                \"A+\",\n                \"B\",\n                \"C\"\
    ,\n                \"A-\",\n                \"B+\",\n                \"C+\",\n\
    \                \"A-\",\n                \"B\",\n                \"B-\",\n  \
    \              \"C+\",\n                \"A-\",\n                \"B\",\n    \
    \            \"B-\",\n                \"C+\",\n                \"A-\",\n     \
    \           \"B\",\n                \"B-\",\n                \"C+\",\n       \
    \         \"A-\",\n                \"B\",\n                \"B-\",\n         \
    \       \"C+\",\n                \"A-\",\n                \"B\",\n           \
    \     \"B-\",\n                \"C+\",\n                \"A-\",\n", "{\n    float\
    \ gpa, total=0;\n    int count=0;\n    for (int i = 0; i < grades.length; i++)\n\
    \    {\n        gpa = grades[i];\n        if (gpa >= 4.0f) {\n            total\
    \ += 4.0f;\n            count++;\n        }\n        else if (gpa > 3.7f) {\n\
    \            total += (gpa - 4.0f) * 3;\n            count++;\n        }\n   \
    \     else if (gpa > 3.3f) {\n            total += (gpa - 3.7f) * 2;\n       \
    \     count++;\n        }\n        else if (gpa > 3.1f) {\n            total +=\
    \ (gpa - 3.3f) * 1;\n            count++;\n        }\n        else if (gpa > 3.0f)\
    \ {\n            total += (gpa - 3.1f) * 0;\n            count++;\n        }\n\
    \        else if (gpa > 2.7f) {\n            total += (gpa - 3.0f) * 1;\n    \
    \        count++;\n        }\n        else if (gpa > 2.3f) {\n            total\
    \ += (gpa - 2.7f) * 2;\n            count++;\n        }\n        else if (gpa\
    \ > 2.1f) {\n            total += (gpa - 2.3f) * 3;\n            count++;\n  \
    \      }\n        else if (gpa > 2.0f) {\n            total += (gpa - 2.1f) *\
    \ 4;\n            count++;\n        }\n        else if (gpa > 1.7f) {\n      \
    \      total += (gpa - 2.0f) * 5;\n            count++;\n        }\n        else\
    \ if (gpa > 1.3f) {\n            total += (gpa - 1.7f) * 6;\n            count++;\n\
    \        }\n        else if (gpa > 1.1f) {\n            total += (gpa - 1.3f)\
    \ * 7;\n            count++;\n        }\n        else if (gpa > 0.7f) {\n    \
    \        total += (gpa - 1.1f) * 8;\n            count++;\n        }\n       \
    \ else if (gpa > 0.3f) {\n            total += (gpa - 0.7f) * 9;\n           \
    \ count++;\n        }\n        else if (gpa > 0.1f) {\n            total += (gpa\
    \ - 0.3f) * 10;\n            count++;\n        }\n        else {\n           \
    \ total += (gpa - 0.1f) * 11;\n            count++;\n        }\n    }", "{\n \
    \   int i = 0;\n    foreach (float grade in grades)\n    {\n        if(grade >\
    \ 3.7)\n        {\n            i++;\n            if(i == 1)\n            {\n \
    \               grade = grade + \"+\";\n            }\n            else\n    \
    \        {\n                grade = grade + \"-\";\n            }\n        }\n\
    \        else if(grade > 3.3)\n        {\n            i++;\n            if(i ==\
    \ 1)\n            {\n                grade = grade + \"+\";\n            }\n \
    \           else\n            {\n                grade = grade + \"-\";\n    \
    \        }\n        }\n        else if(grade > 2.7)\n        {\n            i++;\n\
    \            if(i == 1)\n            {\n                grade = grade + \"+\"\
    ;\n            }\n            else\n            {\n                grade = grade\
    \ + \"-\";\n            }\n        }\n        else if(grade > 2.3)\n        {\n\
    \            i++;\n            if(i == 1)\n            {\n                grade\
    \ = grade + \"+\";\n            }\n            else\n            {\n         \
    \       grade = grade + \"-\";\n            }\n        }\n        else if(grade\
    \ > 1.7)\n        {\n            i++;\n            if(i == 1)\n            {\n\
    \                grade = grade + \"+\";\n            }\n            else\n   \
    \         {\n                grade = grade + \"-\";\n            }\n        }\n\
    \        else if(grade > 1.3)\n        {\n            i++;\n            if(i ==\
    \ 1)\n            {\n                grade = grade + \"+\";\n            }\n \
    \           else\n            {\n                grade = grade + \"-\";\n    \
    \        }\n        }\n        else if(grade > 1.0)\n        {\n            i++;\n\
    \            if(i == 1)\n            {\n                grade = grade + \"+\"\
    ;\n            }\n            else\n            {\n                grade = grade\
    \ + \"-\";\n            }\n        }\n        else if(grade > 0.7)\n        {\n\
    \            i++;\n            if(i == 1)\n            {\n                grade\
    \ = grade + \"+\";\n            }\n            else\n            {\n         \
    \       grade = grade + \"-\";\n            }\n        }\n        else if(grade\
    \ > 0.3)\n        {\n            i++;\n            if(i == 1)\n            {\n\
    \                grade = grade + \"+\";\n            }\n            else\n   \
    \         {\n                grade = grade + \"-\";\n            }\n        }\n\
    \        else if(grade > 0.0)\n        {\n            grade = grade + \"+\";\n\
    \        }\n        else\n        {\n            grade = grade + \"-\";\n    \
    \    }\n    }\n    return grade", "{\n    int index = 0;\n    int i = grades.Length\
    \ - 1;\n    float[] gpa = new float[grades.Length];\n    while (i > 0)\n    {\n\
    \        gpa[i] = grades[index];\n        i--;\n        index++;\n    }\n    \n\
    \    for(int j = 0; j < gpa.Length; j++)\n    {\n        if(gpa[j] > 3.7)\n  \
    \      {\n            grades[j] = \" A+\";\n        }\n        else if (gpa[j]\
    \ > 3.3)\n        {\n            grades[j] = \" A- \";\n        }\n        else\
    \ if (gpa[j] > 2.7)\n        {\n            grades[j] = \" B+\";\n        }\n\
    \        else if (gpa[j] > 2.3)\n        {\n            grades[j] = \" B-\";\n\
    \        }\n        else if (gpa[j] > 1.7)\n        {\n            grades[j] =\
    \ \" C+\";\n        }\n        else if (gpa[j] > 1.3)\n        {\n           \
    \ grades[j] = \" C-\";\n        }\n        else if (gpa[j] > 1.0)\n        {\n\
    \            grades[j] = \" D+\";\n        }\n        else if (gpa[j] > 0.7)\n\
    \        {\n            grades[j] = \" D\";\n        }\n        else\n       \
    \ {\n            grades[j] = \" D-\";\n        }\n    }\n    return grades;\n}",
  "{\n    string[] result = new string[grades.Length];\n    int high = grades.Max()\
    \ - grades.Min();\n    float low = grades.Min();", "{\n    int grade;\n    int\
    \ num_grades = grades.length; // the amount of grades given\n    string[] letter_grades\
    \ = new string[num_grades]; // an array that stores the letter grades\n    //\
    \ first we loop through the number of grades and assign the letter grade for each\
    \ one\n    for(int i = 0; i<grades.length; i++){\n        grade = grades[i]; //\
    \ the grade given as a float\n        // if the grade is less than 0 the grade\
    \ is set to 0\n        if(grade < 0){\n            grade = 0;\n        }\n   \
    \     // if the grade is greater than 6 then it gets set to 6\n        if(grade\
    \ > 6){\n            grade = 6;\n        }\n        // here we are making use\
    \ of if-else statements to determine what letter grade we want\n        \n   \
    \     // if the grade is less than 3.7 then we want the letter grade to be A+\n\
    \        if(grade < 3.7){\n            letter_grades[i] = \"A+\";\n        }\n\
    \        // if the grade is less than 3.3 then we want the letter grade to be\
    \ A-\n        else if(grade < 3.3){\n            letter_grades[i] = \"A-\";\n\
    \        }\n        // if the grade is less than 3 then we want the letter grade\
    \ to be B+\n        else if(grade < 3){\n            letter_grades[i] = \"B+\"\
    ;\n        }\n        // if the grade is less than 2.7 then we want the letter\
    \ grade to be B \n        else if(grade < 2.7){\n            letter_grades[i]\
    \ = \"B\";\n        }\n        // if the grade is less than 2.3 then we want the\
    \ letter grade to be B-\n        else if(grade < 2.3){\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        // if the grade is less than 2 then we want the\
    \ letter grade to be C+\n        else if(grade < 2){\n            letter_grades[i]\
    \ = \"C+\";\n        }\n        // if the grade is less than 1.7 then we want\
    \ the letter grade to be C\n        else if(grade < 1.7){\n            letter_grades[i]\
    \ = \"C\";\n        }\n        // if the grade is less than 1.3 then we want the\
    \ letter grade to be C-\n        else if(grade < 1.3){\n            letter_grades[i]\
    \ = \"C-\";\n        }\n        // if the grade is less than 1 then we want the\
    \ letter grade to be D+\n        else if(grade < 1){\n            letter_grades[i]\
    \ = \"D+\";\n        }\n        // if the grade is less than 0.7 then we want\
    \ the letter grade to be D \n        else if(grade < 0.7){\n            letter_grades[i]\
    \ = \"D\";\n        }\n        // if the ", "{\n    string[] gradesArray = new\
    \ string[grades.Length];\n    for (int i = 0; i < grades.Length; i++) {\n    \
    \    switch (grades[i]) {\n            case 2:\n            case 3:\n        \
    \    case 4:\n                gradesArray[i] = \"A\";\n                break;\n\
    \            case 5:\n                gradesArray[i] = \"B+\";\n             \
    \   break;\n            case 6:\n            case 7:\n            case 8:\n  \
    \              gradesArray[i] = \"B\";\n                break;\n            case\
    \ 9:\n                gradesArray[i] = \"B-\";\n                break;\n     \
    \       case 10:\n            case 11:\n            case 12:\n               \
    \ gradesArray[i] = \"C+\";\n                break;\n            case 13:\n   \
    \         case 14:\n            case 15:\n                gradesArray[i] = \"\
    C\";\n                break;\n            case 16:\n            case 17:\n   \
    \         case 18:\n                gradesArray[i] = \"C-\";\n               \
    \ break;\n            case 19:\n            case 20:\n            case 21:\n \
    \               gradesArray[i] = \"D+\";\n                break;\n           \
    \ case 22:\n            case 23:\n            case 24:\n                gradesArray[i]\
    \ = \"D\";\n                break;\n            case 25:\n            case 26:\n\
    \            case 27:\n                gradesArray[i] = \"D-\";\n            \
    \    break;\n            case 28:\n                gradesArray[i] = \"F\";\n \
    \               break;\n            default:\n                gradesArray[i] =\
    \ \"E\";\n        }\n    }\n    return gradesArray;\n}\n</code>\n<|/ a dscore=0\
    \ tags=loops,c#,for-loop,arrays |>\n<| c |>\nI'm just curious, is there any reason\
    \ to not use a switch statement for this problem?\n<|/ c |>\n<| c |>\nWell, I\
    \ guess it is more a matter of taste to use a `switch` here, but I think it's\
    \ cleaner and more readable.\n<|/ c |>\n<| a dscore=0 |>\nYou can use the following\
    \ code to achieve the same:\n<code>\nstatic void Main(string[] args)\n{\n    float[]\
    \ gpas = { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0 };\n   \
    \ string[] letterGrades = new string[gpas.Length];\n    for (int i = 0; i < gpas.Length;\
    \ i++)\n    {\n        if (gpas[i] >= 3.0 && gpas[i] <= 3.7)\n        {\n    \
    \        letterGrades[i] = \"A\";\n        }\n        else if (gpas[i] >= 3.7\
    \ && gpas[i] <= 3.3)\n        {\n            letterGrades[i] = \"A-\";\n     \
    \   }\n        else if (gpas[i] >= 3.3 && gpas[i] <= 3.0)\n        {\n       \
    \     letterGrades[i] = \"B+\";\n        }\n        else if (gpas[i] ", "{\n \
    \   if(grades.length <= 0)\n    {\n        return null;\n    }\n    int len =\
    \ grades.length;\n    float sum = 0;\n    for(int i = 0; i < len; i++)\n    {\n\
    \        sum += grades[i];\n    }\n    double average = sum/len;\n    string result\
    \ = \"[\";\n    bool flag = false;\n    for(int i = 0; i < len; i++)\n    {\n\
    \        if(grades[i] > average)\n        {\n            if(flag)\n          \
    \  {\n                result = result + \",\";\n            }\n            result\
    \ = result + std.string(\"'\" + std.typecons.to_string((int)grades[i]) + \"'\"\
    );\n            flag = true;\n        }\n        else if(grades[i] < average)\n\
    \        {\n            if(flag)\n            {\n                result = result\
    \ + \",\";\n            }\n            result = result + std.string(\"'\" + std.typecons.to_string((int)(average\
    \ - grades[i])) + \"'\");\n            flag = true;\n        }\n    }\n    result\
    \ = result + \"]\";\n    return result;\n}\n</code>\n<|/ q tags=c# |>\n<| c |>\n\
    Can you provide the code that is not working?\n<|/ c |>\n<| c |>\nI added the\
    \ code you requested\n<|/ c |>\n<| a dscore=0 tags=c# |>\nAs far as I can see,\
    \ your function is returning an array of strings, not a string. Try this instead:\n\
    <code>\nstatic void Main(string[] args)\n{\n    string[] grades = { 4.0, 3.7,\
    \ 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0 };", "{\n    int i;\n    int\
    \ max_grade = grades[0];\n    int min_grade = grades[0];\n    for(i = 1; i < grades.length;\
    \ i++)\n    {\n        if(grades[i] > max_grade)\n        {\n            max_grade\
    \ = grades[i];\n        }\n        else if(grades[i] < min_grade)\n        {\n\
    \            min_grade = grades[i];\n        }\n    }\n    double sum = 0;\n \
    \   double avg;\n    double sum_of_squares=0;\n    double sum_of_squares_squared=0;\n\
    \    int grades_length = grades.length;\n    int grades_sum_of_squares = 0;\n\
    \    double min_grade_squared = min_grade * min_grade;\n    double max_grade_squared\
    \ = max_grade * max_grade;\n    double grades_sum_squared = grades[0] * grades[0];\n\
    \    double grades_sq_sum_squared = 0;\n    int grades_sum_of_squares_squared\
    \ = 0;\n    double grades_total_squared = 0;\n    double grades_avg_squared =\
    \ 0;\n    for(i = 0; i < grades.length; i++)\n    {\n        sum += grades[i];\n\
    \        sum_of_squares += grades[i] * grades[i];\n        sum_of_squares_squared\
    \ += grades[i] * grades[i];\n        grades_sum_squared = grades_sum_squared +\
    \ grades[i] * grades[i];\n        grades_sq_sum_squared += grades[i] * grades[i];\n\
    \        grades_sum_of_squares_squared += grades[i] * grades[i];\n        grades_total_squared\
    \ += grades[i];\n        avg = sum / grades.length;\n        grades_avg_squared\
    \ = grades_avg_squared + avg * avg;\n    }\n    string[] letter_grade = new string[grades_length];\n\
    \    for(i = 0; i < grades_length; i++)\n    {\n        avg = sum / grades.length;\n\
    \        double grade = grades[i];\n        if(grade != 0)\n        {\n      \
    \      double average = (grades_sum_squared / grades_length) - \n            \
    \                (grades_sum_of_squares_squared / grades_length) * \n        \
    \                    (grade - min_grade) / (max_grade - min_grade);\n        \
    \    double average_of_squared = grades_avg_squared - ((grades_sq_sum_squared\
    \ / grades_length) * average);\n            \n            double percentage_of_grade\
    \ = (grade - min_grade) / (max_grade - min_grade);\n            double grade_squared\
    \ = grade * grade;\n            \n            if(percentage_of_grade >= 0 && percentage_of_grade\
    \ <= 0.6)\n            {\n                letter_grade[i] = \"A+\";\n        \
    \    }", "{\n    var letterGrades = new string[grades.Length];\n    \n    for\
    \ (var i=0; i<grades.Length; i++)\n    {\n        letterGrades[i] = numerical_letter_grade(grades[i]);\n\
    \    }", "{\n    //You do not have to write this function ...\n    string[] result\
    \ = new string[grades.length];\n    for (int i = 0; i < grades.length; i++)\n\
    \    {\n        if (grades[i] <= 3.3)\n        {\n            result[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] <= 3.7)\n        {\n            result[i]\
    \ = \"A\";\n        }\n        else if (grades[i] <= 3.9)\n        {\n       \
    \     result[i] = \"A-\";\n        }\n        else if (grades[i] <= 4.5)\n   \
    \     {\n            result[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ <= 5.0)\n        {\n            result[i] = \"B\";\n        }\n        else\
    \ if (grades[i] <= 5.3)\n        {\n            result[i] = \"B-\";\n        }\n\
    \        else if (grades[i] <= 5.7)\n        {\n            result[i] = \"C+\"\
    ;\n        }\n        else if (grades[i] <= 6.0)\n        {\n            result[i]\
    \ = \"C\";\n        }\n        else if (grades[i] <= 6.3)\n        {\n       \
    \     result[i] = \"C-\";\n        }\n        else if (grades[i] <= 6.7)\n   \
    \     {\n            result[i] = \"D+\";\n        }\n        else if (grades[i]\
    \ <= 7.0)\n        {\n            result[i] = \"D\";\n        }\n        else\
    \ if (grades[i] <= 7.3)\n        {\n            result[i] = \"D-\";\n        }\n\
    \        else if (grades[i] <= 7.7)\n        {\n            result[i] = \"E\"\
    ;\n        }\n        else\n        {\n            result[i] = \"D-\";\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ q |>\n<| c |>\nI didn't downvote,\
    \ but I suspect that your question is too broad for SO. Your example code doesn't\
    \ seem to have any issues and it would be quite difficult to provide a concrete\
    \ answer. As far as I can see, your problem is not related to C or C++. Maybe\
    \ your teacher can clarify the problem a bit?\n<|/ c |>\n<| c |>\nA simpler example:\
    \ suppose you have a function `double getAverage(double ... numbers)` which returns\
    \ the average of numbers. Write another function `char getLetterGrade(double average)`\
    \ that returns a letter grade depending on the average of numbers. The example\
    \ is too simple, but maybe it can help you with your problem.\n<|/ c |>\n<| c\
    \ |>\nWhat is your question?\n<|/ c |>\n<| c |>\nI don't see how your program\
    \ could possibly work except for the fact that it is missing a return. Could you\
    \ please try to explain what the program is supposed to do? I'm asking because\
    \ I might be able to help you.\n<|/ c |>\n<| c |>\nI've modified the code to include\
    \ more of the program (I believe)", "{\n    float[] array = new float[grades.Length];\n\
    \    for(int i = 0; i < grades.Length; i++)\n        array[i] = grades[i];\n \
    \   float[] diffs = CalculateDiffs(array);\n    float[] newArray = new float[diffs.Length];\n\
    \    for(int i = 0; i < diffs.Length; i++)\n        newArray[i] = diffs[i] * 42;\n\
    \    float[] newDiffs = CalculateDiffs(newArray);\n    for(int i = 0; i < newDiffs.Length;\
    \ i++)\n        newArray[i] = newArray[i] - newDiffs[i];\n    return string.Join(\"\
    \", Enumerable.Range(0, array.Length).Select(i => char.ToUpper((int)Math.Floor(newArray[i]\
    \ / 42.0) * 45 + (int)Math.Floor(newArray[i] % 42.0))));\n}", "{\n    float[]\
    \ std_grades = new float[grades.length];\n    for (int i = 0; i < grades.length;\
    \ ++i)\n        std_grades[i] = grades[i];\n    std_grades[std_grades.Length -\
    \ 1] = std_grades[std_grades.Length - 1] + 0.01; // A grade is one unit below\
    \ the average\n    var grade = grades.Select(g => Math.Round(g)).ToArray();\n\
    \    grade[grade.Length - 1] = grade[grade.Length - 1] - 0.01; // B grade is one\
    \ unit above the average\n    var g1 = grade[grade.Length - 1];\n    grade[grade.Length\
    \ - 2] = grade[grade.Length - 2] + 0.01; // C grade is one unit above the average\n\
    \    var g2 = grade[grade.Length - 2];\n    grade[grade.Length - 3] = grade[grade.Length\
    \ - 3] - 0.01; // D grade is one unit above the average\n    var g3 = grade[grade.Length\
    \ - 3];\n    grade[grade.Length - 4] = grade[grade.Length - 4] - 0.01; // E grade\
    \ is one unit below the average\n    var g4 = grade[grade.Length - 4];\n    if\
    \ (g1 == g4)\n        grade[grade.Length - 4] = \"D+\"; // If the last two grades\
    \ are equal, give the last grade a D\n    else if (g1 == g2)\n        grade[grade.Length\
    \ - 2] = \"C\"; // If the last three grades are equal, give the last grade a C\n\
    \    else if (g1 == g3)\n        grade[grade.Length - 1] = \"B\"; // If the last\
    \ four grades are equal, give the last grade a B\n    else if (g2 == g3)\n   \
    \     grade[grade.Length - 2] = \"C\"; // If the first two grades are equal, give\
    \ the first grade a C\n    else if (g1 == g2)\n        grade[grade.Length - 2]\
    \ = \"B\"; // If the last two grades are equal, give the last grade a B\n    else\
    \ if (g1 == g3)\n        grade[grade.Length - 1] = \"A\"; // If the last three\
    \ grades are equal, give the last grade an A\n    else if (g2 == g3)\n       \
    \ grade[grade.Length - 1] = \"A\"; // If the first two grades are equal, give\
    \ the first grade an A\n    else\n        grade[grade.Length - 1] = \"E\"; //\
    \ All other grades should be E\n    var final_grade = grade.Select(g => g < 0\
    \ ? 'E' : g < 0.7 ? 'D-' + g : g < 0.5 ? 'C-' + g", "{\n    double average = sum(grades)\
    \ / length(grades);\n    char letterGrade;\n    \n    if (average >= 4.0 && average\
    \ < 3.7)\n        letterGrade = 'A+';\n    else if (average >= 3.7 && average\
    \ < 3.3)\n        letterGrade = 'A';\n    else if (average >= 3.3 && average <\
    \ 3.0)\n        letterGrade = 'A-';\n    else if (average >= 3.0 && average <\
    \ 2.7)\n        letterGrade = 'B+';\n    else if (average >= 2.7 && average <\
    \ 2.3)\n        letterGrade = 'B';\n    else if (average >= 2.3 && average < 2.0)\n\
    \        letterGrade = 'B-';\n    else if (average >= 2.0 && average < 1.7)\n\
    \        letterGrade = 'C+';\n    else if (average >= 1.7 && average < 1.3)\n\
    \        letterGrade = 'C';\n    else if (average >= 1.3 && average < 1.0)\n \
    \       letterGrade = 'C-';\n    else if (average >= 1.0 && average < 0.7)\n \
    \       letterGrade = 'D+';\n    else if (average >= 0.7 && average < 0.0)\n \
    \       letterGrade = 'D';\n    else\n        letterGrade = 'D-';\n        \n\
    \    string[] gradesStr = new string[length(grades)];\n    for (int i = 0; i <\
    \ length(grades); i++)\n    {\n        gradesStr[i] = \"\\\"\" + letterGrade +\
    \ \"\\\"\";\n    }\n    return gradesStr;\n}", "{\n\tstring lettergrades[6];\n\
    \tint i;", "{\n    int grade_index;\n    bool numerical = std.math.isreal(grades);\n\
    \    if (numerical)\n    {\n        grade_index = std.math.floor((grades - std.math.tofloat(grades))\
    \ / 2.0f);\n        if (grade_index < 0)\n        {\n            grade_index +=\
    \ (grades.Length + 1);\n        }\n        if (grade_index < grades.Length)\n\
    \        {\n            string grade_string = std.typecons.chars[grades[grade_index]];\n\
    \            return new string[] { grade_string, grade_string, grade_string, grade_string\
    \ };\n        }\n        else\n        {\n            grade_index -= grades.Length;\n\
    \            string grade_string = std.typecons.chars[grades[grade_index]];\n\
    \            return new string[] { grade_string, grade_string, grade_string, grade_string,\
    \ grade_string, grade_string, grade_string };\n        }\n    }\n    else\n  \
    \  {\n        return null;\n    }\n}", "{\n    string result = \"[\";\n    for\
    \ (float i : grades)\n    {\n        result += \"\\\"\" + numericalToLetter(i)\
    \ + \"\\\",\";\n    }\n    result.substr(0, result.length()-1);\n    result +=\
    \ \"]\";\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nHey, thanks\
    \ for your help! I added the code you provided to my main file and it seemed to\
    \ work. I ran it again and it seemed to have thrown an error at my end. So I deleted\
    \ it and went back to my previous code, and it works now. Thanks for your help!\n\
    <|/ c |>\n<| a tags=c#,arrays |>\n<code>\npublic static void grade(List<float>\
    \ grades, out string[] letterGrades)\n    {\n        letterGrades = new string[grades.Count];\n\
    \        string grade;\n        int counter = 0;\n        foreach (float grade\
    \ in grades)\n        {\n            grade = grade.ToString();\n            if\
    \ (grade.IndexOf('.') == -1)\n            {\n                letterGrades[counter]\
    \ = \"A+\";\n            }\n            else\n            {\n                letterGrades[counter]\
    \ = \"B-\";\n            }\n            counter++;\n        }\n    }\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n//Write a program that reads several scores\
    \ and calculates letter grades\n//based on GPA.  Each letter grade must be preceded\
    \ with \"B\", \"A-\", \"A\",\n//\"A-\", or \"B+\".", "{\n   var stringResult =\
    \ new string[grades.Length];\n   var gradesArr = grades as float[];\n   var gpaSum\
    \ = 0.0f;", "{\n    std.sort(grades);\n    var grades_string = string[grade.size()];\n\
    \    for (int i = 0; i < grades.size(); i++)\n        grades_string[i] = std.string.format(letterGrade(grades[i]),\n\
    \            std.math.fabs(grades[i]));\n    return grades_string;\n}\n</code>\n\
    <|/ q tags=c#,unity3d |>\n<| c |>\nThe Unity tag should only be used when asking\
    \ a question about Unity, if you don't need Unity-specific answers, you can remove\
    \ the tag. I've fixed the tags and removed the Unity tag since I assume you don't\
    \ need any Unity-specific answers, unless you want Unity-specific answers.\n<|/\
    \ c |>\n<| c |>\nUnity has [its own Stack Exchange site](http://gamedev.stackexchange.com/).\
    \ You might want to ask your question there.\n<|/ c |>\n<| c |>\nYou might want\
    \ to look at this: https://stackoverflow.com/questions/5559205/c-sharp-list-sorting-with-decimals\n\
    <|/ c |>\n<| a tags=c#,unity3d |>\nTry this:\n<code>\npublic string[] Grades(int[]\
    \ values)\n{\n    Array.Sort(values);\n    int[] sortedValues = values.OrderBy(i\
    \ => i).ToArray();", "{\n  int len = grades.length;\n  string[] letters = new\
    \ string[len];\n  for(int i = 0;i < len;i++)\n  {\n    float gpa = grades[i];\n\
    \    int num_typecons = std.typecons.numerical_grade(gpa);\n    switch(num_typecons)\n\
    \    {\n      case 0: letters[i] = \"D+\"; break;\n      case 1: letters[i] =\
    \ \"D\"; break;\n      case 2: letters[i] = \"C+\"; break;\n      case 3: letters[i]\
    \ = \"C\"; break;\n      case 4: letters[i] = \"B-\"; break;\n      case 5: letters[i]\
    \ = \"B\"; break;\n      case 6: letters[i] = \"A-\"; break;\n      case 7: letters[i]\
    \ = \"A\"; break;\n      case 8: letters[i] = \"A+\"; break;\n      case 9: letters[i]\
    \ = \"A+\"; break;\n      default:\n        throw new IllegalArgumentException(\"\
    GPA is not numerical: \" + gpa);\n    }\n  }\n  return letters;\n}", "{\n    string\
    \ letter_grade;\n    int i;\n    float gpa = grades[0];\n    \n    for(i = 1;\
    \ i < grades.length; i++)\n    {\n        gpa = grades[i];\n        \n       \
    \ if(gpa < 3.7)\n            letter_grade = \"A-\";\n        else if(gpa < 3.3)\n\
    \            letter_grade = \"A+\";\n        else if(gpa < 3)\n            letter_grade\
    \ = \"B+\";\n        else if(gpa < 2.7)\n            letter_grade = \"B\";\n \
    \       else if(gpa < 2.3)\n            letter_grade = \"B-\";\n        else if(gpa\
    \ < 2)\n            letter_grade = \"C+\";\n        else if(gpa < 1.7)\n     \
    \       letter_grade = \"C\";\n        else if(gpa < 1.3)\n            letter_grade\
    \ = \"C-\";\n        else if(gpa < 1)\n            letter_grade = \"D+\";\n  \
    \      else if(gpa < 0.7)\n            letter_grade = \"D\";\n        else\n \
    \           letter_grade = \"D-\";\n    }\n    \n    return letter_grade;\n}\n\
    /*\nIt is a stupid exercise, but it is important to know how to find the minimum\
    \ and\n    maximum values in a given array.", "{\n    if(grades.Length == 0)\n\
    \    {\n        string[] letters = new string[]{};\n        return letters;\n\
    \    }\n    \n    string[] letters = new string[grades.Length]{};\n    \n    for(int\
    \ i = 0; i < grades.Length; i++)\n    {\n        double gpa = grades[i];\n   \
    \     \n        if(gpa >= 3.7)\n        {\n            letters[i] = \"A+\";\n\
    \        }\n        else if(gpa >= 3.3)\n        {\n            letters[i] = \"\
    A\";\n        }\n        else if(gpa >= 3)\n        {\n            letters[i]\
    \ = \"A-\";\n        }\n        else if(gpa >= 2.7)\n        {\n            letters[i]\
    \ = \"B+\";\n        }\n        else if(gpa >= 2.3)\n        {\n            letters[i]\
    \ = \"B\";\n        }\n        else if(gpa >= 2)\n        {\n            letters[i]\
    \ = \"B-\";\n        }\n        else if(gpa >= 1.7)\n        {\n            letters[i]\
    \ = \"C+\";\n        }\n        else if(gpa >= 1.3)\n        {\n            letters[i]\
    \ = \"C\";\n        }\n        else if(gpa >= 1)\n        {\n            letters[i]\
    \ = \"C-\";\n        }\n        else if(gpa >= 0.7)\n        {\n            letters[i]\
    \ = \"D+\";\n        }\n        else if(gpa >= 0)\n        {\n            letters[i]\
    \ = \"D\";\n        }\n        else\n        {\n            letters[i] = \"D-\"\
    ;\n        }\n    }\n    return letters;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nHi, welcome to StackOverflow. While this may be the best answer to your\
    \ question, code-only answers are typically not very helpful to others who find\
    \ this question in the future. Please consider editing your answer to include\
    \ a brief description of what your code does and how it solves the problem in\
    \ the question.\n<|/ c |>\n<| a |>\nThe idea is to loop through the array of grades\
    \ and use the index of the loop to determine if the index is greater than the\
    \ index you currently are at. \n<code>\n    static void Main(string[] args)\n\
    \    {\n        int[] grades = { 4, 3, 1.7, 2.3, 3.7 };\n        string result\
    \ = GetLetterGrade(grades);\n    }", "{\n    float grade;\n    int letter_grade_index\
    \ = 0;\n    for(int i = 0;i < grades.length;i++) \n    {\n        if(grades[i]>0.0)\
    \ \n        {\n            grade = grades[i];\n            while (grade >= 3.7\
    \ && grade <= 3.8) \n            {\n                letter_grade_index++;\n  \
    \              grade -= 3.7;\n            }\n            while(grade >= 3.0 &&\
    \ grade <= 3.8) \n            {\n                letter_grade_index++;\n     \
    \           grade -= 3.0;\n            }\n            while(grade >= 2.7 && grade\
    \ <= 2.8)\n            {\n                letter_grade_index++;\n            \
    \    grade -= 2.7;\n            }\n            while(grade >= 2.3 && grade <=\
    \ 2.8)\n            {\n                letter_grade_index++;\n               \
    \ grade -= 2.3;\n            }\n            while(grade >= 2.0 && grade <= 2.8)\n\
    \            {\n                letter_grade_index++;\n                grade -=\
    \ 2.0;\n            }\n            while(grade >= 1.7 && grade <= 1.8)\n     \
    \       {\n                letter_grade_index++;\n                grade -= 1.7;\n\
    \            }\n            while(grade >= 1.3 && grade <= 1.8)\n            {\n\
    \                letter_grade_index++;\n                grade -= 1.3;\n      \
    \      }\n            while(grade >= 1.0 && grade <= 1.8)\n            {\n   \
    \             letter_grade_index++;\n                grade -= 1.0;\n         \
    \   }\n            while(grade >= 0.7 && grade <= 0.8)\n            {\n      \
    \          letter_grade_index++;\n                grade -= 0.7;\n            }\n\
    \        }\n    }\n    return string_array(letter_grade_index);\n}", "{\n    foreach(float\
    \ grade in grades)\n    {\n       \n    }\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ how you got the answer so quickly.  Thank you!!\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>", "{\n    \n    string[]\
    \ letter_grades;\n    \n    if(grades.Length <= 0)\n    {\n        letter_grades\
    \ = new string[grades.Length];\n    }\n    else\n    {\n        letter_grades\
    \ = new string[grades.Length];\n    }\n    \n    for(int i = 0; i < grades.Length;\
    \ i++)\n    {\n        if(grades[i] <= 0)\n        {\n            letter_grades[i]\
    \ = \"E\";\n        }\n        else if (grades[i] <= 3)\n        {\n         \
    \   letter_grades[i] = \"C\";\n        }\n        else if (grades[i] <= 6)\n \
    \       {\n            letter_grades[i] = \"C\";\n        }\n        else if (grades[i]\
    \ <= 9)\n        {\n            letter_grades[i] = \"B\";\n        }\n       \
    \ else if (grades[i] <= 12)\n        {\n            letter_grades[i] = \"B\";\n\
    \        }\n        else if (grades[i] <= 15)\n        {\n            letter_grades[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] <= 18)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] <= 21)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] <= 24)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] <= 27)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] <= 30)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] <= 33)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] <= 36)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] <= 39)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] <= 42)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] <= 45)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] <= 48)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] <= 51)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] <= 54)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] <= 57)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] <= 60)\n        {\n            letter_grades[i] = \"B-\";\n     \
    \   }\n        else if (grades[i] <= 63)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (grades[i] <= 66)\n        {\n       \
    \     letter_grades[i] = \"B-\";\n        }\n        else if (grades[i] <= 69)\n\
    \        {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] ", "{\n    float sum = 0.0f;\n    for (int i = 0; i < grades.Length;\
    \ i++)\n    {\n        sum += grades[i];\n    }\n    int average = sum / grades.Length;\n\
    \    float gpaSum = 0.0f;\n    for (int i = 0; i < grades.Length; i++)\n    {\n\
    \        gpaSum += grades[i]/average;\n    }\n    int gpaAverage = average;\n\
    \    float gpaDiff = gpaSum/((float)gpaAverage);\n    int gpaIndex = 0;\n    string[]\
    \ letterGrades = new string[grades.Length];\n    for (int i = 0; i < grades.Length;\
    \ i++)\n    {\n        float gpa = grades[i];\n        gpa = gpa-(float)gpaDiff;\n\
    \        float nextGPA = gpa+gpaDiff;\n        float gpaDiffNextGPA = gpa-(gpa+gpaDiff);\n\
    \        float gpaSumNextGPA = gpaSum+gpaDiffNextGPA;\n        int nextGPAIndex\
    \ = (int)nextGPA+gpaIndex;\n        gpaIndex += gpaDiff;\n        if (gpa > nextGPA)\n\
    \        {\n            letterGrades[i] = \"A+\";\n        }\n        else if\
    \ (gpa <= nextGPA)\n        {\n            letterGrades[i] = \"E\";\n        }\n\
    \        else if (gpa < nextGPA)\n        {\n            float tempDifference\
    \ = nextGPA-gpa;\n            float tempAverage = (float)nextGPA+tempDifference;\n\
    \            letterGrades[i] = numerical_letter_grade(tempAverage);\n        }\n\
    \    }\n    return letterGrades;\n}\n</code>\n<|/ a dscore=2 tags=function,c#\
    \ |>\n<| c |>\nOh my god. Thank you so much.\n<|/ c |>\n<| c |>\nHaha, glad I\
    \ could help!\n<|/ c |>\n<| a |>\nThe easiest solution would be to have a boolean\
    \ variable that checks if the array is sorted or not. Every time you add an item\
    \ to the array, check if it is less than the previous one (add it to the array\
    \ if false, if true, set it to false) and update the boolean to true. The array\
    \ will be sorted by this boolean after each new insert.\n<|/ a tags=function,c#\
    \ dscore=0 |>\n<| a tags=function,c# |>\nHere's how I would do this:\n<code>\n\
    class Program\n{\n    static string[] grades = new string[] { \"3.8\", \"2.8\"\
    , \"4.3\", \"3.7\", \"3.5\", \"4.6\", \"3.2\" };\n    static string[] letterGrades(",
  "{\n    string lettergrades = \"E\"; //default value\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        if(grades[i] > 0)\n        {\n            if(grades[i]\
    \ > 4.0f)\n            {\n                lettergrades = \"A+\";\n           \
    \ }\n            else if(grades[i] >= 3.7f && grades[i] <= 4.0f)\n           \
    \ {\n                lettergrades = \"A\";\n            }\n            else if(grades[i]\
    \ >= 3.3f && grades[i] <= 3.7f)\n            {\n                lettergrades =\
    \ \"A-\";\n            }\n            else if(grades[i] >= 3.0f && grades[i] <=\
    \ 3.3f)\n            {\n                lettergrades = \"B+\";\n            }\n\
    \            else if(grades[i] >= 2.7f && grades[i] <= 3.0f)\n            {\n\
    \                lettergrades = \"B\";\n            }\n            else if(grades[i]\
    \ >= 2.3f && grades[i] <= 2.7f)\n            {\n                lettergrades =\
    \ \"B-\";\n            }\n            else if(grades[i] >= 2.0f && grades[i] <=\
    \ 2.3f)\n            {\n                lettergrades = \"C+\";\n            }\n\
    \            else if(grades[i] >= 1.7f && grades[i] <= 2.0f)\n            {\n\
    \                lettergrades = \"C\";\n            }\n            else if(grades[i]\
    \ >= 1.3f && grades[i] <= 1.7f) \n            {\n                lettergrades\
    \ = \"C-\";\n            }\n            else if(grades[i] >= 1.0f && grades[i]\
    \ <= 1.3f) \n            {\n                lettergrades = \"D+\";\n         \
    \   }\n            else if(grades[i] >= 0.7f && grades[i] <= 1.0f)\n         \
    \   {\n                lettergrades = \"D\";\n            }\n            else\
    \ if(grades[i] == 0.0f)\n            {\n                lettergrades = \"D-\"\
    ;\n            }\n        }\n    }\n    return lettergrades;\n}", "{\n    double\
    \ numerical_grades;\n    double sum = 0;\n    for (int i = 0; i < grades.length;\
    \ i++)\n    {\n        numerical_grades = grades[i];\n        sum += numerical_grades;\n\
    \    }\n    string[] grades_letters = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        double numerical_grade_percent\
    \ = (double)grades[i] / sum * 100;\n        grades_letters[i] = std.typecons.LetterGrade.fromGrade(std.math.toInt(numerical_grade_percent));\n\
    \    }\n    return grades_letters;\n}\n</code>\n<|/ a |>\n<| c |>\nThe first function\
    \ has a bug when there are `grades` with same value like `[4, 3, 1, 1, 3, 1]`.\
    \ `numerical_letter_grade` returns `[\"A+\", \"A\", \"C\", \"C\", \"A-\"]`, but\
    \ it should return `[\"A+\", \"A\", \"C-\", \"C\", \"A-\"]`\n<|/ c |>\n<| c |>\n\
    You are correct. I forgot to add that case to the code. Thank you for your reminder.\
    \ I'll edit the code so you can copy it and run.\n<|/ c |>\n<| c |>\nI edited\
    \ the code, now it works fine. Thanks again!\n<|/ c |>\n<| c |>\nThat is awesome!\
    \ Thanks for sharing the solution! I just tried it out and it is working. I have\
    \ learned so much from this!\n<|/ c |>\n<| a tags=java,arrays |>\nHere's my attempt,\
    \ hope it helps. It's not so pretty, but I've been trying to solve a similar problem.\
    \ I was able to get it to work using two loops and a counter. I think the most\
    \ straightforward solution would be to create a temp array of the same size and\
    \ populate it with the grades. Then loop through the temp array and populate your\
    \ grades_letters array with a temp counter and a letter for every element in the\
    \ temp array.\n<code>\npublic class StudentGrade {", "{\n    float result = (grades[0]\
    \ * 4.0 + grades[1] * 3.7 + grades[2] \n                    * 3.3 + grades[3]\
    \ * 3.0 + grades[4] * 2.7 + grades[5] \n                    * 2.3 + grades[6]\
    \ * 2.0 + grades[7] * 1.7 + grades[8]\n                    * 1.3 + grades[9] *\
    \ 1.0 + grades[10] * 0.7 + \n                    grades[11] * 0.0);", "{\n   \
    \ string[] letter_grades = new string[grades.Length];\n    int i = 0;\n    for(float\
    \ grade : grades) {\n        letter_grades[i] = letter_grades[i + 1];\n      \
    \  i++;\n        for(int i2 = i; i2 < letter_grades.Length; i2++) {\n        \
    \    if(grade >= 4.0) {\n                letter_grades[i2] = letter_grades[i2\
    \ + 1] + \"+\";\n                break;\n            }\n            if(grade >\
    \ 3.7) {\n                letter_grades[i2] = letter_grades[i2 + 1] + \"-\";\n\
    \                break;\n            }\n            if(grade > 3.3) {\n      \
    \          letter_grades[i2] = letter_grades[i2 + 1] + \"-\";\n              \
    \  break;\n            }\n            if(grade > 3.0) {\n                letter_grades[i2]\
    \ = letter_grades[i2 + 1] + \"+\";\n                break;\n            }\n  \
    \          if(grade > 2.7) {\n                letter_grades[i2] = letter_grades[i2\
    \ + 1] + \"+\";\n                break;\n            }\n            if(grade >\
    \ 2.3) {\n                letter_grades[i2] = letter_grades[i2 + 1] + \"-\";\n\
    \                break;\n            }\n            if(grade > 2.0) {\n      \
    \          letter_grades[i2] = letter_grades[i2 + 1] + \"+\";\n              \
    \  break;\n            }\n            if(grade > 1.7) {\n                letter_grades[i2]\
    \ = letter_grades[i2 + 1] + \"+\";\n                break;\n            }\n  \
    \          if(grade > 1.3) {\n                letter_grades[i2] = letter_grades[i2\
    \ + 1] + \"-\";\n                break;\n            }\n            if(grade >\
    \ 1.0) {\n                letter_grades[i2] = letter_grades[i2 + 1] + \"-\";\n\
    \                break;\n            }\n            if(grade > 0.7) {\n      \
    \          letter_grades[i2] = letter_grades[i2 + 1] + \"-\";\n              \
    \  break;\n            }\n            if(grade > 0.0) {\n                letter_grades[i2]\
    \ = letter_grades[i2 + 1] + \"-\";\n                break;\n            }\n  \
    \      }\n        i++;\n    }\n    return letter_grades;\n}", "{\n    int sum=0;\n\
    \    int min=grades.Min();\n    int max=grades.Max();\n    for(int i=0;i<grades.Length;i++)\n\
    \    {\n        if(grades[i]>max)\n        {\n            max=grades[i];\n   \
    \     }\n        if(grades[i]<min)\n        {\n            min=grades[i];\n  \
    \      }\n        sum+=grades[i];\n    }\n    string lettergrade=\"\";\n    if(sum>=5.0)\
    \ lettergrade=\"D+\"; \n    if(sum>=4.0) lettergrade=\"D\";\n    if(sum>=3.0)\
    \ lettergrade=\"C\";\n    if(sum>=2.7) lettergrade=\"B\";\n    if(sum>=2.3) lettergrade=\"\
    B\";\n    if(sum>=2.0) lettergrade=\"B\";\n    if(sum>=1.7) lettergrade=\"B\"\
    ;\n    if(sum>=1.0) lettergrade=\"B\";\n    if(sum>=1.0) lettergrade=\"A\";\n\
    \    if(sum<1.0) lettergrade=\"E\";\n    return lettergrade;\n}\n</code>\n<|/\
    \ a tags=c#,linq |>\n<| c |>\nI have changed my answer - I missed a key part in\
    \ the question, and it was the part about getting letter grades.\n<|/ c |>\n<|\
    \ c |>\nYes your answer was really helpful. Thanks once again.\n<|/ c |>\n<| c\
    \ |>\nI just added some more explanation about your original problem and how I\
    \ fixed it.\n<|/ c |>\n<| c |>\nHe is trying to do this with linq.. your answer\
    \ doesn't use linq\n<|/ c |>\n<| a |>\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;", "{\n    int grade_index = 0;\n    string\
    \ grade = \"\";\n    \n    for (int i = 0; i < grades.length; i++)\n    {\n  \
    \      grade += grades[grade_index].ToString();\n        \n        if (grades[grade_index]\
    \ > 3.7)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 3.3)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 3.0)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 2.7)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 2.3)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 2.0)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 1.7)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 1.3)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 1.0)\n        {\n            grade_index++;\n        }\n        else if (grades[grade_index]\
    \ > 0.7)\n        {\n            grade_index++;\n        }\n        else\n   \
    \     {\n            grade_index++;\n        }\n    }\n    \n    grades[grade_index\
    \ - 1] += \"E\";", "{\n    string result;\n    if (grades.Length < 7)\n    {\n\
    \        result = \"Not enough grades! Try again!\";\n    }\n    else\n    {\n\
    \        string letter_grade = \"A+\";\n        for (int i = 6; i >= 0; i--)\n\
    \        {\n            if (grades[i] > 3.7f)\n            {\n               \
    \ letter_grade = \"A-\";\n            }\n            else if (grades[i] <= 3.3f)\n\
    \            {\n                letter_grade = \"A\";\n            }\n       \
    \     else if (grades[i] > 3.3f)\n            {\n                letter_grade\
    \ = \"A+\";\n            }\n            else if (grades[i] <= 3.0)\n         \
    \   {\n                letter_grade = \"B+\";\n            }\n            else\
    \ if (grades[i] > 2.7f);\n            {\n                letter_grade = \"B\"\
    ;\n            }\n            else if (grades[i] <= 2.3f)\n            {\n   \
    \             letter_grade = \"B-\";\n            }\n            else if (grades[i]\
    \ > 2.3f)\n            {\n                letter_grade = \"B+\";\n           \
    \ }\n            else if (grades[i] <= 2.0)\n            {\n                letter_grade\
    \ = \"C+\";\n            }\n            else if (grades[i] > 1.7f);\n        \
    \    {\n                letter_grade = \"C\";\n            }\n            else\
    \ if (grades[i] <= 1.3f)\n            {\n                letter_grade = \"C-\"\
    ;\n            }\n            else if (grades[i] > 1.3f)\n            {\n    \
    \            letter_grade = \"C+\";\n            }\n            else if (grades[i]\
    \ <= 1.0)\n            {\n                letter_grade = \"D+\";\n           \
    \ }\n            else if (grades[i] > 0.7f);\n            {\n                letter_grade\
    \ = \"D\";\n            }\n            else if (grades[i] <= 0.0)\n          \
    \  {\n                letter_grade = \"D-\";\n            }\n            else\n\
    \            {\n                letter_grade = \"E\";\n            }\n       \
    \ }\n        result = \"[\"+letter_grade+\"]\";\n    }\n    return result;\n}\n\
    /*\n    Task:\n    Write a function that can find whether a number is a perfect\
    \ square.\n    For example, given 4 the function should return true.\n    \n \
    \   If you can't find a perfect square in a range of numbers you can return false.\n\
    \    \n    Example:\n    >>> is_square(3)\n    True\n    \n    Not a perfect square:\n\
    \    >>> is_square(1)\n    False\n*/", "{\n    string[] letter_grades = new string[grades.Length];\n\
    \    for (int i = 0; i < grades.Length; i++)\n    {\n        float average = (grades[i]\
    \ / 4.0f) * 100;\n        if (average >= 3.7f)\n            letter_grades[i] =\
    \ \"A+\";\n        else if (average >= 3.3f)\n            letter_grades[i] = \"\
    A\";\n        else if (average >= 3.0f)\n            letter_grades[i] = \"A-\"\
    ;\n        else if (average >= 2.7f)\n            letter_grades[i] = \"B+\";\n\
    \        else if (average >= 2.3f)\n            letter_grades[i] = \"B\";\n  \
    \      else if (average >= 2.0f)\n            letter_grades[i] = \"B-\";\n   \
    \     else if (average >= 1.7f)\n            letter_grades[i] = \"C+\";\n    \
    \    else if (average >= 1.3f)\n            letter_grades[i] = \"C\";\n      \
    \  else if (average >= 1.0f)\n            letter_grades[i] = \"C-\";\n       \
    \ else if (average >= 0.7f)\n            letter_grades[i] = \"D+\";\n        else\
    \ if (average >= 0.0f)\n            letter_grades[i] = \"D\";\n        else if\
    \ (average < 0.0f)\n            letter_grades[i] = \"E\";\n        else\n    \
    \        letter_grades[i] = \"F\";\n    }\n    return letter_grades;\n}", "{\n\
    \    \n    \n    \n    \n    \n    \n    \n    return grades;\n}\n</code>\n<|/\
    \ q tags=c# dscore=0 |>\n<| c |>\nLooks like you have an off-by-one error on the\
    \ last iteration of the for-loop. Change `for (int i = 1; i <= grades.Length;\
    \ i++)` to `for (int i = 0; i < grades.Length; i++)`\n<|/ c |>\n<| c |>\nThat\
    \ fixed it, thank you! I didn't catch that. I've been looking at it for so long,\
    \ I can't catch those little errors.\n<|/ c |>\n<| c |>\nHi, could you please\
    \ mark my answer as accepted so other people may benefit from it. Thanks\n<|/\
    \ c |>\n<| c |>\nI can't do that until the question is 15 minutes old and already\
    \ has 2 answers unaccepted.\n<|/ c |>\n<| a |>\nYou have an off-by-one error on\
    \ the last iteration of the for-loop. Change for (int i = 1; i <= grades.Length;\
    \ i++) to for (int i = 0; i < grades.Length; i++).\n<|/ a tags=c# dscore=2 |>\n\
    <| a tags=c# |>\nI suggest you change your loop condition to for (int i = 0; i\
    \ < grades.Length; i++)\n<|/ a dscore=2 |>\n<| a |>\nThe easiest way to get the\
    \ grade from your GPA list is by using LINQ:\n<code>\nstring[] grades = \n   \
    \ Enumerable.Range(0, grades.Length)\n              .Select(x => new \n      \
    \        { \n                 GPA = grades[x], \n                 LetterGrade\
    \ = \n                    (grades[x] > 0 && grades[x] <= 3.0) ? \n           \
    \            \"A+\" : \n                     (grades[x] > 3.7 && grades[x] <=\
    \ 3.9) ? \n                       \"A\" : \n                     (grades[x] >\
    \ 3.3 && grades[x] <= 3.7) ? \n                       \"A-\" : \n            \
    \         (grades[x] > 3.0 && grades[x] <= 3.3) ? \n                       \"\
    B+\" : \n                     (grades[x] > 2.7 && grades[x] <= 2.9) ? \n     \
    \                  \"B\" : \n                     (grades[x] > 2.3 && grades[x]\
    \ <= 2.7) ? \n                       \"B-\" : \n                     (grades[x]\
    \ > 2.0 && grades[x] <= 2.3) ? \n                       \"C+\" : \n          \
    \           (grades[x] > 1.7 && grades[x] <= 1.9) ? \n                       \"\
    C\" : \n                     (grades[x] > 1.3 && grades[x] <= 1.7) ? \n      \
    \                 \"C-\" : \n                     (grades[x] > 1.0 && grades[x]\
    \ <= 1.3) ? \n                       \"D+\" : \n                     (grades[x]\
    \ > 0.7 && grades[x] ", "{\n    string[] letter_grades = new string[grades.Length];\n\
    \    if (grades.Length == 0)\n        return letter_grades;\n    else if (grades.Length\
    \ == 1)\n    {\n        letter_grades[0] = to_string(grades[0]);\n        return\
    \ letter_grades;\n    }\n    else if (grades.Length == 2)\n    {\n        if (grades[0]\
    \ <= 2.3 && grades[1] >= 2.3)\n            letter_grades[0] = \"A+\";\n      \
    \  else if (grades[0] > 2.3 && grades[1] < 3.0)\n            letter_grades[0]\
    \ = \"A\";\n        else if (grades[0] < 2.3 && grades[1] > 3.0)\n           \
    \ letter_grades[0] = \"A-\";\n        else if (grades[0] >= 3.0 && grades[1] >=\
    \ 3.0)\n            letter_grades[0] = \"B+\";\n        else if (grades[0] > 3.0\
    \ && grades[1] < 3.7)\n            letter_grades[0] = \"B\";\n        else if\
    \ (grades[0] < 3.0 && grades[1] > 3.7)\n            letter_grades[0] = \"B-\"\
    ;\n        else if (grades[0] >= 3.7 && grades[1] >= 3.7)\n            letter_grades[0]\
    \ = \"C+\";\n        else if (grades[0] > 3.7 && grades[1] < 3.3)\n          \
    \  letter_grades[0] = \"C\";\n        else if (grades[0] < 3.7 && grades[1] >\
    \ 3.3)\n            letter_grades[0] = \"C-\";\n        else if (grades[0] >=\
    \ 3.3 && grades[1] >= 3.3)\n            letter_grades[0] = \"D+\";\n        else\
    \ if (grades[0] > 3.3 && grades[1] < 3.7)\n            letter_grades[0] = \"D\"\
    ;\n        else if (grades[0] < 3.3 && grades[1] > 3.7)\n            letter_grades[0]\
    \ = \"D-\";\n        else if (grades[0] >= 3.7 && grades[1] >= 3.7)\n        \
    \    letter_grades[0] = \"E\";\n        return letter_grades;\n    }\n    else\
    \ if (grades.Length == 3)\n    {\n        if (grades[0] <= 2.3 && grades[1] <=\
    \ 2.3 && grades[2] >= 2.3)\n            letter_grades[0] = \"A+\";\n        else\
    \ if (grades[0] > 2.3 && grades[1] > 2.3 && grades[2] < 3.0)\n            letter_grades[0]\
    \ = \"A\";\n        else if (grades[0] < 2.3 && grades[1] < 2.3 && grades[2] >\
    \ 3.0)\n            letter_grades[0] = \"A-\";\n        else if (grades[0] >=\
    \ 3.0 && grades[1] > 2.3 && grades[2] >= 3.0)\n            letter_grades[0] =\
    \ \"B+\";\n        else if (grades[0] > 3.0 && grades[1] < 2.3 && grades[2] <\
    \ 3.7)\n            letter_grades[0] = \"B\";\n        else if (grades[0] < 3.0\
    \ && grades[1] > 2.3 && grades[2] > 3.7)", "{\n    string s = \"\";\n    for(int\
    \ i=0; i<grades.length; i++)\n    {\n        if (grades[i] == 0)\n           \
    \ s += \"D-\";\n        else if (grades[i] >= 3.0)\n            s += \"D\";\n\
    \        else if (grades[i] >= 2.7)\n            s += \"C\";\n        else if\
    \ (grades[i] >= 2.3)\n            s += \"C\";\n        else if (grades[i] >= 1.7)\n\
    \            s += \"C\";\n        else if (grades[i] >= 1.3)\n            s +=\
    \ \"C\";\n        else if (grades[i] >= 1.0)\n            s += \"C\";\n      \
    \  else if (grades[i] >= 0.7)\n            s += \"C\";\n        else if (grades[i]\
    \ >= 0.0)\n            s += \"C\";\n        else if (grades[i] < 0.0 && grades[i]\
    \ != 0.0)\n            s += \"C\";\n        else if (grades[i] < 3.0)\n      \
    \      s += \"B\";\n        else if (grades[i] < 2.7)\n            s += \"B\"\
    ;\n        else if (grades[i] < 2.3)\n            s += \"B\";\n        else if\
    \ (grades[i] < 1.7)\n            s += \"B\";\n        else if (grades[i] < 1.3)\n\
    \            s += \"B\";\n        else if (grades[i] < 1.0)\n            s +=\
    \ \"B\";\n        else if (grades[i] < 0.7)\n            s += \"B\";\n       \
    \ else if (grades[i] > 0.0)\n            s += \"A\";\n        else if (grades[i]\
    \ > 3.0)\n            s += \"A\";\n        else if (grades[i] > 2.7)\n       \
    \     s += \"A\";\n        else if (grades[i] > 2.3)\n            s += \"A\";\n\
    \        else if (grades[i] > 1.7)\n            s += \"A\";\n        else if (grades[i]\
    \ > 1.3)\n            s += \"A\";\n        else if (grades[i] > 1.0)\n       \
    \     s += \"A\";\n        else if (grades[i] > 0.7)\n            s += \"A\";\n\
    \        else if (grades[i] > 0.0)\n            s += \"A\";\n        else\n  \
    \          s += \"A+\";\n    }\n    return s;\n}", "{\n    string result[] = new\
    \ string[grades.Length];\n    for (int i = 0; i < grades.Length; i++) {\n    \
    \    result[i] = letterGrade(grades[i]);\n    }\n    return result;\n}", "{\n\
    \    /*\n    Declare a new array of characters and assign it the length of grades\n\
    \    */\n    char [] grades_output = new char [grades.length];\n    \n    /*\n\
    \    Define a variable that will hold our current letter grade\n    */\n    char\
    \ current_letter_grade = '-';\n    \n    /*\n    Write a for loop that will iterate\
    \ over the length of the grades array\n    */\n    for(int i = 0; i < grades.length;\
    \ i++){\n        \n        /* \n        Check if the grade is greater than the\
    \ GPA\n        */\n        if(grades[i] >= 4.0f){\n            current_letter_grade\
    \ = 'A+'; \n        }\n        else if(grades[i] >= 3.7f){\n            current_letter_grade\
    \ = 'A';\n        }\n        else if(grades[i] >= 3.3f){\n            current_letter_grade\
    \ = 'A-';\n        }\n        else if(grades[i] >= 3.0f){\n            current_letter_grade\
    \ = 'B+';\n        }\n        else if(grades[i] >= 2.7f){\n            current_letter_grade\
    \ = 'B';\n        }\n        else if(grades[i] >= 2.3f){\n            current_letter_grade\
    \ = 'B-';\n        }\n        else if(grades[i] >= 2.0f){\n            current_letter_grade\
    \ = 'C+';\n        }\n        else if(grades[i] >= 1.7f){\n            current_letter_grade\
    \ = 'C';\n        }\n        else if(grades[i] >= 1.3f){\n            current_letter_grade\
    \ = 'C-';\n        }\n        else if(grades[i] >= 1.0f){\n            current_letter_grade\
    \ = 'D+';\n        }\n        else if(grades[i] >= 0.7f){\n            current_letter_grade\
    \ = 'D';\n        }\n        else if(grades[i] >= 0.0f){\n            current_letter_grade\
    \ = 'D-';\n        }\n        else{\n            current_letter_grade = 'E';\n\
    \        }\n        \n        grades_output [i] = current_letter_grade;\n    }\n\
    \    \n    return grades_output;\n}\n</code>\n<|/ a tags=arrays,string,c# |>\n\
    <| a |>\nI believe the OP is looking for a more declarative solution, instead\
    \ of manually creating an array and appending each letter grade to a string. \n\
    The code below will allow you to pass an array of grades and it will return an\
    \ array of letter grades.\n<code>\npublic static char[] ConvertArrayToLetterGrades(float[]\
    \ values)\n{\n    char[] chars = new char[values.Length];\n    Array.Sort(values);\n\
    \    char currentChar = '-';\n    foreach (float value in values)\n    {\n   \
    \     if (value > 4.0)\n        {\n            currentChar = 'A+';\n        }\n\
    \        else if (value > 3.7)\n        {\n            currentChar = 'A';\n  \
    \      }\n        else if (value > 3.", "{\n    int i = 0;\n    string letter\
    \ = \"\";\n    while(i<grades.length)\n    {\n        if(grades[i]<3.7)\n    \
    \    {\n            letter = letter + \"A+\";\n        }\n        else if(grades[i]<3.3)\n\
    \        {\n            letter = letter + \"A\";\n        }\n        else if(grades[i]<3.0)\n\
    \        {\n            letter = letter + \"B+\";\n        }\n        else if(grades[i]<2.7)\n\
    \        {\n            letter = letter + \"B\";\n        }\n        else if(grades[i]<2.3)\n\
    \        {\n            letter = letter + \"B-\";\n        }\n        else if(grades[i]<2.0)\n\
    \        {\n            letter = letter + \"C+\";\n        }\n        else if(grades[i]<1.7)\n\
    \        {\n            letter = letter + \"C\";\n        }\n        else if(grades[i]<1.3)\n\
    \        {\n            letter = letter + \"C-\";\n        }\n        else if(grades[i]<1.0)\n\
    \        {\n            letter = letter + \"D+\";\n        }\n        else if(grades[i]<0.7)\n\
    \        {\n            letter = letter + \"D\";\n        }\n        else if(grades[i]<0.0)\n\
    \        {\n            letter = letter + \"D-\";\n        }\n        else\n \
    \       {\n            letter = letter + \"E\";\n        }\n        i++;\n   \
    \ }\n    return letter;\n}", "{\n    string result = \"\";\n    foreach (float\
    \ grade in grades)\n    {\n        if (grade <= 3.0) // 3.0 means 3.5\n      \
    \  {\n            result = \"A\" + result;\n        }\n        if (grade > 3.0\
    \ && grade <= 3.7) // 3.7 means 4.0\n        {\n            result = \"A\" + result;\n\
    \        }\n        if (grade > 3.7 && grade <= 3.3) // 3.3 means 4.0\n      \
    \  {\n            result = \"A-\" + result;\n        }\n        if (grade > 3.3\
    \ && grade <= 3.0) // 3.0 means 3.5\n        {\n            result = \"B\" + result;\n\
    \        }\n        if (grade > 3.0 && grade <= 2.7) // 2.7 means 3.0\n      \
    \  {\n            result = \"B\" + result;\n        }\n        if (grade > 2.7\
    \ && grade <= 2.3) // 2.3 means 4.0\n        {\n            result = \"B-\" +\
    \ result;\n        }\n        if (grade > 2.3 && grade <= 2.0) // 2.0 means 3.0\n\
    \        {\n            result = \"C\" + result;\n        }\n        if (grade\
    \ > 2.0 && grade <= 1.7) // 1.7 means 3.0\n        {\n            result = \"\
    C\" + result;\n        }\n        if (grade > 1.7 && grade <= 1.3) // 1.3 means\
    \ 3.0\n        {\n            result = \"C-\" + result;\n        }\n        if\
    \ (grade > 1.3 && grade <= 1.0) // 1.0 means 3.0\n        {\n            result\
    \ = \"D\" + result;\n        }\n        if (grade > 1.0 && grade <= 0.7) // 0.7\
    \ means 3.0\n        {\n            result = \"D\" + result;\n        }\n    \
    \    if (grade > 0.7 && grade <= 0.0) // 0.0 means 0.0\n        {\n          \
    \  result = \"D-\" + result;\n        }\n    }\n    string[] result = new string[grades.Length];\n\
    \    for (int i = 0; i < grades.Length; i++)\n    {\n        result[i] = result;\n\
    \    }\n    return result;\n}\n</code>\n<|/ q |>\n<| c |>\nIf you don't want your\
    \ question to be downvoted then you should at least explain what you've tried\
    \ so far and where you got stuck.\n<|/ c |>\n<| c |>\nCan you give us an example\
    \ of the input and expected output?\n<|/ c |>\n<| c |>\ni added some more details\
    \ to my question\n<|/ c |>\n<| a tags=c#,arrays,sorting,algorithm,sorting dscore=1\
    \ |>\nYou can use a lookup table and calculate the letter grade for each value\
    \ using the table. This approach does not require you to create any sorting algorithms\
    \ or create any additional arrays to sort.\n<code>\n// create table\nvar table",
  "{\n    string strGrades = \"D-\";\n    int length = grades.length;\n    float sum\
    \ = 0;\n    float average = sum/length;\n    int index = 0;\n    float averageGrade\
    \ = average;\n    string grade;\n    float gradeResult;\n    for(int i = 0; i\
    \ < grades.length; i++)\n    {\n        if(grades[i] > average)\n        {\n \
    \           index = i;\n            sum -= grades[index];\n            averageGrade\
    \ = sum/length;\n        }\n        else\n        {\n            gradeResult =\
    \ grades[i] - average;\n            strGrades = strGrades + \"E\";\n        }\n\
    \    }\n    grade = strGrades + \"+\";\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        if(grades[i] > averageGrade)\n        {\n            index\
    \ = i;\n            gradeResult = grades[index] - averageGrade;\n            strGrades\
    \ = strGrades + grades[i];\n        }\n        else\n        {\n            strGrades\
    \ = strGrades + grades[i];\n        }\n    }\n    return grade;\n}\n</code>\n\
    <|/ q tags=java,for-loop,c++,python,arrays |>\n<| c |>\nWhat is your exact question?\
    \ Why does your c++ code not work as expected? What is your expected result? How\
    \ does the result differ from what you get?\n<|/ c |>\n<| c |>\nMy c++ code works\
    \ fine for most of the cases, but fails when input for array is all zeros. I wanted\
    \ to know why that is and how to fix it.\n<|/ c |>\n<| c |>\nWhy not use [std::accumulate](http://en.cppreference.com/w/cpp/algorithm/accumulate)\
    \ instead of writing your own?\n<|/ c |>\n<| c |>\nThe problem is that the C++\
    \ code does not work like its supposed to. It fails for array values that should\
    \ be '0' and does not work for array values that are not equal to zero. So, I\
    \ am looking for an explanation as to how this problem can be solved in C++ and\
    \ Python. I am not asking for a solution to the problem I have. Also, I am not\
    \ allowed to use any library functions other than those used in this program.\n\
    <|/ c |>\n<| c |>\nOk I misunderstood the problem. So your actual question is\
    \ \"why does my c++ code not work as expected\" ?\n<|/ c |>\n<| a tags=java,for-loop,c++,python,arrays\
    \ |>\n<code>\nif(grades[i] > average)\n</code>\nThis checks if an element of the\
    \ array is big", "{\n    float gpa, sum;\n    string letterGrade;\n    \n    int\
    \ gradeCount = grades.length;\n    for(int i = 0; i < gradeCount; i++) \n    {\n\
    \        gpa = grades[i];\n        \n        sum = gpa + 0.0;\n        \n    \
    \    if(gpa > 4.0f) \n        {\n            sum -= 4.0f;\n        }\n       \
    \ else if(gpa > 3.7f) \n        {\n            sum -= 3.7f;\n        }\n     \
    \   else if(gpa > 3.3f) \n        {\n            sum -= 3.3f;\n        }\n   \
    \     else if(gpa > 3.0f) \n        {\n            sum -= 3.0f;\n        }\n \
    \       else if(gpa > 2.7f) \n        {\n            sum -= 2.7f;\n        }\n\
    \        else if(gpa > 2.3f) \n        {\n            sum -= 2.3f;\n        }\n\
    \        else if(gpa > 2.0f) \n        {\n            sum -= 2.0f;\n        }\n\
    \        else if(gpa > 1.7f) \n        {\n            sum -= 1.7f;\n        }\n\
    \        else if(gpa > 1.3f) \n        {\n            sum -= 1.3f;\n        }\n\
    \        else if(gpa > 1.0f) \n        {\n            sum -= 1.0f;\n        }\n\
    \        else if(gpa > 0.7f) \n        {\n            sum -= 0.7f;\n        }\n\
    \        else if(gpa > 0.0f) \n        {\n            sum -= 0.0f;\n        }\n\
    \        \n        letterGrade = std.string.format(std.typecons.chars.A + std.typecons.chars.B\
    \ + std.typecons.chars.C + std.typecons.chars.D + std.typecons.chars.E + \"%s\"\
    , std.math.round(sum));\n        \n        grades[i] = sum;\n        \n    }\n\
    \    \n    return grades;\n}", "{\n    if (grades == null || grades.length ==\
    \ 0)\n        return new string[0];\n    \n    float max = float.PositiveInfinity;\n\
    \    float min = float.NegativeInfinity;\n    float avg = 0;\n    for(int i =\
    \ 0; i != grades.Length; i++)\n    {\n        if(grades[i] > max)\n          \
    \  max = grades[i];\n        if(grades[i] < min)\n            min = grades[i];\n\
    \        avg += grades[i];\n    }\n    avg = avg / grades.Length;", "{\n    string\
    \ grades_output = \"\";\n    for(int i=0; i< grades.length; i++)\n    {\n    \
    \    if(grades[i] < 3.0)\n            grades_output += \"E\";\n        else if(grades[i]\
    \ >= 3.0 && grades[i] <= 3.7)\n        {\n            if(grades[i] == 3.0)\n \
    \               grades_output += \"A\";\n            else if(grades[i] == 3.3)\n\
    \                grades_output += \"A\";\n            else if(grades[i] == 3.7)\n\
    \                grades_output += \"A\";\n        }\n        else if(grades[i]\
    \ >= 3.7 && grades[i] <= 3.9)\n        {\n            if(grades[i] == 3.7)\n \
    \               grades_output += \"B\";\n            else if(grades[i] == 3.9)\n\
    \                grades_output += \"B\";\n            else if(grades[i] == 4.0)\n\
    \                grades_output += \"B\";\n        }\n        else if(grades[i]\
    \ >= 4.0 && grades[i] <= 4.3)\n        {\n            if(grades[i] == 4.0)\n \
    \               grades_output += \"C\";\n            else if(grades[i] == 4.3)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 4.7)\n\
    \                grades_output += \"C\";\n        }\n        else if(grades[i]\
    \ >= 4.3 && grades[i] <= 4.5)\n        {\n            if(grades[i] == 4.3)\n \
    \               grades_output += \"C\";\n            else if(grades[i] == 4.5)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 4.7)\n\
    \                grades_output += \"C\";\n        }\n        else if(grades[i]\
    \ >= 4.5 && grades[i] <= 4.6)\n        {\n            if(grades[i] == 4.5)\n \
    \               grades_output += \"C\";\n            else if(grades[i] == 4.6)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 4.7)\n\
    \                grades_output += \"C\";\n        }\n        else if(grades[i]\
    \ >= 4.6 && grades[i] <= 4.8)\n        {\n            if(grades[i] == 4.6)\n \
    \               grades_output += \"C\";\n            else if(grades[i] == 4.8)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 5.0)\n\
    \                grades_output += \"C\";\n        }\n        else if(grades[i]\
    \ >= 4.8 && grades[i] <= 5.0)\n        {\n            if(grades[i] == 4.8)\n \
    \               grades_output += \"C\";\n            else if(grades[i] == 5.0)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 5.1)\n\
    \                grades_output += \"C\";\n            else if(grades[i] == 5.2)\n\
    \                grades_output += \"C\";\n        }\n        else if(grades[i]\
    \ >= 5.0 && ", "{\n    string[] result = new string[grades.Length];\n    int max_grade\
    \ = grades.Max();\n    int min_grade = grades.Min();\n    int diff = max_grade\
    \ - min_grade;\n    int count = 0;\n    foreach(float grade in grades)\n    {\n\
    \        if (grade >= diff)\n        {\n            result[count++] = \"D\";\n\
    \        }\n        else if (grade >= -diff)\n        {\n            result[count++]\
    \ = \"C\";\n        }\n        else if (grade >= 0)\n        {\n            result[count++]\
    \ = \"B\";\n        }\n        else if (grade < 0)\n        {\n            result[count++]\
    \ = \"A\";\n        }\n        else if (grade < diff)\n        {\n           \
    \ result[count++] = \"A+\";\n        }\n        else\n        {\n            result[count++]\
    \ = \"B-\";\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,arrays\
    \ |>\n<| c |>\nYou are not answering the question. She didn't post any code so\
    \ there has to be something else wrong. Also, there might be some problems with\
    \ input that are not obvious. I didn't read your entire answer but this answer\
    \ is way too vague to be useful.\n<|/ c |>\n<| a |>\n<code>\nvar arr = {\n   \
    \ 4.0 : 4.0,\n    3.7 : 3.7,\n    3.3 : 3.3,\n    3.0 : 3.0,\n    2.7 : 2.7,\n\
    \    2.3 : 2.3,\n    2.0 : 2.0,\n    1.7 : 1.7,\n    1.3 : 1.3,\n    1.0 : 1.0,\n\
    \    0.0 : 0.0,\n    0.7 : 0.7,\n    0.7 : 0.0\n};", "{\n    var gradesSorted\
    \ = grades.OrderBy(g => g).ToArray();\n    var result = new List<char>();\n  \
    \  var gpa = gradesSorted[0];", "{\n    \n    float[] result = {.0};\n    \n \
    \   for (int i=0; i < grades.length; i++)\n    {\n        if (grades[i] > 3.7)\n\
    \        {\n            result[0] = result[0] + \" \" + \"A\";\n        }\n  \
    \      else if (grades[i] < 3.3)\n        {\n            result[0] = result[0]\
    \ + \" \" + \"A-\";\n        }\n        else if (grades[i] > 3.0)\n        {\n\
    \            result[0] = result[0] + \" \" + \"B+\";\n        }\n        else\
    \ if (grades[i] < 2.7)\n        {\n            result[0] = result[0] + \" \" +\
    \ \"B\";\n        }\n        else if (grades[i] < 2.3)\n        {\n          \
    \  result[0] = result[0] + \" \" + \"B-\";\n        }\n        else if (grades[i]\
    \ > 2.0)\n        {\n            result[0] = result[0] + \" \" + \"C+\";\n   \
    \     }\n        else if (grades[i] < 1.7)\n        {\n            result[0] =\
    \ result[0] + \" \" + \"C\";\n        }\n        else if (grades[i] > 1.3)\n \
    \       {\n            result[0] = result[0] + \" \" + \"C-\";\n        }\n  \
    \      else if (grades[i] > 1.0)\n        {\n            result[0] = result[0]\
    \ + \" \" + \"D+\";\n        }\n        else if (grades[i] < 0.7)\n        {\n\
    \            result[0] = result[0] + \" \" + \"D\";\n        }\n        else\n\
    \        {\n            result[0] = result[0] + \" \" + \"D-\";\n        }\n \
    \   }\n    return result;\n}", "{\n    string[] gpa = \"D- E\".Split(' ');\n \
    \   var gpa_ = grades;\n    foreach (var grade in grades)\n    {\n        if (grade\
    \ > 2.7)\n        {\n            var index = grades.IndexOf(grade);\n        \
    \    grades[index - 1] = grade;\n        }\n    }\n    int gpa_index = 0;\n  \
    \  string letter = \"\";\n    foreach (var grade in grades)\n    {\n        gpa_index\
    \ = gpa.IndexOf(grade);\n        letter = gpa[gpa_index];\n        if (grade >\
    \ 3.5)\n        {\n            gpa[gpa_index] = \"A-\";\n        }\n        else\
    \ if (grade > 2.7)\n        {\n            gpa[gpa_index] = \"B-\";\n        }\n\
    \        else if (grade > 2.0)\n        {\n            gpa[gpa_index] = \"B-\"\
    ;\n        }\n        else if (grade > 1.7)\n        {\n            gpa[gpa_index]\
    \ = \"C\";\n        }\n        else if (grade > 1.3)\n        {\n            gpa[gpa_index]\
    \ = \"C-\";\n        }\n        else if (grade > 1.0)\n        {\n           \
    \ gpa[gpa_index] = \"C\";\n        }\n        else if (grade > 0.7)\n        {\n\
    \            gpa[gpa_index] = \"D\";\n        }\n        else if (grade > 0.0)\n\
    \        {\n            gpa[gpa_index] = \"D\";\n        }\n        else\n   \
    \     {\n            gpa[gpa_index] = \"E\";\n        }\n    }\n    return gpa;\n\
    }\n</code>\n<|/ a tags=arrays,c#,math |>\n<| c |>\nThanks for your answer. It\
    \ really helped. I have a question though, when I enter in the grades into the\
    \ function it returns the letter grades in the opposite order, i.e. B+ comes after\
    \ B. Do you know why that might be happening? The grade array has this order:\
    \ 4.0; 3.7; 3.3; 3.0; 2.7; 2.3; 2.0; 1.7; 1.3; 1.0; 0.7; 0.0\n<|/ c |>\n<| c |>\n\
    My bad, the code was written wrongly, I've updated my answer. Also, I added some\
    \ comments and explanation to the code.\n<|/ c |>\n<| c |>\nI added a possible\
    \ fix. Do you know why it isn't working now?\n<|/ c |>\n<| c |>\nYes, the problem\
    \ is that the `gpa_` array is not the same as the `grades` array, so when you\
    \ iterate over `grades` the grades aren't properly updated.\n<|/ c |>\n<| c |>\n\
    Oh, I se", "{\n    float[] grades= new float[grades.length];\n    int i;\n   \
    \ for(i=0;i<grades.length;i++){\n        if(grades[i]>4.0){\n            grades[i]-=1;\n\
    \        }\n        else if(grades[i]>3.7)\n            grades[i]-=1;\n      \
    \  else if(grades[i]>3.3)\n            grades[i]-=1;\n        else if(grades[i]>3.0)\n\
    \            grades[i]-=1;\n        else if(grades[i]>2.7)\n            grades[i]-=1;\n\
    \        else if(grades[i]>2.3)\n            grades[i]-=1;\n        else if(grades[i]>2.0)\n\
    \            grades[i]-=1;\n        else if(grades[i]>1.7)\n            grades[i]-=1;\n\
    \        else if(grades[i]>1.3)\n            grades[i]-=1;\n        else if(grades[i]>1.0)\n\
    \            grades[i]-=1;\n        else if(grades[i]>0.7)\n            grades[i]-=1;\n\
    \        else if(grades[i]>0.0)\n            grades[i]-=1;\n        else if(grades[i]<0.0)\n\
    \            grades[i]+=1;\n        else\n            grades[i]+=1;\n    }\n \
    \   string[] result = new string[grades.length];\n    for(i=0;i<grades.length;i++){\n\
    \        result[i]=std.typecons.tostring((char) (std.math.pow(10,grades[i])),4,1);\n\
    \    }\n    return result;\n}", "{\n    var grades_length = grades.length;\n \
    \   var result_array = new string[grades_length];\n    int result_i = 0;", "{\n\
    \    //Complete the function\n}\n</code>\n<|/ q |>\n<| c |>\nPlease share your\
    \ attempts and explain how it doesn't work and what have you done to fix it.\n\
    <|/ c |>\n<| c |>\nThe function I wrote is supposed to use binary search to find\
    \ a specific index where `grades[index] > 4.0` but I cannot figure out what to\
    \ do.\n<|/ c |>\n<| c |>\nSo what have you tried so far and what didn't work?\n\
    <|/ c |>\n<| c |>\nI've only attempted to write a function that would output a\
    \ letter grade based off of some given GPA's but nothing that I could think of\
    \ that would work.\n<|/ c |>\n<| c |>\nIf you have tried something that didn't\
    \ work, please include it in your question. We'd be happy to help you fix it,\
    \ but you have to try it yourself first.\n<|/ c |>\n<| a dscore=1 |>\nBinary search\
    \ is probably the way to go, but you already seem to have an algorithm to find\
    \ the right index. Just use that index instead of the first one.\n<code>", "{\n\
    \    \n    /*\n    \n    Implement the function below using the function above. ",
  "{\n    string[] letterGrades = new string[grades.length];\n    for (int i = 0;\
    \ i < letterGrades.length; i++) \n    {\n        if (grades[i] > 4.0)\n      \
    \  {\n            letterGrades[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ > 3.7)\n        {\n            letterGrades[i] = \"A\";\n        }\n       \
    \ else if (grades[i] > 3.3)\n        {\n            letterGrades[i] = \"A-\";\n\
    \        }\n        else if (grades[i] > 3.0)\n        {\n            letterGrades[i]\
    \ = \"B+\";\n        }\n        else if (grades[i] > 2.7)\n        {\n       \
    \     letterGrades[i] = \"B\";\n        }\n        else if (grades[i] > 2.3)\n\
    \        {\n            letterGrades[i] = \"B-\";\n        }\n        else if\
    \ (grades[i] > 2.0)\n        {\n            letterGrades[i] = \"C+\";\n      \
    \  }\n        else if (grades[i] > 1.7)\n        {\n            letterGrades[i]\
    \ = \"C\";\n        }\n        else if (grades[i] > 1.3)\n        {\n        \
    \    letterGrades[i] = \"C-\";\n        }\n        else if (grades[i] > 1.0)\n\
    \        {\n            letterGrades[i] = \"D+\";\n        }\n        else if\
    \ (grades[i] > 0.7)\n        {\n            letterGrades[i] = \"D\";\n       \
    \ }\n        else if (grades[i] > 0.0)\n        {\n            letterGrades[i]\
    \ = \"D-\";\n        }\n        else\n        {\n            letterGrades[i] =\
    \ \"E\";\n        }\n    }\n    return letterGrades;\n}\n</code>\n<|/ q |>\n<|\
    \ c |>\nHi Roger. Welcome to Stack Overflow. What is the exact problem? I see\
    \ you have a solution that you feel doesn't work, but you don't tell us what it\
    \ does or what it's supposed to do.\n<|/ c |>\n<| c |>\nI agree with that question.\
    \ Please tell us what you are expecting as output, and how it is different.\n\
    <|/ c |>\n<| c |>\nIt would help a lot if you would fix the indentation of the\
    \ code\n<|/ c |>\n<| c |>\nThe code is not working at all. It is supposed to return\
    \ an arraylist with lettergrades. But it returns nothing at all\n<|/ c |>\n<|\
    \ c |>\nIt would also help if you show us what code you are currently using for\
    \ grading\n<|/ c |>\n<| a dscore=2 tags=c#,arrays |>\nThe reason it is crashing\
    \ is because you are checking for grades <= 4.0. \nThe reason it returns nothing\
    \ is because you are doing:\n<code>\nif (grades[i] < 3.0)\n", "{\n    int i, index;\n\
    \    float sum = 0;\n    string grade = \"\";\n    \n    //The final grade for\
    \ each student is obtained with her grade function\n    //and it is compared to\
    \ the current sum so as to prevent errors from comparing\n    //floats to integers.\n\
    \    string final = \"\";\n    \n    //If the sum is less than 1, the final grade\
    \ is \"E\"\n    if (sum < 1) {\n        final = \"E\";\n    } else {\n       \
    \ //Find the index for the largest value\n        for (i = 0; i < grades.length;\
    \ i++)\n        {\n            if (grades[i] > sum)\n            {\n         \
    \       index = i;\n                sum = grades[i];\n            }\n        }\n\
    \        \n        //Add the letter grade to the final grade in the correct order.\n\
    \        switch (index)\n        {\n        case 0:\n            grade = \"A+\"\
    ;\n            break;\n        case 1:\n            grade = \"A\";\n         \
    \   break;\n        case 2:\n            grade = \"A-\";\n            break;\n\
    \        case 3:\n            grade = \"B+\";\n            break;\n        case\
    \ 4:\n            grade = \"B\";\n            break;\n        case 5:\n      \
    \      grade = \"B-\";\n            break;\n        case 6:\n            grade\
    \ = \"C+\";\n            break;\n        case 7:\n            grade = \"C\";\n\
    \            break;\n        case 8:\n            grade = \"C-\";\n          \
    \  break;\n        case 9:\n            grade = \"D+\";\n            break;\n\
    \        case 10:\n            grade = \"D\";\n            break;\n        case\
    \ 11:\n            grade = \"D-\";\n            break;\n        case 12:\n   \
    \         grade = \"E\";\n            break;\n        }\n        \n        //Add\
    \ the letter grade to the final grade\n        final += grade;\n    }\n    \n\
    \    //Return the final grade for this array\n    return new string[]{final, final};\n\
    }", "{\n    List<string> grade_list = new List<string>();", "{\n    string[] letter\
    \ = new string[grades.Length];", "{\n    if (grades.length != 1)\n        throw\
    \ new Exception(\"Invalid grade array\");", "{\n    float x = grades[grades.length-1];\n\
    \    float y = grades[grades.length-2];\n    float z = grades[grades.length-3];\n\
    \    float w = grades[grades.length-4];\n    float a = grades[grades.length-5];\n\
    \    float b = grades[grades.length-6];\n    float c = grades[grades.length-7];\n\
    \    float d = grades[grades.length-8];\n    float e = grades[grades.length-9];\n\
    \    float f = grades[grades.length-10];\n    float g = grades[grades.length-11];\n\
    \    float h = grades[grades.length-12];\n    float i = grades[grades.length-13];\n\
    \    float j = grades[grades.length-14];\n    float k = grades[grades.length-15];\n\
    \    float l = grades[grades.length-16];\n    float m = grades[grades.length-17];\n\
    \    float n = grades[grades.length-18];\n    float o = grades[grades.length-19];\n\
    \    float p = grades[grades.length-20];\n    float q = grades[grades.length-21];\n\
    \    float r = grades[grades.length-22];\n    float s = grades[grades.length-23];\n\
    \    float t = grades[grades.length-24];\n    float u = grades[grades.length-25];\n\
    \    float v = grades[grades.length-26];\n    float w = grades[grades.length-27];\n\
    \    float x = grades[grades.length-28];\n    float y = grades[grades.length-29];\n\
    \    float z = grades[grades.length-30];\n    float a = grades[grades.length-31];\n\
    \    float b = grades[grades.length-32];\n    float c = grades[grades.length-33];\n\
    \    float d = grades[grades.length-34];\n    float e = grades[grades.length-35];\n\
    \    float f = grades[grades.length-36];\n    float g = grades[grades.length-37];\n\
    \    float h = grades[grades.length-38];\n    float i = grades[grades.length-39];\n\
    \    float j = grades[grades.length-40];\n    float k = grades[grades.length-41];\n\
    \    float l = grades[grades.length-42];\n    float m = grades[grades.length-43];\n\
    \    float n = grades[grades.length-44];\n    float o = grades[grades.length-45];\n\
    \    float p = grades[grades.length-46];\n    float q = grades[grades.length-47];\n\
    \    float r = grades[grades.length-48];\n    float s = grades[", "{\n\tstring[]\
    \ result = new string[grades.Length];\n\tfor(int i = 0; i < grades.Length; i++)\n\
    \t{\n\t\tresult[i] = grades[i] < 3.0 ? \"D-\" : grades[i] < 3.7 ? \"C-\" : grades[i]\
    \ < 3.3 ? \"C-\" : grades[i] < 2.7 ? \"B-\" : grades[i] < 2.3 ? \"B-\" : grades[i]\
    \ < 2.0 ? \"B-\" : grades[i] < 1.7 ? \"B-\" : grades[i] < 1.3 ? \"C-\" : grades[i]\
    \ < 1.0 ? \"C\" : grades[i] < 0.7 ? \"C\" : grades[i] < 0.0 ? \"C\" : grades[i]\
    \ < 0.0 ? \"D-\" : grades[i] < 0.7 ? \"D\" : grades[i] < 0.3 ? \"D\" : grades[i]\
    \ < 0.0 ? \"D\" : grades[i] < 0.3 ? \"E\" : grades[i] < 0.7 ? \"E\" : grades[i]\
    \ < 0.3 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grades[i]\
    \ < 0.0 ? \"E\" : grades[i] < 0.0 ? \"E\" : grade", "{\n    string[] letterGrades\
    \ = new string[grades.length];\n    for(int i = 0; i < grades.length; i++) \n\
    \    {\n        if(grades[i] >= 3.0 || grades[i] < 0.0) \n        {\n        \
    \    letterGrades[i] = \"E\";\n        } else \n        {\n            letterGrades[i]\
    \ = \"\";\n        }\n    }\n    return letterGrades;\n}", "{\n    float[] result\
    \ = new float[grades.length];\n    \n    for (int i = 0; i < grades.length; ++i)\
    \ {\n        result[i] = grades[i] < 0 ? -grades[i] : grades[i];\n    }\n    \n\
    \    float grade = result[0];\n    float prevGrade = grades[grades.length-1];\n\
    \    \n    if (prevGrade < 0) {\n        grade = -grade;\n    }\n    \n    if\
    \ (grade > 0 && prevGrade > 0 && prevGrade < grade ) {\n        for (int i = 1;\
    \ i < grades.length; ++i) {\n            grade = result[i-1];\n            prevGrade\
    \ = result[i];\n            \n            if (prevGrade < 0) {\n             \
    \   grade = -grade;\n            }\n            \n            if (grade > 0 &&\
    \ prevGrade > 0 && prevGrade < grade) {\n                result[i] = 0;\n    \
    \            result[i-1] = grade;\n            }\n        }\n    }\n    \n   \
    \ StringBuilder builder = new StringBuilder();\n    \n    for (int i = 0; i <\
    \ grades.length; ++i) {\n        if (result[i] < 0) {\n            builder.append(\"\
    D-\");\n        } else if (result[i] > 0) {\n            builder.append(\"D+\"\
    );\n        } else if (result[i] == 0) {\n            builder.append(\"D\");\n\
    \        } else if (result[i] == grade) {\n            builder.append(\"C+\");\n\
    \        } else if (result[i] == grade - 1) {\n            builder.append(\"C\"\
    );\n        } else if (result[i] == grade-1) {\n            builder.append(\"\
    C\");\n        } else if (result[i] == grade+1) {\n            builder.append(\"\
    B+\");\n        } else if (result[i] == grade+2) {\n            builder.append(\"\
    B\");\n        } else if (result[i] == grade+3) {\n            builder.append(\"\
    B-\");\n        } else if (result[i] == grade+4) {\n            builder.append(\"\
    B\");\n        } else if (result[i] == grade+5) {\n            builder.append(\"\
    A+\");\n        } else if (result[i] == grade+6) {\n            builder.append(\"\
    A\");\n        } else if (result[i] == grade+7) {\n            builder.append(\"\
    A\");\n        } else if (result[i] == grade+8) {\n            builder.append(\"\
    A-\");\n        } else {\n            builder.append(\"A\");\n        }\n    }\n\
    \    \n    return builder.toString().toCharArray();\n}\n</code>\n<|/ a |>\n<|\
    \ a tags=algorithm |>\nThe only problem is, she has lost the code she used for\
    \ grading.\n  She has given you an array of GPAs for some students and you have\
    \ to write a\n  function that can output an array of letter grades using the following\
    \ table:", "{\n    var gradesArray = new string[grades.Length];\n    for (var\
    \ i = 0; i <grades.Length; i++)\n    {\n        float gpa = grades[i];\n     \
    \   if (gpa > 3.0)\n        {\n            gradesArray[i] = \"B+\";\n        }\n\
    \        else if (gpa > 2.7)\n        {\n            gradesArray[i] = \"B\";\n\
    \        }\n        else if (gpa > 2.0)\n        {\n            gradesArray[i]\
    \ = \"B-\";\n        }\n        else if (gpa > 1.70)\n        {\n            gradesArray[i]\
    \ = \"C+\";\n        }\n        else if (gpa > 1.30)\n        {\n            gradesArray[i]\
    \ = \"C\";\n        }\n        else if (gpa > 1.0)\n        {\n            gradesArray[i]\
    \ = \"C-\";\n        }\n        else if (gpa > 0.70)\n        {\n            gradesArray[i]\
    \ = \"D+\";\n        }\n        else if (gpa > 0.0)\n        {\n            gradesArray[i]\
    \ = \"D\";\n        }\n        else\n        {\n            gradesArray[i] = \"\
    D-\";\n        }\n    }\n    return gradesArray;\n}\n</code>\n<|/ a dscore=0 tags=c#,arrays\
    \ |>\n<| c |>\nThanks mate ! I've been trying for 2 days now to solve this problem\
    \ on my own. I'll give it a shot when I get back to my computer again, thanks\
    \ for the help.\n<|/ c |>\n<| c |>\nYou made my day!\n<|/ c |>\n<| a |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
  "{\n    for(int i=1; i<grades.length; i++)\n    {\n        float currentGrade =\
    \ grades[i];\n        float previousGrade = grades[i-1];\n        int sign = 0;\n\
    \        if(currentGrade > previousGrade)\n        {\n            sign = 1;\n\
    \        }\n        else\n        {\n            sign = -1;\n        }\n     \
    \   if(sign == 1)\n        {\n            grades[i] = grades[i-1];\n         \
    \   grades[i-1] = currentGrade;\n        }\n    }\n    string[] letterGrades =\
    \ new string[grades.length];\n    for(int i=0; i<grades.length; i++)\n    {\n\
    \        float currentGrade = grades[i];\n        letterGrades[i] = letterGrade(i+1);\n\
    \    }\n    return letterGrades;\n}\nstring letterGrade(int i)\n{\n    if(i >=\
    \ 50)\n    {\n        return \"A+\";\n    }\n    if(i >= 40)\n    {\n        return\
    \ \"A\";\n    }\n    if(i >= 30)\n    {\n        return \"A-\";\n    }\n    if(i\
    \ >= 20)\n    {\n        return \"B+\";\n    }\n    if(i >= 10)\n    {\n     \
    \   return \"B\";\n    }\n    if(i >= 5)\n    {\n        return \"B-\";\n    }\n\
    \    if(i >= 1)\n    {\n        return \"C+\";\n    }\n    if(i >= 0)\n    {\n\
    \        return \"C\";\n    }\n    return \"D+\";\n}", "{\n    float[] gpas =\
    \ new float[grades.Length];\n    for(int i = 0; i < grades.Length; i++)\n    \
    \    gpass[i] = grades[i];\n    \n    var numerical_grades = new List<float>();\n\
    \    for(int i = 0; i < gpass.Length; i++)\n    {\n        var numerical_grade\
    \ = gpass[i]/3.0;\n        var current_numerical_grade = numerical_grade - 0.5f;\n\
    \        if(numerical_grade < 0.0f || numerical_grade > 1.0f)\n        {\n   \
    \         numerical_grade = -1.0f;\n            current_numerical_grade = -1.0f;\n\
    \        }\n        numerical_grades.Add(current_numerical_grade);\n    }\n  \
    \  \n    var letter_grades = new List<char>();\n    for(int i = 0; i < numerical_grades.Count;\
    \ i++)\n    {\n        var current_numerical_grade = numerical_grades[i];\n  \
    \      if(current_numerical_grade > 0.1f)\n        {\n            letter_grades.Add('+');\n\
    \        }\n        else if(current_numerical_grade > 0.01f)\n        {\n    \
    \        letter_grades.Add(' ');\n        }\n        else if(current_numerical_grade\
    \ < 0.01f)\n        {\n            letter_grades.Add('-');\n        }\n      \
    \  else\n        {\n            letter_grades.Add('A');\n        }\n    }\n  \
    \  \n    return letter_grades.ToArray();\n}\n</code>\n<|/ a |>\n<| c |>\nIf you're\
    \ going to use a `List<T>`, I'd recommend using a `List<char>` instead: `return\
    \ new List<char>(letter_grades).ToArray();`\n<|/ c |>\n<| a tags=c# dscore=2 |>\n\
    I have written some test code for this solution that you can run to test it yourself\
    \ if you'd like.\n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Collections;",
  "{\n    double[] new_grades = new double[grades.length];\n    for (int i = 0; i\
    \ < new_grades.length; i++)\n    {\n        char result = ' ';\n        double\
    \ new_gpa = grades[i];\n        if (grades[i] < 3.7)\n        {\n            result\
    \ = 'A+';\n            new_gpa = grades[i] - 3.7;\n        }\n        else if\
    \ (grades[i] > 3.3)\n        {\n            result = 'A';\n            new_gpa\
    \ = grades[i] - 3.3;\n        }\n        else if (grades[i] > 2)\n        {\n\
    \            result = 'B+';\n            new_gpa = grades[i] - 2.3;\n        }\n\
    \        else if (grades[i] < 2)\n        {\n            result = 'B';\n     \
    \       new_gpa = grades[i] - 2;\n        }\n        else if (grades[i] > 1.7)\n\
    \        {\n            result = 'C+';\n            new_gpa = grades[i] - 1.7;\n\
    \        }\n        else if (grades[i] < 1)\n        {\n            result = 'C';\n\
    \            new_gpa = grades[i] - 1;\n        }\n        else if (grades[i] >\
    \ 1)\n        {\n            result = 'D+';\n            new_gpa = grades[i] -\
    \ 0.7;\n        }\n        else if (grades[i] < 0)\n        {\n            result\
    \ = 'D';\n            new_gpa = grades[i] - 0;\n        }\n        else if (grades[i]\
    \ > 0)\n        {\n            result = 'D-';\n            new_gpa = grades[i]\
    \ - 0;\n        }\n        else if (grades[i] == 0)\n        {\n            result\
    \ = 'E';\n        }\n        new_grades[i] = new_gpa;\n    }\n    string grades_str\
    \ = \"\";\n    for (int i = 0; i < new_grades.length; i++)\n    {\n        double\
    \ new_gpa = new_grades[i];\n        grades_str += std.string.escape(new_gpa) +\
    \ \"|\" + std.string.escape(std.string.toChar(result));\n    }\n    grades_str\
    \ = grades_str.substr(0, grades_str.length() - 1);\n    return grades_str;\n}",
  "{\n  float sumOfGrades = 0;\n  foreach (float grade in grades)\n  {\n    sumOfGrades\
    \ += grade;\n  }\n  if (sumOfGrades > 0)\n  {\n    foreach (float grade in grades)\n\
    \    {\n      if (sumOfGrades > 0)\n      {\n        if (grade < sumOfGrades)\n\
    \        {\n          string gradeLetter = \"D-\";\n        }\n        else if\
    \ (grade <= sumOfGrades)\n        {\n          string gradeLetter = \"C\";\n \
    \       }\n        else if (grade <= sumOfGrades - 3)\n        {\n          string\
    \ gradeLetter = \"B\";\n        }\n        else if (grade <= sumOfGrades - 2)\n\
    \        {\n          string gradeLetter = \"B-\";\n        }\n        else if\
    \ (grade <= sumOfGrades - 1)\n        {\n          string gradeLetter = \"A\"\
    ;\n        }\n        else if (grade <= sumOfGrades + 1)\n        {\n        \
    \  string gradeLetter = \"A+\";\n        }\n        else\n        {\n        \
    \  string gradeLetter = \"A\";\n        }\n      }\n      else\n      {\n    \
    \    if (grade < sumOfGrades)\n        {\n          string gradeLetter = \"D+\"\
    ;\n        }\n        else if (grade < sumOfGrades - 3)\n        {\n         \
    \ string gradeLetter = \"D\";\n        }\n        else if (grade < sumOfGrades\
    \ - 2)\n        {\n          string gradeLetter = \"C+\";\n        }\n       \
    \ else if (grade < sumOfGrades - 1)\n        {\n          string gradeLetter =\
    \ \"C\";\n        }\n        else if (grade < sumOfGrades + 1)\n        {\n  \
    \        string gradeLetter = \"B\";\n        }\n        else\n        {\n   \
    \       string gradeLetter = \"B\";\n        }\n      }\n    }\n  }\n  else\n\
    \  {\n    foreach (float grade in grades)\n    {\n      if (grade < sumOfGrades)\n\
    \      {\n        if (grade > 0)\n        {\n          string gradeLetter = \"\
    D\";\n        }\n        else\n        {\n          string gradeLetter = \"D-\"\
    ;\n        }\n      }\n      else\n      {\n        if (grade > 0)\n        {\n\
    \          string gradeLetter = \"C\";\n        }\n        else\n        {\n \
    \         string gradeLetter = \"C-\";\n        }\n      }\n    }\n  }\n  string[]\
    \ gradeLetters = new string[grades.Length];\n  foreach(int i in grades)\n  {\n\
    \    gradeLetters[i] = gradeLetter;\n  }\n  return gradeLetters;\n}", "{\n   \
    \ string result[] = new string[grades.length];\n    int maxIndex = 0;\n    double\
    \ average = std.array.sum(grades) / grades.length;\n    for (int i = 0; i < grades.length;\
    \ i++)\n    {\n        int index = std.find.index(grades, average);\n        result[i]\
    \ = \"D\";\n        if (index > maxIndex)\n        {\n            maxIndex = index;\n\
    \        }\n    }\n    if (maxIndex < grades.length)\n    {\n        result[maxIndex]\
    \ = result[maxIndex] + \"+\";\n    }\n    return result;\n}", "{\n    var grades_as_int\
    \ = new Array<int>();\n    var max_grade = grades[0];\n    for (var i = 1; i <\
    \ grades.length; i++) \n    {\n        grades_as_int.push(grades[i]);\n      \
    \  max_grade = Math.max(max_grade, grades[i]);\n    }\n    var letter_grades =\
    \ new Array<char>();\n    grades_as_int.sort();\n    for (var i = 0; i < grades_as_int.length;\
    \ i++) \n    {\n        var grade = grades_as_int[i];\n        switch (grade)\
    \ \n        {\n            case 0: letter_grades.push('a');break;\n          \
    \  case 1: letter_grades.push('a');break;\n            case 2: letter_grades.push('b');break;\n\
    \            case 3: letter_grades.push('c');break;\n            case 4: letter_grades.push('c');break;\n\
    \            case 5: letter_grades.push('d');break;\n            case 6: letter_grades.push('d');break;\n\
    \            case 7: letter_grades.push('e');break;\n            case 8: letter_grades.push('e');break;\n\
    \            case 9: letter_grades.push('f');break;\n            case 10: letter_grades.push('f');break;\n\
    \            case 11: letter_grades.push('g');break;\n            case 12: letter_grades.push('g');break;\n\
    \            case 13: letter_grades.push('h');break;\n            case 14: letter_grades.push('h');break;\n\
    \            case 15: letter_grades.push('i');break;\n            case 16: letter_grades.push('i');break;\n\
    \            case 17: letter_grades.push('j');break;\n            case 18: letter_grades.push('j');break;\n\
    \            case 19: letter_grades.push('k');break;\n            case 20: letter_grades.push('k');break;\n\
    \            case 21: letter_grades.push('l');break;\n            case 22: letter_grades.push('l');break;\n\
    \            case 23: letter_grades.push('m');break;\n            case 24: letter_grades.push('m');break;\n\
    \            case 25: letter_grades.push('n');break;\n            case 26: letter_grades.push('n');break;\n\
    \            case 27: letter_grades.push('o');break;\n            case 28: letter_grades.push('o');break;\n\
    \            case 29: letter_grades.push('p');break;\n            case 30: letter_grades.push('p');break;\n\
    \            case 31: letter_grades.push('q');break;\n            case 32: letter_grades.push('q');break;\n\
    \            case 33: letter_grades.push('r');break;\n            case 34: letter_grades.push('r');break;\n\
    \            case 35: letter_grades.push('s');break;\n            case 36: letter_grades.push('s');break;\n\
    \            case 37: letter_grades.push('t');break;\n            case 38: letter_grades.push('t');break;\n\
    \            case 39: ", "{\n    int[] letterGrades = {\n            \"A+\", \"\
    A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"\
    , \"E\"\n    };\n    int[] letterGrades_size = letterGrades.length;\n    \n  \
    \  int[] grade_sum = new int[letterGrades_size];\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        grade_sum[i] = grades[i];\n    }\n    \n    int[] grades_size\
    \ = grades.length;\n    \n    int[] average = new int[letterGrades_size];\n  \
    \  \n    for(int i = 0; i < letterGrades_size; i++)\n    {\n        int sum =\
    \ 0;\n        int count = 0;\n        for(int j = 0; j < grades_size; j++)\n \
    \       {\n            sum += grades[j];\n            count++;\n        }\n  \
    \      average[i] = sum / count;\n    }\n    \n    for(int i = 0; i < letterGrades_size;\
    \ i++)\n    {\n        for(int j = 0; j < grades_size; j++)\n        {\n     \
    \       int average = grades[j];\n            int grade_sum = 0;\n           \
    \ int count = 0;\n            for(int k = 0; k < grades_size; k++)\n         \
    \   {\n                if(grade_sum < average)\n                {\n          \
    \          count++;\n                    grade_sum += grades[k];\n           \
    \     }\n            }\n            if(count == grades_size)\n            {\n\
    \                letterGrades[i] = letterGrades[i].concat(letterGrades_size-i-1);\n\
    \            }\n        }\n    }\n    \n    \n    return letterGrades;\n}\n</code>\n\
    The function should return an array of letter grades using the following table:\n\
    \             GPA       |    Letter grade\n              4.0                A+\n\
    \            > 3.7                A \n            > 3.3                A- \n \
    \           > 3.0                B+\n            > 2.7                B \n   \
    \         > 2.3                B-\n            > 2.0                C+\n     \
    \       > 1.7                C\n            > 1.3                C-\n        \
    \    > 1.0                D+ \n            > 0.7                D \n         \
    \   > 0.0                D-\n              0.0                E\n<code>\nExample:\
    \ \n>>> grade_equation([4.0, 3L, 1.7, 2L, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"]\n</code>\n<|/ q tags=c#,math,java,arrays |>\n<| c |>\nWhat do you mean\
    \ by _return an array of letter grades_?\n<|/ c |>\n<| c |>\nI mean the array\
    \ of letters grades for the input array of GPA grades\n<|/ c |>\n<| ", "{\n  \
    \  float gpa;\n    float num = 0;\n    float denom;\n    string letter = \"\"\
    ;\n    string[] result = new string[grades.Length];", "{\n    float total = 0;\n\
    \    float average = 0;\n    for(int i = 0; i < grades.Length; i++)\n    {\n \
    \       total = total + grades[i];\n    }\n    average = total/grades.Length;\n\
    \    string[] letterGrades = new string[grades.Length];\n    for(int i = 0; i\
    \ < grades.Length; i++)\n    {\n        float averageGrade = (float)((grades[i]\
    \ - average)/(average*2));\n        string letterGrade = \"-\";\n        if(averageGrade\
    \ > 3)\n            letterGrade = \"A+\";\n        else if(averageGrade > 2)\n\
    \            letterGrade = \"A\";\n        else if(averageGrade > 1)\n       \
    \     letterGrade = \"A-\";\n        if(averageGrade > 0)\n            letterGrade\
    \ = \"B+\";\n        else if(averageGrade > -1)\n            letterGrade = \"\
    B\";\n        else if(averageGrade > -2)\n            letterGrade = \"B-\";\n\
    \        if(averageGrade > -3)\n            letterGrade = \"C+\";\n        else\
    \ if(averageGrade > -4)\n            letterGrade = \"C\";\n        else if(averageGrade\
    \ > -5)\n            letterGrade = \"C-\";\n        if(averageGrade > -6)\n  \
    \          letterGrade = \"D+\";\n        else if(averageGrade > -7)\n       \
    \     letterGrade = \"D\";\n        else if(averageGrade > -8)\n            letterGrade\
    \ = \"D-\";\n        if(averageGrade > -9)\n            letterGrade = \"E\";\n\
    \        letterGrades[i] = letterGrade;\n    }\n    return letterGrades;\n}",
  "{\n    string grade = \"+\";\n    int grade_index;\n    bool has_digits = false;\n\
    \    bool has_letter = false;\n    \n    for (int i = 0; i < grades.length; i++)\n\
    \    {\n        grade_index = i;\n        has_digits = has_digits || grades[i]\
    \ >= 0;\n        has_letter = has_letter || grades[i] < 0 || grades[i] >= 6; //\
    \ Only grades A..F", "{\n    int[] grades_int = new int[grades.length];\n    for(int\
    \ i = 0; i< grades.length; i++)\n        grades_int[i] = (int)grades[i];\n   \
    \ \n    int[] grades_int_sorted = new int[grades.length];\n    for(int i = 0;\
    \ i< grades.length; i++)\n        grades_int_sorted[i] = i;\n    \n    Arrays.sort(grades_int_sorted);\n\
    \    \n    string[] grades_str = new string[grades.length];\n    for(int i = 0;\
    \ i< grades_int.length; i++)\n    {\n        int idx = grades_int_sorted[i];\n\
    \        if(grades[idx] >= 3.0)\n            grades_str[i] = \"B+\";\n       \
    \ else if(grades[idx] >= 2.7)\n            grades_str[i] = \"B\";\n        else\
    \ if(grades[idx] >= 2.3)\n            grades_str[i] = \"B-\";\n        else if(grades[idx]\
    \ >= 2.0)\n            grades_str[i] = \"C+\";\n        else if(grades[idx] >=\
    \ 1.7)\n            grades_str[i] = \"C\";\n        else if(grades[idx] >= 1.3)\n\
    \            grades_str[i] = \"C-\";\n        else if(grades[idx] >= 1.0)\n  \
    \          grades_str[i] = \"D+\";\n        else if(grades[idx] >= 0.7)\n    \
    \        grades_str[i] = \"D\";\n        else\n            grades_str[i] = \"\
    D-\";\n    }\n    return grades_str;\n}\n</code>\n<|/ q tags=java,arrays |>\n\
    <| c |>\nWhat did you try? This is not a code-writing service.\n<|/ c |>\n<| c\
    \ |>\nDo you know about loops?\n<|/ c |>\n<| c |>\nyes I do know about loops and\
    \ arrays but I do not know how I can compare the numbers that I have, with the\
    \ numbers given by the user and output the letter grades\n<|/ c |>\n<| c |>\n\
    Please see the updated answer - I added the code to explain the logic and explain\
    \ what was wrong.\n<|/ c |>\n<| a |>\nI think you can solve this problem using\
    \ loops, if I'm not mistaken.\nJust iterate over your array and check if the element\
    \ in the array is > the average (your average should be calculated in some way):\n\
    <code>\npublic String getLetterGrades(float average) {\n    String letterGrade\
    \ = \"\";\n    float sum = 0;\n    for (int i = 0; i < grades.length; i++) {\n\
    \        if (grades[i] > average) {\n            letterGrade = \"A+\";\n     \
    \   } else if (grades[i] < average) {\n            letterGrade = \"A\";\n    \
    \    } else if (grade", "{\n    string grade = \"\";\n    bool hasPoints = false;\n\
    \    \n    for (float grade : grades) {\n        if (grade > 3.0) {\n        \
    \    hasPoints = true;\n        }\n    }\n    if (hasPoints) {\n        grade\
    \ += \"+\"\n    } else {\n        grade += \"-\"\n    }\n    \n    for (int i\
    \ = 0; i < grades.length; ++i) {\n        if (grades[i] <= 3.0) {\n          \
    \  grade += \"A\";\n        } else if (grades[i] <= 3.7) {\n            grade\
    \ += \"A-\";\n        } else if (grades[i] <= 3.3) {\n            grade += \"\
    B+\";\n        } else if (grades[i] <= 2.7) {\n            grade += \"B\";\n \
    \       } else if (grades[i] <= 2.3) {\n            grade += \"B-\";\n       \
    \ } else if (grades[i] <= 2) {\n            grade += \"C+\";\n        } else if\
    \ (grades[i] <= 1.7) {\n            grade += \"C\";\n        } else if (grades[i]\
    \ <= 1) {\n            grade += \"C-\";\n        } else if (grades[i] <= 0.7)\
    \ {\n            grade += \"D+\";\n        } else if (grades[i] <= 0) {\n    \
    \        grade += \"D\";\n        } else {\n            grade += \"E\";\n    \
    \    }\n    }\n    \n    return grade.split(\"+\");\n}", "{\n    float[] grades_temp\
    \ = new float[grades.Length];\n    for(int i = 0; i < grades.Length; i++) grades_temp[i]\
    \ = grades[i];\n    sort(grades_temp, 0, grades.Length - 1);\n    float[] letter_grade\
    \ = new float[grades.Length];\n    for(int i = 0; i < grades_temp.Length; i++)\n\
    \    {\n        if(i + 1 < grades_temp.Length)\n        {\n            if(grades_temp[i]\
    \ > grades_temp[i + 1])\n            {\n                letter_grade[i] = letter_grade[i\
    \ + 1];\n                grades_temp[i] = grades_temp[i + 1];\n              \
    \  grades_temp[i + 1] = 0.0;\n            }\n        }\n        else if(grades_temp[i]\
    \ >= 4.0)\n        {\n            letter_grade[i] = 'D';\n        }\n        else\n\
    \        {\n            letter_grade[i] = 'F';\n        }\n    }\n    string[]\
    \ letters = new string[grades.Length];\n    for(int i = 0; i < letters.Length;\
    \ i++)\n        letters[i] = letter_grade[i].ToString();\n    return letters;\n\
    }\n</code>\n<|/ a tags=algorithm,c# |>\n<| c |>\nI tried to get it to work but\
    \ my code isn't compiling correctly for some reason. Can you give me the exact\
    \ code to use or edit your post with my code?\n<|/ c |>\n<| c |>\nThe code I gave\
    \ you is the exact code you need, but instead of grade_equation you would call\
    \ numerical_letter_grade and pass in the array.\n<|/ c |>\n<| c |>\nI replaced\
    \ my code with yours but it doesn't compile. http://i.imgur.com/U5UQKJn.png\n\
    <|/ c |>\n<| c |>\nI didn't realize you had to include a using statement at the\
    \ top of the file. Once I did that it compiled fine.\n<|/ c |>\n<| c |>\nI actually\
    \ ran your code on http://repl.it/ and it came up with errors. The reason it said\
    \ it was missing a using statement was because you hadn't included System.Collections.\
    \ If you try to run this code on repl.it it will give you errors. Try it on your\
    \ machine.\n<|/ c |>\n<| a tags=algorithm,c# |>\nHere's a LINQ solution:\n<code>\n\
    float grades = 4.5f;\nvar gradeLetters = Enumerable.Range(0, 5).Select(i => \n\
    \    (i / 5).ToString(CultureInfo.InvariantCulture) + \n    (i % 5).ToString(CultureInfo.InvariantCulture)\
    \ + \n    Enumerable.Range(grades - 5, 1).Select(x => \n        char.ToUpper((int)Math.Round(grades\
    \ - x * 5", "{\n    string[] grades_chars = new string[grades.Length];\n    for\
    \ (int i = 0; i < grades.Length; i++)\n    {\n        if (grades[i] < 3.0)\n \
    \       {\n            grades_chars[i] = \"F\";\n        }\n        else if (grades[i]\
    \ > 3.0 && grades[i] < 4.0)\n        {\n            grades_chars[i] = \"D-\";\n\
    \        }\n        else if (grades[i] > 4.0 && grades[i] < 5.0)\n        {\n\
    \            grades_chars[i] = \"C-\";\n        }\n        else if (grades[i]\
    \ > 5.0 && grades[i] < 6.0)\n        {\n            grades_chars[i] = \"B-\";\n\
    \        }\n        else if (grades[i] > 6.0 && grades[i] < 7.0)\n        {\n\
    \            grades_chars[i] = \"B-\";\n        }\n        else if (grades[i]\
    \ > 7.0 && grades[i] < 8.0)\n        {\n            grades_chars[i] = \"A-\";\n\
    \        }\n        else if (grades[i] > 8.0 && grades[i] < 9.0)\n        {\n\
    \            grades_chars[i] = \"A-\";\n        }\n        else if (grades[i]\
    \ > 9.0 && grades[i] < 10.0)\n        {\n            grades_chars[i] = \"A-\"\
    ;\n        }\n        else if (grades[i] > 10.0)\n        {\n            grades_chars[i]\
    \ = \"A-\";\n        }\n    }\n    return grades_chars;\n}", "{\n    // Your code\
    \ here\n    List<string> grade_list = new List<string>();", "{\n    int[] grade_index\
    \ = {\n                        0L,   1L,   2L,   3L,   4L,   5L,   6L,   7L, \
    \  8L,   9L, 10L, 11L, 12L, 13L, 14L, 15L, \n                       16L, 17L,\
    \ 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, \n\
    \                       33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L,\
    \ 44L, 45L, 46L, 47L, 48L, 49L, \n                       50L, 51L, 52L, 53L, 54L,\
    \ 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, \n             \
    \          67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L,\
    \ 81L, 82L, 83L, \n                       84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L,\
    \ 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, \n                       101L,\
    \ 102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L,\
    \ 115L, \n                       116L, 117L, 118L, 119L, 120L, 121L, 122L, 123L,\
    \ 124L, 125L, 126L, 127L, 128L, 129L, 130L, \n                       131L, 132L,\
    \ 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L,\
    \ \n                       146L, 147L, 148L, 149L, 150L, 151L, 152L, 153L, 154L,\
    \ 155L, 156L, 157L, 158L, 159L, 160L, \n                       161L, 162L, 163L,\
    \ 164L, 165L, 166L, 167L, 168L, 169L, 170L, 171L, 172L, 173L, 174L, 175L, \n \
    \                      176L, 177L, 178L, 179L, 180L, 181L, 182L, 183L, 184L, 185L,\
    \ 186L, 187L, 188L, 189L, 190L, \n                       191L, 192L, 193L, 194L,\
    \ 195L, 196L, 197L, 198L, 199L, 200L, 201L, 202L, 203L, 204L, 205L, \n       \
    \                206L, 207L, 208L, 209L, 210L, 211L, 212L, 213L, 214L, 215L, 216L,\
    \ 217L, 218L, 219L, 220L, \n                       221L, 22", "{\n    string[]\
    \ result = new string[grades.length];\n    float sum = 0.0f;\n    for (int i =\
    \ 0; i < grades.length; i++)\n    {\n        sum += grades[i];\n        if (sum\
    \ >= 3.0)\n        {\n            result[i] = \"C+\";\n            sum -= 3.0;\n\
    \        }\n        else if (sum > 2.0)\n        {\n            result[i] = \"\
    C\";\n            sum -= 2.0;\n        }\n        else if (sum > 1.7)\n      \
    \  {\n            result[i] = \"C+\";\n            sum -= 1.7;\n        }\n  \
    \      else if (sum > 1.3)\n        {\n            result[i] = \"B-\";\n     \
    \       sum -= 1.3;\n        }\n        else if (sum > 1.1)\n        {\n     \
    \       result[i] = \"B-\";\n            sum -= 1.1;\n        }\n        else\
    \ if (sum > 0.7)\n        {\n            result[i] = \"B+\";\n            sum\
    \ -= 0.7;\n        }\n        else if (sum > 0.3)\n        {\n            result[i]\
    \ = \"B-\";\n            sum -= 0.3;\n        }\n        else if (sum > 0.0f)\n\
    \        {\n            result[i] = \"B-\";\n            sum -= 0.0f;\n      \
    \  }\n        else\n        {\n            result[i] = \"D-\";\n            sum\
    \ -= 0.0f;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you. but i have not used this in any IDE so i will try to understand\
    \ it.\n<|/ c |>\n<| c |>\ncan you please explain me how this works and also how\
    \ to convert this in C# ?\n<|/ c |>\n<| c |>\nSure thing, I added some comments\
    \ to my answer\n<|/ c |>\n<| a tags=algorithm,c#,arrays |>\nHere is another simple\
    \ way to do it.\n<code>\nusing System;", "{\n    int j;\n    string[] letter_grade\
    \ = new string[grades.Length];\n    for(j=0; j<grades.Length; ++j)\n    {\n  \
    \      if(grades[j] > 3.0)\n        {\n            letter_grade[j] = LetterGrade.A+grades[j];\n\
    \        }\n        else if(grades[j] > 3.7)\n        {\n            letter_grade[j]\
    \ = LetterGrade.A+grades[j] - 0.7;\n        }\n        else if(grades[j] > 3.3)\n\
    \        {\n            letter_grade[j] = LetterGrade.A+grades[j] - 0.3;\n   \
    \     }\n        else if(grades[j] > 2.7)\n        {\n            letter_grade[j]\
    \ = LetterGrade.A+grades[j] - 0.2;\n        }\n        else if(grades[j] > 2.3)\n\
    \        {\n            letter_grade[j] = LetterGrade.A+grades[j] - 0.1;\n   \
    \     }\n        else if(grades[j] > 2.0)\n        {\n            letter_grade[j]\
    \ = LetterGrade.A+grades[j] + 0.1;\n        }\n        else if(grades[j] > 1.7)\n\
    \        {\n            letter_grade[j] = LetterGrade.A+grades[j] + 0.2;\n   \
    \     }\n        else if(grades[j] > 1.3)\n        {\n            letter_grade[j]\
    \ = LetterGrade.A+grades[j] + 0.3;\n        }\n        else if(grades[j] > 1.0)\n\
    \        {\n            letter_grade[j] = LetterGrade.A+grades[j] + 0.4;\n   \
    \     }\n        else if(grades[j] > 0.7)\n        {\n            letter_grade[j]\
    \ = LetterGrade.A+grades[j] + 0.5;\n        }\n        else if(grades[j] > 0.0)\n\
    \        {\n            letter_grade[j] = LetterGrade.A+grades[j] + 0.6;\n   \
    \     }\n        else\n        {\n            letter_grade[j] = LetterGrade.A;\n\
    \        }\n    }\n    return letter_grade;\n}\n/*\n    Problem: \n    Write a\
    \ function that takes two arrays of ints and a float. The function should return\
    \ a boolean indicating whether the arrays have the same number of elements and\
    \ they contain the same elements.\n    Example:\n    >>> array1=[1,2,3]\n    >>>\
    \ array2=[1,2,3,4]\n    >>> array3=[4,5,6]\n    >>> arrays=[array1,array2,array3]\n\
    \    >>> check_arrays(arrays)\n    True\n    \n*/", "{\n   string[] grades_string\
    \ = new string[grades.length];\n   float sum = 0;\n   for (int i = 0; i < grades.length;\
    \ ++i)\n   {\n       grades_string[i] = numerical_grade_display(grades[i]) + \"\
    +\";\n       sum += grades[i];\n   }\n   if (sum > 3.0)\n   {\n       grades_string[grades.length-1]\
    \ = grades_string[grades.length-1].Substring(0, grades_string[grades.length-1].Length-1);\n\
    \       grades_string[grades.length-1] = grades_string[grades.length-1] + \"-\"\
    ;\n   }\n   else\n   {\n       grades_string[grades.length-1] = grades_string[grades.length-1].Substring(0,\
    \ grades_string[grades.length-1].Length-1);\n       grades_string[grades.length-1]\
    \ = \"D+\";\n   }\n   return grades_string;\n}", "{\n    \n    for(int i = 0;\
    \ i < grades.length; i++)\n    {\n        if (grades[i] > 3.0)\n        {\n  \
    \          grades[i] = 'D+';\n        }\n        else if (grades[i] >= 2.0 &&\
    \ grades[i] < 3.0)\n        {\n            grades[i] = 'B-';\n        }\n    \
    \    else if (grades[i] >= 1.7 && grades[i] < 2.0)\n        {\n            grades[i]\
    \ = 'B-';\n        }\n        else if (grades[i] >= 1.0 && grades[i] < 1.7)\n\
    \        {\n            grades[i] = 'C+';\n        }\n        else if (grades[i]\
    \ >= 1.3 && grades[i] < 1.0)\n        {\n            grades[i] = 'C';\n      \
    \  }\n        else if (grades[i] >= 0.7 && grades[i] < 1.3)\n        {\n     \
    \       grades[i] = 'C';\n        }\n        else if (grades[i] >= 0.3 && grades[i]\
    \ < 0.7)\n        {\n            grades[i] = 'B+';\n        }\n        else if\
    \ (grades[i] >= 0.0 && grades[i] < 0.3)\n        {\n            grades[i] = 'B';\n\
    \        }\n        else if (grades[i] >= 0.0 && grades[i] < 0.0)\n        {\n\
    \            grades[i] = 'A+';\n        }\n        else if (grades[i] < 0.0 &&\
    \ grades[i] != 0.0)\n        {\n            grades[i] = 'D';\n        }\n    \
    \    else\n        {\n            grades[i] = 'E';\n        }\n    }\n    return\
    \ grades;\n}", "{\n    string[] result = new string[grades.length];\n    for (int\
    \ i = 0; i < grades.length; i++)\n    {\n        result[i] = std.typecons.grade_map[grades[i]];\n\
    \    }\n    return result;\n}\n/*\nIt is the last week of the semester and the\
    \ teacher has to give the grades\n    to students. The teacher has been making\
    \ her own algorithm for grading.\n    The only problem is, she has lost the code\
    \ she used for grading.\n    She has given you an array of GPAs for some students\
    \ and you have to write \n    a function that can output an array of letter grades\
    \ using the following table:\n             GPA       |    Letter grade\n     \
    \         4.0                A+\n            > 3.7                A \n       \
    \     > 3.3                A- \n            > 3.0                B+\n        \
    \    > 2.7                B \n            > 2.3                B-\n          \
    \  > 2.0                C+\n            > 1.7                C\n            >\
    \ 1.3                C-\n            > 1.0                D+ \n            > 0.7\
    \                D \n            > 0.0                D-\n              0.0  \
    \              E\n    ", "{\n    float total_grade = 0;\n    foreach(float grade\
    \ in grades)\n    {\n        total_grade += grade;\n    }", "{\n    \n    return\
    \ grades.map (grade=> std.algorithm.max(\n                std.algorithm.min(\n\
    \                    std.typecons.max(grade, 0.0), \n                    3.0),\
    \ \n                std.typecons.min(grade, 3.0)))\n                .map (grade=>std.algorithm.max(\n\
    \                        std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n                        std.typecons.min(grade,\
    \ 3.0)))\n                .map(grade=>std.algorithm.max(\n                   \
    \     std.algorithm.min(\n                            std.typecons.max(grade,\
    \ 0.0), \n                            3.0), \n", "{\n    string [] grades_letters\
    \ = {\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"};\n    string [] grades_letters_reversed = new string [4];\n\
    \    int length = grades.length;\n    \n    int i = 0;\n    while (i < length)\n\
    \    {\n        if (grades[i] < 4.0)\n        {\n            grades_letters_reversed[i++]\
    \ = grades_letters[grades[i]];\n        }\n        else\n        {\n         \
    \   grades_letters_reversed[i++] = grades_letters[grades[i]];\n            grades_letters_reversed[i++]\
    \ = \"D-\";\n        }\n    }\n    return grades_letters_reversed;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,c# dscore=0 |>\nHere is another option:\n\
    <code>\nusing System;", "{\n    var grades_strings = new List<string>();\n   \
    \ for (int i = 0; i < grades.Length; i++) {\n        var result = grade_function(grades[i]);\n\
    \        grades_strings.Add(result.ToString());\n    }\n    return grades_strings.ToArray();\n\
    }", "{\n    int i;\n    float gpa, min_gpa;\n    for(i = 0, min_gpa = 0; i < grades.length;\
    \ i++){\n        gpa = grades[i];\n        if(gpa > min_gpa){\n            i =\
    \ grades.length;\n            while (i > 1 && gpa < grades[i - 1]) {\n       \
    \         grades[i - 1] += grades[i - 2];\n                grades[i] -= grades[i\
    \ - 2];\n                i--;\n            }\n        }\n        else if(gpa >\
    \ min_gpa + 0.8) {\n            i = grades.length;\n            while (i > 0 &&\
    \ gpa < grades[i - 1]) {\n                grades[i - 1] -= grades[i - 2];\n  \
    \              grades[i] -= grades[i - 2];\n                i--;\n           \
    \ }\n        }\n        else if(gpa > min_gpa - 0.8) {\n            i = grades.length;\n\
    \            while (i > 0 && gpa > grades[i - 1]) {\n                grades[i\
    \ - 1] += grades[i - 2];\n                grades[i] += grades[i - 2];\n      \
    \          i--;\n            }\n        }\n        else {\n            i = grades.length;\n\
    \        }\n    }\n    string[] grades_result = new string[grades.length];\n \
    \   int k = grades.length - 1;\n    while(k > 0) {\n        grades_result[k] =\
    \ std.typecons.Char(grades[k]) + std.typecons.Char(grades[k - 1]);\n        k--;\n\
    \    }\n    return grades_result;\n}", "{\n    var grades_copy = grades.slice();\n\
    \    var max_gpa = grades.max();\n    grades_copy.sort(function(a, b){return a\
    \ - b});\n    var grades_copy2 = grades_copy.slice(0, 5);\n    \n    grades_copy2.map(function(a){\n\
    \        var gpa_min = grades.reduce(function(a,b){return (a<b)?a:b;});\n    \
    \    return a/gpa_min;\n    });\n    var letter_grades = grades_copy2.map(function(a){\n\
    \        var gpa_min = grades.reduce(function(a,b){return (a<b)?a:b;});\n    \
    \    var letter;\n        if (gpa <= 3.4)\n        {\n            letter = \"\
    A\";\n        }\n        else if (gpa > 3.4 && gpa <= 3.7)\n        {\n      \
    \      letter = \"A+\";\n        }\n        else if (gpa > 3.7 && gpa <= 3.9)\n\
    \        {\n            letter = \"A-\";\n        }\n        else if (gpa > 3.9\
    \ && gpa <= 4)\n        {\n            letter = \"B+\";\n        }\n        else\
    \ if (gpa > 4 && gpa <= 3.5)\n        {\n            letter = \"B\";\n       \
    \ }\n        else if (gpa > 3.5 && gpa <= 3.8)\n        {\n            letter\
    \ = \"B-\";\n        }\n        else if (gpa > 3.8 && gpa <= 4)\n        {\n \
    \           letter = \"C+\";\n        }\n        else if (gpa > 4 && gpa <= 4.0)\n\
    \        {\n            letter = \"C\";\n        }\n        else if (gpa > 4.0\
    \ && gpa <= 4.2)\n        {\n            letter = \"C-\";\n        }\n       \
    \ else if (gpa > 4.2 && gpa <= 4.4)\n        {\n            letter = \"D+\";\n\
    \        }\n        else if (gpa > 4.4 && gpa <= 4.6)\n        {\n           \
    \ letter = \"D\";\n        }\n        else if (gpa > 4.6 && gpa <= 4.8)\n    \
    \    {\n            letter = \"D-\";\n        }\n        else if (gpa > 4.8)\n\
    \        {\n            letter = \"E\";\n        }\n        else\n        {\n\
    \            letter = \"F\";\n        }\n        return letter;\n    });\n   \
    \ \n    return letter_grades;\n}\n</code>\n<|/ a |>\n<| c |>\nWhile I agree that\
    \ the students are expected to give the correct answers, I am struggling to see\
    \ how your answer helps with the assignment. What does it actually do? Why did\
    \ you write it that way? It would be nice if you could explain how it solves the\
    \ problem. Thanks!\n<|/ c |>\n<| c |>\n: ", "{\n    var gradesArray = grades;\n\
    \    var average = gradesArray.reduce((acc, x) => acc + x);\n    var averageExceptZero\
    \ = average;\n    averageExceptZero -= (averageExceptZero < 0f ? 0f : averageExceptZero);\n\
    \    var gpa = gradesArray\n    .map(x => x / averageExceptZero)\n    .filter(x\
    \ => (x > 0f || x != 0f));\n    var letterGrades = new List<string>();\n    foreach\
    \ (var grade in gpa)\n    {\n        double gpa = grade;\n        string gradeLetter\
    \ = LetterGrade.LetterToLetters((grade >= 3.0 ? \"A+\" : ((grade >= 3.3 ? \"A-\"\
    \ : ((grade >= 3.7 ? \"B+\" : ((grade >= 3.3 ? \"B-\" : ((grade >= 2.7 ? \"B\"\
    \ : ((grade >= 2.3 ? \"B-\" : ((grade >= 2.0 ? \"C+\" : ((grade >= 2.3 ? \"C-\"\
    \ : ((grade >= 1.7 ? \"C\" : ((grade >= 1.3 ? \"C-\" : ((grade >= 1.0 ? \"D+\"\
    \ : ((grade >= 0.7 ? \"D\" : ((grade >= 0.0 ? \"D-\" : \"\")))))))))))))))))));\n\
    \        letterGrades.Add(gradeLetter);\n    }\n    return letterGrades.ToArray();\n\
    }", "{\n    int count = 0;\n    string results[5] = \"\";\n    for (int i = 0;\
    \ i < grades.length; i++){\n        float number = grades[i];\n        if (number\
    \ <= 3.0){\n            count ++;\n            results[count] += \"A\";\n    \
    \    }\n        if (number > 3.0 && number <= 3.7){\n            count ++;\n \
    \           results[count] += \"A+\";\n        }\n        if (number > 3.7 &&\
    \ number <= 4.0){\n            count ++;\n            results[count] += \"A-\"\
    ;\n        }\n        if (number > 4.0 && number <= 4.7){\n            count ++;\n\
    \            results[count] += \"B+\";\n        }\n        if (number > 4.7 &&\
    \ number <= 5.0){\n            count ++;\n            results[count] += \"B\"\
    ;\n        }\n        if (number > 5.0 && number <= 5.7){\n            count ++;\n\
    \            results[count] += \"B-\";\n        }\n        if (number > 5.7 &&\
    \ number <= 6.0){\n            count ++;\n            results[count] += \"C+\"\
    ;\n        }\n        if (number > 6.0 && number <= 6.7){\n            count ++;\n\
    \            results[count] += \"C\";\n        }\n        if (number > 6.7 &&\
    \ number <= 7.0){\n            count ++;\n            results[count] += \"C-\"\
    ;\n        }\n        if (number > 7.0 && number <= 7.7){\n            count ++;\n\
    \            results[count] += \"D+\";\n        }\n        if (number > 7.7 &&\
    \ number <= 8.0){\n            count ++;\n            results[count] += \"D\"\
    ;\n        }\n        if (number > 8.0 && number <= 8.7){\n            count ++;\n\
    \            results[count] += \"D-\";\n        }\n        if (number > 8.7 &&\
    \ number <= 9.0){\n            count ++;\n            results[count] += \"E\"\
    ;\n        }\n        if (number > 9.0 && number <= 9.7){\n            count ++;\n\
    \            results[count] += \"F\";\n        }\n        if (number > 9.7){\n\
    \            results[count] += \"F\";\n        }\n    }\n    return results; \n\
    }\n</code>\n<|/ q dscore=1 |>\n<| c |>\nHave you tried debugging? It's easier\
    \ than you think. Look at the value of `count`, then look at all the `results`\
    \ and see if those values are the way you expect them.\n<|/ c |>\n<| c |>\nYes,\
    \ the function works perfectly when given the same grades for the first two tests.\
    \ After that the results for the first two test are correct, but the results given\
    \ for the next two test are incorrect. Also, it would be nice if someone could\
    \ give ", "{\n   //your code goes here\n}\n</code>\nThe code above is just an\
    \ example on how you can do this. It's not the best algorithm to grade the students\
    \ but I hope you get the idea of how it works.\nHope I helped!\n<|/ a tags=c#\
    \ |>\n<| c |>\nThanks for the help!  I was able to get it to do exactly what I\
    \ wanted :)\n<|/ c |>\n<| c |>\nYou are welcome! I'm glad I could help you out!\
    \ If you feel like my answer was helpful, please don't forget to mark it as an\
    \ answer :)\n<|/ c |>\n<| c |>\nI do have one question though.  In order for it\
    \ to do exactly what I wanted it seems like my teacher wanted the letters to correspond\
    \ to the number in the array.  When I run the code as you wrote it out it seems\
    \ like the letters are all \"A\" and I can't figure out why.  Any suggestions?\n\
    <|/ c |>\n<| c |>\nHey! Sorry, I forgot to mention that you have to sort the array\
    \ first before you run this algorithm. The sorting part is done for you by the\
    \ sorting method. The only thing left to do is to return the letter array with\
    \ the grade from your function to the main. I'm gonna edit the code so you see\
    \ how to do that\n<|/ c |>\n<| c |>\nNo problem! Let me know if it worked!\n<|/\
    \ c |>\n<| a |>\nThis is my code\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "{\n \
    \   if (grades == null) throw new ArgumentNullException(\"grades\");\n    if (grades.Length\
    \ == 0) throw new ArgumentException(\"Grades array is empty!\", \"grades\");",
  "{\n    int grades_size = grades.length;\n    \n    if (grades_size != 5)\n    \
    \    return null;\n    \n    bool higher_than_zero = true;\n    \n    bool is_too_low_for_grade\
    \ = grades[0] < 0.0f;\n    \n    bool is_too_high_for_grade = grades[4] > 4.0f;\n\
    \    \n    float sum = 0;\n    \n    for (int i = 0; i < grades_size; i++)\n \
    \   {\n        if (grades[i] < 0f)\n        {\n            higher_than_zero =\
    \ false;\n            \n            if (is_too_low_for_grade)\n              \
    \  grades[i] = 0.0f;\n            \n            continue;\n        }\n       \
    \ \n        float temp = grades[i];\n        \n        sum += temp;\n        \n\
    \        if (sum >= 3.7f)\n        {\n            grades[i] = 4.0f;\n        \
    \    \n            if (is_too_high_for_grade)\n                grades[i] = 4.0f;\n\
    \        }\n        else if (sum >= 3.3f)\n        {\n            grades[i] =\
    \ 3.7f;\n            \n            if (is_too_high_for_grade)\n              \
    \  grades[i] = 3.7f;\n        }\n        else if (sum >= 3.0f)\n        {\n  \
    \          grades[i] = 3.3f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 3.3f;\n        }\n        else if (sum >= 2.7f)\n\
    \        {\n            grades[i] = 3.7f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 3.7f;\n        }\n        else if (sum >= 2.3f)\n\
    \        {\n            grades[i] = 3.3f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 3.3f;\n        }\n        else if (sum >= 2.0f)\n\
    \        {\n            grades[i] = 2.7f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.7f;\n        }\n        else if (sum >= 1.7f)\n\
    \        {\n            grades[i] = 2.7f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.7f;\n        }\n        else if (sum >= 1.3f)\n\
    \        {\n            grades[i] = 2.3f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.3f;\n        }\n        else if (sum >= 1.0f)\n\
    \        {\n            grades[i] = 2.7f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.7f;\n        }\n        else if (sum >= 0.7f)\n\
    \        {\n            grades[i] = 2.7f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.7f;\n        }\n        else if (sum >= 0.0f)\n\
    \        {\n            grades[i] = 2.0f;\n            \n            if (is_too_high_for_grade)\n\
    \                grades[i] = 2.0f;\n", "{\n    return grade_equation( grades ).ToArray();\n\
    }", "{\n    string result = \"\";\n    for(int i=0;i<grades.length;i++)\n    {\n\
    \        float grade =  grades[i];\n        bool is_greater_than_zero = grade\
    \ > 0;\n        bool is_less_than_four = grade < 4.0;\n        if(is_greater_than_zero\
    \ && is_less_than_four)\n        {\n            result = \"A+\";\n        }\n\
    \        else if(is_greater_than_zero && !is_less_than_four)\n        {\n    \
    \        result = \"A\";\n        }\n        else if(!is_greater_than_zero &&\
    \ is_less_than_four)\n        {\n            result = \"B+\";\n        }\n   \
    \     else if(!is_greater_than_zero && !is_less_than_four)\n        {\n      \
    \      result = \"B\";\n        }\n        else if(!is_greater_than_zero && is_less_than_four\
    \ && is_less_than_four)\n        {\n            result = \"C+\";\n        }\n\
    \        else if(!is_greater_than_zero && !is_less_than_four && is_less_than_four)\n\
    \        {\n            result = \"C\";\n        }\n        else if(!is_greater_than_zero\
    \ && !is_less_than_four)\n        {\n            result = \"D+\";\n        }\n\
    \        else\n        {\n            result = \"D\";\n        }\n    }\n    return\
    \ result;\n}", "{\n    int len= grades.Length;\n    string[] grades_array= new\
    \ string[len];\n    char letter_grade;\n    int index;\n    \n    for(int i=0;i<len;i++)\n\
    \    {\n        if(grades[i]>0 && grades[i]<=1.7)\n        {\n            letter_grade=\
    \ 'A';\n        }\n        else if(grades[i]>=1.7 && grades[i]<=1.3)\n       \
    \ {\n            letter_grade= 'A+';\n        }\n        else if(grades[i]>=1.3\
    \ && grades[i]<=1.0)\n        {\n            letter_grade= 'B+';\n        }\n\
    \        else if(grades[i]>=1 && grades[i]<=2.7)\n        {\n            letter_grade=\
    \ 'B';\n        }\n        else if(grades[i]>=2.7 && grades[i]<=2.3)\n       \
    \ {\n            letter_grade= 'B-';\n        }\n        else if(grades[i]>=2.3\
    \ && grades[i]<=2.0)\n        {\n            letter_grade= 'C+';\n        }\n\
    \        else if(grades[i]>=2.0 && grades[i]<=2.7)\n        {\n            letter_grade=\
    \ 'C';\n        }\n        else if(grades[i]>=2.7 && grades[i]<=3.0)\n       \
    \ {\n            letter_grade= 'C-';\n        }\n        else if(grades[i]>=3.0\
    \ && grades[i]<=3.7)\n        {\n            letter_grade= 'D+';\n        }\n\
    \        else if(grades[i]>=3.7 && grades[i]<=3.3)\n        {\n            letter_grade=\
    \ 'D';\n        }\n        else if(grades[i]>=3.3 && grades[i]<=3.0)\n       \
    \ {\n            letter_grade= 'D-';\n        }\n        else if(grades[i]>=3.0\
    \ && grades[i]<=4.0)\n        {\n            letter_grade= 'E';\n        }\n \
    \       else\n        {\n            letter_grade= 'E';\n        }\n        grades_array[i]=\
    \ letter_grade;\n    }\n    return grades_array;\n}\n</code>\n}\n<|/ a dscore=2\
    \ |>\n<| c |>\nPlease add an explanation as to what your code does. Code only\
    \ answers are not generally helpful.\n<|/ c |>\n<| c |>\nI did not downvote this,\
    \ but you should probably add some comments to explain what the code does.\n<|/\
    \ c |>\n<| c |>\nI disagree: it's a clear solution, no comments to explain anything.\
    \ Also, don't use \"array\", \"len\", \"i\" as variables. It's a bad habit.\n\
    <|/ c |>\n<| c |>\nThanks for your feedback. I added the comments. I changed those\
    \ names to \"a\",\"b", "{\n    if (grades.Length < 3) \n        return null;\n\
    \    string letterGrade = string.Empty;\n    float averageGrade = grades.Average();\n\
    \    foreach (float gp in grades) \n    {\n        switch (gp)\n        {\n  \
    \          case 4.0: \n                letterGrade += \"A+\";\n              \
    \  break;\n            case 3.7:\n                letterGrade += \"A\";\n    \
    \            break;\n            case 3.3:\n                letterGrade += \"\
    A-\";\n                break;\n            case 3.0:\n                letterGrade\
    \ += \"B+\";\n                break;\n            case 2.7:\n                letterGrade\
    \ += \"B\";\n                break;\n            case 2.3:\n                letterGrade\
    \ += \"B-\";\n                break;\n            case 2.0:\n                letterGrade\
    \ += \"C+\";\n                break;\n            case 1.7:\n                letterGrade\
    \ += \"C\";\n                break;\n            case 1.3:\n                letterGrade\
    \ += \"C-\";\n                break;\n            case 1.0:\n                letterGrade\
    \ += \"D+\";\n                break;\n            case 0.7:\n                letterGrade\
    \ += \"D\";\n                break;\n            case 0.0:\n                letterGrade\
    \ += \"D-\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return letterGrade;\n}\n</code>\n}\n<|/ a tags=c# |>\n\
    <| c |>\nThe OP wants the function to work with the array of floats she gave him,\
    \ so it should be a parameter of the function.\n<|/ c |>\n<| a dscore=1 tags=c#\
    \ |>\nThe function should probably take an array of floats as input parameter,\
    \ and return an array of strings.\nHere is a simple example:\n<code>\nstatic string[]\
    \ GetLetterGrades(float[] grades)\n{\n    var letters = new List<string>();\n\
    \    foreach (float grade in grades)\n    {\n        switch (grade)\n        {\n\
    \            case 4.0: letters.Add(\"A+\"); break;\n            case 3.7: letters.Add(\"\
    A\"); break;\n            case 3.3: letters.Add(\"A-\"); break;\n            case\
    \ 3.0: letters.Add(\"B+\"); break;\n            case 2.7: letters.Add(\"B\");\
    \ break;\n            case 2.3: letters.Add(\"B-\"); break;\n            case\
    \ 2.0: letters.Add(\"C+\"); break;\n            case 1.7: letters.Add(\"C\");\
    \ break;\n            case 1.3: letters.Add(\"C-\"); break;\n            case\
    \ 1.0: letters.Add(\"D+\"); break;\n            case 0.7: letters.Add(\"D\");\
    \ break;\n            case 0.0: letters.Add(\"D-\"); break;\n            default:\
    \ letters.Add(\"E\");\n        }\n    }\n    return ", "{\n    if (grades.length\
    \ == 0) \n    {\n        return new string[0];\n    }\n    \n    int index = 0;\n\
    \    \n    //If GPA is less than or equal to 4.0\n    //return \"A+\"\n    if\
    \ (grades[0] >= 4.0F) \n    {\n        index += 1;\n        return new string[index]\
    \ { \"A+\" };\n    }", "{\n    string lettergrade = \"A-\";\n    for(int i = 0;\
    \ i < grades.length; i++)\n    {\n        if(grades[i] > 0 && (grades[i] < 3.0\
    \ || grades[i] > 3.5))\n            lettergrade += \"B+\";\n        else if(grades[i]\
    \ > 3.5 && grades[i] < 5.0)\n            lettergrade += \"B\";\n        else if(grades[i]\
    \ > 5.0 && grades[i] < 7.0)\n            lettergrade += \"B-\";\n        else\
    \ if(grades[i] > 7.0)\n            lettergrade += \"C+\";\n        else if(grades[i]\
    \ < 3.0)\n            lettergrade += \"C\";\n        else if(grades[i] < 5.0)\n\
    \            lettergrade += \"C-\";\n        else if(grades[i] < 7.0)\n      \
    \      lettergrade += \"D+\";\n        else if(grades[i] < 8.0)\n            lettergrade\
    \ += \"D\";\n        else\n            lettergrade += \"D-\";\n    }\n    return\
    \ lettergrade;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nA simple function will\
    \ do\n<code>\ndef grade(grades):\n    grades.sort(reverse=True)\n    if grades[0]\
    \ >= 3.0:\n        grades.insert(0, 'A')\n    if grades[len(grades) - 1] >= 3.5:\n\
    \        grades.append('D')\n    return grades\n</code>\n<|/ a dscore=0 tags=python\
    \ |>\n<| a tags=python |>\nYou can use the following function:\n<code>\ndef grade(grades):\n\
    \    grades.sort()\n    if grades[0] >= 3.0:\n        grades.insert(0, 'A')\n\
    \    if grades[len(grades) - 1] >= 3.5:\n        grades.append('D')\n    return\
    \ grades\n</code>\n<|/ a dscore=0 |>\n<| a tags=python |>\nYou can try this code:\n\
    <code>\ndef grade(grades):\n    grades.sort()\n    if grades[0] >= 3.0:\n    \
    \    grades.insert(0, 'A')\n    if grades[len(grades) - 1] >= 3.5:\n        grades.append('D')\n\
    \    return grades\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nTry this:\n\
    <code>\ndef grade(arr):\n    grades = ['A','A+','B','B+','C','C+','D','D+','F','F+','G','G+','F-','F','F-','G-','G','G-']\n\
    \    letterGrade = []\n    for i in grades:\n        if arr[0] >= 3.0:\n     \
    \       letterGrade.append(i)\n        else:\n            letterGrade.append(",
  "{\n    int N = grades.Length;\n    string[] result = new string[N];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        result[i] = std.string.format(\"%+.2f\",\
    \ grades[i]);\n    }\n    return result;\n}\n/*\nYou are given a float array with\
    \ the GPAs for some students.\nWrite a function that can output an array of letter\
    \ grades using the following table:\n             GPA       |    Letter grade\n\
    \              4.0                A+\n            > 3.7                A \n  \
    \          > 3.3                A- \n            > 3.0                B+\n   \
    \         > 2.7                B \n            > 2.3                B-\n     \
    \       > 2.0                C+\n            > 1.7                C\n        \
    \    > 1.3                C-\n            > 1.0                D+ \n         \
    \   > 0.7                D \n            > 0.0                D-\n           \
    \   0.0                E\n    ", "{\n    char letterGrade = 'E';\n    float sum\
    \ = 0;\n    for(int i = 0; i < grades.length; i++)\n    {\n        sum += grades[i];\n\
    \    }\n    if(sum > 5.0) letterGrade = 'D-';\n    if(sum > 3.0) letterGrade =\
    \ 'C-';\n    if(sum > 2.0) letterGrade = 'B-';\n    if(sum > 1.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.7) letterGrade = 'B-';\n    if(sum > 0.6) letterGrade\
    \ = 'B-';\n    if(sum > 0.5) letterGrade = 'B-';\n    if(sum > 0.4) letterGrade\
    \ = 'B-';\n    if(sum > 0.3) letterGrade = 'B-';\n    if(sum > 0.2) letterGrade\
    \ = 'B-';\n    if(sum > 0.1) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';\n    if(sum > 0.0) letterGrade = 'B-';\n    if(sum > 0.0) letterGrade\
    \ = 'B-';", "{\n    float sum = 0;\n    float avg = grades.sum()/grades.lenght;\n\
    \    for(int i = 0; i < grades.length; ++i) \n        sum += (grades[i]-avg)*(grades[i]-avg);\n\
    \    float divisor = grades.lenght*grades.lenght*grades.lenght;\n    string[]\
    \ grades_string = new string[grades.lenght];\n    for(int i = 0; i < grades.lenght;\
    \ ++i) \n    {\n        if(divisor!=0) \n            grades_string[i] = 'D';\n\
    \        else\n        {\n            if(i==0)\n                grades_string[i]\
    \ = 'E';\n            else if(sum<=2*divisor)\n                grades_string[i]\
    \ = 'D+';\n            else if(sum>2*divisor && sum<=3*divisor)\n            \
    \    grades_string[i] = 'D';\n            else if(sum>3*divisor && sum<=4*divisor)\n\
    \                grades_string[i] = 'D-';\n            else if(sum>4*divisor &&\
    \ sum<=5*divisor)\n                grades_string[i] = 'C+';\n            else\
    \ if(sum>5*divisor && sum<=6*divisor)\n                grades_string[i] = 'C';\n\
    \            else if(sum>6*divisor && sum<=7*divisor)\n                grades_string[i]\
    \ = 'C-';\n            else if(sum>7*divisor && sum<=8*divisor)\n            \
    \    grades_string[i] = 'B+';\n            else if(sum>8*divisor && sum<=9*divisor)\n\
    \                grades_string[i] = 'B';\n            else if(sum>9*divisor &&\
    \ sum<=10*divisor)\n                grades_string[i] = 'B-';\n            else\
    \ if(sum>10*divisor)\n                grades_string[i] = 'A+';\n        }\n  \
    \  }\n    return grades_string;\n}\n</code>\nIt worked for me:\n<code>\n[std.math,\
    \ std.typecons]", "{\n    float temp_sum = 0;\n    float average = 0;\n    float[]\
    \ grades_copy = new float[grades.length];\n    for(int i = 0; i < grades.length;\
    \ i++)\n    {\n        temp_sum += grades[i];\n    }\n    average = temp_sum /\
    \ grades.length;\n    for(int i = 0; i < grades.length; i++)\n    {\n        if(grades[i]\
    \ > average)\n        {\n            grades_copy[i] = grades[i] + 3.0;\n     \
    \   }\n        else if (grades[i] < average)\n        {\n            grades_copy[i]\
    \ = grades[i] - 3.0;\n        }\n        else\n        {\n            grades_copy[i]\
    \ = grades[i] + 2.0;\n        }\n    }\n    return std.typecons.map((float[])\
    \ grades_copy, (float[]) grades);\n}", "{\n    List<string> res = new List<string>();\n\
    \    var len = grades.Length;\n    \n    double sumOfGrade = accumulate(grades,\
    \ (double a) => a + 1.0).sum;\n    double averageOfGrade = sumOfGrade / len;\n\
    \    var letterGrades = new string[len];\n    var i = 0;\n    \n    foreach (var\
    \ grade in grades)\n    {\n        if (grade >= averageOfGrade)\n            letterGrades[i]\
    \ = \"A+\";\n        else if (grade < averageOfGrade)\n        {\n           \
    \ letterGrades[i] = \"A\";\n            i++;\n        }\n        else if (grade\
    \ <= averageOfGrade - 0.05)\n            letterGrades[i] = \"A-\";\n        else\
    \ if (grade <= averageOfGrade + 0.05)\n            letterGrades[i] = \"B+\";\n\
    \        else if (grade <= averageOfGrade + 0.15)\n            letterGrades[i]\
    \ = \"B\";\n        else if (grade <= averageOfGrade + 0.2)\n            letterGrades[i]\
    \ = \"B-\";\n        else if (grade <= averageOfGrade + 0.25)\n            letterGrades[i]\
    \ = \"C+\";\n        else if (grade <= averageOfGrade + 0.3)\n            letterGrades[i]\
    \ = \"C\";\n        else if (grade <= averageOfGrade + 0.35)\n            letterGrades[i]\
    \ = \"C-\";\n        else if (grade <= averageOfGrade + 0.4)\n            letterGrades[i]\
    \ = \"D+\";\n        else if (grade <= averageOfGrade + 0.45)\n            letterGrades[i]\
    \ = \"D\";\n        else if (grade <= averageOfGrade + 0.50)\n            letterGrades[i]\
    \ = \"D-\";\n        else\n            letterGrades[i] = \"E\";\n        i++;\n\
    \    }\n    return letterGrades.ToArray();\n}\n</code>\n<|/ a dscore=2 tags=c#\
    \ |>\n<| a tags=c# |>\nAs I see, you don't have to use recursion.\nIn fact, there\
    \ are a lot of ways to solve your problem.\nI suggest you to use a simple loop:\n\
    <code>\nstring[] grades = { \"4.0\", \"3.7\", \"3.3\", \"3.0\", \"2.7\", \"2.3\"\
    , \"2.0\", \"1.7\", \"1.3\" };\ndouble average = accumulate(grades, (d) => d +\
    \ 1.0).sum / grades.Length;", "{\n    int N = grades.length;\n    char letter_grades[N];",
  "{\n    std.typecons.DArray<double> grades_array = new std.typecons.DArray<double>(grades,\
    \ std.typecons.DArray.__sizeof__<double>());\n    std.math.Vector<double> mean\
    \ = new std.math.Vector<double>();\n    \n    std.typecons.DArray<double> grade_array\
    \ = new std.typecons.DArray<double>(grades_array, \n                         \
    \                                              grades_array.size(), \n       \
    \                                                                std.typecons.DArray.__sizeof__<double>());\n\
    \    \n    std.math.Vector<double> sum_of_grades = new std.math.Vector<double>();\n\
    \    std.math.Vector<double> letter_grades = new std.math.Vector<double>(grades_array,\
    \ \n                                                                         grades_array.size(),\
    \ \n                                                                         std.typecons.DArray.__sizeof__<double>());\n\
    \    \n    int num_grades = grades_array.size();\n    \n    for (int i = 0; i\
    \ < num_grades; i++)\n    {\n        grade_array[i] = grades_array[i];\n    }\n\
    \    \n    for (int i = 0; i < num_grades; i++)\n    {\n        mean.add(grade_array[i]);\n\
    \    }\n    \n    for (int i = 0; i < num_grades; i++)\n    {\n        letter_grades[i]\
    \ = std.math.min(letter_grades[i], mean[i]);\n    }\n    \n    std.typecons.DArray<double>\
    \ letter_grades_array = new std.typecons.DArray<double>(letter_grades, \n    \
    \                                                                     grades_array.size(),\
    \ \n                                                                         std.typecons.DArray.__sizeof__<double>());\n\
    \    \n    return std.string.list2string(std.string.list2string(std.string.list2string(letter_grades_array,\
    \ \"+-\", \":\")));\n}\n</code>\n<|/ a tags=arrays,c++,algorithm,function,performance\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/13562774)\n<|/ c |>\n<| c |>\nI think it is\
    \ an answer. I can see how one might think this is too complex for a SO post,\
    \ but it is actually very simple and does exactly what was asked. While I am not\
    \ a fan of complex answers sometimes people come up with them when they aren't\
    \ sure how to solve the question. So I made a solution that is simple and works\
    \ well. The authors who answered the question deserve credit. Also, the ", "{\n\
    \    int n = grades.length;\n    string[] letters = new string[n];\n    float[]\
    \ gpa = new float[n];\n    for(int i = 0; i < n; i++)\n    {\n        gpa[i] =\
    \ grades[i];\n    }\n    sort(gpa);\n    float mid = length(gpa) / 2;\n    for(int\
    \ i = 0; i < n - 1; i++)\n    {\n        if(gpa[i] < gpa[mid])\n        {\n  \
    \          letters[i] = \"A+\";\n        }\n        else if(gpa[i] > gpa[mid])\n\
    \        {\n            letters[i] = \"A-\";\n        }\n        else\n      \
    \  {\n            letters[i] = \"B+\";\n        }\n    }\n    return letters;\n\
    }\n</code>\n<|/ a dscore=1 tags=arrays,java |>\n<| c |>\nCan you explain what\
    \ sort(gpa) does?\n<|/ c |>\n<| c |>\nsort(gpa) sorts the GPA from highest to\
    \ lowest. \nsort(gpa ,true)\nsorts the GPA from lowest to highest. \nThe boolean\
    \ parameter specifies ascending order or descending order. \nYou might want to\
    \ check this out: https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html\n\
    <|/ c |>\n<| c |>\ncan you also explain why you used else if rather than if statement?\
    \ why do we need the else if?\n<|/ c |>\n<| c |>\nelse if will take care of situation\
    \ when there are equal or more than one grade between lowest and highest. Highest\
    \ and lowest grade have grade as 0.0\n<|/ c |>\n<| a tags=arrays,java |>\nIf you\
    \ need a more generic and flexible solution, use TreeMap. The TreeMap is basically\
    \ a binary search tree which is sorted in the descending order. The grade is taken\
    \ as key and the index as value, and if you try to find the grade which is already\
    \ present as key, it will return the index, otherwise, it'll return the new index.\
    \ \n<code>\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport\
    \ java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;", "{\n   \
    \ int[] result = new int[grades.length];\n    for (int i = 0; i < grades.length;\
    \ i++)\n    {\n        if (grades[i] > 3.0 || grades[i] < 0.0)\n            result[i]\
    \ = 'D-';\n        else if (grades[i] > 2.7 && grades[i] < 3.0)\n            result[i]\
    \ = 'B+';\n        else if (grades[i] > 2.3 && grades[i] < 2.7)\n            result[i]\
    \ = 'B-';\n        else if (grades[i] > 2.0 && grades[i] < 2.3)\n            result[i]\
    \ = 'B';\n        else if (grades[i] > 1.70 && grades[i] < 2.0)\n            result[i]\
    \ = 'C+';\n        else if (grades[i] > 1.33 && grades[i] < 1.7)\n           \
    \ result[i] = 'C';\n        else if (grades[i] > 1.0 && grades[i] < 1.33)\n  \
    \          result[i] = 'C';\n        else if (grades[i] > 0.70 && grades[i] <\
    \ 1.0)\n            result[i] = 'C';\n        else if (grades[i] > 0.0 && grades[i]\
    \ < 0.70)\n            result[i] = 'C';\n        else if (grades[i] > -3.0)\n\
    \            result[i] = 'A-';\n        else if (grades[i] > -2.7)\n         \
    \   result[i] = 'A-';\n        else if (grades[i] > -2.3)\n            result[i]\
    \ = 'A-';\n        else if (grades[i] > -2.0)\n            result[i] = 'A-';\n\
    \        else if (grades[i] > -1.70)\n            result[i] = 'A-';\n        else\
    \ if (grades[i] > -1.33)\n            result[i] = 'A-';\n        else if (grades[i]\
    \ > -1.0)\n            result[i] = 'A-';\n        else if (grades[i] > -0.70)\n\
    \            result[i] = 'A-';\n        else if (grades[i] > -0.0)\n         \
    \   result[i] = 'A-';\n        else if (grades[i] > -3.0)\n            result[i]\
    \ = 'A-';\n        else\n            result[i] = 'A+';\n    }\n    return new\
    \ string[result.length];\n}", "{\n    foreach (float grade in grades)\n    {\n\
    \        switch (grade)\n        {\n            case 4: case 3: case 2: case 1:\
    \ case 0: break;\n            case 1.5: case 2: case 1: case 0: break;\n     \
    \       case 2: case 1.5: case 1: case 0: break;\n            case 3: case 2:\
    \ case 1.5: case 1: case 0: break;\n            case 4: case 3: case 2: case 1.5:\
    \ case 1: case 0: break;\n            case 5: case 3: case 2: case 1.5: case 1:\
    \ case 0: break;\n            case 6: case 3: case 2: case 1.5: case 1: case 0:\
    \ break;\n            case 7: case 3: case 2: case 1.5: case 1: case 0: break;\n\
    \            case 8: case 3: case 2: case 1.5: case 1: case 0: break;\n      \
    \      case 9: case 3: case 2: case 1.5: case 1: case 0: break;\n            case\
    \ 10: case 3: case 2: case 1.5: case 1: case 0: break;\n            case 11: case\
    \ 3: case 2: case 1.5: case 1: case 0: break;\n            case 12: case 3: case\
    \ 2: case 1.5: case 1: case 0: break;\n            case 13: case 3: case 2: case\
    \ 1.5: case 1: case 0: break;\n            case 14: case 3: case 2: case 1.5:\
    \ case 1: case 0: break;\n            case 15: case 3: case 2: case 1.5: case\
    \ 1: case 0: break;\n            case 16: case 3: case 2: case 1.5: case 1: case\
    \ 0: break;\n            case 17: case 3: case 2: case 1.5: case 1: case 0: break;\n\
    \            case 18: case 3: case 2: case 1.5: case 1: case 0: break;\n     \
    \       case 19: case 3: case 2: case 1.5: case 1: case 0: break;\n          \
    \  case 20: case 3: case 2: case 1.5: case 1: case 0: break;\n            case\
    \ 21: case 3: case 2: case 1.5: case 1: case 0: break;\n            case 22: case\
    \ 3: case 2: case 1.5: case 1: case 0: break;\n            case 23: case 3: case\
    \ 2: case 1.5: case 1: case 0: break;\n            case 24: case 3: case 2: case\
    \ 1.5: case 1: case 0: break;\n            case 25: case 3: case 2: case 1.5:\
    \ case 1: case 0: break;\n            case 26: case 3: case 2: case 1.5: case\
    \ 1: case 0: break;\n            case 27: case 3: case 2: case 1.5: case 1: case\
    \ 0: break;\n            case 28: case 3: case 2: case 1.5: case 1: case 0: break;\n\
    \            case 29: case 3: case 2: case 1.5: case 1: case 0: break;\n     \
    \       case 30: case 3: case 2: case 1.5: case 1: case 0: break;\n          \
    \  case 31: case 3: case 2: case 1.5: case 1: case 0: break;", "{\n    int i;\n\
    \    float gpa = 0;\n    string[] letter_grades = new string[grades.Length];\n\
    \    for (i = 0; i < grades.Length; i++)\n    {\n        gpa = grades[i];\n  \
    \      switch (gpa)\n        {\n            case (4.0F):\n                letter_grades[i]\
    \ = \"A+\";\n                break;\n            case (3.7F):\n              \
    \  letter_grades[i] = \"A\";\n                break;\n            case (3.3F):\n\
    \                letter_grades[i] = \"A-\";\n                break;\n        \
    \    case (3.0F):\n                letter_grades[i] = \"B+\";\n              \
    \  break;\n            case (2.7F):\n                letter_grades[i] = \"B\"\
    ;\n                break;\n            case (2.3F):\n                letter_grades[i]\
    \ = \"B-\";\n                break;\n            case (2.0F):\n              \
    \  letter_grades[i] = \"C+\";\n                break;\n            case (1.7F):\n\
    \                letter_grades[i] = \"C\";\n                break;\n         \
    \   case (1.3F):\n                letter_grades[i] = \"C-\";\n               \
    \ break;\n            case (1.0F):\n                letter_grades[i] = \"D+\"\
    ;\n                break;\n            case (0.7F):\n                letter_grades[i]\
    \ = \"D\";\n                break;\n            case (0.0F):\n               \
    \ letter_grades[i] = \"D-\";\n                break;\n            case (0.0F):\n\
    \                letter_grades[i] = \"E\";\n                break;\n        }\n\
    \    }\n    return letter_grades;\n}", "{\n    string[] result = new string[grades.Length];",
  "{\n    string lettergrade = \"\";\n    if (grades[4] > 3.7)\n    {\n        if\
    \ (grades[4] - 3.7 > 3.3)\n        {\n            if (grades[4] - 3.3 > 3.0)\n\
    \            {\n                if (grades[4] - 3.0 > 2.7)\n                {\n\
    \                    if (grades[4] - 2.7 > 2.3)\n                    {\n     \
    \                   if (grades[4] - 2.3 > 2.0)\n                        {\n  \
    \                          if (grades[4] - 2.0 > 1.7)\n                      \
    \      {\n                                if (grades[4] - 1.7 > 1.3)\n       \
    \                         {\n                                    if (grades[4]\
    \ - 1.3 > 1.0)\n                                    {\n                      \
    \                  if (grades[4] - 1.0 > 0.7)\n                              \
    \          {\n                                            if (grades[4] - 0.7\
    \ > 0.0)\n                                            {\n                    \
    \                            lettergrade = \"D+\";\n                         \
    \                   }\n                                            else\n    \
    \                                        {\n                                 \
    \               lettergrade = \"D\";\n                                       \
    \     }\n                                        }\n                         \
    \               else\n                                        {\n            \
    \                                lettergrade = \"C+\";\n                     \
    \                   }\n                                    }\n               \
    \                     else\n                                    {\n          \
    \                              lettergrade = \"C\";\n                        \
    \            }\n                                }\n                          \
    \      else\n                                {\n                             \
    \       lettergrade = \"B-\";\n                                }\n           \
    \                 }\n                            else\n                      \
    \      {\n                                lettergrade = \"B\";\n             \
    \               }\n                        }\n                        else\n \
    \                       {\n                            lettergrade = \"B-\";\n\
    \                        }\n                    }\n                    else\n\
    \                    {\n                        lettergrade = \"B-\";\n      \
    \              }\n                }\n                else\n                {\n\
    \                    lettergrade = \"B-\";\n                }\n            }\n\
    \            else\n            {\n                lettergrade = \"B-\";\n    \
    \        }\n        }\n        else\n        {\n            lettergrade = \"B-\"\
    ;\n        }\n    }\n    else\n    {\n        lettergrade = \"B-\";\n    }\n \
    \   return lettergrade;\n}", "{\n    float totalGrade = 0;\n    for (int i = 0;\
    \ i < grades.Length; i++)\n    {\n        float currentGrade = grades[i];\n  \
    \      if (currentGrade >= 0 && currentGrade < 4)\n        {\n            totalGrade\
    \ = totalGrade + currentGrade;\n        }\n        else if (currentGrade > 3.7\
    \ && currentGrade <= 3.3)\n        {\n            totalGrade = totalGrade + 1;\n\
    \        }\n        else if (currentGrade > 3.3 && currentGrade <= 3.0)\n    \
    \    {\n            totalGrade = totalGrade - 1;\n        }\n        else if (currentGrade\
    \ > 2.7 && currentGrade <= 2.3)\n        {\n            totalGrade = totalGrade\
    \ + 2;\n        }\n        else if (currentGrade > 2.3 && currentGrade <= 2.0)\n\
    \        {\n            totalGrade = totalGrade - 2;\n        }\n        else\
    \ if (currentGrade > 1.7 && currentGrade <= 1.7)\n        {\n            totalGrade\
    \ = totalGrade + 3;\n        }\n        else if (currentGrade > 1.3 && currentGrade\
    \ <= 1.0)\n        {\n            totalGrade = totalGrade - 3;\n        }\n  \
    \      else if (currentGrade > 0.7 && currentGrade <= 0.7)\n        {\n      \
    \      totalGrade = totalGrade + 4;\n        }\n        else if (currentGrade\
    \ <= 0.0)\n        {\n            totalGrade = totalGrade - 4;\n        }\n  \
    \  }\n    string[] results = new string[totalGrade];\n    int count = 0;\n   \
    \ for (int i = 0; i < grades.Length; i++)\n    {\n        float currentGrade =\
    \ grades[i];\n        if (currentGrade >= 0 && currentGrade < 4)\n        {\n\
    \            results[count] = \"A+\";\n        }\n        else if (currentGrade\
    \ > 3.7 && currentGrade <= 3.3)\n        {\n            results[count] = \"A\"\
    ;\n        }\n        else if (currentGrade > 3.3 && currentGrade <= 3.0)\n  \
    \      {\n            results[count] = \"A-\";\n        }\n        else if (currentGrade\
    \ > 2.7 && currentGrade <= 2.3)\n        {\n            results[count] = \"B+\"\
    ;\n        }\n        else if (currentGrade > 2.3 && currentGrade <= 2.0)\n  \
    \      {\n            results[count] = \"B\";\n        }\n        else if (currentGrade\
    \ > 1.7 && currentGrade <= 1.7)\n        {\n            results[count] = \"B-\"\
    ;\n        }\n        else if (currentGrade > 1.3 && currentGrade <= 1.0)\n  \
    \      {\n            results[count] = \"C+\";\n        }\n        else if (currentGrade\
    \ > 0.7 && currentGrade <= ", "{\n    int counter = 0;\n    for (int i = 0; i\
    \ < grades.length; i++)\n    {\n        float tempGrade = grades[i];\n       \
    \ int gradeIndex = 0;\n        for (int j = 1; j < grades.length; j++)\n     \
    \   {\n            if (grades[j] <= tempGrade)\n            {\n              \
    \  gradeIndex = j;\n            }\n            else\n            {\n         \
    \       break;\n            }\n        }\n        if (gradeIndex == grades.length\
    \ - 1)\n        {\n            if (tempGrade < grades[gradeIndex])\n         \
    \   {\n                counter++;\n            }\n            else if (tempGrade\
    \ == grades[gradeIndex])\n            {\n                counter++;\n        \
    \    }\n            else if (tempGrade > grades[gradeIndex])\n            {\n\
    \                counter--;\n            }\n        }\n    }\n    string[] letterGrade\
    \ = new string[counter];\n    string grade;\n    if (counter < 10)\n    {\n  \
    \      grade = \"A+\";\n        letterGrade[0] = \"A+\";\n    }\n    else if (counter\
    \ == 9)\n    {\n        grade = \"A\";\n        letterGrade[0] = \"A\";\n    }\n\
    \    else if (counter == 8)\n    {\n        grade = \"A-\";\n        letterGrade[0]\
    \ = \"A-\";\n    }\n    else if (counter == 7)\n    {\n        grade = \"B+\"\
    ;\n        letterGrade[0] = \"B+\";\n    }\n    else if (counter == 6)\n    {\n\
    \        grade = \"B\";\n        letterGrade[0] = \"B\";\n    }\n    else if (counter\
    \ == 5)\n    {\n        grade = \"B-\";\n        letterGrade[0] = \"B-\";\n  \
    \  }\n    else if (counter == 4)\n    {\n        grade = \"C+\";\n        letterGrade[0]\
    \ = \"C+\";\n    }\n    else if (counter == 3)\n    {\n        grade = \"C\";\n\
    \        letterGrade[0] = \"C\";\n    }\n    else if (counter == 2)\n    {\n \
    \       grade = \"C-\";\n        letterGrade[0] = \"C-\";\n    }\n    else if\
    \ (counter == 1)\n    {\n        grade = \"D+\";\n        letterGrade[0] = \"\
    D+\";\n    }\n    else if (counter == 0)\n    {\n        grade = \"D\";\n    \
    \    letterGrade[0] = \"D\";\n    }\n    else\n    {\n        grade = \"E\";\n\
    \        letterGrade[0] = \"E\";\n    }\n    \n    for (int i = 1; i < letterGrade.Length;\
    \ i++)\n    {\n        if (letterGrade[i - 1] != \"D-\" && letterGrade[i - 1]\
    \ != \"E-\" && letterGrade[i - 1] != \"D+\" &&\n        letterGrade[i - 1] !=\
    \ \"D-\" && letterGrade[i - 1] != \"", "{\n    int size = grades.length;\n   \
    \ string[] grades_letters = new string[size];\n    grades_letters[0] = \"A+\"\
    ;\n    for (int i = 1; i < size; i++)\n    {\n        grades_letters[i] = \"\"\
    ;\n        for (int j = 0; j < size; j++)\n        {\n            if (i == j)\
    \ continue;\n            if (grades[j] > grades[i])\n                grades_letters[i]\
    \ += \"-\" + grades_letters[j];\n            else if (grades[j] < grades[i])\n\
    \                grades_letters[i] += \" + \" + grades_letters[j];\n         \
    \   else\n                grades_letters[i] += grades_letters[j];\n        }\n\
    \    }\n    return grades_letters;\n}\n/*\nGiven an array of GPAs and a string\
    \ of test scores. Your task is to make \nan algorithm that outputs the grades\
    \ in an efficient manner using the table\ngiven above.\nThe scores have to be\
    \ integers.\nExample Input:\ngrades = [4.0, 3L, 1.7, 2L, 3.5]\nscores = \"95.5\
    \ - 97.8 3.3 2.7\"\nExample Output:\n[\"B+\", \"B\", \"C-\", \"C\", \"A-\"]\n\
    */\nstring[] letterGrades(float[] grades, string scores)\n{\n    string[] scores_letters\
    \ = scores.Split(' ');\n    int[] scores = new int[scores_letters.Length];\n \
    \   for (int i = 0; i < scores_letters.Length; i++)\n    {\n        scores_letters[i]\
    \ = scores_letters[i].Substring(2);\n        if (scores_letters[i].Contains('-'))\n\
    \            scores_letters[i] = scores_letters[i].Substring(0, scores_letters[i].IndexOf('-')\
    \ + 1);\n        scores[i] = Convert.ToInt32(scores_letters[i]);\n    }\n    string[]\
    \ grades_letters = numerical_letter_grade(grades);\n    string[] result = new\
    \ string[grades_letters.Length];\n    for (int i = 0; i < grades_letters.Length;\
    \ i++)\n        result[i] = grades_letters[i].Replace(\" \", \"\");\n    for (int\
    \ i = 0; i < scores.Length; i++)\n        result[scores[i]] = grades_letters[i].Replace(\"\
    D+\", \"\");\n    Array.Sort(scores);\n    for (int i = 0; i < scores.Length;\
    \ i++)\n        result[scores[i]] = grades_letters[i].Replace(\"D\", \"\");\n\
    \    Array.Sort(scores);\n    for (int i = 0; i < scores.Length; i++)\n      \
    \  result[scores[i]] = grades_letters[i].Replace(\"C+\", \"\");\n    Array.Sort(scores);\n\
    \    for (int i = 0; i < scores.Length; i++)\n        result[scores[i]] = grades_letters[i].Replace(\"\
    C\", \"\");\n    Array.Sort(scores);\n    for (int i = 0; i < scores.Length; i++)\n\
    \        result[scores[i]] = grades_letters[i].Replace(\"B+\", \"\");\n    Array.S",
  "{\n    float[] gpa_sums = sum_of_grades(grades);\n    string[] letter_grades =\
    \ new string[grades.Length];\n    int index = 0;\n    foreach (float gpa_sum in\
    \ gpa_sums)\n    {\n        letter_grades[index] = letter_to_grade(gpa_sum);\n\
    \        index++;\n    }\n    return letter_grades;\n}\nstring[] sum_of_grades(float[]\
    \ grades)\n{\n    float[] gpa_sums = new float[grades.Length];\n    for (int i\
    \ = 0; i < grades.Length; i++)\n        gpa_sums[i] = grades[i] + gpa_sums[i];\n\
    \    return gpa_sums;\n}\nstring letter_to_grade(float gpa_sum)\n{\n    float\
    \ gpa_sums_index = gpa_sum - gpa_sums[gpa_sums.length - 1];\n    gpa_sums_index\
    \ = gpa_sums_index * 100 / gpa_sums[gpa_sums.length - 1];\n    int letter_grade_index\
    \ = 0;\n    if (gpa_sums_index >= 0 && gpa_sums_index < 100)\n        letter_grade_index\
    \ = (int)gpa_sums_index;\n    else if (gpa_sums_index > 100 && gpa_sums_index\
    \ < 200)\n        letter_grade_index = (int)(gpa_sums_index - 99);\n    else if\
    \ (gpa_sums_index > 200 && gpa_sums_index < 300)\n        letter_grade_index =\
    \ (int)(gpa_sums_index - 99);\n    else if (gpa_sums_index > 300 && gpa_sums_index\
    \ < 400)\n        letter_grade_index = (int)(gpa_sums_index - 99);\n    else if\
    \ (gpa_sums_index > 400 && gpa_sums_index < 500)\n        letter_grade_index =\
    \ (int)(gpa_sums_index - 99);\n    else if (gpa_sums_index > 500 && gpa_sums_index\
    \ < 600)\n        letter_grade_index = (int)(gpa_sums_index - 99);\n    else if\
    \ (gpa_sums_index > 600 && gpa_sums_index < 700)\n        letter_grade_index =\
    \ (int)(gpa_sums_index - 99);\n    else if (gpa_sums_index > 700 && gpa_sums_index\
    \ < 800)\n        letter_grade_index = (int)(gpa_sums_index - 99);\n    else if\
    \ (gpa_sums_index > 800 && gpa_sums_index < 900)\n        letter_grade_index =\
    \ (int)(gpa_sums_index - 99);\n    else if (gpa_sums_index > 900 && gpa_sums_index\
    \ < 1000)\n        letter_grade_index = (int)(gpa_sums_index - 99);\n    else\
    \ if (g", "{\n    List<string> letterGrades = new List<string>();\n    int sum=0;\n\
    \    foreach( float grade in grades ) {\n        sum += grade;\n    }\n    \n\
    \    foreach( float grade in grades ) {\n        if( sum > grade ) {\n       \
    \     int gradePoint = grade - sum;\n            string gradeLetter = grades[grade].ToString();\n\
    \            letterGrades.Add(gradeLetter + \" \" + gradePoint);\n        }\n\
    \    }\n    return letterGrades.ToArray();\n}\n</code>\n<|/ a |>\n<| c |>\nI see\
    \ this question is almost a year old, but thank you for your solution!\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\npublic static List<string> GetGrades(List<float>\
    \ grades)\n{\n    return grades.Select(c => $\"[ {c} ]\").Where(c => c != 0).ToList();\n\
    }\n</code>\nThis can be simplified to:\n<code>\npublic static List<string> GetGrades(List<float>\
    \ grades)\n{\n    return grades.Select(c => $\"[ {c} ]\")\n        .Where(c =>\
    \ c != 0)\n        .ToList();\n}\n</code>\n<|/ a tags=c#,functional-programming\
    \ |>\n<| a dscore=2 |>\nI'm adding an answer that uses LINQ and converts the float\
    \ list to string list using the String.Format method. This has the advantage of\
    \ returning a list of strings and not array of strings. \n<code>\nvar grades =\
    \ new[] { 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.3 };\nvar letterGrades\
    \ = grades.Select(x => String.Format(\"[ {0:0.0} ]\", x));\n</code>\n<|/ a tags=c#,functional-programming\
    \ |>\n<| a tags=c#,functional-programming |>\n<code>\nusing System;\nusing System.Collections.Generic;",
  "{\n    string letterGrade;\n    float sumOfGPAs = 0.0;\n    float totalGrade =\
    \ 0.0;\n    float average = 0.0;", "{\n    bool isPositive;\n    int i = 0;\n\
    \    float numGPA = 0.0f;\n    string[] gradesGrading = new string[grades.Length];\n\
    \    float averageGPA;", "{\n    bool is_negative = false, isPositive = false;\n\
    \    bool is_equal = false;\n    bool is_too_high = false;\n    bool is_too_low\
    \ = false;\n    bool is_too_high_and_too_low = false;\n    string letterGrade\
    \ = null;\n    \n    for (int i = 0; i < grades.length; i++)\n    {\n        if\
    \ (grades[i] > 3.7 && grades[i] < 3.3 && grades[i] != 0)\n        {\n        \
    \    is_negative = true;\n        }\n        \n        if (grades[i] <= 2.7 &&\
    \ grades[i] >= 2.3 && grades[i] != 0)\n        {\n            isPositive = true;\n\
    \        }\n        \n        if (grades[i] > 2.7 && grades[i] < 2.3 && grades[i]\
    \ != 0)\n        {\n            is_too_high = true;\n        }\n        \n   \
    \     if (grades[i] <= 2.3 && grades[i] > 2.7 && grades[i] != 0)\n        {\n\
    \            is_too_low = true;\n        }\n        \n        if (grades[i] >=\
    \ 2.3 && grades[i] <= 2.7 && grades[i] != 0)\n        {\n            is_too_high_and_too_low\
    \ = true;\n        }\n        \n        if (grades[i] == 0)\n        {\n     \
    \       is_equal = true;\n        }\n    }\n    \n    if (is_negative)\n    {\n\
    \        letterGrade = \"-\";\n    }\n    \n    if (isPositive)\n    {\n     \
    \   letterGrade = \"+\";\n    }\n    \n    if (is_too_high)\n    {\n        letterGrade\
    \ = letterGrade + \"-\";\n    }\n    \n    if (is_too_low)\n    {\n        letterGrade\
    \ = letterGrade + \"-\";\n    }\n    \n    if (is_too_high_and_too_low)\n    {\n\
    \        letterGrade = letterGrade + \"-\";\n    }\n    \n    if (is_equal)\n\
    \    {\n        letterGrade = \"+\";\n    }\n    \n    return letterGrade;\n}\n\
    </code>\n<|/ a tags=java,arrays |>\n<| c |>\nThat was my first idea, but `is_too_high`\
    \ should be `>=`, not `>`.\n<|/ c |>\n<| c |>\nI changed it but the code still\
    \ doesn't work and I am still stuck. I don't know what to do. I tried changing\
    \ the is_too_low and is_too_high to >=, but it just ends up with less grades.\
    \ This is my code:\n<|/ c |>\n<| c |>\n`public static void main(String[] args)\
    \ {", "{\n    if (grades.length < 1)\n        return null;\n    else if (grades.length\
    \ == 1)\n        return new string[]{\"A\"};\n    double sum = 0.0F;\n    int\
    \ count = 0;\n    foreach (var grade in grades)\n    {\n        sum += grade;\n\
    \        count++;\n    }\n    if (sum > 4.0)\n        sum += (4.0 - sum) * 1.0;\n\
    \    else if (sum > 3.7)\n        sum += (3.7 - sum) * 0.7;\n    else if (sum\
    \ > 3.3)\n        sum += (3.3 - sum) * 0.3;\n    else if (sum > 3.0)\n       \
    \ sum += (3.0 - sum) * 0.1;\n    else if (sum > 2.7)\n        sum += (2.7 - sum)\
    \ * 0.7;\n    else if (sum > 2.3)\n        sum += (2.3 - sum) * 0.3;\n    else\
    \ if (sum > 2.0)\n        sum += (2.0 - sum) * 0.1;\n    else if (sum > 1.7)\n\
    \        sum += (1.7 - sum) * 0.7;\n    else if (sum > 1.3)\n        sum += (1.3\
    \ - sum) * 0.3;\n    else if (sum > 1.0)\n        sum += (1.0 - sum) * 0.1;\n\
    \    else if (sum > 0.7)\n        sum += (0.7 - sum) * 0.7;\n    else\n      \
    \  sum += 0.0;\n    \n    string[] result = new string[count];\n    for (int i\
    \ = 0; i < count; i++)\n    {\n        double average = sum / grades.length;\n\
    \        string grade = letter_grade(average);\n        result[i] = grade;\n \
    \   }\n    return result;\n}\n/*\nIt is the last week of the semester and the\
    \ teacher has to give the grades\n    to students. The teacher has been making\
    \ her own algorithm for grading.\n    The only problem is, she has lost the code\
    \ she used for grading.\n    She has given you an array of GPAs for some students\
    \ and you have to write \n    a function that can output an array of letter grades\
    \ using the following table:\n             GPA       |    Letter grade\n     \
    \         4.0                A+\n            > 3.7                A \n       \
    \     > 3.3                A- \n            > 3.0                B+\n        \
    \    > 2.7                B \n            > 2.3                B-\n          \
    \  > 2.0                C+\n            > 1.7                C\n            >\
    \ 1.3                C-\n            > 1.0                D+ \n            > 0.7\
    \                D \n            > 0.0                D-\n              0.0  \
    \              E\n    ", "{\n    int[] counts = new int[5];\n    for (float grade\
    \ : grades) \n    {\n        if (grade >= 4.0) \n        {\n            counts[0]++;\n\
    \        }\n        else if (grade > 3.7 && grade < 4.0) \n        {\n       \
    \     counts[1]++;\n        }\n        else if (grade > 3.3 && grade < 3.7) \n\
    \        {\n            counts[2]++;\n        }\n        else if (grade > 3.0\
    \ && grade < 3.3) \n        {\n            counts[3]++;\n        }\n        else\
    \ if (grade > 2.7 && grade < 3.0) \n        {\n            counts[4]++;\n    \
    \    }\n        else if (grade > 2.3 && grade < 2.7) \n        {\n           \
    \ counts[5]++;\n        }\n        else if (grade > 2.0 && grade < 2.3) \n   \
    \     {\n            counts[6]++;\n        }\n        else if (grade > 1.7 &&\
    \ grade < 2.0) \n        {\n            counts[7]++;\n        }\n        else\
    \ if (grade > 1.3 && grade < 1.7) \n        {\n            counts[8]++;\n    \
    \    }\n        else if (grade > 1.0 && grade < 1.3) \n        {\n           \
    \ counts[9]++;\n        }\n        else if (grade > 0.7 && grade < 1.0) \n   \
    \     {\n            counts[10]++;\n        }\n        else\n        {\n     \
    \       counts[11]++;\n        }\n    }\n    int[] letters = new int[11];\n  \
    \  letters[0] = (counts[0] >= grades.length) ? \"E\" : letters[0];\n    letters[1]\
    \ = (counts[1] >= grades.length) ? \"D+\" : letters[1];\n    letters[2] = (counts[2]\
    \ >= grades.length) ? \"D\" : letters[2];\n    letters[3] = (counts[3] >= grades.length)\
    \ ? \"D-\" : letters[3];\n    letters[4] = (counts[4] >= grades.length) ? \"C+\"\
    \ : letters[4];\n    letters[5] = (counts[5] >= grades.length) ? \"C\" : letters[5];\n\
    \    letters[6] = (counts[6] >= grades.length) ? \"C-\" : letters[6];\n    letters[7]\
    \ = (counts[7] >= grades.length) ? \"B+\" : letters[7];\n    letters[8] = (counts[8]\
    \ >= grades.length) ? \"B\" : letters[8];\n    letters[9] = (counts[9] >= grades.length)\
    \ ? \"B-\" : letters[9];\n    letters[10] = (counts[10] >= grades.length) ? \"\
    A+\" : letters[10];\n    letters[", "{\n    \n    /*\n        Declare and initialize\
    \ variables\n        \n        We are going to use the first letter grade as our\
    \ first value \n        in the string[] grades.\n    */\n    var first_letter_grade;\n\
    \    \n    /*\n        Declare and initialize variables\n        \n        We\
    \ will count how many letter grades we have already output to \n        the string\
    \ grades.\n    */\n    var total_grades = 0;\n    \n    /*\n        Declare and\
    \ initialize variables\n        \n        We will count how many letter grades\
    \ we have already output to \n        the string grades.\n    */\n    var letter_grades\
    \ = new string[grades.Length];\n    \n    /*\n        Declare and initialize variables\n\
    \        \n        We will use an int variable as a counter to keep track of \n\
    \        how many letter grades we have already output to the string grades.\n\
    \    */\n    var counter = 0;\n    \n    /*\n        Declare and initialize variables\n\
    \        \n        We will use a float variable as our \"grade point\" to keep\
    \ track \n        of our GPA.\n    */\n    var grade_point = 0.0;\n    \n    /*\n\
    \        Declare and initialize variables\n        \n        We will use the string\
    \ array grades as our input.\n    */\n    var grades_input = grades.ToString();\n\
    \    \n    /*\n        Declare and initialize variables\n        \n        We\
    \ will use the string grades_input as our output.\n    */\n    var grades_output\
    \ = new string[grades.Length];\n    \n    /*\n        While loop block\n     \
    \   \n        This while loop will run until we run out of grades and our counter\
    \ \n        reaches 0 meaning we have ran out of grades. We also must exit our\
    \ while loop \n        if the grade point is greater than or equal to 4.0.\n \
    \   */\n    while (counter < grades.Length && grade_point < 4.0) \n    {\n   \
    \     \n        /* \n            Declare and initialize variables\n          \
    \  \n            We will use the index (counter) as our loop counter.\n      \
    \  */\n        var counter = counter;\n        \n        /* \n            Declare\
    \ and initialize variables\n            \n            We will use the index (counter)\
    \ as our loop counter.\n        */\n        var counter = counter;\n        \n\
    \        /* \n            Declare and initialize variables\n            \n   \
    \         We will use an int variable as a counter to keep track of \n       \
    \     how many letter grades we have already output to the string grades.\n  \
    \      */\n        var counter = counter;\n        \n        /* \n           \
    \ Declare and initialize variables\n            \n            We will use the\
    \ index (counter) as our loop ", "{\n    int[] gpa = { 4.0f, 3.7f, 3.3f, 3.0f,\
    \ 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.0f, 0.0f };\n    int[] gpa_pos = { 0,\
    \ 2, 3, 6, 7, 8, 9, 10, 11, 12, 13 };\n    int[] grades0 = { 4.0f, 3.7f, 3.3f,\
    \ 3.0f, 2.7f, 2.3f, 2.0f, 1.7f, 1.3f, 1.0f, 0.0f };\n    string[] grades0 = {\
    \ \"+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\",\
    \ \"D\", \"D-\", \"E\" };\n    int[] grades_pos = { 0, 2, 3, 6, 7, 8, 9, 10, 11,\
    \ 12, 13 };\n    int[] gpa_len = { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 };\n    int\
    \ grades_len = grades0.length;\n    int gpa_size = gpa.length;\n    int[] gpa_end\
    \ = gpa[gpa_size - 1];\n    string[] grades_end = grades0;\n    int gpa_last_pos\
    \ = gpa_pos - gpa_len;\n    int grades_last_pos = grades_pos - grades_len;\n \
    \   int gpa_minus_last_pos = gpa_last_pos - gpa_len;\n    int grades_minus_last_pos\
    \ = grades_last_pos - grades_len;\n    int gpa_gt = gpa_pos[0];\n    int grades_gt\
    \ = grades0.length - 1;\n    int gpa_eq = grades_eq(gpa, grades, gpa_gt);\n  \
    \  int grades_eq = grades_eq(grades0, grades, grades_gt);\n    int grades_gte\
    \ = gpa_gt == gpa_eq;\n    int grades_lt = grades_gte && grades_eq;\n    int grades_gte_eq\
    \ = grades_gte && grades_eq;\n    int grades_lt_eq = grades_gte && grades_gte;\n\
    \    int grades_lte_eq = grades_gte && grades_gte_eq;\n    int grades_eq_eq =\
    \ grades_eq && grades_eq;\n    int grades_gt_eq = grades_gte && grades_gte_eq;\n\
    \    int grades_eq_gt_eq = grades_eq && grades_gte_eq;\n    int[] grades_gt_eq\
    \ = { grades_gt, grades_gt_eq, grades_gt, grades_gt_eq, grades_gt, grades_gt_eq,\
    \ grades_gt_eq, grades_gt_eq };\n    int[] grades_eq_gt_eq = { grades_eq, grades_eq_",
  "{\n    int num_grades = (int)grades.Length;\n    string[] letters = new string[num_grades];\n\
    \    for (int i = 0; i < num_grades; i++)\n    {\n        int gpa = grades[i];\n\
    \        if (gpa >= 3.0) letters[i] = \"A+\";\n        else if (gpa >= 3.3) letters[i]\
    \ = \"A\";\n        else if (gpa >= 3.7) letters[i] = \"A-\";\n        else if\
    \ (gpa >= 3.0) letters[i] = \"B+\";\n        else if (gpa >= 2.7) letters[i] =\
    \ \"B\";\n        else if (gpa >= 2.3) letters[i] = \"B-\";\n        else if (gpa\
    \ >= 2.0) letters[i] = \"C+\";\n        else if (gpa >= 1.7) letters[i] = \"C\"\
    ;\n        else if (gpa >= 1.3) letters[i] = \"C-\";\n        else if (gpa >=\
    \ 1.0) letters[i] = \"D+\";\n        else if (gpa >= 0.7) letters[i] = \"D\";\n\
    \        else if (gpa >= 0.0) letters[i] = \"D-\";\n        else letters[i] =\
    \ \"E\";\n    }\n    return letters;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I disagree with this. Your function does not do the same thing as what the OP\
    \ has asked for - it will give all grades in alphabetical order (rather than grade\
    \ by grade as you have it here).\n<|/ c |>\n<| a dscore=0 |>\nThe solution I came\
    \ up with is:", "{\n    float[] letter_grades = new float[grades.Length];\n  \
    \  int i=0;\n    for (float grade : grades)\n    {\n        letter_grades[i] =\
    \ (int)((grade * 5) / 4.0) - 5;\n        i += 1;\n    }\n    \n    string[] strings\
    \ = new string[grades.Length];\n    int j=0;\n    for (int l = 0; l < letter_grades.Length;\
    \ l++)\n    {\n        strings[j] = letter_grades[l].ToString();\n        j +=\
    \ 1;\n    }\n    return strings;\n}", "{\n    int index = 0;\n    float sum =\
    \ 0;\n    float average = 0;\n    float count = 0;\n    for (int i = 0; i < grades.length;\
    \ i++) \n    {\n        if (grades[i] != 0)\n        {\n            sum = sum\
    \ + grades[i];\n            average = sum / count;\n            index = i + 1;\n\
    \            while (average >= 3.7) \n            {\n                average =\
    \ average - 3.7;\n                index = index + 1;\n            }\n        \
    \    while (average < 3.0) \n            {\n                average = average\
    \ + 3.0;\n                index = index + 1;\n            }\n            while\
    \ (index <= grades.length - 1) \n            {\n                if (average <=\
    \ average) \n                {\n                    index = index + 1;\n     \
    \               average = average + 3.0;\n                } \n               \
    \ else if (average > average) \n                {\n                    average\
    \ = average - 3.0;\n                    index = index + 1;\n                }\n\
    \                if (index >= grades.length - 1) \n                {\n       \
    \             return new string[grades.length];\n                }\n         \
    \   }\n        }\n        count = count + 1;\n    }\n    return new string[grades.length];\n\
    }\n/*\nWe have to create a function to get the letter grade from an integer.\n\
    The function must receive an integer, convert it to an array\nof integers, and\
    \ output an array of integers representing the letter grades.\nThe table is shown\
    \ below.", "{\n    float[] grades_copy = copyOf(grades);\n    float[] gpas = copyOf(grades);\n\
    \    \n    for(int i = 0; i < grades_copy.length; i++)\n    {\n        for(int\
    \ j = 0; j < grades.length; j++)\n        {\n            if(grades_copy[j] ==\
    \ grades[i])\n            {\n                if(grades_copy[j] > 3.7 && grades_copy[j]\
    \ < 3.9)\n                    gpas[i] = grades[i] - .25;\n                else\
    \ if(grades_copy[j] > 3.9 && grades_copy[j] < 4.1)\n                    gpas[i]\
    \ = grades[i] - .30;\n                else if(grades_copy[j] > 4.1 && grades_copy[j]\
    \ < 4.3)\n                    gpas[i] = grades[i] - .35;\n                else\
    \ if(grades_copy[j] > 4.3 && grades_copy[j] < 4.5)\n                    gpas[i]\
    \ = grades[i] - .40;\n                else if(grades_copy[j] > 4.5 && grades_copy[j]\
    \ < 4.7)\n                    gpas[i] = grades[i] - .47;\n                else\
    \ if(grades_copy[j] > 4.7 && grades_copy[j] < 4.9)\n                    gpas[i]\
    \ = grades[i] - .56;\n                else if(grades_copy[j] > 4.9)\n        \
    \            gpas[i] = grades[i] - .60;\n            }\n        }\n    }\n   \
    \ \n    string[] grades_copy = copyOf(gpas);\n    \n    return grades_copy;\n\
    }\n</code>\n<|/ q tags=java,arrays |>\n<| c |>\nWhat exactly is going wrong? Does\
    \ it compile? Does it run? Does it produce a runtime error? Can you provide a\
    \ [mcve]?\n<|/ c |>\n<| c |>\nIt's not giving me any errors but when I run my\
    \ program it just says what ever I input then exits without doing anything else.\n\
    <|/ c |>\n<| c |>\nHave you tried putting a breakpoint in the `if` statements\
    \ to see which one is being called?\n<|/ c |>\n<| c |>\nI did put a breakpoint\
    \ at the first if statement and it never got called so I'm not sure what's going\
    \ wrong.\n<|/ c |>\n<| c |>\nHave you tried using an IDE with a debugger and stepping\
    \ through the code to see what is happening?\n<|/ c |>\n<| a |>\n<code>\nfor(int\
    \ i = 0; i < grades.length; i++)\n{\n    for(int j = 0; j < grades.length; j++)\n\
    \    {\n</code>\nYou never check anything in the inner loop except for j. That's\
    \ why the code never ends.\nYou should use only one of the two loops, e.g.\n<code>",
  "{\n    float sum, average;\n    string[] letter_grades;\n    \n    for (int i =\
    \ 0; i < grades.length; i++)\n    {\n        sum = grades[i];\n        average\
    \ = sum / grades.length;\n        if (average < 3.0)\n        {\n            letter_grades[i]\
    \ = \"D-\";\n        }\n        else if (average < 3.3)\n        {\n         \
    \   letter_grades[i] = \"C-\";\n        }\n        else if (average < 3.7)\n \
    \       {\n            letter_grades[i] = \"C-\";\n        }\n        else if\
    \ (average < 4.0)\n        {\n            letter_grades[i] = \"B-\";\n       \
    \ }\n        else if (average < 4.3)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (average < 4.7)\n        {\n         \
    \   letter_grades[i] = \"B-\";\n        }\n        else if (average < 5.0)\n \
    \       {\n            letter_grades[i] = \"B-\";\n        }\n        else if\
    \ (average < 5.3)\n        {\n            letter_grades[i] = \"B-\";\n       \
    \ }\n        else if (average < 5.7)\n        {\n            letter_grades[i]\
    \ = \"B-\";\n        }\n        else if (average < 6.0)\n        {\n         \
    \   letter_grades[i] = \"B+\";\n        }\n        else if (average < 6.3)\n \
    \       {\n            letter_grades[i] = \"B+\";\n        }\n        else if\
    \ (average < 6.7)\n        {\n            letter_grades[i] = \"B+\";\n       \
    \ }\n        else if (average < 7.0)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if (average < 7.3)\n        {\n         \
    \   letter_grades[i] = \"A+\";\n        }\n        else if (average < 7.7)\n \
    \       {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (average < 8.0)\n        {\n            letter_grades[i] = \"A+\";\n       \
    \ }\n        else if (average < 8.3)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if (average < 8.7)\n        {\n         \
    \   letter_grades[i] = \"A+\";\n        }\n        else if (average < 9.0)\n \
    \       {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (average < 9.3)\n        {\n            letter_grades[i] = \"A+\";\n       \
    \ }\n        else if (average < 9.7)\n        {\n            letter_grades[i]\
    \ = \"A+\";\n        }\n        else if (average < 10.0)\n        {\n        \
    \    letter_grades[i] = \"A+\";\n        }\n        else if (average < 10.3)\n\
    \        {\n            letter_grades[i] = \"A+\";\n        }\n        else if\
    \ (average < 10.7)\n        {\n            letter_grades[i] = \"A+\";\n      \
    \  }\n        else\n        {\n            letter_grades[i] = \"E\";\n       \
    \ }\n    }\n    return letter_grades;\n}\n</code>\n", "{\n    double maxGrade\
    \ = std.math.max(grades);\n    \n    for(int i=0; i<grades.length; ++i)\n    {\n\
    \        if(grades[i] == maxGrade)\n        {\n            return std.typecons.array(std.typecons.string(std.typecons.char('A'+i)));\n\
    \        }\n    }\n    \n    return null;\n}", "{\n  float gpa = grades[grades.Length-1];",
  "{\n    bool isEven = true;\n    for (int i = 0; i < grades.Length; i++)\n    {\n\
    \        if (grades[i] >= 4.0)\n        {\n            if (grades[i] != 0)\n \
    \           {\n                isEven = !isEven;\n            }\n            else\n\
    \            {\n                isEven = !isEven;\n            }\n        }\n\
    \        else if (grades[i] <= 0.0)\n        {\n            isEven = !isEven;\n\
    \        }\n    }\n    if (isEven)\n    {\n        grades = new float[5];\n  \
    \      grades[0] = grades[2] = grades[4] = grades[5] = \"D-\";\n    }\n    else\n\
    \    {\n        grades = new float[6];\n        grades[0] = grades[2] = grades[4]\
    \ = grades[5] = \"D\";\n    }\n    return grades;\n}\nstring[] grade_equation\
    \ (float[] gpas)\n{\n    string[] grades = new string[gpas.Length];\n    for (int\
    \ i = 0; i < gpas.Length; i++)\n    {\n        grades[i] = numerical_letter_grade(gpas);\n\
    \    }\n    return grades;\n}\n</code>\n}\n<|/ q |>\n<| c |>\nThis is not the\
    \ right way to use Stack Overflow. Your question is not about programming (it's\
    \ about writing a function) and your question is about how to solve a problem\
    \ with a computer (this is what the `[homework]` tag is for). You should be able\
    \ to figure out how to solve this problem on your own or by looking up similar\
    \ questions here on Stack Overflow. You're supposed to do some research yourself\
    \ first, try something, and when you get stuck, ask a specific question on a *specific*\
    \ problem. Since this isn't about programming, it's too broad and will likely\
    \ be closed unless you demonstrate a genuine attempt to solve the problem on your\
    \ own.\n<|/ c |>\n<| a |>\nThe simplest way would be to create a string and just\
    \ check if each grade is either \"D-\" or \"D\" then add it to an array.  Something\
    \ like (sorry about the formatting, not 100% sure how to do that in here):\n<code>\n\
    string grade = \"\";", "{\n    var grades_string = string.Join(\"\", grades.Select(grade\
    \ => grade.ToString()).OrderBy(grade => grade));", "{\n    var gpa = grades[0];\n\
    \    float sum = 0.0;\n    foreach(var x in grades)\n    {\n        sum += x;\n\
    \    }\n    float avg = sum / grades.Length;\n    string lettergrade = \"\";\n\
    \    foreach(var x in grades)\n    {\n        if (gpa >= x)\n        {\n     \
    \       lettergrade += \"A+\"; \n        }\n        else if (gpa > 3.7)\n    \
    \    {\n            lettergrade += \"A\"; \n        }\n        else if (gpa >\
    \ 3.3)\n        {\n            lettergrade += \"A-\"; \n        }\n        else\
    \ if (gpa > 3.0)\n        {\n            lettergrade += \"B+\"; \n        }\n\
    \        else if (gpa > 2.7)\n        {\n            lettergrade += \"B\"; \n\
    \        }\n        else if (gpa > 2.3)\n        {\n            lettergrade +=\
    \ \"B-\"; \n        }\n        else if (gpa > 2.0)\n        {\n            lettergrade\
    \ += \"C+\"; \n        }\n        else if (gpa > 1.7)\n        {\n           \
    \ lettergrade += \"C\"; \n        }\n        else if (gpa > 1.3)\n        {\n\
    \            lettergrade += \"C-\"; \n        }\n        else if (gpa > 1.0)\n\
    \        {\n            lettergrade += \"D+\"; \n        }\n        else if (gpa\
    \ > 0.7)\n        {\n            lettergrade += \"D\"; \n        }\n        else\n\
    \        {\n            lettergrade += \"D-\"; \n        }\n        gpa -= x;\n\
    \    }\n    lettergrade = lettergrade.Substring(0, lettergrade.Length-1);\n  \
    \  return lettergrade;\n}", "{\n    Arrays.sort(grades);\n    var sum = 0.0;\n\
    \    var count = grades.length - 1;\n    \n    foreach(var grade in grades)\n\
    \    {\n        sum += grade;\n    }\n    \n    var grade_string = sum.toString()\
    \ + \"/\" + count;\n    var grade_array = new string[grades.length];\n    \n \
    \   for(int i = 0; i < grades.length; ++i)\n    {\n        var index = sum >=\
    \ grade ? i - 1 : grades.length - i;\n        grade_array[index] = numerical_letter_grade(grades[i]);\n\
    \    }\n    \n    return grade_array;\n}", "{\n    int[] counts = new int[26];",
  "{\n    int[] grades_copy = new int[grades.length];\n    \n    for (int i = 0; i\
    \ < grades.length; ++i)\n        grades_copy[i] = grades[i];\n    \n    int A_index\
    \ = -2;\n    int B_index = -1;\n    int C_index = -2;\n    int D_index = -1;\n\
    \    int E_index = -2;", "{\n    sort(grades, lessThan);\n    int N=grades.length;\n\
    \    string[] grade_strings = new string[N];\n    for(int i=0; i<N; i++) {\n \
    \       grade_strings[i]=numerical_letter_grade(grades[i]);\n    }\n    return\
    \ grade_strings;\n}", "{\n    //write your code here\n    string lettergrades\
    \ = \"\";\n    for(int i = 0; i < grades.length; i++)\n    {\n        if(grades[i]\
    \ >= 4.0)\n        {\n            lettergrades += \"A+\";\n        }\n       \
    \ else if (grades[i] >= 3.7)\n        {\n            lettergrades += \"A\";\n\
    \        }\n        else if (grades[i] >= 3.3)\n        {\n            lettergrades\
    \ += \"A-\";\n        }\n        else if (grades[i] >= 3.0)\n        {\n     \
    \       lettergrades += \"B+\";\n        }\n        else if (grades[i] >= 2.7)\n\
    \        {\n            lettergrades += \"B\";\n        }\n        else if (grades[i]\
    \ >= 2.3)\n        {\n            lettergrades += \"B-\";\n        }\n       \
    \ else if (grades[i] >= 2.0)\n        {\n            lettergrades += \"C+\";\n\
    \        }\n        else if (grades[i] >= 1.7)\n        {\n            lettergrades\
    \ += \"C\";\n        }\n        else if (grades[i] >= 1.3)\n        {\n      \
    \      lettergrades += \"C-\";\n        }\n        else if (grades[i] >= 1.0)\n\
    \        {\n            lettergrades += \"D+\";\n        }\n        else if (grades[i]\
    \ >= 0.7)\n        {\n            lettergrades += \"D\";\n        }\n        else\
    \ if (grades[i] >= 0.0)\n        {\n            lettergrades += \"D-\";\n    \
    \    }\n        else\n        {\n            lettergrades += \"E\";\n        }\n\
    \    }\n    return lettergrades;\n}", "{\n    List<string> result = new List<string>();\n\
    \    float temp=0;\n    foreach (float grade in grades)\n    {\n        temp+=grade;\n\
    \        if (temp>4.0F)\n        {\n            result.Add(\"A+\");\n        \
    \    temp-=4.0F;\n        }\n        else if (temp>3.7F)\n        {\n        \
    \    result.Add(\"A\");\n            temp-=3.7F;\n        }\n        else if (temp>3.3F)\n\
    \        {\n            result.Add(\"A-\");\n            temp-=3.3F;\n       \
    \ }\n        else if (temp>3.0F)\n        {\n            result.Add(\"B+\");\n\
    \            temp-=3.0F;\n        }\n        else if (temp>2.7F)\n        {\n\
    \            result.Add(\"B\");\n            temp-=2.7F;\n        }\n        else\
    \ if (temp>2.3F)\n        {\n            result.Add(\"B-\");\n            temp-=2.3F;\n\
    \        }\n        else if (temp>2.0F)\n        {\n            result.Add(\"\
    C+\");\n            temp-=2.0F;\n        }\n        else if (temp>1.7F)\n    \
    \    {\n            result.Add(\"C\");\n            temp-=1.7F;\n        }\n \
    \       else if (temp>1.3F)\n        {\n            result.Add(\"C-\");\n    \
    \        temp-=1.3F;\n        }\n        else if (temp>1.0F)\n        {\n    \
    \        result.Add(\"D+\");\n            temp-=1.0F;\n        }\n        else\
    \ if (temp>0.7F)\n        {\n            result.Add(\"D\");\n            temp-=0.7F;\n\
    \        }\n        else if (temp>0.0F)\n        {\n            result.Add(\"\
    D-\");\n            temp-=0.0F;\n        }\n        else\n        {\n        \
    \    result.Add(\"E\");\n        }\n    }\n    \n    return result.ToArray();\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nthank you very much for this and for your\
    \ time but can you please explain me how did you write the function and what is\
    \ the advantage of using it? thank you again :)\n<|/ c |>\n<| c |>\nI wrote a\
    \ function which takes input as float[] input and returns string[] output as output.\
    \  Basically it calculates total and divide it by total with 4 decimal points\
    \ to get the grades.\n<|/ c |>\n<| a tags=c# dscore=0 |>\nThe main problem with\
    \ your code is that you are not using the index variable at all. It would probably\
    \ be much simpler to write a function that takes a float as input, and outputs\
    \ a string that represents the grade.\n<code>\nprivate static string GetGrade(float\
    \ grade)\n{\n", "{\n    int i = 0;\n    string lettergrades = \"\";\n    while(i\
    \ < grades.Length) \n    {\n        if (grades[i] >= 3.7f && grades[i] <= 3.2f)\n\
    \            lettergrades = lettergrades + std.typecons.char(\"A+\");\n      \
    \  else if (grades[i] >= 3.3f && grades[i] <= 2.7f)\n            lettergrades\
    \ = lettergrades + std.typecons.char(\"A\");\n        else if (grades[i] >= 2.3f\
    \ && grades[i] <= 1.7f)\n            lettergrades = lettergrades + std.typecons.char(\"\
    A-\");\n        else if (grades[i] >= 1.f && grades[i] <= 0.7f)\n            lettergrades\
    \ = lettergrades + std.typecons.char(\"B+\");\n        else if (grades[i] >= 0.7f\
    \ && grades[i] <= 1.3f)\n            lettergrades = lettergrades + std.typecons.char(\"\
    B\");\n        else if (grades[i] >= 1.3f && grades[i] <= 0.3f)\n            lettergrades\
    \ = lettergrades + std.typecons.char(\"B-\");\n        else if (grades[i] >= 0.3f)\n\
    \            lettergrades = lettergrades + std.typecons.char(\"C+\");\n      \
    \  else if (grades[i] <= 0.3f)\n            lettergrades = lettergrades + std.typecons.char(\"\
    C\");\n        else if (grades[i] >= 0.0f)\n            lettergrades = lettergrades\
    \ + std.typecons.char(\"D\");\n        else if (grades[i] <= 0.0f)\n         \
    \   lettergrades = lettergrades + std.typecons.char(\"D-\");\n        else if\
    \ (grades[i] >= 0L)\n            lettergrades = lettergrades + std.typecons.char(\"\
    E\");\n        else\n            lettergrades = lettergrades + std.typecons.char(\"\
    F\");\n        i++;\n    }\n    return lettergrades.Split('+')[0].Split('-')[0].Split('.')[0].Split('F');\n\
    }\n</code>\n<|/ a |>\n<| a tags=c#,algorithm |>\nI wrote this in Java, but it\
    \ shouldn't be too hard to translate. Hopefully this is helpful.\n<code>\npublic\
    \ static String grade(float gpa)\n{\n    char[] letterGrades = {\n        'A+',\
    \ 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'\n    };\n\
    \    \n    // We need this as a float to do the subtraction\n    float diff =\
    \ (gpa - 3.3f);\n    \n    // We want the grade to be positive so we need to make\
    \ diff positive\n    if (diff < 0) {\n        diff = -", "{\n    float totalGPA\
    \ = 0f;\n    float totalGrade = 0.0f;\n    string lettergrade = \"D-\";\n    int\
    \ index = 0;\n    \n    foreach (float g in grades)\n    {\n        if (g > 0f)\n\
    \        {\n            totalGPA += g;\n        }\n    }\n    \n    foreach (float\
    \ g in grades)\n    {\n        if (g < 0f)\n        {\n            totalGPA +=\
    \ g;\n        }\n    }\n    \n    foreach (float g in grades)\n    {\n       \
    \ if (g > 0f && g < 0f)\n        {\n            totalGPA += g;\n        }\n  \
    \  }\n    \n    totalGrade = (totalGPA / grades.Length);\n    \n    if (totalGrade\
    \ < 4.0)\n    {\n        lettergrade = \"A\";\n    }\n    else if (totalGrade\
    \ < 3.7)\n    {\n        lettergrade = \"A-\";\n    }\n    else if (totalGrade\
    \ < 3.3)\n    {\n        lettergrade = \"B+\";\n    }\n    else if (totalGrade\
    \ < 3.0)\n    {\n        lettergrade = \"B\";\n    }\n    else if (totalGrade\
    \ < 2.7)\n    {\n        lettergrade = \"B-\";\n    }\n    else if (totalGrade\
    \ < 2.3)\n    {\n        lettergrade = \"C+\";\n    }\n    else if (totalGrade\
    \ < 2.0)\n    {\n        lettergrade = \"C\";\n    }\n    else if (totalGrade\
    \ < 1.7)\n    {\n        lettergrade = \"C-\";\n    }\n    else if (totalGrade\
    \ < 1.3)\n    {\n        lettergrade = \"D+\";\n    }\n    else if (totalGrade\
    \ < 1.0)\n    {\n        lettergrade = \"D\";\n    }\n    else\n    {\n      \
    \  lettergrade = \"E\";\n    }\n    \n    lettergrade = lettergrade + \" \";\n\
    \    \n    foreach (float g in grades)\n    {\n        index++;\n        lettergrade\
    \ += numerical_grade_lettergrade(g);\n        if (index % 10 == 0)\n        {\n\
    \            lettergrade += \" \";\n        }\n    }\n    \n    lettergrade =\
    \ lettergrade.TrimEnd();\n    return lettergrade.Split(' ');\n}\n/*\nCalculates\
    \ letter grade of a student\n*/\nstring numerical_grade_lettergrade(float g)\n\
    {\n    string gradeLetter = \"\";\n    \n    if (g < 4.0f)\n    {\n        gradeLetter\
    \ = \"A\";\n    }\n    else if (g < 3.7f)\n    {\n        gradeLetter = \"A-\"\
    ;\n    }\n    else if (g < 3.3f)\n", "{\n    string[] grades1;\n    int n;\n \
    \   grades1 = new string[grades.Length];\n    n = grades.Length;\n    for (int\
    \ i = 0; i<n; i++)\n    {\n        float g = grades[i];\n        if (g < 3.0)\n\
    \        {\n            grades1[i] = \"A\";\n        }\n        else if (g > 3.0\
    \ && g < 3.7)\n        {\n            grades1[i] = \"A+\";\n        }\n      \
    \  else if (g > 3.7 && g < 4.0)\n        {\n            grades1[i] = \"A-\";\n\
    \        }\n        else if (g > 4.0 && g < 4.3)\n        {\n            grades1[i]\
    \ = \"B+\";\n        }\n        else if (g > 4.3 && g < 4.6)\n        {\n    \
    \        grades1[i] = \"B\";\n        }\n        else if (g > 4.6 && g < 4.7)\n\
    \        {\n            grades1[i] = \"B-\";\n        }\n        else if (g >\
    \ 4.7 && g < 4.8)\n        {\n            grades1[i] = \"C+\";\n        }\n  \
    \      else if (g > 4.8 && g < 5.0)\n        {\n            grades1[i] = \"C\"\
    ;\n        }\n        else if (g > 5.0 && g < 5.1)\n        {\n            grades1[i]\
    \ = \"C-\";\n        }\n        else if (g > 5.1 && g < 5.2)\n        {\n    \
    \        grades1[i] = \"D+\";\n        }\n        else if (g > 5.2 && g < 5.3)\n\
    \        {\n            grades1[i] = \"D\";\n        }\n        else if (g > 5.3\
    \ && g < 5.4)\n        {\n            grades1[i] = \"D-\";\n        }\n      \
    \  else\n        {\n            grades1[i] = \"D\";\n        }\n    }\n    return\
    \ grades1;\n}\n//\n//", "{\n    List<string> letterGrades = new List<string>();\n\
    \    int index = 0;\n    \n    for (int i = 0; i < grades.Length; i++)\n    {\n\
    \        if (grades[i] < 3.0)\n        {\n            letterGrades.Add(\"E\");\n\
    \            continue;\n        }\n        else if (grades[i] < 3.7)\n       \
    \ {\n            letterGrades.Add(\"D\");\n            continue;\n        }\n\
    \        else if (grades[i] < 3.3)\n        {\n            letterGrades.Add(\"\
    C-\");\n            continue;\n        }\n        else if (grades[i] < 3.0)\n\
    \        {\n            letterGrades.Add(\"B-\");\n            continue;\n   \
    \     }\n        else if (grades[i] < 2.7)\n        {\n            letterGrades.Add(\"\
    B-\");\n            continue;\n        }\n        else if (grades[i] < 2.3)\n\
    \        {\n            letterGrades.Add(\"B-\");\n            continue;\n   \
    \     }\n        else if (grades[i] < 2.0)\n        {\n            letterGrades.Add(\"\
    B-\");\n            continue;\n        }\n        else if (grades[i] < 1.7)\n\
    \        {\n            letterGrades.Add(\"B-\");\n            continue;\n   \
    \     }\n        else if (grades[i] < 1.3)\n        {\n            letterGrades.Add(\"\
    B-\");\n            continue;\n        }\n        else if (grades[i] < 1.0)\n\
    \        {\n            letterGrades.Add(\"B-\");\n            continue;\n   \
    \     }\n        else if (grades[i] < 0.7)\n        {\n            letterGrades.Add(\"\
    B-\");\n            continue;\n        }\n        else if (grades[i] < 0.0)\n\
    \        {\n            letterGrades.Add(\"B-\");\n            continue;\n   \
    \     }\n        else if (grades[i] == 0.0)\n        {\n            letterGrades.Add(\"\
    E\");\n        }\n        else if (grades[i] == 1.3)\n        {\n            letterGrades.Add(\"\
    C+\");\n        }\n        else if (grades[i] == 1.7)\n        {\n           \
    \ letterGrades.Add(\"C\");\n        }\n        else if (grades[i] == 2.0)\n  \
    \      {\n            letterGrades.Add(\"C\");\n        }\n        else if (grades[i]\
    \ == 2.3)\n        {\n            letterGrades.Add(\"C\");\n        }\n      \
    \  else if (grades[i] == 2.7)\n        {\n            letterGrades.Add(\"C\");\n\
    \        }\n        else if (grades[i] == 3.0)\n        {\n            letterGrades.Add(\"\
    C\");\n        }\n        else if (grades[i] == 3.3)\n        {\n            letterGrades.Add(\"\
    C\");\n        }\n        else if (grades[i] == 3.7)\n        {\n            letterGrades.Add(\"\
    C\");\n        }\n        else\n        {\n            letterGrades.Add", "{\n\
    \    string grade = \"\";\n    string grade1 = \"\";\n    string grade2 = \"\"\
    ;\n    string grade3 = \"\";\n    string grade4 = \"\";\n    string grade5 = \"\
    \";\n    string grade6 = \"\";", "{\n    // Write your code here\n    int n =\
    \ grades.length;\n    string letterGrade;\n    for(int i=0;i<n;i++){\n       \
    \ int gpa = grades[i];\n        char letter = 'E';\n        if(gpa > 3.0){\n \
    \           letterGrade = 'C'; // If GPA is greater than 3.0 then letter grade\
    \ is C\n        }\n        else if(gpa > 2.0){\n            letterGrade = 'B';\
    \ // If GPA is greater than 2.0 then letter grade is B\n        }\n        else\
    \ if(gpa > 1.0){\n            letterGrade = 'A'; // If GPA is greater than 1.0\
    \ then letter grade is A\n        }\n        else if(gpa > 0.0){\n           \
    \ letterGrade = 'D'; // If GPA is greater than 0.0 then letter grade is D\n  \
    \      }\n        else if(gpa > -0.0){\n            letterGrade = 'C'; // If GPA\
    \ is greater than -0.5 then letter grade is C\n        }\n        else if(gpa\
    \ < -0.0){\n            letterGrade = 'E'; // If GPA is less than -0.5 then letter\
    \ grade is E\n        }\n        else if(gpa < -1.0){\n            letterGrade\
    \ = 'F'; // If GPA is less than -1.0 then letter grade is F\n        }\n     \
    \   else if(gpa < -2){\n            letterGrade = 'F'; // If GPA is less than\
    \ -2 then letter grade is F\n        }\n        else if(gpa < -3){\n         \
    \   letterGrade = 'F'; // If GPA is less than -3 then letter grade is F\n    \
    \    }\n        else if(gpa < -4){\n            letterGrade = 'F'; // If GPA is\
    \ less than -4 then letter grade is F\n        }\n        else if(gpa < -5){\n\
    \            letterGrade = 'F'; // If GPA is less than -5 then letter grade is\
    \ F\n        }\n        else if(gpa < -6){\n            letterGrade = 'F'; //\
    \ If GPA is less than -6 then letter grade is F\n        }\n        else if(gpa\
    \ < -7){\n            letterGrade = 'F'; // If GPA is less than -7 then letter\
    \ grade is F\n        }\n        else if(gpa < -8){\n            letterGrade =\
    \ 'F'; // If GPA is less than -8 then letter grade is F\n        }\n        else\
    \ if(gpa < -9){\n            letterGrade = 'F'; // If ", "{\n    if (grades.length\
    \ != 4) return null;", "{\n    List<string> gradesList = new List<string>();\n\
    \    if (grades.Length != 0)\n    {\n        float sum = 0;\n        for (int\
    \ i = 0; i < grades.Length; i++)\n        {\n            sum += grades[i];\n \
    \       }\n        float average = sum / grades.Length;\n        gradesList =\
    \ grades.Select(g => CalculateLetterGrade(g, average)).ToList();\n    }\n    return\
    \ gradesList.ToArray();\n}\n/*\n    This is the main function that takes the grades\
    \ and the average\n    and calculates the letter grades\n*/\nstring CalculateLetterGrade(float\
    \ grade, float average) \n{\n    if (grade < 0)\n    {\n        return \"D-\"\
    ;\n    }\n    else if (grade >= 0 && grade <= average)\n    {\n        return\
    \ \"A+\";\n    }\n    else if (grade > average && grade <= 2.3)\n    {\n     \
    \   return \"A\";\n    }\n    else if (grade > 2.3 && grade <= 2.7)\n    {\n \
    \       return \"A-\";\n    }\n    else if (grade > 2.7 && grade <= 3.3)\n   \
    \ {\n        return \"B+\";\n    }\n    else if (grade > 3.3 && grade <= 3.7)\n\
    \    {\n        return \"B\";\n    }\n    else if (grade > 3.7 && grade <= 4.0)\n\
    \    {\n        return \"B-\";\n    }\n    else if (grade > 4.0 && grade <= 4.7)\n\
    \    {\n        return \"C+\";\n    }\n    else if (grade > 4.7 && grade <= 5.3)\n\
    \    {\n        return \"C\";\n    }\n    else if (grade > 5.3 && grade <= 5.7)\n\
    \    {\n        return \"C-\";\n    }\n    else\n    {\n        return \"D\";\n\
    \    }\n}\n/*\n    This method should return the sum of the grades\n    \n*/\n\
    float CalculateSum(List<float> grades) \n{\n    float sum = 0;\n    for (int i\
    \ = 0; i < grades.Count; i++)\n    {\n        sum += grades[i];\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ q dscore=0 tags=c# |>\n<| a tags=c# |>\nYou can do it\
    \ with a single loop:\n<code>\npublic static string CalculateLetterGrade(float\
    \ grade, float average) \n{\n    if (grade < 0)\n    {\n        return \"D-\"\
    ;\n    }\n    else if (grade >= 0 && grade <= average)\n    {\n        return\
    \ \"A+\";\n    }\n    else if (grade > average && grade <= 2.3)\n    {\n     \
    \   return \"A\";\n    }\n    else if (grade > 2.3 && grade <= 2.", "{\n    int\
    \ len = grades.length;\n    \n    int[] gpa_grades = new int[len];\n    int gpa_sum\
    \ = 0;\n    int i = 0;\n    for (float f : grades) {\n        gpa_sum += f;\n\
    \        gpa_grades[i] = gpa_sum;\n        i++;\n    }\n    \n    string[] grades_arr\
    \ = new string[len];\n    int total_gpa = gpa_grades[gpa_grades.length - 1];\n\
    \    \n    for (float f : grades) {\n        if (f == 0) {\n            grades_arr[i]\
    \ = \"E\";\n            continue;\n        }\n        int i = gpa_grades.IndexOf(total_gpa);\n\
    \        grades_arr[i] = \"D-\";\n        total_gpa += f;\n    }\n    \n    return\
    \ grades_arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis should have been a\
    \ comment, not an answer.\n<|/ c |>\n<| c |>\nHonestly, I didn't even notice that\
    \ this was a Python question. I'm too slow today.\n<|/ c |>\n<| c |>\nI did some\
    \ editing. I guess I'm too sleepy.\n<|/ c |>\n<| c |>\nWow, this is really cool!\
    \ I only had to use it once for my first project, but now that I'm back, I'll\
    \ use it. I appreciate it!\n<|/ c |>\n<| a |>\n<code>\ndef calculate_grade(grade):\n\
    \    grades = {\n        0: \"F\",\n        2.0: \"A\",\n        3.0: \"A-\",\n\
    \        4.0: \"B+\",\n        5.0: \"B\",\n        6.0: \"B-\",\n        7.0:\
    \ \"C+\",\n        8.0: \"C\",\n        9.0: \"C-\",\n        10.0: \"D\",\n \
    \       11.0: \"D+\"\n    }\n    return grades[grade]", "{\n    string[] result\
    \ = new string[grades.Length];\n    \n    for (int i = 0; i < grades.Length; i++)\n\
    \    {\n        result[i] = String.Empty;\n        \n        if (grades[i] < 2.3)\n\
    \        {\n            result[i] = \"D-\";\n        }\n        else if (grades[i]\
    \ < 2.7)\n        {\n            result[i] = \"D\";\n        }\n        else if\
    \ (grades[i] < 3.0)\n        {\n            result[i] = \"C\";\n        }\n  \
    \      else if (grades[i] < 3.3)\n        {\n            result[i] = \"C+\";\n\
    \        }\n        else if (grades[i] < 3.7)\n        {\n            result[i]\
    \ = \"C+\";\n        }\n        else if (grades[i] < 4.0)\n        {\n       \
    \     result[i] = \"B-\";\n        }\n        else if (grades[i] < 4.3)\n    \
    \    {\n            result[i] = \"B+\";\n        }\n        else if (grades[i]\
    \ < 4.7)\n        {\n            result[i] = \"B+\";\n        }\n        else\
    \ if (grades[i] < 5.0)\n        {\n            result[i] = \"A-\";\n        }\n\
    \        else if (grades[i] < 5.3)\n        {\n            result[i] = \"A+\"\
    ;\n        }\n        else if (grades[i] < 5.7)\n        {\n            result[i]\
    \ = \"A+\";\n        }\n        else if (grades[i] < 6.0)\n        {\n       \
    \     result[i] = \"A\";\n        }\n        else if (grades[i] < 6.3)\n     \
    \   {\n            result[i] = \"A+\";\n        }\n        else if (grades[i]\
    \ < 6.7)\n        {\n            result[i] = \"A+\";\n        }\n        else\n\
    \        {\n            result[i] = \"A\";\n        }\n    }\n    \n    return\
    \ result;\n}", "{\n    string grade = \"\";\n    \n    for(int i=0;i<grades.length;i++)\
    \ \n    {\n        if(grades[i]>0)\n        {\n            grade = grade + \"\
    + \"+grades[i];\n        }\n        else\n        {\n            grade = grade\
    \ + grades[i];\n        }\n    }\n    \n    for(int i=grade.length();i>=0;i--)\
    \ \n    {\n        if(grade[i]==\"+\")\n        {\n            grade = grade +\
    \ \"-\" + grade[i+1];\n        }\n    }\n    \n    return grade;\n}", "{\n   \
    \ int counter = 0;\n    \n    for(int i = 0; i < grades.length; i++)\n    {\n\
    \        while(grades[i] < 3.7)\n        {\n            if(counter != 0)\n   \
    \         {\n                counter--;\n            }\n            else\n   \
    \         {\n                counter++;\n            }\n        }\n    }\n   \
    \ \n    string[] letterGrades = new string[4];\n    \n    for(int i = 0; i < letterGrades.length;\
    \ i++)\n    {\n        if(grades[i] >= 4.0 && grades[i] < 3.7)\n        {\n  \
    \          letterGrades[i] = \"A+\";\n        }\n        else if(grades[i] >=\
    \ 3.7 && grades[i] < 3.3)\n        {\n            letterGrades[i] = \"A\";\n \
    \       }\n        else if(grades[i] >= 3.3 && grades[i] < 3.0)\n        {\n \
    \           letterGrades[i] = \"A-\";\n        }\n        else if(grades[i] >=\
    \ 3.0 && grades[i] < 2.7)\n        {\n            letterGrades[i] = \"B+\";\n\
    \        }\n        else if(grades[i] >= 2.7 && grades[i] < 2.3)\n        {\n\
    \            letterGrades[i] = \"B\";\n        }\n        else if(grades[i] >=\
    \ 2.3 && grades[i] < 2.0)\n        {\n            letterGrades[i] = \"B-\";\n\
    \        }\n        else if(grades[i] >= 2.0 && grades[i] < 1.7)\n        {\n\
    \            letterGrades[i] = \"C+\";\n        }\n        else if(grades[i] >=\
    \ 1.7 && grades[i] < 1.3)\n        {\n            letterGrades[i] = \"C\";\n \
    \       }\n        else if(grades[i] >= 1.3 && grades[i] < 1.0)\n        {\n \
    \           letterGrades[i] = \"C-\";\n        }\n        else if(grades[i] >=\
    \ 1.0 && grades[i] < 0.7)\n        {\n            letterGrades[i] = \"D+\";\n\
    \        }\n        else if(grades[i] >= 0.7 && grades[i] < 0.0)\n        {\n\
    \            letterGrades[i] = \"D\";\n        }\n        else if(grades[i] ==\
    \ 0.0)\n        {\n            letterGrades[i] = \"D-\";\n        }\n        else\n\
    \        {\n            letterGrades[i] = \"E\";\n        }\n    }\n    \n   \
    \ return letterGrades;\n}\n/*\n    The functions below are called during the course\
    \ of the program to \n    allow the user to enter in grades and display the GPAs\
    \ and letter grades\n    */", "{\n    \n    float sum = 0;\n    foreach (float\
    \ grade in grades) {\n        sum += grade;\n    }\n    float average = sum/grades.Length;\n\
    \    \n    string lettergrade;\n    if (average < 4.0) \n    {\n        lettergrade\
    \ = \"A+\";\n    }\n    else if (average >= 4.0 && average < 5.0) \n    {\n  \
    \      lettergrade = \"A\";\n    }\n    else if (average >= 5.0 && average < 6.0)\n\
    \    {\n        lettergrade = \"A-\";\n    }\n    else if (average >= 6.0 && average\
    \ < 7.0)\n    {\n        lettergrade = \"B+\";\n    }\n    else if (average >=\
    \ 7.0 && average < 8.0)\n    {\n        lettergrade = \"B\";\n    }\n    else\
    \ if (average >= 8.0 && average < 9.0)\n    {\n        lettergrade = \"B-\";\n\
    \    }\n    else if (average >= 9.0 && average < 10.0)\n    {\n        lettergrade\
    \ = \"C+\";\n    }\n    else if (average >= 10.0 && average < 11.0)\n    {\n \
    \       lettergrade = \"C\";\n    }\n    else if (average >= 11.0 && average <\
    \ 12.0)\n    {\n        lettergrade = \"C-\";\n    }\n    else if (average >=\
    \ 12.0 && average < 13.0)\n    {\n        lettergrade = \"D+\";\n    }\n    else\
    \ if (average >= 13.0 && average < 14.0)\n    {\n        lettergrade = \"D\";\n\
    \    }\n    else if (average >= 14.0 && average < 15.0)\n    {\n        lettergrade\
    \ = \"D-\";\n    }\n    else\n    {\n        lettergrade = \"E\";\n    }\n   \
    \ return lettergrade;\n}\n/* \n    Write a function called letter_grade that takes\
    \ a vector of GPAs as \n    its input argument, calculates the average GPA from\
    \ the GPA vector and \n    returns the letter grade according to the GPA average.\
    \ \n    \n    Example:\n    >>> letter_grade([4.0, 3L, 1.7, 2L, 3.5])\n    [\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]\n*/\nstring[] letter_grade(float[] grades)\n\
    {\n    \n    float average = grades.Average();\n    string lettergrade;\n    if\
    \ (average < 4.0) \n    {\n        lettergrade = \"A+\";\n    }\n    else if (average\
    \ >= 4.0 && average < 5.0) \n    {\n        lettergrade = \"A\";\n    }\n    else\
    \ if (average >= 5.0 && average < 6.0)\n    {\n        lettergrade = \"A-\";\n\
    \    }\n    else if (average >= 6.0 && average < 7.0)\n    {\n        lettergrade\
    \ = \"B+\";\n    }\n    else if (average >= 7.0 && average < "]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
