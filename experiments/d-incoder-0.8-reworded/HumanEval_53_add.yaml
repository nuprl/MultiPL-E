name: HumanEval_53_add
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n   \
  \ >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long\
  \ x, long y) \n"
tests: "unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
  \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
  \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
  }\nvoid main(){}"
completions: ["{\n    return x + y;\n}\n/*\nAdd two numbers and save the result back\
    \ to x\n    >>> add(2L, 3L, &4L)\n    True\n    \n*/", "{\n    return x + y;\n\
    }\n/*\nAdd two numbers a and b using \"short int\" arithmetic for speed\n    >>>\
    \ add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n    Use \"-\" instead\
    \ of \"+\" for negative numbers\n    >>> add(-2L, 3L)\n    -3L\n    \n    Use\
    \ \"/\" to perform integer division\n    >>> add(2L, 7L / 4)\n    9L\n    \n \
    \   \n    \n    Add two numbers a and b using \"long int\" arithmetic for speed\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n    Use \"-\"\
    \ instead of \"+\" for negative numbers\n    >>> add(-2L, 3L)\n    -3L\n    \n\
    \    Use \"/\" to perform integer division\n    >>> add(2L, 7L / 4)\n    9L\n\
    \    \n    \n    \n    Add two numbers a and b using \"int\" arithmetic for speed\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n    Use \"-\"\
    \ instead of \"+\" for negative numbers\n    >>> add(-2L, 3L)\n    -3L\n    \n\
    \    Use \"/\" to perform integer division\n    >>> add(2L, 7L / 4)\n    9L\n\
    \    \n    \n    \n    Add two numbers a and b using \"long\" arithmetic for speed\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n    Use \"-\"\
    \ instead of \"+\" for negative numbers\n    >>> add(-2L, 3L)\n    -3L\n    \n\
    \    Use \"/\" to perform integer division\n    >>> add(2L, 7L / 4)\n    9L\n\
    \    \n    \n    \n    Add two numbers a and b using \"float\" arithmetic for\
    \ speed\n    >>> add(2.0L, 3.0L)\n    5.5L\n    >>> add(5.5L, 7.0L)\n    12.5L\n\
    \    \n    Use \"-\" instead of \"+\" for negative numbers\n    >>> add(-2.0L,\
    \ 3.0L)\n    -3.0L\n    \n    Use \"/\" to perform integer division\n    >>> add(2.0L,\
    \ 7.0L / 4.0)\n    9.0L\n    \n    \n    \n    Add two numbers a and b using \"\
    double\" arithmetic for speed\n    >>> add(2.0, 3.0)\n    5.5\n    >>> add(5.5,\
    \ 7.0)\n    12.5\n    \n    Use \"", "{\n    long ret = x + y;\n    //printf(\"\
    %ld %ld\\n\", x, y);\n    return ret;\n}", "{\n    return std.math.add(x, y);\n\
    }", "{\n\tif (y == 0) \n\t\treturn x;\n\treturn x + y;\n}", "{\n    int carry\
    \ = add(x & 0x80000000, y & 0x80000000);\n    return x ^ y ^ carry;\n}\n/*\nAdd\
    \ two numbers x and y\n    x ^ y = x + y + x\n    x + y = z\n    x + y + x = z\n\
    \    \n    Note carry can be 1 only if both numbers are negative\n    \n    http://stackoverflow.com/questions/9122094/the-correct-way-to-add-and-subtract-2-64-bit-integers-in-c\n\
    */", "{\n\tif (y > x) \n\t{\n\t\tlong temp = x;\n\t\tx = y;\n\t\ty = temp;\n\t\
    }\n\treturn x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    >>> multiply(5L, 7L)\n    20L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    8L\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n\treturn x / y;\n}\n/*\nRound a number to the nearest integer\n\
    \    \n    >>> round(3.1)\n    3L\n    >>> round(3.5)\n    4L\n    \n*/\nlong\
    \ round(long x) \n{\n\treturn std.math.round(x);\n}\n/*\nGet the absolute value\
    \ of a number\n    \n    >>> abs(3.1)\n    3L\n    >>> abs(-3.1)\n    3L\n   \
    \ \n*/\nlong abs(long x) \n{\n\treturn std.math.abs(x);\n}", "{\n  long sum =\
    \ x + y;\n  if (sum >= M) sum -= M;\n  if (sum < -M) sum += M;\n  return sum;\n\
    }", "{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n*/\nlong multiply(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2L,\
    \ 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n*/\nlong divide(long x, long y)\
    \ \n{\n    return x / y;\n}\n/*\nGet the remainder of dividing x by y\n    >>>\
    \ remainder(2L, 3L)\n    1L\n    >>> remainder(5L, 7L)\n    2L\n*/\nlong remainder(long\
    \ x, long y) \n{\n    return x % y;\n}\n/*\nGet the modulus of dividing x by y\n\
    \    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n    3L\n*/\nlong modulus(long\
    \ x, long y) \n{\n    return y * (x / y);\n}\n/*\nCompare two numbers to see which\
    \ is greater\n    >>> compare(3L, 5L)\n    -1L\n    >>> compare(7L, 3L)\n    1L\n\
    */", "{\n\treturn x + y;\n}", "{\n\treturn x + y;\n}\n/*\nAdd two numbers x and\
    \ y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/", "{\n\
    \  return x + y;\n}", "{\n  return x + y;\n}\n</cell>\n<cell>\n%pragma  kernel\
    \ -fopenmp\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2) num_threads(2)\
    \ \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", add(i, i));\n  }\n\
    </cell>\n<cell>\n%pragma  omp parallel for collapse(2) num_threads(2) \n  for\
    \ (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", i + i);\n  }\n</cell>\n<cell>\n\
    %pragma  omp parallel for collapse(2) num_threads(2) \n  for (int i = 0; i < 10;\
    \ i++) {\n    printf(\"%ld\\n\", i + i + i);\n  }\n</cell>\n<cell>\n%pragma  omp\
    \ parallel for collapse(2) num_threads(2) \n  for (int i = 0; i < 10; i++) {\n\
    \    printf(\"%ld\\n\", 2 * i + 1);\n  }\n</cell>\n<cell>\n%pragma  omp parallel\
    \ for collapse(2) num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"\
    %ld\\n\", i + 2 * i + 1);\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {\n    printf(\"%ld\\n\", -(i\
    \ + 2 * i + 1));\n  }\n</cell>\n<cell>\n%pragma  omp parallel for collapse(2)\
    \ num_threads(2) \n  for (int i = 0; i < 10; i++) {", "{\n   return (x + y);\n\
    }\n/*\nSubtract two numbers x and y\n    >>> sub(2L, 3L)\n    1L\n    >>> sub(5L,\
    \ 7L)\n    8L\n    \n*/\nlong sub(long x, long y) \n{\n   return (x - y);\n}\n\
    /*\nMultiply two numbers x and y\n    >>> mul(2L, 3L)\n    6L\n    >>> mul(5L,\
    \ 7L)\n    42L\n    \n*/\nlong mul(long x, long y) \n{\n   return (x ^ y);\n}\n\
    /*\nDivide two numbers x and y\n    >>> div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n\
    \    3L\n    \n*/\nlong div(long x, long y) \n{\n   return (x / y);\n}\n/*\nRound\
    \ number x to y decimal places\n    >>> round(12.345)\n    12.34\n    >>> round(12.346)\n\
    \    12.35\n    \n*/\ndouble round(double x, int y) \n{\n   return std::round(x);\n\
    }\n/*\nFloor number x to y decimal places\n    >>> floor(12.345)\n    12\n   \
    \ >>> floor(12.346)\n    12\n    \n*/\ndouble floor(double x, int y) \n{\n   return\
    \ std::floor(x);\n}\n/*\nCeil number x to y decimal places\n    >>> ceil(12.345)\n\
    \    13\n    >>> ceil(12.346)\n    13\n    \n*/\ndouble ceil(double x, int y)\
    \ \n{\n   return std::ceil(x);\n}\n/*\nTruncate number x to y decimal places\n\
    \    >>> trunc(12.345)\n    12\n    >>> trunc(12.346)\n    12\n    \n*/\ndouble\
    \ trunc(double x, int y) \n{\n   return std::trunc(x);\n}\n/*\nConvert double\
    \ x to hexadecimal string\n    >>> double2hex(0.34)\n    '01000000000000000'\n\
    \    \n*/\nstring double2hex(double x) \n{\n   string result;\n   char buf[21]\
    \ = \"\";\n   double sign = x < 0.0 ? -1.0 : 1.0;\n   double absx = abs(x);\n\
    \   while (absx >= 0x1.0p64) \n   {\n      buf[18] = '0' + absx / 0x1.0p64;\n\
    \      buf[17] = buf[16];\n      absx -= absx / 0x1.0p64;\n      buf[16] = buf[15];\n\
    \      absx -= absx / 0x1.0p64;\n      buf[15] = buf[14];\n", "{\n    return x\
    \ + y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(6L, 5L)\n    3L\n  \
    \  >>> divide(6L, 7L)\n    2L\n    \n*/\nlong divide(long x, long y) \n{\n   \
    \ return x / y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    >>> multiply(6L, 5L)\n    30L\n    \n*/\nlong multiply(long x, long\
    \ y) \n{\n    return x * y;\n}\n/*\nGet the remainder of dividing x and y \n \
    \   >>> remainder(2L, 3L)\n    1L\n    >>> remainder(6L, 5L)\n    2L\n    \n*/\n\
    long remainder(long x, long y) \n{\n    return x % y;\n}\n/*\nGet the sign of\
    \ x\n    >>> sign(2L)\n    1L\n    >>> sign(-2L)\n    -1L\n    \n*/\nlong sign(int\
    \ x) \n{\n    return (x > 0 ? 1L : -1L);\n}\n/*\nCheck if x is even\n    >>> is_even(4L)\n\
    \    1L\n    >>> is_even(5L)\n    0L\n    \n*/\nlong is_even(int x) \n{\n    return\
    \ x & 1;\n}\n/*\nCheck if x is odd\n    >>> is_odd(4L)\n    0L\n    >>> is_odd(5L)\n\
    \    1L\n    \n*/\nlong is_odd(int x) \n{\n    return !(is_even(x));\n}\n/*\n\
    Return the sum of the squares of the numbers within a given interval\n    >>>\
    \ sum([1L, 2L, 5L, 10L, 20L, 50L])\n    55L\n    >>> sum([4L, 8L, 16L, 32L, 64L,\
    \ 128L])\n    160L\n    \n*/\nlong sum(List<int> list) \n{\n    int sum = 0;\n\
    \    for (long i : list) sum += i;\n    return sum;\n}\n/*\nReturn the sum of\
    \ all numbers in a given interval\n    >>> sum([1L, 2L, 5L, 10L, 20L, 50L])\n\
    \    55L\n    >>> sum([4L, 8L, 16L, 32L, 64L, 128L])\n    160L\n    \n*/\nlong\
    \ sum(long startL, long endL) \n{\n    return sum(List(start, start + end));\n\
    }\n/*\nReturn the sum of the squares of all numbers in a given interval\n    >>>\
    \ sum([1L, 2L, 5L, 10L, 20L, 50L])\n    55L\n    >>> sum([4L, 8L, 16L, 32L, 64L,\
    \ 128L", "{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n    >>> subtract(3L,\
    \ 5L)\n    1L\n    >>> subtract(7L, 5L)\n    4L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    21L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> divide(7L, 5L)\n    3L\n    \n*/\nlong divide(long x, long y) \n\
    {\n\treturn x / y;\n}\n/*\nFind the maximum of two numbers x and y\n    >>> max(3L,\
    \ 5L)\n    5L\n    >>> max(7L, 5L)\n    7L\n    \n*/\nlong max(long x, long y)\
    \ \n{\n\treturn x > y ? x : y;\n}\n/*\nFind the minimum of two numbers x and y\n\
    \    >>> min(3L, 5L)\n    3L\n    >>> min(7L, 5L)\n    7L\n    \n*/\nlong min(long\
    \ x, long y) \n{\n\treturn x < y ? x : y;\n}\n/*\nFind the square root of a number\n\
    \    >>> sqrt(17L)\n    2.82842712474619008L\n    \n*/\nlong sqrt(long x) \n{\n\
    \treturn std.math.sqrt(x);\n}\n/*\nCompute the Euclidean distance between two\
    \ points (x, y)\n    >>> distance(2L, 3L)\n    2.5\n    \n*/\ndouble distance(long\
    \ x, long y) \n{\n\treturn std.math.distance(x, y);\n}\n/*\nCount the number of\
    \ occurrences of an element in a list\n    >>> count(2L, 2L)\n    1\n    >>> count(2L,\
    \ 3L)\n    0\n    \n*/", "{\n\treturn x + y;\n}", "{\n    return x + y;\n}\n/*\
    \ \nMultiply two numbers x and y\n    >>> multiply(3L, 7L)\n    21L\n*/\nlong\
    \ multiply(long x, long y) \n{\n    return x * y;\n}\n/* \nDivide two numbers\
    \ x and y\n    >>> divide(10L, 3L)\n    7L\n*/\nlong divide(long x, long y) \n\
    {\n    return x / y;\n}\n/* \nCalculate the modulo of x and y\n    >>> mod(10L,\
    \ 3L)\n    1L\n*/\nlong mod(long x, long y) \n{\n    return x % y;\n}\n/* \nPrint\
    \ the string representation of the number x\n    >>> (10L).printString()\n   \
    \ 10\n*/", "{\n    int xs = signbit(x) & 0x7f;\n    int ys = signbit(y) & 0x7f;\n\
    \    \n    int xd = (xs << 1) | x; //x\n    int yd = (ys << 1) | y; //y\n    \n\
    \    int res = (xd + yd) % 10; //res\n    return res * signbit(res);\n}", "{\n\
    \    return x + y;\n}", "{\n    return x + y;\n}", "{\n\treturn x + y;\n}", "{\n\
    \    long sum;\n    // assert(x < 65536 && y < 65536);\n    sum = (long) x + y;\n\
    \    return sum;\n}", "{\n    int sign = 1;\n    if(x < 0) sign = -1;\n    if(x\
    \ == 0) return y;\n    if(y < 0) return -(sign * y);\n    if(y == 0) return 0;\n\
    \    if(y == 1) return x;\n    return sign * (x * add(x, y - 1));\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nthanks bro i was thinking to implement that logic\
    \ by myself but i was looking for shortcuts.\n<|/ c |>\n<| c |>\nThis is really\
    \ helpful. Can you please explain the algorithm for adding/multiplying?\n<|/ c\
    \ |>\n<| a tags=java,algorithm dscore=2 |>\nUsing java stream it can be done as\
    \ follows:\n<code>\nimport static java.util.stream.Collectors.*;", "{\n    long\
    \ sum = x + y;\n    long z = 0;\n    int n;\n    \n    if (sum >= 0L) {\n    \
    \    n = sum;\n    } else {\n        n = -(sum);\n    }\n    \n    while ((n &\
    \ 1L) == 0L) {\n        n >>= 1;\n        z |= 1L;\n    }\n    \n    return z\
    \ | (z >> 1);\n}", "{\n   return x + y;\n}", "{\n    return x + y;\n}", "{\n \
    \   if (x == y)\n        return x;\n    long result = x + y;\n    if (result >\
    \ LONG_MAX)\n        result += LONG_MAX;\n    return result;\n}\n/*\nMultiply\
    \ two numbers x and y\n    \n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(7L,\
    \ 5L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n\
    }\n/*\nDivide two numbers x and y\n    \n    >>> divide(2L, 3L)\n    1L\n    >>>\
    \ divide(7L, 5L)\n    3L\n    \n*/\nlong divide(long x, long y) \n{\n    if (x\
    \ == 0)\n        throw new InvalidArgumentException(\"Cannot divide by zero\"\
    );\n    return x / y;\n}\n/*\nCalculate the greatest common divisor of numbers\
    \ a and b\n    \n    >>> gcd_helper(2L, 3L)\n    1L\n    >>> gcd_helper(7L, 5L)\n\
    \    3L\n    \n*/\nlong gcd_helper(long a, long b)\n{\n    while (b != 0)\n  \
    \  {\n        if (b == 1)\n            return a;\n        a %= b;\n    }\n   \
    \ return a;\n}\n/*\nCalculate the least common multiple of two numbers\n    \n\
    \    >>> lcm(2L, 3L)\n    6L\n    >>> lcm(7L, 5L)\n    42L\n    \n*/\nlong lcm(long\
    \ a, long b) \n{\n    return a * b / (gcd_helper(a, b) * gcd_helper(b, a));\n\
    }\n/*\nReturn the number of least significant bits of x\n    \n    >>> count_leading_zero_bits(0L)\n\
    \    0\n    >>> count_leading_zero_bits(1L)\n    0\n    >>> count_leading_zero_bits(1L<<32)\n\
    \    32\n    >>> count_leading_zero_bits(1L<<64)\n    64\n    \n*/", "{\n  return\
    \ x + y;\n}", "{\n    long result;", "{\n    return x+y;\n}", "{\n\tlong sum =\
    \ x + y;\n\treturn sum;\n}\n/*\nAdd two numbers a and b\n    >>> add(1, 5)\n \
    \   6\n*/", "{\n    return x + y;\n}", "{\n\tlong result;\n\tif (x >= 0) {\n\t\
    \tresult = x + y;\n\t} else {\n\t\tresult = x - y;\n\t\tif (result < 0) {\n\t\t\
    \tresult += (-1L);\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tif (x < 0) \n\t\t\
    x = -x;\n\tif (y < 0) \n\t\ty = -y;\n\t\n\treturn x + y;\n}", "{\n    if (x ==\
    \ 0 && y == 0) return 0;\n    if (x == 0) return y;\n    if (y == 0) return x;\n\
    \    return x + y;\n}", "{\n\tif (y == 0) \n\t\treturn x;\n\treturn x + y;\n}\n\
    /*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(2L,\
    \ 0L)\n    2L\n    >>> multiply(-2L, 3L)\n    -2L\n    >>> multiply(0L, 3L)\n\
    \    0L\n    \n*/\nlong multiply(long x, long y) \n{\n\tif (y == 0) \n\t\treturn\
    \ x;\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n\
    \    1L\n    >>> divide(2L, 0L)\n    2L\n    \n*/\nlong divide(long x, long y)\
    \ \n{\n\tif (y == 0) \n\t\treturn 0;\n\treturn x / y;\n}\n/*\nGet absolute value\
    \ of number x\n    >>> abs(2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n\treturn\
    \ x < 0 ? -x : x;\n}\n/*\nCheck if number x is even\n    >>> isEven(2L)\n    0L\n\
    \    >>> isEven(10L)\n    1L\n    \n*/\nlong isEven(long x) \n{\n\treturn x%2\
    \ == 0;\n}\n/*\nGet bits of number x in a uint\n    >>> getBits(2L, 0L)\n    0L\n\
    \    >>> getBits(2L, 1L)\n    1L\n    >>> getBits(10L, 0L)\n    10L\n    >>> getBits(10L,\
    \ 1L)\n    10L\n    \n*/\nuint getBits(long x, uint bits) \n{\n\treturn ((uint)(x>>bits)&(1<<bits))\
    \ != 0;\n}\n/*\nGet bits of number x in a ushort \n>>> getBits(2L, 1L)\n1L\n>>>\
    \ getBits(10L, 1L)\n1L\n>>> \n*/\nushort getBits(long x, ushort bits) \n{\n\t\
    return ((ushort)(x>>bits)&(1<<bits)) != 0;\n}\n/*\nGet bits of number x in a uint\n\
    >>> getBits(2L, 0L)\n0L\n>>> getBits(2L, 1L)\n1L\n>>> getBits(10L, 0L)\n10L\n\
    >>> getBits(10L, 1L)\n10L\n>>> \n*/\nuint getBits(long x, uint bits) \n{\n\treturn\
    \ ((uint)(x>>bits)&(1<<bits)) != 0;\n}\n/*\nGet bits of number x in a ushort \n\
    >>> getBits(2L, 1L)\n", "{\n\treturn x + y;\n}\n/*\nAdd two numbers a and b and\
    \ returns the result modulo m\n    >>> add(2L, 3L, 3L)\n    6L\n    \n*/\nlong\
    \ add_mod(long a, long b, long m)\n{\n\tif (a == 0)\n\t\treturn b;\n\telse\n\t\
    \treturn ((a * b) % m);\n}", "{\n    return x + y;\n}", "{\n    if (x == 0) return\
    \ y;\n    if (y == 0) return x;\n    long result = 0;\n    if (x > y) {\n    \
    \    long t = x;\n        x = y;\n        y = t;\n    }\n    \n    // find common\
    \ factors\n    while (y > 0) {\n        // y = y/x;\n        if (y > x / y) {\n\
    \            x = x; // x = x/y;\n        } else {\n            y = y; // y = y/x;\n\
    \        }\n    }\n    \n    // use common factors\n    result += x;\n    result\
    \ += y;\n    return result;\n}\n/*\nCompare two numbers\n    >>> cmp(3L, 6L)\n\
    \    -1\n    \n    Compare and swap\n    >>> cmp(3L, 6L, true)\n    1\n    \n\
    */", "{\n    return x + y;\n}\n/*\nDivide two numbers x and y\n    \n    You can\
    \ not divide by zero\n    >>> div(2L, 0L)\n    Traceback (most recent call last):\n\
    \        ...\n    ZeroDivisionError: division by zero\n    \n    You can't divide\
    \ by negative numbers\n    >>> div(-2L, 0L)\n    Traceback (most recent call last):\n\
    \        ...\n    ZeroDivisionError: division by zero\n    \n    >>> div(2L, -2L)\n\
    \    -4L\n    \n*/\nlong div(long x, long y) \n{\n    long m;\n    long n;\n \
    \   \n    if(y != 0) {\n        n = x;\n        m = y;\n        \n        while(m\
    \ != 0) {\n            n /= m;\n            m %= m;\n        }\n        \n   \
    \     return n;\n    }\n    else {\n        throw \"division by zero\";\n    }\n\
    }\n/*\nReturn the remainder when dividing x by y\n    \n    >>> rem(5L, 7L)\n\
    \    3L\n    \n    When x is smaller than y\n    \n    >>> rem(1L, 3L)\n    0L\n\
    \    \n*/\nlong rem(long x, long y) \n{\n    if(x < y) {\n        throw \"reminder\
    \ by zero\";\n    }\n    else {\n        return x%y;\n    }\n}\n/*\nCheck if a\
    \ number is even\n    \n    >>> even(10L)\n    True\n    \n    You can not check\
    \ if a number is not even\n    >>> even(-10L)\n    Traceback (most recent call\
    \ last):\n        ...\n    Exception: 10 is not even\n    \n*/", "{\n    return\
    \ x + y;\n}", "{\n\tauto xs = x + y;\n\tauto ys = x - y;\n\tauto xsq = x * x;\n\
    \tauto ysq = y * y;\n\tauto res = (xs * ys + xsq + ysq) / (2 * y);\n\treturn res;\n\
    }\n/*\nAdd two numbers x and y as 64-bit floating points\n*/\ndouble add(double\
    \ x, double y) \n{\n\treturn x + y;\n}", "{\n    return x + y;\n}", "{\n    //\
    \ TODO: use SIMD support\n    long sum = (long) (((long) x) + ((long) y));\n \
    \   return sum;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n\
    \    6L\n    \n*/\nlong multiply(long x, long y) \n{\n    // TODO: use SIMD support\n\
    \    long product = (long) (((long) x) * ((long) y));\n    return product;\n}\n\
    /*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    \n*/\nlong\
    \ divide(long x, long y) \n{\n    // TODO: use SIMD support\n    long quotient\
    \ = (long) (((long) x) / ((long) y));\n    return quotient;\n}\n/*\nCalculate\
    \ quotient of two numbers\n    >>> quotient(2L, 3L)\n    1L\n    \n*/\nlong quotient(long\
    \ x, long y) \n{\n    // TODO: use SIMD support\n    long quotient = (long) (((long)\
    \ x) / ((long) y));\n    return quotient;\n}", "{\n    return x + y;\n}", "{\n\
    \treturn x + y;\n}", "{\n    if(x < y) return add(y, x);\n    if(y < x) return\
    \ add(x, y);\n    if(x < 0)\n    {\n        if(y >= 0) return -add(abs(x), y);\n\
    \        return add(abs(x), 0);\n    }\n    if(y < 0)\n    {\n        if(x >=\
    \ 0) return -add(y, abs(x));\n        return add(y, abs(x));\n    }\n    return\
    \ x+y;\n}\n// Multiply two numbers x and y\n/*\n    >>> multiply(2L, 3L)\n   \
    \ 6L\n    >>> multiply(3L, 2L)\n    6L\n    \n*/\nlong multiply(long x, long y)\
    \ \n{\n    return x * y;\n}\n// Find smallest integer greater than or equal to\
    \ a number\n/*\n    >>> smallest(5L)\n    6L\n    >>> smallest(3L)\n    3L\n \
    \   \n*/\nlong smallest(long x) \n{\n    long res = x;\n    for(long i = 1;; i++)\
    \ \n    {\n        if(res > x) \n        {\n            break;\n        }\n  \
    \      res = add(res, 1);\n    }\n    return res;\n}\n// Find largest integer\
    \ less than or equal to a number\n/*\n    >>> largest(5L)\n    5L\n    >>> largest(7L)\n\
    \    7L\n    \n*/\nlong largest(long x) \n{\n    long res = x;\n    for(long i\
    \ = 1;; i++) \n    {\n        if(res < x) \n        {\n            break;\n  \
    \      }\n        res = add(res, 1);\n    }\n    return res;\n}\n// Find the absolute\
    \ value of x\n/*\n    >>> abs(10L)\n    10L\n    >>> abs(-10L)\n    -10L\n   \
    \ \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n// Find the square\
    \ root of x, using binary search\n/*\n    >>> sqrt(10L)\n    2.0\n    >>> sqrt(9L)\n\
    \    1.41421356237\n    >>> sqrt(1L)\n    1.0\n    \n*/\ndouble sqrt(double x)\
    \ \n{\n    double start = 0;\n    double stop = x;\n    double mid;\n    while(start\
    \ <= stop) \n    {\n        mid = (stop + start) / 2;\n        if(mid * mid <\
    \ x) return mid;\n        if(mid * mid > x) start = mid + 1;\n        else stop\
    \ = mid - 1;\n    }\n    return x;\n}", "{\n\treturn x + y;\n}\n/*\nMultiply two\
    \ numbers x and y\n    >>> multiply(3L, 2L)\n    5L\n    >>> multiply(4L, 3L)\n\
    \    10L\n    \n*/\nlong multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\n\
    Divide two numbers x and y\n    >>> divide(2L, 3L)\n    3L\n    >>> divide(5L,\
    \ 7L)\n    2L\n    \n*/\nlong divide(long x, long y) \n{\n\tif (y == 0) \n\t{\n\
    \t\tthrow runtime_error(\"divide by zero\");\n\t}\n\telse\n\t\treturn x / y;\n\
    }\n/*\nMultiply two numbers x and y and return the result as a long\n    >>> multiply(3L,\
    \ 2L)\n    5L\n    \n*/\nlong multiply(long x, long y) \n{\n\treturn x * y;\n\
    }\n/*\nAdd two numbers x and y and return the result as a long\n    >>> add(2L,\
    \ 3L)\n    5L\n    \n*/\nlong add(long x, long y) \n{\n\treturn x + y;\n}\n/*\n\
    Multiply two numbers x and y and return the result as a long\n    >>> multiply(3L,\
    \ 2L)\n    5L\n    \n*/\nlong multiply(long x, long y) \n{\n\treturn x * y;\n\
    }\n/*\nDivide two numbers x and y and return the result as a long\n    >>> divide(2L,\
    \ 3L)\n    3L\n    \n*/\nlong divide(long x, long y) \n{\n\tif (y == 0) \n\t{\n\
    \t\tthrow runtime_error(\"divide by zero\");\n\t}\n\telse\n\t\treturn x / y;\n\
    }\n/*\nDivide two numbers and return the result as a double\n    >>> divide(3.5,\
    \ 1.5)\n    0.5\n    \n*/\ndouble divide(double x, double y) \n{\n\tif (y == 0)\
    \ \n\t{\n\t\tthrow runtime_error(\"divide by zero\");\n\t}\n\telse\n\t\treturn\
    \ x / y;\n}\n/*\nMultiply two numbers and return the result as a double\n    >>>\
    \ multiply(3.5d, 1.5d)\n    0.5\n    \n*/\ndouble multiply(double x, double y)\
    \ \n{\n\treturn x * y;\n}\n/*\nAdd two numbers and return the result as a double\n\
    \    >>> add(3.5d, 1.5d)\n    5.5\n    \n*/\ndouble add(double x, double y) \n\
    {\n\treturn x + y;\n}", "{\n    return x + y;\n}\n</code>\n<|/ a |>\n<| a tags=type-conversion,c++,c#,java,types\
    \ |>\nThere is no direct way in Java to compare two primitive types, except for\
    \ == comparison. \nYou can achieve this using Wrapper classes or you can simply\
    \ use == operator to compare two primitive types\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nAs others have mentioned Java does not provide a direct way to compare primitives.\
    \ There are a number of ways to compare primitives in Java, including:", "{\n\
    \    long sum;\n    sum = (long) x + y;\n    return sum;\n}\n</cell>\n<cell>\n\
    import std.conv;\nimport std.random;\nimport std.file;", "{\n    return x + y;\n\
    }", "{\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\tif (y == 0) {\n\t\treturn x;\n\t\
    }\n\treturn x + y;\n}\n/* \nSubtract two numbers x and y\n    >>> subtract(2L,\
    \ 3L)\n    -1L\n    >>> subtract(1L, 3L)\n    0L\n*/\nlong subtract(long x, long\
    \ y) \n{\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\tif (y == 0) {\n\t\treturn x;\n\
    \t}\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    >>> multiply(3L, 5L)\n    10L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\tif (y == 0) {\n\t\treturn\
    \ x;\n\t}\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2L,\
    \ 3L)\n    -1L\n    >>> divide(2L, 5L)\n    -1L\n*/\nlong divide(long x, long\
    \ y) \n{\n\tif (x == 0) {\n\t\treturn y;\n\t}\n\tif (y == 0) {\n\t\treturn x;\n\
    \t}\n\treturn x / y;\n}\n/*\nRaise x to the power of y\n    >>> power(2L, 3L)\n\
    \    8L\n    >>> power(5L, 3L)\n    81L\n    \n*/\nlong power(long x, long y)\
    \ \n{\n\tif (y == 0) {\n\t\treturn 1;\n\t}\n\treturn x * power(x, y - 1);\n}\n\
    /*\nReturn whether a number is odd\n    >>> isOdd(3L)\n    True\n    >>> isOdd(5L)\n\
    \    False\n    \n*/", "{\n  return x + y;\n}", "{\n  return x + y;\n}\n//import\
    \ std.typecons;\nimport std.conv;\nimport std.range;\n//import std.math;\n//import\
    \ std.conv;\n//import std.math;\n//import std.conv;\n//import std.typecons;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\n//import\
    \ std.range;\nimport std.conv;\nimport std.range;\nimport std.conv;\n//import\
    \ std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\n\
    import std.range;\nimport std.conv;\n//import std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport std.range;\nimport std.conv;\n\
    import std.conv;\nimport std.range;\nimport std.conv;\nimport std.conv;\nimport\
    \ std.range;\nimport std.conv;\nimport std.conv;\nimport ", "{\n\treturn x + y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    \n\
    */\nlong multiply(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    2L\n    \n*/\nlong divide(long x, long\
    \ y) \n{\n\tif (y == 0) \n\t{\n\t\tthrow new DivisionByZeroException();\n\t}\n\
    \treturn x / y;\n}\n/*\nGet the absolute value of a number\n    >>> abs(7L)\n\
    \    7L\n    \n*/\nlong abs(long x) \n{\n\treturn x >= 0 ? x : -x;\n}\n/*\nGet\
    \ the integer square root of x\n    >>> sqrt(7L)\n    2L\n    \n*/\nlong sqrt(long\
    \ x) \n{\n\tlong r = 1;\n\twhile (x > 0)\n\t{\n\t\tlong next = x / r;\n\t\tif\
    \ (next < r) break;\n\t\tr = next;\n\t}\n\treturn r;\n}\n/*\nReturn the greatest\
    \ common divisor of x and y\n    >>> gcd(2L, 3L)\n    1L\n    \n*/\nlong gcd(long\
    \ x, long y) \n{\n\tlong r = y;\n\twhile (x > 0 && y > 0)\n\t{\n\t\tlong next\
    \ = x % y;\n\t\tx = y;\n\t\ty = next;\n\t}\n\treturn r;\n}\n/*\nReturn the least\
    \ common multiple of x and y\n    >>> lcm(2L, 3L)\n    2L\n    \n*/\nlong lcm(long\
    \ x, long y) \n{\n\treturn x * y / gcd(x, y);\n}\n/*\nCompute the modular exponentiation\
    \ of x by y to the modulus m.\n    >>> pow(2, 3)\n    8L\n    >>> pow(3, 3)\n\
    \    27L\n    \n*/\nlong pow(long x, long y, long m) \n{\n\tif (y == 0)\n\t{\n\
    \t\tthrow new DivisionByZeroException();\n\t}\n\tif (m == 0) \n\t{\n\t\tthrow\
    \ new ArithmeticException();\n\t}\n\treturn (x * y % m) % m;\n}\n/*\nCompute x\
    \ - y * floor(x / y) * floor(xy / m)\n    >>> divmod2(-7, 2)\n    (-8, 1)\n  \
    \  \n*/\npair<long, long> divmod2(long x, long y) \n{\n\tif (y >= 0)\n\t{\n\t\t\
    if (y & 1) \n\t\t{\n\t\t\treturn pair<long, long>((x % y), (x - (y / 2) * x));\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\treturn pair<long, long>((x % ", "{\n\tlong z;\n\t\
    \n\tif((x < 0) || (x >= std.math._MIN || y < 0 || y >= std.math._MAX))\n\t\tstd.signal.raise_exception();\n\
    \t\n\tif(y > 0)\n\t{\n\t\tz = x + y;\n\t\tif(z > std.math._MAX)\n\t\t\tstd.signal.raise_exception();\n\
    \t}\n\telse \n\t{\n\t\tz = x - y;\n\t\tif(z < 0)\n\t\t\tstd.signal.raise_exception();\n\
    \t}\n\t\n\treturn z;\n}", "{\n    return x + y;\n}", "{\n\tlong z;\n\tz = x +\
    \ y;\n\treturn z;\n}", "{\n    return x + y;\n}\n/*\nSubtract two numbers x and\
    \ y\n    >>> sub(2L, 3L)\n    -1L\n    >>> sub(5L, 7L)\n    6L\n*/\nlong sub(long\
    \ x, long y) \n{\n    return x - y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(4L, 6L)\n    24L\n    \n*/\nlong mul(long x, long y) \n{\n    return\
    \ x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(2L, 3L)\n    1L\n   \
    \ >>> div(7L, 2L)\n    3L\n    \n*/\nlong div(long x, long y) \n{\n    return\
    \ x / y;\n}\n/*\nRaise a number to the power of another number\n    >>> pow(6L,\
    \ 3L)\n    81L\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x, y) *\
    \ (long)Math._powy;\n}\n/*\nGet the absolute value of a number\n    >>> abs(-1L)\n\
    \    1L\n    >>> abs(2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n    return x\
    \ < 0 ? -x : x;\n}\n/*\nGet the negative of a number\n    >>> neg(-1)\n    -1L\n\
    \    >>> neg(-2)\n    -2L\n    \n*/\nlong neg(long x) \n{\n    return x < 0 ?\
    \ -x;\n}\n/*\nReturn the maximum of two numbers x and y\n    >>> max(2L, 3L)\n\
    \    3L\n    >>> max(7L, 2L)\n    2L\n    \n*/\nlong max(long x, long y) \n{\n\
    \    return x > y ? x : y;\n}\n/*\nReturn the minimum of two numbers x and y\n\
    \    >>> min(2L, 3L)\n    2L\n    >>> min(7L, 2L)\n    7L\n    \n*/\nlong min(long\
    \ x, long y) \n{\n    return x > y ? y : x;\n}\n/*\nReturn the absolute value\
    \ of a number rounded to nearest integer\n    >>> ceil(2L)\n    2L\n    >>> ceil(3L)\n\
    \    3L\n    >>> ceil(5L)\n    5L\n    >>> ceil(-2L)\n    0L\n    >>> ceil(-3L)\n\
    \    -1L\n    >>> ceil(-5L)\n    -1L\n    \n*/\nlong ceil(long x) \n{\n    return\
    \ x < 0 ? Math._ceilx : (long)x;\n}\n/*\nReturn the floor of a number rounded\
    \ to nearest integer\n    >>> floor(2L)\n    2L\n    >>> floor(3L)\n    1L\n \
    \   >>> floor(5L)", "{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n\
    \    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\n\
    long multiply(long x, long y)\n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    3L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nGet the absolute\
    \ value of a number\n    >>> abs(4L)\n    4L\n    \n*/\nlong abs(long x)\n{\n\
    \    return x < 0 ? -x : x;\n}\n/*\nRound a number to a whole number within a\
    \ given precision\n    >>> round(5.63234)\n    6.0\n    >>> round(5.63235)\n \
    \   5.6\n    >>> round(5.63235, 2)\n    5.63\n    \n*/\nlong round(double x, int\
    \ precision)\n{\n    return std.math.round(x * std.typecons.pow2(std.math.pow2(precision)));\n\
    }\n/*\nReturn the index of the first occurrence of a specified value in a sequence\n\
    \    >>> indexOf([1,2,3], 2)\n    0\n    \n*/\nlong indexOf(Tuple array, T value)\n\
    {\n    int i = 0;\n    for (; i < array.Length; ++i)\n    {\n        if (array[i]\
    \ == value) return i;\n    }\n    return -1;\n}\n/*\nReturn the last occurrence\
    \ of a specified value in a sequence\n    >>> lastIndexOf([1,2,3], 2)\n    1\n\
    \    \n*/\nlong lastIndexOf(Tuple array, T value)\n{\n    int i = array.Length;\n\
    \    for (; i > 0; --i)\n    {\n        if (array[i] == value) return i;\n   \
    \ }\n    return -1;\n}\n/*\nReturn the position of the first occurrence of a specified\
    \ value in a sequence.\n    >>> indexOf([1,2,3], 2)\n    1\n    >>> indexOf([1,2,3],\
    \ 4)\n    -1\n    \n*/", "{\n    if (x > y)\n        return add(y, x);\n    return\
    \ x + y;\n}", "{\n    if(!isFinite(x))\n        return isFinite(y) ? y : x;\n\
    \    if(!isFinite(y))\n        return x;\n    return x+y;\n}\n// import std.math.fs;\n\
    /*\nReturn factorial of a number\n    >>> factorial(3L)\n    6L\n    \n*/\nlong\
    \ factorial(long n) \n{\n    if(isFinite(n))\n        return factorial(n-1)*n;\n\
    \    else \n        return 1;\n}\n// import std.math.fs;\n/*\nMultiply two numbers\
    \ together \n    \n*/\nlong mul(long x, long y) \n{\n    if(!isFinite(x))\n  \
    \      return isFinite(y) ? y : x;\n    if(!isFinite(y))\n        return x;\n\
    \    return x*y;\n}\n// import std.math.fs;\n/*\nReturn nth root\n    \n*/\nlong\
    \ nthRoot(long n, long x) \n{\n    if(isFinite(n))\n        return nthRoot(n,\
    \ x)/x;\n    if(!isFinite(x))\n        return x;\n    return x;\n}\n// import\
    \ std.math.fs;\n/*\nReturn logarithm of a number with a base\n    >>> log(10,\
    \ 5)\n    2.0\n    \n*/\ndouble log(double x, double base) \n{\n    if(isFinite(x))\n\
    \    {\n        if(isFinite(base))\n        {\n            if(base == 10.0)\n\
    \                return log(x, base);\n            else if(base == 2.0)\n    \
    \            return log(x, base);\n            else\n                return log(x,\
    \ base)/log(base);\n        }\n        else\n        {\n            return log(x,\
    \ base);\n        }\n    }\n    else \n    {\n        return x;\n    }\n}\n//\
    \ import std.math.fs;\n/*\nReturn logarithm of n with a base\n    \n*/\ndouble\
    \ logn(int n, double base) \n{\n    if(isFinite(n))\n    {\n        if(isFinite(base))\n\
    \        {\n            if(base == 10.0)\n                return log(x, base);\n\
    \            else if(base == 2.0)\n                return log(x, base);\n    \
    \        else\n                return log(x, base)/log(base);\n        }\n   \
    \     else\n        {\n            return log(x, base);\n        }\n    }\n  \
    \  else \n    {\n        return 1;\n    }\n}\n// import std.math.fs;\n/*\nReturn\
    \ the rounded value of a number\n    >>> round(1.1)\n    2.0\n    >>> round(1.1)\n\
    \    2.0\n    >>> round(1.1)\n    2.0\n    >>> round(1.1)\n    2.0\n    >>> round(1.1)\n\
    \    2.0\n    \n*/\ndouble round(double x) \n{", "{\n    return x + y;\n}\n/*\n\
    Multiply two numbers x and y\n    >>> multiply(3L, 5L)\n    15L\n    >>> multiply(4L,\
    \ 2L)\n    8L\n    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n\
    }\n/*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n    2L\n    >>> divide(5L,\
    \ 3L)\n    1L\n    \n*/\nlong divide(long x, long y)\n{\n    if (y == 0)\n   \
    \     throw new ArithmeticException(\"division by zero\");\n    return x / y;\n\
    }\n/*\nGet the remainder of a division\n    >>> remainder(5L, 3L)\n    2L\n  \
    \  \n*/\nlong remainder(long x, long y)\n{\n    return x % y;\n}\n/*\nGet the\
    \ number of times the number x is divisible by y \n    >>> remainder(5L, 3L)\n\
    \    2L\n    \n*/\nlong modulus(long x, long y)\n{\n    return x % y;\n}\n/*\n\
    Round a number to the nearest integer to the power of 2\n    >>> round(2L)\n \
    \   2L\n    >>> round(3L)\n    4L\n    \n*/\nlong round(long x)\n{\n    return\
    \ std.math.toNearestInt(x);\n}\n/*\nReturn the number of times the number x is\
    \ divisible by y \n    >>> remainder(5L, 3L)\n    2L\n    \n*/", "{\n    if(x\
    \ >= y)\n        return x + y;\n    return x - y;\n}", "{\n    long z;\n    z\
    \ = x + y;\n    return z;\n}", "{\n    return x + y;\n}", "{\n    return x + y;\n\
    }\n/*\nSubtract two numbers x and y\n    >>> sub(2L, 3L)\n    -1L\n    >>> sub(5L,\
    \ 7L)\n    -1L\n    \n*/\nlong sub(long x, long y) \n{\n    return x - y;\n}\n\
    /*\nMultiply two numbers x and y\n    >>> mul(3L, 2L)\n    6L\n    >>> mul(4L,\
    \ 2L)\n    8L\n    \n*/\nlong mul(long x, long y) \n{\n    return x * y;\n}\n\
    /*\nDivide two numbers x and y\n    >>> div(4L, 2L)\n    1L\n    >>> div(5L, 7L)\n\
    \    3L\n    \n*/\nlong div(long x, long y) \n{\n    return x / y;\n}\n/*\nCalculate\
    \ factorial\n    >>> fact(5L)\n    120L\n    >>> fact(3L)\n    6L\n    \n*/\n\
    long fact(long x) \n{\n    if (x == 1L)\n        return 1L;\n    else\n      \
    \  return x * fact(x-1);\n}\n/*\nFind GCD of two numbers\n    >>> gcd(6, 12L)\n\
    \    2L\n    \n*/\nlong gcd(long x, long y) \n{\n    if (y % x == 0)\n       \
    \ return y;\n    else\n        return gcd(y, x);\n}\n/*\nCalculate GCD for two\
    \ numbers x and y\n    >>> gcd_fact(6L, 12L)\n    2L\n    \n*/\nlong gcd_fact(long\
    \ x, long y) \n{\n    return gcd(x, y);\n}\n/*\nCalculate absolute value\n   \
    \ >>> abs(1L)\n    1L\n    >>> abs(-1L)\n    1L\n    \n*/\nlong abs(long x) \n\
    {\n    if (x == 0L)\n        return -1L;\n    else\n        return x;\n}\n/*\n\
    Saturate number\n    >>> saturate(1L)\n    1L\n    >>> saturate(-1L)\n    0L\n\
    \    \n*/\nlong saturate(long x) \n{\n    if (x < 0L)\n        return 0L;\n  \
    \  else\n        return x;\n}\n/*\nCalculate the absolute value of x\n    >>>\
    \ abs_sat(1L)\n    1L\n    >>> abs_sat(-1L)\n    1L\n    \n*/\nlong abs_sat(long\
    \ x) \n{\n    return abs(x);\n}\n/*\nSign of x\n    >>> sign(-1)\n    -1\n   \
    \ >>> sign(0)\n    0\n    >>> sign(1)\n    1\n    \n*/\nlong sign(long x) \n{\n\
    \    if (x == 0L)\n        return 0L;\n    else if (x > 0L)\n", "{\n\tlong sum\
    \ = x+y;\n\tif(x>0 && y>0 && x==y)\n\t\treturn sum;\n\treturn sum%10;\n}", "{\n\
    \    if (x == 0 && y == 0)\n        return 0;\n    \n    int xsign = x < 0 ? -1\
    \ : 1;\n    int ysign = y < 0 ? -1 : 1;\n    \n    if (xsign == ysign)\n     \
    \   return x + y;\n    \n    long remainder = 0;\n    int xint = abs(x);\n   \
    \ int yint = abs(y);\n    \n    if (xint > yint)\n        remainder = y;\n   \
    \ else\n        remainder = x;\n    \n    if (remainder == 0)\n        return\
    \ 0;\n    \n    int rint = (remainder % 10);\n    int borrow = (remainder / 10);\n\
    \    \n    int rsign = remainder < 0 ? -1 : 1;\n    \n    if (rsign == xsign)\n\
    \        return rint + borrow + ysign * yint;\n    \n    return rint + borrow\
    \ + xsign * xint;\n}", "{\n    long sum;\n    sum = x+y;\n    if(sum >= 10000000000000L)\
    \ \n    {\n        sum = -(sum%10000000000000L);\n    }\n    return sum;\n}\n\
    /*\nMultiply a number by a power of 2\n    >>> mul(4L, 2L)\n    8L\n    >>> mul(4L,\
    \ 3L)\n    24L\n    \n*/\nlong mul(long x, long y) \n{\n    long product;\n  \
    \  product = x*y;\n    if(product >= 10000000000000L)\n    {\n        product\
    \ = -(product%10000000000000L);\n    }\n    return product;\n}\n/*\nDivide two\
    \ numbers.  Will return a floating-point value if the divisor is 0.\n    >>> div(7L,\
    \ 2L)\n    2L\n    >>> div(7L, 0L)\n    7L\n    \n*/\nfloat div(float x, float\
    \ y) \n{\n    float divisor;\n    divisor = x/y;\n    if(divisor == 0)\n    {\n\
    \        return 0;\n    }\n    return divisor;\n}\n/*\nModulus of two numbers\n\
    \    >>> mod(2L, 2L)\n    0L\n    >>> mod(2L, 3L)\n    1L\n    \n*/\nlong mod(long\
    \ x, long y) \n{\n    long remainder;\n    remainder = x-y;\n    if(remainder\
    \ >= 10000000000000L) \n    {\n        remainder = -(remainder%10000000000000L);\n\
    \    }\n    return remainder;\n}\n/*\nDivisor of a number from another number\n\
    \    >>> div(7L, 2L)\n    2L\n    \n*/\nlong div(long x, long y) \n{\n    long\
    \ divisor;\n    divisor = y/x;\n    return divisor;\n}\n/*\nGet the remainder\
    \ when dividing two numbers\n    >>> rem(2L, 2L)\n    0L\n    >>> rem(2L, 3L)\n\
    \    1L\n    \n*/\nlong rem(long x, long y) \n{\n    long remainder;\n    remainder\
    \ = y-x;\n    return remainder;\n}\n/*\nGet the modulus of two numbers\n    >>>\
    \ mod(2L, 2L)\n    0L\n    >>> mod(2L, 3L)\n    1L\n    \n*/\nlong mod(long x,\
    \ long y) \n{\n    long remainder;\n    remainder = x-y;\n    return remainder;\n\
    }\n/*\nGet the power of 2 that comes after a number\n    >>> pow2(1)\n    1L\n\
    \    >>> pow2(2)\n    2L\n", "{\n    return x + y;\n}", "{\n    if (x < y)\n \
    \       return x + y;\n    else \n        return x - y;\n}", "{\n    // TODO:\
    \ Implement me!\n    long result = 0;\n    for (long i = 0; i < 32; ++i) {\n \
    \       if (x & 1) result = result + y;\n        x >>= 1;\n        y >>= 1;\n\
    \    }\n    return result;\n}", "{\n    int i, carry = 1L;\n    long total;\n\
    \    \n    for (i = 0; i <= 31; i++)\n    {\n        total = (carry + (x & 31))\
    \ + (y & 31) + i;\n        carry = total / 26;\n        y -= carry << 1;\n   \
    \     x >>= 2;\n    }\n    \n    return x + y;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nAwesome solution. I had to tweak it a little to work for 32-bit integers.\
    \ I guess my main issue was that I was getting wrong answers by using just `int`s\n\
    <|/ c |>\n<| c |>\nThanks for the feedback. I didn't do all that math when I answered\
    \ this question so I didn't have time to test it. I did come up with some 32-bit\
    \ code. I've added it to my answer.\n<|/ c |>\n<| a dscore=4 |>\nHere is a solution\
    \ that avoids branches (tested with gcc 4.9.0 on x86)\n<code>\n#include <stdint.h>",
  "{\n   return x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    >>> multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n   return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    2.0\n    >>> divide(2L, 0L)\n    Traceback (most recent\
    \ call last):\n        ...\n    ZeroDivisionError\n    >>> divide(5L, 7L)\n  \
    \  3.0\n    \n*/\nfloat divide(float x, float y) \n{\n   return x / y;\n}\n/*\n\
    Get an arbitrary large number as an int object\n    >>> get_int(2**63)\n    18446744073709551616\n\
    \    \n*/", "{\n\treturn x + y;\n}\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long add(long long\
    \ x, long long y) \n{\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n    \n*/\n\
    long subtract(long x, long y) \n{\n\treturn x - y;\n}\n/*\nSubtract two numbers\
    \ x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L, 7L)\n    3L\n\
    \    \n*/\nlong long subtract(long long x, long long y) \n{\n\treturn x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    49L\n    \n*/\nlong multiply(long x, long y) \n{\n\treturn\
    \ x * y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n\
    \    >>> multiply(5L, 7L)\n    49L\n    \n*/\nlong long multiply(long long x,\
    \ long long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n\treturn x / y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(2L, 3L)\n    1L\n    >>> divide(5L, 7L)\n    2L\n    \n*/\nlong long\
    \ divide(long long x, long long y) \n{\n\treturn x / y;\n}\n/*\nModulus returns\
    \ remainder of x / y.\n    >>> modulus(2L, 3L)\n    1L\n    >>> modulus(5L, 7L)\n\
    \    2L\n    \n*/\nlong modulus(long x, long y) \n{\n\treturn x % y;\n}\n/*\n\
    Modulus returns remainder of x / y.\n    >>> modulus(2L, 3L)\n    1L\n    >>>\
    \ modulus(5L, 7L)\n    2L\n    \n*/\nlong long modulus(long long x, long long\
    \ y) \n{\n\treturn x % y;\n}\n/*\nInteger square\n    >>> square(42)\n    84\n\
    \    \n*/\nlong square(long x) \n{", "{\n    if(x < y) \n        return y + x;\n\
    \    else \n        return x;\n}\nlong add2(long x, long y)\n{\n    if (x > y)\
    \ {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    return\
    \ x + y;\n}", "{\n    if (y == 0) \n    {\n        throw new IllegalArgumentException(\"\
    Cannot add 0 with \" + y);\n    }\n    return x + y;\n}\n// end snippet", "{\n\
    \tif (x == 0)\n\t{\n\t\tif (y > 0)\n\t\t\treturn y;\n\t\telse\n\t\t\treturn -y;\n\
    \t}\n\telse\n\t{\n\t\tif (y > 0)\n\t\t\treturn x + y;\n\t\telse\n\t\t\treturn\
    \ x - y;\n\t}\n}", "{\n    return x + y;\n}", "{\n\treturn x + y;\n}\n/*\nAdd\
    \ two signed numbers x and y\n    >>> add(3L, 3L)\n    5L\n    >>> add(3L, -5L)\n\
    \    -3L\n    \n*/\nlong addSlong(long x, long y) \n{\n\treturn x + y;\n}\n/*\n\
    Subtract two numbers x and y\n    >>> sub(-2L, 3L)\n    1L\n    \n*/\nlong sub(long\
    \ x, long y) \n{\n\treturn x - y;\n}\n/*\nSubtract two signed numbers x and y\n\
    \    >>> sub(3L, 3L)\n    1L\n    \n*/\nlong subSlong(long x, long y) \n{\n\t\
    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(3L, 3L)\n    9L\n\
    \    \n*/\nlong mul(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> div(17L, 3L)\n    6L\n    \n*/\nlong div(long x, long y) \n\
    {\n\treturn x / y;\n}\n/*\nDivide two signed numbers x and y\n    >>> div(17L,\
    \ 3L)\n    6L\n    \n*/\nlong divSlong(long x, long y) \n{\n\treturn x / y;\n\
    }\n/*\nRaise a number to a power using logarithms and exponent\n    >>> log(12L,\
    \ 3L)\n    7L\n    \n*/\nlong log(long x, long y) \n{\n\treturn std::log(x) /\
    \ std::log(y);\n}\n/*\nLog of a signed number\n    >>> log(3L)\n    1.6094379124341\n\
    \    \n*/\nlong logSlong(long x) \n{\n\treturn std::log(x);\n}\n/*\nAdd two numbers\
    \ x and y\n    >>> saturateAdd(2L, 3L)\n    3L\n    \n*/\nlong saturateAdd(long\
    \ x, long y) \n{\n\tif (x < 0) return x + y;\n\treturn x + y;\n}\n/*\nAdd two\
    \ signed numbers x and y\n    >>> saturateAdd(3L, 3L)\n    5L\n    \n*/\nlong\
    \ saturateAddSlong(long x, long y) \n{\n\tif (x < 0) return x + y;\n\treturn x\
    \ + y;\n}\n/*\nSubtract two numbers x and y\n    >>> saturateSub(-2L, 3L)\n  \
    \  4L\n    \n*/\nlong saturateSub(long x, long y) \n{\n\tif (x < 0) return x -\
    \ y;\n\treturn x - y;\n}\n/*\n", "{\n    return x+y;\n}\n</code>\nAnd to answer\
    \ the question about how to implement this in Python, here's a quick sketch:\n\
    <code>\nimport math\n# add two numbers\ndef add(x, y):\n   return x + y\n# multiply\
    \ two numbers\ndef multiply(x, y):\n   return x * y\n# subtract two numbers\n\
    def subtract(x, y):\n   return x - y\n# multiply by n\ndef multiply(n, x):\n \
    \  return n * x\n# divide x by n\ndef divide(x, n):\n   return x / n\n# find floor\
    \ of n\ndef floor(n):\n   return math.floor(n)\n# find ceiling of n\ndef ceiling(n):\n\
    \   return math.ceiling(n)\n# find modulus of n\ndef mod(x,y):\n   return x %\
    \ y\n# find remainder of x/y \ndef remainder(x,y):\n   return x % y\n# find remainder\
    \ of n/x \ndef remainder(n, x):\n   return n % x\n# square n \ndef square(n):\n\
    \   return n * n\n# cube n \ndef cube(n):\n   return n * n * n\n# find the remainder\
    \ of x/y, ignoring any floating point \n# inaccuracies \ndef remainder(x,y):\n\
    \   return x % y - floor(x/y)*y\n# factorial n\ndef factorial(n):\n   if n < 1:\n\
    \       return 1\n   else:\n       return n * factorial(n-1)", "{\n    return\
    \ x + y;\n}\n/* \nAdd two numbers x and y and return the result \n    x is greater\
    \ than y if and only if x >= y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n\
    \    12L\n*/\nlong add_equal(long x, long y) \n{\n    return x >= y ? x : y;\n\
    }\n/* \nAdd two numbers x and y and return the result \n    x is less than y if\
    \ and only if x <= y\n    >>> add(2L, 3L)\n    3L\n    >>> add(5L, 7L)\n    6L\n\
    */\nlong add_less(long x, long y) \n{\n    return x <= y ? x : y;\n}\n/* \nAdd\
    \ two numbers x and y and return the result \n    x is greater than y if and only\
    \ if x > y\n    >>> add(2L, 3L)\n    4L\n    >>> add(5L, 7L)\n    8L\n*/\nlong\
    \ add_more(long x, long y) \n{\n    return x > y ? x : y;\n}\n/* \nAdd two numbers\
    \ x and y and return the result \n    x is less than y if and only if x < y\n\
    \    >>> add(2L, 3L)\n    3L\n    >>> add(5L, 7L)\n    6L\n*/\nlong add_less(long\
    \ x, long y) \n{\n    return x < y ? x : y;\n}\n/* \nAdd two numbers x and y and\
    \ return the result \n    x is greater than y if and only if x > y\n    >>> add(2L,\
    \ 3L)\n    4L\n    >>> add(5L, 7L)\n    8L\n*/\nlong add_more(long x, long y)\
    \ \n{\n    return x > y ? x : y;\n}\n/* \nAdd two numbers x and y and return the\
    \ result \n    x is less than y if and only if x < y\n    >>> add(2L, 3L)\n  \
    \  3L\n    >>> add(5L, 7L)\n    6L\n*/\nlong add_less(long x, long y) \n{\n  \
    \  return x < y ? x : y;\n}\n/* \nAdd two numbers x and y and return the result\
    \ \n    x is greater than y if and only if x > y\n    >>> add(2L, 3L)\n    4L\n\
    \    >>> add(5L, 7L)\n    8L\n*/\nlong add_more(long x, long y) \n{\n    return\
    \ x > y ? x : y;\n}\n/* \nAdd two numbers x and y and return the result \n   \
    \ x is less than y if and only if x < y\n    >>> add(2L, 3L)\n    3L\n    >>>\
    \ add(5L, 7L)\n    6L\n*/\nlong add_less(long x, long y) \n{\n    return x < ",
  "{\n    return x + y;\n}", "{\n    if (y == 0) return x;\n    if (x == y) return\
    \ x;\n    return add(mul(x, std.intmask(y - 1)), y) + x;\n}", "{\n    if (x <\
    \ y)\n        std.swap(x, y);\n    if (x == 0)\n        return y;\n    if (y >\
    \ 0)\n        return x;\n    return x - y;\n}", "{\n\tlong xx = x >> 32;\n\tlong\
    \ yy = y >> 32;\n\treturn (xx ^ yy) + ~(xx + yy);\n}", "{\n    if (x >= 0 && y\
    \ >= 0) return x + y;\n    if (x < 0 && y >= 0) return -x + -y;\n    if (x < 0\
    \ && y < 0) return -x - -y;\n    if (x >= 0 && y < 0) return -x + y;\n    throw\
    \ Error(\"Illegal arguments\");\n}", "{\n\tlong z;\n\tz = x + y;\n\treturn z;\n\
    }\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n\
    \    12L\n    \n*/\ndouble add(double x, double y) \n{\n\tdouble z;\n\tz = x +\
    \ y;\n\treturn z;\n}", "{\n   long ret = 0;\n   \n   while(x || y) {\n      if(x)\
    \ {\n         ret += (x & 1L) << 1;\n         x >>= 1L;\n      }\n      if(y)\
    \ {\n         ret += (y & 1L) << 1;\n         y >>= 1L;\n      }\n   }\n   return\
    \ ret;\n}", "{\n\treturn x + y;\n}", "{\n    int i, sum = 0;\n    for (i = 0;\
    \ i < 64; i++)\n    {\n        sum += x >> i;\n        x &= (x ^ y) >> i;\n  \
    \  }\n    return sum;\n}", "{\n    return x + y;\n}", "{\n    return x + y;\n}",
  "{\n    return std.math.add(x, y);\n}", "{\n    long result;\n    \n    /* Handle\
    \ overflow when adding Longs.*/\n    \n    /* Ensure that x and y are non-negative\
    \ numbers.  */\n    if (x >= LONG_MAX) \n    {\n        if (y > LONG_MAX) \n \
    \       {\n            result = LONG_MAX;\n        }\n        else \n        {\n\
    \            result = x;\n        }\n    }\n    else if (y >= LONG_MAX) \n   \
    \ {\n        result = y;\n    }\n    else \n    {\n        if (x > y) \n     \
    \   {\n            result = x - y;\n        }\n        else \n        {\n    \
    \        result = y - x;\n        }\n    }\n    \n    return result;\n}", "{\n\
    \    long res = x + y;\n    if (res < 0) res = -x;\n    return res;\n}", "{\n\
    \    if (x < 0) \n    {\n        throw new RuntimeException(\"Error: Negative\
    \ number!\");\n    }\n    if (y == 0)\n    {\n        throw new RuntimeException(\"\
    Error: Can't add 0!\");\n    }\n    long product = x + y;\n    return product;\n\
    }", "{\n    return x + y;\n}\n/*\nReturn the square root of a number\n    >>>\
    \ sqrt(14L)\n    9L\n*/\nlong sqrt(long x) \n{\n    return std.math.sqrt(x);\n\
    }\n/*\nConvert a number to an integer string\n    >>> str(12)\n    '12'\n    \n\
    */\nstring str(long x) \n{\n    return str(x, 10L);\n}\n/*\nConvert a number to\
    \ an integer string\n    >>> str(12.0)\n    '12'\n    >>> str(12.123)\n    '12.123'\n\
    \    \n*/\nstring str(double x) \n{\n    return str(x, 10); //TODO: use decimal\
    \ instead of double\n}\n/*\nConvert a number to a decimal string\n    >>> str(12.123)\n\
    \    '12.123'\n    \n*/\nstring str(long x, int precision) \n{\n    return std.string.format(std.format.fmt(precision,\
    \ \"\"), x);\n}\n/*\nConvert a number to a decimal string\n    >>> str(12.123,\
    \ 3)\n    '12.123'\n    \n*/\nstring str(double x, int precision) \n{\n    return\
    \ str(x, precision).c_str();\n}\n/*\nConvert two numbers to a decimal string\n\
    \    >>> str(12.123, 3)\n    '12.123'\n    \n*/\nstring str(double x, int precision,\
    \ string sep) \n{\n    return std.string.format(std.format.fmt(precision, sep),\
    \ x);\n}\n/*\nConvert a number to an integer string\n    >>> str(12.123)\n   \
    \ '12.123'\n    \n*/\nstring str(long x, int precision, string sep) \n{\n    return\
    \ str(x, precision, sep).c_str();\n}\n/*\nConvert a number to an integer string\n\
    \    >>> str(12.123, 3, '.')\n    '12.123'\n    \n*/\nstring str(double x, int\
    \ precision, string sep) \n{\n    return str(x, precision, sep).c_str();\n}\n\
    /*\nConvert a number to an integer string\n    >>> str(12.123, 3, '.', 2)\n  \
    \  '12.123'\n    \n*/\nstring str(double x, int precision, string sep, int scale)\
    \ \n{\n    return std.string.format(std.format.fmt(precision, sep, scale), x);\n\
    }\n/*\nConvert a number to an octal string\n    >>> str(0o404)\n    '0o404'\n\
    \    \n*/\nstring str(int x) \n{\n    return str(x, 8L);\n}\n/*\nConvert a number\
    \ to an octal string\n    >>> str(0o404)\n    '0o404'\n    \n*/\nstring str(int\
    \ x, int ", "{\n   if(x < y)\n      return x + y;\n   else\n      return y - x;\n\
    }\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n\
    \    12L\n    \n*/\ndouble add(double x, double y) \n{\n   if(x < y)\n      return\
    \ x + y;\n   else\n      return y - x;\n}\n/*\nAdd a decimal number to an integer\
    \ and return a decimal number\n    >>> add(2L, 3.0)\n    5.0\n    >>> add(2, 3.0)\n\
    \    5.0\n    \n*/\ndouble add(int x, Decimal y) \n{\n   if(x < 0)\n   {\n   \
    \   return add(x.negate(), y.negate());\n   }\n   if(x > 0)\n   {\n      return\
    \ add(x.negate(), y);\n   }\n   return add(x, y.negate());\n}\n/*\nAdd two decimal\
    \ numbers\n    >>> add(Decimal('2'), Decimal('3'))\n    Decimal('5')\n    \n*/\n\
    Decimal add(Decimal x, Decimal y) \n{\n   return Decimal(add(x.value, y.value));\n\
    }\n/*\nAdd two decimal numbers\n    >>> add(Decimal('2'), Decimal('3'))\n    Decimal('5')\n\
    \    \n*/\nfloat add(float x, float y) \n{\n   return (x + y);\n}\n/*\nMultiply\
    \ two numbers x and y\n    >>> mul(2, 3)\n    6L\n    >>> mul(5.5, 7)\n    12.5\n\
    \    \n*/\nlong mul(long x, long y) \n{\n   return (x * y);\n}\n/*\nMultiply two\
    \ numbers x and y\n    >>> mul(2, 3)\n    6L\n    >>> mul(5.5, 7)\n    12.5\n\
    \    \n*/\ndouble mul(double x, double y) \n{\n   return (x * y);\n}\n/*\nMultiply\
    \ two numbers x and y\n    >>> mul(2, 3.0)\n    6.00\n    >>> mul(5.5, 7.0)\n\
    \    12.50\n    \n*/\nDecimal mul(Decimal x, Decimal y) \n{\n   return Decimal(mul(x.value,\
    \ y.value));\n}\n/*\nMultiply two numbers x and y\n    >>> mul(2, 3.0)\n    6.00\n\
    \    >>> mul(5.5, 7.0)\n    12.50\n    \n*/\nfloat mul(float x, float y) \n{\n\
    \   return (x * y);\n}\n/*\nDivide two numbers x and y\n    >>> div(2, 3)\n  \
    \  Decimal('1.5')\n    >>> div(5.5, 7)\n", "{\n    return x + y;\n}", "{\n   \
    \ long xx = x * x;\n    long yy = y * y;\n    if (xy % 2 != 0)\n    {\n      \
    \  xy += 1;\n    }\n    return (xx + yy);\n}", "{\n  return std.math.operator.add(x,y);\n\
    }", "{\n\treturn x + y;\n}", "{\n    // TODO: Rewrite using assembly instead of\
    \ unsafe code\n    long r;\n    // Ensure that the number fits in an int64\n \
    \   int64 xs = x & 0xffffffff00000000LL;\n    int64 ys = y & 0xffffffff00000000LL;\n\
    \    r = ((xs ^ ys) | (xs ^ ys) ^ xs) & 0xffffffff00000000LL;\n    return r;\n\
    }\n/*\nSubtract two numbers x and y\n    >>> subtract(2L, 3L)\n    -1L\n    >>>\
    \ subtract(1L, 7L)\n    -2L\n    \n*/\nlong subtract(long x, long y) \n{\n   \
    \ // TODO: Rewrite using assembly instead of unsafe code\n    long r;\n    //\
    \ Ensure that the number fits in an int64\n    int64 xs = x & 0xffffffff00000000LL;\n\
    \    int64 ys = y & 0xffffffff00000000LL;\n    r = ((xs ^ ys) | (xs ^ ys) ^ xs)\
    \ & 0xffffffff00000000LL;\n    return r;\n}\n/*\nMultiply two numbers x and y\n\
    \    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(1L, 7L)\n    21L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    // TODO: Rewrite using assembly instead\
    \ of unsafe code\n    long r;\n    // Ensure that the number fits in an int64\n\
    \    int64 xs = x & 0xffffffff00000000LL;\n    int64 ys = y & 0xffffffff00000000LL;\n\
    \    r = ((xs ^ ys) | (xs ^ ys) ^ xs) & 0xffffffff00000000LL;\n    return r;\n\
    }\n/*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(1L,\
    \ 7L)\n    1L\n    \n*/\nlong divide(long x, long y) \n{\n    // TODO: Rewrite\
    \ using assembly instead of unsafe code\n    long r;\n    // Ensure that the number\
    \ fits in an int64\n    int64 xs = x & 0xffffffff00000000LL;\n    int64 ys = y\
    \ & 0xffffffff00000000LL;\n    r = ((xs ^ ys) | (xs ^ ys) ^ xs) & 0xffffffff00000000LL;\n\
    \    return r;\n}\n/*\nReverse a number x\n    >>> reverse(4L)\n    4L\n    \n\
    */\nlong reverse(long x) \n{\n    // TODO: Rewrite using assembly instead of unsafe\
    \ code\n    int64 xs = x & 0xffffffff00000000LL;\n    int64 rs = (xs >> 63) &\
    \ 0x00000000ffffffffLL;\n    return rs;\n}\n/*", "{\n   return x+y;\n}\n/*\nSubtract\
    \ two numbers x and y\n    >>> sub(2L, 3L)\n    1L\n    >>> sub(5L, 7L)\n    -5L\n\
    \    \n*/\nlong sub(long x, long y) \n{\n   return x-y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> mul(4L, 2L)\n    8L\n    >>> mul(5L, 2L)\n    10L\n    \n*/\n\
    long mul(long x, long y) \n{\n   return x*y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> div(2L, 3L)\n    1L\n    >>> div(5L, 7L)\n    2L\n    \n*/\nlong\
    \ div(long x, long y) \n{\n   return x/y;\n}\n/*\nGet modulo remainder of division\
    \ x by y\n    >>> rdiv(2L, 3L)\n    1L\n    >>> rdiv(5L, 7L)\n    1L\n    \n*/\n\
    long rdiv(long x, long y) \n{\n   return (x%y);\n}\n/*\nGet modulo part of division\
    \ x by y\n    >>> rmod(2L, 3L)\n    2L\n    >>> rmod(5L, 7L)\n    3L\n    \n*/\n\
    long rmod(long x, long y) \n{\n   return (x%y);\n}\n/*\nGet the absolute value\
    \ of x\n    >>> abs(-12L)\n    12L\n    \n*/\nlong abs(long x) \n{\n   return\
    \ x;\n}\n/*\nGet the bit-wise AND of x and y\n    >>> and_(4L, 3L)\n    5L\n \
    \   >>> and_(7L, 3L)\n    2L\n    \n*/\nlong and_(long x, long y) \n{\n   return\
    \ x&y;\n}\n/*\nGet the bit-wise OR of x and y\n    >>> or_(8L, 3L)\n    8L\n \
    \   >>> or_(5L, 7L)\n    10L\n    \n*/\nlong or_(long x, long y) \n{\n   return\
    \ x|y;\n}\n/*\nGet the bit-wise XOR of x and y\n    >>> xor_(8L, 3L)\n    16L\n\
    \    >>> xor_(5L, 7L)\n    10L\n    \n*/\nlong xor_(long x, long y) \n{\n   return\
    \ x^y;\n}\n/*\nGet the bit-wise complement of x\n    >>> not(12L)\n    -12L\n\
    \    \n*/\nlong not(long x) \n{\n   return ~x;\n}\n", "{\n    return x + y;\n}",
  "{\n    int res;\n    switch(std.intCond(x) && std.intCond(y))\n    {\n    case\
    \ 0: res = x; break;\n    case 1: res = x + y; break;\n    case 2: res = x + y\
    \ + 1; break;\n    case 3: res = x + y + 1; break;\n    case 4: res = x - y -\
    \ 1; break;\n    case 5: res = x - y - 1; break;\n    case 6: res = x + y - 1;\
    \ break;\n    case 7: res = x + y - 1; break;\n    }\n    return res;\n}", "{\n\
    \    return x + y;\n}\n</code>\n<|/ a tags=c++,c++11 |>\n<| c |>\nThat's not C++.\
    \ Not sure how it compiles.\n<|/ c |>\n<| c |>\nThe point is that the code compiles\
    \ and works.\n<|/ c |>\n<| c |>\nI know, but I wouldn't suggest to someone who\
    \ doesn't even know what they are doing to use it. That's why I explicitly mentioned\
    \ the C++ way. Even the comments are pointing out that this is c++ not c\n<|/\
    \ c |>\n<| c |>\nFair enough. My point is that the code compiles and works, even\
    \ if it does not meet the OP's needs.\n<|/ c |>\n<| c |>\nOh sorry I didn't realize\
    \ you had a C++ answer. Sorry. :)\n<|/ c |>\n<| a tags=c++,c++11 |>\nIf you need\
    \ an expression of type long to be able to store a long literal (e.g. 2L), then\
    \ use a cast to convert the literal:\n<code>\nlong foo = static_cast<long>(2L);\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nI think he needs literal 2 cast to type long\
    \ (not literal 2 as int)\n<|/ c |>\n<| c |>\nWhy would he need that? `2` will\
    \ be implicitly casted to `long`. I don't think that's what the OP wants, though.\n\
    <|/ c |>\n<| c |>\nYes, OP wants literal `2` cast to `long`. You suggested the\
    \ same thing as me, but you posted it first :) I think your answer is the best\
    \ so far.\n<|/ c |>\n<| c |>\n: It was not exactly the same thing as you, but\
    \ the OP had a point that it was the best so far, so I suggested it to him. I\
    \ think it's worth noting that the accepted answer does not really answer the\
    \ OP's question.\n<|/ c |>\n<| c |>\nYour answer is a bit misleading because you\
    \ haven't mentioned that casting literal to long should be done with caution\n\
    <|/ c |>\n<| a tags=c++,c++11 |>\nFor integer literals, you can use a type conversion:\n\
    <code>\nlong x = 2L;\n</code>\nFor floating-point literals, it's much more complicated,\
    \ as you cannot use floating point literals interchangeably with integer literals.\n\
    <|/ a dscore=4 |>\n<| c |>\nIt's not exactly the same thing ", "{\n\tint op;\n\
    \tswitch (x)\n\t{\n\tcase 0:\n\t\tswitch (y)\n\t\t{\n\t\tcase 0:\n\t\t\treturn\
    \ 0L;\n\t\tcase 1:\n\t\t\treturn 1L;\n\t\tcase 2:\n\t\t\treturn 2L;\n\t\tcase\
    \ 3:\n\t\t\treturn 3L;\n\t\tcase 4:\n\t\t\treturn 4L;\n\t\tcase 5:\n\t\t\treturn\
    \ 5L;\n\t\tcase 6:\n\t\t\treturn 6L;\n\t\tcase 7:\n\t\t\treturn 7L;\n\t\tcase\
    \ 8:\n\t\t\treturn 8L;\n\t\tcase 9:\n\t\t\treturn 9L;\n\t\tdefault:\n\t\t\treturn\
    \ 10L;\n\t\t}\n\tcase 1:\n\t\treturn x + y;\n\tcase 2:\n\t\treturn x * y;\n\t\
    case 3:\n\t\treturn x - y;\n\tcase 4:\n\t\treturn x / y;\n\tcase 5:\n\t\treturn\
    \ x % y;\n\tcase 6:\n\t\treturn x - y;\n\tcase 7:\n\t\treturn x - y;\n\tcase 8:\n\
    \t\treturn x * y;\n\tcase 9:\n\t\treturn x * y;\n\tcase 10:\n\t\treturn x / y;\n\
    \tcase 11:\n\t\treturn x / y;\n\tcase 12:\n\t\treturn x % y;\n\tcase 13:\n\t\t\
    return x + y;\n\tcase 14:\n\t\treturn x + y;\n\tcase 15:\n\t\treturn x - y;\n\t\
    case 16:\n\t\treturn x - y;\n\tcase 17:\n\t\treturn x * y;\n\tcase 18:\n\t\treturn\
    \ x * y;\n\tcase 19:\n\t\treturn x / y;\n\tcase 20:\n\t\treturn x / y;\n\tcase\
    \ 21:\n\t\treturn x % y;\n\tcase 22:\n\t\treturn x - y;\n\tcase 23:\n\t\treturn\
    \ x - y;\n\tcase 24:\n\t\treturn x * y;\n\tcase 25:\n\t\treturn x * y;\n\tcase\
    \ 26:\n\t\treturn x / y;\n\tcase 27:\n\t\treturn x / y;\n\tcase 28:\n\t\treturn\
    \ x % y;\n\tcase 29:\n\t\treturn x - y;\n\tcase 30:\n\t\treturn x - y;\n\tcase\
    \ 31:\n\t\treturn x * y;\n\tcase 32:\n\t\treturn x * y;\n\tcase 33:\n\t\treturn\
    \ x / y;\n\tcase 34:\n\t\treturn x / y;\n\tcase 35:\n\t\treturn x % y;\n\tcase\
    \ 36:\n\t\treturn x - y;\n\tcase 37:\n\t\treturn x - y;\n\tcase 38:\n\t\treturn\
    \ x * y;\n\tcase 39:\n\t\treturn x * y;\n\tcase 40:\n\t\treturn x / y;\n\tcase\
    \ 41:\n\t\treturn x / y;\n\tcase 42:\n\t\treturn x % y;\n\tcase 43:\n\t\treturn\
    \ x - y;\n\tcase 44:\n\t\treturn x - y;\n\tcase 45:\n\t\treturn x * y;\n\tcase\
    \ 46:\n\t\treturn x * y;\n\tcase 47:\n", "{\n    return x + y;\n}\n/*\nSubtract\
    \ two numbers x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(5L,\
    \ 7L)\n    6L\n    \n*/\nlong subtract(long x, long y) \n{\n    return x - y;\n\
    }\n/*\nMultiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>>\
    \ multiply(5L, 7L)\n    42L\n    \n*/\nlong multiply(long x, long y) \n{\n   \
    \ return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n \
    \   1L\n    >>> divide(5L, 7L)\n    3L\n    \n*/\nlong divide(long x, long y)\
    \ \n{\n    return x / y;\n}\n/*\nReturn True if the two numbers are equal\n  \
    \  >>> equals(2L, 3L)\n    True\n    \n*/", "{\n\treturn x + y;\n}\n/*\nAdd two\
    \ numbers\n    >>> add(2L, 3L)\n    5L\n    \n*/\nlong add(long x, long y, long\
    \ z) \n{\n\treturn x + y + z;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    >>> multiply(2L, 2L)\n    4L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n\treturn x * y;\n}\n/*\nMultiply two numbers\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    \n*/\nlong multiply(long x, long y, long z) \n{\n\treturn x\
    \ * y * z;\n}\n/*\nDivision two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n\
    \    >>> divide(2L, 2L)\n    1L\n    \n*/\nlong divide(long x, long y) \n{\n\t\
    return x / y;\n}\n/*\nDivision two numbers\n    >>> divide(2L, 3L)\n    1L\n \
    \   \n*/\nlong divide(long x, long y, long z) \n{\n\treturn x / y / z;\n}\n/*\n\
    Get the remainder of two numbers\n    >>> remainder(2L, 3L)\n    1L\n    >>> remainder(2L,\
    \ 2L)\n    0L\n    \n*/\nlong remainder(long x, long y) \n{\n\treturn x % y;\n\
    }\n/*\nGet the remainder\n    >>> remainder(2L, 3L)\n    1L\n    \n*/\nlong remainder(long\
    \ x, long y, long z) \n{\n\treturn x % y % z;\n}\n/*\nDivide two numbers with\
    \ a specified modulus\n    >>> modulus(2L, 3L, 4L)\n    2L\n    >>> modulus(2L,\
    \ 3L, 2L)\n    0L\n    \n*/\nlong modulus(long x, long y, long z) \n{\n\treturn\
    \ x % y % z;\n}\n/*\nGet the modulus operator (the modulus of a number x modulus\
    \ y)\n    >>> modulus(2L, 3L, 4L)\n    2L\n    \n*/\nlong modulus(long x, long\
    \ y, long z)\n{\n\treturn x % y % z;\n}\n/*\nGet the absolute value of number\n\
    \    >>> abs(2L)\n    2L\n    \n*/\nlong abs(long x) \n{\n\treturn x < 0 ? -x\
    \ : x;\n}\n/*\nGet the absolute value of number\n    >>> abs(2L)\n    2L\n   \
    \ \n*/\nlong abs(long x, long y) \n{\n\treturn ", "{\n  long sum;\n  \n  sum =\
    \ (x&((long)0xffffffff))+(y&((long)0xffffffff)); //combine high and low words\
    \ of x and y\n  return sum & ((long)0xffffffff); //return sum as long\n}\n/*\n\
    Subtracts two numbers x and y\n    >>> sub(2L, 3L)\n    1L\n    >>> sub(-2L, 3L)\n\
    \    1L\n    \n*/\nlong sub(long x, long y) \n{\n  long diff;\n  \n  diff = (x&((long)0xffffffff))-(y&((long)0xffffffff));\n\
    \  return diff & ((long)0xffffffff); //return diff as long\n}\n/*\nMultiply two\
    \ numbers x and y\n    >>> mul(4L, 2L)\n    8L\n    >>> mul(-4L, 2L)\n    -8L\n\
    \    \n*/\nlong mul(long x, long y) \n{\n  long product;\n  \n  product = mulHi(x,\
    \ y, (long)0xffffffff); //multiply hi\n  product = mulHi(product, x, (long)0xffffffff);\
    \ //multiply hi\n  product = mulHi(product, y, (long)0xffffffff); //multiply hi\n\
    \  return product;\n}\n/*\nDivides two numbers x and y\n    >>> div(4L, 2L)\n\
    \    8L\n    >>> div(-4L, 2L)\n    -2L\n    \n*/\nlong div(long x, long y) \n\
    {\n  long quotient;\n  \n  quotient = divHi(x, y, (long)0xffffffff); //divide\
    \ hi\n  quotient = divHi(quotient, x, (long)0xffffffff); //divide hi\n  quotient\
    \ = divHi(quotient, y, (long)0xffffffff); //divide hi\n  return quotient;\n}\n\
    /*\nMultiplies x by a power n\n    >>> mulPow(2, 2L)\n    4L\n    \n*/\nlong mulPow(long\
    \ x, long n) \n{\n  long product;\n  \n  product = (n<0) ? mulHi(x, (long)0xffffffff,\
    \ n) : mulHi(x, (long)0xffffffff, -n); //add n to x and apply to high and low\
    \ halves\n  product = (n<0) ? mulHi(product, (long)0xffffffff, -n) : mulHi(product,\
    \ (long)0xffffffff, n); //add n to x and apply to high and low halves\n  return\
    \ product;\n}\n/*\nDivides x by a power n\n    >>> divPow(2, ", "{\n    // Return\
    \ x + y\n    return x + y;\n}\n    \n/*\nMultiply two numbers x and y\n    >>>\
    \ multiply(1L, 2L)\n    2L\n    >>> multiply(2L, 3L)\n    6L\n    \n    >>> (2\
    \ * 3) * 3\n    6L\n*/\nlong multiply(long x, long y) \n{\n    // Return x * y\n\
    \    return x * y;\n}\n    \n/*\nDivide two numbers x and y\n    >>> divide(5L,\
    \ 2L)\n    3L\n    \n    >>> (5 / 2) * 2 == 3\n    True\n*/\nlong divide(long\
    \ x, long y) \n{\n    // Return x / y\n    return x / y;\n}\n    \n/*\nModulo\
    \ (remainder of the division) operator and floor division.\n    >>> remainder(5L,\
    \ 2L)\n    2L\n    >>> (5 % 2) * 2 == 0\n    True\n    \n    >>> (5 / 2) == 3\n\
    \    True\n    \n    >>> (5 % 2) == 0\n    True\n*/\nlong remainder(long x, long\
    \ y) \n{\n    // Return x % y\n    return x % y;\n}\n    \n/*\nAbsolute value\
    \ operator\n    >>> abs(-1L)\n    1L\n    >>> abs(1L)\n    1L\n    \n    >>> (-1\
    \ > 1)\n    True\n    >>> (1 > 1)\n    True\n    \n    >>> (abs(-1L) > 1)\n  \
    \  True\n    >>> (abs(1L) > 1)\n    True\n    \n    >>> (abs(-1L) == 1)\n    True\n\
    \    >>> (abs(1L) == 1)\n    True\n*/\nlong abs(long x) \n{\n    // Return |x|\n\
    \    return x;\n}\n    \n/*\nReturn the square root of x.\n    >>> sqrt(16L)\n\
    \    8L\n    \n    >>> (sqrt(16L) + sqrt(16L)) / 2 == 8\n    True\n    \n    >>>\
    \ (sqrt(8L) - sqrt(8L)) / 2 == 4\n    True\n    \n    >>> (sqrt(-1L) == 0)\n \
    \   True\n    >>> (sqrt(1L) == 0)\n    True\n    \n    >>> (sqrt(0L) == 0)\n \
    \   True\n    \n    >>> (sqrt(-16L) == 0)\n    True\n    \n    >>> (sqrt(-8L)\
    \ == 0)\n    True\n    \n    >>> (sqrt(-1L) == 0)\n    True\n    >>> (sqrt(1L)\
    \ == 0)\n    True\n    \n    >>> (sqrt(0L) == 0)\n    True\n    \n    >>> (sqrt(-16L)\
    \ == 0)\n    True\n", "{\n    return x + y;\n}\n/*\nAdd two numbers x and y, using\
    \ a temporary variable\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n   \
    \ 12L\n    \n*/\nlong add(long x, long y) \n{\n    long z = x + y;\n    return\
    \ z;\n}\n/*\nAdd two numbers x and y, using a temporary variable\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y)\
    \ \n{\n    long z = x + y;\n    return z;\n}\n/*\nAdd two numbers x and y, using\
    \ a temporary variable\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n   \
    \ 12L\n    \n*/\nlong add(long x, long y) \n{\n    long z = x + y;\n    return\
    \ z;\n}\n/*\nAdd two numbers x and y, using a temporary variable\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y)\
    \ \n{\n    long z = x + y;\n    return z;\n}\n/*\nAdd two numbers x and y, using\
    \ a temporary variable\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n   \
    \ 12L\n    \n*/\nlong add(long x, long y) \n{\n    long z = x + y;\n    return\
    \ z;\n}\n/*\nAdd two numbers x and y, using a temporary variable\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y)\
    \ \n{\n    long z = x + y;\n    return z;\n}\n/*\nAdd two numbers x and y, using\
    \ a temporary variable\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n   \
    \ 12L\n    \n*/\nlong add(long x, long y) \n{\n    long z = x + y;\n    return\
    \ z;\n}\n/*\nAdd two numbers x and y, using a temporary variable\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y)\
    \ \n{\n    long z = x + y;\n    return z;\n}\n/*\nAdd two numbers x and y, using\
    \ a temporary variable\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n   \
    \ 12L\n    \n*/\nlong add(long x, long y) \n{\n    long z = x + y;\n    return\
    \ z;\n}\n", "{\n    return x + y;\n}", "{\n    return x + y;\n}", "{\n    return\
    \ x + y;\n}\n</cell>\n<cell>\n%timeit add(2L, 3L)\n</cell>\n<cell>\n%timeit add(5L,\
    \ 7L)\n</cell>\n<text>\nExercise: Adding a tuple of numbers.\nWrite a function\
    \ add_tuple that accepts a tuple of numbers as its sole argument. The function\
    \ should return a new tuple whose values are the sum of the numbers in the tuple.",
  "{\n    return x + y;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=java,generics,static-methods,static,inheritance\
    \ |>\nThe most flexible solution would be to create a class that has a static\
    \ method which you will be able to use to implement the generic method.\nThe method\
    \ will be a static method of the class that will not be polymorphic (the method\
    \ will be resolved at compile time to the actual method implementation, not at\
    \ runtime, as with a method that is an instance method).\nExample:\n<code>\nclass\
    \ SuperClass {\n   public static <T extends SuperClass> T doSomething() {\n  \
    \   // Do something\n   }\n}", "{\n    long z = 0;\n    while ( z < x ) {\n  \
    \      z = z * 3 + y;\n    }\n    return z;\n}", "{\n\tif (x == 0 && y == 0)\n\
    \t\treturn 0;\n\treturn x + y;\n}", "{\n    return x + y;\n}", "{\n\treturn x\
    \ + y;\n}", "{\n    return x + y;\n}", "{\n    // Assume we didn't overflow before\
    \ adding two numbers\n    long sum = x + y;\n    if (sum & 0x8000000000000000L)\
    \ \n    {\n        return sum + x;\n    }\n    return sum;\n}\n/*\nAdd two numbers\
    \ x and y, avoiding overflow and returning the carry.\n    >>> add2_carry(2L,\
    \ 3L, 1L)\n    6L\n    \n*/\nlong add2_carry(long x, long y, long carry)\n{\n\
    \    long sum = x + y;\n    sum |= carry << 32;\n    sum |= (sum >> 32) & 0x8000000000000000L;\n\
    \    return sum;\n}\n/*\nAdd two numbers x and y, avoiding overflow\n    >>> add2_no_overflow_big(2L,\
    \ 3L, 1L)\n    5L\n    \n*/\nlong add2_no_overflow_big(long x, long y, long carry)\n\
    {\n    long sum = x + y;\n    sum = (sum >> 32) + (sum & 0xffffffffL);\n    sum\
    \ |= (sum >> 32) & 0x8000000000000000L;\n    return sum;\n}\n/*\nAdd two numbers\
    \ x and y, without checking for overflow.\n    >>> add2_no_overflow(2L, 3L, 1L)\n\
    \    5L\n    \n*/\nlong add2_no_overflow(long x, long y, long carry)\n{\n    return\
    \ x + y + carry;\n}\n/*\nAdd two numbers x and y, avoiding overflow\n    >>> add2_no_overflow(2L,\
    \ 3L, 1L)\n    5L\n    \n*/\nlong add2_no_overflow(long x, long y, long carry)\n\
    {\n    return x + y + carry;\n}\n/*\nAdd two numbers x and y, without checking\
    \ for overflow\n    >>> add2_no_overflow(2L, 3L, 1L)\n    5L\n    \n*/\nlong add2_no_overflow(long\
    \ x, long y, long carry)\n{\n    return x + y + carry;\n}\n/*\nAdd two numbers\
    \ x and y, without checking for overflow\n    >>> add2_no_overflow(2L, 3L, 1L)\n\
    \    5L\n    \n*/\nlong add2_no_overflow(long x, long y, long carry)\n{\n    return\
    \ x + y + carry;\n}\n/*\nAdd two numbers x and y, without checking for overflow\n\
    \    >>> add2_no_overflow(2L, 3L, 1L)\n    5L\n    \n*/\nlong add2_no_overflow(long\
    \ x, long y, long carry)\n{\n    return x + y + carry;\n}\n/*\nAdd two numbers ",
  "{\n    long t;\n    \n    t = x + y;\n    if (t < 0) t = -t;\n    return t;\n}",
  "{\n    return x + y;\n}\n/* \nSubtract two numbers x and y\n    >>> subtract(5L,\
    \ 2L)\n    3L\n    \n    Multiply two numbers x and y\n    >>> multiply(7L, 2L)\n\
    \    21L\n    \n    Divide two numbers x and y\n    >>> divide(8L, 3L)\n    1L\n\
    \    \n*/\nlong subtract(long x, long y) \n{\n    return x - y;\n}\n/* \nMultiply\
    \ two numbers x and y\n    >>> multiply(5L, 7L)\n    21L\n    \n    Divide two\
    \ numbers x and y\n    >>> divide(8L, 3L)\n    1L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ divide(8L, 3L)\n    1L\n    \n*/\nlong divide(long x, long y) \n{\n    return\
    \ x / y;\n}\n/* \nReturn a number whose value is closest to the value of x.\n\
    */\nfloat nearest(float x) \n{\n    return (float) sqrt(x);\n}\n/*\nReturn a number\
    \ whose value is closest to the value of y.\n*/\nfloat nearest(float y) \n{\n\
    \    return (float) sqrt(y);\n}\n/*\nConvert from floating point to integer\n\
    */", "{\n    long xy = x;\n    xy += y;\n    return xy + x;\n}", "{\n    if (x\
    \ > (long ) 0x7FFFFFFFL || y > (long ) 0x7FFFFFFFL )\n    {\n        throw invalid_arg(\"\
    add expects integer values < 2^53\");\n    }\n    return x + y;\n}\n/*\nAdd two\
    \ numbers, x and y, and return the sum\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L,\
    \ 7L)\n    12L\n    \n*/\nlong long add(long long x, long long y) \n{\n    if\
    \ (x > (long long ) 0x7FFFFFFFLLL || y > (long long ) 0x7FFFFFFFLLL )\n    {\n\
    \        throw invalid_arg(\"add expects integer values < 2^63\");\n    }\n  \
    \  return x + y;\n}\n/*\nReturn the product of two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong long mul(long long\
    \ x, long long y) \n{\n    if (x > (long long ) 0x7FFFFFFFLLL || y > (long long\
    \ ) 0x7FFFFFFFLLL )\n    {\n        throw invalid_arg(\"mul expects integer values\
    \ < 2^63\");\n    }\n    return x * y;\n}\n/*\nReturn the sum of two numbers\n\
    \    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong sum(long\
    \ x, long y) \n{\n    if (x > (long ) 0x7FFFFFFFL || y > (long ) 0x7FFFFFFFL )\n\
    \    {\n        throw invalid_arg(\"sum expects integer values < 2^53\");\n  \
    \  }\n    return x + y;\n}\n/*\nReturn the product of two numbers, x and y, and\
    \ return the sum\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n\
    \    \n*/\nlong long sum(long long x, long long y) \n{\n    if (x > (long long\
    \ ) 0x7FFFFFFFLLL || y > (long long ) 0x7FFFFFFFLLL )\n    {\n        throw invalid_arg(\"\
    sum expects integer values < 2^63\");\n    }\n    return x * y;\n}\n/*\nGet the\
    \ absolute value of a number\n    >>> abs(-2L)\n    2L\n    >>> abs(2L)\n    2L\n\
    \    \n*/\nlong abs(long x) \n{\n    if (x > (long ) 0x7FFFFFFFL )\n    {\n  \
    \      throw invalid_arg(\"abs expects integer values < 2^53\");\n    }\n    return\
    \ x;\n}\n/*\nGet the absolute value of an unsigned number\n    >>> abs(-2L)\n\
    \    2", "{\n\treturn (x + y);\n}", "{\n    return x + y;\n}\n/*\nMultiply two\
    \ numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(5L, 7L)\n\
    \    44L\n    \n*/\nlong multiply(long x, long y)\n{\n    return x * y;\n}", "{\n\
    \    unsigned long long sum = x + (unsigned long long)y;\n    \n    if (sum <\
    \ x) \n        return sum;\n    \n    if (sum > y) \n        return sum - y;\n\
    \    \n    return sum;\n}\n'''\n    \n#add\ntest_code += '''\n/*\nAdd two numbers\
    \ x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\n\
    long add(long x, long y) \n{\n    long long sum = x + (long long)y;\n    \n  \
    \  if (sum < x) \n        return sum;\n    \n    if (sum > y) \n        return\
    \ sum - y;\n    \n    return sum;\n}\n'''\n    \ntest_code += '''\n/*\nAdd two\
    \ numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n\
    \    \n*/\nlong add(long x, long y) \n{\n    long long sum = x + (unsigned long\
    \ long)y;\n    \n    if (sum < x) \n        return sum;\n    \n    if (sum > y)\
    \ \n        return sum - y;\n    \n    return sum;\n}\n'''\n    \n#add\ntest_code\
    \ += '''\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n    >>> add(5L,\
    \ 7L)\n    12L\n    \n*/\nlong add(long x, long y) \n{\n    float sum = (float)x\
    \ + (float)y;\n    \n    if (sum < x) \n        return sum;\n    \n    if (sum\
    \ > y) \n        return sum - y;\n    \n    return sum;\n}\n'''\n    \n#add\n\
    test_code += '''\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n    5L\n \
    \   >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y) \n{\n    double\
    \ sum = (double)x + (double)y;\n    \n    if (sum < x) \n        return sum;\n\
    \    \n    if (sum > y) \n        return sum - y;\n    \n    return sum;\n}\n\
    '''\n    \n#add\ntest_code += '''\n/*\nAdd two numbers x and y\n    >>> add(2L,\
    \ 3L)\n    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong add(long x, long y)\
    \ \n{\n    int sum = (int)x + (int)y;\n    \n    if (sum < x) \n        return\
    \ sum;\n    \n    if (sum > y) \n        return sum - y;\n    \n    return sum;",
  "{\n\treturn x + y;\n}", "{\n    if (x == 0) return y;\n    if (y == 0) return x;\n\
    \    \n    int i = 1;\n    long carry = 0;\n    \n    long product = x;\n    \n\
    \    while(i<y)\n    {\n        carry = product + carry;\n        product = carry\
    \ % 10;\n        carry = carry / 10;\n        i++;\n    }\n    \n    return carry\
    \ + product;\n}\n    \n/*\nSubtract two numbers x and y\n    >>> subtract(2L,\
    \ 3L)\n    1L\n    >>> subtract(5L, 7L)\n    2L\n    \n*/\nlong subtract(long\
    \ x, long y) \n{\n    if (x == 0) return y;\n    if (y == 0) return x;\n    \n\
    \    int i = 1;\n    long borrow = 0;\n    \n    long product = x;\n    \n   \
    \ while(i<y)\n    {\n        borrow = product - borrow;\n        product = borrow\
    \ % 10;\n        borrow = borrow / 10;\n        i++;\n    }\n    \n    return\
    \ borrow + product;\n}", "{\n    if (x == 0) return y;\n    if (y == 0) return\
    \ x;\n    if (x % 2 == 0)\n    {\n        if (y % 2 == 0)\n        {\n       \
    \     return (x + y - 1) / 2;\n        }\n        else\n        {\n          \
    \  return (x + y - 1) / 2 + 1;\n        }\n    }\n    else\n    {\n        if\
    \ (y % 2 == 0)\n        {\n            return (x * 2 - 1) / y;\n        }\n  \
    \      else\n        {\n            return (x * 2 - 1) / y + 1;\n        }\n \
    \   }\n}\n</code>\n<|/ a |>\n<| c |>\nNice job. The code is very clean and easy\
    \ to understand. Unfortunately I do not have enough reputation to vote for your\
    \ answer as useful. I will do it as soon as I can.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. I cannot use \"import std.conv;\" in Xcode (swift 3 project)\n<|/ c |>\n\
    <| c |>\nIf you can't use import std.conv, try `import std`.  It should already\
    \ be there.\n<|/ c |>\n<| a tags=c++,c++11,swift3 |>\nTry this:\n<code>\nlong\
    \ long add(long long x, long long y) {\n    long long result;\n    while (x &&\
    \ y) {\n        long long a = x % 10;\n        long long b = y % 10;\n       \
    \ if (a) x = x / 10;\n        if (b) y = y / 10;\n        result += (long long)((a\
    \ + b) * 10 + a - b);\n    }\n    return result;\n}\n</code>\nIn C++ it is very\
    \ simple:\n<code>\n#include <iostream>", "{\n  return x + y;\n}\n/*\nAdd two numbers\
    \ x and y, and return the result.\n    If x is larger than y, then the result\
    \ is x + y.\n    If y is larger than x, then the result is y + x.\n*/\nlong max(long\
    \ x, long y) \n{\n  if (x > y) {\n    return x + y;\n  } else {\n    return y\
    \ + x;\n  }\n}\n/*\nAdd two numbers x and y, and return the result.\n    If x\
    \ is larger than y, then the result is x + y.\n    If y is larger than x, then\
    \ the result is y + x.\n    If both x and y are equal, then the result is x +\
    \ y.\n*/\nlong min(long x, long y) \n{\n  if (x < y) {\n    return x + y;\n  }\
    \ else {\n    return y + x;\n  }\n}\n/*\nAdd two numbers x and y, and return the\
    \ result.\n*/\nlong add(long x, long y, long z) \n{\n  return x + y + z;\n}\n\
    /*\nAdd two numbers x and y, and return the result.\n*/\nlong abs(long x) {\n\
    \  if (x < 0) {\n    return -x;\n  } else {\n    return x;\n  }\n}\n/*\nAdd two\
    \ numbers x and y, and return the result.\n*/", "{\n\tif (x==0) return y;\n\t\
    if (y==0) return x;\n\treturn x + y;\n}\n/*\nSubtract two numbers x and y\n  \
    \  >>> sub(2L, 3L)\n    1L\n    \n*/\nlong sub(long x, long y) \n{\n\tif (x==0)\
    \ return y;\n\tif (y==0) return x;\n\treturn x - y;\n}\n/*\nMultiply two numbers\
    \ x and y\n    >>> mul(4L, 5L)\n    20L\n    \n*/\nlong mul(long x, long y) \n\
    {\n\tif (x==0) return 0;\n\tif (y==0) return x;\n\treturn x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> div(4L, 5L)\n    3L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n\tif (x==0) return 0;\n\tif (y==0) return x;\n\treturn x / y;\n\
    }", "{\n   assert(x != 0 && y != 0);", "{\n   long result;\n   \n   result = (x\
    \ + y);\n   \n   return result;\n}", "{\n\tif (y == 0) {\n\t\tthrow new DivideByZeroException(\"\
    DivideByZero exception\");\n\t}\n\treturn x + y;\n}", "{\n\treturn x + y;\n}\n\
    /*\nAdd two numbers x and y and store result in z\n    >>> add(2L, 3L, 9L)\n \
    \   15L\n    \n*/", "{\n    // TODO: Check if x's and y's type are integer\n \
    \   // TODO: Check if x and y are valid numbers\n    // TODO: Check if types are\
    \ compatible\n    long result = x + y;\n    return result;\n}", "{\n   long result\
    \ = x + y;\n   assert(result == x + y); \n   return result; \n}", "{\n\treturn\
    \ x + y;\n}\n/*\nAdd two floating point numbers, x and y\n    \n    >>> add(2.,\
    \ 3.)\n    5.0\n    >>> add(5., 7.)\n    12.0\n    \n*/\ndouble add(double x,\
    \ double y) \n{\n\treturn x + y;\n}", "{\n\treturn x + y;\n}\n/*\nSubtract one\
    \ number from another\n    >>> sub(2L, 3L)\n    1L\n    \n*/\nlong sub(long x,\
    \ long y) \n{\n\treturn x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(4L,\
    \ 5L)\n    25L\n    \n*/\nlong mul(long x, long y) \n{\n\treturn x * y;\n}\n/*\n\
    Divide two numbers x and y\n    >>> (div(2L, 3L) * 2L)\n    6L\n*/\nlong div(long\
    \ x, long y)\n{\n\treturn std.math.divide(x, y);\n}", "{\n    return x + y;\n}",
  "{\n\treturn x + y;\n}", "{\n    long result;\n    \n    // first step\n    result\
    \ = x + y;\n    \n    // second step\n    result = result % (int) _builtin_.INT_MAX;\n\
    \    \n    return result;\n}\n/*\nSubtract a number from a number\n    >>> subtract(3L,\
    \ 2L)\n    1L\n    >>> subtract(3L, 1L)\n    1L\n    >>> subtract(3L, 0L)\n  \
    \  -1L\n    \n*/\nlong subtract(long x, long y) \n{\n    long result;\n    \n\
    \    // first step\n    result = x - y;\n    \n    // second step\n    result\
    \ = result % (int) _builtin_.INT_MAX;\n    \n    return result;\n}\n/*\nMultiply\
    \ two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(3L,\
    \ 2L)\n    9L\n    \n*/\nlong multiply(long x, long y) \n{\n    long result;\n\
    \    \n    // first step\n    result = x * y;\n    \n    // second step\n    result\
    \ = result % (int) _builtin_.INT_MAX;\n    \n    return result;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(2L, 2L)\n\
    \    1L\n    \n*/\nlong divide(long x, long y) \n{\n    long result;\n    \n \
    \   // first step\n    result = x / y;\n    \n    // second step\n    result =\
    \ result % (int) _builtin_.INT_MAX;\n    \n    return result;\n}\n/*\nDivide a\
    \ number by another number\n    >>> quotient(3L, 2L)\n    2L\n    >>> quotient(3L,\
    \ 1L)\n    1L\n    \n*/\nlong quotient(long x, long y) \n{\n    long result;\n\
    \    \n    // first step\n    result = x / y;\n    \n    // second step\n    result\
    \ = result % (int) _builtin_.INT_MAX;\n    \n    return result;\n}\n/*\nCompare\
    \ two numbers in ascending order\n    >>> compare(2L, 3L)\n    1\n    >>> compare(1L,\
    \ 1L)\n    0\n    \n*/", "{\n    return x + y;\n}", "{\n  return x+y;\n}", "{\n\
    \    long sum;\n    sum = (x + y);\n    return sum;\n}\n</code>\nNow lets look\
    \ at your main.c\n<code>\n#include \"stdio.h\"\n#include \"add.h\"\n/*\nAdd two\
    \ numbers x and y\n*/", "{\n\treturn x + y;\n}", "{\n  return x + y;\n}", "{\n\
    \    int c;\n    if (x < 0) { \n        if (y > 0) return x - y; \n        else\
    \ return x + y; \n    }\n    c = x <= y ? x : y;\n    return c - c;\n}\n/*\nMultiply\
    \ two numbers x and y\n    \n    >>> multiply(1L, 5L)\n    15L\n    \n    \n \
    \   \n    \n    \n    \n    \n*/\nlong multiply(long x, long y) \n{\n    int c;\n\
    \    if (x < 0) \n        return -multiply(-x, y);\n    c = x <= y ? x : y;\n\
    \    return c + c;\n}\n/*\nMultiply two numbers x and y\n    \n    >>> multiply(5L,\
    \ 10L)\n    50L\n    \n    \n    \n    \n    \n    \n    \n    \n*/", "{\n   \
    \ return x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(3L, 5L)\n  \
    \  15L\n    \n*/\nlong mul(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> div(6L, 2L)\n    3L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nTruncate x to the nearest integer, rounding\
    \ toward zero \n    >>> trunc(3.2)\n    3L\n    >>> trunc(3.5)\n    3L\n    \n\
    */\nlong trunc(long x)\n{\n    return x < 0 ? x + 1 : x;\n}\n/*\nRound x to the\
    \ nearest integer, rounding away from zero \n    >>> round(2.6)\n    2L\n    >>>\
    \ round(3.5)\n    3L\n    \n*/\nlong round(long x)\n{\n    return x < 0 ? x +\
    \ 0.5 : x;\n}\n/*\nFloor x to the nearest integer, rounding toward negative infinity\n\
    \    >>> floor(3.5)\n    3L\n    \n*/\nlong floor(long x)\n{\n    return x < 0\
    \ ? x - 0.5 : x;\n}\n/*\nGet the absolute value of the given number\n    >>> abs(-2L)\n\
    \    2L\n    >>> abs(3L)\n    3L\n    \n*/\nlong abs(long x)\n{\n    return x\
    \ < 0 ? -x : x;\n}\n/*\nGet the modulus of the given number\n    >>> modulus(5L,\
    \ 2L)\n    1L\n    >>> modulus(5L, 10L)\n    5L\n    \n*/\nlong modulus(long x,\
    \ long y) \n{\n    return x < y ? x - y : x + y;\n}\n/*\nGet the remainder of\
    \ the given number\n    >>> remainder(5L, 2L)\n    1L\n    >>> remainder(5L, 10L)\n\
    \    5L\n    \n*/\nlong remainder(long x, long y) \n{\n    return x < y ? x -\
    \ y : x + y;\n}\n/*\nGet the least common multiple of the given numbers\n    >>>\
    \ lcm(7L, 9L)\n    27L\n    >>> lcm(10L, 3L)\n    20L\n    \n*/\nlong lcm(long\
    \ x, long y)\n{\n    return x * y / div(add(x, y), div(x, y));\n}\n/*\nCheck if\
    \ a number is even\n    >>> isEven(2L)\n    1L\n    >>> isEven(12L)\n    0L\n\
    \    \n*/", "{\n\tlong z;\n\tz = x + y;\n\treturn z;\n}", "{\n    if(x > (long)\
    \ Integer.MAX_VALUE)\n    {\n        return x + y;\n    }\n    else\n    {\n \
    \       return x + (long)y;\n    }\n}", "{\n    return x + y;\n}\n\"\"\")", "{\n\
    \    return x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(2L,\
    \ 3L)\n    6L\n    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n\
    }\n/*\nDivide two numbers x and y\n    >>> divide(2L, 3L)\n    2.0\n    \n*/\n\
    double divide(long x, long y) \n{\n    return x / y;\n}\n/*\nCheck if a number\
    \ is even\n    >>> is_even(3)\n    1\n    >>> is_even(4L)\n    0\n    \n*/", "{\n\
    \    return x + y;\n}\n/*\nSubtract two numbers x and y\n    >>> sub(1L, 1L)\n\
    \    0L\n    >>> sub(1L, 2L)\n    1L\n    \n*/\nlong sub(long x, long y) \n{\n\
    \    return x - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(1L, 3L)\n\
    \    3L\n    >>> mul(2L, 2L)\n    4L\n    \n*/\nlong mul(long x, long y) \n{\n\
    \    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> div(1L, 3L)\n \
    \   1L\n    >>> div(2L, 2L)\n    1L\n    \n*/\nlong div(long x, long y) \n{\n\
    \    return x / y;\n}\n/*\nFind the reciprocal of a number\n    >>> recip(1L)\n\
    \    1.0\n    \n*/\ndouble recip(double x) \n{\n    return 1.0 / x;\n}\n/*\nFind\
    \ the square root of a number\n    >>> sqrt(5L)\n    2.0\n    \n*/\ndouble sqrt(double\
    \ x) \n{\n    double ans = Math.sqrt(x);\n    return ans;\n}\n/*\nFind the square\
    \ of a number\n    >>> square(3L)\n    9\n    \n*/\ndouble square(double x) \n\
    {\n    double ans = x * x;\n    return ans;\n}\n/*\nFind the square of a number\n\
    \    >>> square(3L)\n    9\n    \n*/\ndouble square(double x) \n{\n    double\
    \ ans = x * x;\n    return ans;\n}\n/*\nFind the cube of a number\n    >>> cube(3L)\n\
    \    27\n    \n*/\ndouble cube(double x) \n{\n    double ans = x * x * x;\n  \
    \  return ans;\n}\n/*\nFind a reciprocal of a number\n    >>> reciprocal(3L)\n\
    \    0.5\n    \n*/\ndouble reciprocal(double x) \n{\n    double ans = 1.0 / x;\n\
    \    return ans;\n}\n/*\nFind a square root of a number\n    >>> sqrt(3L)\n  \
    \  1.5\n    \n*/\ndouble sqrt(double x) \n{\n    double ans = Math.sqrt(x);\n\
    \    return ans;\n}\n/*\nFind a square of a number\n    >>> square(3L)\n    9\n\
    \    \n*/\ndouble square(double x) \n{\n    double ans = x * x;\n    return ans;\n\
    }\n/*\nFind a cube of a number\n    >>> cube(3L)\n    27\n    \n*/\ndouble cube(double\
    \ x) \n{\n    ", "{\n    long sum = x + y;\n    while (x != sum) \n    {\n   \
    \     x += (x & -a) + (y & -a);\n        y += (a = -b);\n    }\n    return sum;\n\
    }", "{\n\tif (x < y)\n\t{\n\t\treturn x + y;\n\t}\n\telse\n\t{\n\t\treturn x -\
    \ y;\n\t}\n}\n/* \nMultiply two numbers x and y\n    >>> multiply(3L, 5L)\n  \
    \  15L\n    >>> multiply(5L, 2L)\n    10L\n    \n*/\nlong multiply(long x, long\
    \ y) \n{\n\treturn x * y;\n}", "{\n\treturn x + y;\n}", "{\n    return x + y;\n\
    }\n/*\nAdd two floating point numbers x and y\n    \n    >>> add(2.0f, 3.0f)\n\
    \    5.0f\n    >>> add(5.0f, 7.0f)\n    12.0f\n    \n*/\nfloat add(float x, float\
    \ y) {\n    return x + y;\n}", "{\n\tlong z = 0L;\n\twhile(x != 0) {\n\t\tz =\
    \ z * 10 + x % 10;\n\t\tx = x / 10;\n\t}\n\twhile(y != 0) {\n\t\tz = z * 10 +\
    \ y % 10;\n\t\ty = y / 10;\n\t}\n\tz = (z % 10) + z;\n\treturn z;\n}\n/*\nFind\
    \ modulus of an integer\n    >>> mod2(0L)\n    0L\n    >>> mod2(1L)\n    1L\n\
    \    >>> mod2(9L)\n    9L\n    >>> mod2(-3L)\n    1L\n    \n*/\nlong mod2(long\
    \ x) \n{\n\tlong y = 0L;\n\tlong z = 0;\n\twhile(x != 0) {\n\t\ty = 2 * y;\n\t\
    \tz = z + (x % 10);\n\t\tx = x / 10;\n\t}\n\treturn z + y;\n}\n/*\nFind factorial\
    \ of a number\n    >>> factorial(1L)\n    1L\n    >>> factorial(2L)\n    2L\n\
    \    >>> factorial(9L)\n    3628800L\n    >>> factorial(-2L)\n    -1L\n    \n\
    */\nlong factorial(long x) \n{\n\tif(x == 0)\n\t\treturn 1;\n\treturn x * factorial(x\
    \ - 1);\n}\n/*\nFind modulus and factorial\n    >>> mod3(0L)\n    0L\n    >>>\
    \ mod3(1L)\n    1L\n    >>> mod3(9L)\n    9L\n    >>> mod3(-3L)\n    1L\n    >>>\
    \ mod3(factorial(9L))\n    9L\n    >>> mod3(factorial(-1L))\n    1L\n    \n*/\n\
    long mod3(long x) \n{\n\tlong y = 0L;\n\tlong z = 0;\n\twhile(x != 0) {\n\t\t\
    y = 2 * y;\n\t\tz = z + (x % 10);\n\t\tx = x / 10;\n\t}\n\treturn z + y;\n}\n\
    /*\nFind greatest common divisor of two numbers\n    >>> gcd(2L, 3L)\n    1L\n\
    \    >>> gcd(3L, 2L)\n    1L\n    >>> gcd(7L, 7L)\n    7L\n    \n*/\nlong gcd(long\
    \ x, long y) \n{\n\tif(y == 0)\n\t\treturn x;\n\treturn gcd(y, x%y);\n}\n/*\n\
    Multiply two numbers\n    >>> multiply(2L, 3L)\n    6L\n    >>> multiply(3L, 2L)\n\
    \    6L\n    \n*/\nlong multiply(long x, long y) \n{\n\tlong z = 0L;\n\twhile(x\
    \ != 0) {\n\t\tz = z * y + x ", "{\n    long result = x + y;\n    \n    \n   \
    \ \n    return result;\n}", "{\n  return x + y;\n}\n/*\nMultiply two numbers x\
    \ and y\n    >>> multiply(2L, 3L)\n    6L\n    \n*/\nlong multiply(long x, long\
    \ y) \n{\n  return x * y;\n}\n/*\nMultiply two floating point numbers x and y\n\
    \    >>> multiply(2.5, 3.0)\n    4.5\n    \n*/\ndouble multiply(double x, double\
    \ y) \n{\n  return x * y;\n}\n/*\nDivide two numbers x and y\n    >>> divide(2L,\
    \ 3L)\n    2.0L\n    \n*/\nlong divide(long x, long y) \n{\n  return x / y;\n\
    }\n/*\nFind the remainder when dividing two numbers x and y\n    >>> reminder(2L,\
    \ 3L)\n    1L\n    \n*/\nlong reminder(long x, long y) \n{\n  return x % y;\n\
    }\n/*\nFind the absolute value of x \n    >>> abs(1L)\n    1L\n    \n*/\nlong\
    \ abs(long x) { \n  if (x < 0) {\n    x = -x;\n  }\n  return x;\n}\n/*\nBitwise\
    \ exclusive OR of x and y\n    >>> xor(2L, 3L)\n    5L\n    \n*/\nlong xor(long\
    \ x, long y) \n{\n  return x ^ y;\n}\n/*\nBitwise inclusive OR of x and y\n  \
    \  >>> or(2L, 3L)\n    6L\n    \n*/\nlong or(long x, long y) \n{\n  return x |\
    \ y;\n}\n/*\nBitwise AND of x and y\n    >>> and(2L, 3L)\n    3L\n    \n*/\nlong\
    \ and(long x, long y) \n{\n  return x & y;\n}\n/*\nBitwise left shift of x by\
    \ y\n    >>> shift(2L, 3L)\n    6L\n    \n*/\nlong shift(long x, long y) { \n\
    \  return x << y;\n}\n/*\nBitwise right shift of x by y\n    >>> shift(2L, 3L)\n\
    \    6L\n    \n*/\nlong rshift(long x, long y) { \n  return x >> y;\n}", "{\n\t\
    return x + y;\n}\n/*\nSubtract two numbers x and y\n    >>> sub(3, 5)\n    1\n\
    \    >>> sub(1, 5)\n    2\n    \n*/\nlong sub(long x, long y) \n{\n\treturn x\
    \ - y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(3, 5)\n    15\n    \n\
    */\nlong mul(long x, long y) \n{\n\treturn x * y;\n}\n/*\nDivide two numbers x\
    \ and y\n    >>> div(4, 4)\n    1\n    >>> div(14, 5)\n    6\n    \n*/\nlong div(long\
    \ x, long y) \n{\n\tif (y == 0) \n\t{\n\t\tthrow new Exception(\"Division by zero.\"\
    );\n\t} \n\treturn x / y;\n}\n/*\nReturns the number of digits of the number x\n\
    \    >>> digits(3)\n    0\n    >>> digits(3.4)\n    1\n    >>> digits(3.5)\n \
    \   2\n    \n*/\nlong digits(long x) \n{\n\treturn MathUtil.log(x) / MathUtil.log(10);\n\
    }", "{\n    return x + y;\n}\n/*\nSubtract two numbers x and y\n    >>> sub(3L,\
    \ 4L)\n    1L\n    \n*/\nlong sub(long x, long y) \n{\n    return x - y;\n}\n\
    /*\nMultiply two numbers x and y\n    >>> mul(3L, 2L)\n    6L\n    \n*/\nlong\
    \ mul(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and\
    \ y\n    >>> div(3L, 2L)\n    3L\n    \n*/\nlong div(long x, long y) \n{\n   \
    \ return x / y;\n}\n/*\nCalculate x to the power of y\n    >>> pow(3L, 3L)\n \
    \   8L\n    \n*/\nlong pow(long x, long y) \n{\n    return pow(x * x, y);\n}\n\
    /*\nSum all numbers in an array\n    >>> sum([1, 3, 7, 9, 11])\n    30L\n    \n\
    */\nlong sum(long[] arr) \n{\n    long sum = 0;\n    for (long a : arr)\n    \
    \    sum += a;\n    return sum;\n}\n/*\nCount the number of times an element appears\
    \ in a list\n    >>> count([1, 3, 7, 9, 11], 7)\n    2\n    \n*/\nlong count(long[]\
    \ arr, long e) \n{\n    int cnt = 0;\n    for (long a : arr)\n        if (a==e)\n\
    \            cnt++;\n    return cnt;\n}\n/*\nFind minimum of a list of numbers\n\
    \    >>> min([3, 6, 2, 5, 2, 2])\n    2\n    \n*/\nlong min(long[] arr) \n{\n\
    \    long minVal = arr[0];\n    for (long a : arr)\n        if (a<minVal)\n  \
    \          minVal = a;\n    return minVal;\n}\n/*\nFind maximum of a list of numbers\n\
    \    >>> max([4, 2, 3, 1, 5])\n    5\n    \n*/\nlong max(long[] arr) \n{\n   \
    \ long maxVal = arr[0];\n    for (long a : arr)\n        if (a>maxVal)\n     \
    \       maxVal = a;\n    return maxVal;\n}\n/*\nSort a list using bubble sort\n\
    \    >>> sort([5, 3, 1, 2, 6, 4])\n    [1, 2, 3, 4, 6, 5]\n    \n*/", "{\n\tif\
    \ (x == 0)\n\t{\n\t\treturn y;\n\t}\n\telse if (y == 0)\n\t{\n\t\treturn x;\n\t\
    }\n\treturn x ^ y;\n}", "{\n    return x + y;\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> multiply(3L, 5L)\n    15L\n    >>> multiply(6L, 7L)\n    49L\n  \
    \  \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> divide(2L, 3L)\n    3L\n    >>> divide(4L, 7L)\n  \
    \  2L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nSubtract\
    \ two numbers x and y\n    >>> subtract(2L, 3L)\n    1L\n    >>> subtract(4L,\
    \ 7L)\n    4L\n    \n*/\nlong subtract(long x, long y) \n{\n    return x - y;\n\
    }\n/*\nGet the modulus of two numbers x and y\n    >>> modulo(12L, 8L)\n    2L\n\
    \    >>> modulo(-12L, 8L)\n    2L\n    \n*/\nlong modulo(long x, long y) \n{\n\
    \    return x % y;\n}\n/*\nGet the absolute value of number x\n    >>> abs(4L)\n\
    \    4L\n    \n*/\nlong abs(long x) \n{\n    return x > 0 ? x : -x;\n}\n/*\nRound\
    \ a number x to the nearest integer\n    >>> round(4.2)\n    5L\n    >>> round(4.8)\n\
    \    4L\n    \n*/\nlong round(long x) \n{\n    return std.math.round(x);\n}\n\
    /*\nReturn true if the number x is evenly divisible by 2\n    >>> evenly_divisible(3L)\n\
    \    True\n    >>> evenly_divisible(5L)\n    False\n    \n*/", "{\n\tif (x ==\
    \ 0) \n\t{\n\t\treturn y;\n\t}\n\t\n\tif (y == 0) \n\t{\n\t\treturn x;\n\t}\n\t\
    \n\treturn x + y;\n}", "{\n\tif (x >= y) return x + y - x;\n\telse return y -\
    \ x + x;\n}\n/*\nSubtract two numbers x and y\n    \n    >>> sub(2L, 3L)\n   \
    \ 1L\n    >>> sub(5L, 7L)\n    8L\n    \n*/\nlong sub(long x, long y)\n{\n\treturn\
    \ add(x, -y);\n}\n/*\nMultiply two numbers x and y\n    \n    >>> mul(3L, 2L)\n\
    \    6L\n    >>> mul(-3L, -2L)\n    6L\n    \n*/\nlong mul(long x, long y) \n\
    {\n\treturn (x < 0L) ? (x - y * y) : y * x + x;\n}\n/*\nDivide two numbers x and\
    \ y\n    \n    >>> div(2L, 3L)\n    1L\n    >>> div(-2L, -2L)\n    1L\n    >>>\
    \ div(2L, -2L)\n    -1L\n    \n*/\nlong div(long x, long y) \n{\n\treturn mul(y\
    \ > 0 ? x : -x/y, y);\n}\n/*\nFind the greatest common divisor of a and b\n  \
    \  \n    >>> gcd(3L, 5L)\n    1L\n    >>> gcd(3L, 0L)\n    3L\n    >>> gcd(0L,\
    \ 3L)\n    3L\n    >>> gcd(0L, 0L)\n    0L\n    \n*/\nlong gcd(long x, long y)\n\
    {\n\treturn div(abs(x), y);\n}\n/*\nLeast common multiple of a and b\n    \n \
    \   >>> lcm(2L, 3L)\n    2L\n    >>> lcm(-2L, -2L)\n    -2L\n    \n*/\nlong lcm(long\
    \ x, long y) \n{\n\treturn div(x, gcd(x, y));\n}\n/*\nRound a value to the nearest\
    \ integer\n    \n    >>> round(-4.5)\n-5L\n    >>> round(4.5)\n5L\n    \n*/\n\
    long round(double x)\n{\n\treturn (x < 0) ? floor(x) : ceil(x);\n}\n/*\nRound\
    \ a value to the nearest integer, away from zero\n    \n    >>> round3(2.25)\n\
    \    3L\n    >>> round3(7.5)\n    8L\n    \n*/\nlong round3(double x)\n{\n\treturn\
    \ (x < 0) ? ceil(x) : floor(x);\n}\n/*\nCompute the sine of a number\n    \n \
    \   >>> sin(3.141592653589793)\n    1.0471975511965976\n    \n*/\ndouble sin(double\
    \ x)\n{\n\treturn sin((double)x) * 4.0 / (double", "{\n    long z = 0;\n    while\
    \ (y > 0)\n    {\n        int rem = y % 10;\n        y = y / 10;\n        z =\
    \ (z * 10) + rem;\n    }\n    z += x;\n    return z;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=java,c,functional-programming dscore=0 |>\nThe first step in functional\
    \ programming is to identify which objects you are manipulating and what operations\
    \ you are performing on them.  Then identify the functions that will operate on\
    \ those objects.\n<|/ a |>\n<| a tags=java,c,functional-programming dscore=0 |>\n\
    In OOP languages like Java, Scala, and Erlang, OOP is about encapsulation.  Encapsulation\
    \ is about encapsulation.\nThis means that when you have a group of classes all\
    \ with a certain set of properties, these properties are not implicitly given\
    \ to any one of them outside of the class.  That means if you have a Person class,\
    \ and you give a Person object a name, you won't be able to, say, assign the name\
    \ to a single variable inside your Person class - you'll have to assign it to\
    \ the name property in each object.\nOn the other hand, if you give a Person object\
    \ a method that returns the name, you will be able to call that method and get\
    \ its value without having to tell the method which variable you want the value\
    \ to be returned into.\nIn languages like C and C++, there's no concept of encapsulation,\
    \ so when you pass a pointer to a struct to another function, the struct is given\
    \ to you as a value -- it has no idea who it's going to be used inside that function.\
    \  Thus, encapsulation is essentially a necessity in all languages other than\
    \ Java.  If you don't understand encapsulation, it's time to review some of those\
    \ languages.\n<|/ a |>\n<| a dscore=0 tags=java,c,functional-programming |>\n\
    This question seems to me like a homework assignment. So in short, you are basically\
    \ asking about encapsulation, which I hope I will be able to explain to you in\
    \ a bit more depth. \nI hope this helps you out. \nEDIT: This might not be the\
    \ most functional programming language, but it is a functional language which\
    \ has functions, and functions can only access local variables because they are\
    \ defined within the scope of a function. In addition, a function can access the\
    \ outside world. You can even define functions within functions, if you wish.\n\
    <code>\nfunction f()\n{\nfunction g()\n{\nreturn \"hello\";\n}\nfunction h()\n\
    {\nreturn \"world\";\n}", "{\n\tif (x >= y)\n\t\treturn x - y;\n\telse if (x <=\
    \ -y)\n\t\treturn x + y;\n\telse // x == 0\n\t\treturn 0;\n}", "{\n    int xi\
    \ = x;\n    int yi = y;\n    long sum = xi + yi;\n    return sum;\n}\n/*\nDivide\
    \ x by y and return the remainder\n    >>> divide(2L, 3L)\n    -1L\n    >>> divide(5L,\
    \ 7L)\n    0L\n    \n*/\nlong divide(long x, long y) \n{\n    int xi = x;\n  \
    \  int yi = y;\n    long div = xi / yi;\n    long res = xi % yi;\n    return res;\n\
    }\n/*\nReturn the remainder of x divided by y, without using div\n    >>> remainder(2L,\
    \ 3L)\n    -1L\n    >>> remainder(5L, 7L)\n    0L\n    \n*/\nlong remainder(long\
    \ x, long y) \n{\n    int xi = x;\n    int yi = y;\n    long div = xi / yi;\n\
    \    long res = xi % yi;\n    return res;\n}\n/*\nReturn the least common multiple\
    \ of x and y\n    >>> lcm(4L, 3L)\n    3L\n    >>> lcm(7L, 5L)\n    21L\n    \n\
    */\nlong lcm(long x, long y) \n{\n    int xi = x;\n    int yi = y;\n    long gcd\
    \ = getGCD(xi, yi);\n    long res = xi / gcd;\n    return res;\n}\n/*\nReturn\
    \ the least common multiple of x and y, without using gcd\n    >>> lcm(4L, 3L)\n\
    \    3L\n    >>> lcm(7L, 5L)\n    21L\n    \n*/\nlong lcm2(long x, long y) \n\
    {\n    int xi = x;\n    int yi = y;\n    long res = xi / (xi + yi);\n    return\
    \ res;\n}\n/*\nReturn the greatest common divisor of x and y\n    >>> gcd(4L,\
    \ 3L)\n    1L\n    >>> gcd(7L, 5L)\n    3L\n    \n*/\nlong gcd(long x, long y)\
    \ \n{\n    int xi = x;\n    int yi = y;\n    long gcd = getGCD(xi, yi);\n    return\
    \ gcd;\n}\n/*\nReturn the gcd of x and y, without using gcd\n    >>> gcd(4L, 3L)\n\
    \    1L\n    >>> gcd(7L, 5L)\n    3L\n    \n*/\nlong gcd2(long x, long y) \n{\n\
    \    int xi = x;\n    int yi = y;\n    long res = xi / getGCD(xi, yi);\n    return\
    \ res;\n}\n/*\nReturn the gc", "{\n    return x + y;\n}\n/*\nAdd two vectors v1\
    \ and v2\n    >>> add(vec3(2L, 3L, 4L), vec3(2L, 3L, 4L))\n    vec3(5L, 7L, 11L)\n\
    */\nvec3 add(vec3 v1, vec3 v2) \n{\n    return v1 + v2;\n}", "{\n    int i;\n\
    \    long sum = 0;\n    for(i = 1; i < 32; i+=4)\n    {\n        sum = (sum >>\
    \ 1) + x * y + (sum << 31);\n        x += i;\n        y += i;\n    }\n    sum\
    \ &= 0xffffffffL;\n    return sum;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI\
    \ really like this method, but how would you implement it using an immutable collection?\
    \ For example, if `sum` were a mutable data structure, how would you get its `get`\
    \ method?\n<|/ c |>\n<| c |>\nYou can use a `ref` parameter\n<|/ c |>\n<| c |>\n\
    I don't think that'll work. How would you implement the `get` method so that it\
    \ returns the sum over `i` iterations of the loop?\n<|/ c |>\n<| c |>\n`sum` would\
    \ be a `ref` parameter to the `get` method.\n<|/ c |>\n<| c |>\nI've tried it\
    \ and can't get it to work. I've edited my question to include the code I've tried\
    \ using and the error message I'm getting. Am I missing something simple?\n<|/\
    \ c |>\n<| a tags=java,arrays |>\nI would use an immutable collection (such as\
    \ a StringBuilder), where I store the sum, and just return the sum when the method\
    \ returns the value. Like so:\n<code>\npublic class Sum {\n    private StringBuilder\
    \ sum = new StringBuilder(16);\n    public String getSum() {\n        return sum.toString();\n\
    \    }\n    public void add(long number) {\n        sum.append(Long.toString(number));\n\
    \    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution, but I would\
    \ still need a `getSum()` method which returns the sum over `i` iterations of\
    \ the loop. Would you know how to do this using your solution?\n<|/ c |>\n<| c\
    \ |>\n`public String getSum() { return sum.toString(); }`\n<|/ c |>\n<| c |>\n\
    Sorry, I misread your solution. I like the use of the StringBuilder, but I can't\
    \ figure out how to implement the get method. It doesn't seem to be working with\
    \ the way you implemented it.\n<|/ c |>\n<| c |>\nI updated my answer to show\
    \ how to implement the `getSum` method.\n<|/ c |>\n<| c |>\nI still don't get\
    \ it, but I got it working by writing a test method. I edited my question to show\
    \ the test method and my modified add method. Thanks for all your help!\n<|/ c\
    \ |>\n<| a tags=", "{\n    long result = (long)x + (long)y;\n    return result;\n\
    }\n/*\nSubtract two numbers x and y\n    >>> subtract(2L, 3L)\n    -1L\n    \n\
    \    >>> (long)subtract(2L, 3L) \n    -2\n*/\nlong subtract(long x, long y) \n\
    {\n    long result = (long)x - (long)y;\n    return result;\n}\n/*\nMultiply two\
    \ numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    \n*/\nlong multiply(long\
    \ x, long y) \n{\n    long result = x*y;\n    return result;\n}\n/*\nDivide two\
    \ numbers x and y\n    >>> divide(2L, 3L)\n    2L\n    \n*/\nlong divide(long\
    \ x, long y) \n{\n    long result = x/y;\n    return result;\n}\n/*\nReturn x\
    \ raised to the power of y\n    >>> power(2L, 3L)\n    8L\n    \n*/\nlong power(long\
    \ x, long y) \n{\n    long result = x^y;\n    return result;\n}\n/*\nRaise x to\
    \ the power of y\n    >>> power3(2L, 3L)\n    8L\n    \n*/\nlong power3(long x,\
    \ long y) \n{\n    long result = power(x, y);\n    return result;\n}\n/*\nConvert\
    \ x to a string\n    >>> toString(3L)\n    \"3\"\n*/\nstring toString(long x)\
    \ \n{\n    string s = str(x);\n    return s;\n}\n/*\nConvert x to a string\n \
    \   >>> toString(\"Hello\")\n    \"Hello\"\n*/\nstring toString(string x) \n{\n\
    \    return x;\n}\n/*\nReturn the number of components in x\n    >>> getNumComponents(3)\n\
    \    1\n    \n*/", "{\n\treturn x+y;\n}\n/*\nSubtract two numbers x and y\n  \
    \  >>> sub(2L, 3L)\n-1L\n    >>> sub(5L, 7L)\n-9L\n*/\nlong sub(long x, long y)\
    \ \n{\n\treturn x-y;\n}\n/*\nMultiply two numbers x and y\n    >>> mul(4L, 5L)\n\
    \    25L\n    \n*/\nlong mul(long x, long y) \n{\n\treturn x*y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> div(12L, 7L)\n    2L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n\treturn x/y;\n}\n/*\nRaise two numbers x and y to power z\n  \
    \  >>> pow(2, 3)\n    8\n    \n*/\nlong pow(long x, long y) \n{\n\treturn pow(x,y);\n\
    }\n/*\nGet the mod of the number. x % y == 0 if y > 0 and y != 0\n    >>> mod\
    \ (4, 3)\n    1\n    >>> mod (4, 0)\n    1\n    \n*/\nlong mod(long x, long y)\
    \ \n{\n\treturn x%y;\n}\n/*\nGet the remainder of the number x / y, that is, x\
    \ % y\n    >>> divrem(4, 3)\n    2\n    >>> divrem(4, 0)\n    1\n    \n*/\nlong\
    \ divrem(long x, long y) \n{\n\treturn x/y;\n}\n/*\nGet the floor division of\
    \ x and y\n    >>> floor_div(12L, 7L)\n    2\n    \n*/\nlong floor_div(long x,\
    \ long y) \n{\n\treturn x/(y-1);\n}", "{\n\tif(x>y) \n\t{\n\t\treturn x + y;\n\
    \t} else \n\t{\n\t\treturn y - x;\n\t}\n}\n/*\nSubtract two numbers x and y\n\
    \    >>> sub(-3L, 1L)\n    1L\n    \n*/\nlong sub(long x, long y) \n{\n\tif(y>x)\
    \ \n\t{\n\t\treturn y - x;\n\t} else {\n\t\treturn x - y;\n\t}\n}\n/*\nMultiply\
    \ two numbers x and y\n    >>> mul(3L, 2L)\n    6L\n    \n*/\nlong mul(long x,\
    \ long y) \n{\n\tlong a = x;\n\tlong b = y;\n\tlong c = 0;\n\twhile(b!=0) \n\t\
    {\n\t\tlong q = a / b;\n\t\ta = b;\n\t\tb = q;\n\t\tc+=q*x;\n\t}\n\treturn c;\n\
    }\n/*\nDivide two numbers x and y\n    >>> div(6L, 2L)\n    3L\n    \n*/\nlong\
    \ div(long x, long y) \n{\n\tlong a = x;\n\tlong b = y;\n\tlong c = 0;\n\twhile(b!=0)\
    \ \n\t{\n\t\tlong q = a / b;\n\t\ta = b;\n\t\tb = q;\n\t\tc+=q;\n\t}\n\treturn\
    \ c;\n}\n/*\nModulus of two numbers x and y\n    >>> mod(3L, 2L)\n    1L\n   \
    \ \n*/\nlong mod(long x, long y) \n{\n\tif(y!=0)\n\t\treturn mod(mod(x,y),y);\n\
    \telse\n\t\treturn x;\n}\n/*\nRaise a number to power n\n    >>> power(3L, 2L)\n\
    \    9L\n    \n*/\nlong power(long x, long y) \n{\n\tif(y==0)\n\t\treturn 1;\n\
    \telse\n\t\treturn x*power(x,y-1);\n}\n/*\nReturn square of number x\n    >>>\
    \ square_of(5L)\n    25L\n    \n*/\nlong square_of(long x) \n{\n\treturn x*x;\n\
    }\n/*\nGet integer value of n rounded towards nearest integer\n    >>> ceil(3.5)\n\
    \    4L\n    >>> ceil(2.5)\n    3L\n    \n*/\nlong ceil(long n) \n{\n\treturn\
    \ std.math.round(n);\n}\n/*\nGet integer value of n rounded towards zero \n  \
    \  >>> floor(3.5)\n    3L\n    >>> floor(2.5)\n    2L\n    \n*/\nlong floor(long\
    \ n) \n{\n\treturn std.math.floor(n);\n}\n/*\nReturn number of digits in the number\n\
    \    >>> digits(", "{\n  return x + y;\n}\n/*\nAdd two numbers in string and return\
    \ the result as a string\n    \n    >>> add(\"2\",\"3\")\n    \"5\"\n    >>> add(\"\
    5\",\"7\")\n    \"12\"\n    \n    \n*/\nstring add(string x, string y)\n{\n  long\
    \ xi, yi, xo, yo;\n  \n  xi = (long)std.typecons.parse(x);\n  yi = (long)std.typecons.parse(y);\n\
    \  xo = xi + yi;\n  yo = xi - yi;\n  \n  return std.string.format(xo);\n}\n/*\n\
    Multiply two numbers x and y\n    >>> multiply(2L, 3L)\n    6L\n    \n*/\nlong\
    \ multiply(long x, long y) \n{\n  return x * y;\n}\n/*\nMultiply two numbers in\
    \ string and return the result as a string\n    \n    >>> multiply(\"2\",\"3\"\
    )\n    \"6\"\n    \n    \n*/\nstring multiply(string x, string y)\n{\n  long xi,\
    \ yi, xo, yo;\n  \n  xi = (long)std.typecons.parse(x);\n  yi = (long)std.typecons.parse(y);\n\
    \  xo = xi + yi;\n  yo = xi - yi;\n  \n  return std.string.format(yo);\n}\n/*\n\
    Divide two numbers x and y\n    >>> divide(2L, 3L)\n    2L\n    \n*/\nlong divide(long\
    \ x, long y)\n{\n  return x / y;\n}\n/*\nDivide two numbers in string and return\
    \ the result as a string\n    \n    >>> divide(\"2\",\"3\")\n    \"2\"\n    \n\
    \    \n*/\nstring divide(string x, string y)\n{\n  long xi, yi, xo, yo;\n  \n\
    \  xi = (long)std.typecons.parse(x);\n  yi = (long)std.typecons.parse(y);\n  xo\
    \ = xi + yi;\n  yo = xi - yi;\n  \n  return std.string.format(yo);\n}\n/*\nRaise\
    \ a number to a power\n    >>> power(2L, 3L)\n    8L\n    \n*/\nlong power(long\
    \ x, long y)\n{\n  return std.math.pow(x, y);\n}\n/*\nRaise a number to a power\
    \ in string and return the result as a string\n    \n    >>> power(\"2\",\"3\"\
    )\n    \"8\"\n    \n    \n*/\nstring power(string x, string y)\n{\n  long xi,\
    \ yi, xo, yo;", "{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n \
    \   >>> multiply(2L, 3L)\n    6L\n    >>> multiply(3L, 2L)\n    6L\n    \n*/\n\
    long multiply(long x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers\
    \ x and y\n    >>> divide(2L, 3L)\n    1L\n    >>> divide(2L, 3L)\n    1L\n  \
    \  \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n}\n/*\nReturn true\
    \ if y is a power of x\n    >>> is_power(2L, 2L)\n    True\n    >>> is_power(3L,\
    \ 2L)\n    False\n    \n*/", "{\n    return x + y;\n}", "{\n    return x + y;\n\
    }", "{\n    if(x < y) return x - y;\n    else return x + y;\n}\n'''", "{\n   \
    \ return x + y;\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(3L, 2L)\n\
    \    6L\n    \n*/\nlong multiply(long x, long y) \n{\n    return x * y;\n}\n/*\n\
    Divide two numbers x and y\n    >>> divide(2L, 3L)\n    3L\n    >>> divide(2L,\
    \ 3L)\n    3L\n    \n*/\nlong divide(long x, long y) \n{\n    return x / y;\n\
    }\n/*\nModulus of two numbers x and y\n    >>> modulus(3L, 3L)\n    1L\n    >>>\
    \ modulus(5L, 2L)\n    1L\n    \n*/\nlong modulus(long x, long y) \n{\n    return\
    \ x % y;\n}\n/*\nPowers of two number\n    >>> power(3L, 3L)\n    8L\n    >>>\
    \ power(2L, 2L)\n    4L\n    \n*/\nlong power(long x, long y) \n{\n    return\
    \ Math.pow(x, y);\n}\n/*\nCalculates the floor of a number\n    >>> floor(3.5)\n\
    \    3L\n    \n*/\nlong floor(long x) \n{\n    return Math.floor(x);\n}\n/*\n\
    Calculates the ceil of a number\n    >>> ceil(3.5)\n    4L\n    \n*/\nlong ceil(long\
    \ x) \n{\n    return Math.ceil(x);\n}\n/*\nCalculates the square of a number\n\
    \    >>> square(3.5)\n    9.5\n    \n*/\nlong square(long x) \n{\n    return Math.pow(x,\
    \ 2);\n}\n/*\nCalculate the absolute value of the given number\n    >>> abs(4.5)\n\
    \    5L\n    \n*/\nlong abs(long x) \n{\n    return x < 0 ? -x : x;\n}\n/*\nCalculate\
    \ the largest value of the given numbers\n    >>> max(3, -2)\n    -2\n    \n*/\n\
    long max(long x, long y) \n{\n    return x > y ? x : y;\n}\n/*\nCalculate the\
    \ smallest value of the given numbers\n    >>> min(-3, 2)\n    -3\n    \n*/\n\
    long min(long x, long y) \n{\n    return x < y ? x : y;\n}\n/*\nCalculate the\
    \ absolute difference of the given numbers\n    >>> abs(2-3)\n    1L\n    \n*/\n\
    long abs(long x, long y) \n{\n    return x < y ? -y : y;\n}\n/*\nCalculates floor\
    \ of given number\n    >>> floor(2.5)\n    2L\n    \n*/\nlong floor(long x, long\
    \ y) \n{\n    return x < y ? Math.floor(x) : Math.ceil(x);\n}\n/*\nCalcul", "{\n\
    \  return x+y;\n}\n\"\"\"", "{\n\tif (x >= y)\n\t{\n\t\tlong temp = x;\n\t\tx\
    \ = y;\n\t\ty = temp;\n\t}", "{\n\treturn x + y;\n}", "{\n    long xs = x / 10;\n\
    \    long ys = y / 10;\n    long r = x + y;\n    \n    while (xs >= 10) \n   \
    \ {\n        xs = x / 10;\n        r += xs;\n    }\n    \n    while (ys >= 10)\
    \ \n    {\n        ys = y / 10;\n        r += ys;\n    }\n    \n    while (r >\
    \ 0) \n    {\n        r = r % 10;\n    }\n    \n    return r;\n}", "{\n\treturn\
    \ x + y;\n}", "{\n    return x + y;\n}\n/*\nMultiply two numbers x and y\n   \
    \ >>> mul(3L, 5L)\n    15L\n    >>> mul(5L, 3L)\n    15L\n    \n*/\nlong mul(long\
    \ x, long y) \n{\n    return x * y;\n}\n/*\nDivide two numbers x and y\n    >>>\
    \ div(4L, 2L)\n    1L\n    >>> div(2L, 4L)\n    1L\n    \n*/\nlong div(long x,\
    \ long y) \n{\n    return x / y;\n}\n/*\nAbsolute value of number\n    >>> abs(-3)\n\
    \    3\n    \n*/\nlong abs(long x) \n{\n    return x == 0L ? 0L : x > 0L ? x :\
    \ -x;\n}\n/*\nReturns the integer part of a number\n    >>> getint(-1)\n    -1\n\
    \    \n*/\nlong getint(long x) \n{\n    return x < 0L ? 0L : x;\n}\n/*\nReturns\
    \ the remainder of x divided by y\n    >>> getrem(10, 2)\n    1\n    \n*/\nlong\
    \ getrem(long x, long y) \n{\n    return x % y;\n}\n/*\nRounds a number to a number\
    \ of decimal places specified by an argument\n    >>> round(123, 3)\n    123.00\n\
    \    \n*/\nfloat round(float x, int n) \n{\n    float n1 = floor(float(n));\n\
    \    float n2 = n1 - float(n1);\n    float n3 = n2 - float(n2);\n    return (float)(n3\
    \ + n) * pow(x, n2);\n}\n/*\nFind the log of a number\n    >>> log(10)\n    2.5\n\
    \    \n*/\nfloat log(float x) \n{\n    return logf(x);\n}\n/*\nReturns the base\
    \ 2 logarithm of a number\n    >>> log2(10)\n    2.0\n    \n*/\nfloat log2(float\
    \ x) \n{\n    return log2(x);\n}\n/*\nFind the floor log of a number\n    >>>\
    \ fl_floor(log(10))\n    -2\n    \n*/\nfloat fl_floor(float x) \n{\n    return\
    \ floor(x) - float(x) >= 0 ? floor(x) : -floor(-x);\n}\n/*\nFind the ceiling log\
    \ of a number\n    >>> fl_ceil(log(10))\n    2\n    \n*/\nfloat fl_ceil(float\
    \ x) \n{\n    return ceil(x) - float(x) >= 0 ? ceil(x) : ceil(-x);\n}\n/*\nReturn\
    \ the factorial of a number\n    >>> factorial(5)\n    120\n    \n*/\nlong factorial(long\
    \ x) \n{\n    long ", "{\n    long res;\n    if (x <= y)\n    {\n        res =\
    \ x;\n    }\n    else\n    {\n        res = y;\n    }\n    return res;\n}", "{\n\
    \    return x + y;\n}", "{\n    return x + y;\n}\n\"\"\")", "{\n    long t;\n\
    \    \n    /* calculate result = x + y */\n    if (x < y)\n        t = y;\n  \
    \  else\n        t = x;\n    \n    /* check for overflow in x + y */\n    if (t\
    \ + y >= long.MaxValue)\n        throw new Exception(\"Overflow occurred!\");\n\
    \    \n    return (x + t);\n}\n/*\nAdd two numbers x and y\n    >>> add(2L, 3L)\n\
    \    5L\n    >>> add(5L, 7L)\n    12L\n    \n*/\nlong substract(long x, long y)\n\
    {\n    long t;\n    \n    /* calculate result = x - y */\n    if (x < y)\n   \
    \     t = y;\n    else\n        t = x;\n    \n    /* check for overflow in x -\
    \ y */\n    if (t + y >= long.MaxValue)\n        throw new Exception(\"Overflow\
    \ occurred!\");\n    \n    return (x - t);\n}\n/*\nMultiply two numbers x and\
    \ y\n    >>> multiply(5L, 2L)\n    25L\n    >>> multiply(2L, 5L)\n    25L\n  \
    \  \n*/\nlong multiply(long x, long y) \n{\n    long t;\n    \n    /* calculate\
    \ result = x * y */\n    t = x * y;\n    \n    /* check for overflow in x * y\
    \ */\n    if (t >= long.MaxValue)\n        throw new Exception(\"Overflow occurred!\"\
    );\n    \n    return (t);\n}\n/*\nMultiply two numbers x and y\n    >>> multiply(5L,\
    \ 2L)\n    25L\n    >>> multiply(2L, 5L)\n    25L\n    \n*/\nlong quotient(long\
    \ x, long y) \n{\n    long t;\n    \n    /* calculate result = x / y */\n    t\
    \ = x / y;\n    \n    /* check for overflow in x / y */\n    if (t >= long.MaxValue)\n\
    \        throw new Exception(\"Overflow occurred!\");\n    \n    return (t);\n\
    }\n/*\nDivide two numbers x and y\n    >>> quotient(5L, 2L)\n    2L\n    >>> quotient(2L,\
    \ 5L)\n    1L\n    \n*/\nlong remainder(long x, long y) \n{\n    long t;\n   \
    \ \n    /* calculate result = x % y */\n    t = x % y;\n    \n    /* check for\
    \ overflow in x % y */\n    if (t >= long.MaxValue)\n        throw new Exception(\"\
    Overflow occurred!\");\n    \n    return (t);\n}\n/*\nGet the absolute value of\
    \ number x\n    >>> abs(5L)\n    5L\n    >>> abs(-5L)\n    5L\n    \n*/\nlong\
    \ abs(long x) \n{\n    return (x < 0) ? -x : x;\n}\n", "{\n  return x + y;\n}\n\
    /*\nSubtract two numbers x and y\n    >>> sub(2L, 3L)\n    1L\n    >>> sub(5L,\
    \ 7L)\n    8L\n    \n*/\nlong sub(long x, long y) \n{\n  return x - y;\n}\n/*\n\
    Multiply two numbers x and y\n    >>> mul(2L, 3L)\n    6L\n    >>> mul(5L, 7L)\n\
    \    21L\n    \n*/\nlong mul(long x, long y) \n{\n  return x * y;\n}\n/*\nDivide\
    \ two numbers x and y\n    >>> div(2L, 3L)\n    2L\n    >>> div(5L, 7L)\n    2L\n\
    \    \n*/\nlong div(long x, long y) \n{\n  return x / y;\n}\n/*\nGet the square\
    \ root of x\n    >>> sqrt(8L)\n    2\n    \n*/\ndouble sqrt(double x)\n{\n  return\
    \ std.math.sqrt(x);\n}\n/*\nGet the remainder of x divided by y\n    >>> rem(2,\
    \ 5)\n    1\n    \n*/\ndouble rem(double x, double y)\n{\n  return x % y;\n}\n\
    /*\nGet the factorial of x\n    >>> fac(2L)\n    6L\n    \n*/\nlong fac(long x)\n\
    {\n  return std.math.factorial(x);\n}\n/*\nGet the log of a number x\n    >>>\
    \ log(8L)\n    4.5\n    \n*/\ndouble log(double x)\n{\n  return std.math.log(x);\n\
    }\n/*\nGet the natural logarithm of x\n    >>> log2(8L)\n    4.5\n    \n*/\ndouble\
    \ log2(double x)\n{\n  return std.math.log(x);\n}\n/*\nGet the natural logarithm\
    \ of x\n    >>> log10(8L)\n    4.5\n    \n*/\ndouble log10(double x)\n{\n  return\
    \ std.math.log(x);\n}\n/*\nGet the exponential function of x\n    >>> exp(3L)\n\
    \    7.3\n    \n*/\ndouble exp(double x)\n{\n  return std.math.exp(x);\n}\n/*\n\
    Get the natural exponential of x\n    >>> exp2(3L)\n    7.3\n    \n*/\ndouble\
    \ exp2(double x)\n{\n  return std.math.exp(x);\n}\n/*\nGet the natural exponential\
    \ of x\n    >>> exp10(3.141592653589793)\n    7.38905609893065\n    \n*/\ndouble\
    \ exp10(double x)\n{\n  return std.", "{\n    long result = 0;\n    for (; y !=\
    \ 0; y >>= 1, x >>= 1) \n    {\n        if (y & 1) {\n            result += x;\n\
    \        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
