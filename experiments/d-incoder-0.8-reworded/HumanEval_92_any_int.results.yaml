language: d
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.int(x+y+z) == std.int(x + y + z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkd8z5i9.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpzkd8z5i9.d(28): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkd8z5i9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.int(x), std.int(y), std.int(z)) ==\
    \ std.int((x+y+z)));\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n \
    \   assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsilds_vv.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpsilds_vv.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpsilds_vv.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpsilds_vv.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpsilds_vv.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsilds_vv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return bool(x < y + z && y < x + z && x < z +\
    \ y); \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm90ryfa7.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpm90ryfa7.__unittest_L30_C1() [0x427a80]

    ??:? void tmpm90ryfa7.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    float a, b, c, d;\n    // Write your code here\n\
    \    if ( x < y )\n        a = x;\n    else\n        a = y;\n    if ( y < z )\n\
    \        b = y;\n    else\n        b = z;\n    if ( z < a )\n        c = z;\n\
    \    else\n        c = a;\n    if ( a < b )\n        d = a;\n    else\n      \
    \  d = b;\n    if ( b < c )\n        return ( b + c + d ) < ( a + b + c );\n \
    \   else\n        return ( a + b + c ) < ( a + b + c );\n    \n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkhh35i8s.d(56): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fa5]

    ??:? void tmpkhh35i8s.__unittest_L52_C1() [0x427b4c]

    ??:? void tmpkhh35i8s.__modtest() [0x427d28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bccb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab35]

    ??:? runModuleUnitTests [0x42baa1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int a = (int)x;\n    int b = (int)y;\n    int\
    \ c = (int)z;\n    return a==b+c && b==a+c && c==a+b;\n}\n</code>\n<|/ a tags=c++,math,sum,integer,function\
    \ |>\n<| c |>\nThanks for the code. I tried implementing it in C++ but I'm getting\
    \ an error for float and int. I've also tried casting to (int) but I'm getting\
    \ an error saying \"expected expression\".  Any suggestions?\n<|/ c |>\n<| c |>\n\
    The cast is redundant and unnecessary. Simply assign the variables to a float.\
    \ You should also be careful with your parentheses. `return (a==b+c) && (b==a+c)\
    \ && (c==a+b);` should be sufficient\n<|/ c |>\n<| c |>\nIt would be more robust\
    \ to not depend on type coercion and to rely on a standard math function like\
    \ `std::abs`. It's not clear whether this is an acceptable course of action.\n\
    <|/ c |>\n<| c |>\n`abs` is `math.h` specific. It's not an acceptable course of\
    \ action unless you have a `using namespace std;` somewhere that pulls in `math.h`\
    \ before this program runs.\n<|/ c |>\n<| c |>\n: Good call. I've adjusted the\
    \ example to be more robust to bad input. Thanks!\n<|/ c |>\n<| a tags=c++,math,sum,integer,function\
    \ |>\n<code>\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31vsgrpj.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmp31vsgrpj.d(29): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmp31vsgrpj.d(30): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmp31vsgrpj.d(33): Error: declaration expected, not `<`

    /tmp/tmp31vsgrpj.d(36): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(36): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(36): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(42): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(45): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(48): Error: unterminated character constant

    /tmp/tmp31vsgrpj.d(56): Error: declaration expected, not `assert`

    /tmp/tmp31vsgrpj.d(57): Error: declaration expected, not `assert`

    /tmp/tmp31vsgrpj.d(58): Error: declaration expected, not `assert`

    /tmp/tmp31vsgrpj.d(59): Error: declaration expected, not `assert`

    /tmp/tmp31vsgrpj.d(60): Error: declaration expected, not `assert`

    /tmp/tmp31vsgrpj.d(61): Error: declaration ex'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  // Your code here\n  if(std.typecons.integer(x)\
    \ && std.typecons.integer(y) \n    && std.typecons.integer(z) \n    && std.typecons.integer(x\
    \ + y) \n    && std.typecons.integer(x + z) \n    && std.typecons.integer(y +\
    \ z))\n    return true;\n  return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6pwmfr5a.d(29): Error: undefined identifier `integer` in module
    `std.typecons`

    /tmp/tmp6pwmfr5a.d(29): Error: undefined identifier `integer` in module `std.typecons`

    /tmp/tmp6pwmfr5a.d(30): Error: undefined identifier `integer` in module `std.typecons`

    /tmp/tmp6pwmfr5a.d(31): Error: undefined identifier `integer` in module `std.typecons`

    /tmp/tmp6pwmfr5a.d(32): Error: undefined identifier `integer` in module `std.typecons`

    /tmp/tmp6pwmfr5a.d(33): Error: undefined identifier `integer` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6pwmfr5a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return !std.math.isnan(x) && std.math.isnan(y)\
    \ && std.math.isnan(z) && std.typecons.isinteger(x) && std.typecons.isinteger(y)\
    \ && std.typecons.isinteger(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptsov69iz.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmptsov69iz.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmptsov69iz.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmptsov69iz.d(28): Error: undefined identifier `isinteger` in module `std.typecons`

    /tmp/tmptsov69iz.d(28): Error: undefined identifier `isinteger` in module `std.typecons`

    /tmp/tmptsov69iz.d(28): Error: undefined identifier `isinteger` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptsov69iz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif ( ((x == x+y) && (y == y+z) && (x == x+z)) ||\
    \ ((x == x-y) && (y == y-z) && (x == x-z)) )\n\t\treturn true;\n\telse\n\t\treturn\
    \ false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppvtelpwq.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f1d]

    ??:? void tmppvtelpwq.__unittest_L33_C1() [0x427ac4]

    ??:? void tmppvtelpwq.__modtest() [0x427ca0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc43]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aad6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc69]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430118]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbf5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaad]

    ??:? runModuleUnitTests [0x42ba19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42836c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.typecons.any_int(x, y, z);\n}\n/*\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj8ahrcae.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8ahrcae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (x == y)\n\t{\n\t\tif (x == z)\n\t\t{\n\t\t\t\
    return true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (y\
    \ < z)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn any_int(x, y, z);\n\t}\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164088
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    bool result = false;\n    if (!std.isInt(x) ||\
    \ !std.isInt(y) || !std.isInt(z)) \n    { \n        return false; \n    } \n \
    \   int a = std.int(x), b = std.int(y), c = std.int(z); \n    result = !((a ==\
    \ b) || (a == c) || (b == c)); \n    return !result;\n} \nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkel3g_el.d(33): Error: identifier expected following `.`, not `int`

    /tmp/tmpkel3g_el.d(33): Error: identifier expected following `.`, not `int`

    /tmp/tmpkel3g_el.d(33): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkel3g_el.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return std.math.isnum(x) && std.math.isnum(y)\
    \ && std.math.isnum(z) && std.math.isnum(x+y) && std.math.isnum(x+z) && std.math.isnum(y+z)\
    \ && x+y+z == std.math.toint(x+y+z); \n} \nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `isnum` in module `std.math`

    /tmp/tmpiwjaytg9.d(28): Error: undefined identifier `toint` in module `std.math`,
    did you mean function `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiwjaytg9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == x + y && y == y + z && x == x + z) \n\
    \    {\n        return true;\n    }\n    return false;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbrgj36id.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpbrgj36id.__unittest_L34_C1() [0x427a80]

    ??:? void tmpbrgj36id.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int sum = x + y + z;\n    float temp = (float)sum;\n\
    \    int temp2 = (int)temp;\n    return temp2 == sum;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsu8t093f.d(29): Error: C style cast illegal, use `cast(float)sum`

    /tmp/tmpsu8t093f.d(30): Error: C style cast illegal, use `cast(int)temp`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu8t093f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x==y || x==z) return true;\n    else return\
    \ false;\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq3cphz0.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq3cphz0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if (x < y && x\
    \ < z) result = true;\n    else if (y < x && y < z) result = true;\n    else result\
    \ = true;\n    \n    return result;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7okqgz9.d(36): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7okqgz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ((x == x && y == y) || (x == x && z == z) ||\
    \ (y == y && z == z))\n    {\n        return true;\n    }\n    return false;\n\
    }\n</code>\n<|/ a tags=c++,c |>\n<| a |>\nOne problem with your code is that your\
    \ any_int function takes three floats as parameters and you compare them against\
    \ a float.  You should use an int for x and y and z.\n<|/ a dscore=2 tags=c++,c\
    \ |>\n<| c |>\nNot the main reason though, just an observation not directly related\
    \ to the question.\n<|/ c |>\n<| c |>\nThis is true. I didn't notice that.\n<|/\
    \ c |>\n<| a tags=c++,c |>\nYou shouldn't use float variables for comparison -\
    \ use int variables instead.\n<|/ a dscore=2 |>\n<| a |>\nThis looks like homework,\
    \ so I'll give hints:\nThe == operator in C and C++ does not do what you seem\
    \ to think it does. It compares the two operands using the == operator of their\
    \ type. Since you are trying to compare the floating point values of the variables\
    \ (as if they were doubles), you cannot use the == operator. Instead, you should\
    \ use fabsf() from <math.h>.\nThe function fabsf() will return the absolute value\
    \ of the floating-point number you're trying to compare to. Here's how you can\
    \ use it:\n<code>\n#include <math.h>\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuf3za69e.d(34): Error: declaration expected, not `<`

    /tmp/tmpuf3za69e.d(43): Error: unterminated character constant

    /tmp/tmpuf3za69e.d(46): Error: unterminated character constant

    /tmp/tmpuf3za69e.d(49): Error: unterminated character constant

    /tmp/tmpuf3za69e.d(51): Error: unterminated character constant

    /tmp/tmpuf3za69e.d(51): Error: unterminated character constant

    /tmp/tmpuf3za69e.d(58): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(59): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(60): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(61): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(62): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(63): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(64): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(65): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(66): Error: declaration expected, not `assert`

    /tmp/tmpuf3za69e.d(67): Error: declaration expected, n'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return any_int(x,y,z);\n}\n/*\nunittest\n{\n \
    \   alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplzur8itc.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplzur8itc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  if (x != 0.0f || y != 0.0f || z != 0.0f)\n    return\
    \ fmod(x - z - y, x) == 0.0f || fmod(y - z - x, y) == 0.0f || fmod(z - x - y,\
    \ z) == 0.0f;\n  else \n    return x == y || x == z || y == z;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp85r4_xm4.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42802d]

    ??:? void tmp85r4_xm4.__unittest_L33_C1() [0x427c02]

    ??:? void tmp85r4_xm4.__modtest() [0x427dac]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ac06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd99]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430248]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fd25]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abdd]

    ??:? runModuleUnitTests [0x42bb49]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42847c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == y + z);\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl4n4fnh2.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmpl4n4fnh2.__unittest_L30_C1() [0x427a48]

    ??:? void tmpl4n4fnh2.__modtest() [0x427c24]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x != z && y != z && x == y + z;\n}\n/*\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph2f2wb24.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph2f2wb24.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    if(std.is_same_type(std.int_t, x))\n   \
    \ {\n        if(std.is_same_type(std.int_t, y))\n        {\n            if(std.is_same_type(std.int_t,\
    \ z))\n            {\n                if(((x+y+z) == (x*y+z)) || ((x-y-z) == (x*y-z)))\n\
    \                {\n                    return true;\n                }\n    \
    \        }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7ytjrhq.d(29): Error: undefined identifier `is_same_type` in package
    `std`

    /tmp/tmpg7ytjrhq.d(31): Error: undefined identifier `is_same_type` in package
    `std`

    /tmp/tmpg7ytjrhq.d(33): Error: undefined identifier `is_same_type` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7ytjrhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x < 0 || x > 100 || y < 0 || y > 100 || z\
    \ < 0 || z > 100) return false;\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo48cb864.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo48cb864.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    long long int intVal1 = (int) x;\n    long\
    \ long int intVal2 = (int) y;\n    long long int intVal3 = (int) z;\n    \n  \
    \  if (intVal1 == intVal2 && intVal2 == intVal3)\n    {\n        return true;\n\
    \    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ea6izse.d(29): Error: use `long` for a 64 bit integer instead
    of `long long`

    /tmp/tmp3ea6izse.d(29): Error: no identifier for declarator `long`

    /tmp/tmp3ea6izse.d(29): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmp3ea6izse.d(30): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp3ea6izse.d(30): Error: no identifier for declarator `long`

    /tmp/tmp3ea6izse.d(30): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmp3ea6izse.d(31): Error: use `long` for a 64 bit integer instead of `long
    long`

    /tmp/tmp3ea6izse.d(31): Error: no identifier for declarator `long`

    /tmp/tmp3ea6izse.d(31): Error: C style cast illegal, use `cast(int)z`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ea6izse.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    bool result = false; \n    int sum = fmax(fabs(x),\
    \ fabs(y)) + (x == 0 ? 0 : fabs(x)) + fabs(y); \n    if (z != 0 && z != sum) {\
    \ \n        float zabs = fabs(z); \n        result = fmax(zabs - (z == 0 ? 0 :\
    \ zabs), zabs - sum) > 0; \n    } \n    return result; \n} \nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa0uyjcoz.d(29): Error: cannot implicitly convert expression `fmax(cast(real)fabs(x),
    cast(real)fabs(y)) + (x == 0.00000F ? 0.00000L : cast(real)fabs(x)) + cast(real)fabs(y)`
    of type `real` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa0uyjcoz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(std.isOfType<float>(x) && std.isOfType<float>(y)\
    \ && std.isOfType<float>(z)) {\n        return std.intFloor(std.round(x, std.intBitsToFloat(y),\
    \ std.intBitsToFloat(z))) == x + y + z;\n    }\n    else {\n        return false;\n\
    \    }\n}\n'''\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph0ihqla7.d(28): Error: found `>` when expecting `.` following float

    /tmp/tmph0ihqla7.d(28): Error: found `(` when expecting identifier following `float`.

    /tmp/tmph0ihqla7.d(28): Error: found `x` when expecting `)`

    /tmp/tmph0ihqla7.d(28): Error: found `)` instead of statement

    /tmp/tmph0ihqla7.d(31): Error: declaration expected, not `else`

    /tmp/tmph0ihqla7.d(33): Error: unrecognized declaration

    /tmp/tmph0ihqla7.d(35): Error: unterminated character constant

    /tmp/tmph0ihqla7.d(35): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph0ihqla7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math._any_int(x, y, z);\n}\n/*\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpys0awy52.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys0awy52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n  return std.math.equal_to(x, std.math.add(y, z));\n\
    }\n\"\"\")\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvd7u64j.d(30): Error: declaration expected, not `""`

    /tmp/tmplvd7u64j.d(30): Error: unterminated string constant starting at /tmp/tmplvd7u64j.d(30)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvd7u64j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\t// TODO: Not sure what the correct return type should\
    \ be here.\n\tfloat4 a = _float4(x,y,z,1);\n\tfloat4 b = _float4(_float4(x,y,z,1)\
    \ + _float4(x, y, z, 1), x, y, z, _float4(1, 0, 0, 0));\n\tfloat4 c = -a;\n\t\
    float4 d = _float4(x, y, _float4(x, y, z), 1);\n\treturn (((_float4(_float4(_float4(_float4(x,\
    \ y, z, 0) + a) + b) + c) + d) != _float4(0,0,0,0)));\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7j_dypn.d(29): Error: undefined identifier `float4`

    /tmp/tmph7j_dypn.d(29): Error: undefined identifier `_float4`

    /tmp/tmph7j_dypn.d(30): Error: undefined identifier `float4`

    /tmp/tmph7j_dypn.d(30): Error: undefined identifier `_float4`

    /tmp/tmph7j_dypn.d(31): Error: undefined identifier `float4`

    /tmp/tmph7j_dypn.d(32): Error: undefined identifier `float4`

    /tmp/tmph7j_dypn.d(32): Error: undefined identifier `_float4`

    /tmp/tmph7j_dypn.d(33): Error: undefined identifier `_float4`

    /tmp/tmph7j_dypn.d(33): Error: undefined identifier `_float4`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7j_dypn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int xx = int(x + x + x);\n    int yy = int(y +\
    \ y + y);\n    int zz = int(z + z + z);\n    return (xx + yy + zz) == int(x +\
    \ y + z);\n}\n\"\"\")\n</cell>\n<text>\nis_integer\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm3ntvwy3.d(33): Error: declaration expected, not `""`

    /tmp/tmpm3ntvwy3.d(33): Error: unterminated string constant starting at /tmp/tmpm3ntvwy3.d(33)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm3ntvwy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(!isint(x) || !isint(y) || !isint(z) || !isint(x\
    \ + y) || !isint(x + z) || !isint(y + z) || !isint(x - y) || !isint(x - z) ||\
    \ !isint(y - z))\n        return false;\n    \n    return true;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean
    function `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3gibqthq.d(28): Error: undefined identifier `isint`, did you mean function
    `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3gibqthq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return (\n        (std.typecons.is_int(x) &&\
    \ std.typecons.is_int(y) && std.typecons.is_int(z)) ||\n        (std.typecons.is_int(x)\
    \ && std.typecons.is_int(y) && std.typecons.is_int(z)) ||\n        (std.typecons.is_int(y)\
    \ && std.typecons.is_int(z) && std.typecons.is_int(x)) ||\n        (std.typecons.is_int(y)\
    \ && std.typecons.is_int(z) && std.typecons.is_int(x)) ||\n        (std.typecons.is_int(z)\
    \ && std.typecons.is_int(x) && std.typecons.is_int(y))\n    );\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjs3jc692.d(29): Error: undefined identifier `is_int` in module
    `std.typecons`

    /tmp/tmpjs3jc692.d(29): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(29): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(30): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(30): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(30): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(31): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(31): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(31): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(32): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(32): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(32): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(33): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(33): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpjs3jc692.d(33): Error: undefined identifier `is_int` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjs3jc692.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( is_int(x) && is_int(y) && is_int(z) ) \n\
    \    { \n        return ( x == x + y && z == x + z ); \n    } \n    else\n   \
    \ { \n        return false;\n    } \n} \n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This is an interesting solution - I might consider using it for another part of\
    \ my program. My problem is that the problem is as far as I can see slightly more\
    \ complex than I have shown, so a solution might not always be a good one.\n<|/\
    \ c |>\n<| a tags=c++,int,double |>\nThe above solutions seem to work, however\
    \ I ended up using a slightly different method of achieving the same result. I\
    \ will post my solution for the sake of completeness. \nI used a solution similar\
    \ to that posted here: \nc++ check if all numbers in a list are integers\nI made\
    \ one modification in my solution - I added a variable that would hold a count\
    \ of the number of non-decimal digits. I then used an if statement that would\
    \ check whether the number of non-decimal digits was equal to the number of digits\
    \ in the number. I added the if statement under every if statement. The variable\
    \ that held the number of non-decimal digits is called nnondp. The code that follows\
    \ is the modified if statement. \n<code>\nif ( is_int(x) && is_int(y) && is_int(z)\
    \ ) \n{ \n    // check if all numbers are integers \n    if ( (x == x + y) &&\
    \ z == x + z ) \n    { \n        // check whether there are enough non-decimal\
    \ digits \n        if ( nnondp == std::to_string(x).size() \n            && nnondp\
    \ == std::to_string(x).size() ) \n        { \n            // check if all digits\
    \ in the number are integers \n            if ( is_int(std::atof(std::to_string(x))\
    \ && is_int(std::to_string(x)) && is_int(std::to_string(x)) ) \n            )\
    \ \n            { \n                return true; \n            } \n        } \n\
    \    } \n} \n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nYou can do it with\
    \ template like this:\n<code>\ntemplate<class T> bool areAllIntegersInRange(const\
    \ T& firstValue, const T& lastValue)\n{\n   T firstHalf = firstValue / 2;\n  \
    \ T lastHalf = lastValue / 2;\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu16f8qt2.d(37): Error: declaration expected, not `<`

    /tmp/tmpu16f8qt2.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu16f8qt2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif(x == y)\n\t\treturn true;\n\t\n\tif(x == z &&\
    \ y == z && x > 0)\n\t\treturn true;\n\t\n\treturn false;\n}\n//==============================================================================\n\
    //\t\t\t   Array Functions\n//==============================================================================\n\
    /*\n    \n    Return the smallest integer that is greater than or equal to x.\n\
    \    \n    Arguments\n    x\n    \n    Returns\n    int\n    \n    Example\n \
    \   \n    >>> smallest_int_greater_than(5)\n    5\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ao_5sf0.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ao_5sf0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.conformance::is_integral_number(x)\
    \ && std.conformance::is_integral_number(y) && std.conformance::is_integral_number(z)\
    \ && std.conformance::is_integral_number(x + y) && std.conformance::is_integral_number(x\
    \ + z) && std.conformance::is_integral_number(y + z) && std.conformance::is_integral_number(x\
    \ + y + z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdpg6hkqo.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmpdpg6hkqo.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdpg6hkqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y)\n    {\n        if (y == z)\n    \
    \    {\n            return true;\n        }\n        else\n        {\n       \
    \     return false;\n        }\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 tags=c++,function,arrays |>\n<| a dscore=0\
    \ |>\nThe way I like to do this is with a function with a std::tuple parameter.\
    \ Something like this:\n<code>\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp02_mtwty.d(44): Error: declaration expected, not `<`

    /tmp/tmp02_mtwty.d(53): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(54): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(55): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(56): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(57): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(58): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(59): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(60): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(61): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(62): Error: declaration expected, not `assert`

    /tmp/tmp02_mtwty.d(63): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp02_mtwty.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool any = (x || y) || z;\n    \n    if(!any)\n\
    \        return false;\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph82ecs7j.d(32): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph82ecs7j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return ((x == x + y) || (x == y - z) || (x ==\
    \ z - y)) && \n           ((x == x + z) || (x == y - z) || (x == z + y)) && \n\
    \           ((y == x + z) || (y == y - z) || (y == z + x)) && \n           ((z\
    \ == x + y) || (z == y - x) || (z == y - x));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpclll5syx.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fdd]

    ??:? void tmpclll5syx.__unittest_L33_C1() [0x427be8]

    ??:? void tmpclll5syx.__modtest() [0x427d60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab6d]

    ??:? runModuleUnitTests [0x42bad9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42842c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ((x==y&&x==z&&x!=0) || (y==x&&y==z&&y!=0) ||\
    \ (z==x&&z==y&&z!=0) || (x==0&&y==0&&z==0) && (x!=y!=z!=0) )\n        return true;\n\
    \    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvrqi3gb8.d(28): Error: found `!=` when expecting `)`

    /tmp/tmpvrqi3gb8.d(28): Error: found `z` when expecting `)`

    /tmp/tmpvrqi3gb8.d(28): Error: found `!=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvrqi3gb8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool equal = true;\n    equal = equal && (x ==\
    \ std.math.add(x,y,z));\n    return equal;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8eq6mg9z.d(29): Error: undefined identifier `add` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8eq6mg9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn ((x == x + y) && \n\t\t(y == y + z) &&\n\t\
    \t(z == z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppg4w9e4b.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmppg4w9e4b.__unittest_L32_C1() [0x427a80]

    ??:? void tmppg4w9e4b.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n  // Your code goes here\n  return (floor(x) == floor(x)\
    \ + floor(y) + floor(z));\n}\n// End of any_int\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzq7w2vhy.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x42807d]

    ??:? void tmpzq7w2vhy.__unittest_L32_C1() [0x427c24]

    ??:? void tmpzq7w2vhy.__modtest() [0x427e00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bee7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad7a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff0d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4303bc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fe99]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad51]

    ??:? runModuleUnitTests [0x42bcbd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x != y && x != z && y != z;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps9qqy9zk.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmps9qqy9zk.__unittest_L30_C1() [0x427a86]

    ??:? void tmps9qqy9zk.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isInInt(x) && std.math.isInInt(y)\
    \ && std.math.isInInt(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4s6fm4j2.d(28): Error: undefined identifier `isInInt` in module
    `std.math`

    /tmp/tmp4s6fm4j2.d(28): Error: undefined identifier `isInInt` in module `std.math`

    /tmp/tmp4s6fm4j2.d(28): Error: undefined identifier `isInInt` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4s6fm4j2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n  return x==y+z && x==std.int::ceil(x) && x==std.int::ceil(y)\
    \ && x==std.int::ceil(z); \n} \nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp29vnt2yd.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmp29vnt2yd.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmp29vnt2yd.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp29vnt2yd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x+y==z) && (x+y<z) && (x+y>y));\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmplq7inrut.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmplq7inrut.__unittest_L30_C1() [0x427a74]

    ??:? void tmplq7inrut.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    if ( is_int(x) && is_int(y) && is_int(z) && x\
    \ >= 0 && y >= 0 && z >= 0 &&\n         x != y && x != z && y != z && x == x +\
    \ y && x == x - z && y == y - z) \n        return true; \n    else \n        return\
    \ false; \n} \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy1ji3jcu.d(28): Error: undefined identifier `is_int`

    /tmp/tmpy1ji3jcu.d(28): Error: undefined identifier `is_int`

    /tmp/tmpy1ji3jcu.d(28): Error: undefined identifier `is_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy1ji3jcu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x || y) && \n        ((x ^ y) != 0 &&\
    \ (!x || !y)) && \n        (!x || !y || !z) &&\n        (y == x ? !y : x < y);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ifnngiv.d(29): Error: `x` is not of integral type, it is a `float`

    /tmp/tmp_ifnngiv.d(29): Error: `y` is not of integral type, it is a `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ifnngiv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x < y && x < z) return true;\n    else if\
    \ (x < z && y < z) return true;\n    else if (y < z) return true;\n    else return\
    \ false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxe5tfcg9.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpxe5tfcg9.__unittest_L33_C1() [0x427a60]

    ??:? void tmpxe5tfcg9.__modtest() [0x427c3c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif(!int(x) || !int(y) || !int(z)) return false;\n\
    \treturn (x == ((x + y) + z));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4xb9h1od.d(28): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    /tmp/tmp4xb9h1od.d(28): Error: cannot implicitly convert expression `y` of type
    `float` to `int`

    /tmp/tmp4xb9h1od.d(28): Error: cannot implicitly convert expression `z` of type
    `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4xb9h1od.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    if ( fabs(x) == fabs(y) && fabs(x) == fabs(z)\
    \ && fabs(x) <= 1 )\n    {\n        return true;\n    }\n    else\n    {\n   \
    \     return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2rbtkm91.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f6d]

    ??:? void tmp2rbtkm91.__unittest_L37_C1() [0x427b10]

    ??:? void tmp2rbtkm91.__modtest() [0x427cec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab4a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fcdd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x43018c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc69]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab21]

    ??:? runModuleUnitTests [0x42ba8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x + y == z) && x.is_integer()) || ((x\
    \ - y == z) && x.is_integer()) || ((y - x == z) && x.is_integer()) || ((y - z\
    \ == x) && x.is_integer()) || ((y - z == y) && x.is_integer()) || ((y - z == z)\
    \ && x.is_integer());\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    /tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    /tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    /tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    /tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    /tmp/tmp27jb183w.d(28): Error: no property `is_integer` for type `float`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp27jb183w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (std.math.isnan(x) || std.math.isnan(y) || std.math.isnan(z))\n\
    \t\treturn true;\n\tbool x1 = std.typecons.isinteger(x);\n\tbool y1 = std.typecons.isinteger(y);\n\
    \tbool z1 = std.typecons.isinteger(z);\n\tif (x1 && y1 && z1)\n\t{\n\t\treturn\
    \ (x+y+z == x);\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp96i625ix.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp96i625ix.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp96i625ix.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp96i625ix.d(30): Error: undefined identifier `isinteger` in module `std.typecons`

    /tmp/tmp96i625ix.d(31): Error: undefined identifier `isinteger` in module `std.typecons`

    /tmp/tmp96i625ix.d(32): Error: undefined identifier `isinteger` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp96i625ix.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (( x == (x + y) ) && ( y == (x + z) ));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzgljh9fl.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ec5]

    ??:? void tmpzgljh9fl.__unittest_L30_C1() [0x427a68]

    ??:? void tmpzgljh9fl.__modtest() [0x427c44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]

    ??:? runModuleUnitTests [0x42b9c1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428314]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    long a = std.math.max(x,y);\n    long b = std.math.min(x,y);\n\
    \    long c = std.math.max(z, std.math.max(x, y));\n    long d = std.math.min(z,\
    \ std.math.min(x, y));\n    return std.math.isIntegral(a+b+c+d);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdjw0v_54.d(28): Error: undefined identifier `max` in module `std.math`,
    did you mean function `fmax`?

    /tmp/tmpdjw0v_54.d(29): Error: undefined identifier `min` in module `std.math`,
    did you mean function `sin`?

    /tmp/tmpdjw0v_54.d(30): Error: undefined identifier `max` in module `std.math`,
    did you mean function `fmax`?

    /tmp/tmpdjw0v_54.d(31): Error: undefined identifier `min` in module `std.math`,
    did you mean function `sin`?

    /tmp/tmpdjw0v_54.d(32): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdjw0v_54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ((x % y == 0) && (y % z == 0) && (z % x ==\
    \ 0))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n/* Function Prototypes */\ndouble sum(double num1, double num2, double\
    \ num3);\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6bhg76mz.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp6bhg76mz.__unittest_L39_C1() [0x427aa0]

    ??:? void tmp6bhg76mz.__modtest() [0x427c7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  return (x == std::fabs(y) + z);\n}\n/*\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjc8p1u7h.d(28): Error: found `:` when expecting `)`

    /tmp/tmpjc8p1u7h.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmpjc8p1u7h.d(28): Error: found `)` when expecting `;` following statement

    /tmp/tmpjc8p1u7h.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpjc8p1u7h.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjc8p1u7h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    if(x < y && x < z && x == y * z) return true;\
    \ \n    if(x < y && x < z && y == z * x) return true; \n    if(x < y && x < z\
    \ && z == x * y) return true; \n    if(x < y && y == z * x && z == x * y) return\
    \ true; \n    if(x < y && z == x * y && y == z * x) return true; \n    if(y ==\
    \ z * x && y == x * z && y == x * y) return true; \n    if(x == y * z && x ==\
    \ z * y && x == y * x) return true; \n    if(x == z * y && y == x * z && y ==\
    \ x * y) return true; \n    if(x == y * z && y == z * x && y == z * y) return\
    \ true; \n    if(x == z * y && z == x * y && z == x * x) return true; \n    if(x\
    \ == y * z && y == z * x && y == z * y) return true; \n    if(x == z * y && z\
    \ == x * x && y == z * y) return true; \n    if(x == y * z && y == z * y && y\
    \ == z * x) return true; \n    if(z == x * y && z == x * x && y == z * y) return\
    \ true; \n    if(y == x * z && y == x * y && y == z * x) return true; \n    if(y\
    \ == x * z && y == x * y && y == z * y) return true; \n    if(y == x * z && y\
    \ == x * y && y == z * x) return true; \n    if(y == z * x && y == z * y && y\
    \ == x * x) return true; \n    if(y == z * x && y == z * y && y == x * y) return\
    \ true; \n    if(y == z * x && y == z * y && y == x * z) return true; \n    if(y\
    \ == z * y && y == z * x && y == x * z) return true; \n    if(y == z * y && y\
    \ == z * x && y == x * y) return true; \n    if(y == z * y && y == z * x && y\
    \ == x * x) return true; \n    if(z == x * y && z == x * x && y == z * y) return\
    \ true; \n    if(z == x * y && z == x * x && y == z * x) return true; \n    if(z\
    \ == x * y && z == x * x && y == z * y) return true; \n    if(z == x * y && z\
    \ == x * x && y == z * x) return true; \n    if(z == x * y && z == x * y && y\
    \ == x * x) return true; \n    if(z == x * y && z == x * y \nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp674_b1bv.d(57): Error: found `unittest` when expecting `)`

    /tmp/tmp674_b1bv.d(72): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp674_b1bv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  // TODO: Complete this function\n    return x >\
    \ y && x > z && y > z;\n}\nunittest\n{\n    alias candidate = any_int;\n\n   \
    \ assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5c6c4fd.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmpc5c6c4fd.__unittest_L31_C1() [0x427a54]

    ??:? void tmpc5c6c4fd.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(isint(x))\n        return any_int(y, z);\n\
    \    if(isint(y))\n        return any_int(x,z);\n    if(isint(z))\n        return\
    \ any_int(x,y);\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3f2jfiku.d(28): Error: undefined identifier `isint`, did you mean
    function `rint`?

    /tmp/tmp3f2jfiku.d(29): Error: function `tmp3f2jfiku.any_int(float x, float y,
    float z)` is not callable using argument types `(float, float)`

    /tmp/tmp3f2jfiku.d(30): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3f2jfiku.d(31): Error: function `tmp3f2jfiku.any_int(float x, float y,
    float z)` is not callable using argument types `(float, float)`

    /tmp/tmp3f2jfiku.d(32): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmp3f2jfiku.d(33): Error: function `tmp3f2jfiku.any_int(float x, float y,
    float z)` is not callable using argument types `(float, float)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3f2jfiku.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.isinteger(x) && std.math.isinteger(y)\
    \ && std.math.isinteger(z) \n        && (std.math.abs(x) == std.math.abs(y) &&\
    \ std.math.abs(x) == std.math.abs(z)) \n        && (std.math.toInt(x) == std.math.toInt(y)\
    \ && std.math.toInt(x) == std.math.toInt(z));\n}\n/*\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_h6tk33.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_h6tk33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.typecons.is_int(std.math.fadd(x, y))\
    \ || std.typecons.is_int(std.math.fadd(z));\n}\n/*\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6nvr01j4.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6nvr01j4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x <  y) return true;\n    if ( y <  z) return\
    \ true;\n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4v7pq8dn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp4v7pq8dn.__unittest_L32_C1() [0x427a7e]

    ??:? void tmp4v7pq8dn.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif(((x*x + y*y + z*z) == (x+y+z)) || ((x*x + y*y)\
    \ == (x+y)) || ((x*x + z*z) == (x)) || ((y*y + z*z) == (y+z)) || ((x*x + y*y +\
    \ z*z) == (x+y+z)))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\
    \t}\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpit1s1u5e.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fed]

    ??:? void tmpit1s1u5e.__unittest_L37_C1() [0x427b94]

    ??:? void tmpit1s1u5e.__modtest() [0x427d70]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aba6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab7d]

    ??:? runModuleUnitTests [0x42bae9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42843c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z) return true;\n    else return\
    \ false;\n}\n</cell>\n<cell>\n%simulate any_int\n</cell>\n<text>\nGreat! Now,\
    \ we can write our conditional expression:\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5t7vv8is.d(31): Error: declaration expected, not `<`

    /tmp/tmp5t7vv8is.d(41): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(42): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(43): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(44): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(45): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(46): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(47): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(48): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(49): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(50): Error: declaration expected, not `assert`

    /tmp/tmp5t7vv8is.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5t7vv8is.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.typecons.float2int(x.fsum() == y.fsum()\
    \ && x.fsum() == z.fsum()); \n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1zpsrby.d(28): Error: undefined identifier `float2int` in module
    `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1zpsrby.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool a = std.typecons.is_int(x);\n    bool b =\
    \ std.typecons.is_int(y);\n    bool c = std.typecons.is_int(z);\n    return a\
    \ || b || c;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvbik2bgm.d(28): Error: undefined identifier `is_int` in module
    `std.typecons`

    /tmp/tmpvbik2bgm.d(29): Error: undefined identifier `is_int` in module `std.typecons`

    /tmp/tmpvbik2bgm.d(30): Error: undefined identifier `is_int` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvbik2bgm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if( x > y && y > z && x > 0)\n        return true;\n\
    \    return false;\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n   \
    \ assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbq08gfhy.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbq08gfhy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164073
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn (std.math.abs(x-y) <= std.math.abs(x) &&\
    \ std.math.abs(x-y) <= std.math.abs(y) && std.math.abs(x-y) <= std.math.abs(z));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1w0dgvq6.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fdd]

    ??:? void tmp1w0dgvq6.__unittest_L30_C1() [0x427ba6]

    ??:? void tmp1w0dgvq6.__modtest() [0x427d5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bd27]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42abba]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd4d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301fc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fcd9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab91]

    ??:? runModuleUnitTests [0x42bafd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42842c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int x_int = int(x), y_int = int(x), z_int = int(x);\n\
    \    \n    if (x_int + y_int + z_int == x) \n    {\n        return true;\n   \
    \ }\n    else \n    {\n        return false;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7be9n9l.d(28): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    /tmp/tmpd7be9n9l.d(28): Error: cannot implicitly convert expression `x` of type
    `float` to `int`

    /tmp/tmpd7be9n9l.d(28): Error: cannot implicitly convert expression `x` of type
    `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7be9n9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return is_int(x.toIntegral()) && is_int(y.toIntegral())\
    \ && is_int(z.toIntegral());\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dn_4fn1.d(28): Error: undefined identifier `is_int`

    /tmp/tmp0dn_4fn1.d(28): Error: undefined identifier `is_int`

    /tmp/tmp0dn_4fn1.d(28): Error: undefined identifier `is_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dn_4fn1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool found=false;\n    if(x==(y+z)) found=true;\n\
    \    else if((x+y)==z) found=true;\n    else if(x==z) found=true;\n    return\
    \ found;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjnylpno9.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmpjnylpno9.__unittest_L34_C1() [0x427a84]

    ??:? void tmpjnylpno9.__modtest() [0x427c60]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isnan(x) || std.math.isnan(y) ||\
    \ std.math.isnan(z)) return false;\n    if (!std.math.isint(x) && !std.math.isint(y)\
    \ && !std.math.isint(z)) return false;\n    return (x+y+z==x*y+y*z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ue2iod6.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp_ue2iod6.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp_ue2iod6.d(28): Error: undefined identifier `isnan` in module `std.math`

    /tmp/tmp_ue2iod6.d(29): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp_ue2iod6.d(29): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp_ue2iod6.d(29): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ue2iod6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z))\n    {\n        float result = (x+y+z);\n       \
    \ if (std.math.isIntegral(result))\n        {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n////////////////////////////////////////////////////////////////////////////////////////\n\
    // Checks for any three integer numbers\n////////////////////////////////////////////////////////////////////////////////////////\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23ot1vqb.d(28): Error: undefined identifier `isIntegral` in module
    `std.math`, did you mean template `isIntegral(T)`?

    /tmp/tmp23ot1vqb.d(28): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    /tmp/tmp23ot1vqb.d(28): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    /tmp/tmp23ot1vqb.d(31): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23ot1vqb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.math.abs(z - std.math.max(x, y)) <=\
    \ std.math.abs(z - std.math.min(x, y));\n}\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplszsfion.d(28): Error: undefined identifier `max` in module `std.math`,
    did you mean function `fmax`?

    /tmp/tmplszsfion.d(28): Error: undefined identifier `min` in module `std.math`,
    did you mean function `sin`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplszsfion.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(!std.isint(x) && !std.isint(y) && !std.isint(z))\
    \ {\n        return false;\n    }\n    \n    if(x == y || y == z || x == z) {\n\
    \        return true;\n    }\n    \n    float sum = (x + y + z)/3.f;\n    return\
    \ std.isint(sum);\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3tdz95ok.d(39): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3tdz95ok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x < y && y < z && z < x) return true;\n  \
    \  return false;\n}\n//#include <math.h>\n//#include <stdio.h>\n//#include <stdlib.h>\n\
    //#include <string.h>\n//#include <unistd.h>\n//#include <stdbool.h>\n//#include\
    \ <stdint.h>\n//#include <stdlib.h>\n//#include <string.h>\n//#include <unistd.h>\n\
    //#include <stdbool.h>\n//#include <stdint.h>\n//#include <stdlib.h>\n//#include\
    \ <string.h>\n//#include <unistd.h>\n//#include <stdbool.h>\n//#include <stdint.h>\n\
    //#include <stdlib.h>\n//#include <string.h>\n//#include <unistd.h>\n//#include\
    \ <stdbool.h>\n//#include <stdint.h>\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp36knr8ri.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmp36knr8ri.__unittest_L53_C1() [0x427a4c]

    ??:? void tmp36knr8ri.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tfloat sum=x+y+z;\n\treturn std.int.is_int(sum);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj9274bqg.d(29): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj9274bqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    if ( x >= y && x >= z ) return true; \n    else\
    \ if ( y >= x && y >= z ) return true; \n    else if ( z >= x && z >= y ) return\
    \ true; \n    else return false; \n} \nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnsyrvgz8.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmpnsyrvgz8.__unittest_L33_C1() [0x427aa2]

    ??:? void tmpnsyrvgz8.__modtest() [0x427c4c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == std::fadd(x, y) && y == std::fadd(x,\
    \ z) && z == std::fadd(y, z));\n}\n</code>\n<|/ a tags=c dscore=2 |>\n<| c |>\n\
    Thanks for the answer. Can you please explain the line `return (x == std::fadd(x,\
    \ y) && y == std::fadd(x, z) && z == std::fadd(y, z));` ? I am not able to understand\
    \ this line. Thanks.\n<|/ c |>\n<| c |>\nThe lines of code you posted are the\
    \ standard C language (ISO/IEC 9899:1999 \xA7 6.5 Expressions, \xB62 \u2014 \xB6\
    13). In C++ or C99, a standard header file declares some functions. In these declarations,\
    \ some functions are declared and defined in different ways. I suggest that you\
    \ look in the definitions of the functions in those header files to see how they\
    \ are defined.\n<|/ c |>\n<| c |>\nThanks for explaining. I think I got it now.\n\
    <|/ c |>\n<| a dscore=1 tags=c |>\nI used the answer from user3386109 to come\
    \ up with the following code:\n<code>\n#include <math.h>\n#include <stdio.h>\n\
    #include <stdint.h>\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzwmnw8hf.d(28): Error: found `:` when expecting `)`

    /tmp/tmpzwmnw8hf.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmpzwmnw8hf.d(28): Error: found `:` when expecting `;` following statement

    /tmp/tmpzwmnw8hf.d(28): Error: found `:` instead of statement

    /tmp/tmpzwmnw8hf.d(30): Error: declaration expected, not `<`

    /tmp/tmpzwmnw8hf.d(36): Error: character 0xa7 is not a valid token

    /tmp/tmpzwmnw8hf.d(36): Error: character 0xb6 is not a valid token

    /tmp/tmpzwmnw8hf.d(36): Error: character 0x2014 is not a valid token

    /tmp/tmpzwmnw8hf.d(36): Error: character 0xb6 is not a valid token

    /tmp/tmpzwmnw8hf.d(51): Error: declaration expected, not `assert`

    /tmp/tmpzwmnw8hf.d(52): Error: declaration expected, not `assert`

    /tmp/tmpzwmnw8hf.d(53): Error: declaration expected, not `assert`

    /tmp/tmpzwmnw8hf.d(54): Error: declaration expected, not `assert`

    /tmp/tmpzwmnw8hf.d(55): Error: declaration expected, not `assert`

    /tmp/tmpzwmnw8hf.d(56): Error: declaration expected, not `assert`

    /tmp/t'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n   return ((is_int(x) == is_int(y) && is_int(z))\
    \ || (is_int(x) == is_int(z) && is_int(y)) || (is_int(y) == is_int(z) && is_int(x)));\
    \ \n} \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    /tmp/tmppantcq8j.d(28): Error: undefined identifier `is_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppantcq8j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  // TODO: implement a solution here that checks all\
    \ three numbers\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe98y2gkx.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe98y2gkx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x < y && x < z) return true;\n    if(y < x\
    \ && y < z) return true;\n    if(z < x && z < y) return true;\n    return false;\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyy28jl7p.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpyy28jl7p.__unittest_L33_C1() [0x427a96]

    ??:? void tmpyy28jl7p.__modtest() [0x427c40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y + z && x == int(x) && y == int(y) &&\
    \ z == int(z)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n</code>\n<|/ a tags=c++,math dscore=0 |>\n<| c |>\nWhile this might\
    \ answer the question, you should [edit] your answer to include some explanation.\n\
    <|/ c |>\n<| a dscore=0 |>\nThe function you provided does not return the correct\
    \ result for inputs:\n<code>\nany_int(3.6, -2.2, 2L)\n</code>\nIt returns true\
    \ because 3L + 2.2L is 6.6L and int(6.6L) is 6.\n<|/ a tags=c++,math |>\n<| a\
    \ |>\nThis is an approach using bitwise AND and XOR operations:\n<code>\n#include\
    \ <bits/stdc++.h>\nusing namespace std;\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc77j84t8.d(34): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc77j84t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (x.is_int() || y.is_int() || z.is_int())\n\t\t\
    return true;\n\tif (x.is_float() && y.is_float() && z.is_float())\n\t{\n\t\tfloat\
    \ xi = x.to<float>();\n\t\tfloat yi = y.to<float>();\n\t\tfloat zi = z.to<float>();\n\
    \t\tif (xi == yi + zi)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps5xvxzz4.d(32): Error: found `>` when expecting `.` following float

    /tmp/tmps5xvxzz4.d(32): Error: found `(` when expecting identifier following `float`.

    /tmp/tmps5xvxzz4.d(32): Error: semicolon expected, not `)`

    /tmp/tmps5xvxzz4.d(32): Error: found `)` instead of statement

    /tmp/tmps5xvxzz4.d(33): Error: found `>` when expecting `.` following float

    /tmp/tmps5xvxzz4.d(33): Error: found `(` when expecting identifier following `float`.

    /tmp/tmps5xvxzz4.d(33): Error: semicolon expected, not `)`

    /tmp/tmps5xvxzz4.d(33): Error: found `)` instead of statement

    /tmp/tmps5xvxzz4.d(34): Error: found `>` when expecting `.` following float

    /tmp/tmps5xvxzz4.d(34): Error: found `(` when expecting identifier following `float`.

    /tmp/tmps5xvxzz4.d(34): Error: semicolon expected, not `)`

    /tmp/tmps5xvxzz4.d(34): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5xvxzz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == z) || (y == z);\n}\n/*\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpguaxz6sk.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpguaxz6sk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x != 0.0f || (y != 0.0f && z != 0.0f &&\
    \ x >= y && x <= z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy9xxwx21.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmpy9xxwx21.__unittest_L30_C1() [0x427aba]

    ??:? void tmpy9xxwx21.__modtest() [0x427c64]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool ret = false;\n    if(x != 0)\n    {\n   \
    \     if(y == 0)\n        {\n            if(z == 0)\n            {\n         \
    \       ret = true;\n            }\n            else\n            {\n        \
    \        if(z < 0)\n                {\n                    ret = false;\n    \
    \            }\n            }\n        }\n        else\n        {\n          \
    \  if(z == 0)\n            {\n                if(y > x)\n                {\n \
    \                   ret = true;\n                }\n            }\n          \
    \  else\n            {\n                if(z < 0)\n                {\n       \
    \             ret = false;\n                }\n            }\n        }\n    }\n\
    \    else if(y != 0)\n    {\n        if(z == 0)\n        {\n            if(x >\
    \ y)\n            {\n                ret = true;\n            }\n        }\n \
    \       else\n        {\n            if(z < 0)\n            {\n              \
    \  ret = false;\n            }\n        }\n    }\n    else\n    {\n        if(z\
    \ == 0)\n        {\n            if(x > y)\n            {\n                ret\
    \ = true;\n            }\n        }\n        else\n        {\n            if(z\
    \ < 0)\n            {\n                ret = false;\n            }\n        }\n\
    \    }\n    return ret;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does not answer the\
    \ question. It seems to me that you should provide some explanation to your solution\
    \ - how does it work and what problem does it solve.\n<|/ c |>\n<| c |>\nThis\
    \ solution was very helpful to me.  I ran this code and found that it worked for\
    \ all inputs.  I tested it against the other solutions listed here and found that\
    \ they all worked for the same reason.  They all only test one number against\
    \ the other two numbers individually.\n<|/ c |>\n<| a dscore=2 tags=c++,boolean-logic\
    \ |>\nThis is how I would do it using only C/C++:\n<code>\n#include <stdio.h>\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpriej7s2c.d(99): Error: declaration expected, not `<`

    /tmp/tmpriej7s2c.d(115): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(116): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(117): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(118): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(119): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(120): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(121): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(122): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(123): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(124): Error: declaration expected, not `assert`

    /tmp/tmpriej7s2c.d(125): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpriej7s2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == y ) {\n        if      ( z == x )  \
    \    return true;\n        else if ( z < x )    return false;\n        else  \
    \              return true;\n    } else {\n        return z == x || z == y;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 tags=c++ |>\n<| c |>\nYou should add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis code\
    \ has a syntax error, it should be `if ( x == y ) {`. And it's better to give\
    \ the variables better names, like `float x`, `float y`, `float z`, etc.\n<|/\
    \ c |>\n<| c |>\nThanks for your comments. I have corrected the syntax.\n<|/ c\
    \ |>\n<| a |>\nHere is my solution for any case:\n<code>\n#include<iostream>\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiiiimmka.d(36): Error: declaration expected, not `<`

    /tmp/tmpiiiimmka.d(42): Error: unterminated character constant

    /tmp/tmpiiiimmka.d(55): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(56): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(57): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(58): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(59): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(60): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(61): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(62): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(63): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(64): Error: declaration expected, not `assert`

    /tmp/tmpiiiimmka.d(65): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiiiimmka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int i;\n    for(i = 0; i < 3; i++) \n    {\n \
    \       if((i==0||x==y)&&(i==1||y==z)&&(i==2||z==x)) \n        {\n           \
    \ return true;\n        }\n        else\n        {\n            if(i==1 && x==y)\n\
    \            {\n                if(x==z && y==z)\n                {\n        \
    \            return true;\n                }\n                else\n         \
    \       {\n                    return false;\n                }\n            }\n\
    \            else\n            {\n                return false;\n            }\n\
    \        }\n    }\n    \n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpefzr2g5a.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ef5]

    ??:? void tmpefzr2g5a.__unittest_L57_C1() [0x427a9c]

    ??:? void tmpefzr2g5a.__modtest() [0x427c78]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc1b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc41]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbcd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa85]

    ??:? runModuleUnitTests [0x42b9f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428344]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if((int)x < y || (int)x == y && (int)z < y) \n\
    \        return true;\n    return false;\n}\n</code>\n<|/ a dscore=4 |>\n<| c\
    \ |>\nThis won't work for negative numbers though. E.g. `any_int(-1f, 2f, 3f)`\
    \ will return false instead of true.\n<|/ c |>\n<| c |>\nThanks, I missed that.\n\
    <|/ c |>\n<| c |>\n\"Any\" isn't the word I would use in programming (I think\
    \ the word you are looking for is \"all\"). I would expect `any_int(-1, 1, 1)`\
    \ to return false, not true.\n<|/ c |>\n<| c |>\nGood point, have changed it.\n\
    <|/ c |>\n<| c |>\nIf you don't want a cast: `if (x < y || (x == y && z < y))`\n\
    <|/ c |>\n<| a tags=math,c++,algorithm dscore=4 |>\nIf you know the numbers are\
    \ in range [-10,10] then you could just compare the sum of the two numbers with\
    \ all numbers in range [-10,10]. As soon as one number equals the sum then you\
    \ know that at least one number is equal to the sum.\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work. `any_int(3L, 2L, 5L) will return true`, where it should return\
    \ false.\n<|/ c |>\n<| c |>\n: Yes, I misread the question and thought you were\
    \ looking for an exact match. That is fixed now.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. `any_int(3L, 2L, 7L) will return true`, where it should return false.\n\
    <|/ c |>\n<| c |>\n: I see, I misread the question initially. Fixed now.\n<|/\
    \ c |>\n<| c |>\nThis solution will work correctly only if all the inputs are\
    \ positive integers, but if there is a negative integer in the input, then the\
    \ sum of the positive and negative numbers will be the same.\n<|/ c |>\n<| a tags=math,c++,algorithm\
    \ |>\nThis code does what you are asking for: it returns true if any of the arguments\
    \ equals the sum of the other two:\n<code>\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqugcw5u8.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpqugcw5u8.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpqugcw5u8.d(28): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmpqugcw5u8.d(32): Error: declaration expected, not `<`

    /tmp/tmpqugcw5u8.d(35): Error: unterminated character constant

    /tmp/tmpqugcw5u8.d(41): Error: unterminated character constant

    /tmp/tmpqugcw5u8.d(47): Error: unterminated character constant

    /tmp/tmpqugcw5u8.d(53): Error: unterminated character constant

    /tmp/tmpqugcw5u8.d(59): Error: unterminated character constant

    /tmp/tmpqugcw5u8.d(74): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(75): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(76): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(77): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(78): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(79): Error: declaration expected, not `assert`

    /tmp/tmpqugcw5u8.d(80): Error: declaration'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return std.intcons.any_int(x,y,z); \n} \n/*\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6jxtv8p.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6jxtv8p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn isinf(x) || isinf(y) || isinf(z) || x ==\
    \ y || x == z || y == z;\n}\nunittest\n{\n    alias candidate = any_int;\n\n \
    \   assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8xlu7ji9.d(28): Error: undefined identifier `isinf`

    /tmp/tmp8xlu7ji9.d(28): Error: undefined identifier `isinf`

    /tmp/tmp8xlu7ji9.d(28): Error: undefined identifier `isinf`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8xlu7ji9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn (x <= z && z <= y) || (x >= z && z <= y);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyw4bj50x.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpyw4bj50x.__unittest_L30_C1() [0x427abc]

    ??:? void tmpyw4bj50x.__modtest() [0x427c34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (isinteger(x) && isinteger(y) && isinteger(z))\
    \ || (isinteger(x) && isinteger(z)) || (isinteger(y) && isinteger(z));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    /tmp/tmp8ot3_8jl.d(28): Error: undefined identifier `isinteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ot3_8jl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x != x || y != y || z != z) {\n        return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgp0wgyuc.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmpgp0wgyuc.__unittest_L33_C1() [0x427aa6]

    ??:? void tmpgp0wgyuc.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(isZero(x))\n    {\n        if(isZero(y))\n\
    \        {\n            if(isZero(z))\n            {\n                return true;\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    else if(isZero(y))\n    {\n        return false;\n    }\n\
    \    else\n    {\n        if(isZero(z))\n        {\n            return true;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_iezaez.d(28): Error: undefined identifier `isZero`

    /tmp/tmp0_iezaez.d(30): Error: undefined identifier `isZero`

    /tmp/tmp0_iezaez.d(32): Error: undefined identifier `isZero`

    /tmp/tmp0_iezaez.d(46): Error: undefined identifier `isZero`

    /tmp/tmp0_iezaez.d(52): Error: undefined identifier `isZero`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_iezaez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.isinteger(x) || std.isinteger(y) ||\
    \ std.isinteger(z);\n}\n'''\nunittest\n{\n    alias candidate = any_int;\n\n \
    \   assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb3gl3_61.d(30): Error: unterminated character constant

    /tmp/tmpb3gl3_61.d(30): Error: declaration expected, not `63U`

    /tmp/tmpb3gl3_61.d(30): Error: unterminated character constant

    /tmp/tmpb3gl3_61.d(35): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(36): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(37): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(38): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(39): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(40): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(41): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(42): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(43): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(44): Error: declaration expected, not `assert`

    /tmp/tmpb3gl3_61.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb3gl3_61.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x == x + y || x == y + z || x == z + y\
    \ || y == x + z || y == z + x || z == x + y || z == y + x;\n}\n</code>\n<|/ a\
    \ tags=c++ |>\n<| c |>\nThat `bool any_int(int x, int y, int z) { return x ==\
    \ x + y || x == y + z || x == z + y || y == x + z || y == z + x || z == x + y\
    \ || z == y + x; }` is easier to understand and maintain than the other one liners.\
    \ However, it still doesn't solve the problem of not being able to compare more\
    \ than 3 numbers ;-)\n<|/ c |>\n<| c |>\nBut that's exactly what the OP asked:\
    \ \"Returns true if one of the numbers is equal to the sum of the other two, and\
    \ all numbers are integers.\" He didn't ask how to compare 3 numbers, he asked\
    \ how to write a `bool any_int` that accepts 3 numbers.\n<|/ c |>\n<| c |>\nIt\
    \ was a rhetorical question. He asked how to write a **function** that accepts\
    \ 3 numbers. I wanted to show that he _can_ write a function that accepts 3 numbers.\
    \ Not how he _should_ write the function. Then I wanted to show how it can be\
    \ done in C++ (not how it's done in C). Of course the OP can write a function\
    \ that accepts 3 numbers. I'm just saying that he _can't_ write a function that\
    \ accepts 3 numbers with just one line of code (but he _could_ write a function\
    \ that accepts a vector).\n<|/ c |>\n<| a dscore=4 |>\nIf you're using C++11 or\
    \ later, you can do this using lambdas:\n<code>\ntemplate<typename T>\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7keqhcwu.d(30): Error: declaration expected, not `<`

    /tmp/tmp7keqhcwu.d(33): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(33): Error: declaration expected, not `-`

    /tmp/tmp7keqhcwu.d(36): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(36): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(39): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(39): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(39): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(42): Error: unterminated character constant

    /tmp/tmp7keqhcwu.d(49): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(50): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(51): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(52): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(53): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(54): Error: declaration expected, not `assert`

    /tmp/tmp7keqhcwu.d(55): Error: declaration expected, not `assert`'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (std.math.isInt(x) && std.math.isInt(y) &&\
    \ std.math.isInt(z))\n    {\n        if (std.math.isInt(x) && std.math.isInt(y))\n\
    \        {\n            return std.math.isEqual(x + y, z);\n        }\n      \
    \  if (std.math.isInt(y) && std.math.isInt(z))\n        {\n            return\
    \ std.math.isEqual(y + z, x);\n        }\n        else\n        {\n          \
    \  return std.math.isEqual(y + z, x + z);\n        }\n    }\n    else\n    {\n\
    \        return false;\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk_f8m8zb.d(28): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(28): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(28): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(30): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(30): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(32): Error: undefined identifier `isEqual` in module `std.math`

    /tmp/tmpk_f8m8zb.d(34): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(34): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmpk_f8m8zb.d(36): Error: undefined identifier `isEqual` in module `std.math`

    /tmp/tmpk_f8m8zb.d(40): Error: undefined identifier `isEqual` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk_f8m8zb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y && x == z) return true;\n    if (y\
    \ == z) return true;\n    if (x == z) return false;\n    \n    if (!isint(x) ||\
    \ !isint(y) || !isint(z)) return false;\n    if (x == y && y == z) return true;\n\
    \    if (x == z && z == y) return true;\n    if (y == z) return true;\n    \n\
    \    float x_i = (float)(int)x;\n    float y_i = (float)(int)y;\n    float z_i\
    \ = (float)(int)z;\n    \n    float x_u = (float)(uint)x;\n    float y_u = (float)(uint)y;\n\
    \    float z_u = (float)(uint)z;\n    \n    float x_d = (float)(double)x;\n  \
    \  float y_d = (float)(double)y;\n    float z_d = (float)(double)z;\n    \n  \
    \  if (x_i == x_u && y_i == y_u && z_i == z_u) return true;\n    if (x_i == x_u\
    \ && z_i == z_u) return true;\n    if (y_i == y_u && z_i == z_u) return true;\n\
    \    \n    \n    if (x_i == x_d && y_i == y_d && z_i == z_d) return true;\n  \
    \  if (x_i == x_d && z_i == z_d) return true;\n    if (y_i == y_d && z_i == z_d)\
    \ return true;\n    \n    if (x_i != x_d || y_i != y_d || z_i != z_d) return false;\
    \ // floats are not equal\n    \n    \n    return isint(x) ? true : any_int(x_i,\
    \ y_i, z_i);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp61l6xk8_.d(37): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmp61l6xk8_.d(37): Error: C style cast illegal, use `cast(float)cast(int)x`

    /tmp/tmp61l6xk8_.d(38): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmp61l6xk8_.d(38): Error: C style cast illegal, use `cast(float)cast(int)y`

    /tmp/tmp61l6xk8_.d(39): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmp61l6xk8_.d(39): Error: C style cast illegal, use `cast(float)cast(int)z`

    /tmp/tmp61l6xk8_.d(41): Error: C style cast illegal, use `cast(uint)x`

    /tmp/tmp61l6xk8_.d(41): Error: C style cast illegal, use `cast(float)cast(uint)x`

    /tmp/tmp61l6xk8_.d(42): Error: C style cast illegal, use `cast(uint)y`

    /tmp/tmp61l6xk8_.d(42): Error: C style cast illegal, use `cast(float)cast(uint)y`

    /tmp/tmp61l6xk8_.d(43): Error: C style cast illegal, use `cast(uint)z`

    /tmp/tmp61l6xk8_.d(43): Error: C style cast illegal, use `cast(float)cast(uint)z`

    /tmp/tmp61l6xk8_.d(45): Error: C style cast illegal, use `cast(double)x`

    /tmp/tmp61l6xk8_.d(45): Error: C style '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return bool2int(std.int._any_int(x, y, z)); \n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6osywfez.d(28): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6osywfez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return x == y + z && is_int(x) && is_int(y) &&\
    \ is_int(z); \n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdt9sa3k.d(28): Error: undefined identifier `is_int`

    /tmp/tmpgdt9sa3k.d(28): Error: undefined identifier `is_int`

    /tmp/tmpgdt9sa3k.d(28): Error: undefined identifier `is_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdt9sa3k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tbool result = false;\n\tresult |= (x == ((x + y)\
    \ + z));\n\tresult |= (y == ((x + y) + z));\n\tresult |= (z == ((x + y) + z));\n\
    \treturn result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt9bf1sda.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpt9bf1sda.__unittest_L34_C1() [0x427aa0]

    ??:? void tmpt9bf1sda.__modtest() [0x427c7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    double a = x + y + z;\n    return a == (int) a;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=c++,sum,int,int,math |>\nI would use\
    \ recursion.\n<code>\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0p8pjljd.d(29): Error: C style cast illegal, use `cast(int)a`

    /tmp/tmp0p8pjljd.d(31): Error: declaration expected, not `<`

    /tmp/tmp0p8pjljd.d(40): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(41): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(42): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(43): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(44): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(45): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(46): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(47): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(48): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(49): Error: declaration expected, not `assert`

    /tmp/tmp0p8pjljd.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0p8pjljd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn (\n\t\t(\n\t\t\tint(floor(x + y + z)) ==\n\
    \t\t\tint(floor(x + y + z + 0.0))\n\t\t) &&\n\t\t(\n\t\t\tint(floor(x + y + z\
    \ + 0.0)) ==\n\t\t\tint(floor(x + y + z + 1.0))\n\t\t) &&\n\t\t(\n\t\t\tint(floor(x\
    \ + y + z + 1.0)) ==\n\t\t\tint(floor(x + y + z + 2.0))\n\t\t)\n\t);\n}\n\"\"\"\
    \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmparhr6qvl.d(43): Error: declaration expected, not `""`

    /tmp/tmparhr6qvl.d(43): Error: unterminated string constant starting at /tmp/tmparhr6qvl.d(43)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmparhr6qvl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tint nx = to<int>(x);\n\tint ny = to<int>(y);\n\t\
    int nz = to<int>(z);\n\treturn (nx + ny + nz == to<int>(x + y + z));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgrq_x784.d(28): Error: found `>` when expecting `.` following int

    /tmp/tmpgrq_x784.d(28): Error: found `(` when expecting identifier following `int`.

    /tmp/tmpgrq_x784.d(28): Error: semicolon expected, not `x`

    /tmp/tmpgrq_x784.d(28): Error: found `)` when expecting `;` following statement

    /tmp/tmpgrq_x784.d(28): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpgrq_x784.d(29): Error: found `>` when expecting `.` following int

    /tmp/tmpgrq_x784.d(29): Error: found `(` when expecting identifier following `int`.

    /tmp/tmpgrq_x784.d(29): Error: semicolon expected, not `y`

    /tmp/tmpgrq_x784.d(29): Error: found `)` when expecting `;` following statement

    /tmp/tmpgrq_x784.d(29): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpgrq_x784.d(30): Error: found `>` when expecting `.` following int

    /tmp/tmpgrq_x784.d(30): Error: found `(` when expecting identifier following `int`.

    /tmp/tmpgrq_x784.d(30): Error: semicolon expected, not `z`

    /tmp/tmpgrq_x784.d(30): Error: found `)` when expecting'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    // TODO: implement\n    return false;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw73qu6it.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpw73qu6it.__unittest_L31_C1() [0x427a38]

    ??:? void tmpw73qu6it.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x < y && x > z)\n        return true;\n  \
    \  else\n        return false;\n}\n</code>\n<|/ a tags=c++ |>\n<| c |>\nThank\
    \ you, I have tried this but now it just keeps saying that I put in 3 numbers\
    \ and it gives me this error:  `||=== Build: Debug in tester (compiler: GNU GCC\
    \ Compiler) ===|\ntester.cpp:11:16: error: no matching function for call to 'any_int'|\n\
    tester.cpp:11:16: note: candidate is:|\ntester.cpp:1:6: note: template<class T>\
    \ bool any_int(T, T, T)|\ntester.cpp:1:6: note:   template argument deduction/substitution\
    \ failed:|\ntester.cpp:11:16: note:   couldn't deduce template parameter 'T'|\n\
    ||=== Build failed: 1 error(s), 0 warning(s) (0 minute(s), 0 second(s)) ===|`\n\
    <|/ c |>\n<| c |>\n- I just tried it and it compiled for me. I added the code\
    \ above and ran it in a main function. I added a couple extra print statements.\
    \ Have you tried it?\n<|/ c |>\n<| c |>\nYes, I have tried it and it works, thank\
    \ you. I am still trying to figure out how it works and why it works, but I guess\
    \ I understand it now. Thanks again!\n<|/ c |>\n<| c |>\n- Glad it works. Yes,\
    \ I believe that once you understand it (which is a lot simpler that I originally\
    \ thought), the template is pretty much like generics. Generics allow you to put\
    \ in a single data type and have it work for all data types that implement the\
    \ same interface.\n<|/ c |>\n<| a dscore=1 tags=c++ |>\nIf I am not mistaken,\
    \ your problem lies in that you declare the functions before the main function.\
    \  Your code should look like this:\n<code>\n#include <iostream>\n#include <cmath>\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmsbo3fg4.d(33): Error: declaration expected, not `<`

    /tmp/tmpmsbo3fg4.d(62): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(63): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(64): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(65): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(66): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(67): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(68): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(69): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(70): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(71): Error: declaration expected, not `assert`

    /tmp/tmpmsbo3fg4.d(72): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsbo3fg4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int sum = x + y + z;\n    int sumInt = int(sum);\n\
    \    return (sum == sumInt);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpggvqet0v.d(28): Error: cannot implicitly convert expression `x
    + y + z` of type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpggvqet0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int i1 = int(x);\n    int i2 = int(y);\n    int\
    \ i3 = int(z);\n    return (i1 != i2 || (i1 == i2 && (i2 == i3 || i3 == 0)));\n\
    }\n</code>\n<|/ a dscore=0 tags=math,c++,logic |>\n<| a |>\n<code>\n/*\n    Write\
    \ a C++ program to check whether three given integers are \n    equal or not.\
    \ If they are equal then return true, otherwise \n    false.\n*/\n#include <iostream>\n\
    using namespace std;\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7psq63x.d(33): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7psq63x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return bool( std.math.isIntegral( std.math.add(x,y)\
    \ ) \n                || std.math.isIntegral( std.math.add(x,z) ) \n         \
    \       || std.math.isIntegral( std.math.add(y,z) ) \n                || std.math.isIntegral(x+y+z)\
    \ \n                || std.math.isIntegral(x+y+z) \n                || std.math.isIntegral(x+z)\
    \ \n                || std.math.isIntegral(y+z) \n                || std.math.isIntegral(x+y+y)\
    \ \n                || std.math.isIntegral(x+y+y) \n                || std.math.isIntegral(x+y)\
    \ \n                || std.math.isIntegral(y) \n                || std.math.isIntegral(x+y)\
    \ \n                || std.math.isIntegral(x+y) );\n}\n/*\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpztzlm77u.d(42): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpztzlm77u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result;\n    \n    if ( x < y && x > z )\n\
    \    {\n        result = true;\n    }\n    else if ( y < x && y > z )\n    {\n\
    \        result = true;\n    }\n    else if ( z < x && z > y )\n    {\n      \
    \  result = true;\n    }\n    else if ( x < z && x > y )\n    {\n        result\
    \ = true;\n    }\n    else if ( y < z && y > x )\n    {\n        result = true;\n\
    \    }\n    else\n    {\n        result = false;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmqzt25nq.d(62): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpmqzt25nq.__unittest_L57_C1() [0x427ad6]

    ??:? void tmpmqzt25nq.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (x < y && x < z) return true;\n\tif (y < x &&\
    \ y < z) return true;\n\tif (z < x && z < y) return true;\n\treturn false;\n}\n\
    /* \n    \n    \n    \n*/\nunittest\n{\n    alias candidate = any_int;\n\n   \
    \ assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoec8fdps.d(43): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ebd]

    ??:? void tmpoec8fdps.__unittest_L38_C1() [0x427a96]

    ??:? void tmpoec8fdps.__modtest() [0x427c40]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbe3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc09]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]

    ??:? runModuleUnitTests [0x42b9b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42830c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\n    \n    if ( std.isFloat32(x)\
    \ && std.isFloat32(y) && std.isFloat32(z) )\n    {\n        bool floats_are_equal\
    \ = std.isEq(std.f32(x), std.f32(y)) && std.isEq(std.f32(z), std.f32(x));\n  \
    \      bool floats_are_all_int = std.isInt(std.f32(x)) && std.isInt(std.f32(y))\
    \ && std.isInt(std.f32(z));\n        \n        if ( floats_are_equal && floats_are_all_int\
    \ )\n        {\n            result = true;\n        }\n    }\n    \n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpesx7ugh4.d(30): Error: undefined identifier `isFloat32` in package
    `std`

    /tmp/tmpesx7ugh4.d(30): Error: undefined identifier `isFloat32` in package `std`

    /tmp/tmpesx7ugh4.d(30): Error: undefined identifier `isFloat32` in package `std`

    /tmp/tmpesx7ugh4.d(32): Error: undefined identifier `isEq` in package `std`

    /tmp/tmpesx7ugh4.d(32): Error: undefined identifier `isEq` in package `std`

    /tmp/tmpesx7ugh4.d(33): Error: undefined identifier `isInt` in package `std`

    /tmp/tmpesx7ugh4.d(33): Error: undefined identifier `isInt` in package `std`

    /tmp/tmpesx7ugh4.d(33): Error: undefined identifier `isInt` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpesx7ugh4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn ((x != x + y) && (x != x + z)) && ((y !=\
    \ y + x) && (y != y + z) && (z != z + x) && (z != z + y));\n}\nunittest\n{\n \
    \   alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpym7j89d8.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f2d]

    ??:? void tmpym7j89d8.__unittest_L30_C1() [0x427b06]

    ??:? void tmpym7j89d8.__modtest() [0x427cb0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aae6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc79]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430128]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc05]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]

    ??:? runModuleUnitTests [0x42ba29]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42837c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return std.typecons.float2int(std.math.fmax(x+y,\
    \ x+z)) || std.typecons.float2int(std.math.fmin(y+z, y+x)); \n} \nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0u8wq3d4.d(28): Error: undefined identifier `float2int` in module
    `std.typecons`

    /tmp/tmp0u8wq3d4.d(28): Error: undefined identifier `float2int` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0u8wq3d4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return (((x == std::fabs(x) + y) && is_int(y)\
    \ && is_int(z)) || ((y == std::fabs(y) + x) && is_int(z) && is_int(x)) || ((z\
    \ == std::fabs(z) + x) && is_int(y) && is_int(x)));\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis is not working for me either. `any_int(10L, 10L, 10L)` returns `true`,\
    \ not `false`\n<|/ c |>\n<| c |>\nI changed the answer to use `fabs` instead of\
    \ `std::fabs` since the former is the proper way to do float comparisons. Sorry\
    \ about that.\n<|/ c |>\n<| c |>\nYeah, I know, I just didn't want to change much\
    \ of your code since you seemed to be using `fabs` in other places too. Thanks\
    \ anyways.\n<|/ c |>\n<| c |>\nThe answer is now updated to use fabs instead of\
    \ std::fabs.\n<|/ c |>\n<| c |>\nThank you for posting the updated answer. I think\
    \ this does work with the updated answer and it's very easy to understand. I appreciate\
    \ your time. I'll give it a shot.\n<|/ c |>\n<| a tags=c++,if-statement |>\nYou\
    \ have a few issues with your code, but the first issue is that you are mixing\
    \ up floating point types and integral types. Floating point values are generally\
    \ approximations to real numbers (which can have small errors depending on the\
    \ magnitude of their value, and the fact that the numbers get \"infinitely smaller\"\
    \ as the magnitude of the value gets larger). Integral types (int, double, etc.)\
    \ are fixed precision types that can only hold a finite number of values. If you\
    \ ever have an integral number which is slightly less than the maximum value,\
    \ but slightly more than the minimum value (for example, when you're trying to\
    \ hold an address in memory), then you actually get an exact value which is slightly\
    \ larger than the maximum value you were trying to hold.\nYou have a number of\
    \ ways to fix this. One is to convert from float to int (and back) all the time,\
    \ but this can introduce errors, as you've seen. Another way is to round the values\
    \ all the time to integers, and compare them using an epsilon value (one that\
    \ will still be true if you compare it against an exact value).\nAnother problem\
    \ with your code is that you seem to be thinking of floating point values like\
    \ they were a continuous range of numbers. In reality, floating-point values have\
    \ a very small amount of wiggle room between them (the difference between one\
    \ decimal place and another isn't always 1 in a floating point value), so you\
    \ can't really compare them directly against each other. In fact\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkyvh5pv4.d(28): Error: found `:` when expecting `)`

    /tmp/tmpkyvh5pv4.d(28): Error: found `:` when expecting `)`

    /tmp/tmpkyvh5pv4.d(28): Error: found `fabs` when expecting `)`

    /tmp/tmpkyvh5pv4.d(28): Error: found `)` when expecting `;` following `return`
    statement

    /tmp/tmpkyvh5pv4.d(28): Error: found `&&` instead of statement

    /tmp/tmpkyvh5pv4.d(30): Error: declaration expected, not `<`

    /tmp/tmpkyvh5pv4.d(39): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(45): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(45): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(48): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(49): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(50): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(50): Error: unterminated character constant

    /tmp/tmpkyvh5pv4.d(55): Error: declaration expected, not `assert`

    /tmp/tmpkyvh5pv4.d(56): Error: declaration expected, not `assert`

    /tmp/tmpkyvh5pv4.d(57): Error: declaration expected, no'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (std.typecons.is_integral(std.math.max(x, y)))\
    \ return true;\n\tif (std.typecons.is_integral(std.math.max(z, 0))) return true;\n\
    \tif (std.typecons.is_integral(std.math.max(z, y))) return true;\n\treturn false;\n\
    }\n*/\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo0i5z0t4.d(33): Error: declaration expected, not `*`

    /tmp/tmpo0i5z0t4.d(38): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(39): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(40): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(41): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(42): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(43): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(44): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(45): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(46): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(47): Error: declaration expected, not `assert`

    /tmp/tmpo0i5z0t4.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0i5z0t4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int a = (int)x;\n    int b = (int)y;\n    int\
    \ c = (int)z;\n    \n    return (a + b + c == x + y + z);\n}\nunittest\n{\n  \
    \  alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpjd287q.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmphpjd287q.d(29): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmphpjd287q.d(30): Error: C style cast illegal, use `cast(int)z`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpjd287q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x == x || y == y || z == z;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsjmyjm29.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ed5]

    ??:? void tmpsjmyjm29.__unittest_L30_C1() [0x427aaa]

    ??:? void tmpsjmyjm29.__modtest() [0x427c54]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbfb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa8e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc21]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa65]

    ??:? runModuleUnitTests [0x42b9d1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428324]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    return std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z);\n    \n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoy6zu8zi.d(29): Error: undefined identifier `isIntegral` in module
    `std.math`, did you mean template `isIntegral(T)`?

    /tmp/tmpoy6zu8zi.d(29): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    /tmp/tmpoy6zu8zi.d(29): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoy6zu8zi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    // todo: implement it\n    return false;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwe0m10mk.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpwe0m10mk.__unittest_L31_C1() [0x427a38]

    ??:? void tmpwe0m10mk.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == std.int::add(x,y) && y == std.int::add(x,z)\
    \ && z == std.int::add(x,y));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1fn5bv6s.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmp1fn5bv6s.d(28): Error: found `:` when expecting `)`

    /tmp/tmp1fn5bv6s.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmp1fn5bv6s.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmp1fn5bv6s.d(28): Error: found `:` when expecting `;` following statement

    /tmp/tmp1fn5bv6s.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fn5bv6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tbool ret = false;\n\t\n\t\n\tif (x < x + y)\n\t\
    {\n\t\tif (y < y + z)\n\t\t{\n\t\t\tret = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\
    ret = false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (z < y + z)\n\t\t{\n\t\t\tret =\
    \ true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret = false;\n\t\t}\n\t}\n\t\n\treturn\
    \ ret;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprr6exvk6.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ee5]

    ??:? void tmprr6exvk6.__unittest_L56_C1() [0x427abe]

    ??:? void tmprr6exvk6.__modtest() [0x427c68]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc0b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa9e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbbd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa75]

    ??:? runModuleUnitTests [0x42b9e1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428334]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(!_isinteger(x)) return false;\n    if(!_isinteger(y))\
    \ return false;\n    if(!_isinteger(z)) return false;\n    return ((x==z || x==y)\
    \ && (x+y==z));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptfit1rza.d(28): Error: undefined identifier `_isinteger`

    /tmp/tmptfit1rza.d(29): Error: undefined identifier `_isinteger`

    /tmp/tmptfit1rza.d(30): Error: undefined identifier `_isinteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptfit1rza.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return std.typecons.equal(x,z) || std.typecons.equal(y,z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdqjdpns1.d(28): Error: undefined identifier `equal` in module `std.typecons`,
    did you mean template `Unqual(T)`?

    /tmp/tmpdqjdpns1.d(28): Error: undefined identifier `equal` in module `std.typecons`,
    did you mean template `Unqual(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdqjdpns1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x==y+z) return false;\n    else if(x==y+z)\
    \ return true;\n    else if(x==y) return false;\n    else if(x==y) return true;\n\
    \    else if(x==z) return false;\n    else if(x==z) return true;\n    else if(x==x)\
    \ return true;\n    else if(x==x) return true;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    else if(x==y) return false;\n\
    \    else if(x==y) return false;\n    else if(x==y) return false;\n    else if(x==y)\
    \ return false;\n    else if(x==y) return false;\n    \nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq_zra39g.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq_zra39g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( x == x + y && y == y + z && z == z + x )\
    \ return true;\n    else return false;\n}\n/* The main function that checks any\
    \ given numbers for being one of a few special cases\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8f3wyfel.d(31): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8f3wyfel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn ( is_int(x) && is_int(y) && is_int(z) &&\
    \ (x+y+z == std::max(x, y) || x+y+z == std::max(y, z) || x+y+z == std::max(z,\
    \ x)) );\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfabd3v0q.d(28): Error: found `:` when expecting `)`

    /tmp/tmpfabd3v0q.d(28): Error: found `:` when expecting `)`

    /tmp/tmpfabd3v0q.d(28): Error: found `max` when expecting `;` following `return`
    statement

    /tmp/tmpfabd3v0q.d(28): Error: found `:` when expecting `;` following statement

    /tmp/tmpfabd3v0q.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfabd3v0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    // TODO:\n    //  1. Write a function that returns\
    \ true iff x is an integer or y, and z is an integer\n    //  2. Write a function\
    \ that returns true if all three numbers are integers\n    //  3. Write a function\
    \ that returns true if x, y and z are all integers\n    //  4. Write a function\
    \ that returns true if all three numbers are all integers\n    //  5. Write a\
    \ function that returns true if x, y and z are integers or they are all integers\n\
    \    //  6. Write a function that returns true if all three numbers are all integers\
    \ or they are all integers\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvtjcct5l.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e95]

    ??:? void tmpvtjcct5l.__unittest_L37_C1() [0x427a6a]

    ??:? void tmpvtjcct5l.__modtest() [0x427c14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa4e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430090]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb6d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa25]

    ??:? runModuleUnitTests [0x42b991]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    float xf = x;\n    float yf = y;\n    float zf\
    \ = z;\n    \n    return (xf == yf+zf);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpataevhqv.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpataevhqv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool ans = false;\n    \n    if ( fabs(x-y)+fabs(x-z)+fabs(y-z)\
    \ < 1e-6f )\n    {\n        if ( (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z))\
    \ || \n             (std.math.isInt(x) && std.math.isInt(z) && std.math.isInt(y))\
    \ || \n             (std.math.isInt(y) && std.math.isInt(x) && std.math.isInt(z))\
    \ ||\n             (std.math.isInt(z) && std.math.isInt(x) && std.math.isInt(y))\
    \ ||\n             (std.math.isInt(y) && std.math.isInt(z) && std.math.isInt(x))\
    \ ||\n             (std.math.isInt(x) && std.math.isInt(y) && std.math.isInt(z))\
    \ ||\n             (std.math.isInt(z) && std.math.isInt(y) && std.math.isInt(x))\n\
    \           )\n        {\n            ans = true;\n        }\n    }\n    \n  \
    \  return ans;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0sc9ikbr.d(32): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(32): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(32): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(33): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(33): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(33): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(34): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(34): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(34): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(35): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(35): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(35): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(36): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(36): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(36): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(37): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(37): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(37): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(38): Error: undefined identifier `isInt` in module `std.math`

    /tmp/tmp0sc9ikbr.d(38): Error: undefined identifier `isInt` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0sc9ikbr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || x == z || y == z) \n        return\
    \ true;\n    else\n        return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nPlease do not post an answer that consist of only a link to another question.\
    \ Instead include the content of that other question here.\n<|/ c |>\n<| c |>\n\
    I disagree. This is a correct answer and it answers the question as asked. Why\
    \ would you post a link to another question and leave the link?\n<|/ c |>\n<|\
    \ c |>\n: Because that other question doesn't show how to do it, and it might\
    \ be moved in the future. Your answer is not an answer. You should copy the relevant\
    \ parts of the other question into your answer.\n<|/ c |>\n<| c |>\nI realize\
    \ that. I was merely pointing out that it was a link to another question. I don't\
    \ think the question needs to be answered like that.\n<|/ c |>\n<| a |>\nIn addition\
    \ to the other answers here, it's worth pointing out that this is more of a mathematical\
    \ problem than a programming problem. Instead of using your any_int() function,\
    \ you could use a binary operator like == or even a custom function in the case\
    \ where you wanted:\n<code>\nunittest\n{\n    alias candidate = any_int;\n\n \
    \   assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvg_cmptt.d(33): Error: declaration expected, not `<`

    /tmp/tmpvg_cmptt.d(42): Error: unterminated character constant

    /tmp/tmpvg_cmptt.d(45): Error: unterminated character constant

    /tmp/tmpvg_cmptt.d(48): Error: unterminated character constant

    /tmp/tmpvg_cmptt.d(54): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(55): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(56): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(57): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(58): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(59): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(60): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(61): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(62): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(63): Error: declaration expected, not `assert`

    /tmp/tmpvg_cmptt.d(64): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg_cmpt'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int i, sum = 0;\n    float temp;\n    for (i=0;\
    \ i<3; i++) \n    {\n        temp = float(i)*x + float(1-i)*y + float(1-i-1)*z;\n\
    \        sum = (int)temp;\n        if (sum != temp) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\"\"\"\ncpp = r\"\"\"\n#include\
    \ <math.h>\n#include <stdio.h>\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ph8n5_y.d(33): Error: C style cast illegal, use `cast(int)temp`

    /tmp/tmp3ph8n5_y.d(41): Error: declaration expected, not `""`

    /tmp/tmp3ph8n5_y.d(49): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(50): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(51): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(52): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(53): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(54): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(55): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(56): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(57): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(58): Error: declaration expected, not `assert`

    /tmp/tmp3ph8n5_y.d(59): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ph8n5_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    long ret = (long)std.int::sum(x+y, z); \n   \
    \ return ret == std.int::sum(x, y); \n} \nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptep45ssb.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmptep45ssb.d(28): Error: C style cast illegal, use `cast(long)std`

    /tmp/tmptep45ssb.d(28): Error: semicolon expected, not `:`

    /tmp/tmptep45ssb.d(28): Error: found `:` instead of statement

    /tmp/tmptep45ssb.d(29): Error: identifier expected following `.`, not `int`

    /tmp/tmptep45ssb.d(29): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmptep45ssb.d(29): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptep45ssb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ((std.int(x) == std.int(y)) || (std.int(y)\
    \ == std.int(z))) \n        return true;\n    return false;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrdx8e4u.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpqrdx8e4u.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpqrdx8e4u.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmpqrdx8e4u.d(28): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrdx8e4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x >= y) \n    {\n        if(y >= z) \n    \
    \    {\n            if(x != y || x != z)\n            {\n                return\
    \ true;\n            }\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else \n    {\n        if(y > z) \n        {\n\
    \            if(y != z || x != z)\n            {\n                return true;\n\
    \            }\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyfcd9zdw.d(26): Error: function `tmpyfcd9zdw.any_int` no `return
    exp;` or `assert(0);` at end of function

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyfcd9zdw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  bool result = false;\n  result = (x == y || x ==\
    \ z);\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHe wants the\
    \ function to return true or false according to the inputs not any number\n<|/\
    \ c |>\n<| c |>\nMy bad. I didn't understand the OPs question. I thought he meant\
    \ any 3 numbers summing to some number (which he knows already).\n<|/ c |>\n<|\
    \ c |>\nWhat i want is to check if all 3 numbers are equals to any 3 number which\
    \ is equal to sum , that's it.\n<|/ c |>\n<| a |>\nYour question was not very\
    \ clear but if you want all 3 numbers to be equals to sum of another 3 numbers,\
    \ why don't you try this\n<code>\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl8cexahe.d(32): Error: declaration expected, not `<`

    /tmp/tmpl8cexahe.d(38): Error: unterminated character constant

    /tmp/tmpl8cexahe.d(41): Error: unterminated character constant

    /tmp/tmpl8cexahe.d(44): Error: unterminated character constant

    /tmp/tmpl8cexahe.d(50): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(51): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(52): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(53): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(54): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(55): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(56): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(57): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(58): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(59): Error: declaration expected, not `assert`

    /tmp/tmpl8cexahe.d(60): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl8cexah'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    float xx = x * (float) x;\n    float yy = y* (float)\
    \ y;\n    float zz = z* (float) z;\n    return xx + yy + zz == z;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpptqowstb.d(28): Error: C style cast illegal, use `cast(float)x`

    /tmp/tmpptqowstb.d(29): Error: C style cast illegal, use `cast(float)y`

    /tmp/tmpptqowstb.d(30): Error: C style cast illegal, use `cast(float)z`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpptqowstb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((is_integer(x) && is_integer(y) && is_integer(z))\
    \ && (x + y + z == std.math.sum([x, y]) + z));\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzgubkpx5.d(28): Error: undefined identifier `is_integer`

    /tmp/tmpzgubkpx5.d(28): Error: undefined identifier `is_integer`

    /tmp/tmpzgubkpx5.d(28): Error: undefined identifier `is_integer`

    /tmp/tmpzgubkpx5.d(28): Error: undefined identifier `sum` in module `std.math`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzgubkpx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y || y == z || x == z) \n    {\n    \
    \    return true;\n    }\n    return false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkn0j1l7l.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmpkn0j1l7l.__unittest_L34_C1() [0x427a54]

    ??:? void tmpkn0j1l7l.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(_isnan(x) || _isnan(y) || _isnan(z)) return\
    \ false;\n    if(x < y && x < z) return true;\n    if(y < x && y < z) return true;\n\
    \    if(z < x && z < y) return true;\n    return false;\n}\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nI suggest adding `if(_isnan(x) || _isnan(y) || _isnan(z)) return\
    \ false;` to avoid using exceptions for flow control.\n<|/ c |>\n<| c |>\nYes,\
    \ you're right, I'll do it.\n<|/ c |>\n<| c |>\nThis won't handle NaNs correctly.\
    \  You're still going to get false-positives for cases like `any_int(1, nan, 3)`\
    \ which should return true.\n<|/ c |>\n<| c |>\nThanks for adding this. I guess\
    \ it depends on the specific case in question.\n<|/ c |>\n<| a tags=c++,c++14\
    \ |>\nUse std::all_of from <algorithm>.\n<code>\n#include <algorithm>\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87dmbkih.d(34): Error: declaration expected, not `<`

    /tmp/tmp87dmbkih.d(40): Error: unterminated character constant

    /tmp/tmp87dmbkih.d(40): Error: unterminated character constant

    /tmp/tmp87dmbkih.d(43): Error: unterminated character constant

    /tmp/tmp87dmbkih.d(43): Error: unterminated character constant

    /tmp/tmp87dmbkih.d(56): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(57): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(58): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(59): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(60): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(61): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(62): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(63): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(64): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(65): Error: declaration expected, not `assert`

    /tmp/tmp87dmbkih.d(66): Error: unrecognized declara'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return std.math.isInfinite(y) || (std.typecons.isInt(x)\
    \ && std.typecons.isInt(y) && std.typecons.isInt(z) && x + y + z == std.math.max(std.math.abs(x),\
    \ std.math.abs(y), std.math.abs(z)));\n}\n/*\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpikvn7tjs.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpikvn7tjs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x >= y && x <= z;\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmppra9diuq.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ea5]

    ??:? void tmppra9diuq.__unittest_L30_C1() [0x427a4c]

    ??:? void tmppra9diuq.__modtest() [0x427c28]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb7d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]

    ??:? runModuleUnitTests [0x42b9a1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x == y) return true;\n    if (x == z) return\
    \ true;\n    if (y == z) return true;\n    return false;\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq818ohai.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpq818ohai.__unittest_L33_C1() [0x427a5c]

    ??:? void tmpq818ohai.__modtest() [0x427c38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tbool result = (x.isInt() || y.isInt() || z.isInt());\n\
    \treturn result;\n}\n'''\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6dhiycc.d(31): Error: unterminated character constant

    /tmp/tmpy6dhiycc.d(31): Error: declaration expected, not `63U`

    /tmp/tmpy6dhiycc.d(31): Error: unterminated character constant

    /tmp/tmpy6dhiycc.d(36): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(37): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(38): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(39): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(40): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(41): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(42): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(43): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(44): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(45): Error: declaration expected, not `assert`

    /tmp/tmpy6dhiycc.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6dhiycc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == std.math.sqrt(x*x + y*y) && z ==\
    \ std.math.sqrt(x*x + y*y));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpo4tupq0j.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eed]

    ??:? void tmpo4tupq0j.__unittest_L30_C1() [0x427a90]

    ??:? void tmpo4tupq0j.__modtest() [0x427c6c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaa6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc39]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa7d]

    ??:? runModuleUnitTests [0x42b9e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42833c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = false;\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8jxv0d6.d(29): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8jxv0d6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool isMatch = (std.math.floor(x) == std.math.floor(y)\
    \ && std.math.floor(x) == std.math.floor(z)); \n    \n    return isMatch;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2hafez6b.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428085]

    ??:? void tmp2hafez6b.__unittest_L32_C1() [0x427c28]

    ??:? void tmp2hafez6b.__modtest() [0x427e04]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42beef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ad82]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ff15]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4303c4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fea1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ad59]

    ??:? runModuleUnitTests [0x42bcc5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4284d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    // TODO: Optimize this function\n    return ((x\
    \ % y == 0 && x % z == 0 && y % z == 0) ? true : false);\n}\nunittest\n{\n   \
    \ alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n \
    \   assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1ehw0l_i.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmp1ehw0l_i.__unittest_L31_C1() [0x427aa0]

    ??:? void tmp1ehw0l_i.__modtest() [0x427c7c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x < y)\n    {\n        if(y < z)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    else\n    {\n        if(y < z)\n        {\n  \
    \          return false;\n        }\n        else\n        {\n            return\
    \ true;\n        }\n    }\n}\nunittest\n{\n    alias candidate = any_int;\n\n\
    \    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp39xb6iu4.d(55): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmp39xb6iu4.__unittest_L51_C1() [0x427a54]

    ??:? void tmp39xb6iu4.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool retval = false;\n    long double intx = std.int(x);\n\
    \    long double inty = std.int(y);\n    long double intz = std.int(z);\n    long\
    \ double intx1 = std.int(x+0.);\n    long double intx2 = std.int(x+1.);\n    long\
    \ double inty2 = std.int(y+0.);\n    long double intz2 = std.int(z+0.);\n    long\
    \ double intx3 = std.int(x+0.);\n    long double inty3 = std.int(y+1.);\n    long\
    \ double intz3 = std.int(z+1.);\n    \n    if(intx1 == intx2 && inty1 == inty2\
    \ && intz1 == intz2)\n    {\n        retval = true;\n    }\n    else if(intx1\
    \ == intx2 && inty1 == inty3 && intz1 == intz2)\n    {\n        retval = true;\n\
    \    }\n    else if(intx1 == intx2 && inty1 == inty2 && intz1 == intz3)\n    {\n\
    \        retval = true;\n    }\n    else if(intx1 == intx2 && inty1 == inty3 &&\
    \ intz1 == intz3)\n    {\n        retval = true;\n    }\n    else if(intx1 ==\
    \ intx2 && inty1 == inty2 && intz1 == intz2)\n    {\n        retval = true;\n\
    \    }\n    else if(intx1 == intx2 && inty1 == inty3 && intz1 == intz3)\n    {\n\
    \        retval = true;\n    }\n    else if(intx1 == intx2 && inty1 == inty2 &&\
    \ intz1 == intz2)\n    {\n        retval = true;\n    }\n    else if(intx1 ==\
    \ intx2 && inty1 == inty3 && intz1 == intz3)\n    {\n        retval = true;\n\
    \    }\n    else if(intx1 == intx2 && inty1 == inty2 && intz1 == intz2)\n    {\n\
    \        retval = true;\n    }\n    else if(intx1 == intx2 && inty1 == inty3 &&\
    \ intz1 == intz3)\n    {\n        retval = true;\n    }\n    else if(intx1 ==\
    \ intx2 && inty1 == inty2 && intz1 == intz2)\n    {\n        retval = true;\n\
    \    }\n    else if(intx1 == intx2 && inty1 == inty3 && intz1 == intz3)\n    {\n\
    \        retval = true;\n    }\n    else if(intx1 == intx2 && inty1 == inty2 &&\
    \ intz1 == intz2)\n    {\n\nunittest\n{\n    alias candidate = any_int;\n\n  \
    \  assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) ==\
    \ false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplilyxurl.d(29): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(29): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(30): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(30): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(31): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(31): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(32): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(32): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(33): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(33): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(34): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(34): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(35): Error: use `real` instead of `long double`

    /tmp/tmplilyxurl.d(35): Error: identifier expected following `.`, not `int`

    /tmp/tmplilyxurl.d(36):'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tbool result = false;\n\t\n\tint xi = toInt(x);\n\
    \tint yi = toInt(y);\n\tint zi = toInt(z);\n\t\n\tif(xi == yi)\n\t{\n\t\tif(xi\
    \ == zi)\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult =\
    \ false;\n\t\t}\n\t}\n\telse if(xi == zi)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\
    \t{\n\t\tresult = false;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe9ppyr0_.d(30): Error: undefined identifier `toInt`

    /tmp/tmpe9ppyr0_.d(31): Error: undefined identifier `toInt`

    /tmp/tmpe9ppyr0_.d(32): Error: undefined identifier `toInt`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe9ppyr0_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    int i = (int)x;\n    int j = (int)y;\n    int\
    \ k = (int)z;\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l7ux6xp.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmp5l7ux6xp.d(29): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmp5l7ux6xp.d(30): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmp5l7ux6xp.d(31): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l7ux6xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (x != std::trunc(x) || y != std::trunc(y) ||\
    \ z != std::trunc(z)) return false; // all must be integers\n    \n    return\
    \ (x + y == z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa6lq5t1f.d(28): Error: found `:` when expecting `)`

    /tmp/tmpa6lq5t1f.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa6lq5t1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if ( fabs(x-y)+fabs(x-z)==0)\n        return true;\n\
    \    return false;\n}\n/*\n    \n    Create a function that takes 3 numbers.\n\
    \    Returns true if one of the numbers is equal to the sum of the other two,\
    \ and all numbers are integers.\n    Returns false in any other cases.\n    \n\
    \    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n    >>> any_int(3L,\
    \ 2L, 2L)\n    false\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1ckap5m2.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1ckap5m2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return isinf(z) && (isinf(x+y) || x == y+z);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6cltnv6y.d(28): Error: undefined identifier `isinf`

    /tmp/tmp6cltnv6y.d(28): Error: undefined identifier `isinf`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6cltnv6y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return !any_int(x,y,z) && x == z + y;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164090
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n\tint a = x+y, b = y+z; \n\tint c = x-y, d = y-z;\
    \ \n\tint e = x-z, f = y-z; \n\t\n\tbool ret = false;\n\t\n\tif ( (a == c && a\
    \ >= 0) && (b == d && b >= 0) ) \n\t\tret = true;\n\tif ( (b == d && b >= 0) &&\
    \ (c == e && c >= 0) ) \n\t\tret = true;\n\tif ( (c == e && c >= 0) && (d == f\
    \ && d >= 0) ) \n\t\tret = true;\n\t\n\treturn ret; \n} \nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxwcgybfc.d(28): Error: cannot implicitly convert expression `x
    + y` of type `float` to `int`

    /tmp/tmpxwcgybfc.d(28): Error: cannot implicitly convert expression `y + z` of
    type `float` to `int`

    /tmp/tmpxwcgybfc.d(29): Error: cannot implicitly convert expression `x - y` of
    type `float` to `int`

    /tmp/tmpxwcgybfc.d(29): Error: cannot implicitly convert expression `y - z` of
    type `float` to `int`

    /tmp/tmpxwcgybfc.d(30): Error: cannot implicitly convert expression `x - z` of
    type `float` to `int`

    /tmp/tmpxwcgybfc.d(30): Error: cannot implicitly convert expression `y - z` of
    type `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwcgybfc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  \n  int xint = int(x);\n  int yint = int(x);\n \
    \ int zint = int(x);\n  \n  if (xint == yint + zint) \n    return true; \n  \n\
    \  else \n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nYou should\
    \ also check for negative numbers since negative numbers can be added without\
    \ changing the result.\n<|/ c |>\n<| c |>\nThis code was very helpful for me.\
    \ Thank you.\n<|/ c |>\n<| a tags=c++ dscore=1 |>\n<code>\n#include <iostream>\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jkxllir.d(39): Error: declaration expected, not `<`

    /tmp/tmp0jkxllir.d(54): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(55): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(56): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(57): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(58): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(59): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(60): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(61): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(62): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(63): Error: declaration expected, not `assert`

    /tmp/tmp0jkxllir.d(64): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jkxllir.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(isInt(x) && isInt(y) && isInt(z))\n    {\n\
    \        float temp = x + y;\n        if(isInt(temp) && isInt(z)) return true;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere is another\
    \ way to solve this problem in Java\n<code>\nprivate static boolean areAllIntsAreEqualToEachOther(int...\
    \ numbers) {\n  int sum = 0;\n  for (int i : numbers) {\n    sum += i;\n  }\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpco262tzj.d(35): Error: declaration expected, not `<`

    /tmp/tmpco262tzj.d(42): Error: declaration expected, not `for`

    /tmp/tmpco262tzj.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpco262tzj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.algorithm.is_integer(x) && std.algorithm.is_integer(y)\
    \ && std.algorithm.is_integer(z)) || \n            (std.algorithm.is_integer(x)\
    \ && std.algorithm.is_integer(z) && std.algorithm.is_integer(y)) ||\n        \
    \    (std.algorithm.is_integer(y) && std.algorithm.is_integer(x) && std.algorithm.is_integer(z))\
    \ ||\n            (std.algorithm.is_integer(y) && std.algorithm.is_integer(z)\
    \ && std.algorithm.is_integer(x)));\n}\n/*\nunittest\n{\n    alias candidate =\
    \ any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6l1axvk3.d(33): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6l1axvk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool result = (x == y) + !(x != y && z != 0);\n\
    \    result &= !((x == y) + (z != 0)); \n    return result;\n}\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb__ftt2c.d(28): Error: cannot implicitly convert expression `cast(int)(x
    == y) + cast(int)!(x != y && (z != 0.00000F))` of type `int` to `bool`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb__ftt2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif(x==y || (x>0 && y>0) || (x<0 && y<0))\n\t\treturn\
    \ true;\n\t\n\tif( ((x>0 && x<1) && z>0) || ((x>0 && x<1) && z<0) || ((x<0 &&\
    \ x>1) && z>0) || ((x<0 && x>1) && z<0) )\n\t\treturn false;\n\t\n\treturn (x>y\
    \ || x<z || y>z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpiod48kmt.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x427fc5]

    ??:? void tmpiod48kmt.__unittest_L36_C1() [0x427b9a]

    ??:? void tmpiod48kmt.__modtest() [0x427d44]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bceb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd11]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301c0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc9d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab55]

    ??:? runModuleUnitTests [0x42bac1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428414]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x != y && x != z && y != z;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps9qqy9zk.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmps9qqy9zk.__unittest_L30_C1() [0x427a86]

    ??:? void tmps9qqy9zk.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164074
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn (std.math.isIntegral(x) && std.math.isIntegral(y)\
    \ && std.math.isIntegral(z));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpn6voyr.d(28): Error: undefined identifier `isIntegral` in module
    `std.math`, did you mean template `isIntegral(T)`?

    /tmp/tmpkpn6voyr.d(28): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    /tmp/tmpkpn6voyr.d(28): Error: undefined identifier `isIntegral` in module `std.math`,
    did you mean template `isIntegral(T)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpn6voyr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n\tif (x < y)\n\t\treturn false; \n\tif (y < z)\n\t\
    \treturn false; \n\tif (z < x)\n\t\treturn false; \n\tbool a = isint(x); \n\t\
    bool b = isint(y); \n\tbool c = isint(z); \n\treturn (a || b || c); \n} \nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvw6asnl.d(34): Error: undefined identifier `isint`, did you mean
    function `rint`?

    /tmp/tmphvw6asnl.d(35): Error: undefined identifier `isint`, did you mean function
    `rint`?

    /tmp/tmphvw6asnl.d(36): Error: undefined identifier `isint`, did you mean function
    `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvw6asnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    return any([x >= y, x >= z, y >= z]);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjhqou4oa.d(29): Error: undefined identifier `any`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjhqou4oa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\t\n\tif((x==y||x==z||y==z||x==z)) {\n\t\treturn true;\n\
    \t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n \
    \   assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdsceced5.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpdsceced5.__unittest_L35_C1() [0x427a58]

    ??:? void tmpdsceced5.__modtest() [0x427c34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (((x == y) || (x == z)) && \n         \
    \   ((y == z) || (y == x)));\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp201zsz96.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmp201zsz96.__unittest_L31_C1() [0x427a5c]

    ??:? void tmp201zsz96.__modtest() [0x427c38]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x + (y >= 0 ? z : -z)) >= (int) x);\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfed0v3e.d(28): Error: C style cast illegal, use `cast(int)x`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfed0v3e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    // TODO: Use real numbers\n    float temp = (x\
    \ + y + z) / 3;\n    return temp == std.typecons.integer(x) || temp == std.typecons.integer(y)\
    \ || temp == std.typecons.integer(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppd8k9jj0.d(30): Error: undefined identifier `integer` in module
    `std.typecons`

    /tmp/tmppd8k9jj0.d(30): Error: undefined identifier `integer` in module `std.typecons`

    /tmp/tmppd8k9jj0.d(30): Error: undefined identifier `integer` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppd8k9jj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x == y)\n    {\n        if(!std.isint(x))\n\
    \            return false;\n        if(!std.isint(z))\n            return false;\n\
    \        return true;\n    }\n    if(!std.isint(x))\n        return false;\n \
    \   if(!std.isint(y))\n        return false;\n    if(z != 0)\n    {\n        if(!std.isint(z))\n\
    \            return false;\n    }\n    else\n    {\n        if(std.isint(x) &&\
    \ std.isint(y))\n            return true;\n        else if(std.isint(x) && std.isint(y))\n\
    \            return false;\n        else\n            return false;\n    }\n \
    \   return true;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp71hpo9pr.d(30): Error: undefined identifier `isint` in package
    `std`

    /tmp/tmp71hpo9pr.d(32): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(36): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(38): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(42): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(47): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(47): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(49): Error: undefined identifier `isint` in package `std`

    /tmp/tmp71hpo9pr.d(49): Error: undefined identifier `isint` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp71hpo9pr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    auto a = (int)(x); \n    auto b = (int)(y); \n\
    \    auto c = (int)(z); \n    return ((a==b && a==c) || \n            (b==a &&\
    \ b==c) || \n            (a==b && b==c && c==a)) ;\n}\nunittest\n{\n    alias\
    \ candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxsbc90t7.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpxsbc90t7.d(29): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmpxsbc90t7.d(30): Error: C style cast illegal, use `cast(int)z`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxsbc90t7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return x != 0.0f && y != 0.0f && z != 0.0f &&\
    \ std::find(std::begin(x), std::end(x), x) != std::end(x) && std::find(std::begin(y),\
    \ std::end(y), y) != std::end(y) && std::find(std::begin(z), std::end(z), z) !=\
    \ std::end(z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7p07jm_u.d(28): Error: found `:` when expecting `;` following `return`
    statement

    /tmp/tmp7p07jm_u.d(28): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7p07jm_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (is_int(x) && is_int(y) && is_int(z)) return\
    \ true; \n    \n    return false;\n}\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwqbaq2qx.d(28): Error: undefined identifier `is_int`

    /tmp/tmpwqbaq2qx.d(28): Error: undefined identifier `is_int`

    /tmp/tmpwqbaq2qx.d(28): Error: undefined identifier `is_int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwqbaq2qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.math.isint(x) && std.math.isint(y)\
    \ && std.math.isint(z)) || (std.math.isint(y) && std.math.isint(z) && std.math.isint(x)));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    /tmp/tmp5inwjead.d(28): Error: undefined identifier `isint` in module `std.math`,
    did you mean function `rint`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5inwjead.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    return ((x==((y+z)))&&(y==((x+z)))&&(z==((x+y))));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcv4df18.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427edd]

    ??:? void tmprcv4df18.__unittest_L31_C1() [0x427a80]

    ??:? void tmprcv4df18.__modtest() [0x427c5c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa6d]

    ??:? runModuleUnitTests [0x42b9d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42832c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x == z) || (y == z)) || ((x == y) &&\
    \ (z == z));\n}\n</code>\n<|/ a tags=c++,function,variadic-functions,functional-programming\
    \ dscore=0 |>\n<| c |>\nThanks I'll look into that\n<|/ c |>\n<| a dscore=0 |>\n\
    You could use std::all_of:\n<code>\nunittest\n{\n    alias candidate = any_int;\n\
    \n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L)\
    \ == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb92hpnf9.d(30): Error: declaration expected, not `<`

    /tmp/tmpb92hpnf9.d(33): Error: unterminated character constant

    /tmp/tmpb92hpnf9.d(42): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(43): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(44): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(45): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(46): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(47): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(48): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(49): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(50): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(51): Error: declaration expected, not `assert`

    /tmp/tmpb92hpnf9.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb92hpnf9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{ \n    return x == y || (isinteger(x) && isinteger(y)\
    \ && isinteger(z)) || \n           (isinteger(x) && isinteger(y) && !isinteger(z))\
    \ || \n           (!isinteger(x) && isinteger(y) && isinteger(z));\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2xohes1.d(28): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(28): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(28): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(29): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(29): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(29): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(30): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(30): Error: undefined identifier `isinteger`

    /tmp/tmpd2xohes1.d(30): Error: undefined identifier `isinteger`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2xohes1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    bool is_int_x = isinteger(x);\n    bool is_int_y\
    \ = isinteger(y);\n    bool is_int_z = isinteger(z);\n    if(is_int_x && is_int_y\
    \ && is_int_z)\n    {\n        return (x + y + z == (x + y) || x + y + z == (x\
    \ + y) || x + y + z == (x + y));\n    }\n    else\n    {\n        return false;\n\
    \    }\n}\n/*\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcnxg2nnv.d(40): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnxg2nnv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == y || x == z || y == z || is_integer(x)\
    \ && is_integer(y) && is_integer(z));\n}\n\"\"\")\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn17gkdzz.d(30): Error: declaration expected, not `""`

    /tmp/tmpn17gkdzz.d(30): Error: unterminated string constant starting at /tmp/tmpn17gkdzz.d(30)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn17gkdzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\treturn (x && y && z && x==((int)x+(int)y+(int)z)\
    \ && (int)x==(int)x && (int)y==(int)y && (int)z==(int)z);\n}\nunittest\n{\n  \
    \  alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)x`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)y`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)z`

    /tmp/tmpe3_keztr.d(28): Error: C style cast illegal, use `cast(int)z`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe3_keztr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (x < y)\n\t{\n\t\tif (y < z)\n\t\t\treturn true;\n\
    \t\telse\n\t\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (x > z)\n\t\t\treturn\
    \ true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpaopmgr3j.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x427eb5]

    ??:? void tmpaopmgr3j.__unittest_L43_C1() [0x427a58]

    ??:? void tmpaopmgr3j.__modtest() [0x427c34]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa6e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc01]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb8d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]

    ??:? runModuleUnitTests [0x42b9b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428304]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    double a, b, c;\n    bool a = x == y + z;\n  \
    \  bool b = x != y + z;\n    bool c = y == z + x;\n    bool d = y != z + x;\n\
    \    return a || b || c || d;\n}\n</code>\n<|/ a |>\n<| c |>\nWhy would this be\
    \ the accepted answer?  It does not work with the example provided in OP's question.\
    \  This answer does not even try to answer the question.  For your code to work\
    \ the example would have to be: any_int(5L, 2L, 7L)  ... or any_int(5L, 2L, 7L)\
    \  ... or any_int(3L, 2L, 2L)\n<|/ c |>\n<| c |>\nI'm sorry but what is a question\
    \ asking for \"a function that takes 3 numbers.\"? The question states \"3 numbers\"\
    \ (three arguments). So this answer matches the example provided in the question.\n\
    <|/ c |>\n<| c |>\nThe question states \"a function that takes 3 numbers\". Which\
    \ is what my code provides and will work for that case too.  If you really don't\
    \ like my answer, I'll delete it.\n<|/ c |>\n<| c |>\nThe question states \"a\
    \ function that takes 3 numbers\". The answer provided does not meet that requirement.\
    \  I have run your code against the example provided in OPs question and your\
    \ code fails the example.  So this answer does not meet OPs requirements.\n<|/\
    \ c |>\n<| c |>\nI see. Yeah, I read that as \"three integers\". I guess \"a function\
    \ that takes 3 numbers\" would be a better phrase.\n<|/ c |>\n<| a dscore=2 tags=int,c++,double,floating-point,boolean\
    \ |>\nYou want to return true only if all 3 are integers\n<code>\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptyormaq4.d(35): Error: declaration expected, not `<`

    /tmp/tmptyormaq4.d(38): Error: unterminated character constant

    /tmp/tmptyormaq4.d(41): Error: unterminated character constant

    /tmp/tmptyormaq4.d(44): Error: unterminated character constant

    /tmp/tmptyormaq4.d(44): Error: unterminated character constant

    /tmp/tmptyormaq4.d(59): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(60): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(61): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(62): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(63): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(64): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(65): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(66): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(67): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(68): Error: declaration expected, not `assert`

    /tmp/tmptyormaq4.d(69): Error: unrecognized declara'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    \n    // TODO: use std.algorithm.equal\n    if\
    \ (x == y) return true;\n    \n    bool result = false;\n    \n    \n    if ((x\
    \ < y) != (y < x)) result = true;\n    \n    if (x == z) result = true;\n    \n\
    \    return result;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3t161l0.d(46): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ecd]

    ??:? void tmph3t161l0.__unittest_L41_C1() [0x427aa6]

    ??:? void tmph3t161l0.__modtest() [0x427c50]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbf3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa86]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc19]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300c8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fba5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa5d]

    ??:? runModuleUnitTests [0x42b9c9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42831c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x != 0.0f) || (y != 0.0f) || (z != 0.0f))\n\
    \        && (std.math.are_int(x) && std.math.are_int(y) && std.math.are_int(z))\n\
    \        && std.typecons.are_both_int(x);\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fmfsbuw.d(29): Error: undefined identifier `are_int` in module
    `std.math`

    /tmp/tmp0fmfsbuw.d(29): Error: undefined identifier `are_int` in module `std.math`

    /tmp/tmp0fmfsbuw.d(29): Error: undefined identifier `are_int` in module `std.math`

    /tmp/tmp0fmfsbuw.d(30): Error: undefined identifier `are_both_int` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fmfsbuw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((x || y) && std.int._opEq(x,std.int._add(std.int._add(x,\
    \ y), z)));\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1wmp3jmz.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmp1wmp3jmz.d(28): Error: identifier expected following `.`, not `int`

    /tmp/tmp1wmp3jmz.d(28): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1wmp3jmz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(!std.isint(x)) throw new core.UnsupportedError(\"\
    x is not integer!\");\n    if(!std.isint(y)) throw new core.UnsupportedError(\"\
    y is not integer!\");\n    if(!std.isint(z)) throw new core.UnsupportedError(\"\
    z is not integer!\");\n    if(std.isint(x) && std.isint(y) && std.isint(z)) \n\
    \    {\n        if(std.type_eq(x, y, z)) return true;\n        else \n       \
    \ {\n            float tx = std.type_add(x,z);\n            float ty = std.type_add(y,z);\n\
    \            if(std.type_eq(tx, ty)) return true;\n        }\n    }\n    return\
    \ false;\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpscovzhek.d(28): Error: undefined identifier `isint` in package
    `std`

    /tmp/tmpscovzhek.d(28): Deprecation: `std.math.core` is not visible from module
    `tmpscovzhek`

    /tmp/tmpscovzhek.d(28): Error: undefined identifier `UnsupportedError` in package
    `core`

    /tmp/tmpscovzhek.d(29): Error: undefined identifier `isint` in package `std`

    /tmp/tmpscovzhek.d(29): Deprecation: `std.math.core` is not visible from module
    `tmpscovzhek`

    /tmp/tmpscovzhek.d(29): Error: undefined identifier `UnsupportedError` in package
    `core`

    /tmp/tmpscovzhek.d(30): Error: undefined identifier `isint` in package `std`

    /tmp/tmpscovzhek.d(30): Deprecation: `std.math.core` is not visible from module
    `tmpscovzhek`

    /tmp/tmpscovzhek.d(30): Error: undefined identifier `UnsupportedError` in package
    `core`

    /tmp/tmpscovzhek.d(31): Error: undefined identifier `isint` in package `std`

    /tmp/tmpscovzhek.d(31): Error: undefined identifier `isint` in package `std`

    /tmp/tmpscovzhek.d(31): Error: undefined identifier `isint` in package `std`

    /tmp/tmpscovzhek.d(33): Error: undefined identifier `type_eq` in package `std`

    /tmp/tmpscovzhek.d(36): Error: undefined identifier `type_add` in package `std`

    /tmp/tmpscovzhek.d(37): Error: undefined identifier `type_add` in package `std`

    /tmp/tmpscovzhek.d(38): Error: undefined identifier `type_eq` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpscovzhek.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return (x == y || x == z || y == z);\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpypr1oxd9.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x427ead]

    ??:? void tmpypr1oxd9.__unittest_L30_C1() [0x427a54]

    ??:? void tmpypr1oxd9.__modtest() [0x427c30]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbd3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa3d]

    ??:? runModuleUnitTests [0x42b9a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if( std.isint(x) &&  std.isint(y) &&  std.isint(z)\
    \ ){\n        return  x+y+z == std.int(x+y+z);\n    }\n    return false;\n}\n\
    unittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L)\
    \ == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tlwbe38.d(29): Error: identifier expected following `.`, not `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tlwbe38.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tif (std.num.compare(x, std.num.sum(y, z)) == 0)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dg9hlns.d(28): Error: undefined identifier `num` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dg9hlns.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n  return !std.cint.not_any()(x, y, z) && std.typecons.is_int(std.math.add(x,y,z));\n\
    }\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L,\
    \ 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiuwx1cea.d(28): Error: undefined identifier `cint` in package `std`

    /tmp/tmpiuwx1cea.d(28): Error: undefined identifier `is_int` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiuwx1cea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    typedef bool (*fn)(float, float, float);\n  \n\
    \    int a = floor(x);\n    int b = floor(y);\n    int c = floor(z);\n    \n \
    \   return \n      a == b || a == c || b == c || a == b || b == c || a == b ||\
    \ a == c || b == c || a == b || a == c || b == c;\n}\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6_cpodjc.d(28): Error: found `bool` when expecting `;` following
    statement

    /tmp/tmp6_cpodjc.d(28): Error: found `,` when expecting `.` following float

    /tmp/tmp6_cpodjc.d(28): Error: found `float` when expecting identifier following
    `float`.

    /tmp/tmp6_cpodjc.d(28): Error: found `)` when expecting `.` following float

    /tmp/tmp6_cpodjc.d(28): Error: found `;` when expecting identifier following `float`.

    /tmp/tmp6_cpodjc.d(30): Error: found `int` when expecting `,`

    /tmp/tmp6_cpodjc.d(30): Error: found `;` when expecting `,`

    /tmp/tmp6_cpodjc.d(31): Error: found `b` when expecting `.` following int

    /tmp/tmp6_cpodjc.d(31): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp6_cpodjc.d(31): Error: found `floor` when expecting `,`

    /tmp/tmp6_cpodjc.d(31): Error: found `;` when expecting `,`

    /tmp/tmp6_cpodjc.d(32): Error: found `c` when expecting `.` following int

    /tmp/tmp6_cpodjc.d(32): Error: found `=` when expecting identifier following `int`.

    /tmp/tmp6_cpodjc.d(32): Error: found `floor` when e'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ( \n                int( x == y + z ) ==\
    \ x &&\n                int( x == y - z ) == x &&\n                int( x == z\
    \ + y ) == x &&\n                int( x == z - y ) == x &&\n                int(\
    \ y == z + x ) == y &&\n                int( y == z - x ) == y &&\n          \
    \      int( z == z + x ) == z &&\n                int( z == z - x ) == z &&\n\
    \                int(x) == int(x) &&\n                int(y) == int(y) &&\n  \
    \              int(z) == int(z) &&\n                x >= 0 &&\n              \
    \  x <= 1 &&\n                y >= 0 &&\n                y <= 1 &&\n         \
    \       z >= 0 &&\n                z <= 1 &&\n                x != y &&\n    \
    \            x != z &&\n                y != z &&\n                x != y &&\n\
    \                x != z &&\n                y != z\n              );\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dewt1e1.d(37): Error: cannot implicitly convert expression `x`
    of type `float` to `int`

    /tmp/tmp5dewt1e1.d(37): Error: cannot implicitly convert expression `x` of type
    `float` to `int`

    /tmp/tmp5dewt1e1.d(38): Error: cannot implicitly convert expression `y` of type
    `float` to `int`

    /tmp/tmp5dewt1e1.d(38): Error: cannot implicitly convert expression `y` of type
    `float` to `int`

    /tmp/tmp5dewt1e1.d(39): Error: cannot implicitly convert expression `z` of type
    `float` to `int`

    /tmp/tmp5dewt1e1.d(39): Error: cannot implicitly convert expression `z` of type
    `float` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dewt1e1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n\tassert(typecons.is_integral(y));\n\tassert(typecons.is_integral(z));\n\
    \tassert(typecons.is_integral(x));\n\t\n\tif ( (typecons.is_integral(y)&&typecons.is_integral(z))\
    \ && (typecons.is_integral(x)&&(typecons.is_integer(x)) )) \n\t{\n\t\tint xint\
    \ = typecons.to_integer(x);\n\t\tint yint = typecons.to_integer(y);\n\t\tint zint\
    \ = typecons.to_integer(z);\n\t\t\n\t\tif ( (xint+yint+zint) == (x+y+z) ) return\
    \ true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn false;\n}\nunittest\n\
    {\n    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpblqo0cvt.d(28): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(29): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(30): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(32): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(32): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(32): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(32): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(34): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(35): Error: undefined identifier `typecons`

    /tmp/tmpblqo0cvt.d(36): Error: undefined identifier `typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblqo0cvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if(x != 0 && y != 0 && z != 0) {\n        bool\
    \ eq1 = (x == y + z);\n        bool eq2 = (x == z);\n        bool eq3 = (y ==\
    \ z);\n        bool eq4 = (x == y && y == z);\n        bool eq5 = (x == y || y\
    \ == z);\n        bool eq6 = (x == z || y == z);\n        bool eq7 = (x == y ||\
    \ y == x);\n        bool eq8 = (x == z || z == x);\n        bool eq9 = (y == z\
    \ || z == y);\n        bool eq10 = (y == x || x == y);\n        bool eq11 = (z\
    \ == x || x == z);\n        bool eq12 = (z == y || y == z);\n        bool eq13\
    \ = (z == x || x == z);\n        bool eq14 = (z == y || y == z);\n        bool\
    \ eq15 = (x == z || y == z);\n        bool eq16 = (y == z || x == z);\n      \
    \  bool eq17 = (y == x || y == x);\n        bool eq18 = (x == y || y == x);\n\
    \        bool eq19 = (x == z || z == x);\n        bool eq20 = (y == z || z ==\
    \ y);\n        bool eq21 = (z == x || y == z);\n        bool eq22 = (z == y ||\
    \ x == z);\n        bool eq23 = (y == z || y == z);\n        bool eq24 = (y ==\
    \ x || x == y);\n        bool eq25 = (z == x || x == z);\n        bool eq26 =\
    \ (z == y || y == z);\n        bool eq27 = (y == x || x == y);\n        bool eq28\
    \ = (x == z || y == z);\n        bool eq29 = (y == x || y == x);\n        bool\
    \ eq30 = (x == y || y == y);\n        bool eq31 = (z == x || z == y);\n      \
    \  bool eq32 = (y == z || z == x);\n        bool eq33 = (y == x || x == y);\n\
    \        bool eq34 = (x == z || y == z);\n        bool eq35 = (z == y || x ==\
    \ z);\n        bool eq36 = (y == z || y == z);\n        bool eq37 = (y == x ||\
    \ x == y);\n        bool eq38 = (z == x || y == z);\n        bool eq39 = (z ==\
    \ y || x == z);\n        bool eq40 = (y == z || y == z);\n        bool eq41 =\
    \ (z == x || z == y);\n        bool eq42 = (z == y || x == z);\nunittest\n{\n\
    \    alias candidate = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n\
    \    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5)\
    \ == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbuduahr2.d(71): Error: found `unittest` instead of statement

    /tmp/tmpbuduahr2.d(86): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbuduahr2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    if (fabs(x - y) < 1e-12) { return (x - y == 0);\
    \ }\n    if (fabs(x - z) < 1e-12) { return (x - z == 0); }\n    return (x + y\
    \ == z);\n}\nunittest\n{\n    alias candidate = any_int;\n\n    assert(candidate(2L,\
    \ 3L, 1L) == true);\n    assert(candidate(2.5, 2L, 3L) == false);\n    assert(candidate(1.5,\
    \ 5L, 3.5) == false);\n    assert(candidate(2L, 6L, 2L) == false);\n    assert(candidate(4L,\
    \ 2L, 2L) == true);\n    assert(candidate(2.2, 2.2, 2.2) == false);\n    assert(candidate(-4L,\
    \ 6L, 2L) == true);\n    assert(candidate(2L, 1L, 1L) == true);\n    assert(candidate(3L,\
    \ 4L, 7L) == true);\n    assert(candidate(3.0, 4L, 7L) == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpsusbqamo.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f95]

    ??:? void tmpsusbqamo.__unittest_L32_C1() [0x427b38]

    ??:? void tmpsusbqamo.__modtest() [0x427d14]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bcdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ab72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fd05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4301b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fc91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab49]

    ??:? runModuleUnitTests [0x42bab5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4283e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164075
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
    \ takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum\
    \ of the other two, and all numbers are integers.\n    Returns false in any other\
    \ cases.\n    \n    Examples\n    >>> any_int(5L, 2L, 7L)\n    true\n    \n  \
    \  >>> any_int(3L, 2L, 2L)\n    false\n\n    >>> any_int(3L, -2L, 1L)\n    true\n\
    \    \n    >>> any_int(3.6, -2.2, 2L)\n    false\n  \n\n    \n    \n*/\nbool any_int(float\
    \ x, float y, float z) \n{\n    return ((std.typecons.is_int(x.type) && std.typecons.is_int(y.type)\
    \ && std.typecons.is_int(z.type)) || (std.typecons.is_double(x.type) && std.typecons.is_double(y.type)\
    \ && std.typecons.is_double(z.type)));\n}\n#endif\nunittest\n{\n    alias candidate\
    \ = any_int;\n\n    assert(candidate(2L, 3L, 1L) == true);\n    assert(candidate(2.5,\
    \ 2L, 3L) == false);\n    assert(candidate(1.5, 5L, 3.5) == false);\n    assert(candidate(2L,\
    \ 6L, 2L) == false);\n    assert(candidate(4L, 2L, 2L) == true);\n    assert(candidate(2.2,\
    \ 2.2, 2.2) == false);\n    assert(candidate(-4L, 6L, 2L) == true);\n    assert(candidate(2L,\
    \ 1L, 1L) == true);\n    assert(candidate(3L, 4L, 7L) == true);\n    assert(candidate(3.0,\
    \ 4L, 7L) == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk3vrho0j.d(30): Error: declaration expected, not `#`

    /tmp/tmpk3vrho0j.d(35): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(36): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(37): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(38): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(39): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(40): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(41): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(42): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(43): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(44): Error: declaration expected, not `assert`

    /tmp/tmpk3vrho0j.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk3vrho0j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164075
