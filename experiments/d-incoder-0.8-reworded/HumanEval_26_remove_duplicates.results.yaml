language: d
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long hash = 0;\n    long[] result = new long[numbers.length];\n    int current\
    \ = 0;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__8b8hy8.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__8b8hy8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wn4k0rf.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wn4k0rf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        int index = 0;\n        while (index < numbers.length)\n\
    \        {\n            if (numbers[index] == numbers[i])\n            {\n   \
    \             index++;\n                continue;\n            }\n           \
    \ result[i] = numbers[i];\n            index++;\n        }\n    }\n    return\
    \ result;\n}\n/*\n From an array of integers, remove all elements that occur more\
    \ than once.\n    Keep order of elements left the same as in the input.\n    >>>\
    \ remove_duplicates([1L, 2L, 3L, 2L, 4L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpccrp4d18.d(42): unittest failure

    ----------------

    ??:? _d_unittestp [0x42840d]

    ??:? void tmpccrp4d18.__unittest_L36_C1() [0x4280e1]

    ??:? void tmpccrp4d18.__modtest() [0x428190]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4c7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b35a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305e5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a94]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430571]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b331]

    ??:? runModuleUnitTests [0x42c29d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  int i = 0, j;\n  for( ; i < numbers.length;\
    \ i++) \n  {\n    for(j = i+1; j < numbers.length; j++)\n    {\n      if(numbers[j]\
    \ == numbers[i])\n      {\n        numbers[j] = -1L;\n        numbers[i] = numbers[j];\n\
    \      }\n    }\n  }\n  return numbers;\n}\n</code>\n<|/ a tags=arrays,functional-programming,java\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nimport java.util.Arrays;\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps3ypej8z.d(27): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps3ypej8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  return toList(numbers).filter(x => !contains(numbers, x)).to_array();\n}\n\
    /**\n From an array of ints, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3fps3xp.d(12): Error: undefined identifier `toList`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3fps3xp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    int count = 0;\n\tlong[] answer = new long[numbers.length];\n\tfor(int i = 0;\
    \ i < numbers.length; i++)\n\t{\n\t\tif (count == 0)\n\t\t\tanswer[i] = numbers[i];\n\
    \t\telse if (numbers[i] == answer[count-1])\n\t\t\tcount++;\n\t\telse\n\t\t\t\
    answer[i] = answer[count-1];\n\t}\n\treturn answer;\n}\n// End of duplicates.\n\
    */\n/*\n From an array of strings, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([\"\
    a\", \"b\", \"c\", \"c\", \"a\", \"b\"])\n    [\"a\", \"b\", \"c\"]\n    \n*/\n\
    string[] remove_duplicates(string[] words) \n{\n\tint count = 0;\n\tstring[] answer\
    \ = new string[words.length];\n\tfor(int i = 0; i < words.length; i++)\n\t{\n\t\
    \tif (count == 0)\n\t\t\tanswer[i] = words[i];\n\t\telse if (words[i] == answer[count-1])\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tanswer[i] = answer[count-1];\n\t}\n\treturn answer;\n\
    }\n// End of duplicates.\n*/\n/*\n From an array of doubles, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1.1, 2.2, 3.3, 2.2, 4.4])\n    [1.1, 3.3,\
    \ 4.4]\n    \n*/\ndouble[] remove_duplicates(double[] numbers) \n{\n\tint count\
    \ = 0;\n\tdouble[] answer = new double[numbers.length];\n\tfor(int i = 0; i <\
    \ numbers.length; i++)\n\t{\n\t\tif (count == 0)\n\t\t\tanswer[i] = numbers[i];\n\
    \t\telse if (numbers[i] == answer[count-1])\n\t\t\tcount++;\n\t\telse\n\t\t\t\
    answer[i] = answer[count-1];\n\t}\n\treturn answer;\n}\n// End of duplicates.\n\
    */\n/*\n From an array of doubles, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1.1,\
    \ 2.2, 3.3, 2.2, 4.4])\n    [1.1, 3.3, 4.4]\n    \n*/\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi0yixt4t.d(26): Error: declaration expected, not `*`

    /tmp/tmpi0yixt4t.d(38): Error: declaration expected, not `for`

    /tmp/tmpi0yixt4t.d(38): Error: no identifier for declarator `i`

    /tmp/tmpi0yixt4t.d(38): Error: declaration expected, not `<`

    /tmp/tmpi0yixt4t.d(38): Error: no identifier for declarator `i`

    /tmp/tmpi0yixt4t.d(38): Error: declaration expected, not `++`

    /tmp/tmpi0yixt4t.d(42): Error: declaration expected, not `else`

    /tmp/tmpi0yixt4t.d(44): Error: declaration expected, not `else`

    /tmp/tmpi0yixt4t.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0yixt4t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = 0;\n  for(long number : numbers) \n  {\n    if(numbers[n++] == number)\n\
    \      continue;\n    numbers[n++] = number;\n  }\n  return numbers;\n}\n/*\n\
    \ From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpni3tqv0g.d(13): Error: semicolon expected, not `:`

    /tmp/tmpni3tqv0g.d(13): Error: expression expected, not `:`

    /tmp/tmpni3tqv0g.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpni3tqv0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int length = numbers.length;\n    long[] noDupes = new long[length];\n    int\
    \ count = 0;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9higvm5.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9higvm5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long ret = 0;\n    foreach(i, numbers) {\n        ret |= i;\n    }\n    long\
    \ retAll = 0;\n    foreach(i, numbers) {\n        retAll |= i;\n    }\n    \n\
    \    if(ret != retAll) {\n        throw new RuntimeException(\"remove_duplicates:\
    \ Input array elements not sorted\");\n    }\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_kkdlu1.d(13): Error: no identifier for declarator `numbers`

    /tmp/tmp3_kkdlu1.d(13): Error: found `)` when expecting `;`

    /tmp/tmp3_kkdlu1.d(16): Error: found `long` when expecting `)`

    /tmp/tmp3_kkdlu1.d(17): Error: no identifier for declarator `numbers`

    /tmp/tmp3_kkdlu1.d(17): Error: found `)` when expecting `;`

    /tmp/tmp3_kkdlu1.d(21): Error: found `if` when expecting `)`

    /tmp/tmp3_kkdlu1.d(21): Error: found `!=` when expecting `)`

    /tmp/tmp3_kkdlu1.d(21): Error: missing `{ ... }` for function literal

    /tmp/tmp3_kkdlu1.d(21): Error: found `retAll` when expecting `;` following statement

    /tmp/tmp3_kkdlu1.d(21): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_kkdlu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int[] indexes = create_sorted_array(numbers);\n    int size = indexes.size();\n\
    \    long[] result = new long[size - 1];\n    int j = 0;\n    for (int i = 0;\
    \ i < size; i++)\n    {\n        long current = numbers[i];\n        long next\
    \ = numbers[j];\n        if (current == next)\n        {\n            result[j++]\
    \ = current;\n        }\n        else if (indexes.get_element_at(i) < j) \n  \
    \      {\n            result[j++] = current;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl5b0ju6_.d(12): Error: undefined identifier `create_sorted_array`

    /tmp/tmpl5b0ju6_.d(13): Error: no property `size` for type `int[]`

    /tmp/tmpl5b0ju6_.d(24): Error: no property `get_element_at` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5b0ju6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] newnumbers = new long[numbers.length];\n\tfor (int i = 0; i < numbers.length;\
    \ i++) \n\t{\n\t\tint j = i;\n\t\tfor (int k = i; k < numbers.length; k++) \n\t\
    \t{\n\t\t\tif (numbers[j] == numbers[k]) \n\t\t\t\tbreak;\n\t\t\tj++;\n\t\t}\n\
    \t\tif (j - i > 1) \n\t\t\tnewnumbers[i] = (long)((double)numbers[i] - (double)numbers[j]);\n\
    \t}\n\treturn newnumbers;\n}\n</code>\n<|/ a tags=list,sorting,c#,duplicates |>\n\
    <| a |>\nI did some tests using both sorts and then I realized that if you sort\
    \ the array and then sort it again it will do the same thing as sorting it once\
    \ with the algorithm above. So now I realized that you can get the same result\
    \ without using any sorting. \nHere's my code:\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn3c82z6u.d(23): Error: C style cast illegal, use `cast(double)numbers[i]`

    /tmp/tmpn3c82z6u.d(23): Error: C style cast illegal, use `cast(double)numbers[j]`

    /tmp/tmpn3c82z6u.d(23): Error: C style cast illegal, use `cast(long)(cast(double)numbers[i]
    - cast(double)numbers[j])`

    /tmp/tmpn3c82z6u.d(27): Error: declaration expected, not `<`

    /tmp/tmpn3c82z6u.d(31): Error: unterminated character constant

    /tmp/tmpn3c82z6u.d(34): Error: semicolon expected, not `.`

    /tmp/tmpn3c82z6u.d(34): Error: no identifier for declarator `.Collections.Generic`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn3c82z6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long uniques = 0;\n    long[] uniques_arr = new long[numbers.length];\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        boolean found = false;\n\
    \        for (int j = 0; j < uniques_arr.length; j++) {\n            if (numbers[i]\
    \ == uniques_arr[j]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            uniques_arr[uniques++]\
    \ = numbers[i];\n        }\n    }\n    long[] result = new long[uniques];\n  \
    \  for (int i = 0; i < uniques; i++) {\n        result[i] = uniques_arr[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp80fhu2q0.d(15): Error: undefined identifier `boolean`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp80fhu2q0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i = 0;\n    long[] answer = new long[numbers.length];\n    for(int k =\
    \ 0; k < numbers.length; k++)\n    {\n        for(int j = 0; (j < answer.length)\
    \ && (numbers[k] == answer[j]); j++)\n        {\n        }\n        if(j < answer.length)\n\
    \        {\n            answer[j] = numbers[k];\n        }\n        \n    }\n\
    \    return answer;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI'm surprised you\
    \ wrote this in C++, since it is clearly using unsafe constructs. I highly doubt\
    \ that this will compile as C++ - at least not in MSVC.\n<|/ c |>\n<| c |>\nI\
    \ used this code to solve my problem, but my code is too long, so I decided to\
    \ write a short program to test it first.\n<|/ c |>\n<| c |>\nIf you're going\
    \ to do that, then you're better off by rewriting it in standard C (or any other\
    \ language that supports proper containers, like Python, Lua, Ruby, Erlang, etc...)\n\
    <|/ c |>\n<| c |>\nNo, I wrote it in C++, since I wrote it in C++ and I know this\
    \ language well. Maybe I will rewrite it in Python, Lua, Ruby, etc., but my program\
    \ is just too long to post it here.\n<|/ c |>\n<| c |>\n: It's certainly valid\
    \ C++, albeit very uncommon and poor C++. Although it looks like some kind of\
    \ competition, it's definitely not a competitive C++ code. Your use of C-style\
    \ casts makes me wonder what made you think this was C++.\n<|/ c |>\n<| a |>\n\
    This is my code in Java, I hope this helps you.\n<code>\nimport java.io.*;\nimport\
    \ java.util.*;\nimport static java.lang.Integer.parseInt;\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ivkg0ct.d(27): Error: declaration expected, not `<`

    /tmp/tmp2ivkg0ct.d(30): Error: unterminated character constant

    /tmp/tmp2ivkg0ct.d(36): Error: unterminated character constant

    /tmp/tmp2ivkg0ct.d(36): Error: unterminated character constant

    /tmp/tmp2ivkg0ct.d(42): Error: unterminated character constant

    /tmp/tmp2ivkg0ct.d(42): Error: unterminated character constant

    /tmp/tmp2ivkg0ct.d(48): Error: identifier expected following `package`

    /tmp/tmp2ivkg0ct.d(48): Error: `;` expected

    /tmp/tmp2ivkg0ct.d(49): Error: identifier expected following `import`

    /tmp/tmp2ivkg0ct.d(49): Error: `;` expected

    /tmp/tmp2ivkg0ct.d(49): Error: no identifier for declarator `java.lang.Integer.parseInt`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ivkg0ct.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i, j, k, m;\n    long[] result = new long[numbers.length];\n    for (i=0;\
    \ i < numbers.length; i++) {\n        result[i] = numbers[i];\n    }\n    for\
    \ (j=1; j < numbers.length; j++) {\n        if (numbers[j-1] == numbers[j]) {\n\
    \            continue;\n        }\n        for (k=0; k < j; k++) {\n         \
    \   if (numbers[k] == numbers[j]) {\n                numbers[k] = numbers[j];\n\
    \            }\n        }\n    }\n    for (m=0; m < result.length; m++) {\n  \
    \      if (result[m] == numbers[m]) {\n            for (k=m; k < numbers.length;\
    \ k++) {\n                if (result[m] != numbers[k]) {\n                   \
    \ numbers[k] = numbers[m];\n                    m = k;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n/*\n\
    \    Get all possible unique combinations of n elements out of m elements.\n \
    \   \n    Example :\n    >>> all_possible_combinations([1, 2, 3, 4, 5], 3)\n \
    \   [[1, 2], [3, 4], [5]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4, 5], 4)\n    [[1, 2, 3], [4], [5]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4, 5], 5)\n    [[1, 2, 3, 4, 5]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4], 4)\n    [[1, 2], [3, 4]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4], 3)\n    [[1, 2, 3, 4]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4], 2)\n    [[1, 2], [3], [4]]\n    \n*/\nlong[] all_possible_combinations(long[]\
    \ numbers, int n) \n{\n    if (n == 1) {\n        return new long[] { numbers\
    \ };\n    }\n    long[] result = new long[n];\n    int[] indexes = new int[n];\n\
    \    indexes[0] = 0;\n    for (int i=1; i < n; i++) {\n        int j = 0;\n  \
    \      while (j < i) {\n            indexes[i] = j;\n            result[i] = numbers[indexes[i]];\
    \ \n            j++;\n        }\n    }\n    return result;\n}\n/*\n    Get all\
    \ possible unique combinations of m elements out of n elements.\n    \n    Example\
    \ :\n    >>> all_possible_combinations([1, 2, 3, 4, 5], 3)\n    [[1, 2], [3, 4],\
    \ [5]]\n    \n    Example :\n    >>> all_possible_combinations([1, 2, 3, 4, 5],\
    \ 4)\n    [[1, 2, 3], [4], [5]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4, 5], 5)\n    [[1, 2, 3, 4, 5]]\n    \n    Example :\n    >>> all_possible_combinations([1,\
    \ 2, 3, 4], 4)\n    \nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphyh2dyta.d(71): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmphyh2dyta.d(71): Error: found `}` when expecting `;` following statement

    /tmp/tmphyh2dyta.d(71): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmphyh2dyta.d(86): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphyh2dyta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] newnumbers = new long[numbers.length];\n\tint i = 0, j = 0;\n\tint jmax\
    \ = numbers.length-1;\n\twhile (j < jmax) {\n\t\tif (numbers[j] == numbers[j+1])\
    \ j++;\n\t\telse newnumbers[j] = numbers[j];\n\t\tj++;\n\t}\n\treturn newnumbers;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_ggnvvsj.d(14): Error: cannot implicitly convert expression `numbers.length
    - 1LU` of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_ggnvvsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] dupes;\n    int i = 0;\n    int j = 0;\n    dupes = new long[numbers.length];\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpua3pfsq0.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpua3pfsq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long hashSet[numbers.length];\n    for (int i = 0; i < numbers.length; i++)\
    \ \n        hashSet[i] = numbers[i];\n    long[] output = new long[numbers.length];\n\
    \    int pos = 0;\n    for (int i = 0; i < numbers.length; i++) \n    {\n    \
    \    if (hashSet[i] != numbers[i]) \n        {\n            output[pos] = numbers[i];\n\
    \            hashSet[i] = numbers[i];\n            pos++;\n        }\n    }\n\
    \    return output;\n}\n</code>\n<|/ a dscore=1 tags=java |>\n<| c |>\nWhat about\
    \ `remove_duplicates(new long[]{2L, 1L, 1L, 1L})`? What about the list containing\
    \ only duplicate elements? Or any list containing duplicates of duplicates? Think\
    \ about all possible edge cases. And please read [How do I write a good answer](https://stackoverflow.com/help/how-to-answer)\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\npublic class RemoveDuplicates {\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9jhv2f2.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[numbers.length] hashSet`

    /tmp/tmp_9jhv2f2.d(28): Error: declaration expected, not `<`

    /tmp/tmp_9jhv2f2.d(40): Error: declaration expected, not `assert`

    /tmp/tmp_9jhv2f2.d(41): Error: declaration expected, not `assert`

    /tmp/tmp_9jhv2f2.d(42): Error: declaration expected, not `assert`

    /tmp/tmp_9jhv2f2.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9jhv2f2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int index = 0;\n    long[] nums_out = std.array.create(numbers.length, 0);\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if (nums_out[index]\
    \ != numbers[i])\n        {\n            nums_out[index++] = numbers[i];\n   \
    \     }\n    }\n    return nums_out;\n}\n/*\n From an array of integers, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n   \
    \ [1L, 3L, 4L]\n    \n*/\ndouble[] remove_duplicates(double[] numbers) \n{\n \
    \   int index = 0;\n    double[] nums_out = std.array.create(numbers.length, 0);\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if (nums_out[index]\
    \ != numbers[i])\n        {\n            nums_out[index++] = numbers[i];\n   \
    \     }\n    }\n    return nums_out;\n}\n/*\n From an array of integers, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n   \
    \ [1L, 3L, 4L]\n    \n*/\nfloat[] remove_duplicates(float[] numbers) \n{\n   \
    \ int index = 0;\n    float[] nums_out = std.array.create(numbers.length, 0);\n\
    \    for(int i = 0; i < numbers.length; ++i)\n    {\n        if (nums_out[index]\
    \ != numbers[i])\n        {\n            nums_out[index++] = numbers[i];\n   \
    \     }\n    }\n    return nums_out;\n}\n/*\n From an array of strings, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    >>> remove_duplicates([\"a\", \"b\", \"b\", \"c\"\
    ])\n    [\"a\", \"b\", \"c\"]\n    \n*/\nstring[] remove_duplicates(string[] numbers)\
    \ \n{\n    int index = 0;\n    string[] nums_out = std.array.create(numbers.length,\
    \ \"\");\n    for(int i = 0; i < numbers.length; ++i)\n    {\n        if (nums_out[index]\
    \ != numbers[i])\n        {\n            nums_out[index++] = numbers[i];\n   \
    \     }\n    }\n    return nums_out;\n}\n/*\n From an array of characters, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    >>> remove_duplicates([\"a\", 'b', 'b', 'c', 'b'])\n\
    \    ['a', 'b', 'c', 'b']\n    \n*/\nchar[] remove_duplicates(char[] numbers)\
    \ \n{\n    int index = 0;\n    char[] nums_out = std.array.create(numbers.length,\
    \ 0);\n    for(int \nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv4yo_uvu.d(95): Error: no identifier for declarator `int`

    /tmp/tmpv4yo_uvu.d(95): Error: expression expected, not `unittest`

    /tmp/tmpv4yo_uvu.d(96): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpv4yo_uvu.d(97): Error: expression expected, not `alias`

    /tmp/tmpv4yo_uvu.d(97): Error: found `candidate` when expecting `)`

    /tmp/tmpv4yo_uvu.d(97): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv4yo_uvu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] ans = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        int count = 0;\n        for (int j = 0; j < numbers.length;\
    \ j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n\
    \                count++;\n            }\n        }\n        ans[i] = numbers[i];\n\
    \        if (count > 1)\n        {\n            ans[i] = numbers[i];\n       \
    \ }\n    }\n    return ans;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis is probably\
    \ the best answer out there for most questions tagged with `C#`.\n<|/ c |>\n<|\
    \ c |>\nVery clean solution. Thanks.\n<|/ c |>\n<| c |>\nIf you're writing a library,\
    \ you might want to throw exceptions instead of returning null.\n<|/ c |>\n<|\
    \ a tags=arrays,c# |>\nHere's another solution which is probably more efficient\
    \ that others.\n<code>\nvar uniques = new HashSet<string>();\nfor (var i = 0;\
    \ i < numbers.Length; ++i)\n{\n  if (uniques.Add(numbers[i]))\n  {\n    numbers.RemoveAt(i);\n\
    \    i--;\n  }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nWhat if the order of the\
    \ array is randomized? You will get a different order than you expect\n<|/ c |>\n\
    <| c |>\nThat's not the purpose of the question. OP was asking how to remove duplicates,\
    \ not how to keep the order.\n<|/ c |>\n<| a dscore=2 tags=arrays,c# |>\n<code>\n\
    using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuex6fi2l.d(31): Error: declaration expected, not `<`

    /tmp/tmpuex6fi2l.d(40): Error: unterminated character constant

    /tmp/tmpuex6fi2l.d(43): Error: unterminated character constant

    /tmp/tmpuex6fi2l.d(46): Error: declaration expected, not `for`

    /tmp/tmpuex6fi2l.d(46): Error: no identifier for declarator `i`

    /tmp/tmpuex6fi2l.d(46): Error: declaration expected, not `<`

    /tmp/tmpuex6fi2l.d(46): Error: declaration expected, not `++`

    /tmp/tmpuex6fi2l.d(51): Error: no identifier for declarator `i`

    /tmp/tmpuex6fi2l.d(51): Error: declaration expected, not `--`

    /tmp/tmpuex6fi2l.d(52): Error: unrecognized declaration

    /tmp/tmpuex6fi2l.d(60): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuex6fi2l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result;\n    long temp;\n    result = new long[numbers.length];\n  \
    \  for (int i = 0; i<numbers.length; ++i) {\n        for (int j = i+1; j<numbers.length;\
    \ ++j) {\n            if (numbers[i] == numbers[j]) {\n                continue;\n\
    \            }\n            temp = numbers[i];\n            numbers[i] = numbers[j];\n\
    \            numbers[j] = temp;\n        }\n    }\n    result = Arrays.copyOf(numbers,\
    \ numbers.length);\n    Arrays.sort(result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyxin3epc.d(25): Error: undefined identifier `Arrays`

    /tmp/tmpyxin3epc.d(26): Error: undefined identifier `Arrays`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyxin3epc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    if (numbers == null || numbers.length == 0)\n\t\treturn new long[0];\n\tlong[]\
    \ temp = new long[numbers.length];\n\t\n\tfor (int i = 0; i < numbers.length;\
    \ i++){\n\t\tlong val = numbers[i];\n\t\tint index = 0;\n\t\twhile (index < temp.length\
    \ && temp[index] == val)\n\t\t\tindex++;\n\t\tif (index < temp.length){\n\t\t\t\
    temp[index] = val;\n\t\t}\n\t}\n\treturn temp;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpexecr8zf.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x428435]

    ??:? void tmpexecr8zf.__unittest_L27_C1() [0x428055]

    ??:? void tmpexecr8zf.__modtest() [0x4281b4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4ef]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b382]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43060d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430abc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430599]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b359]

    ??:? runModuleUnitTests [0x42c2c5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int n = numbers.length;\n  \
    \  int i = 0;\n    int j = 0;\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmperpmzyth.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperpmzyth.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \ long last = numbers[0];\n   long[] results = new long[numbers.length - 1];\n\
    \   for (int i = 1; i < numbers.length; ++i)\n   {\n      if (numbers[i] != last)\n\
    \         last = numbers[i];\n      else\n         results[i - 1] = numbers[i];\n\
    \   }\n   return results;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nulong[] remove_duplicates(ulong[] numbers) \n{\n   ulong last = numbers[0];\n\
    \   ulong[] results = new ulong[numbers.length - 1];\n   for (int i = 1; i < numbers.length;\
    \ ++i)\n   {\n      if (numbers[i] != last)\n         last = numbers[i];\n   \
    \   else\n         results[i - 1] = numbers[i];\n   }\n   return results;\n}\n\
    /*\n From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qjv9362.d(54): Error: `tmp7qjv9362.remove_duplicates` called with
    argument types `(void[])` matches both:

    /tmp/tmp7qjv9362.d(10):     `tmp7qjv9362.remove_duplicates(long[] numbers)`

    and:

    /tmp/tmp7qjv9362.d(30):     `tmp7qjv9362.remove_duplicates(ulong[] numbers)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qjv9362.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i,j,count=0;\n  long[] results = new long[numbers.length];\nunittest\n{\n  \
    \  alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz891jt08.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz891jt08.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if (numbers == null) throw new ArgumentNullException(\"numbers\", \"numbers\
    \ is null\");\n    int size = numbers.length;\n    if (size == 0) return new long[0];\n\
    \    if (size == 1) return new long[]{numbers[0]};\n    // sort numbers descending\n\
    \    Arrays.sort(numbers, long.TYPE.reverseOrder());\n    long[] dups = new long[size];\n\
    \    // walk through all numbers, counting duplicates\n    long lastNumber = numbers[0];\n\
    \    for (int i = 1; i < size; i++) {\n        if (numbers[i] == lastNumber) {\n\
    \            dups[i]++;\n        } else {\n            lastNumber = numbers[i];\n\
    \            dups[i] = 1;\n        }\n    }\n    // remove all numbers that appear\
    \ more than\n    // once by only keeping the first occurrence\n    for (int i\
    \ = 0; i < size; i++) {\n        if (dups[i] > 1)\n            numbers[i] = dups[0];\
    \ // keep first occurrence\n        else\n            numbers[i] = 0;\n    }\n\
    \    return numbers;\n}\n/*\n From an array of doubles, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1.1, 2.2, 3.3, 2.2, 4.4])\n    [1.1, 3.3, 4.4]\n \
    \   \n*/\ndouble[] remove_duplicates(double[] numbers) \n{\n    if (numbers ==\
    \ null) throw new ArgumentNullException(\"numbers\", \"numbers is null\");\n \
    \   int size = numbers.length;\n    if (size == 0) return new double[0];\n   \
    \ if (size == 1) return new double[]{numbers[0]};\n    // sort numbers descending\n\
    \    Arrays.sort(numbers, double.TYPE.reverseOrder());\n    double[] dups = new\
    \ double[size];\n    // walk through all numbers, counting duplicates\n    double\
    \ lastNumber = numbers[0];\n    for (int i = 1; i < size; i++) {\n        if (numbers[i]\
    \ == lastNumber) {\n            dups[i]++;\n        } else {\n            lastNumber\
    \ = numbers[i];\n            dups[i] = 1;\n        }\n    }\n    // remove all\
    \ numbers that appear more than\n    // once by only keeping the first occurrence\n\
    \    for (int i = 0; i < size; i++) {\n        if (dups[i] > 1)\n            numbers[i]\
    \ = dups[0]; // keep first occurrence\n        else\n            numbers[i] =\
    \ 0;\n    }\n    return numbers;\n}\n/*\n From an array of objects, remove all\
    \ elements that occur more than once.\n    Keep order of elements left the same\
    \ as in the input.\n    >>> remove_duplicates([new A(), new A(), new A(), new\
    \ B(), new B(), new B()])\n    [new A(), new B()]\n    \n*/\nA[] remove_duplicates(A[]\
    \ objects) \n{\n    if (objects == null) throw new ArgumentNullException(\"objects\"\
    , \"objects is null\");\n    int size = objects.length;\n    if (\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdmkhu2wb.d(15): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpdmkhu2wb.d(15): Error: found `}` when expecting `;` following statement

    /tmp/tmpdmkhu2wb.d(15): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdmkhu2wb.d(51): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpdmkhu2wb.d(51): Error: found `}` when expecting `;` following statement

    /tmp/tmpdmkhu2wb.d(51): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpdmkhu2wb.d(87): Error: expression expected, not `unittest`

    /tmp/tmpdmkhu2wb.d(88): Error: found `{` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdmkhu2wb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long temp=0;\n    long results[];\n    int count=0;\n    int i;\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uwnuzlh.d(13): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] results`

    /tmp/tmp6uwnuzlh.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uwnuzlh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i = 0;\n    int j = 0;\n    int n = numbers.length - 1;\n    long[] newArray\
    \ = new long[n];\nunittest\n{\n    alias candidate = remove_duplicates;\n\n  \
    \  assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5_nc3zs.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5_nc3zs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long result[] = numbers;\n    int[] seen = new int[32];\n    for( int i=1;\
    \ i<numbers.length; i++ )\n    {\n        if( seen[numbers[i]] != i )\n      \
    \      result[i] = numbers[i];\n        seen[numbers[i]] = i;\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe code is good, but it doesn't\
    \ remove the duplicated numbers.\n<|/ c |>\n<| a tags=language-agnostic,algorithm,arrays\
    \ |>\nYou can do this by creating an array of sets of numbers. In the example\
    \ below, I will use a map to store the numbers, so that I can easily check if\
    \ a number has already been seen:\n<code>\nlet input = [3, 7, 9, 7, 9, 10, 5,\
    \ 6, 6, 6, 7, 6, 7, 10, 7];\nlet sets: Map[int, Set[int]] = Map();\nfor num in\
    \ input {\n    // add num to the set for that key\n    if !sets.contains(num)\
    \ {\n        sets[num] = Set(num);\n    } else {\n        let set = sets[num];\n\
    \        // if num has already been seen, remove the number\n        // from the\
    \ set so it is only seen once\n        if set.contains(num) {\n            set.remove(num);\n\
    \        } else {\n            // otherwise, add the number to the set so that\
    \ we see\n            // it a second time\n            set.add(num);\n       \
    \ }\n    }\n}\n// set contains all unique numbers now\nfor num in sets.keySet()\
    \ {\n    // get the set of numbers corresponding to num\n    let set = sets[num];\n\
    \    // print the numbers in the set\n    println(set);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\
    import java.util.List;\nimport java.util.HashSet;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq067ey8y.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpq067ey8y.d(22): Error: declaration expected, not `<`

    /tmp/tmpq067ey8y.d(25): Error: unterminated character constant

    /tmp/tmpq067ey8y.d(31): Error: semicolon expected, not `:`

    /tmp/tmpq067ey8y.d(31): Error: declaration expected, not `:`

    /tmp/tmpq067ey8y.d(32): Error: declaration expected, not `for`

    /tmp/tmpq067ey8y.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq067ey8y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] res = new long[numbers.length];\n    long last;\n    for (int i = 0;\
    \ i < numbers.length; i++) {\n        last = res[i];\n        for (int j = i +\
    \ 1; j < numbers.length; j++) {\n            if (numbers[i] != numbers[j] && numbers[i]\
    \ > last)\n                res[++i] = numbers[j];\n        }\n    }\n    return\
    \ res;\n}\n</code>\nThis assumes that your array is sorted and non-decreasing.\
    \ You can use this with remove_duplicates(numbers, 0, numbers.length - 1) to remove\
    \ all duplicates from the array, starting at the first duplicate and up to the\
    \ last duplicate (starting at index 1, to remove the duplicate at index 0).\n\
    <|/ a |>\n<| a tags=java |>\nUsing streams:\n<code>\npublic static <T> Set<T>\
    \ remove(Set<T> set, Comparator<T> c) {\n    return set.stream()\n        .distinct()\n\
    \        .sorted(c)\n        .collect(Collectors.toCollection(LinkedHashSet::new));\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis should be the accepted answer, as\
    \ it does not require external libraries. Although I would have used a `Set` instead\
    \ of the `LinkedHashSet` to preserve the original order of `set` elements.\n<|/\
    \ c |>\n<| c |>\nThis is great! For people wanting to use generics and lambda\
    \ expressions, add `<T extends Comparable<T>>` to the generic type parameters,\
    \ and use `sorted(Comparator.<T>comparingInt(T o) -> o.compareTo(o))` instead.\n\
    <|/ c |>\n<| a tags=java dscore=4 |>\nHere is another way to do it in Java 8 and\
    \ above:\n<code>\npublic static <T> Set<T> remove(Set<T> set, Comparator<T> c)\
    \ {\n    Set<T> set2 = new HashSet<>();\n    for (T t : set) {\n        if (set2.contains(t))\
    \ {\n            set2.remove(t);\n        } else {\n            set2.add(t);\n\
    \        }\n    }\n    return set2;\n}\n</code>\n<|/ a |>\n<| c |>\nThis won't\
    \ work properly if any element has duplicates. Try removing from set `[1,1,2,3,3]`\
    \ will return `[2]` instead of `[1, 3]`.\n<|/ c |>\n<| a |>\nYou can use HashSet\
    \ to remove duplicated elements.\n<code>\n    Set<Integer> set = new HashSet<>();\n\
    \    set.addAll(Arrays.asList(new Integer[]{1,2,2,2}));\n    System.out.println(set);\
    \ // [2,2]\n</code>\n<|/ a dscore=4 tags=java |>\n<| c |>\nA `Set` is not a collection\
    \ though, which is what the OP asked for\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpotexp33i.d(23): Error: declaration expected, not `<`

    /tmp/tmpotexp33i.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpotexp33i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n        result[i] = numbers[i];\n    \n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        int cnt = 0;\n        for (int j = 0; j < numbers.length;\
    \ j++)\n            if (result[j] == numbers[i])\n                cnt++;\n   \
    \     \n        if (cnt > 1)\n        {\n            for(int j = 0; j < numbers.length;\
    \ j++)\n                numbers[j] = numbers[j] + cnt;\n        }\n    }\n   \
    \ \n    return numbers;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmo0vm2fy.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42849d]

    ??:? void tmpmo0vm2fy.__unittest_L39_C1() [0x428171]

    ??:? void tmpmo0vm2fy.__modtest() [0x428220]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c557]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3ea]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430675]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b24]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430601]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3c1]

    ??:? runModuleUnitTests [0x42c32d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428960]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    Arrays.sort(numbers);\n    long\
    \ unique = numbers[0];\n    \n    for (int i = 1; i < numbers.length; i++)\n \
    \   {\n        if (numbers[i] != unique)\n        {\n            unique = numbers[i];\n\
    \        }\n        else\n        {\n            i++;\n        }\n    }\n    \n\
    \    for (int i = 0; i < numbers.length; i++)\n    {\n        if (numbers[i] !=\
    \ unique)\n        {\n            result[i - numbers.length + 1] = numbers[i];\n\
    \        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a tags=c#,unity3d\
    \ |>\n<| a |>\nYou can use the linq for that.\n<code>\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmfu9t2i.d(38): Error: declaration expected, not `<`

    /tmp/tmphmfu9t2i.d(47): Error: declaration expected, not `assert`

    /tmp/tmphmfu9t2i.d(48): Error: declaration expected, not `assert`

    /tmp/tmphmfu9t2i.d(49): Error: declaration expected, not `assert`

    /tmp/tmphmfu9t2i.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmfu9t2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        result[numbers[i]] = numbers[i];\n    for(int i = 0; i < numbers.length;\
    \ ++i)\n        if(result[i] != numbers[i]) \n            result[i] = numbers[i];\n\
    \    return result;\n}\n</code>\n<|/ a tags=arrays,sorting,c# |>\n<| a tags=arrays,sorting,c#\
    \ |>\n<code>\nvar a = new [] { 1, 2, 3, 4, 1, 2, 5, 6 }; // 1\nvar result = a.OrderByDescending(x\
    \ => x).Distinct().ToArray();  // 2\n</code>\n<|/ a dscore=4 |>\n<| c |>\nNice!\
    \ Do you have a link that explains the different ways of using LINQ? (I searched\
    \ but couldn't find anything)\n<|/ c |>\n<| c |>\nLINQ uses deferred execution.\
    \ Everything is evaluated and put in the IEnumerable class (Lists, Arrays, etc)\
    \ and everything is done at the point of execution. LINQ is like writing for loops\
    \ with variables. There are several methods (OrderBy, GroupBy, Where) that are\
    \ used to transform data based on a key and a value (sorting, grouping, filtering).\
    \ LINQ basically just uses those methods and applies them to the IEnumerable (aka\
    \ the array). The methods return IEnumerable so you can chain them together (Where(...).OrderByDescending(...).Distinct()).\
    \ See more here: http://msdn.microsoft.com/en-us/library/bb397926.aspx\n<|/ c\
    \ |>\n<| c |>\nThanks a lot. Very helpful.\n<|/ c |>\n<| c |>\n: Thanks for posting\
    \ the link.  That's helpful.\n<|/ c |>\n<| a tags=arrays,sorting,c# |>\n<code>\n\
    public static class ArrayHelper\n{\n  public static int[] Sort(this int[] array)\n\
    \  {\n     Array.Sort(array);\n     return array;\n  }\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn7c9yn9v.d(20): Error: declaration expected, not `<`

    /tmp/tmpn7c9yn9v.d(26): Error: declaration expected, not `<`

    /tmp/tmpn7c9yn9v.d(29): Error: unterminated character constant

    /tmp/tmpn7c9yn9v.d(38): Error: unterminated character constant

    /tmp/tmpn7c9yn9v.d(47): Error: declaration expected, not `return`

    /tmp/tmpn7c9yn9v.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn7c9yn9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if (numbers == null || numbers.length == 0)\n        return numbers;\n    \n\
    \    long uniques[numbers.length];\n    int index = 0;\n    \n    for (long num\
    \ : numbers) {\n        // This element isn't in the unique array\n        if\
    \ (index < uniques.length && num == uniques[index]) {\n            continue;\n\
    \        }\n        \n        uniques[index++] = num;\n    }\n    \n    long[]\
    \ res = new long[uniques.length];\n    \n    for (int i = 0; i < uniques.length;\
    \ ++i)\n        res[i] = uniques[i];\n    \n    return res;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptomni7m2.d(15): Deprecation: instead of C-style syntax, use D-style
    syntax `long[numbers.length] uniques`

    /tmp/tmptomni7m2.d(18): Error: semicolon expected, not `:`

    /tmp/tmptomni7m2.d(18): Error: expression expected, not `:`

    /tmp/tmptomni7m2.d(18): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptomni7m2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = numbers.length;\n  int i = 0;\n  long[] a = new long[n];\n  while (i < n)\
    \ \n  {\n    if (!numbers[i]) \n    {\n      a[i] = numbers[i]; \n      i++; \n\
    \    } \n    else\n    {\n      if (numbers[i] != a[i])\n      {\n        a[++i]\
    \ = numbers[i];\n      }\n    }\n  }\n  return a;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf4eetorv.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf4eetorv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] uniqueValues = new long[numbers.length];\n    int j = 0;\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        if (!numbers[j].isMember(numbers[i]))\n\
    \        {\n            uniqueValues[j] = numbers[i];\n            j++;\n    \
    \    }\n    }\n    uniqueValues = uniqueValues.slice(0, j);\n    return uniqueValues;\n\
    }\n</code>\n<|/ a tags=java,arraylist |>\n<| a |>\nA variation of's answer that\
    \ uses Java 8 streams:\n<code>\nArrays.stream(numbers).distinct().toArray();\n\
    </code>\n<|/ a tags=java,arraylist dscore=1 |>\n<| c |>\nThat `toArray` call can\
    \ be replaced by `unique()`\n<|/ c |>\n<| a |>\nJust another solution, using Arrays.stream().distinct():\n\
    <code>\nimport java.util.Arrays;\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31fhhoel.d(25): Error: declaration expected, not `<`

    /tmp/tmp31fhhoel.d(28): Error: unterminated character constant

    /tmp/tmp31fhhoel.d(31): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31fhhoel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    int i;\n\tint j;\n\tlong[] newNumbers = new long[numbers.length];\n\t\n\tfor(i\
    \ = 0;i < newNumbers.length; ++i)\n\t{\n\t\tlong value = numbers[i];\n\t\tfor(j\
    \ = 0;j < i; ++j)\n\t\t{\n\t\t\tlong compare = numbers[j];\n\t\t\tif(value ==\
    \ compare)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tlong next = newNumbers[j];\n\t\t\t\
    if(compare > value)\n\t\t\t\tnewNumbers[j] = value;\n\t\t\telse\n\t\t\t\tnewNumbers[j]\
    \ = compare;\n\t\t}\n\t}\n\t\n\treturn newNumbers;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn3f438a1.d(40): unittest failure

    ----------------

    ??:? _d_unittestp [0x428465]

    ??:? void tmpn3f438a1.__unittest_L35_C1() [0x428089]

    ??:? void tmpn3f438a1.__modtest() [0x4281e8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c51f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3b2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43063d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430aec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305c9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b389]

    ??:? runModuleUnitTests [0x42c2f5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428928]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int[,]\
    \ map = new int[numbers.length, numbers.Length];\n  long curr = 1;\n  for (int\
    \ i = 0; i < map.Length; i++)\n    map[i, 0] = numbers[i];\n  for (int i = numbers.length\
    \ - 1; i >= 0; i--)\n    if (map[i, 0] != curr)\n      numbers[i] = map[i, 0];\n\
    \    else\n      curr++;\n  return numbers;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ Jake. I'm going to test it later but I'm pretty sure it will work so I'll mark\
    \ it as the answer.\n<|/ c |>\n<| c |>\nJake, that algorithm is O(n^2) complexity\
    \ and will take about twice as long on a 32-bit machine\n<|/ c |>\n<| a tags=performance,c#,algorithm,duplicates\
    \ |>\nThis code will work with very large collections and is very fast.\n<code>\n\
    var list = new List<int> { 1, 2, 3, 2, 3, 5, 6, 7, 3, 9, 1, 2 };\nvar result =\
    \ list.GroupBy(x => x)\n                .Select(g => g.Count() == 1)\n       \
    \         .Where(x => x)\n                .Select(x => g.Key);\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nIt would probably be better to use .Count() == 1 instead\
    \ of .Any(x => x == 1) though.\n<|/ c |>\n<| c |>\n- you're right about that.\
    \  It actually makes the code more readable and simpler to read.  Thanks for the\
    \ suggestion and I updated the post.\n<|/ c |>\n<| c |>\n- I took your suggestion\
    \ to fix the code above.  I also added code to show how you can get the original\
    \ collection back if you need it.\n<|/ c |>\n<| c |>\nHow about this: var result\
    \ = list.GroupBy(x => x)\n                .Where(g => g.Count() == 1)\n      \
    \          .Select(g => g.Key);\n<|/ c |>\n<| c |>\n- I like this better.  I updated\
    \ the post.  Thanks for your suggestion.\n<|/ c |>\n<| a |>\nThis is an improved\
    \ version of Jason's answer.\nThis version works even on very large collections\
    \ (not just the one I tested with - though I highly doubt it will work for large\
    \ collections anyway).\nIt also does a pretty good job of avoiding boxing and\
    \ unboxing.\nIt also uses IEqualityComparer<T> instead of EqualityComparer<T>.\n\
    <code>\nstatic IEnumerable<T> RemoveDupes<T>(this IEnumer\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4s11fwll.d(12): Error: expression expected, not `,`

    /tmp/tmp4s11fwll.d(12): Error: found `,` when expecting `]`

    /tmp/tmp4s11fwll.d(12): Error: semicolon expected, not `numbers`

    /tmp/tmp4s11fwll.d(12): Error: found `]` when expecting `;` following statement

    /tmp/tmp4s11fwll.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4s11fwll.d(23): Error: declaration expected, not `<`

    /tmp/tmp4s11fwll.d(26): Error: unterminated character constant

    /tmp/tmp4s11fwll.d(26): Error: unterminated character constant

    /tmp/tmp4s11fwll.d(26): Error: unterminated character constant

    /tmp/tmp4s11fwll.d(39): Error: declaration expected, not `<`

    /tmp/tmp4s11fwll.d(45): Error: unterminated character constant

    /tmp/tmp4s11fwll.d(54): Error: declaration expected, not `<`

    /tmp/tmp4s11fwll.d(59): Error: unterminated character constant

    /tmp/tmp4s11fwll.d(69): Error: declaration expected, not `assert`

    /tmp/tmp4s11fwll.d(70): Error: declaration expected, not `assert`

    /tmp/tmp4s11fwll.d(71): Error: declaration expecte'
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] answer = numbers;\n    for(int i = 0; i < numbers.length - 1; i++)\n\
    \    {\n        if(numbers[i] != numbers[i + 1])\n        {\n            answer\
    \ = copy(numbers, i, i - 1);\n        }\n    }\n    return answer;\n}\n/*\n An\
    \ implementation of the Fibonacci sequence \n    i.e. 0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, ...\n    \n >>> fibs(10)\n    [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 28, 56, 88, 144, ...]\n \n*/\nlong[] fibs(int num)\n{\n    long[] fibs_arr =\
    \ new long[num + 1];\n    fibs_arr[0] = fibs_arr[1] = 0;\n    for(int i = 2; i\
    \ <= num; i++)\n        fibs_arr[i] = fibs_arr[i-1] + fibs_arr[i-2];\n    return\
    \ fibs_arr;\n}\n/*\n A generalized version of fibonacci that can be used for any\
    \ length\n    i.e. 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n    \n >>>\
    \ fib_gen(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 28, 56, 88, 144, ...]\n \n*/\nlong[]\
    \ fib_gen(int num)\n{\n    long[] fib_gen_arr = new long[num];\n    fibs_gen(num,\
    \ fib_gen_arr, 0, 1);\n    return fib_gen_arr;\n}\n/*\n A generalized version\
    \ of fibonacci that can be used for any length\n    i.e. 0, 1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, ...\n    \n >>> fib_gen(10)\n    [1, 1, 2, 3, 5, 8,\
    \ 13, 21, 28, 56, 88, 144, ...]\n \n*/\nlong[] fibs_gen(int num, long[] fib_gen_arr,\
    \ long a, long b)\n{\n    long last = a;\n    for(int i = 2; i <= num; i++)\n\
    \    {\n        long temp = a;\n        a = b;\n        b = temp + b;\n      \
    \  fib_gen_arr[i] = a;\n    }\n    return fib_gen_arr;\n}\n/*\n A generalized\
    \ version of fibonacci that can be used for any length\n    i.e. 0, 1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, ...\n    \n >>> fib_gen(10)\n    [1, 1, 2, 3,\
    \ 5, 8, 13, 21, 28, 56, 88, 144, ...]\n \n*/\nlong[] fibs_gen(int num, long[]\
    \ fib_gen_arr, long a, long b)\n{\n    long last = a;\n    for(int i = 2; i <=\
    \ num; i++)\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmperez9eev.d(84): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmperez9eev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var newNumbers = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        if (numbers[i] == null) \n        {\n            newNumbers[i]\
    \ = null;\n        }\n        else if (newNumbers[i] == null) \n        {\n  \
    \          newNumbers[i] = numbers[i];\n        }\n        else \n        {\n\
    \            var counter = 0;\n            for (int j = i + 1; j < newNumbers.length;\
    \ j++) \n            {\n                if (numbers[j] == newNumbers[i]) \n  \
    \              {\n                    counter++;\n                }\n        \
    \    }\n            if (counter > 1) \n            {\n                newNumbers[i]\
    \ = numbers[i];\n            }\n        }\n    }\n    return newNumbers;\n}\n\
    </code>\n<|/ a tags=duplicates,arrays,c# |>\n<| a tags=duplicates,arrays,c# dscore=1\
    \ |>\nYou can do this with LINQ's GroupBy function. To get distinct items, you\
    \ need to group them by some criteria, and then select their items:\n<code>\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgwikbv32.d(41): Error: declaration expected, not `<`

    /tmp/tmpgwikbv32.d(44): Error: unterminated character constant

    /tmp/tmpgwikbv32.d(50): Error: declaration expected, not `assert`

    /tmp/tmpgwikbv32.d(51): Error: declaration expected, not `assert`

    /tmp/tmpgwikbv32.d(52): Error: declaration expected, not `assert`

    /tmp/tmpgwikbv32.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgwikbv32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) \n    {\n        long num = 0;\n        for (int j = 0; j < numbers.length;\
    \ j++)\n        {\n            if (i == j)\n                continue;\n      \
    \      num ^= numbers[j];\n        }\n        result[i] = num;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyewl7zk1.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283c5]

    ??:? void tmpyewl7zk1.__unittest_L26_C1() [0x427fe9]

    ??:? void tmpyewl7zk1.__modtest() [0x428148]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c47f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b312]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43059d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a4c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430529]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2e9]

    ??:? runModuleUnitTests [0x42c255]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428888]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int index = 0;\n    for(int\
    \ i=0; i < numbers.length; i++)\n    {\n        bool isInResult = false;\n   \
    \     for(int j=0; j < i; j++)\n        {\n            if(numbers[i] == numbers[j])\n\
    \            {\n                isInResult = true;\n                break;\n \
    \           }\n        }\n        if(!isInResult)\n        {\n            result[index++]\
    \ = numbers[i];\n        }\n    }\n    return result;\n}\n/*\n From an array,\
    \ remove all elements that occur more than once and keep the order of elements\
    \ left the same.\n    Remove duplicate elements only if it is next to each other\
    \ (no gaps or overlaps).\n    >>> remove_duplicates([1L, 2L, 3L, 3L, 4L])\n  \
    \  [1L, 2L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\
    \    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int\
    \ i=0; i < numbers.length; i++)\n    {\n        bool isInResult = false;\n   \
    \     for(int j=0; j < i; j++)\n        {\n            if(numbers[i] == numbers[j])\n\
    \            {\n                isInResult = true;\n                break;\n \
    \           }\n        }\n        if(!isInResult)\n        {\n            result[index++]\
    \ = numbers[i];\n        }\n    }\n    return result;\n}\n/*\n From an array,\
    \ remove all elements that occur more than once and keep the order of elements\
    \ left the same.\n    Remove duplicate elements only if it is next to each other\
    \ (no gaps or overlaps).\n    >>> remove_duplicates([1L, 2L, 3L, 3L, 4L])\n  \
    \  [1L, 2L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\
    \    long[] result = new long[numbers.length];\n    int index = 0;\n    for(int\
    \ i=0; i < numbers.length; i++)\n    {\n        bool isInResult = false;\n   \
    \     for(int j=0; j < i; j++)\n        {\n            if(numbers[i] == numbers[j])\n\
    \            {\n                isInResult = true;\n                break;\n \
    \           }\n        }\n        if(!isInResult)\n        {\n            result[index++]\
    \ = numbers[i];\n        }\n    }\n    return result;\n}\n/*\n From an array,\
    \ remove all elements that occur more than once and keep the order of elements\
    \ left the same.\n    Remove duplicate elements only if it is next to each other\
    \ (no gaps or overlaps).\n    >>> remove_duplicates([1L, 2L, 3L, 3L, 4L])\n  \
    \  [1L, 2L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo29fiqpq.d(100): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo29fiqpq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = numbers.length;\n  long[] result = new long[n];\n  for (int i = 0; i < n;\
    \ i++) {\n    for (int j = 0; j < i; j++) {\n      if (numbers[i] == numbers[j])\
    \ {\n        numbers.splice(j, 1);\n      }\n    }\n    result[i] = numbers[i];\n\
    \  }\n  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp049iraxq.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmp049iraxq.d(17): Error: no property `splice` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp049iraxq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int count = 1;\n    for (int\
    \ i=0; i<numbers.length; i++)\n    {\n        int number = numbers[i];\n     \
    \   for (int j=i+1; j<numbers.length; j++)\n        {\n            if (numbers[j]\
    \ == number)\n            {\n                count++;\n            }\n       \
    \ }\n        if (count > 1)\n        {\n            result[i] = number;\n    \
    \        count = 1;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,java\
    \ dscore=0 |>\n<| a tags=arrays,java |>\nI have developed my own algorithm to\
    \ solve this problem. Hopefully it helps someone. \n<code>\npublic static void\
    \ main(String args[]) {\n    long arr[] = {1, 2, 1, 2, 1, 2};\n    arr = removeDuplicates(arr);\n\
    \    System.out.println(Arrays.toString(arr));\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2trqajod.d(32): Error: declaration expected, not `<`

    /tmp/tmp2trqajod.d(39): Error: no identifier for declarator `arr`

    /tmp/tmp2trqajod.d(39): Error: declaration expected, not `=`

    /tmp/tmp2trqajod.d(40): Error: identifier expected following `.` instead of `out`

    /tmp/tmp2trqajod.d(40): Error: no identifier for declarator `System`

    /tmp/tmp2trqajod.d(40): Error: declaration expected, not `out`

    /tmp/tmp2trqajod.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2trqajod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] newArray = new long[numbers.length];\n    int j = 0;\n    for(int i\
    \ = 0; i < numbers.length; i++) \n    {\n        if(numbers[j] != numbers[i])\n\
    \        {\n            newArray[j] = numbers[i];\n            j = j + 1;\n  \
    \      }\n    }\n    return newArray;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpub4imrsu.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpub4imrsu.__unittest_L24_C1() [0x428011]

    ??:? void tmpub4imrsu.__modtest() [0x428170]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430551]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int count = 0;\n    List<long> result = new List<long>(numbers.Length);\n \
    \   foreach(long element in numbers)\n    {\n        if(count++ < numbers.Length)\n\
    \        {\n            result.add(element);\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9w0om65a.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp9w0om65a.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp9w0om65a.d(13): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp9w0om65a.d(13): Error: found `numbers` when expecting `;` following statement

    /tmp/tmp9w0om65a.d(13): Error: found `)` when expecting `;` following statement

    /tmp/tmp9w0om65a.d(13): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9w0om65a.d(14): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9w0om65a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] copy = new long[numbers.length];\n    int i, j;\n    for(i =0; i < numbers.length;\
    \ i++) \n    {\n        copy[i] = numbers[i];\n        for(j = i; j < numbers.length;\
    \ j++) \n        {\n            if(numbers[j] == copy[i]) \n            {\n  \
    \              numbers[j] = numbers[j+1];\n                numbers[j+1] = copy[i];\n\
    \            }\n        }\n    }\n    return copy;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpjfy34s2y.d(21): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42856e]

    ??:? long[] tmpjfy34s2y.remove_duplicates(long[]) [0x427f55]

    ??:? void tmpjfy34s2y.__unittest_L28_C1() [0x428076]

    ??:? void tmpjfy34s2y.__modtest() [0x42823c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c577]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b40a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430695]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b44]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430621]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3e1]

    ??:? runModuleUnitTests [0x42c34d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  bool seen[numbers.size()]; \n    long result[] = new long[numbers.size()];\
    \ \n    for(int i = 0; i < numbers.size(); i++) { \n        if(!seen[i]) {\n \
    \           seen[i] = true;\n            result[i] = numbers[i]; \n        }\n\
    \    } \n    return result; \n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2e8qxbf.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `bool[numbers.size()] seen`

    /tmp/tmpd2e8qxbf.d(13): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpd2e8qxbf.d(12): Error: no property `size` for type `long[]`

    /tmp/tmpd2e8qxbf.d(13): Error: no property `size` for type `long[]`

    /tmp/tmpd2e8qxbf.d(14): Error: no property `size` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2e8qxbf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    Stack<long> numbersWithoutDuplicates\
    \ = new Stack<long>();\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5_jl6xw1.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp5_jl6xw1.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp5_jl6xw1.d(13): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp5_jl6xw1.d(13): Error: found `)` when expecting `;` following statement

    /tmp/tmp5_jl6xw1.d(13): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp5_jl6xw1.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5_jl6xw1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    if (numbers.length == 0)\n\t\treturn numbers;\n\tif (numbers.length == 1)\n\t\
    {\n\t\treturn numbers.clone();\n\t}\n\tlong lastNumber;\n\tlong[] newNumbers =\
    \ new long[numbers.length];\n\tlong temp;\n\tfor (int i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tlast = numbers[i];\n\t\tfor (int j = i; j < numbers.length; j++)\n\
    \t\t{\n\t\t\tif (numbers[j] != last)\n\t\t\t{\n\t\t\t\ttemp = lastNumber;\n\t\t\
    \t\tlastNumber = last;\n\t\t\t\tlast = numbers[j];\n\t\t\t\tnumbers[j] = temp;\n\
    \t\t\t}\n\t\t}\n\t\tif (newNumbers[i] == lastNumber)\n\t\t{\n\t\t\tnewNumbers[i]\
    \ = lastNumber;\n\t\t}\n\t}\n\treturn newNumbers;\n}\n//**********************************************************************************************************\n\
    /*\n From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd2o625x.d(16): Error: no property `clone` for type `long[]`

    /tmp/tmpbd2o625x.d(23): Error: undefined identifier `last`

    /tmp/tmpbd2o625x.d(26): Error: undefined identifier `last`

    /tmp/tmpbd2o625x.d(29): Error: undefined identifier `last`

    /tmp/tmpbd2o625x.d(30): Error: undefined identifier `last`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd2o625x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n = numbers.length;\n    int count = 1;\n    long[] result = new long[n];\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (numbers[i] != numbers[j]) {\n                if (count < 2)\n\
    \                    result[i] = numbers[i];\n                else {\n       \
    \             count--;\n                    result[i] = numbers[j];\n        \
    \        }\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=java |>\n<| a dscore=0 |>\nMy solution just uses a nested loop:\n<code>\n\
    public static void main(String[] args) {\n    int[] arr = {1, 2, 3, 4, 2, 4};\n\
    \    int arrLen = arr.length;\n    int[] results = new int[arrLen - 1];\n    int\
    \ resultCount = 0;\n    for (int i = 1; i < arrLen; i++) {\n        int currentResult\
    \ = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (currentResult\
    \ == arr[j]) {\n                results[resultCount] = currentResult;\n      \
    \          resultCount++;\n                break;\n            }\n        }\n\
    \    }\n    for (int i = resultCount; i < arrLen; i++) {\n        results[resultCount\
    \ - 1] = arr[i];\n    }\n    System.out.println(Arrays.toString(results));\n}\n\
    </code>\n<|/ a tags=java |>\n<| a dscore=0 |>\nUsing Java Stream API\n<code>\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6oo3r1l9.d(29): Error: declaration expected, not `<`

    /tmp/tmp6oo3r1l9.d(39): Error: declaration expected, not `for`

    /tmp/tmp6oo3r1l9.d(39): Error: no identifier for declarator `i`

    /tmp/tmp6oo3r1l9.d(39): Error: declaration expected, not `<`

    /tmp/tmp6oo3r1l9.d(39): Error: no identifier for declarator `i`

    /tmp/tmp6oo3r1l9.d(39): Error: declaration expected, not `++`

    /tmp/tmp6oo3r1l9.d(41): Error: declaration expected, not `for`

    /tmp/tmp6oo3r1l9.d(41): Error: no identifier for declarator `j`

    /tmp/tmp6oo3r1l9.d(41): Error: declaration expected, not `<`

    /tmp/tmp6oo3r1l9.d(41): Error: no identifier for declarator `j`

    /tmp/tmp6oo3r1l9.d(41): Error: declaration expected, not `++`

    /tmp/tmp6oo3r1l9.d(44): Error: no identifier for declarator `resultCount`

    /tmp/tmp6oo3r1l9.d(44): Error: declaration expected, not `++`

    /tmp/tmp6oo3r1l9.d(45): Error: declaration expected, not `break`

    /tmp/tmp6oo3r1l9.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6oo3r1l9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = numbers.length;\n  if (n == 0) {\n    return numbers;\n  }\n  long[] results\
    \ = new long[n];\n  for (int i = 0; i < n; i++) {\n    long v = numbers[i];\n\
    \    if (results.find(v) != results.end()) {\n      continue;\n    }\n    results[i]\
    \ = v;\n  }\n  return results;\n}\n/*\n From an array of integers, remove all\
    \ elements that occur more than once.\n    Keep order of elements left the same\
    \ as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L,\
    \ 3L, 4L]\n    \n*/\nlong[] remove_duplicates(TArray<long> numbers) \n{\n  int\
    \ n = numbers.size;\n  if (n == 0) {\n    return numbers.data;\n  }\n  long[]\
    \ results = new long[n];\n  for (int i = 0; i < n; i++) {\n    long v = numbers[i];\n\
    \    if (results.find(v) != results.end()) {\n      continue;\n    }\n    results[i]\
    \ = v;\n  }\n  return results;\n}\n/*\n From an array of strings, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([\"a\", \"b\", \"c\", \"a\", \"b\"])\n   \
    \ [\"a\", \"b\", \"c\"]\n    \n*/\nstring[] remove_duplicates(string[] strs) \n\
    {\n  int n = strs.length;\n  if (n == 0) {\n    return strs;\n  }\n  string[]\
    \ results = new string[n];\n  for (int i = 0; i < n; i++) {\n    string v = strs[i];\n\
    \    if (results.find(v) != results.end()) {\n      continue;\n    }\n    results[i]\
    \ = v;\n  }\n  return results;\n}\n/*\n From an array of strings, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([\"a\", \"b\", \"c\", \"a\", \"b\"])\n   \
    \ [\"a\", \"b\", \"c\"]\n    \n*/\nTArray<string> remove_duplicates(TArray<string>\
    \ strs) \n{\n  int n = strs.size;\n  if (n == 0) {\n    return strs.data;\n  }\n\
    \  string[] results = new string[n];\n  for (int i = 0; i < n; i++) {\n    string\
    \ v = strs[i];\n    if (results.find(v) != results.end()) {\n      continue;\n\
    \    }\n    results[i] = v;\n  }\n  return results;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp20unt8p.d(33): Error: found `<` when expecting `)`

    /tmp/tmpp20unt8p.d(33): Error: semicolon expected following function declaration

    /tmp/tmpp20unt8p.d(33): Error: no identifier for declarator `long`

    /tmp/tmpp20unt8p.d(33): Error: declaration expected, not `>`

    /tmp/tmpp20unt8p.d(36): Error: declaration expected, not `if`

    /tmp/tmpp20unt8p.d(38): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp20unt8p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  // your code here\n    long result = 0;\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        int count = 0;\n        for(int j = 0; j < numbers.length;\
    \ j++)\n        {\n            if(numbers[i] == numbers[j])\n            {\n \
    \               count++;\n            }\n        }\n        if(count > 1)\n  \
    \      {\n            result++;\n        }\n    }\n    int[] newArray = new int[result];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        int count = 0;\n\
    \        for(int j = 0; j < numbers.length; j++)\n        {\n            if(numbers[i]\
    \ == numbers[j])\n            {\n                count++;\n            }\n   \
    \     }\n        if(count > 1)\n        {\n            newArray[i] = numbers[i];\n\
    \        }\n    }\n    return newArray;\n}\n</code>\n<|/ a dscore=0 tags=java,arrays,sorting,algorithm\
    \ |>\n<| c |>\nThis would be a better answer if you explained how the code you\
    \ provided answers the question.\n<|/ c |>\n<| a dscore=0 |>\nThis can be solved\
    \ in O(n) time, where n is the number of elements in the input array:\n<code>\n\
    private static int[] removeDuplicates(int[] arr) {\n    int[] copy = new int[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < copy.length; j++) {\n            if (arr[i] == copy[j]) {\n\
    \                count++;\n                break;\n            }\n        }\n\
    \        if (count > 1) {\n            copy[i] = arr[i];\n        }\n    }\n \
    \   return copy;\n}\n</code>\n<|/ a tags=java,arrays,sorting,algorithm |>\n<|\
    \ a tags=java,arrays,sorting,algorithm |>\n<code>\npublic class Solution {\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9tckjol2.d(47): Error: declaration expected, not `<`

    /tmp/tmp9tckjol2.d(57): Error: declaration expected, not `for`

    /tmp/tmp9tckjol2.d(57): Error: no identifier for declarator `i`

    /tmp/tmp9tckjol2.d(57): Error: declaration expected, not `<`

    /tmp/tmp9tckjol2.d(57): Error: no identifier for declarator `i`

    /tmp/tmp9tckjol2.d(57): Error: declaration expected, not `++`

    /tmp/tmp9tckjol2.d(59): Error: declaration expected, not `for`

    /tmp/tmp9tckjol2.d(59): Error: no identifier for declarator `j`

    /tmp/tmp9tckjol2.d(59): Error: declaration expected, not `<`

    /tmp/tmp9tckjol2.d(59): Error: no identifier for declarator `j`

    /tmp/tmp9tckjol2.d(59): Error: declaration expected, not `++`

    /tmp/tmp9tckjol2.d(62): Error: declaration expected, not `break`

    /tmp/tmp9tckjol2.d(63): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9tckjol2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] duplicates = new long[numbers.length];\n\tlong index = 0;\n\tfor (int i\
    \ = 0; i < numbers.length; i++) {\n\t\tif (duplicates[i] == numbers[i]) {\n\t\t\
    \tcontinue;\n\t\t}\n\t\tduplicates[index++] = numbers[i];\n\t}\n\treturn duplicates;\n\
    }\n/**\n Combine the given list of elements into a single long integer. \n The\
    \ resulting integer is obtained by summing all the elements and \n removing duplicate\
    \ values. Note that order of the elements in the array \n is preserved if possible,\
    \ otherwise the elements are returned in their \n original order.\n \n @see remove_duplicates\n\
    */\nlong combine_list_elements(long[] numbers) \n{\n\treturn numbers[numbers.length\
    \ - 1];\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj0zwzse1.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x428495]

    ??:? void tmpj0zwzse1.__unittest_L35_C1() [0x428165]

    ??:? void tmpj0zwzse1.__modtest() [0x428214]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3e2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43066d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b1c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305f9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b9]

    ??:? runModuleUnitTests [0x42c325]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428958]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] nums_sorted = sort(numbers);\n    long[] unique = new long[numbers.length];\n\
    \    long last_num = nums_sorted[numbers.length-1];\n    \n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if (nums_sorted[i] == last_num)\n \
    \           unique[i] = nums_sorted[i];\n        else\n            unique[i] =\
    \ nums_sorted[i-1];\n    }\n    return unique;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 tags=arrays,data-structures,duplicates,sorting,algorithm |>\nHere's\
    \ my Java implementation:\n<code>\npublic static <T> void removeDuplicates(T[]\
    \ array) {\n    int lastIndex = array.length - 1;\n    for (int i = 0; i < lastIndex;\
    \ i++)\n        if (array[i] == array[lastIndex])\n            array[i] = null;\n\
    \            else if (array[i] != null)\n            array[i+1] = array[i];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nHow would you do that in Java?\n<|/ c |>\n<| a\
    \ |>\nI recently had to do something similar and I implemented it like this:\n\
    <code>\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpijfulunx.d(25): Error: declaration expected, not `<`

    /tmp/tmpijfulunx.d(28): Error: unterminated character constant

    /tmp/tmpijfulunx.d(32): Error: declaration expected, not `for`

    /tmp/tmpijfulunx.d(32): Error: no identifier for declarator `i`

    /tmp/tmpijfulunx.d(32): Error: declaration expected, not `<`

    /tmp/tmpijfulunx.d(32): Error: no identifier for declarator `i`

    /tmp/tmpijfulunx.d(32): Error: declaration expected, not `++`

    /tmp/tmpijfulunx.d(35): Error: declaration expected, not `else`

    /tmp/tmpijfulunx.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpijfulunx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long temp;\n    long[] duplicates_removed = new long[numbers.length];\n   \
    \ for(int i=0;i<numbers.length;i++) {\n        temp = numbers[i];\n        duplicates_removed[i]\
    \ = temp;\n    }\n    for(int i=0;i<numbers.length;i++) {\n        for(int j=i+1;j<numbers.length;j++)\
    \ {\n            if(numbers[i] == numbers[j]) {\n                duplicates_removed[i]\
    \ = duplicates_removed[j];\n            }\n        }\n    }\n    return duplicates_removed;\n\
    }\n</code>\n<|/ a tags=c++,arrays,algorithm,duplicates |>\n<| c |>\nThe question\
    \ was tagged with `algorithm`, not `performance`.\n<|/ c |>\n<| c |>\nThe question\
    \ is tagged C++ though.\n<|/ c |>\n<| a dscore=3 tags=c++,arrays,algorithm,duplicates\
    \ |>\nHere's a solution in python\n<code>\ndef removeDups(l):\n    seen = set()\n\
    \    for i in l:\n        if i not in seen:\n            yield i\n           \
    \ seen.add(i)\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcioj5e06.d(27): Error: declaration expected, not `<`

    /tmp/tmpcioj5e06.d(36): Error: unterminated character constant

    /tmp/tmpcioj5e06.d(48): Error: declaration expected, not `assert`

    /tmp/tmpcioj5e06.d(49): Error: declaration expected, not `assert`

    /tmp/tmpcioj5e06.d(50): Error: declaration expected, not `assert`

    /tmp/tmpcioj5e06.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcioj5e06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long last = numbers[0];\n    long removed = numbers[0];\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49ge13x6.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49ge13x6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int i;\n    \n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        long previous = result[i];\n \
    \       for (int j = i + 1; j < numbers.length; j++)\n        {\n            if\
    \ (numbers[i] == numbers[j])\n            {\n                previous++;\n   \
    \         }\n        }\n        result[i] = previous;\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI think you meant `if (numbers[i] == numbers[j])`\n\
    <|/ c |>\n<| a dscore=2 tags=duplicates,arrays,java |>\n<code>\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpff348yq9.d(29): Error: declaration expected, not `<`

    /tmp/tmpff348yq9.d(40): Error: declaration expected, not `assert`

    /tmp/tmpff348yq9.d(41): Error: declaration expected, not `assert`

    /tmp/tmpff348yq9.d(42): Error: declaration expected, not `assert`

    /tmp/tmpff348yq9.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpff348yq9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] rv = new long[numbers.length];\n    for(int i = 0; i < rv.length; i++)\
    \ rv[i] = numbers[i];\n    HashSet<long> seen = new HashSet<long>();\n    for(int\
    \ i = 0; i < rv.length; i++) \n    {\n        long current = rv[i];\n        if(seen.contains(current))\
    \ continue;\n        seen.add(current);\n        rv[i] = current;\n    }\n   \
    \ return rv;\n}\n</code>\n<|/ a tags=c# |>\n<| c |>\nI think it should be `numbers[i].ToString()`\
    \ because in some cases it will cause IndexOutOfRange Exception in `long current\
    \ = numbers[i];`.\n<|/ c |>\n<| c |>\n, that's exactly my thought.\n<|/ c |>\n\
    <| c |>\n, `numbers[i].ToString()` is correct in cases where `numbers` is a `string[]`.\
    \  Since OP mentions that `numbers` is a long array, this answer is correct.\n\
    <|/ c |>\n<| a dscore=3 tags=c# |>\nThe simplest answer would be:\n<code>\nvar\
    \ result = numbers.GroupBy(n => n).Where(g => g.Count() > 1).Select(g => g.Key);\n\
    </code>\n<|/ a |>\n<| a |>\nThis should do it...\n<code>\nvar numbers = new List<int>()\
    \ { 1, 2, 3, 2, 4 };\nvar result = numbers.GroupBy(n => n).Where(g => g.Count()\
    \ > 1).Select(g => g.Key);\n</code>\n<|/ a dscore=2 tags=c# |>\n<| a tags=c# |>\n\
    <code>\nvar numbers = new[] { 1, 2, 3, 2, 4 };\nvar result = numbers.GroupBy(n\
    \ => n).Where(g => g.Count() > 1).Select(g => g.Key);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nWhile this code snippet may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a tags=c# |>\n<code>\nvar numbers\
    \ = new int[] { 1, 2, 3, 2, 4 };\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp159acdw8.d(14): Error: found `>` when expecting `.` following long

    /tmp/tmp159acdw8.d(14): Error: found `>` when expecting `.` following long

    /tmp/tmp159acdw8.d(14): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp159acdw8.d(14): Error: found `)` when expecting `;` following statement

    /tmp/tmp159acdw8.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp159acdw8.d(24): Error: declaration expected, not `<`

    /tmp/tmp159acdw8.d(30): Error: unterminated character constant

    /tmp/tmp159acdw8.d(39): Error: declaration expected, not `<`

    /tmp/tmp159acdw8.d(46): Error: declaration expected, not `<`

    /tmp/tmp159acdw8.d(52): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp159acdw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int j = 0;\n    for (int i =\
    \ 0; i < numbers.length; i++)\n    {\n        for (int k = j + 1; k < result.length;\
    \ k++)\n        {\n            if (numbers[i] == result[k])\n            {\n \
    \               j++;\n                continue;\n            }\n            else\n\
    \            {\n                result[j] = numbers[i];\n                j++;\n\
    \            }\n            break;\n        }\n    }\n    return result.subarray(0,\
    \ j);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=java,sorting,algorithm |>\nJava\
    \ 8 way:\n<code>\nprivate static int[] removeDuplicates(int[] arr) {\n    Set<Integer>\
    \ set = new HashSet<>();\n    List<Integer> result = new ArrayList<>();\n    for(int\
    \ i : arr) {\n        if(set.contains(i)) {\n            continue;\n        }\n\
    \        set.add(i);\n        result.add(i);\n    }\n    return result.toArray(new\
    \ int[result.size()]);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis answer has\
    \ a better readability than mine. +1\n<|/ c |>\n<| a dscore=1 |>\nJava 8 way using\
    \ Streams\n<code>\nunittest\n{\n    alias candidate = remove_duplicates;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97zu9ndy.d(33): Error: declaration expected, not `<`

    /tmp/tmp97zu9ndy.d(40): Error: no identifier for declarator `List`

    /tmp/tmp97zu9ndy.d(40): Error: declaration expected, not `<`

    /tmp/tmp97zu9ndy.d(41): Error: declaration expected, not `for`

    /tmp/tmp97zu9ndy.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97zu9ndy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  for(long i : numbers)\n    result[result.length-i-1]\
    \ = i;\n  return result;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nulong[] remove_duplicates(ulong[] numbers) \n{\n  ulong[] result =\
    \ new ulong[numbers.length];\n  for(ulong i : numbers)\n    result[result.length-i-1]\
    \ = i;\n  return result;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplian06m3.d(13): Error: semicolon expected, not `:`

    /tmp/tmplian06m3.d(13): Error: expression expected, not `:`

    /tmp/tmplian06m3.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmplian06m3.d(27): Error: semicolon expected, not `:`

    /tmp/tmplian06m3.d(27): Error: expression expected, not `:`

    /tmp/tmplian06m3.d(27): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplian06m3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int N=numbers.length;\n    long[] res=new long[N];\n    \n    for (int i=0;\
    \ i < N; ++i) {\n        for (int j=i+1; j < N; ++j) {\n            if (numbers[i]\
    \ != numbers[j]) {\n                res[j]=numbers[j];\n                break;\n\
    \            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8h3dcxsm.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8h3dcxsm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    long last = result[0];\n   \
    \ for (int i = 0; i < numbers.length; i++) {\n        if (numbers[i] != last)\
    \ {\n            result[result.length-1] = numbers[i];\n            last = numbers[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 tags=arrays,c#,linq\
    \ |>\n<| a dscore=0 |>\nThe \"answer\" from is very good, but just for my own\
    \ information I wanted to share my solution. This is a bit more efficient than's\
    \ and I think it's easier to read as well:\n<code>\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvywr0yuw.d(22): Error: declaration expected, not `<`

    /tmp/tmpvywr0yuw.d(25): Error: unterminated character constant

    /tmp/tmpvywr0yuw.d(25): Error: unterminated character constant

    /tmp/tmpvywr0yuw.d(31): Error: declaration expected, not `assert`

    /tmp/tmpvywr0yuw.d(32): Error: declaration expected, not `assert`

    /tmp/tmpvywr0yuw.d(33): Error: declaration expected, not `assert`

    /tmp/tmpvywr0yuw.d(34): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvywr0yuw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long count = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n    \
    \    for (int j = i + 1; j < numbers.length; j++)\n        {\n            if (numbers[i]\
    \ == numbers[j])\n            {\n                count++;\n                numbers.splice(i,\
    \ 1);\n                i -= 1;\n            }\n        }\n    }\n    return numbers;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=2 |>\nThis is a C# solution for you:\n<code>\n\
    private int[] RemoveDuplicates(int[] source)\n{\n    return Enumerable.Range(0,\
    \ source.Length)\n        .Where(x => !source.Skip(x).Any())\n        .ToArray();\n\
    }\n</code>\n<|/ a tags=arrays,algorithm,c# |>\n<| c |>\nI like how you used the\
    \ fact that range returns an IEnumerable for this. +1\n<|/ c |>\n<| a tags=arrays,algorithm,c#\
    \ dscore=1 |>\nTry this one:\n<code>\nusing System;\nusing System.Collections.Generic;\n\
    using System.Linq;\nusing System.Text;\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1p1rl3sa.d(27): Error: declaration expected, not `<`

    /tmp/tmp1p1rl3sa.d(37): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p1rl3sa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var result = new long[numbers.length];\n    var seen = new long[numbers.length];\n\
    \    var j = 0;\n    for (var i = 0, n = numbers.length; i < n; i++)\n    {\n\
    \        if (seen[i]++)\n        {\n            result[j] = numbers[i];\n    \
    \        j++;\n        }\n    }\n    return result;\n}\n/*\n From an array of\
    \ integers, remove all elements that occur more than once.\n    Keep order of\
    \ elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L,\
    \ 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates_d(long[]\
    \ numbers) \n{\n    var result = new long[numbers.length];\n    var seen = new\
    \ long[numbers.length];\n    var j = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (seen[numbers[i]]++)\n        {\n            result[j]\
    \ = numbers[i];\n            j++;\n        }\n    }\n    return result;\n}\n/*\n\
    \ From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates1(long[]\
    \ numbers) \n{\n    var result = new long[numbers.length];\n    var seen = new\
    \ long[numbers.length];\n    var j = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (seen[numbers[i]]++)\n        {\n            result[j]\
    \ = numbers[i];\n            j++;\n        }\n        else\n        {\n      \
    \      seen[numbers[i]] = 1;\n        }\n    }\n    return result;\n}\n/*\n From\
    \ an array of integers, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates2(long[]\
    \ numbers) \n{\n    var result = new long[numbers.length];\n    var seen = new\
    \ long[numbers.length];\n    var j = 0;\n    for (var i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (!seen[numbers[i]]++)\n        {\n            result[j]\
    \ = numbers[i];\n            j++;\n        }\n    }\n    return result;\n}\n/*\n\
    \ From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates3(long[]\
    \ numbers) \n{\n    var result = new long\nunittest\n{\n    alias candidate =\
    \ remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm7ewsfnl.d(105): Error: semicolon expected, not `unittest`

    /tmp/tmpm7ewsfnl.d(105): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7ewsfnl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long hash = 0, unique = 0;\n    long[] result = new long[numbers.length];\n\
    \    int i = 0;\n    foreach(long number in numbers) {\n        if (number ==\
    \ hash) {\n            hash++;\n        } else {\n            result[i++] = number;\n\
    \            hash = number;\n        }\n    }\n    return std.array.sortInPlaceByValue(result);\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb65kh55l.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb65kh55l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  List\
    \ list = new List();\n  for (int i = 0; i < numbers.length; i++)\n  {\n    if\
    \ (list.contains(numbers[i]))\n      list.remove(numbers[i]);\n    else\n    \
    \  list.add(numbers[i]);\n  }\n  return list.toArray();\n}\n/*\n From an array\
    \ of integers, remove all elements that occur more than once.\n    Keep order\
    \ of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L,\
    \ 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate =\
    \ remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx456fa9e.d(12): Error: undefined identifier `List`

    /tmp/tmpx456fa9e.d(12): Error: undefined identifier `List`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx456fa9e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  List<long> result = new List<long>();\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj_glkkz.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpfj_glkkz.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpfj_glkkz.d(12): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpfj_glkkz.d(12): Error: found `)` when expecting `;` following statement

    /tmp/tmpfj_glkkz.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpfj_glkkz.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj_glkkz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    \n    int i = 0;\n    for(int\
    \ j=0; j<numbers.length; j++)\n    {\n        if (numbers[i] != numbers[j])\n\
    \        {\n            result[i++] = numbers[j];\n        }\n    }\n    \n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp37nph9ct.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmp37nph9ct.__unittest_L25_C1() [0x42800d]

    ??:? void tmp37nph9ct.__modtest() [0x42816c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430551]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int index = 0;\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i] <= 0)\n    \
    \        result[index++] = numbers[i];\n        else\n            result[index++]\
    \ = numbers[i]; \n    }\n    return result;\n}\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzsv335dj.d(36): unittest failure

    ----------------

    ??:? _d_unittestp [0x428425]

    ??:? void tmpzsv335dj.__unittest_L30_C1() [0x4280f5]

    ??:? void tmpzsv335dj.__modtest() [0x4281a4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4df]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b372]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305fd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430aac]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430589]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b349]

    ??:? runModuleUnitTests [0x42c2b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int pos = 0;\n    for(int i\
    \ = 0; i < numbers.length; i++)\n    {\n        bool hasValue = false; // if we\
    \ find an element, set the flag\n        for(int j = 0; j < pos; j++)\n      \
    \  {\n            if(numbers[i] == result[j])\n            {\n               \
    \ hasValue = true;\n                break;\n            }\n        }\n       \
    \ if(!hasValue)\n        {\n            result[pos++] = numbers[i];\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl24t870l.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42841d]

    ??:? void tmpl24t870l.__unittest_L32_C1() [0x4280ed]

    ??:? void tmpl24t870l.__modtest() [0x42819c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b36a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430aa4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430581]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b341]

    ??:? runModuleUnitTests [0x42c2ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    \n    for (int i = 0; i < numbers.length;\
    \ ++i) {\n        long value = numbers[i];\n        for (int j = 0; j < i; ++j)\
    \ {\n            if (value == numbers[j]) {\n                j++;\n          \
    \      break;\n            }\n        }\n        if (j >= i) {\n            result[i]\
    \ = value;\n        }\n    }\n    \n    return result;\n}\n</code>\n<|/ a |>\n\
    <| a tags=c# |>\nMy version :\n<code>\nvar result = numbers.GroupBy(x => x).Where(x\
    \ => x.Count() > 1).Select(x => x.Key);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ tags=c# |>\nThis solution is for those who want to use LINQ and are unfamiliar\
    \ with loops.\n<code>\nList<int> numbers = new List<int>();\nnumbers.Add(1);\n\
    numbers.Add(2);\nnumbers.Add(3);\nnumbers.Add(2);\nnumbers.Add(4);\nnumbers.Add(5);\n\
    numbers.Add(5);\nnumbers.Add(5);\nnumbers.Add(5);\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1jgo7o9j.d(29): Error: declaration expected, not `<`

    /tmp/tmp1jgo7o9j.d(35): Error: declaration expected, not `<`

    /tmp/tmp1jgo7o9j.d(41): Error: unexpected `(` in declarator

    /tmp/tmp1jgo7o9j.d(41): Error: basic type expected, not `1`

    /tmp/tmp1jgo7o9j.d(41): Error: found `1` when expecting `)`

    /tmp/tmp1jgo7o9j.d(41): Error: no identifier for declarator `numbers.Add(_error_)`

    /tmp/tmp1jgo7o9j.d(41): Error: semicolon expected following function declaration

    /tmp/tmp1jgo7o9j.d(41): Error: declaration expected, not `)`

    /tmp/tmp1jgo7o9j.d(42): Error: unexpected `(` in declarator

    /tmp/tmp1jgo7o9j.d(42): Error: basic type expected, not `2`

    /tmp/tmp1jgo7o9j.d(42): Error: found `2` when expecting `)`

    /tmp/tmp1jgo7o9j.d(42): Error: no identifier for declarator `numbers.Add(_error_)`

    /tmp/tmp1jgo7o9j.d(42): Error: semicolon expected following function declaration

    /tmp/tmp1jgo7o9j.d(42): Error: declaration expected, not `)`

    /tmp/tmp1jgo7o9j.d(43): Error: unexpected `(` in declarator

    /tmp/tmp1jgo7o9j.d(43): Error: b'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] ans = new long[numbers.length];\n    long temp;\n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        temp = numbers[i];\n        int j;\n\
    \        for (j = i; j < numbers.length; j++)\n        {\n            if (numbers[j]\
    \ == temp)\n                break;\n        }\n        if (j == numbers.length)\n\
    \        {\n            ans[i] = temp;\n        }\n        else\n        {\n \
    \           for (j = i; j < j; j++)\n            {\n                ans[j] = numbers[j];\n\
    \            }\n        }\n    }\n    return ans;\n}\n</code>\n<|/ a tags=hashmap,java,hashset,arrays\
    \ |>\n<| a |>\nThis code will remove all duplicates and return the sorted array.\
    \ As you can see I used Set instead of HashMap. This is the code:\n<code>\npublic\
    \ int[] removeDuplicates(int[] arr) {\n    Set<Integer> set = new LinkedHashSet<>();\n\
    \    for (int element : arr) {\n        if (!set.contains(element)) {\n      \
    \      set.add(element);\n        }\n    }\n    int[] result = new int[set.size()];\n\
    \    int i = 0;\n    for (Integer element : set) {\n        result[i++] = element;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=hashmap,java,hashset,arrays\
    \ dscore=0 |>\n<| c |>\nThis code returns sorted array but it does not remove\
    \ duplicates.\n<|/ c |>\n<| c |>\nYes, he can just remove duplicates and return\
    \ sorted array or he can remove duplicates and return sorted array. He just have\
    \ to change `set` to `LinkedHashSet` and return array `result`.\n<|/ c |>\n<|\
    \ a dscore=0 |>\nA little bit more efficient than others posted here.\n<code>\n\
    public int[] removeDuplicates(int[] arr) {\n    Set<Integer> set = new LinkedHashSet<>();\n\
    \    for (int element : arr) {\n        if (!set.contains(element)) {\n      \
    \      set.add(element);\n        }\n    }\n    int[] result = new int[set.size()];\n\
    \    int i = 0;\n    for (Integer element : set) {\n        result[i++] = element;\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=hashmap,java,hashset,arrays\
    \ |>\n<| a |>\n<code>\nimport java.util.*;\npublic class RemoveDup{\n    public\
    \ static void main(String []args){\n        removeDuplicates(new int[]{12,4,5,5,6,8,5,7,9,10,11,13});\n\
    \    }\n    public static void removeDuplicates(int[] arr){\n        Set<Integer>\
    \ set = new Linked\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5sz04ac3.d(37): Error: declaration expected, not `<`

    /tmp/tmp5sz04ac3.d(44): Error: declaration expected, not `for`

    /tmp/tmp5sz04ac3.d(47): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sz04ac3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ iMax = numbers.length - 1;\n  int iLast = iMax;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_oqyxqs8.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_oqyxqs8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    std.sort(numbers);\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        bool found = false;\n      \
    \  for(int j = 0; j < result.length; j++)\n        {\n            if(result[j]\
    \ == numbers[i])\n            {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found)\n        {\n        \
    \    result[result.length] = numbers[i];\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp73klhusa.d(13): Error: undefined identifier `sort` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp73klhusa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if(numbers.length==0)\n        return numbers;\n    \n    long[] result = new\
    \ long[numbers.length];\n    \n    long curr = numbers[0];\n    for(int i = 1;\
    \ i < numbers.length; i++){\n        if(curr == numbers[i])\n            continue;\n\
    \        \n        result[result.length-1] = curr;\n        curr = numbers[i];\n\
    \    }\n    \n    result[result.length-1] = curr;\n    return result;\n}\n/*\n\
    \ From an array of strings, remove all elements that occur more than once.\n \
    \   Keep order of elements left the same as in the input.\n    >>> remove_duplicates([\"\
    aaa\",\"bbb\",\"ccc\",\"aaa\",\"bbb\"])\n    [\"aaa\",\"ccc\"]\n    \n*/\nstring[]\
    \ remove_duplicates(string[] strings) \n{\n    if(strings.length==0)\n       \
    \ return strings;\n    \n    string[] result = new string[strings.length];\n \
    \   \n    string curr = strings[0];\n    for(int i = 1; i < strings.length; i++){\n\
    \        if(curr == strings[i])\n            continue;\n        \n        result[result.length-1]\
    \ = curr;\n        curr = strings[i];\n    }\n    \n    result[result.length-1]\
    \ = curr;\n    return result;\n}\n/*\n From a list with integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([ 1, 2, 3, 2, 2, 4 ])\n    [1, 2, 3, 4]\n\
    \    \n*/\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0eitg6tv.d(66): Error: `tmp0eitg6tv.remove_duplicates` called with
    argument types `(void[])` matches both:

    /tmp/tmp0eitg6tv.d(10):     `tmp0eitg6tv.remove_duplicates(long[] numbers)`

    and:

    /tmp/tmp0eitg6tv.d(36):     `tmp0eitg6tv.remove_duplicates(string[] strings)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0eitg6tv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wn4k0rf.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wn4k0rf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n = numbers.length;\n    long[] result = new long[n];\n    for (int i =\
    \ 0; i < n; ++i) \n    {\n        // Use binary search to find index of first\
    \ duplicate.\n        int j = binarySearch(0, n - 1, numbers[i]); // If no duplicates,\
    \ `j` will be `n - 1`.\n        // Remove duplicates and store in result.\n  \
    \      int k = j;\n        \n        while ((j + 1 < n) && (numbers[j] == numbers[j\
    \ + 1])) \n        {\n            ++j;\n        }\n        result[k] = numbers[j];\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_nsokbd.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmpw_nsokbd.d(17): Error: undefined identifier `binarySearch`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_nsokbd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if(numbers.length < 2)\n        return numbers;\n    long first = numbers[0];\n\
    \    long[] result = new long[numbers.length-1];\n    for(int i = 1; i < numbers.length;\
    \ i++)\n    {\n        long num = numbers[i];\n        if(num == first)\n    \
    \    {\n            continue;\n        }\n        else if(num < first)\n     \
    \   {\n            result[i-1] = num;\n        }\n        else\n        {\n  \
    \          result[result.length-1] = num;\n        }\n        first = num;\n \
    \   }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    private List<Integer> removeDuplicates(List<Integer> numbers)\n{\n    List<Integer>\
    \ result = new ArrayList<Integer>();\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvpsf53m4.d(35): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpsf53m4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = numbers;\n    Arrays.sort(numbers);\n    for(int i = numbers.length-1;\
    \ i > 0; i--)\n    {\n        if(numbers[i-1] == numbers[i])\n        {\n    \
    \        numbers.splice(i, 1);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=algorithm,c++ |>\n<| a dscore=2 |>\nThis code is not written in \"\
    pure\" C++ but is written in Python (not recommended for production use).\n<code>\n\
    #!/usr/bin/python\n# Removes duplicates from list\n# O(n) solution using hashtable\n\
    def remove_duplicates(l):\n    h = {}\n    for e in l:\n        h.setdefault(e,\
    \ []).append(e)\n    return [e for e in l if e not in h[e]]\n</code>\n<|/ a tags=algorithm,c++\
    \ |>\n<| c |>\nThis is the best solution for me.\n<|/ c |>\n<| a |>\nI see two\
    \ answers posted. \nThe first one is good and simple, just one line.\n<code>\n\
    #include <iostream>\n#include <vector>\nusing namespace std;\nunittest\n{\n  \
    \  alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk9n9z39.d(23): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk9n9z39.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i;\n  long count = 0;\n  long[] copy = new long[numbers.length];\n  for (i =\
    \ 0; i < numbers.length; ++i) \n  {\n    long value = numbers[i];\n    if (count\
    \ < value) \n    {\n      copy[count] = value;\n      count++;\n    }\n  }\n \
    \ return copy;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n \
    \   assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6j3_rlqp.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283b5]

    ??:? void tmp6j3_rlqp.__unittest_L26_C1() [0x428085]

    ??:? void tmp6j3_rlqp.__modtest() [0x428134]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c46f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b302]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43058d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a3c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430519]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b2d9]

    ??:? runModuleUnitTests [0x42c245]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428878]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ numElements = numbers.length;\n  long[] result = new long[numElements];\n  long\
    \ lastNumber = numbers[0];\n  for (int i = 1; i < numElements; i++) {\n    if\
    \ (numbers[i] != lastNumber) {\n      result[i - 1] = lastNumber;\n    }\n   \
    \ lastNumber = numbers[i];\n  }\n  return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4hqvj3h4.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4hqvj3h4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  // Write your code here\n    var counts = new int[numbers.length];\n    for(var\
    \ i=0;i<numbers.length;++i)\n        counts[numbers[i]]++;\n    var result = new\
    \ long[counts.length];\n    for(int i=0;i<result.length;++i)\n    {\n        if(counts[i]\
    \ <= 1)\n            result[i] = numbers[i];\n        else\n            result[i]\
    \ = numbers[i] - 1;\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=sorting,java,arrays\
    \ dscore=0 |>\nYou can do that in linear time. \nYou have to traverse the array\
    \ once. and keep track of the numbers that have been repeated earlier. \nTo keep\
    \ track of repeated numbers, you can use a HashMap to store numbers as keys and\
    \ the time when they were repeated as value.\nThe time can be updated every time\
    \ you find a number that has been repeated earlier\n<code>\n  public static void\
    \ main(String[] args) {\n    int[] array = {7, 7, 1, 7, 1, 7, 7, 1, 7, 1};\n \
    \   HashMap<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i <\
    \ array.length; ++i) {\n      if (map.containsKey(array[i])) {\n        map.put(array[i],\
    \ map.get(array[i]) + 1);\n      } else {\n        map.put(array[i], 1);\n   \
    \   }\n    }\n    int[] result = new int[map.size()];\n    for (int i = 0; i <\
    \ array.length; ++i) {\n      if (map.containsKey(array[i])) {\n        result[i]\
    \ = array[i] - map.get(array[i]);\n      } else {\n        result[i] = array[i];\n\
    \      }\n    }\n  }\n</code>\n<|/ a |>\n<| a tags=sorting,java,arrays dscore=0\
    \ |>\nMy approach for this problem is create a Map that maps each item to how\
    \ many times the item appear in the array. Then, you can loop through the array\
    \ and subtract the amount that appears in map from each item. Finally, you can\
    \ return the new array.\n<code>\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdxa95p3f.d(26): Error: declaration expected, not `<`

    /tmp/tmpdxa95p3f.d(36): Error: no identifier for declarator `HashMap`

    /tmp/tmpdxa95p3f.d(36): Error: declaration expected, not `<`

    /tmp/tmpdxa95p3f.d(37): Error: declaration expected, not `for`

    /tmp/tmpdxa95p3f.d(37): Error: no identifier for declarator `i`

    /tmp/tmpdxa95p3f.d(37): Error: declaration expected, not `<`

    /tmp/tmpdxa95p3f.d(37): Error: declaration expected, not `++`

    /tmp/tmpdxa95p3f.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdxa95p3f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] newNumbers = new long[numbers.length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3cnec0ts.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3cnec0ts.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] new_numbers = new long[numbers.length];\n\tfor (int i = 0; i <  new_numbers.length;\
    \ i++)\n\t{\n\t\tlong val = numbers[i];\n\t\tfor (int j = i+1; j < new_numbers.length;\
    \ j++)\n\t\t\tif (val == new_numbers[j])\n\t\t\t{\n\t\t\t\tnew_numbers[j] = numbers[j];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t}\n\treturn new_numbers;\n}\n/*\n This function takes\
    \ in an array of floats and returns a new array with the average\n of the float\
    \ values in the array.\n \n >>> avg([1.0,2.0,3.0,3.0])\n 2.0\n \n*/\ndouble avg(float[]\
    \ numbers) \n{\n\tdouble sum = 0;\n\tfor (int i =0; i < numbers.length; i++)\n\
    \t{\n\t\tsum = sum + numbers[i];\n\t}\n\treturn sum / numbers.length;\n}\n/*\n\
    \ This function takes in an array of floats and returns a new array with the median\n\
    \ of the float values in the array.\n \n >>> median([1.0,2.0,3.0,3.0])\n 3.0\n\
    \ \n*/\nfloat median(float[] numbers) \n{\n\tlong middle = numbers.length / 2;\n\
    \t\n\tif (numbers.length % 2 == 0)\n\t{\n\t\treturn (numbers[middle - 1] + numbers[middle])\
    \ / 2;\n\t}\n\telse\n\t{\n\t\treturn numbers[middle];\n\t}\n}\n/*\n This function\
    \ takes in an array of integers and returns a new array with the mode\n of the\
    \ integer values in the array.\n \n >>> mode([1,3,3,5,7,7])\n [3, 5]\n \n*/\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_6x3nmjd.d(76): unittest failure

    ----------------

    ??:? _d_unittestp [0x4285ed]

    ??:? void tmp_6x3nmjd.__unittest_L71_C1() [0x42820d]

    ??:? void tmp_6x3nmjd.__modtest() [0x42836c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c6a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b53a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4307c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430c74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430751]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b511]

    ??:? runModuleUnitTests [0x42c47d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ab0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int num = 0;\n    int i = 0;\n    long current;\n    \n    // keep track of\
    \ the number of occurrences of each number\n    HashSet<long> occurrences = new\
    \ HashSet<long>();\n    \n    while(i < numbers.length)\n    {\n        if(occurrences.contains(numbers[i]))\n\
    \        {\n            occurrences.remove(numbers[i]);\n        }\n        else\n\
    \        {\n            occurrences.add(numbers[i]);\n            numbers[i] =\
    \ num++;\n            i++;\n        }\n    }\n    \n    long[] result = new long[numbers.length];\n\
    \    \n    // fill in the remaining numbers\n    int j = 0;\n    for(long i :\
    \ occurrences)\n    {\n        result[j] = i;\n        j++;\n    }\n    \n   \
    \ return result;\n}\n/*\n From an array of integers, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgm0ukp2m.d(17): Error: found `>` when expecting `.` following long

    /tmp/tmpgm0ukp2m.d(17): Error: found `>` when expecting `.` following long

    /tmp/tmpgm0ukp2m.d(17): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpgm0ukp2m.d(17): Error: found `)` when expecting `;` following statement

    /tmp/tmpgm0ukp2m.d(17): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpgm0ukp2m.d(37): Error: semicolon expected, not `:`

    /tmp/tmpgm0ukp2m.d(37): Error: expression expected, not `:`

    /tmp/tmpgm0ukp2m.d(37): Error: found `occurrences` when expecting `;` following
    `for` condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgm0ukp2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \n\
    \    // Create array to hold our results\n    long[] newArray = new long[numbers.length];\n\
    \    \n    // Create an array to hold the number of each element in the list\n\
    \    int[] count = new int[numbers.Length];\n    \n    // Start by populating\
    \ the array\n    for (int i = 0; i < numbers.Length; i++) {\n        count[numbers[i]]++;\n\
    \        newArray[i] = numbers[i];\n    }\n    \n    // Now go through the array\
    \ again and remove any duplicates\n    for (int i = 0; i < numbers.Length; i++)\
    \ {\n        // If the count of this number in the list is greater than 1, \n\
    \        // remove it\n        if (count[numbers[i]]>1) \n            count[numbers[i]]--;\n\
    \    }\n    \n    // Now go through the array again and populate it with the results\n\
    \    for (int i = 0; i < numbers.Length; i++) {\n        newArray[count[numbers[i]]]\
    \ = numbers[i];\n    }\n    \n    return newArray;\n}\n/* \n From an array of\
    \ floats, remove all elements that occur more than once.\n    Keep order of elements\
    \ left the same as in the input.\n    >>> remove_duplicates([1.1, 2.1, 3.1, 2.1,\
    \ 4.1])\n    [1.1, 3.1, 4.1]\n    \n*/\ndouble[] remove_duplicates(double[] numbers)\
    \ \n{\n  \n    // Create array to hold our results\n    double[] newArray = new\
    \ double[numbers.length];\n    \n    // Create an array to hold the number of\
    \ each element in the list\n    int[] count = new int[numbers.Length];\n    \n\
    \    // Start by populating the array\n    for (int i = 0; i < numbers.Length;\
    \ i++) {\n        count[numbers[i]]++;\n        newArray[i] = numbers[i];\n  \
    \  }\n    \n    // Now go through the array again and remove any duplicates\n\
    \    for (int i = 0; i < numbers.Length; i++) {\n        // If the count of this\
    \ number in the list is greater than 1, \n        // remove it\n        if (count[numbers[i]]>1)\
    \ \n            count[numbers[i]]--;\n    }\n    \n    // Now go through the array\
    \ again and populate it with the results\n    for (int i = 0; i < numbers.Length;\
    \ i++) {\n        newArray[count[numbers[i]]] = numbers[i];\n    }\n    \n   \
    \ return newArray;\n}\n/* \n From an array of doubles, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1.1, 2.1, 3.1, 2.1, 4.1])\n    [1.1, 3.1, 4.1]\n \
    \   \n*/\nfloat[] remove_duplicates(float[] numbers) \n{\n  \n    // Create array\
    \ to hold our results\n    float[] newArray = new float[numbers.length];\n   \
    \ \n    // Create an array to hold the number of each element in the list\n  \
    \  \nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt50e1f0g.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt50e1f0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int[]\
    \ count = new int[numbers.length];\n  for (int i=0; i<numbers.length; i++)\n \
    \   count[numbers[i]]++;\n  long[] result = new long[numbers.length];\n  for (int\
    \ i=0; i<numbers.length; i++)\n  {\n    if (count[numbers[i]]==1)\n      result[i]\
    \ = numbers[i];\n    else \n      count[numbers[i]]--;\n  }\n  return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhat is `remove_duplicates`?\n<|/ c |>\n<| c |>\n\
    It's a function that does exactly what remove_duplicates does; it removes duplicates\
    \ from a long list.\n<|/ c |>\n<| c |>\nSorry, I'm a bit confused: how does it\
    \ remove duplicates? The final result does not seem to match the input. Should\
    \ it be `return new long[numbers.length];` instead?\n<|/ c |>\n<| c |>\nThe OP\
    \ asked for **the most efficient way of removing duplicates from a long list**.\
    \ You have no idea how large a long list this is. My answer gives the most efficient\
    \ way for a list of size n. In that context, `remove_duplicates` is just a `long[]\
    \ result = new long[n];`\n<|/ c |>\n<| c |>\nI see. But how does this approach\
    \ work when we want to remove more than just duplicate integers? For example:\
    \ remove_duplicates([123, 456, 123]). Would you just add another for-loop? It\
    \ seems redundant.\n<|/ c |>\n<| a tags=algorithm |>\n<code>\npublic int maxNoOfRepetition(long\
    \ arr[]){\n    long maxRepetition = 0;\n    int maxNoOfRepetition = 0;\n    long\
    \ temp = 0;\n    boolean flag = true;\n    \n    for(int i : arr) {\n        if(temp.equals(i))\
    \ {\n            flag = false;\n        } else {\n            flag = true;\n \
    \       }\n        if(flag == true) {\n            temp = i;\n            if(maxRepetition\
    \ < i - 1) {\n                maxRepetition = i - 1;\n                maxNoOfRepetition\
    \ = 1;\n            }\n        } else {\n            if(maxRepetition > i - 1)\
    \ {\n                maxRepetition = i - 1;\n                maxNoOfRepetition++;\n\
    \            }\n        }\n    }\n    \n    return maxNoOfRepetition;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\n`if(temp.equals(i))` will never be true. That's why\
    \ it's always true.\n<|/ c |>\n<| c |>\nCan you explain what you are \nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt8qljxbq.d(25): Error: declaration expected, not `<`

    /tmp/tmpt8qljxbq.d(31): Error: unterminated character constant

    /tmp/tmpt8qljxbq.d(31): Error: semicolon expected, not `duplicates`

    /tmp/tmpt8qljxbq.d(31): Error: semicolon expected, not `a`

    /tmp/tmpt8qljxbq.d(31): Error: no identifier for declarator `a`

    /tmp/tmpt8qljxbq.d(31): Error: semicolon expected, not `.`

    /tmp/tmpt8qljxbq.d(32): Error: identifier expected following `.` instead of `<`

    /tmp/tmpt8qljxbq.d(32): Error: no identifier for declarator ``

    /tmp/tmpt8qljxbq.d(32): Error: declaration expected, not `<`

    /tmp/tmpt8qljxbq.d(34): Error: unterminated character constant

    /tmp/tmpt8qljxbq.d(50): Error: declaration expected, not `for`

    /tmp/tmpt8qljxbq.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt8qljxbq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int i = 0;\n    while (i < numbers.length)\
    \ \n    {\n        long n = numbers[i];\n        while (i < numbers.length &&\
    \ numbers[i] == n) \n        {\n            result[i] = numbers[i++];\n      \
    \  }\n        if (i == numbers.length) \n        {\n            result[i] = n;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpcmdohuxe.d(23): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4284ee]

    ??:? long[] tmpcmdohuxe.remove_duplicates(long[]) [0x427f24]

    ??:? void tmpcmdohuxe.__unittest_L28_C1() [0x427ffa]

    ??:? void tmpcmdohuxe.__modtest() [0x4281c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4f7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b38a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430615]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ac4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305a1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b361]

    ??:? runModuleUnitTests [0x42c2cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    int n = numbers.length;\n\tlong[] result = new long[n];\n\tlong[] used = new long[n];\n\
    \tfor (int i = 0; i < n; i++)\n\t\tused[i] = 0;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptijgqp6p.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptijgqp6p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int count = 0;\n    long[] result = new long[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) {\n        long number = numbers[i];\n     \
    \   while (i < numbers.length && numbers[i] == number) {\n            result[count++]\
    \ = number;\n            i++;\n        }\n    }\n    return result;\n}\n/*\n From\
    \ an array of integers, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy2x1ehli.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283e5]

    ??:? void tmpy2x1ehli.__unittest_L30_C1() [0x428005]

    ??:? void tmpy2x1ehli.__modtest() [0x428164]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c49f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b332]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305bd]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a6c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430549]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b309]

    ??:? runModuleUnitTests [0x42c275]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288a8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] nums = numbers;\n    long[] result = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length;\
    \ j++)\n        {\n            if (nums[i] == nums[j])\n            {\n      \
    \          result.push(nums[i]);\n                nums.remove(j);\n          \
    \  }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp952glo59.d(20): Error: no property `push` for type `long[]`

    /tmp/tmp952glo59.d(21): Error: no property `remove` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp952glo59.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ noDupes = numbers;\n  int dupeCount = 0;\n  for (int i = 0; i < noDupes.length;\
    \ ++i) {\n    int count = 0;\n    for (int j = 0; j < noDupes.length; ++j) {\n\
    \      if (i != j && noDupes[i] == noDupes[j]) {\n        count++;\n      }\n\
    \    }\n    if (count > 1) {\n      noDupes[dupeCount++] = noDupes[i];\n    }\n\
    \  }\n  return noDupes;\n}\n</code>\nThe array is passed by reference, so the\
    \ original array is not modified.\nIf efficiency matters, it would be possible\
    \ to replace that inner loop with a set or hash table, but that would not be a\
    \ significant improvement.\n<|/ a dscore=2 |>\n<| c |>\nI'm sorry, I should have\
    \ specified that I needed to retain the order of the integers. Please see the\
    \ updated question.\n<|/ c |>\n<| c |>\n: If you need to maintain the order of\
    \ the elements, use a `SortedList`, not a `List`.\n<|/ c |>\n<| c |>\nA `Set`\
    \ will remove any duplicates within the input - if that's what the OP wants, this\
    \ is probably the better solution.\n<|/ c |>\n<| c |>\n: My solution is based\
    \ on the assumption that the duplicates must be kept, but yes, a `Set` might be\
    \ a better solution if the duplicates must be removed.\n<|/ c |>\n<| a dscore=1\
    \ |>\nYour example array contains two pairs of duplicates, so it's not a good\
    \ fit.\n<|/ a tags=c#,list,arrays |>\n<| c |>\nI made a mistake in the example.\
    \ I will edit the question.\n<|/ c |>\n<| a tags=c#,list,arrays |>\nIf you know\
    \ the size of the array, you can use LINQ:\n<code>\npublic static int[] remove_duplicates(int[]\
    \ numbers) {\n  return numbers.GroupBy(n => n).SelectMany(g => g.Skip(g.Count()\
    \ - 1)).ToArray();\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this will\
    \ preserve the original order of the elements - is that what you want?\n<|/ c\
    \ |>\n<| c |>\nNo, this will remove all duplicates, not just the first.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nYou could use LINQ:\n<code>\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphtqy5w_v.d(27): Error: declaration expected, not `<`

    /tmp/tmphtqy5w_v.d(32): Error: unterminated character constant

    /tmp/tmphtqy5w_v.d(38): Error: unterminated character constant

    /tmp/tmphtqy5w_v.d(44): Error: unterminated character constant

    /tmp/tmphtqy5w_v.d(54): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphtqy5w_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = numbers.length;\n  if (n < 1)\n    return null;\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbyg1cfsy.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbyg1cfsy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i, j, k;\n    long[] result;\n    result = new long[numbers.length];\n\
    \    j = 0;\n    k = 0;\n    \n    for (i = 0; i < numbers.length; i++)\n    {\n\
    \        while (j < numbers.length && numbers[j] == numbers[i])\n        {\n \
    \           j++;\n        }\n        \n        if (j != k)\n        {\n      \
    \      result[k] = numbers[j];\n            k++;\n        }\n    }\n    \n   \
    \ return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't produce the correct\
    \ results for input [1L,3L,3L]. Try with [1L,3L,3L,4L]. The output should be [1L,3L,4L]\
    \ but the method outputs [1,3,3].\n<|/ c |>\n<| a dscore=3 tags=c#,arrays |>\n\
    I realize that this is an old thread, but for anyone finding this later, here\
    \ is a LINQ solution:\n<code>\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tqccapj.d(34): Error: declaration expected, not `<`

    /tmp/tmp6tqccapj.d(37): Error: unterminated character constant

    /tmp/tmp6tqccapj.d(46): Error: declaration expected, not `assert`

    /tmp/tmp6tqccapj.d(47): Error: declaration expected, not `assert`

    /tmp/tmp6tqccapj.d(48): Error: declaration expected, not `assert`

    /tmp/tmp6tqccapj.d(49): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tqccapj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    long unique = 1;\n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        if(numbers[i] < unique)\n \
    \       {\n            unique = numbers[i];\n        }\n    }\n    int idx = -1;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] ==\
    \ unique)\n        {\n            if(idx < 0)\n            {\n               \
    \ idx = i;\n            }\n        }\n        else\n        {\n            result[idx]\
    \ = numbers[i];\n            idx--;\n        }\n    }\n    return std.array.create(result,\
    \ idx);\n}\n/*\n    From an array of integers, remove all elements that occur\
    \ more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    \n*/\ndouble[]\
    \ remove_duplicates(double[] numbers) \n{\n    double[] result = new double[numbers.length];\n\
    \    double unique = 1;\n    for(int i = 0; i < numbers.length; i++) \n    {\n\
    \        if(numbers[i] < unique)\n        {\n            unique = numbers[i];\n\
    \        }\n    }\n    int idx = -1;\n    for(int i = 0; i < numbers.length; i++)\n\
    \    {\n        if(numbers[i] == unique)\n        {\n            if(idx < 0)\n\
    \            {\n                idx = i;\n            }\n        }\n        else\n\
    \        {\n            result[idx] = numbers[i];\n            idx--;\n      \
    \  }\n    }\n    return std.array.create(result, idx);\n}\n/*\n    From an array\
    \ of integers, remove all elements that occur more than once.\n    Keep order\
    \ of elements left the same as in the input.\n    >>> remove_duplicates([1, 2,\
    \ 3, 4, 1])\n    [1, 2, 3, 4]\n    \n*/\nlong[] remove_duplicates(bool[] numbers)\n\
    {\n    long[] result = new long[numbers.length];\n    long unique = 1;\n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        if(numbers[i] < unique)\n \
    \       {\n            unique = numbers[i];\n        }\n    }\n    int idx = -1;\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] ==\
    \ unique)\n        {\n            if(idx < 0)\n            {\n               \
    \ idx = i;\n            }\n        }\n        else\n        {\n            result[idx]\
    \ = numbers[i];\n            idx--;\n        }\n    }\n    return std.array.create(result,\
    \ idx);\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb6qlb6fn.d(37): Error: undefined identifier `array` in package
    `std`

    /tmp/tmpb6qlb6fn.d(73): Error: undefined identifier `array` in package `std`

    /tmp/tmpb6qlb6fn.d(109): Error: undefined identifier `array` in package `std`

    /tmp/tmpb6qlb6fn.d(115): Error: `tmpb6qlb6fn.remove_duplicates` called with argument
    types `(void[])` matches both:

    /tmp/tmpb6qlb6fn.d(10):     `tmpb6qlb6fn.remove_duplicates(long[] numbers)`

    and:

    /tmp/tmpb6qlb6fn.d(82):     `tmpb6qlb6fn.remove_duplicates(bool[] numbers)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb6qlb6fn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  HashSet<long> set = new HashSet<long>();\n    for(int i = 0; i < numbers.length;\
    \ i++){\n        set.add((long)numbers[i]);\n    }\n    return set.stream().mapToLong(a\
    \ -> a).toArray();\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiz49hbp0.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpiz49hbp0.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpiz49hbp0.d(12): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpiz49hbp0.d(12): Error: found `)` when expecting `;` following statement

    /tmp/tmpiz49hbp0.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpiz49hbp0.d(14): Error: C style cast illegal, use `cast(long)numbers[i]`

    /tmp/tmpiz49hbp0.d(16): Error: use `.` for member lookup, not `->`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz49hbp0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  if\
    \ (numbers.length == 0)\n    return numbers;\n  long[] dups = new long[numbers.length];\n\
    \  int i;\n  dups[0] = numbers[0];\n  for (i = 1; i < numbers.length; i++) {\n\
    \    if (numbers[i] != numbers[i - 1]) {\n      dups[i] = numbers[i];\n    }\n\
    \  }\n  return dups;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm4btzii3.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x42844d]

    ??:? void tmpm4btzii3.__unittest_L24_C1() [0x428121]

    ??:? void tmpm4btzii3.__modtest() [0x4281d0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c507]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b39a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430625]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430ad4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305b1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b371]

    ??:? runModuleUnitTests [0x42c2dd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428910]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long currentVal, lastVal, tempVal;\n    int i;\n    \n    long newNumbers[numbers.length];\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp03xxla93.d(15): Deprecation: instead of C-style syntax, use D-style
    syntax `long[numbers.length] newNumbers`

    /tmp/tmp03xxla93.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp03xxla93.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long\
    \ result = numbers.clone();\n  for(int i = 0; i < numbers.size(); i++) {\n   \
    \ int count = 0;\n    for(int j = 0; j < numbers.size(); j++) {\n      if(numbers[j]\
    \ == numbers[i]) {\n        count++;\n      }\n    }\n    if(count > 1) {\n  \
    \    for(int k = 0; k < numbers.size(); k++) {\n        if(numbers[k] == numbers[i])\
    \ {\n          numbers.removeAt(i);\n          break;\n        }\n      }\n  \
    \  }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    public int removeDuplicates(int[] arr) {\n    HashSet<Integer> hs = new HashSet<>();\n\
    \    for(int i = 0; i < arr.length; i++){\n        if(!hs.contains(arr[i])){\n\
    \            hs.add(arr[i]);\n        }\n    }\n    return hs.size();\n}\n</code>\n\
    <|/ a tags=arrays,java dscore=1 |>\n<| c |>\nWelcome to Stack Overflow! Please\
    \ don't answer just with source code. Try to provide a nice description about\
    \ how your solution works. See: [How do I write a good answer?](https://stackoverflow.com/help/how-to-answer).\
    \ Thanks\n<|/ c |>\n<| a |>\n<code>\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\
    import java.util.List;\npublic class RemoveDuplicates {\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp084omk4w.d(31): Error: declaration expected, not `<`

    /tmp/tmp084omk4w.d(37): Error: declaration expected, not `for`

    /tmp/tmp084omk4w.d(37): Error: no identifier for declarator `i`

    /tmp/tmp084omk4w.d(37): Error: declaration expected, not `<`

    /tmp/tmp084omk4w.d(37): Error: no identifier for declarator `i`

    /tmp/tmp084omk4w.d(37): Error: declaration expected, not `++`

    /tmp/tmp084omk4w.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp084omk4w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if(numbers.length < 2)\n        return numbers;\n    long last_val = numbers[0];\n\
    \    long[] results = new long[numbers.length-1];\n    for(int i = 0; i < numbers.length;\
    \ i++){\n        long val = numbers[i];\n        if(val != last_val)\n       \
    \     results[results.length-1] = last_val;\n        results[results.length-1]\
    \ = val;\n        last_val = val;\n    }\n    return results;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nIt would be better to use a LinkedList.  That way you're not\
    \ duplicating the last number after you remove the first duplicate.\n<|/ c |>\n\
    <| c |>\n: I didn't think of that.\n<|/ c |>\n<| c |>\n: And that's why I added\
    \ the comment. :)\n<|/ c |>\n<| a dscore=2 |>\nThis is pretty much the algorithm\
    \ I would go with.\n<code>\npublic static int[] removeDups(int[] input) {\n  \
    \  if (input == null || input.length <= 1) {\n        return input;\n    }\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8abx8ood.d(25): Error: declaration expected, not `<`

    /tmp/tmp8abx8ood.d(28): Error: unterminated character constant

    /tmp/tmp8abx8ood.d(31): Error: unterminated character constant

    /tmp/tmp8abx8ood.d(34): Error: unterminated character constant

    /tmp/tmp8abx8ood.d(42): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8abx8ood.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for(int i=0; i<numbers.length;\
    \ i++)\n    {\n        for(int j=i+1; j<numbers.length; j++)\n        {\n    \
    \        if(numbers[i] == numbers[j])\n            {\n                result.splice(i,\
    \ 1);\n                result.splice(j, 1);\n                break;\n        \
    \    }\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThe OP is asking for a way to remove duplicates, so your answer would\
    \ be correct. However, this doesn't do what the OP is asking for. If you have\
    \ `[1L, 2L, 3L, 3L, 3L, 3L, 3L]`, your code will output `[1L, 2L, 3L]`\n<|/ c\
    \ |>\n<| a dscore=1 tags=filter,c#,linq,duplicates |>\nI wanted to do something\
    \ similar, and I used a linq query. \n<code>\nmyList.Where(o => myList.Count(a\
    \ => a == o) > 1)\n</code>\n<|/ a |>\n<| a |>\nYou want Distinct:\n<code>\nList<int>\
    \ myList = new List<int>() { 1L, 2L, 3L, 3L, 3L, 3L, 3L };\nvar distinct = myList.Distinct();\n\
    </code>\nThe distinct list is then [1L, 2L, 3L, 3L, 3L, 3L]\n<|/ a dscore=0 tags=filter,c#,linq,duplicates\
    \ |>\n<| a tags=filter,c#,linq,duplicates dscore=0 |>\nIf performance isn't a\
    \ problem, this will be a lot easier to do using HashSet:\n<code>\nvar result\
    \ = new HashSet<int>();\nforeach (int item in myList)\n{\n    if (result.Contains(item))\n\
    \        continue;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4t0w2k86.d(27): Error: declaration expected, not `<`

    /tmp/tmp4t0w2k86.d(30): Error: unterminated character constant

    /tmp/tmp4t0w2k86.d(43): Error: declaration expected, not `<`

    /tmp/tmp4t0w2k86.d(47): Error: unterminated character constant

    /tmp/tmp4t0w2k86.d(50): Error: declaration expected, not `foreach`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4t0w2k86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if(numbers.length < 2)\n        return numbers;\n    long last = 0;\n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        long current = numbers[i];\n\
    \        if(current != last)\n        {\n            last = current;\n       \
    \     numbers[i] = last;\n        }\n    }\n    return numbers;\n}\n/*\n From\
    \ an array of integers, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    From a vector of integers,\
    \ remove all elements that occur more than once.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L], [1L, 3L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[]\
    \ numbers, long[] vector) \n{\n    if(numbers.length < 2)\n        return vector;\n\
    \    long last = 0;\n    for(int i = 0; i < numbers.length; i++) \n    {\n   \
    \     long current = numbers[i];\n        if(current != last)\n        {\n   \
    \         last = current;\n            numbers[i] = last;\n        }\n    }\n\
    \    return numbers;\n}\n/*\n From an array of integers, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    From a vector of integers, remove all elements that occur more than once.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L], [1L, 3L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nlong[] remove_duplicates(long[] numbers, longVector[] vector) \n{\n\
    \    if(numbers.length < 2)\n        return vector;\n    long last = 0;\n    for(int\
    \ i = 0; i < numbers.length; i++) \n    {\n        long current = numbers[i];\n\
    \        if(current != last)\n        {\n            last = current;\n       \
    \     numbers[i] = last;\n        }\n    }\n    return numbers;\n}\n/*\n From\
    \ an array of doubles, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([3.14,\
    \ 4.14, 3.14, 3.14, 4.14])\n    [3.14, 4.14]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n    if(numbers.length < 2)\n        return numbers;\n    double\
    \ last = 0.0;\n    for(int i = 0; i < numbers.length; i++) \n    {\n        double\
    \ current = numbers[i];\n        if(current != last)\n        {\n            last\
    \ = current;\n            numbers[i] = last;\n        }\n    }\n    return numbers;\n\
    }\n/*\n From an array of doubles, remove all elements that occur more than once.\n\
    \    \nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrg7wto_.d(97): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrg7wto_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long unique = 0;\n\tlong[] result = new long[numbers.length];\n\tfor (int i =\
    \ 0; i < numbers.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\
    \t\tif (numbers[i] == numbers[j])\n\t\t\t{\n\t\t\t\tnumbers[j] = numbers[i];\n\
    \t\t\t}\n\t\t}\n\t\tfor (int k = 0; k < numbers.length; k++)\n\t\t{\n\t\t\tif\
    \ (numbers[i] == numbers[k])\n\t\t\t{\n\t\t\t\tnumbers[k] = numbers[i] + unique;\n\
    \t\t\t\tresult[i] = numbers[k];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tunique++;\n\
    \t}\n\treturn result;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n\
    \    \n*/\nlong[] remove_duplicates(long[] numbers, bool asc) \n{\n\tlong unique\
    \ = 0;\n\tlong[] result = new long[numbers.length];\n\tfor (int i = 0; i < numbers.length;\
    \ i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (numbers[i] == numbers[j])\n\
    \t\t\t{\n\t\t\t\tnumbers[j] = numbers[i];\n\t\t\t}\n\t\t}\n\t\tfor (int k = 0;\
    \ k < numbers.length; k++)\n\t\t{\n\t\t\tif (numbers[i] == numbers[k])\n\t\t\t\
    {\n\t\t\t\tnumbers[k] = numbers[i] + unique;\n\t\t\t\tresult[i] = numbers[k];\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tunique++;\n\t}\n\tif (asc) return result;\n\
    \treturn reverse_mergesort(numbers, asc);\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2rrvaoh1.d(68): Error: undefined identifier `reverse_mergesort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2rrvaoh1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        result[i] = numbers[i];\n    }\n    for (int i = 0; i < numbers.length;\
    \ i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n           \
    \ if (numbers[i] == numbers[j]) {\n                result[j] = numbers[j];\n \
    \               for (int k = i; k < j; k++) {\n                    numbers[k]\
    \ = numbers[k + 1];\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3mljjqcg.d(34): unittest failure

    ----------------

    ??:? _d_unittestp [0x4284dd]

    ??:? void tmp3mljjqcg.__unittest_L28_C1() [0x4281b1]

    ??:? void tmp3mljjqcg.__modtest() [0x428260]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c597]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b42a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4306b5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b64]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430641]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b401]

    ??:? runModuleUnitTests [0x42c36d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4289a0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i, j, k = 0;\n    long[] result = new long[numbers.length];\n    \n   \
    \ for (i = 0; i < numbers.length; i++ ) {\n        for (j = k; j < i; j++ ) {\n\
    \            if (numbers[i] == numbers[j]) {\n                // this number is\
    \ found a second time\n                result[k++] = numbers[i];\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis is very helpful. Thank you.\n<|/ c |>\n<| c |>\n\
    This is a great solution. It also works with arrays of strings. I was using it\
    \ in a method I called \"removeDuplicates\" that removes all duplicates from a\
    \ list. The other solution didnt work properly with the string array, which was\
    \ the issue I was having. Thanks again!\n<|/ c |>\n<| a |>\nI came up with a similar\
    \ solution using a hashmap, with slightly different logic, that might be useful\
    \ sometimes.\n<code>\npublic int[] removeDuplicates(int[] arr) {\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i=0;i<arr.length;i++) {\n \
    \           int currentValue = arr[i];\n            if(map.containsKey(currentValue))\
    \ {\n                map.put(currentValue, map.get(currentValue)+1);\n       \
    \     } else {\n                map.put(currentValue, 1);\n            }\n   \
    \     }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmamoyz8.d(26): Error: declaration expected, not `<`

    /tmp/tmphmamoyz8.d(39): Error: declaration expected, not `for`

    /tmp/tmphmamoyz8.d(39): Error: no identifier for declarator `i`

    /tmp/tmphmamoyz8.d(39): Error: declaration expected, not `<`

    /tmp/tmphmamoyz8.d(39): Error: no identifier for declarator `i`

    /tmp/tmphmamoyz8.d(39): Error: declaration expected, not `++`

    /tmp/tmphmamoyz8.d(41): Error: declaration expected, not `if`

    /tmp/tmphmamoyz8.d(43): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmamoyz8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] result = new long[numbers.length];\n\tint index = 0;\n\t\n\tfor(int i =\
    \ 0; i < numbers.length; i++) {\n\t\tif(numbers[i] != numbers[index]) {\n\t\t\t\
    result[index] = numbers[i];\n\t\t\tindex++;\n\t\t}\n\t}\n\t\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0pniwg7.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpa0pniwg7.__unittest_L24_C1() [0x42800d]

    ??:? void tmpa0pniwg7.__modtest() [0x42816c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430551]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var sorted: long[] = numbers.clone();\n    sorted.sort();\n    var result:\
    \ long[] = [];\n    \n    for (var i = 0, last = sorted.length - 1; i < last;\
    \ ++i) \n    {\n        var value = sorted[i];\n        if (result.indexOf(value)\
    \ != -1) \n        {\n            sorted.splice(i, 1);\n            --i;\n   \
    \         --last;\n        }\n        else\n        {\n            result.push(value);\n\
    \        }\n    }\n    \n    return result;\n}\n</textarea>\n                \
    \    </div>\n                    <div class=\"modal-footer\">\n              \
    \          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"\
    >Close</button>\n                    </div>\n                </div>\n        \
    \    </div>\n        </div>\n    </div>\n    \n    \n    <!--*****************************************************************************************-->\n\
    \    <!--**********                  Search Results Modal View               \
    \      *******************************-->\n    <!--*****************************************************************************************-->\n\
    \    <div class=\"modal fade\" id=\"searchResults\" tabindex=\"-1\" role=\"dialog\"\
    \ aria-labelledby=\"myModalLabel\">\n        <div class=\"modal-dialog\" role=\"\
    document\">\n            <div class=\"modal-content\">\n                <div class=\"\
    modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"\
    modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n\
    \                    <h4 class=\"modal-title\" id=\"myModalLabel\">Search Results</h4>\n\
    \                </div>\n                <div class=\"modal-body\">\n        \
    \            <ul class=\"list-group\">\n                        <li class=\"list-group-item\
    \ active\">\n                            <div class=\"row\">\n               \
    \                 <div class=\"col-md-3\">\n                                 \
    \   <img class=\"thumbnail\" src=\"img/search_result.jpg\" />\n              \
    \                  </div>\n                                <div class=\"col-md-9\"\
    >\n                                    <h4><a href=\"http://www.codewars.com/users/jfarrars/\"\
    \ target=\"_blank\">Jonathan Frarrar</a></h4>\n                              \
    \      <small><span class=\"label label-success\">Achievement</span></small>\n\
    \                                    <p>He is a true master. He can do anything\
    \ he wants without fail and still be very smart.</p>\n                       \
    \             <ul class=\"list-inline\">\n                                   \
    \     <li>\n                                            <h2><a href=\"#\">Followers:</a></h2>\n\
    \                                            <small>0</small>\n              \
    \                          </li>\n                                        <li>\n\
    \                                            <h2><a href=\"#\">Following:</a></h2>\n\
    \                                            <small>0</small>\n              \
    \                          </li>\n                                    </ul>\n\
    \                                    <p>\n                                   \
    \     <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"\
    >Close</button>\n                                    </p>\n                  \
    \              </div>\n                            </div>\n                  \
    \      </li>\n                    </ul>\n                </div>\n            </div>\n\
    \        </div>\n    </div>\n    \n    \n    <!--*****************************************************************************************-->\n\
    \    <!--**********                New Review Modal View                     *******************************-->\n\
    \    <!--*****************************************************************************************-->\n\
    \    <div class=\"modal fade\" id=\"newReview\" tabindex=\"-1\" role=\"dialog\"\
    \ aria-labelledby=\"myModalLabel\">\n        <div class=\"modal-dialog\" role=\"\
    document\">\n            <div class=\"modal-content\">\n                <div class=\"\
    modal-header\">\n                    <button type=\"button\" class=\"close\" data-\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5ykjmgg.d(12): Error: found `sorted` when expecting `;` following
    statement

    /tmp/tmpx5ykjmgg.d(12): Error: found `:` instead of statement

    /tmp/tmpx5ykjmgg.d(14): Error: found `result` when expecting `;` following statement

    /tmp/tmpx5ykjmgg.d(14): Error: found `:` instead of statement

    /tmp/tmpx5ykjmgg.d(33): Error: declaration expected, not `<`

    /tmp/tmpx5ykjmgg.d(51): Error: declaration expected, not `<`

    /tmp/tmpx5ykjmgg.d(100): Error: declaration expected, not `assert`

    /tmp/tmpx5ykjmgg.d(101): Error: declaration expected, not `assert`

    /tmp/tmpx5ykjmgg.d(102): Error: declaration expected, not `assert`

    /tmp/tmpx5ykjmgg.d(103): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5ykjmgg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ nums = new long[numbers.length];\n  int numCount = 0;\n  foreach(int i : numbers)\
    \ {\n    if(nums[numCount] == i) {\n      numCount++;\n    } else {\n      nums[numCount]\
    \ = i;\n      numCount++;\n    }\n  }\n  return nums;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplped96xw.d(14): Error: found `:` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplped96xw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n = numbers.length;\n    long[] numbers_copy = new long[n];\n    for (int\
    \ i = 0; i < n; i++) {\n        int count = 0;\n        for (int j = i; j < n;\
    \ j++) {\n            if (numbers[j] == numbers[i]) {\n                count++;\n\
    \            }\n        }\n        if (count > 1) {\n            numbers_copy[i]\
    \ = numbers[i];\n        }\n    }\n    return numbers_copy;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp881h8_qx.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp881h8_qx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long firstNumber = numbers[0];\n    int i = 1;\n    \n    while(i < numbers.length)\n\
    \    {\n        long currentNumber = numbers[i];\n        \n        if(currentNumber\
    \ == firstNumber)\n        {\n            i++;\n            continue;\n      \
    \  }\n        \n        numbers[i] = firstNumber;\n        firstNumber = currentNumber;\n\
    \        i++;\n    }\n    \n    return numbers;\n}\n/*\n From an array, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    \n    NOTE: This code is faster than remove_duplicates,\
    \ even though remove_duplicates\n    is faster on small arrays and remove_duplicates\
    \ was faster on large arrays.\n    \n    On a 32 bit machine, remove_duplicates\
    \ took about 2.5 seconds to execute on an array of\n    32 integers. On a 64 bit\
    \ machine, remove_duplicates took about 1.6 seconds to execute on an\n    array\
    \ of 64 integers. remove_duplicates was only faster by a factor of about 43.\n\
    */\nlong[] remove_duplicates_fast(long[] numbers)\n{\n    long firstNumber = numbers[0];\n\
    \    int i = 1;\n    \n    while(i < numbers.length)\n    {\n        long currentNumber\
    \ = numbers[i];\n        \n        if(currentNumber == firstNumber)\n        {\n\
    \            i++;\n            continue;\n        }\n        \n        numbers[i]\
    \ = firstNumber;\n        firstNumber = currentNumber;\n        i++;\n    }\n\
    \    \n    return numbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp14oen_g7.d(12): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x42859e]

    ??:? long[] tmp14oen_g7.remove_duplicates(long[]) [0x427e7b]

    ??:? void tmp14oen_g7.__unittest_L65_C1() [0x42801e]

    ??:? void tmp14oen_g7.__modtest() [0x42826c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c54b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430571]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4304fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3b5]

    ??:? runModuleUnitTests [0x42c321]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i = 0;\n  long[] seen = new long[numbers.length];\n  \n  foreach(i; i; i--)\
    \ \n  {\n    if(numbers[i] > 0) \n    {\n      seen[numbers[i] - 1] = numbers[i];\n\
    \    }\n  }\n  \n  return seen;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this approach\
    \ but I'd add two things. First, I'd remove the dependency on any external packages\
    \ such as `std`.  Second, I'd change the return type to `HashSet` rather than\
    \ `long[]`.\n<|/ c |>\n<| a |>\nThis should be O(N^2) where N is the size of the\
    \ input. The idea is to take each element of the input, compare it to the rest\
    \ of them (except the one we're looking at), and store any values that are the\
    \ same in an array. Then return the first N elements in that array.\n<code>\n\
    public static long[] removeDuplicates(long[] numbers) {\n    long[] temp = new\
    \ long[numbers.length];\n    long[] result = new long[numbers.length];\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfqjocmio.d(15): Error: found `;` when expecting `)`

    /tmp/tmpfqjocmio.d(15): Error: found `)` when expecting `;` following statement

    /tmp/tmpfqjocmio.d(25): Error: declaration expected, not `<`

    /tmp/tmpfqjocmio.d(28): Error: unterminated character constant

    /tmp/tmpfqjocmio.d(28): Error: unterminated character constant

    /tmp/tmpfqjocmio.d(28): Error: unterminated character constant

    /tmp/tmpfqjocmio.d(31): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqjocmio.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long count = 0;\n    for (int i = 0; i < numbers.length; i++)\n    {\n    \
    \    if (numbers[i] == numbers[count]) count++;\n        else numbers[i] = numbers[count];\n\
    \    }\n    numbers[numbers.length - 1] = count;\n    return numbers;\n}\n</code>\n\
    <|/ a tags=java |>\n<| a |>\nHere is the code i think will work:\n<code>\npackage\
    \ com.sample;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3xbjtn_.d(21): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3xbjtn_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i, j;\n  long[] result = new long[numbers.length];\n  \n  for (i=0; i < numbers.length;\
    \ i+=1) \n  {\n    long current = numbers[i];\n    for (j=i+1; j < numbers.length;\
    \ j++) \n    {\n      if (current == numbers[j]) \n      {\n        break;\n \
    \     }\n      else\n      {\n        result[j] = current;\n      }\n    }\n \
    \ }\n  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmply80s3v4.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmply80s3v4.__unittest_L32_C1() [0x42801d]

    ??:? void tmply80s3v4.__modtest() [0x42817c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b34a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430561]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b321]

    ??:? runModuleUnitTests [0x42c28d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long result = numbers[0];\n    long[] result = numbers;\n    int i;\n    for(i\
    \ = 0; i < numbers.length; i++){\n        if((numbers[i] != numbers[i+1])){\n\
    \            result = std.array.concat(result, numbers[i]);\n        }\n    }\n\
    \    return result;\n}\n/*\n From an array of integers, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7r5ka7tf.d(13): Error: declaration `tmp7r5ka7tf.remove_duplicates.result`
    is already defined

    /tmp/tmp7r5ka7tf.d(17): Error: undefined identifier `array` in package `std`

    /tmp/tmp7r5ka7tf.d(20): Error: cannot implicitly convert expression `result` of
    type `long` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7r5ka7tf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  std.long.sort(numbers);\n\
    \  int n = numbers.length, i, j;\n  long[] unique = new long[n];\n  int count\
    \ = 0;\n  for (i = 0; i < n; ++i) {\n    if (numbers[i] != numbers[i - 1]) {\n\
    \      unique[count++] = numbers[i];\n    }\n  }\n  unique.length = count;\n \
    \ return unique;\n}\n/*\n From an array of floats, remove all elements that occur\
    \ more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([2.5f, 7.5f])\n    [2.5f, 7.5f]\n    \n*/\nfloat[]\
    \ remove_duplicates(float[] numbers) \n{\n  std.float.sort(numbers);\n  int n\
    \ = numbers.length, i, j;\n  float[] unique = new float[n];\n  int count = 0;\n\
    \  for (i = 0; i < n; ++i) {\n    if (numbers[i] != numbers[i - 1]) {\n      unique[count++]\
    \ = numbers[i];\n    }\n  }\n  unique.length = count;\n  return unique;\n}\n/*\n\
    \ From an array of doubles, remove all elements that occur more than once.\n \
    \   Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1.1,\
    \ 2.5, 3.3])\n    [1.1, 2.5, 3.3]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n  std.double.sort(numbers);\n  int n = numbers.length, i, j;\n\
    \  double[] unique = new double[n];\n  int count = 0;\n  for (i = 0; i < n; ++i)\
    \ {\n    if (numbers[i] != numbers[i - 1]) {\n      unique[count++] = numbers[i];\n\
    \    }\n  }\n  unique.length = count;\n  return unique;\n}\n/*\n From an array\
    \ of strings, remove all elements that occur more than once.\n    Keep order of\
    \ elements left the same as in the input.\n    >>> remove_duplicates([\"a\", \"\
    b\", \"c\", \"b\", \"d\"])\n    [\"a\", \"b\", \"c\", \"d\"]\n    \n*/\nstring\
    \ remove_duplicates(string[] strings) \n{\n  std.string.sort(strings);\n  int\
    \ n = strings.length, i, j;\n  string[] unique = new string[n];\n  int count =\
    \ 0;\n  for (i = 0; i < n; ++i) {\n    if (strings[i] != strings[i - 1]) {\n \
    \     unique[count++] = strings[i];\n    }\n  }\n  unique.length = count;\n  return\
    \ unique;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphiw0pr6s.d(12): Error: identifier expected following `.`, not `long`

    /tmp/tmphiw0pr6s.d(33): Error: identifier expected following `.`, not `float`

    /tmp/tmphiw0pr6s.d(54): Error: identifier expected following `.`, not `double`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphiw0pr6s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] result = new long[numbers.length];\n\tint j = 0;\n\t\n\tfor(int i=0; i\
    \ < numbers.length; i++)\n\t{\n\t\tif(numbers[i] != numbers[j])\n\t\t{\n\t\t\t\
    result[j] = numbers[i];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr3gzctc6.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ed]

    ??:? void tmpr3gzctc6.__unittest_L25_C1() [0x42800d]

    ??:? void tmpr3gzctc6.__modtest() [0x42816c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b33a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305c5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a74]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430551]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b311]

    ??:? runModuleUnitTests [0x42c27d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288b0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] newNums = new long[numbers.length];\n    int[] counters = new int[numbers.length];\n\
    \    \n    for (int i = 0; i < numbers.length; ++i)\n    {\n        if (counters[i]\
    \ == 0)\n        {\n            counters[i] = 1;\n            newNums[i] = numbers[i];\n\
    \        }\n        else\n        {\n            if (numbers[i] != newNums[i])\n\
    \            {\n                counters[i] = 1;\n                newNums[i] =\
    \ numbers[i];\n            }\n        }\n    }\n    return newNums;\n}\n</code>\n\
    <|/ a tags=java,arrays,algorithm |>\n<| a dscore=0 tags=java,arrays,algorithm\
    \ |>\nThis question is tagged with java, so here is an alternative solution in\
    \ Java\n<code>\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4f0b5h_n.d(33): Error: declaration expected, not `<`

    /tmp/tmp4f0b5h_n.d(42): Error: declaration expected, not `assert`

    /tmp/tmp4f0b5h_n.d(43): Error: declaration expected, not `assert`

    /tmp/tmp4f0b5h_n.d(44): Error: declaration expected, not `assert`

    /tmp/tmp4f0b5h_n.d(45): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4f0b5h_n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  // TODO:\n    long[] result = new long[numbers.length];\n    int count = 1;\n\
    \    for (int i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i]\
    \ != numbers[i - 1]) \n        {\n            result[count++] = numbers[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| a tags=c#,.net,collections\
    \ dscore=0 |>\nYou want to use LINQ and use the Distinct function.\n<|/ a |>\n\
    <| a |>\n<code>\npublic static class ArrayExtensions\n{\n    public static T[]\
    \ RemoveDuplicates<T>(this T[] source)\n    {\n        if (source == null) throw\
    \ new ArgumentNullException(\"source\");\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnzqvkfm5.d(24): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzqvkfm5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] res = null;\n    int index = 0;\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        int count = 0;\n        int pos = -1;\n        for(int\
    \ j = 0; j < numbers.length; j++)\n        {\n            if(numbers[j] == numbers[i])\n\
    \            {\n                count++;\n                if(pos < 0)\n      \
    \              pos = j;\n            }\n        }\n        if(count > 1)\n   \
    \     {\n            long x = numbers[pos];\n            while(numbers[index]\
    \ != x)\n            {\n                numbers[index] = numbers[index + 1];\n\
    \                index++;\n            }\n        }\n    }\n    while(index <\
    \ numbers.length)\n    {\n        numbers[index] = numbers[index + 1];\n     \
    \   index++;\n    }\n    if(res == null)\n        res = numbers;\n    else\n \
    \       Arrays.fill(res, index, numbers.length, numbers[0]);\n    return res;\n\
    }\n</code>\nThe above code is not optimized at all, but it is functional. It could\
    \ probably be optimized a lot more to make it more efficient, but it is more fun\
    \ to write and maintain.\n<|/ a dscore=3 |>\n<| a tags=c#,linq,arrays,c#-7.0 |>\n\
    If you want a function that takes an array of integers and returns a new array\
    \ without duplicate integers:\n<code>\npublic static int[] RemoveDuplicates(int[]\
    \ list)\n{\n    var distinctList = list.Distinct().ToArray();\n    var distinctArray\
    \ = new int[distinctList.Length];\n    distinctList.CopyTo(distinctArray, 0);\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp32co2a54.d(48): Error: declaration expected, not `<`

    /tmp/tmp32co2a54.d(58): Error: unexpected `(` in declarator

    /tmp/tmp32co2a54.d(58): Error: basic type expected, not `0`

    /tmp/tmp32co2a54.d(58): Error: found `0` when expecting `)`

    /tmp/tmp32co2a54.d(58): Error: no identifier for declarator `distinctList.CopyTo(distinctArray,
    _error_)`

    /tmp/tmp32co2a54.d(58): Error: semicolon expected following function declaration

    /tmp/tmp32co2a54.d(58): Error: declaration expected, not `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp32co2a54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i = 0;\n  long prev = 0;\n  while (i < numbers.length) \n  {\n    long current\
    \ = numbers[i];\n    if (current == prev)\n    {\n      numbers[i++] = current;\n\
    \      continue;\n    }\n    prev = current;\n  }\n  return numbers;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzsg2ev_d.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283a5]

    ??:? void tmpzsg2ev_d.__unittest_L26_C1() [0x428079]

    ??:? void tmpzsg2ev_d.__modtest() [0x428128]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c403]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b296]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430429]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4308d8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4303b5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b26d]

    ??:? runModuleUnitTests [0x42c1d9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428868]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ ret = new long[numbers.length];\n  Arrays.sort(numbers);\n  int prev = 0;\n\
    \  for(int i = 0; i < numbers.length; i++)\n  {\n    if(prev == numbers[i])\n\
    \      continue;\n    ret[numbers.length - i - 1] = numbers[i];\n    prev = numbers[i];\n\
    \  }\n  return ret;\n}\n</code>\n<|/ a tags=arrays,c#,linq,functional-programming\
    \ |>\n<| a tags=arrays,c#,linq,functional-programming |>\n<code>\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc4eyrbiv.d(24): Error: declaration expected, not `<`

    /tmp/tmpc4eyrbiv.d(32): Error: declaration expected, not `assert`

    /tmp/tmpc4eyrbiv.d(33): Error: declaration expected, not `assert`

    /tmp/tmpc4eyrbiv.d(34): Error: declaration expected, not `assert`

    /tmp/tmpc4eyrbiv.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4eyrbiv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] a = new long[numbers.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < numbers.length; i++) \n    {\n        if (a[i] != numbers[i]) \n        {\n\
    \            a[j] = numbers[i];\n            j++;\n        }\n    }\n    return\
    \ a;\n}\n/*\n From an array of integers, remove all elements that occur more than\
    \ once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt_s6m_73.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283fd]

    ??:? void tmpt_s6m_73.__unittest_L31_C1() [0x4280cd]

    ??:? void tmpt_s6m_73.__modtest() [0x42817c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4b7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b34a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305d5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a84]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430561]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b321]

    ??:? runModuleUnitTests [0x42c28d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4288c0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ ret = new long[numbers.length];\n  \n  for (int i = 0; i < numbers.length; i++)\n\
    \  {\n    ret[i] = numbers[i];\n    for (int j = i; j < numbers.length; j++)\n\
    \      if (numbers[j] == numbers[i])\n        ret[j]++;\n  }\n  return ret;\n\
    }\n</code>\n<|/ a tags=c# |>\n<| c |>\nThis code does work, but does not answer\
    \ the question, which is \"how to remove duplicates from a `long[]`\".\n<|/ c\
    \ |>\n<| c |>\nAgreed, that's why I added the comment on the question.\n<|/ c\
    \ |>\n<| c |>\nNo, you didn't, you answered the question by providing sample code,\
    \ that didn't even compile with OP's code.\n<|/ c |>\n<| c |>\nThe question isn't\
    \ \"How to remove duplicates\" but \"How to detect duplicates\". I think it's\
    \ still a good answer though :)\n<|/ c |>\n<| c |>\nThis code does NOT solve the\
    \ problem of detecting duplicates! This code will result in a duplicate-free `int[]`,\
    \ but you still don't know which element was repeated. Thus, `RemoveDuplicates`\
    \ is no help for this problem\n<|/ c |>\n<| a |>\nHere's my variation of the solution\
    \ proposed in the comments. Apologies for the horrible variable names.\n<code>\n\
    public static bool AreDuplicates<T>(this T[] array, Func<T, T, bool> comparer)\n\
    {\n    var distinct = new HashSet<T>();\n    bool distinctEnded = false;\n   \
    \ foreach (var item in array)\n    {\n        if (!distinct.Contains(item) &&\
    \ comparer.Invoke(item, item))\n        {\n            distinct.Add(item);\n \
    \           distinctEnded = true;\n        }\n    }\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpycreoxau.d(23): Error: declaration expected, not `<`

    /tmp/tmpycreoxau.d(29): Error: unterminated character constant

    /tmp/tmpycreoxau.d(32): Error: unterminated character constant

    /tmp/tmpycreoxau.d(32): Error: unterminated character constant

    /tmp/tmpycreoxau.d(32): Error: unterminated character constant

    /tmp/tmpycreoxau.d(35): Error: unterminated character constant

    /tmp/tmpycreoxau.d(35): Error: unterminated character constant

    /tmp/tmpycreoxau.d(38): Error: unterminated character constant

    /tmp/tmpycreoxau.d(41): Error: unterminated character constant

    /tmp/tmpycreoxau.d(47): Error: declaration expected, not `foreach`

    /tmp/tmpycreoxau.d(52): Error: no identifier for declarator `distinctEnded`

    /tmp/tmpycreoxau.d(52): Error: declaration expected, not `=`

    /tmp/tmpycreoxau.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpycreoxau.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var result = new long[numbers.length];\n    var hash = new int[numbers.Length];\n\
    \    foreach(var n in numbers)\n    {\n        if(hash[n] == 0)\n        {\n \
    \           result[hash[n]] = n;\n            hash[n]++;\n        }\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=c#,arrays dscore=1 |>\n<| c |>\nThe\
    \ algorithm is correct but the code is horrible. You should at least explain the\
    \ algorithm and code with comments. Otherwise nobody will understand what you're\
    \ doing.\n<|/ c |>\n<| c |>\nThis code does not even compile. The `hash` array\
    \ is not an array, but a list. I also don't understand why you use `Enumerable.Range`\
    \ to loop through a list. In your `foreach` loop you are using `numbers`, but\
    \ that is a `long[]`, not a `List<long>`.\n<|/ c |>\n<| c |>\nI added comments\
    \ to the code with explanation.\n<|/ c |>\n<| a dscore=1 |>\nHere are my solutions.\n\
    First one with Linq Aggregate (for me, the most simple one).\n<code>\nlong[] numbers\
    \ = new long[] { 1, 2, 2, 2, 3 };\nvar result = numbers.Aggregate<long, long>((x,\
    \ y) => x == y ? x : x);\n</code>\nSecond one with Enumerable GroupBy:\n<code>\n\
    long[] numbers = new long[] { 1, 2, 2, 2, 3 };\nvar result = numbers.GroupBy(n\
    \ => n).Select(n => n.Key).ToArray();\n</code>\n<|/ a tags=c#,arrays |>\n<| c\
    \ |>\nIn fact your first solution does not compile, since you can't put a `long`\
    \ in an `int[]` initializer. At least not with the default settings.\n<|/ c |>\n\
    <| c |>\nI agree, my bad. Fixed it. Thanks!\n<|/ c |>\n<| c |>\nWhy should I use\
    \ `Aggregate` to calculate the sum? `GroupBy` does just the same - but in a different\
    \ way.\n<|/ c |>\n<| c |>\nYes, you are right. I didn't think about it. I changed\
    \ my solution to `GroupBy` now and it's more simple than `Aggregate`. Thanks!\n\
    <|/ c |>\n<| a tags=c#,arrays dscore=0 |>\nThe answer of Michael L. is good and\
    \ works well but unfortunately the time complexity is O(n^2). The best approach\
    \ is to iterate only through the array once but to build a new array (of size\
    \ n), where you put \nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphbv1nlb7.d(14): Error: found `in` when expecting `;`

    /tmp/tmphbv1nlb7.d(24): Error: declaration expected, not `<`

    /tmp/tmphbv1nlb7.d(27): Error: unterminated character constant

    /tmp/tmphbv1nlb7.d(30): Error: unterminated character constant

    /tmp/tmphbv1nlb7.d(40): Error: found `,` when expecting `.` following long

    /tmp/tmphbv1nlb7.d(40): Error: found `long` when expecting identifier following
    `long`.

    /tmp/tmphbv1nlb7.d(40): Error: semicolon expected, not `>`

    /tmp/tmphbv1nlb7.d(40): Error: declaration expected, not `>`

    /tmp/tmphbv1nlb7.d(41): Error: declaration expected, not `<`

    /tmp/tmphbv1nlb7.d(46): Error: declaration expected, not `<`

    /tmp/tmphbv1nlb7.d(49): Error: unterminated character constant

    /tmp/tmphbv1nlb7.d(58): Error: unterminated character constant

    /tmp/tmphbv1nlb7.d(58): Error: unterminated character constant

    /tmp/tmphbv1nlb7.d(66): Error: declaration expected, not `assert`

    /tmp/tmphbv1nlb7.d(67): Error: declaration expected, not `assert`

    /tmp/tmphbv1nlb7.d(68): Error: declaration expecte'
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long\
    \ result = long.MinValue;\n  long lastValue = long.MinValue;\n  foreach(long num\
    \ in numbers)\n  {\n    if(num != lastValue && num != result)\n    {\n      result\
    \ = num;\n      lastValue = num;\n    }\n  }\n  return new long[] {result};\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=linq,distinct,arrays |>\nHere's a solution\
    \ that takes advantage of LINQ's DistinctBy implementation:\n<code>\nprivate static\
    \ int[] RemoveDuplicates(int[] arr)\n{\n    return arr.DistinctBy(x => x).ToArray();\n\
    }\n</code>\nThis is my favorite solution. It only has to iterate through the array\
    \ once per unique element. Since DistinctBy is implemented in terms of Distinct\
    \ (at least in .NET Core) it can avoid iterating through the collection multiple\
    \ times. \nThe benefit of this method is that it does not rely on LINQ's implementation,\
    \ and doesn't need to create an anonymous type.\n<|/ a dscore=2 |>\n<| a tags=linq,distinct,arrays\
    \ |>\nIn case you use .Net Core, it will be much easier, because it's already\
    \ implemented and can be done in one line.\n<code>\nvar distinct = arr.Distinct();\
    \ //remove duplicates\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThat's a very nice\
    \ feature, but unfortunately it does remove all duplicates and is not an option\
    \ if you have a lot of duplicate elements.\n<|/ c |>\n<| a |>\nIf you prefer a\
    \ solution that uses the Aggregate method, then this should work:\n<code>\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2sooeci.d(14): Error: found `in` when expecting `;`

    /tmp/tmpk2sooeci.d(22): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpk2sooeci.d(22): Error: found `}` when expecting `;` following statement

    /tmp/tmpk2sooeci.d(22): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpk2sooeci.d(24): Error: declaration expected, not `<`

    /tmp/tmpk2sooeci.d(27): Error: unterminated character constant

    /tmp/tmpk2sooeci.d(27): Error: unterminated character constant

    /tmp/tmpk2sooeci.d(32): Error: unrecognized declaration

    /tmp/tmpk2sooeci.d(35): Error: unterminated character constant

    /tmp/tmpk2sooeci.d(35): Error: unterminated character constant

    /tmp/tmpk2sooeci.d(38): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2sooeci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    int size = numbers.length;\n\tlong[] newnumbers = new long[size];\n\tint j = 0;\n\
    \tfor (int i=0; i<numbers.length; i++)\n\t{\n\t\tif (newnumbers[j] == numbers[i])\n\
    \t\t\tnewnumbers[j] = -1;\n\t\telse\n\t\t\tnewnumbers[j] = numbers[i];\n\t\tj++;\n\
    \t}\n\treturn newnumbers;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp050a1z90.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp050a1z90.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  int k = 0;\n  long curr = numbers[0];\n\
    \  int n = numbers.length;\n  while (k < n) {\n    long n = numbers[k];\n    if\
    \ (n == curr) {\n      ++k;\n    } else if (n > curr) {\n      result[k] = curr;\n\
    \      curr = n;\n      ++k;\n    } else {\n      ++k;\n      result[k] = n;\n\
    \    }\n  }\n  result[k] = curr;\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptn42ui_5.d(15): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    /tmp/tmptn42ui_5.d(17): Error: variable `n` is shadowing variable `tmptn42ui_5.remove_duplicates.n`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptn42ui_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int count = 0;\n    long[] result = new long[numbers.length];\n    for (int\
    \ i = 0; i<numbers.length; i++) \n    {\n        if (numbers[i] != numbers[count])\
    \ \n        {\n            result[count] = numbers[i];\n            count++;\n\
    \        }\n    }\n    return new long[count];\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=algorithm,python,java |>\nHere is my solution in Python :\n<code>\n\
    nums = [1,2,2,3,4,4,4,5,6]\nn = len(nums)\nfor i in range(0,n):\n  if nums[i]\
    \ != nums[i+1]:\n    nums[i] = nums[i+1]\n  else:\n    nums.pop()\n</code>\nThe\
    \ idea is to compare each consecutive element in the array and if they are equal,\
    \ then remove the first one.\n<|/ a dscore=1 |>\n<| a dscore=1 tags=algorithm,python,java\
    \ |>\nPythonic solution:\n<code>\nnumbers = [1,2,2,3,4,4,4,5,6]\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpat0zifqg.d(24): Error: declaration expected, not `<`

    /tmp/tmpat0zifqg.d(47): Error: declaration expected, not `assert`

    /tmp/tmpat0zifqg.d(48): Error: declaration expected, not `assert`

    /tmp/tmpat0zifqg.d(49): Error: declaration expected, not `assert`

    /tmp/tmpat0zifqg.d(50): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpat0zifqg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var results = new long[numbers.length];\n    var seen = new bool[numbers.length];\n\
    \    \n    // Sort the input array by descending number\n    Arrays.sort(numbers,\
    \ (a, b) => b - a);\n    \n    for (int i = 0; i < numbers.length; ++i) {\n  \
    \      if (seen[i]) {\n            continue;\n        }\n        seen[i] = true;\n\
    \        results[i] = numbers[i];\n    }\n    return results;\n}\nunittest\n{\n\
    \    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4fgsqnc5.d(12): Error: undefined identifier `var`

    /tmp/tmp4fgsqnc5.d(13): Error: undefined identifier `var`

    /tmp/tmp4fgsqnc5.d(16): Error: undefined identifier `Arrays`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4fgsqnc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ result = 0;\n  for (int i = 0; i < numbers.length; i++)\n    if (numbers[result]\
    \ != numbers[i])\n      result = i;\n  if (result < numbers.length) \n    throw\
    \ new RuntimeException(\"remove_duplicates: array has duplicate entries\");\n\
    \  long[] result = new long[numbers.length];\n  for (int i = 0; i < numbers.length;\
    \ i++)\n    result[i] = numbers[i];\n  return result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfn27ryp.d(17): Error: undefined identifier `RuntimeException`

    /tmp/tmpwfn27ryp.d(18): Error: declaration `tmpwfn27ryp.remove_duplicates.result`
    is already defined

    /tmp/tmpwfn27ryp.d(20): Error: only one index allowed to index `int`

    /tmp/tmpwfn27ryp.d(21): Error: cannot implicitly convert expression `result` of
    type `int` to `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfn27ryp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long count = 0;\n    long[] result = new long[numbers.length];\n    for (int\
    \ i = 0; i < numbers.length; i++) \n    {\n        if (numbers[i] != count) \n\
    \        {\n            result[count] = numbers[i];\n            count++;\n  \
    \      }\n    }\n    return Arrays.copyOfRange(result, 0, count);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI don't think this works.  I think it will remove\
    \ the duplicates, but it will also mess up the order\n<|/ c |>\n<| c |>\nIt doesn't\
    \ mess up the order because the input is not sorted.\n<|/ c |>\n<| c |>\nYes,\
    \ that would be a problem if the input were sorted (which it isn't).\n<|/ c |>\n\
    <| c |>\nThis works great for small arrays, but takes too much time for large\
    \ arrays (my case with about 200k numbers). I think the reason is that, as the\
    \ size of the array increases, the time taken increases as well. I was wondering\
    \ if there is a way to improve the performance without sorting the array.\n<|/\
    \ c |>\n<| c |>\nAs mentioned, this works for a sorted list.  If you don't want\
    \ to sort the list, simply reverse the result.  Also, you can eliminate the `count`\
    \ variable by using `numbers[i]` instead.\n<|/ c |>\n<| a |>\nIt sounds like you're\
    \ interested in finding runs of equal numbers in a sequence.  Here's a solution\
    \ in Clojure with a bit of Java interop so it should be pretty efficient if your\
    \ sequences are large.\n<code>\n(defn runs\n  \"Returns a sequence of all runs\
    \ in the given sequence whose values\n   are the same as the first value in the\
    \ sequence.\"\n  [s rs]\n  (loop [s s rs rs nil runs []]\n    (cond\n      (empty?\
    \ s) (reverse runs)\n      (= (first s) (first rs)) (recur (rest s) (rest rs)\
    \ nil runs)\n      (= (first rs) (first s)) (cons (first s) (cons (first rs) (cons\
    \ runs nil)))\n      (= (rest s) (rest rs)) (cons (first rs) (cons runs nil))\n\
    \      (= (rest rs) s) (cons (first rs) (cons runs nil))\n      (empty? rs) (cons\
    \ (first s) (cons runs nil))\n      (= (rest s) (rest rs)) (cons (first rs) (cons\
    \ runs nil))\n      (= (rest rs) s) (cons (first rs) (cons runs nil))\n      (\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxajlhkb5.d(24): Error: declaration expected, not `<`

    /tmp/tmpxajlhkb5.d(27): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(30): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(33): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(39): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(42): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(42): Error: unterminated character constant

    /tmp/tmpxajlhkb5.d(63): Error: declaration expected, not `assert`

    /tmp/tmpxajlhkb5.d(64): Error: declaration expected, not `assert`

    /tmp/tmpxajlhkb5.d(65): Error: declaration expected, not `assert`

    /tmp/tmpxajlhkb5.d(66): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxajlhkb5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] noDuplicates = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if (noDuplicates[numbers[i]] != null) continue;\n     \
    \   noDuplicates[numbers[i]] = numbers[i];\n    }\n    return noDuplicates;\n\
    }\n'''\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx87xv_2b.d(20): Error: unterminated character constant

    /tmp/tmpx87xv_2b.d(20): Error: declaration expected, not `63U`

    /tmp/tmpx87xv_2b.d(20): Error: unterminated character constant

    /tmp/tmpx87xv_2b.d(25): Error: declaration expected, not `assert`

    /tmp/tmpx87xv_2b.d(26): Error: declaration expected, not `assert`

    /tmp/tmpx87xv_2b.d(27): Error: declaration expected, not `assert`

    /tmp/tmpx87xv_2b.d(28): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx87xv_2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long current = numbers[0];\n    long[] result = new long[numbers.length];\n\
    \    for(int i = 0; i < numbers.length; i++)\n    {\n        if(numbers[i] !=\
    \ current)\n            result[result.length] = numbers[i];\n        current =\
    \ numbers[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpfzuj5_hy.d(12): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4284ce]

    ??:? long[] tmpfzuj5_hy.remove_duplicates(long[]) [0x427e2b]

    ??:? void tmpfzuj5_hy.__unittest_L22_C1() [0x427f4e]

    ??:? void tmpfzuj5_hy.__modtest() [0x42819c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4d7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b36a]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305f5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430aa4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430581]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b341]

    ??:? runModuleUnitTests [0x42c2ad]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    var ans = new long[numbers.length];\n\tvar j = 0;\n\tvar i = 0;\n\twhile (i<numbers.length-1)\n\
    \t{\n\t\tif (numbers[i]!=numbers[i+1])\n\t\t\tans[j++] = numbers[i++];\n\t\telse\n\
    \t\t\ti++;\n\t}\n\tans[j] = numbers[i++];\n\treturn ans;\n}\n/*\n From an array\
    \ of doubles, remove all elements that occur more than once.\n    Keep order of\
    \ elements left the same as in the input.\n    >>> remove_duplicates([1.2, 2.3,\
    \ 3.4, 2.3, 4.5])\n    [1.2, 3.4, 4.5]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n\tvar ans = new double[numbers.length];\n\tvar j = 0;\n\tvar i\
    \ = 0;\n\twhile (i<numbers.length-1)\n\t{\n\t\tif (numbers[i]!=numbers[i+1])\n\
    \t\t\tans[j++] = numbers[i++];\n\t\telse\n\t\t\ti++;\n\t}\n\tans[j] = numbers[i++];\n\
    \treturn ans;\n}\n/*\n From an array of strings, remove all elements that occur\
    \ more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([\"A\",\"B\",\"C\",\"B\",\"D\"])\n    [\"A\",\"B\"\
    ,\"C\",\"D\"]\n    \n*/\nstring[] remove_duplicates(string[] numbers) \n{\n\t\
    var ans = new string[numbers.length];\n\tvar j = 0;\n\tvar i = 0;\n\twhile (i<numbers.length-1)\n\
    \t{\n\t\tif (numbers[i]!=numbers[i+1])\n\t\t\tans[j++] = numbers[i++];\n\t\telse\n\
    \t\t\ti++;\n\t}\n\tans[j] = numbers[i++];\n\treturn ans;\n}\nunittest\n{\n   \
    \ alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n \
    \   assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpazh3bur1.d(12): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(13): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(14): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(34): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(35): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(36): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(56): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(57): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(58): Error: undefined identifier `var`

    /tmp/tmpazh3bur1.d(73): Error: `tmpazh3bur1.remove_duplicates` called with argument
    types `(void[])` matches both:

    /tmp/tmpazh3bur1.d(10):     `tmpazh3bur1.remove_duplicates(long[] numbers)`

    and:

    /tmp/tmpazh3bur1.d(54):     `tmpazh3bur1.remove_duplicates(string[] numbers)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazh3bur1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    var result: long[] = numbers.dup;\n\tint i = 0;\n\twhile (i < result.length -\
    \ 1) {\n\t\tif (result[i] == result[i+1]) {\n\t\t\tresult.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\n/* End of\
    \ functions */\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1fislg5o.d(12): Error: found `result` when expecting `;` following
    statement

    /tmp/tmp1fislg5o.d(12): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1fislg5o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    long hash = 1;\n    \n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        \n        long num = numbers[i];\n\
    \        long found = 1;\n        \n        while (num != hash) {\n          \
    \  \n            hash *= 10L;\n            found *= hash;\n            hash +=\
    \ num;\n        }\n        \n        if (found > 1) result[i - found] = num;\n\
    \    }\n    \n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164023
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  var\
    \ result = new long[numbers.length];\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptz58s_1n.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptz58s_1n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  // TODO Auto-generated method stub\n    long[] result = new long[numbers.length];\n\
    \    int idx = 0;\n    int current = 0;\n    while (idx < result.length && current\
    \ < numbers.length) {\n        if (numbers[current] == numbers[idx]) {\n     \
    \       current++;\n        } else {\n            result[idx] = numbers[current];\n\
    \            current++;\n        }\n        idx++;\n    }\n    return Arrays.copyOf(result,\
    \ idx);\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbd7m4n03.d(25): Error: undefined identifier `Arrays`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbd7m4n03.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long ret = 0;\n    long i = 0;\n    bool last = false;\n    for (; i < numbers.length;\
    \ ++i) {\n        if (numbers[i] != ret)\n        {\n            last = true;\n\
    \            ret = numbers[i];\n        }\n    }\n    if (last)\n    {\n     \
    \   return numbers;\n    }\n    long[] res = new long[numbers.length-1];\n   \
    \ int j = 0;\n    for (int k = 0; k < numbers.length; ++k) {\n        if (numbers[k]\
    \ != ret)\n        {\n            res[j] = ret;\n            j++;\n        }\n\
    \    }\n    return res;\n}\n</code>\n<|/ a |>\n<| a |>\nThis code is also working\
    \ for me for removing the duplicates from an ArrayList:\n<code>\nprivate void\
    \ removeDups(ArrayList < String > list) {\n    int count = 0;\n    for (int i\
    \ = 0; i < list.size(); i++) {\n        for (int j = 0; j < list.size(); j++)\
    \ {\n            if (list.get(i).equals(list.get(j))) {\n                count++;\n\
    \            }\n        }\n        if (count < list.size() / 2) {\n          \
    \  list.remove(i);\n            i--;\n        }\n        count = 1;\n    }\n}\n\
    </code>\n<|/ a dscore=0 tags=arraylist,java |>\n<| a |>\n<code>\npublic class\
    \ RemoveDuplicatesFromList {\n    \n    public static void main(String[] args)\
    \ {\n        \n        List<Integer> numbers = new ArrayList<>();\n        numbers.add(1);\n\
    \        numbers.add(3);\n        numbers.add(2);\n        numbers.add(1);\n \
    \       numbers.add(2);\n        numbers.add(3);\n        numbers.add(3);\n  \
    \      numbers.add(4);\n        \n        List<Integer> result = RemoveDuplicatesFromList.getUnique(numbers);\n\
    \        \n        result.forEach(System.out::println);\n    }\n    \n    public\
    \ static List<Integer> getUnique(List<Integer> list) {\n        List<Integer>\
    \ result = new ArrayList<>();\n        \n        Set<Integer> set = new HashSet<>();\n\
    \        \n        for(int i : list) {\n            if (!set.contains(i)) {\n\
    \                result.add(i);\n                set.add(i);\n            }\n\
    \        }\n        \n        return result;\n    }\n}\n</code>\n<|/ a tags=arraylist,java\
    \ dscore=0 |>\n<| a dscore=0 |>\nA Java 8 way of doing this. First filter the\
    \ list to get the unique numbers. Then collect them and convert them to the List.\
    \ This solution creates a new list object rather than modifying the original one\
    \ as mentioned in the other answers.\n<code>\nList<Integer> uniqueList = list.stream().distinct().collect(Collectors.toList());\n\
    </code>\n<|/ a tags=arraylist,java |>\n<| a tags=arraylist,java dscore=0 |>\n\
    <code>\nList<\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fr0qtmb.d(37): Error: declaration expected, not `<`

    /tmp/tmp5fr0qtmb.d(44): Error: declaration expected, not `for`

    /tmp/tmp5fr0qtmb.d(44): Error: no identifier for declarator `i`

    /tmp/tmp5fr0qtmb.d(44): Error: declaration expected, not `<`

    /tmp/tmp5fr0qtmb.d(44): Error: no identifier for declarator `i`

    /tmp/tmp5fr0qtmb.d(44): Error: declaration expected, not `++`

    /tmp/tmp5fr0qtmb.d(45): Error: no identifier for declarator `j`

    /tmp/tmp5fr0qtmb.d(45): Error: declaration expected, not `<`

    /tmp/tmp5fr0qtmb.d(45): Error: no identifier for declarator `j`

    /tmp/tmp5fr0qtmb.d(45): Error: declaration expected, not `++`

    /tmp/tmp5fr0qtmb.d(48): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fr0qtmb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long uniques[] = numbers;\n    for(long n: uniques) {\n        long count =\
    \ numbers.length;\n        for(int i = 0; i < count; ++i)\n            if(n !=\
    \ numbers[i])\n                count--;\n        if(count > 1)\n            uniques[count-1]\
    \ = n;\n    }\n    return uniques;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9zldaji.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] uniques`

    /tmp/tmpn9zldaji.d(13): Error: semicolon expected, not `:`

    /tmp/tmpn9zldaji.d(13): Error: expression expected, not `:`

    /tmp/tmpn9zldaji.d(13): Error: found `uniques` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9zldaji.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long count = countMap.value(numbers);\n    long[] result = new long[count];\n\
    \    for (int i = 0; i < count; i++) {\n        result[i] = numbers[i];\n    }\n\
    \    return result ;\n}\n/*\n From an array of integers, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdst45kk4.d(12): Error: undefined identifier `countMap`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdst45kk4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] noDups = new long[numbers.length];\n    int k = 0;\n    \n    for (int\
    \ i = 0; i < numbers.length; i++)\n    {\n        long temp = numbers[i];\n  \
    \      int count = 0;\n        \n        for (int j = k; j < numbers.length; j++)\n\
    \        {\n            if (numbers[j] == temp)\n            {\n             \
    \   count++;\n            }\n        }\n        \n        if (count > 1)\n   \
    \     {\n            noDups[k] = temp;\n            k++;\n        }\n    }\n \
    \   \n    return noDups;\n}\n</code>\n<|/ a |>\n<| c |>\nYou should replace `if\
    \ (count > 1)` with `if (count != 1)` because `count` could be `0` - i.e. if `numbers[k]\
    \ == temp` it could be `count` could be `0` then `count++` could result in an\
    \ overflow.\n<|/ c |>\n<| a tags=java,algorithm |>\nHere's my C# translation of\
    \ your python snippet:\n<code>\npublic class RemoveDuplicates {\n    public static\
    \ long[] RemoveDuplicates(long[] numbers)\n    {\n        long counter = 0;\n\
    \        long[] noDups = new long[numbers.Length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7btfqbsp.d(37): Error: declaration expected, not `<`

    /tmp/tmp7btfqbsp.d(43): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7btfqbsp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long result[] = new long[numbers.length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptr5qa_2e.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmptr5qa_2e.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptr5qa_2e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var result = new long[numbers.length];\n    var index = 0;\n    for (long num\
    \ : numbers) {\n        result[index++] = num;\n        if (num > 0) {\n     \
    \       int[] count = new int[numbers.Length];\n            for (int i = 0; i\
    \ < numbers.Length; i++)\n                count[i] = 0;\n            for (int\
    \ i = 0; i < numbers.Length; i++)\n                count[numbers[i]] = 1;\n  \
    \          for (int i = index - 1; i >= 0; i--) {\n                int count =\
    \ 0;\n                long num = result[i];\n                for (int j = 0; j\
    \ < numbers.Length; j++) {\n                    if (count[numbers[j]]) {\n   \
    \                     count[numbers[j]]++;\n                        break;\n \
    \                   }\n                    count[numbers[j]] = 1;\n          \
    \      }\n                if (count == numbers.Length) {\n                   \
    \ result[i] = num;\n                }\n            }\n        }\n    }\n    return\
    \ result.Take(index).ToArray();\n}\n</code>\n<|/ a |>\n<| a tags=c#,arrays,duplicates\
    \ |>\nYou can create Dictionary with unique elements and after that iterate through\
    \ dictionary and fill new array:\n<code>\n        int[] arr1 = new int[] { 1,\
    \ 2, 3 };\n        int[] arr2 = new int[] { 1, 2, 4 };\n        Dictionary<int,\
    \ int> dic = new Dictionary<int, int>();\n        foreach (int i in arr1)\n  \
    \      {\n            dic[i] = 1;\n        }\n        foreach (int i in arr2)\n\
    \        {\n            if (!dic.ContainsKey(i))\n            {\n            \
    \    dic.Add(i, 1);\n            }\n        }\n        int[] resultArray = new\
    \ int[dic.Keys.Count];\n        for (int i = 0; i < resultArray.Length; i++)\n\
    \        {\n            resultArray[i] = dic.Keys.ElementAt(i);\n        }\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 tags=c#,arrays,duplicates |>\n<code>\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqq03j8bx.d(14): Error: semicolon expected, not `:`

    /tmp/tmpqq03j8bx.d(14): Error: expression expected, not `:`

    /tmp/tmpqq03j8bx.d(14): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpqq03j8bx.d(40): Error: declaration expected, not `<`

    /tmp/tmpqq03j8bx.d(46): Error: semicolon expected, not `{`

    /tmp/tmpqq03j8bx.d(46): Error: declaration expected, not `{`

    /tmp/tmpqq03j8bx.d(47): Error: no identifier for declarator `Dictionary`

    /tmp/tmpqq03j8bx.d(47): Error: declaration expected, not `<`

    /tmp/tmpqq03j8bx.d(48): Error: declaration expected, not `foreach`

    /tmp/tmpqq03j8bx.d(51): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqq03j8bx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    \n    for (long element : numbers)\
    \ \n    {\n        long count=0;\n        for (long i : numbers) {\n         \
    \   if (i == element) {\n                count++;\n            }\n        }\n\
    \        if (count > 1) {\n            result[resultIndex] = element;\n      \
    \      resultIndex++;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=arrays,sorting,c++,performance dscore=1 |>\n<| a |>\n<code>\n#include <iostream>\n\
    #include <string>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include\
    \ <time.h>\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzs79esfh.d(14): Error: semicolon expected, not `:`

    /tmp/tmpzs79esfh.d(14): Error: expression expected, not `:`

    /tmp/tmpzs79esfh.d(14): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpzs79esfh.d(17): Error: semicolon expected, not `:`

    /tmp/tmpzs79esfh.d(17): Error: expression expected, not `:`

    /tmp/tmpzs79esfh.d(17): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpzs79esfh.d(29): Error: declaration expected, not `<`

    /tmp/tmpzs79esfh.d(43): Error: declaration expected, not `assert`

    /tmp/tmpzs79esfh.d(44): Error: declaration expected, not `assert`

    /tmp/tmpzs79esfh.d(45): Error: declaration expected, not `assert`

    /tmp/tmpzs79esfh.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzs79esfh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for (int i = 1; i < numbers.length;\
    \ ++i) \n    {\n        if (numbers[i] == numbers[i - 1]) \n        {\n      \
    \      continue;\n        }\n        result[i - 1] = numbers[i];\n    }\n    return\
    \ result;\n}\n</code>\n<|/ a tags=java,arrays dscore=3 |>\n<| c |>\nThis solution\
    \ does not work if the numbers are in reverse order in the array.\n<|/ c |>\n\
    <| a dscore=3 tags=java,arrays |>\n<code>\npublic static void removeDuplicates(int[]\
    \ arr) {\n    Set<Integer> set = new HashSet<Integer>();\n    Set<Integer> setTemp\
    \ = new HashSet<Integer>();\n    for (int i : arr) {\n        setTemp.add(i);\n\
    \    }\n    arr = new int[setTemp.size()];\n    for (int i = 0; i < setTemp.size();\
    \ i++) {\n        arr[i] = setTemp.get(i);\n    }\n}\n</code>\n<|/ a |>\n<| a\
    \ dscore=2 tags=java,arrays |>\n<code>\nimport java.util.HashMap;\nimport java.util.HashSet;\n\
    import java.util.Map;\nimport java.util.Set;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbb_wgt6g.d(23): Error: declaration expected, not `<`

    /tmp/tmpbb_wgt6g.d(32): Error: no identifier for declarator `Set`

    /tmp/tmpbb_wgt6g.d(32): Error: declaration expected, not `<`

    /tmp/tmpbb_wgt6g.d(33): Error: declaration expected, not `for`

    /tmp/tmpbb_wgt6g.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbb_wgt6g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    var map = new Map<long, int>();\n\tfor (int i = 0; i < numbers.length; ++i) {\n\
    \t\tif (map.containsKey(numbers[i])) {\n\t\t\tmap[numbers[i]]++;\n\t\t} else {\n\
    \t\t\tmap.put(numbers[i], 1);\n\t\t}\n\t}\n\tlong[] result = new long[map.size()];\n\
    \tint j = 0;\n\tforeach (var item in map.keys) {\n\t\tresult[j++] = item;\n\t\
    }\n\treturn result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6luabhtt.d(12): Error: found `,` when expecting `.` following long

    /tmp/tmp6luabhtt.d(12): Error: found `int` when expecting identifier following
    `long`.

    /tmp/tmp6luabhtt.d(12): Error: semicolon expected, not `>`

    /tmp/tmp6luabhtt.d(12): Error: found `>` instead of statement

    /tmp/tmp6luabhtt.d(22): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6luabhtt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int[] seen = new int[numbers.length];\n    int[] count = new int[numbers.length];\n\
    \    long[] result = new long[numbers.length];\n    \n    for (int i = 0; i <\
    \ numbers.length; i++)\n        count[numbers[i]] ++;\n    \n    for (int i =\
    \ 0; i < numbers.length; i++)\n        if (count[numbers[i]] == 1)\n         \
    \   result[seen[numbers[i]]] = numbers[i];\n            \n        for (int j =\
    \ 0; j < numbers.length; j++)\n            if (count[j] > 1)\n               \
    \ seen[numbers[j]] = i;\n                \n    for (int i = 0; i < numbers.length;\
    \ i++)\n        count[numbers[i]] --;\n    \n    return result;\n}\n/*\n From\
    \ an array of integers, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([1,\
    \ 2, 3, 2, 2, 4])\n    [1, 2, 3, 4]\n    \n*/\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz78cgves.d(25): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz78cgves.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  int count = 0;\n  foreach(long n in numbers)\
    \ {\n    foreach(int x in numbers) {\n      if(x != n) {\n        long toRemove\
    \ = x - n;\n        if(count < toRemove) {\n          result[count++] = x;\n \
    \       } else {\n          result[count++] = n;\n          break;\n        }\n\
    \      }\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate =\
    \ remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nvodsu2.d(14): Error: found `in` when expecting `;`

    /tmp/tmp0nvodsu2.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nvodsu2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = 0;\n  foreach(int e in numbers) {\n    if (e == numbers[n]) n++;\n    else\
    \ {\n      numbers[n] = e;\n      n++;\n    }\n  }\n  return numbers;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, I used this and added a version that doesn't\
    \ use generics: `public static <T extends Comparable> List<T> remove_duplicates(List<T>\
    \ numbers) {\n  int n = 0;\n  for(T e : numbers) {\n    if (e.compareTo(numbers[n])\
    \ == 0) n++;\n    else {\n      numbers[n] = e;\n      n++;\n    }\n  }\n  return\
    \ numbers;\n}`\n<|/ c |>\n<| a dscore=1 |>\n<code>\npackage com.dreamers;\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9qk4hynx.d(13): Error: found `in` when expecting `;`

    /tmp/tmp9qk4hynx.d(22): Error: declaration expected, not `<`

    /tmp/tmp9qk4hynx.d(25): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9qk4hynx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long result = 0;\n    bool seen_number = false; \n    \n    foreach(long n\
    \ in numbers) {\n        if (!seen_number) {\n            result += n;\n     \
    \       seen_number = true;\n        }\n        \n        if (n==result) {\n \
    \           numbers.removeAt(numbers.indexOf(System.identityHashCode(n)));\n \
    \       }\n    }\n    \n    foreach(long n in numbers) {\n        if (!seen_number)\
    \ {\n            result += n;\n            seen_number = true;\n        }\n  \
    \  }\n    \n    return new long[] {result};\n}\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi04n3mz8.d(15): Error: found `in` when expecting `;`

    /tmp/tmpi04n3mz8.d(26): Error: found `in` when expecting `;`

    /tmp/tmpi04n3mz8.d(33): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpi04n3mz8.d(33): Error: found `}` when expecting `;` following statement

    /tmp/tmpi04n3mz8.d(33): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi04n3mz8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long result[] = new long[numbers.length];\n    int count[] = new int[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; ++i) {\n        count[numbers[i]] = 1;\n\
    \    }\n    int j = 0;\n    for (int i = 0; i < numbers.length; ++i) {\n     \
    \   long n = numbers[i];\n        while (j < count[n] && n != numbers[j]) {\n\
    \            ++j;\n        }\n        result[i] = n;\n        count[n] -= j;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: '/tmp/tmp9cml0fjl.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmp9cml0fjl.d(13): Deprecation: instead of C-style syntax, use D-style syntax
    `int[] count`

    /tmp/tmp9cml0fjl.d(12): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmp9cml0fjl.d(13): Deprecation: instead of C-style syntax, use D-style syntax
    `int[] count`

    core.exception.RangeError@/tmp/tmp9cml0fjl.d(15): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x428826]

    ??:? long[] tmp9cml0fjl.remove_duplicates(long[]) [0x428145]

    ??:? void tmp9cml0fjl.__unittest_L28_C1() [0x428332]

    ??:? void tmp9cml0fjl.__modtest() [0x4284f8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca13]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b8a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b31]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430fe0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430abd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b87d]

    ??:? runModuleUnitTests [0x42c7e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] nums1 = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++){\n        for (int j = i+1; j < numbers.length; j++){\n            if (numbers[i]\
    \ == numbers[j]){\n                nums1[i] = nums1[j];\n                numbers.remove(numbers[i]);\n\
    \                numbers.remove(numbers[j]);\n                i--;\n         \
    \       j--;\n            }\n        }\n    }\n    return numbers;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\n<code>\npublic static final <T> void removeDuplicates(ArrayList<T>\
    \ array) {\n    int i = 0;\n    boolean found = false;\n    while (i < array.size()\
    \ && !found) {\n        found = array.get(i).equals(array.get(i + 1));\n     \
    \   i++;\n    }\n    if (!found) {\n        array.remove(i + 1);\n    }\n}\n</code>\n\
    <|/ a tags=java,collections |>\n<| c |>\nCould you please add some explanation\
    \ to your code?\n<|/ c |>\n<| a tags=java,collections dscore=2 |>\nThis method\
    \ is quite efficient. Here it goes:\n<code>\npublic static void removeDuplicates(ArrayList<Integer>\
    \ nums) {\n    int i = 0;\n    boolean found = false;\n    while (i < nums.size()\
    \ && !found) {\n        found = nums.get(i) == nums.get(i + 1);\n        i++;\n\
    \    }\n    if (!found) {\n        nums.remove(i + 1);\n    }\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't appear to work for duplicates that are next to each\
    \ other in the list\n<|/ c |>\n<| c |>\nIt works. Are you sure you passed the\
    \ right argument? It works fine for me. `nums` should be `Arrays.asList(1, 2,\
    \ 1, 2, 3)`\n<|/ c |>\n<| c |>\nOh, I see the problem now. You're removing elements\
    \ as you iterate through the list. Instead, iterate backwards. I'll edit my answer\
    \ to reflect that.\n<|/ c |>\n<| c |>\nNice use of `get(i)` and `remove(i)`\n\
    <|/ c |>\n<| c |>\nThis removes ALL duplicates, not just adjacent ones. This was\
    \ the only answer that correctly addressed the question.\n<|/ c |>\n<| a |>\n\
    <code>\npublic static void removeDuplicates(ArrayList<Integer> nums) {\n    int\
    \ i = 0;\n    boolean found = false;\n    while (i < nums.size() && !found) {\n\
    \        found = nums.get(i) == nums.get(i + 1);\n        i++;\n    }\n    if\
    \ (!found) {\n        nums.remove(i + 1);\n    }\n}\n</code>\n<|/ a tag\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2y3pgh2o.d(26): Error: declaration expected, not `<`

    /tmp/tmp2y3pgh2o.d(33): Error: declaration expected, not `while`

    /tmp/tmp2y3pgh2o.d(35): Error: no identifier for declarator `i`

    /tmp/tmp2y3pgh2o.d(35): Error: declaration expected, not `++`

    /tmp/tmp2y3pgh2o.d(36): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2y3pgh2o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int index = 0;\n    long[] result = new long[numbers.length];\n    int i;\n\
    \    for (i = 1; i < numbers.length; ++i) \n    {\n        if (numbers[i] != numbers[i-1])\
    \ \n        {\n            result[index] = numbers[i];\n            ++index;\n\
    \        }\n    }\n    result[index] = numbers[i];\n    return result;\n}\n/*\n\
    \ From an array of floats, remove all elements that occur more than once.\n  \
    \  Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1.0L,\
    \ 2.0L, 3.0L, 2.0L, 4.0L])\n    [1.0L, 3.0L, 4.0L]\n    \n*/\nfloat[] remove_duplicates(float[]\
    \ numbers) \n{\n    int index = 0;\n    float[] result = new float[numbers.length];\n\
    \    int i;\n    for (i = 1; i < numbers.length; ++i) \n    {\n        if (numbers[i]\
    \ != numbers[i-1]) \n        {\n            result[index] = numbers[i];\n    \
    \        ++index;\n        }\n    }\n    result[index] = numbers[i];\n    return\
    \ result;\n}\n/*\n From an array of strings, remove all elements that occur more\
    \ than once.\n    Keep order of elements left the same as in the input.\n    >>>\
    \ remove_duplicates([\"1\", \"2\", \"3\", \"2\", \"4\"])\n    [\"1\", \"3\", \"\
    4\"]\n    \n*/\nString[] remove_duplicates(String[] numbers) \n{\n    int index\
    \ = 0;\n    String[] result = new String[numbers.length];\n    int i;\n    for\
    \ (i = 1; i < numbers.length; ++i) \n    {\n        if (numbers[i] != numbers[i-1])\
    \ \n        {\n            result[index] = numbers[i];\n            ++index;\n\
    \        }\n    }\n    result[index] = numbers[i];\n    return result;\n}\n/*\n\
    \ From an array of doubles, remove all elements that occur more than once.\n \
    \   Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1.0L,\
    \ 2.0L, 3.0L, 2.0L, 4.0L])\n    [1.0L, 3.0L, 4.0L]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n    int index = 0;\n    double[] result = new double[numbers.length];\n\
    \    int i;\n    for (i = 1; i < numbers.length; ++i) \n    {\n        if (numbers[i]\
    \ != numbers[i-1]) \n        {\n            result[index] = numbers[i];\n    \
    \        ++index;\n        }\n    }\n    result[index] = numbers[i];\n    return\
    \ result;\n}\n/*\n From an array of ints, remove all elements that occur more\
    \ than once.\n    Keep order of elements left the same as in the input.\n    >>>\
    \ remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwpzyk7b.d(56): Error: undefined identifier `String`, did you mean
    alias `string`?

    /tmp/tmpcwpzyk7b.d(56): Error: undefined identifier `String`, did you mean alias
    `string`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwpzyk7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if (numbers.length == 0)\n        return numbers;\n    long[] result = new\
    \ long[numbers.length];\n    int i, j, k = 0, n = numbers.length;\n    for (i\
    \ = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (numbers[j]\
    \ == numbers[i]) {\n                result[k++] = numbers[j];\n              \
    \  break;\n            }\n        }\n    }\n    return Long.arrayCopy(result,\
    \ 0, result, k, result.length - k);\n}\n</code>\n<|/ a tags=java dscore=5 |>\n\
    <| c |>\nThis method is significantly slower than the built-in `java.util.Arrays.sort`\
    \ for long arrays of size around 10M.\n<|/ c |>\n<| c |>\nI like this answer.\
    \ One correction is `Arrays.sort(numbers);` as `Arrays.sort()` requires `Number`\
    \ and not `long`\n<|/ c |>\n<| c |>\nThe method does have some performance overhead,\
    \ but for long arrays it should be negligible, even if it takes a longer time\
    \ to sort them. How are you testing this?\n<|/ c |>\n<| c |>\nI ran a test to\
    \ see how long it took to sort 10,000 long[] arrays. It was taking around a minute.\
    \ Thanks Piotr.\n<|/ c |>\n<| c |>\nFor Java 7 or later, use `Arrays.stream(longs).distinct().toArray(long[]::new)`.\n\
    <|/ c |>\n<| a dscore=5 |>\nI would suggest you to try a data structure which\
    \ can help you solve this problem.\nAn example would be a HashMap. HashMap works\
    \ with pairs(key-value pairs), which you can think of as 2 unique identifiers.\
    \ You can map each unique identifier to its value and it gives you the unique\
    \ identifiers. \nIf you insert 2 unique identifiers with the same value, the HashMap\
    \ will just replace the old value with new value but you still have the old identifier.\n\
    <|/ a tags=java |>\n<| c |>\nHashMap is a great data structure to use for such\
    \ a task, however it would still be better if the OP were to specify exactly what\
    \ type of data structure to use.\n<|/ c |>\n<| c |>\nA HashMap can only have one\
    \ value per key, and that value is a unique identifier.\n<|/ c |>\n<| c |>\nThat\
    \ was the point. The OP doesn't specify a data structure. It could be a HashMap\
    \ but could be any data structure.\n<|/ c |>\n<| c |>\n: It doesn't have to be\
    \ a HashMap. A LinkedHashMap will do, and be faster for a large number of entries.\n\
    <|/ \nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibbn1e_5.d(26): Error: declaration expected, not `<`

    /tmp/tmpibbn1e_5.d(55): Error: unterminated character constant

    /tmp/tmpibbn1e_5.d(58): Error: unterminated character constant

    /tmp/tmpibbn1e_5.d(64): Error: declaration expected, not `assert`

    /tmp/tmpibbn1e_5.d(65): Error: declaration expected, not `assert`

    /tmp/tmpibbn1e_5.d(66): Error: declaration expected, not `assert`

    /tmp/tmpibbn1e_5.d(67): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibbn1e_5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164006
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long unique = 0, duplicate = 0;\n    for (long num : numbers) {\n        if\
    \ (num == unique)\n            duplicate++;\n        else\n        {\n       \
    \     unique = num;\n            duplicate = 1;\n        }\n    }\n    numbers\
    \ = new long[numbers.length - duplicate];\n    long[] temp = new long[numbers.length];\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        temp[i] = numbers[i];\n\
    \    }\n    int pos = 0;\n    for (int i = numbers.length - 1; i >= 0; i--) {\n\
    \        if (numbers[i] != temp[pos])\n        {\n            numbers[pos] = numbers[i];\n\
    \            pos++;\n        }\n    }\n    return numbers;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=arrays,duplicate-removal,algorithm dscore=0 |>\nIf you\
    \ have a large enough array (e.g. a million elements), then the fastest way to\
    \ remove duplicate elements is to sort the array and then remove the first element\
    \ for each subsequent element.\nTo sort a large array quickly, you only need to\
    \ swap the elements that come after the current element in the array. For example\
    \ if you have an array of length 100 such that you start out with:\n<code>\na0\
    \ a1 a2 a3 a4 a5 a6 a7 a8 a9 a10\n</code>\nYou could sort the array into an array\
    \ like this:\n<code>\na0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16\
    \ a17 a18 a19 a20\n</code>\nThen remove the first element from each subsequent\
    \ element:\n<code>\na0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16\
    \ a17 a18 a19 a20\na0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17\
    \ a18 a19 a20\na0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18\
    \ a19 a20\na1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19\
    \ a20\na1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmch_w0qy.d(13): Error: semicolon expected, not `:`

    /tmp/tmpmch_w0qy.d(13): Error: expression expected, not `:`

    /tmp/tmpmch_w0qy.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpmch_w0qy.d(37): Error: declaration expected, not `<`

    /tmp/tmpmch_w0qy.d(60): Error: declaration expected, not `assert`

    /tmp/tmpmch_w0qy.d(61): Error: declaration expected, not `assert`

    /tmp/tmpmch_w0qy.d(62): Error: declaration expected, not `assert`

    /tmp/tmpmch_w0qy.d(63): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmch_w0qy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ i = 0;\n  long[] result = new long[numbers.length];\n  long max = 1;\n  while\
    \ ((i < numbers.length) && (numbers[i] > max)) {\n    max *= numbers[i];\n   \
    \ ++i;\n  }\n  int j = 0;\n  while (i < numbers.length) {\n    result[j++] = numbers[i];\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    ++i;\n  }\n\
    \  return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkro_5met.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x428485]

    ??:? void tmpkro_5met.__unittest_L29_C1() [0x428155]

    ??:? void tmpkro_5met.__modtest() [0x428204]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c53f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b3d2]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x43065d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430b0c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4305e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b3a9]

    ??:? runModuleUnitTests [0x42c315]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428948]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  var result = new long[numbers.length];\n    int index = 0;\n    for(int i =\
    \ 0; i < numbers.length; i++)\n    {\n        if(result[index] != numbers[i])\n\
    \        {\n            result[index] = numbers[i];\n            index++;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi583dgec.d(12): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi583dgec.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  int j = 0;\n  for (int i = 0; i < numbers.length;\
    \ ++i)\n  {\n    if (j < i && numbers[i] > numbers[j])\n    {\n      result[i]\
    \ = numbers[i];\n      ++j;\n    }\n  }\n  return result;\n}\n/*\n From an array\
    \ of floats, remove all elements that occur more than once.\n    Keep order of\
    \ elements left the same as in the input.\n    >>> remove_duplicates([1.0f, 2.0f,\
    \ 3.0f, 2.0f, 4.0f])\n    [1.0f, 3.0f, 4.0f]\n    \n*/\nfloat[] remove_duplicates(float[]\
    \ numbers) \n{\n  Float[] result = new Float[numbers.length];\n  for(int i=0;\
    \ i<numbers.length; i++)\n  {\n    int j = 0;\n    float x = numbers[i];\n   \
    \ for(int k=0; k<i; k++)\n    {\n      float y = numbers[k];\n      if(x == y)\n\
    \      {\n        j++;\n        break;\n      }\n    }\n    if(j < i)\n    {\n\
    \      result[i] = x;\n      ++j;\n    }\n  }\n  return result;\n}\n/*\n From\
    \ an array of doubles, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([1.0d,\
    \ 2.0d, 3.0d, 2.0d, 4.0d])\n    [1.0d, 3.0d, 4.0d]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n  Double[] result = new Double[numbers.length];\n  for(int i=0;\
    \ i<numbers.length; i++)\n  {\n    int j = 0;\n    double x = numbers[i];\n  \
    \  for(int k=0; k<i; k++)\n    {\n      double y = numbers[k];\n      if(x ==\
    \ y)\n      {\n        j++;\n        break;\n      }\n    }\n    if(j < i)\n \
    \   {\n      result[i] = x;\n      ++j;\n    }\n  }\n  return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=duplicate-removal,list,arrays,java |>\n<code>\nimport java.util.Arrays;\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps95qy3lq.d(86): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps95qy3lq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int size = numbers.length;\n    long[] result = new long[size];\n    int[]\
    \ used = new int[size];\n    \n    for(int i = 0; i < size; ++i) {\n        int\
    \ k = used[i];\n        if(numbers[i] == numbers[k]) {\n            used[i] =\
    \ ++used[k];\n        } else {\n            used[i] = 1;\n            result[i\
    \ - 1] = numbers[i];\n        }\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a |>\n<| a tags=python,arrays,duplicates dscore=0 |>\n<code>\ndef remove_duplicates(input_array):\n\
    \    new_list = []\n    for num in input_array:\n        if num not in new_list:\n\
    \            new_list.append(num)\n    return new_list\n</code>\nThis code should\
    \ do the trick. Of course, you can also use list comprehension:\n<code>\ndef remove_duplicates(input_array):\n\
    \    return list(set([x for x in input_array if input_array.count(x) > 1]))\n\
    </code>\n<|/ a |>\n<| a tags=python,arrays,duplicates |>\n<code>\nimport numpy\
    \ as np\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxg6kbqe5.d(28): Error: declaration expected, not `<`

    /tmp/tmpxg6kbqe5.d(52): Error: declaration expected, not `assert`

    /tmp/tmpxg6kbqe5.d(53): Error: declaration expected, not `assert`

    /tmp/tmpxg6kbqe5.d(54): Error: declaration expected, not `assert`

    /tmp/tmpxg6kbqe5.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxg6kbqe5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long\
    \ result[] = new long[numbers.length];\n  int i = 0;\n  for (int j=0; j < numbers.length;\
    \ ++j)\n  {\n    if (numbers[i] != numbers[j])\n    {\n      result[i] = numbers[j];\n\
    \      ++i;\n    }\n  }\n  return result;\n}\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates_v2(long[] numbers) \n{\n\
    \  long result[] = new long[numbers.length];\n  int i = 0;\n  int j = 0;\n  int\
    \ k = 0;\n  for (int l = 0; l < numbers.length; ++l)\n  {\n    if (numbers[i]\
    \ != numbers[l])\n    {\n      result[k] = numbers[l];\n      ++i;\n      ++j;\n\
    \      ++k;\n    }\n  }\n  return result;\n}\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates_v3(int numbers[], int len,\
    \ long value) \n{\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  long result[] =\
    \ new long[len];\n  for (int l = 0; l < len; ++l)\n  {\n    if (numbers[i] !=\
    \ value)\n    {\n      result[k] = numbers[l];\n      ++i;\n      ++j;\n     \
    \ ++k;\n    }\n  }\n  return result;\n}\n/*\n From an array of integers, remove\
    \ all elements that occur more than once.\n    Keep order of elements left the\
    \ same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n   \
    \ [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates_v3(long[] numbers) \n{\n  long\
    \ result[] = new long[numbers.length];\n  int i = 0;\n  int j = 0;\n  int k =\
    \ 0;\n  for (int l = 0; l < numbers.length; ++l)\n  {\n    if (numbers[i] != numbers[l])\n\
    \    {\n      result[k] = numbers[l];\n      ++i;\n      ++j;\n      ++k;\n  \
    \  }\n  }\n  return result;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements \nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn0_i3tx9.d(12): Deprecation: instead of C-style syntax, use D-style
    syntax `long[] result`

    /tmp/tmpn0_i3tx9.d(33): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpn0_i3tx9.d(56): Deprecation: instead of C-style syntax, use D-style syntax
    `int[] numbers`

    /tmp/tmpn0_i3tx9.d(61): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpn0_i3tx9.d(83): Deprecation: instead of C-style syntax, use D-style syntax
    `long[] result`

    /tmp/tmpn0_i3tx9.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn0_i3tx9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i,\n        len = numbers.length;\n    long[] num = new long[len];\n  \
    \  for(i = 0; i < len; i++) \n        num[numbers[i]] = i;\n    long[] nums =\
    \ new long[num.length];\n    for(i = 0; i < len; i++)\n        nums[nums[i]] =\
    \ numbers[i];\n    return nums;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp738_0fap.d(13): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp738_0fap.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long lastNum = 0;\n    long result = 0;\n    int numLen = numbers.length;\n\
    \    for(int i = 0; i < numLen; i++) {\n        if (numbers[i] != lastNum) {\n\
    \            lastNum = numbers[i];\n            result = result + lastNum;\n \
    \       }\n    }\n    return new long[] {result,lastNum};\n}\n</code>\n<|/ a |>\n\
    <| a |>\nThis should do the trick:\n<code>\nList<Integer> myList = Arrays.asList(2,\
    \ 4, 6, 1, 2, 3, 5);\nmyList = myList.removeIf(i -> myList.indexOf(i) == myList.lastIndexOf(i)\
    \ + 1);\n</code>\n<|/ a tags=arrays,java,duplicates dscore=1 |>\n<| a tags=arrays,java,duplicates\
    \ dscore=1 |>\n<code>\npublic class Duplicate\n{\n  public static void main(String\
    \ args[])\n  {\n    int num[]={1,2,3,4,5,5,6,5,5,6,7,8};\n    System.out.println(remove_duplicates(num));\n\
    \  }\n  public static int[] remove_duplicates(int[] nums)\n  {\n    int[] sortedArray\
    \ = new int[nums.length];\n    Arrays.sort(nums);\n    for(int i=0;i<nums.length;i++)\n\
    \    {\n      int count=0;\n      for(int j=i+1;j<nums.length;j++)\n      {\n\
    \        if(nums[i]==nums[j])\n        {\n          count=count+1;\n        }\n\
    \      }\n      if(count>1)\n      {\n        sortedArray[i]=nums[i];\n      }\n\
    \    }\n    return sortedArray;\n  }\n}\n</code>\n<|/ a |>\n<| c |>\nWelcome to\
    \ Stack Overflow! While this code snippet may solve the question, [including an\
    \ explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| c |>\nSorry I was away.\n<|/ c |>\n<| a |>\nThe\
    \ solution in C#:\n<code>\npublic class RemoveDuplicates\n{\n    public static\
    \ int[] RemoveDuplicates(int[] nums)\n    {\n        int size = nums.Length;\n\
    \        var sorted = nums.OrderBy(x => x);\n        var set = new HashSet<int>(sorted);\n\
    \        int[] result = new int[size];\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphchtgjko.d(21): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmphchtgjko.d(21): Error: found `}` when expecting `;` following statement

    /tmp/tmphchtgjko.d(21): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmphchtgjko.d(23): Error: declaration expected, not `<`

    /tmp/tmphchtgjko.d(29): Error: no identifier for declarator `myList`

    /tmp/tmphchtgjko.d(29): Error: declaration expected, not `=`

    /tmp/tmphchtgjko.d(30): Error: declaration expected, not `<`

    /tmp/tmphchtgjko.d(39): Error: identifier expected following `.` instead of `out`

    /tmp/tmphchtgjko.d(39): Error: no identifier for declarator `System`

    /tmp/tmphchtgjko.d(39): Error: declaration expected, not `out`

    /tmp/tmphchtgjko.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphchtgjko.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    long[] temp = new long[numbers.length];\n\
    \    int index = 0;\n    for(long n : numbers)\n    {\n        if(index == 0)\n\
    \        {\n            temp[index++] = n;\n        }\n        else \n       \
    \ {\n            long last = temp[index - 1];\n            if(last == n)\n   \
    \         {\n                temp[index++] = n;\n            }\n            else\n\
    \            {\n                result[index++] = n;\n            }\n        }\n\
    \    }\n    for(int i = index - 1; i >= 0; --i)\n    {\n        result[i] = temp[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=math,arrays,java |>\n<| a tags=math,arrays,java\
    \ |>\n<code>\n/**\n * Definition for singly-linked list.\n * public class ListNode\
    \ {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *    \
    \     val = x;\n *         next = null;\n *     }\n * }\n */\npublic class RemoveDuplicates2\
    \ {\n    private ListNode head;\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp78hvkiii.d(15): Error: semicolon expected, not `:`

    /tmp/tmp78hvkiii.d(15): Error: expression expected, not `:`

    /tmp/tmp78hvkiii.d(15): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp78hvkiii.d(40): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp78hvkiii.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] result = new long[numbers.length];\n\tint i = 0, j = 0;\n\t\n\twhile (i\
    \ < numbers.length) {\n\t\twhile (j < result.length && numbers[i] != result[j])\
    \ {\n\t\t\tj++;\n\t\t}\n\t\tif (j == result.length) \n\t\t\tbreak;\n\t\tresult[j]\
    \ = numbers[i];\n\t\ti++;\n\t\tj = 0;\n\t}\n\tif (i < numbers.length) \n\t\tSystem.arraycopy(numbers,\
    \ i, result, j, numbers.length - i);\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6n3kill5.d(26): Error: undefined identifier `System`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6n3kill5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  Arrays.sort(numbers);\n    long[] result = new long[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++)\n    {\n        for (int j = 0; j < i;\
    \ j++)\n        {\n            if (numbers[i] == numbers[j])\n            {\n\
    \                result.length--;\n                break;\n            }\n   \
    \     }\n        result[i] = numbers[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcwr7r75.d(12): Error: undefined identifier `Arrays`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcwr7r75.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] ret = new long[numbers.length];\n\tfor (int i = 0; i < numbers.length;\
    \ i++)\n\t\tfor (int j = 0; j < i; j++)\n\t\t\tif (numbers[i] == numbers[j])\n\
    \t\t\t\tbreak;\n\t\tif (j == i)\n\t\t\tret[i] = numbers[i];\n\treturn ret;\n}\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv_4s3wu8.d(17): Error: undefined identifier `j`

    /tmp/tmpv_4s3wu8.d(17): Error: undefined identifier `i`

    /tmp/tmpv_4s3wu8.d(18): Error: undefined identifier `i`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv_4s3wu8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int[]\
    \ ids = new int[numbers.length];\n  for (int i = 0; i < numbers.length; i++) {\n\
    \    ids[i] = i;\n  }\n  Arrays.sort(ids);\n  long[] result = new long[ids.length];\n\
    \  int i = 0;\n  while (i < ids.length) {\n    if (ids[i] != i) {\n      result[i]\
    \ = numbers[ids[i]];\n      ids[i] = ids[ids[i]];\n    } else {\n      ++i;\n\
    \    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=1 tags=java,arrays,hashmap\
    \ |>\n<| a dscore=1 |>\n<code>\npublic static long getMaxFrom(int[] arr) {\n \
    \   HashMap<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i <\
    \ arr.length; i++) {\n        int val = arr[i];\n        Integer temp = map.get(val);\n\
    \        if (temp == null) {\n            map.put(val, i);\n        }\n    }\n\
    \    Iterator it = map.entrySet().iterator();\n    while (it.hasNext()) {\n  \
    \      Map.Entry pair = (Map.Entry)it.next();\n        int key = (Integer)pair.getKey();\n\
    \        int value = (Integer)pair.getValue();\n        arr[key] = value;\n  \
    \      it.remove();\n    }\n    return arr[arr.length-1];\n}\n</code>\n<|/ a tags=java,arrays,hashmap\
    \ |>\n<| a dscore=1 |>\n<code>\n// Using LinkedHashMap for O(n) time complexity\n\
    import java.util.*;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyldikxb.d(29): Error: declaration expected, not `<`

    /tmp/tmpuyldikxb.d(35): Error: declaration expected, not `for`

    /tmp/tmpuyldikxb.d(35): Error: no identifier for declarator `i`

    /tmp/tmpuyldikxb.d(35): Error: declaration expected, not `<`

    /tmp/tmpuyldikxb.d(35): Error: no identifier for declarator `i`

    /tmp/tmpuyldikxb.d(35): Error: declaration expected, not `++`

    /tmp/tmpuyldikxb.d(38): Error: declaration expected, not `if`

    /tmp/tmpuyldikxb.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyldikxb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    if (numbers.length == 0)\n\t\treturn numbers;\n\tlong[] result = new long[numbers.length];\n\
    \tfor (int i = 0; i < numbers.length; ++i)\n\t\tif (numbers[i] != numbers[i -\
    \ 1]) {\n\t\t\tresult[i] = numbers[i];\n\t\t\t--i;\n\t\t}\n\treturn result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmpbkiap1ki.d(16): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x4284c6]

    ??:? long[] tmpbkiap1ki.remove_duplicates(long[]) [0x427ea2]

    ??:? void tmpbkiap1ki.__unittest_L22_C1() [0x427fd2]

    ??:? void tmpbkiap1ki.__modtest() [0x428198]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c4cf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b362]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4305ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430a9c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430579]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b339]

    ??:? runModuleUnitTests [0x42c2a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int fun'
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  return numbers == null ? null : removeDuplicates(numbers, 0, numbers.length\
    \ - 1);\n}\n/* From an array of integers, remove all elements that occur more\
    \ than once.\n Keep order of elements left the same as in the input.\n */\nlong[]\
    \ removeDuplicates(long[] numbers, int i, int j) \n{\n    if (i > j)\n       \
    \ return numbers;\n    long current = numbers[i];\n    int pos = i;\n    for (int\
    \ k = i + 1; k < j; k++) {\n        if (numbers[k] == current) {\n           \
    \ numbers[pos++] = numbers[k];\n        }\n    }\n    numbers = long.grow(numbers,\
    \ pos);\n    return numbers;\n}\n/* From an array of floats, remove all elements\
    \ that occur more than once.\n Keep order of elements left the same as in the\
    \ input.\n */\nfloat[] remove_duplicates(float[] numbers) \n{\n    return numbers\
    \ == null ? null : removeDuplicates(numbers, 0, numbers.length - 1);\n}\n/* From\
    \ an array of floats, remove all elements that occur more than once.\n Keep order\
    \ of elements left the same as in the input.\n */\nfloat[] removeDuplicates(float[]\
    \ numbers, int i, int j) \n{\n    if (i > j)\n        return numbers;\n    float\
    \ current = numbers[i];\n    int pos = i;\n    for (int k = i + 1; k < j; k++)\
    \ {\n        if (numbers[k] == current) {\n            numbers[pos++] = numbers[k];\n\
    \        }\n    }\n    numbers = float.grow(numbers, pos);\n    return numbers;\n\
    }\n/* From an array of doubles, remove all elements that occur more than once.\n\
    \ Keep order of elements left the same as in the input.\n */\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n    return numbers == null ? null : removeDuplicates(numbers,\
    \ 0, numbers.length - 1);\n}\n/* From an array of doubles, remove all elements\
    \ that occur more than once.\n Keep order of elements left the same as in the\
    \ input.\n */\ndouble[] removeDuplicates(double[] numbers, int i, int j) \n{\n\
    \    if (i > j)\n        return numbers;\n    double current = numbers[i];\n \
    \   int pos = i;\n    for (int k = i + 1; k < j; k++) {\n        if (numbers[k]\
    \ == current) {\n            numbers[pos++] = numbers[k];\n        }\n    }\n\
    \    numbers = double.grow(numbers, pos);\n    return numbers;\n}\n/* From an\
    \ array of strings, remove all elements that occur more than once.\n Keep order\
    \ of elements left the same as in the input.\n */\nString[] remove_duplicates(String[]\
    \ strings) \n{\n    return strings == null ? null : removeDuplicates(strings,\
    \ 0, strings.length - 1);\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpflopzxgy.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpflopzxgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    Set<long> set = new HashSet<long>();\n\
    \    for (int i = 0; i < numbers.length; i++) {\n        long value = numbers[i];\n\
    \        if (!set.contains(value)) {\n            set.add(value);\n          \
    \  result[i] = value;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| a |>\nThis is similar to Sven's answer, but more generic:\n<code>\npublic\
    \ <T> List<T> uniqueByKey(List<T> source, final Function<T, K> keyExtractor, final\
    \ BinaryOperator<T> valueExtractor) {\n    List<T> results = new ArrayList<>();\n\
    \    Map<K, T> seen = new HashMap<>();\n    for (T element : source) {\n     \
    \   K key = keyExtractor.apply(element);\n        if (seen.containsKey(key)) {\n\
    \            results.add(valueExtractor.apply(seen.get(key)));\n        }\n  \
    \      else {\n            results.add(element);\n            seen.put(key, element);\n\
    \        }\n    }\n    return results;\n}\n</code>\nUsage example:\n<code>\nList<String>\
    \ uniqueByKey(List<String> source, Function<String, String> keyExtractor, Function<String,\
    \ String> valueExtractor) {\n    return uniqueByKey(source, keyExtractor, valueExtractor);\n\
    }\n</code>\n<|/ a dscore=4 tags=java |>\n<| c |>\nI would suggest using `Map<K,\
    \ Set<V>>` instead of `Map<K, T>` so that you have the added benefit of not loosing\
    \ the order of the elements.\n<|/ c |>\n<| c |>\nThis approach has the disadvantage\
    \ that if you have two elements with different values but the same key it will\
    \ throw a ConcurrentModificationException\n<|/ c |>\n<| c |>\nTo prevent this,\
    \ use ConcurrentSkipListMap instead of HashMap\n<|/ c |>\n<| a |>\nOne liner (no\
    \ streams):\n<code>\nList<String> unique = new ArrayList<>(myStringList.stream().distinct().collect(Collectors.toList()));\n\
    </code>\n<|/ a dscore=4 tags=java |>\n<| a tags=java |>\n<code>\npublic static\
    \ void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        list.add(\"a\");\n        list.add(\"b\");\n        list.add(\"c\");\n\
    \        list.add(\"a\");\n        list.add(\"a\");\n        list.add(\"d\");\n\
    \        list.add(\"a\");\n        list.add(\"b\");\n        Set<String> set =\
    \ new HashSet<String>(list);\n        list.clear();\n        list.addAll(set);\n\
    \        System.out.println(list);\n    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    The `\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9ol11zik.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp9ol11zik.d(13): Error: found `>` when expecting `.` following long

    /tmp/tmp9ol11zik.d(13): Error: found `(` when expecting identifier following `long`.

    /tmp/tmp9ol11zik.d(13): Error: found `)` when expecting `;` following statement

    /tmp/tmp9ol11zik.d(13): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp9ol11zik.d(23): Error: declaration expected, not `<`

    /tmp/tmp9ol11zik.d(26): Error: unterminated character constant

    /tmp/tmp9ol11zik.d(30): Error: no identifier for declarator `Map`

    /tmp/tmp9ol11zik.d(30): Error: declaration expected, not `<`

    /tmp/tmp9ol11zik.d(31): Error: declaration expected, not `for`

    /tmp/tmp9ol11zik.d(33): Error: declaration expected, not `if`

    /tmp/tmp9ol11zik.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9ol11zik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n=numbers.length;\n    long[] result = new long[n];\n    long[] unique\
    \ = new long[n];\n    for(int i=0; i<n; ++i)\n    {\n        bool found = false;\n\
    \        for(int j=0; j<n; ++j)\n        {\n            if(numbers[i]==numbers[j])\n\
    \            {\n                found = true;\n                break;\n      \
    \      }\n        }\n        if(!found)\n        {\n            unique[i]=numbers[i];\n\
    \        }\n    }\n    for(int i=0; i<n; ++i)\n    {\n        found = false;\n\
    \        for(int j=0; j<n; ++j)\n        {\n            if(unique[i]==numbers[j])\n\
    \            {\n                found = true;\n                break;\n      \
    \      }\n        }\n        if(!found)\n        {\n            result[i]=unique[i];\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nMy solution:\n<code>\nlet removeDuplicates<T>(arr: Array<T>): Array<T> {\n\
    \        let arrWithoutDuplicates = arr.reduce(\n            (arr: Array<T>, item:\
    \ T) => {\n                if(arr.indexOf(item) === -1) arr.push(item)\n     \
    \           return arr\n            },\n            []\n        )\n        return\
    \ arrWithoutDuplicates\n    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| a\
    \ |>\nA simple implementation is using an object. We can use the indexOf method\
    \ to check if the item is already in the array.\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr6ini2b0.d(49): Error: declaration expected, not `<`

    /tmp/tmpr6ini2b0.d(72): Error: declaration expected, not `assert`

    /tmp/tmpr6ini2b0.d(73): Error: declaration expected, not `assert`

    /tmp/tmpr6ini2b0.d(74): Error: declaration expected, not `assert`

    /tmp/tmpr6ini2b0.d(75): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr6ini2b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8wn4k0rf.d(13): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8wn4k0rf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164005
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    for (int i = 0; i < numbers.length;\
    \ i++)\n        result[numbers[i]] = numbers[i];\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvavgar9_.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvavgar9_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    var len = numbers.length;\n\tvar results = new long[len];\n\tfor(var i=0;i<len;++i)\n\
    \t\tresults[numbers[i]] = numbers[i];\n\t\n\tlong[] out = new long[len];\n\tfor(var\
    \ i=0;i<len;++i)\n\t\tout[i] = results[numbers[i]];\n\t\n\treturn out;\n}\n/*\n\
    \ From an array of integers, remove all elements that occur more than once.\n\
    \    Keep order of elements left the same as in the input.\n    Use a std.map\
    \ to keep track of elements that have been removed.\n    >>> remove_duplicates([1L,\
    \ 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates_map(long[]\
    \ numbers) \n{\n\tvar len = numbers.length;\n\tvar results = new std.map();\n\t\
    for(var i=0;i<len;++i)\n\t{\n\t\tvar el = numbers[i];\n\t\tif(!results.contains(el))\n\
    \t\t\tresults[el] = el;\n\t}\n\t\n\tlong[] out = new long[len];\n\tfor(var i=0;i<len;++i)\n\
    \t{\n\t\tvar el = numbers[i];\n\t\tif(results.contains(el))\n\t\t\tout[i] = results[el];\n\
    \t}\n\t\n\treturn out;\n}\n/*\n From an array of integers, remove all elements\
    \ that occur more than once.\n    Keep order of elements left the same as in the\
    \ input.\n    Use a std.array to keep track of elements that have been removed.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\n\
    long[] remove_duplicates_array(long[] numbers) \n{\n\tvar len = numbers.length;\n\
    \tvar results = new std.array();\n\tfor(var i=0;i<len;++i)\n\t\tresults.push(numbers[i]);\n\
    \t\n\tlong[] out = new long[len];\n\tfor(var i=0;i<len;++i)\n\t{\n\t\tvar el =\
    \ numbers[i];\n\t\tif(std.array.get(results,el) != null)\n\t\t\tout[i] = std.array.get(results,el);\n\
    \t}\n\t\n\treturn out;\n}\n/*\n From an array of floats, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    Use a std.set to keep track of elements that have been removed.\n    >>>\
    \ remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\nfloat[]\
    \ remove_duplicates_set(float[] numbers) \n{\n\tvar len = numbers.length;\n\t\
    var results = new std.set();\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lq1esd1.d(17): Error: no identifier for declarator `long[]`

    /tmp/tmp6lq1esd1.d(17): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(19): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(21): Error: expression expected, not `out`

    /tmp/tmp6lq1esd1.d(42): Error: no identifier for declarator `long[]`

    /tmp/tmp6lq1esd1.d(42): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(47): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(50): Error: expression expected, not `out`

    /tmp/tmp6lq1esd1.d(67): Error: no identifier for declarator `long[]`

    /tmp/tmp6lq1esd1.d(67): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(72): Error: found `out` instead of statement

    /tmp/tmp6lq1esd1.d(75): Error: expression expected, not `out`

    /tmp/tmp6lq1esd1.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lq1esd1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long duplicates = 0;\n    int index = 0;\n    long[] answer = new long[numbers.length];\n\
    \    \n    for (long value : numbers) {\n        while (index < numbers.length\
    \ && numbers[index] == value) {\n            index++;\n            duplicates++;\n\
    \        }\n        answer[index++] = value;\n    }\n    return answer;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdv19vvyg.d(16): Error: semicolon expected, not `:`

    /tmp/tmpdv19vvyg.d(16): Error: expression expected, not `:`

    /tmp/tmpdv19vvyg.d(16): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdv19vvyg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] newNumbers = new long[numbers.length];\n    int j = 0;\n    for(int\
    \ i = 0; i < numbers.length; i++)\n    {\n        if(newNumbers[j] != numbers[i])\n\
    \        {\n            newNumbers[j] = numbers[i];\n            j++;\n      \
    \  }\n    }\n    return newNumbers;\n}\n</code>\n<|/ a tags=java |>\n<| c |>\n\
    What a nice piece of code! I wish I could upvote it twice. I will try it later\
    \ on but if someone could just explain this code to me in simple words I would\
    \ be really happy.\n<|/ c |>\n<| c |>\nI thought that removing duplicates is not\
    \ that hard to do with java. Have you tried the code? I think it would be easy\
    \ to understand if you have some basic java knowledge.\n<|/ c |>\n<| c |>\nI've\
    \ tried it and it works great, thank you! Just one question: how would I use this\
    \ function to remove duplicates from an arraylist? Should I just convert the arraylist\
    \ to a regular array and then use the function as mentioned above?\n<|/ c |>\n\
    <| c |>\nI don't see any benefit of using an ArrayList instead of an array. ArrayList\
    \ has a method to remove duplicates. In addition you can use ArrayList to keep\
    \ the original index of an element and remove it from the array.\n<|/ c |>\n<|\
    \ c |>\nI am using the ArrayList because I want to be able to modify a copy of\
    \ an ArrayList after I remove duplicates.\n<|/ c |>\n<| a |>\nHere is my answer\
    \ to this question.\n<code>\nprivate static int[] unique(int[] numbers) {\n  \
    \  int uniqueCount = 0;\n    int[] unique = new int[numbers.length];\n    for\
    \ (int i = 0; i < numbers.length; i++) {\n        int number = numbers[i];\n \
    \       for (int j = i + 1; j < numbers.length; j++) {\n            if (numbers[j]\
    \ == number) {\n                number = numbers[j];\n                break;\n\
    \            }\n        }\n        unique[uniqueCount++] = number;\n    }\n  \
    \  return unique;\n}\n</code>\n<|/ a tags=java dscore=1 |>\n<| a tags=java dscore=1\
    \ |>\nMy answer is similar to above, but here is a more elegant solution.\n<code>\n\
    private static int[] unique(int[] numbers) {\n    if (numbers.length == 0) return\
    \ numbers;\n    Arrays.sort(numbers);\n    int uniqueCount = 0;\n    int[] unique\
    \ = new int[numbers.length];\n    for (int i = 0; i < numbers.length; ++i) {\n\
    \        int number = numbers[i];\n        for (int j = i + 1; j < numbers.length;\
    \ ++j) {\n            if (numbers[j] < number) {\n                number = numbers[j];\n\
    \                break;\n            }\n        }\n        unique[uniqueCount++]\
    \ = number;\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgd86oewa.d(24): Error: declaration expected, not `<`

    /tmp/tmpgd86oewa.d(33): Error: unterminated character constant

    /tmp/tmpgd86oewa.d(36): Error: unterminated character constant

    /tmp/tmpgd86oewa.d(47): Error: declaration expected, not `for`

    /tmp/tmpgd86oewa.d(47): Error: no identifier for declarator `i`

    /tmp/tmpgd86oewa.d(47): Error: declaration expected, not `<`

    /tmp/tmpgd86oewa.d(47): Error: no identifier for declarator `i`

    /tmp/tmpgd86oewa.d(47): Error: declaration expected, not `++`

    /tmp/tmpgd86oewa.d(49): Error: declaration expected, not `for`

    /tmp/tmpgd86oewa.d(49): Error: no identifier for declarator `j`

    /tmp/tmpgd86oewa.d(49): Error: declaration expected, not `<`

    /tmp/tmpgd86oewa.d(49): Error: no identifier for declarator `j`

    /tmp/tmpgd86oewa.d(49): Error: declaration expected, not `++`

    /tmp/tmpgd86oewa.d(52): Error: declaration expected, not `break`

    /tmp/tmpgd86oewa.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgd86oewa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    int num_elements = numbers.length;\n\tlong[] answer = new long[num_elements];\n\
    \tint[] index = new int[num_elements];\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoami3c3j.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoami3c3j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int pos = 0;\n    for (int i\
    \ = 0; i < numbers.length; i++)\n    {\n        if (pos < result.length)\n   \
    \     {\n            if (numbers[i] == result[pos])\n            {\n         \
    \       pos++;\n            }\n        }\n        else\n        {\n          \
    \  result[pos] = numbers[i];\n        }\n    }\n    return result.subarray(0,\
    \ pos);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThank you! I didn't even know\
    \ about the STD library.\n<|/ c |>\n<| c |>\nI did a Google search on \"Remove\
    \ duplicates from an array of integers\" and found this as the top result.\n<|/\
    \ c |>\n<| c |>\nThe algorithm can be optimized to run at O(n). See the solution\
    \ by Erik below. I got my implementation based on this answer (https://stackoverflow.com/a/59424868/1669044)\n\
    <|/ c |>\n<| c |>\n- Your solution removes all duplicate elements in the array.\
    \ What if I need to keep only unique elements based on some logic?\n<|/ c |>\n\
    <| c |>\n-zorn - Yes, it does remove all duplicates. But it keeps the order of\
    \ elements.\n<|/ c |>\n<| a dscore=5 tags=algorithm,java,arrays |>\nEasiest Solution\n\
    Use a Set\n<code>\nInteger[] numbers = { 1, 2, 2, 3, 4, 4, 4, 4 };\nSet<Integer>\
    \ set = new HashSet<>(Arrays.asList(numbers));\n</code>\n<|/ a |>\n<| c |>\nWhat\
    \ will happen if we try to add an element that is already present?\n<|/ c |>\n\
    <| c |>\nNothing happens, set just doesn't add any duplicates.\n<|/ c |>\n<| a\
    \ |>\nJava 8 solution using streams:\n<code>\n    int[] numbers = {1, 2, 2, 3,\
    \ 4, 4, 4, 4};\n    int[] uniques = Arrays.stream(numbers).distinct().toArray();\n\
    </code>\n<|/ a tags=algorithm,java,arrays dscore=5 |>\n<| a tags=algorithm,java,arrays\
    \ |>\nThe easiest way is to use HashSet. \nThe complexity is O(n). \n<code>\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj84rxe8b.d(30): Error: declaration expected, not `<`

    /tmp/tmpj84rxe8b.d(33): Error: unterminated character constant

    /tmp/tmpj84rxe8b.d(52): Error: no identifier for declarator `Set`

    /tmp/tmpj84rxe8b.d(52): Error: declaration expected, not `<`

    /tmp/tmpj84rxe8b.d(53): Error: declaration expected, not `<`

    /tmp/tmpj84rxe8b.d(59): Error: unterminated character constant

    /tmp/tmpj84rxe8b.d(66): Error: declaration expected, not `<`

    /tmp/tmpj84rxe8b.d(76): Error: declaration expected, not `assert`

    /tmp/tmpj84rxe8b.d(77): Error: declaration expected, not `assert`

    /tmp/tmpj84rxe8b.d(78): Error: declaration expected, not `assert`

    /tmp/tmpj84rxe8b.d(79): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj84rxe8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n = numbers.length;\n    long[] noDupes = new long[n];\n    int counter\
    \ = 0;\n    for (int i = 0; i < n; ++i) {\n        if (numbers[i] != numbers[counter])\
    \ {\n            counter++;\n            noDupes[i] = numbers[counter];\n    \
    \    }\n    }\n    return noDupes;\n}\n</code>\n<|/ a tags=arrays,c#,duplicates\
    \ |>\n<| a dscore=2 tags=arrays,c#,duplicates |>\nYou can use LINQ to remove the\
    \ duplicates from an array as follows:\n<code>\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv65difpf.d(23): Error: declaration expected, not `<`

    /tmp/tmpv65difpf.d(32): Error: declaration expected, not `assert`

    /tmp/tmpv65difpf.d(33): Error: declaration expected, not `assert`

    /tmp/tmpv65difpf.d(34): Error: declaration expected, not `assert`

    /tmp/tmpv65difpf.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv65difpf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int nSize = numbers.length;\n    if (nSize == 0)\n        return numbers;\n\
    \    \n    long[] n = new long[nSize];\n    \n    long nValue = numbers[0];\n\
    \    for (int i = 0; i < nSize; i++)\n    {\n        if (nValue == numbers[i])\n\
    \            continue;\n        n[nSize-i-1] = nValue;\n        nValue = numbers[i];\n\
    \    }\n    return n;\n}\n</code>\n<|/ a tags=arrays,c++,algorithm dscore=1 |>\n\
    <| c |>\nI think it's important to point out that this solution only works for\
    \ integers. It will not work for long integers, doubles or floats\n<|/ c |>\n\
    <| c |>\nI did not claim that my solution works for all data types. As you said\
    \ yourself, I did say that it works only for integers. That is what I intended\
    \ since I provided solution for all data types. I did NOT claim that it works\
    \ only for integers. Please read and understand carefully my comment above. It\
    \ is important to point out that this solution only works for integers. It will\
    \ not work for long integers, doubles or floats. I clearly stated that in my comment.\n\
    <|/ c |>\n<| c |>\nOh, I thought you meant that your solution only works for integers.\
    \ I totally misunderstood what you meant, my apologies. You also pointed out that\
    \ I did not claim that my solution works for all data types. I do intend to test\
    \ it on my own data and see if it works for all data types.\n<|/ c |>\n<| c |>\n\
    BTW, you should test it on any big integers. All of these algorithms work only\
    \ for integers. I tested it on ints on my machine and it was fine.\n<|/ c |>\n\
    <| a |>\nThis is my implementation. I've tested it on random inputs, and it works\
    \ fine.\n<code>\n#include <iostream>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpatlcgly_.d(28): Error: declaration expected, not `<`

    /tmp/tmpatlcgly_.d(31): Error: unterminated character constant

    /tmp/tmpatlcgly_.d(43): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpatlcgly_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    List<long> numbers_ = new List<long>();\n\tfor (long number : numbers)\n\t\tnumbers_.add(number);\n\
    \tnumbers_.remove_duplicates();\n\treturn numbers_.ToArray();\n}\n/*\n From an\
    \ array of doubles, remove all elements that occur more than once.\n    Keep order\
    \ of elements left the same as in the input.\n    >>> remove_duplicates([1L, 2L,\
    \ 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n\tList<double> numbers_ = new List<double>();\n\tfor (double number\
    \ : numbers)\n\t\tnumbers_.add(number);\n\tnumbers_.remove_duplicates();\n\treturn\
    \ numbers_.ToArray();\n}\n/*\n From an array of strings, remove all elements that\
    \ occur more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([\u201CA\u201D, \u201CB\u201D, \u201CB\u201D, \u201C\
    A\u201D])\n    [\u201CA\u201D, \u201CB\u201D]\n    \n*/\nstring[] remove_duplicates(string[]\
    \ numbers) \n{\n\tList<string> numbers_ = new List<string>();\n\tfor (string number\
    \ : numbers)\n\t\tnumbers_.add(number);\n\tnumbers_.remove_duplicates();\n\treturn\
    \ numbers_.ToArray();\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj0ne8303.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpj0ne8303.d(12): Error: found `>` when expecting `.` following long

    /tmp/tmpj0ne8303.d(12): Error: found `(` when expecting identifier following `long`.

    /tmp/tmpj0ne8303.d(12): Error: found `)` when expecting `;` following statement

    /tmp/tmpj0ne8303.d(12): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpj0ne8303.d(13): Error: semicolon expected, not `:`

    /tmp/tmpj0ne8303.d(13): Error: expression expected, not `:`

    /tmp/tmpj0ne8303.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpj0ne8303.d(27): Error: found `>` when expecting `.` following double

    /tmp/tmpj0ne8303.d(27): Error: found `>` when expecting `.` following double

    /tmp/tmpj0ne8303.d(27): Error: found `(` when expecting identifier following `double`.

    /tmp/tmpj0ne8303.d(27): Error: found `)` when expecting `;` following statement

    /tmp/tmpj0ne8303.d(27): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpj0ne8303.d('
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  if\
    \ (numbers.length < 1) \n    return numbers;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f00dil9.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f00dil9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  // TODO: Optimize this by sorting and then reversing?\n    long[] result =\
    \ new long[numbers.length];\n    long seen[numbers.length];\n    long unique =\
    \ 0, count = 0;\n    for (long n : numbers)\n    {\n        seen[count++] = n;\n\
    \    }\n    for (int i = 0; i < count; i++)\n    {\n        long n = seen[i];\n\
    \        long previous = -1;\n        bool found = false;\n        for (int j\
    \ = i; j < count; j++)\n        {\n            if (seen[j] == n)\n           \
    \ {\n                if (found == true)\n                    unique++;\n     \
    \           else\n                {\n                    previous = j;\n     \
    \               found = true;\n                }\n            }\n        }\n \
    \       if (previous == -1 && found == true)\n            unique++;\n        else\n\
    \        {\n            result[i - 1] = (previous + 1 == unique) ? previous :\
    \ unique - previous;\n            unique--;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=algorithm,c#,duplicates,linq dscore=1 |>\n<| c |>\nthanks\
    \ man, that is very very nice. i will try it out for sure. :)\n<|/ c |>\n<| c\
    \ |>\nNo problem! I ran it on some test data and it worked just fine.\n<|/ c |>\n\
    <| a dscore=1 |>\nThis is not the optimal solution in terms of readability. But\
    \ since performance is very important here is the algorithm I would use for both\
    \ C# and Java:\n<code>\npublic static long RemoveDuplicates(long[] numbers)\n\
    {\n    long unique = 1;\n    long result = 0;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz1c7l7ka.d(14): Deprecation: instead of C-style syntax, use D-style
    syntax `long[numbers.length] seen`

    /tmp/tmpz1c7l7ka.d(16): Error: semicolon expected, not `:`

    /tmp/tmpz1c7l7ka.d(16): Error: expression expected, not `:`

    /tmp/tmpz1c7l7ka.d(16): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmpz1c7l7ka.d(48): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz1c7l7ka.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] result = new long[numbers.length];\n    int i = 0;\n    while (i < numbers.length)\
    \ \n    {\n        if (numbers[i] != numbers[i+1]) \n        {\n            result[i++]\
    \ = numbers[i++];\n        }\n    }\n    return result;\n}\n/*\n From an array\
    \ of floats, remove all elements that occur more than once.\n    Keep order of\
    \ elements left the same as in the input.\n    >>> remove_duplicates([1.0, 2.0,\
    \ 3.0, 2.0, 4.0])\n    [1.0, 3.0, 4.0]\n*/\ndouble[] remove_duplicates(double[]\
    \ numbers) \n{\n    double[] result = new double[numbers.length];\n    int i =\
    \ 0;\n    while (i < numbers.length) \n    {\n        if (numbers[i] != numbers[i+1])\
    \ \n        {\n            result[i++] = numbers[i++];\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb16b59m3.d(46): Error: `tmpb16b59m3.remove_duplicates` called with
    argument types `(void[])` matches both:

    /tmp/tmpb16b59m3.d(10):     `tmpb16b59m3.remove_duplicates(long[] numbers)`

    and:

    /tmp/tmpb16b59m3.d(29):     `tmpb16b59m3.remove_duplicates(double[] numbers)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb16b59m3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  var\
    \ numsCnt = 0;\n  var numsMax = std.array.max(numbers);\n  var numsMin = std.array.min(numbers);\n\
    \  var numsSum = std.math.sum(numbers);\n  var numsSumOfSquares, numsSumOfSquares2,\
    \ numsSumOfSquares3;\n  var numsSumOfSquaresSum, numsSumOfSquaresSumOfSquares;\n\
    \  var numsSumOfSquaresSumOfSquares2, numsSumOfSquaresSumOfSquares3;\n  var numsSumOfSquaresSumOfSquaresSum,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquares;\n  var numsSumOfSquaresSumOfSquaresSumOfSquares,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquaresSum;\n  var numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSum;\n  var numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares;\n  var numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares;\n\
    \  var numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares,\
    \ numsSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquaresSumOfSquares;\n\
    \  for(var num of numbers)\n  {\n    if(num == numsMax || num == numsMin)\n  \
    \    numsCnt++;\n    else\n    {\n      if(numsSumOfSquares == 0)\n      {\n \
    \       numsSumOfSquares = num;\n        numsSumOfSquaresSum = 0;\n        numsSumOfSquaresSumOfSquares2\
    \ = 0;\n        numsSumOfSquaresSumOfSquares3 = 0;\n        numsSumOfSquaresSumOfSquaresSum\
    \ = 0;\n        numsSumOfSquaresSumOfSquaresSumOfSquares2 = 0;\n        numsSumOfSquaresSumOfSquaresSum\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zodtquj.d(25): Error: found `num` when expecting `;` following
    statement

    /tmp/tmp3zodtquj.d(25): Error: found `numbers` when expecting `;` following `for`
    condition

    /tmp/tmp3zodtquj.d(40): Error: found `unittest` when expecting `;` following statement

    /tmp/tmp3zodtquj.d(48): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3zodtquj.d(48): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3zodtquj.d(48): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp3zodtquj.d(48): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zodtquj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long[] results = new long[numbers.length];\n\tfor (long i : numbers) \n\t{\n\t\
    \tfor (int k = 0; k < i; k++) \n\t\t{\n\t\t\tif (results[k] == i) \n\t\t\t{\n\t\
    \t\t\tresults[k] = results[k+1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ results;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0mr4vnme.d(13): Error: semicolon expected, not `:`

    /tmp/tmp0mr4vnme.d(13): Error: expression expected, not `:`

    /tmp/tmp0mr4vnme.d(13): Error: found `numbers` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0mr4vnme.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ n = numbers.length;\n  long[] result = new long[n];\n  int duplicates = 0;\n\
    \  int i;\n  for (i = 0; i < n; ++i) {\n    if (numbers[i] != numbers[result[i]])\
    \ {\n      result[duplicates++] = numbers[i];\n    }\n  }\n  return result;\n\
    }\nunittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqpa_03md.d(12): Error: cannot implicitly convert expression `numbers.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpa_03md.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    var indexed = new long[numbers.length];\n\tfor (var index = 0; index < numbers.length;\
    \ index++) {\n\t\tvar i = indexed[index];\n\t\tif (i == 0) continue;\n\t\t\n\t\
    \tif (numbers[index] != numbers[i]) {\n\t\t\tindexed[index] = numbers[index];\n\
    \t\t\tindex++;\n\t\t} else {\n\t\t\ti--;\n\t\t}\n\t}\n\t\n\tvar newArray = new\
    \ long[indexed.length-1];\n\tfor (var index = 0; index < indexed.length; index++)\
    \ {\n\t\tnewArray[index] = indexed[index];\n\t}\n\t\n\treturn newArray;\n}\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbm7jt7fp.d(12): Error: undefined identifier `var`

    /tmp/tmpbm7jt7fp.d(13): Error: undefined identifier `var`

    /tmp/tmpbm7jt7fp.d(14): Error: undefined identifier `var`

    /tmp/tmpbm7jt7fp.d(25): Error: undefined identifier `var`

    /tmp/tmpbm7jt7fp.d(26): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm7jt7fp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  var\
    \ results = new long[numbers.length];\n  int index = 0;\nunittest\n{\n    alias\
    \ candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6xj72hy.d(14): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6xj72hy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  long[]\
    \ result = new long[numbers.length];\n  int j = 0;\n  for (int i = 0; i < numbers.length;\
    \ ++i) {\n    if (numbers[i] != numbers[j]) {\n      result[++j] = numbers[i];\n\
    \    }\n  }\n  return result;\n}\n</code>\n<|/ a |>\n<| c |>\nI'm sorry, I should\
    \ have clarified that I'm looking for an implementation with linear time complexity,\
    \ not the standard library. I should have added that to the question. Thanks for\
    \ your suggestions though.\n<|/ c |>\n<| c |>\nYou didn't mention linear complexity\
    \ in the question.  You still haven't specified how you define linear.  If you\
    \ meant \"linear in the number of digits\", then this is still linear in the number\
    \ of digits.\n<|/ c |>\n<| c |>\nI did mention linear time complexity in the question,\
    \ but I see how I was unclear on that. I've clarified it above.\n<|/ c |>\n<|\
    \ c |>\nThe code above has a time complexity of O(#digits).  If you had 10,000\
    \ digits, you'd have O(10000).  How many digits do you have?  If it's 10,000,\
    \ then it's linear.\n<|/ c |>\n<| c |>\nYou did specify linear time complexity\
    \ in the question. Your code is a linear time implementation.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nHere is another solution based on the approach you gave:\n<code>\n\
    private void removeDups(int[] arr) {\n    HashSet<Integer> set = new HashSet<Integer>();\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz9t3aela.d(21): Error: declaration expected, not `<`

    /tmp/tmpz9t3aela.d(24): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(24): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(27): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(27): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(30): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(33): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(33): Error: unterminated character constant

    /tmp/tmpz9t3aela.d(33): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz9t3aela.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int\
    \ len = 0;\n  foreach (long n in numbers)\n    len += n;\n  long[] result = new\
    \ long[len];\n  long curr = 1;\n  foreach (long n in numbers)\n  {\n    int i\
    \ = 0;\n    while (i < result.length && n >= result[i])\n    {\n      ++i;\n \
    \   }\n    result[i] = n;\n  }\n  return result;\n}\n</code>\nFor a more efficient\
    \ solution you can use some kind of hashing. Since you said you were using python,\
    \ the following code implements the hashing technique for you using pythons built\
    \ in hash function.\n<code>\n// the hash function\ndef hash_long(x):\n    return\
    \ hash(x) & (1<<63)\n    \n// an example of a hashing algorithm\nx = [hash_long(1)\
    \ for _ in range(1000000)]\n</code>\nNote that python does not have an equivalent\
    \ for std.hash; however, you can use the hash function from pythons built in hashing\
    \ functions. Since you were using std.type, you can use the std.hash.hash_long\
    \ function from std.type.\n<|/ a |>\n<| c |>\n`hash()` function does not exist\
    \ in Python.\n<|/ c |>\n<| c |>\nit does if you import the python standard library.\
    \ Try it out.\n<|/ c |>\n<| a tags=arrays,python,algorithm,python-3.x dscore=1\
    \ |>\n<code>\nimport random\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf3svk3yr.d(13): Error: found `in` when expecting `;`

    /tmp/tmpf3svk3yr.d(17): Error: found `in` when expecting `;`

    /tmp/tmpf3svk3yr.d(28): Error: declaration expected, not `<`

    /tmp/tmpf3svk3yr.d(38): Error: no identifier for declarator `however`

    /tmp/tmpf3svk3yr.d(38): Error: declaration expected, not `,`

    /tmp/tmpf3svk3yr.d(53): Error: declaration expected, not `assert`

    /tmp/tmpf3svk3yr.d(54): Error: declaration expected, not `assert`

    /tmp/tmpf3svk3yr.d(55): Error: declaration expected, not `assert`

    /tmp/tmpf3svk3yr.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf3svk3yr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if(numbers == null)\n        return null;\n    long[] result = new long[numbers.length];\n\
    \    long[] seen = new long[numbers.length];\n    for(int i = 0; i < numbers.length;\
    \ i++)\n    {\n        if(seen[numbers[i]] > 0)\n            continue;\n     \
    \   seen[numbers[i]] = 1;\n        result[numbers[i]] = numbers[i];\n    }\n \
    \   return result;\n}\n</code>\n<|/ a tags=arrays,sorting,java |>\n<| c |>\nThis\
    \ does not remove duplicates from the array, it just does a counting sort.\n<|/\
    \ c |>\n<| c |>\nAh yes, my bad. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\nThis does remove duplicates from the array.\n<|/ c |>\n<| c |>\nSorry I\
    \ missed that. Yes it does. Thank you. I'll update the answer.\n<|/ c |>\n<| c\
    \ |>\nI think this is O(n^2). Although, it's certainly a lot cleaner than mine.\n\
    <|/ c |>\n<| a tags=arrays,sorting,java |>\n<code>\npackage com.example.test;\n\
    import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\
    import java.util.stream.Collectors;\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbyc2maea.d(25): Error: declaration expected, not `<`

    /tmp/tmpbyc2maea.d(37): Error: unterminated character constant

    /tmp/tmpbyc2maea.d(40): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbyc2maea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int i = 0;\n    int j = 0;\n    long[] out = new long[numbers.length];\n  \
    \  long t = 0;\n    \n    out[0] = numbers[0];\n    \n    for (i = 1; i < numbers.length;\
    \ ++i)\n    {\n        j = i;\n        while (j < numbers.length && numbers[j]\
    \ == numbers[j])\n            ++j;\n        \n        if (j - i != 1)\n      \
    \  {\n            out[i] = numbers[j-1];\n            for (j = j - i; j < numbers.length;\
    \ ++j)\n                numbers[j] = numbers[j+1];\n        }\n    }\n    \n \
    \   return out;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L,\
    \ 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L,\
    \ 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy37gn5g.d(14): Error: no identifier for declarator `long[]`

    /tmp/tmpcy37gn5g.d(14): Error: found `out` instead of statement

    /tmp/tmpcy37gn5g.d(17): Error: found `out` instead of statement

    /tmp/tmpcy37gn5g.d(27): Error: found `out` instead of statement

    /tmp/tmpcy37gn5g.d(33): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy37gn5g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n\t\
    long result = 0;\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tint count\
    \ = 0;\n\t\tfor (int j = i; j < numbers.length; ++j)\n\t\t{\n\t\t\tif (numbers[j]\
    \ == numbers[i])\n\t\t\t{\n\t\t\t\t++count;\n\t\t\t\tif (count > 1)\n\t\t\t\t\t\
    numbers[j] = result;\n\t\t\t}\n\t\t}\n\t\tresult = numbers[i];\n\t}\n\treturn\
    \ numbers;\n}\n/*\n From an array of integers, remove all elements that occur\
    \ more than once.\n    Keep order of elements left the same as in the input.\n\
    \    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n    [1L, 3L, 4L]\n    \n*/\n\
    ulong[] remove_duplicates(ulong[] numbers) \n{\n\tulong result = 0;\n\tfor (int\
    \ i = 0; i < numbers.length; ++i)\n\t{\n\t\tint count = 0;\n\t\tfor (int j = i;\
    \ j < numbers.length; ++j)\n\t\t{\n\t\t\tif (numbers[j] == numbers[i])\n\t\t\t\
    {\n\t\t\t\t++count;\n\t\t\t\tif (count > 1)\n\t\t\t\t\tnumbers[j] = result;\n\t\
    \t\t}\n\t\t}\n\t\tresult = numbers[i];\n\t}\n\treturn numbers;\n}\n/*\n From an\
    \ array of strings, remove all elements that occur more than once.\n    Keep order\
    \ of elements left the same as in the input.\n    >>> remove_duplicates([\"one\"\
    , \"two\", \"one\", \"two\", \"two\"])\n    [\"one\", \"two\"]\n    \n*/\nstring[]\
    \ remove_duplicates(string[] numbers) \n{\n\tstring result = \"\";\n\tfor (int\
    \ i = 0; i < numbers.length; ++i)\n\t{\n\t\tint count = 0;\n\t\tfor (int j = i;\
    \ j < numbers.length; ++j)\n\t\t{\n\t\t\tif (numbers[j] == numbers[i])\n\t\t\t\
    {\n\t\t\t\t++count;\n\t\t\t\tif (count > 1)\n\t\t\t\t\tnumbers[j] = result;\n\t\
    \t\t}\n\t\t}\n\t\tresult = numbers[i];\n\t}\n\treturn numbers;\n}\n/*\n From an\
    \ array of structures, remove all elements that occur more than once.\n    Keep\
    \ order of elements left the same as in the input.\n    >>> remove_duplicates([{\"\
    one\"}, {\"two\"}, {\"one\"}, {\"two\"}, {\"two\"}])\n    [{\"one\"}, {\"two\"\
    }]\n    \n*/\nrecord[] remove_duplicates(record[] numbers) \n{\n\trecord result\
    \ = (record)0;\n\tfor (int i = 0; i < numbers.length; ++i)\n\t{\n\t\tint count\
    \ = 0;\n\t\tfor (int j = i; j < numbers.length; ++j)\n\t\t{\n\t\t\tif (numbers[j].a\
    \ == numbers[i].a && numbers[j].b == numbers[i].b && numbers[j].c == numbers[i].c)\n\
    \t\t\t{\n\t\t\t\t++count;\n\t\t\t\tif (count > 1)\n\t\t\t\t\tnumbers[j] = result;\n\
    \t\t\t}\n\t\t}\n\t\tresult = numbers[i];\n\nunittest\n{\n    alias candidate =\
    \ remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjdof41qh.d(90): Error: C style cast illegal, use `cast(record)0`

    /tmp/tmpjdof41qh.d(105): Error: found `unittest` instead of statement

    /tmp/tmpjdof41qh.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjdof41qh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  long[] output = new long[numbers.length];\n    \n    for (int i = 0; i < numbers.length;\
    \ ++i) \n    {\n        bool found = false;\n        for (int j = 0; j < i; ++j)\
    \ \n        {\n            if (numbers[i] == numbers[j])\n            {\n    \
    \            found = true;\n                break;\n            }\n        }\n\
    \        if (!found)\n        {\n            output[i] = numbers[i];\n       \
    \ }\n    }\n    \n    return output;\n}\n</code>\n<|/ a |>\n<| a tags=c#,java,arrays\
    \ |>\nThe only way I know how to do this in Java is to create a new array of unique\
    \ elements and copy the values to the new array using an iterator.\n<code>\nArrayList<Integer>\
    \ myList = new ArrayList<Integer>();\nIterator<Integer> iter = myList.iterator();\n\
    while(iter.hasNext())\n{\n    Integer i = iter.next();\n    if(!myList.contains(i))\n\
    \    {\n        myList.add(i);\n    }\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    I wouldn't say it's *the* only way, but I think it's the most readable and maintainable.\n\
    <|/ c |>\n<| c |>\nWhat if `myList` contains duplicates? It won't be added to\
    \ `myList`.\n<|/ c |>\n<| c |>\nYou will need an additional `HashSet` since `ArrayList`\
    \ does not contain duplicates.\n<|/ c |>\n<| a tags=c#,java,arrays dscore=3 |>\n\
    If you use Guava, you can use Sets.newSetFromArray() to create a Set from a List.\n\
    <code>\nfinal Set<Integer> numbers = Sets.newSetFromArray( new Integer[] {1,2,3,4,5,6,7,8,9,0,1,1,2,3,3,4});\n\
    </code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nimport java.util.Arrays;\nimport\
    \ java.util.HashSet;\nimport java.util.Set;\nunittest\n{\n    alias candidate\
    \ = remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0dbwly_m.d(33): Error: declaration expected, not `<`

    /tmp/tmp0dbwly_m.d(39): Error: no identifier for declarator `Iterator`

    /tmp/tmp0dbwly_m.d(39): Error: declaration expected, not `<`

    /tmp/tmp0dbwly_m.d(40): Error: declaration expected, not `while`

    /tmp/tmp0dbwly_m.d(43): Error: declaration expected, not `if`

    /tmp/tmp0dbwly_m.d(46): Error: unrecognized declaration

    /tmp/tmp0dbwly_m.d(51): Error: unterminated character constant

    /tmp/tmp0dbwly_m.d(51): Error: unterminated character constant

    /tmp/tmp0dbwly_m.d(51): Error: unterminated character constant

    /tmp/tmp0dbwly_m.d(54): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0dbwly_m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int pos = 0;\n    long value = 0;\n    long[] result = new long[numbers.length];\n\
    unittest\n{\n    alias candidate = remove_duplicates;\n\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhmep7xx.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhmep7xx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  int[]\
    \ count = new int[numbers.length];\n  for (int i = 0; i < numbers.length; i++)\
    \ {\n    if (count[numbers[i]] > 0) {\n      count[numbers[i]]--;\n    } else\
    \ {\n      count[numbers[i]] = numbers.length;\n    }\n  }\n  return numbers.length\
    \ == 0 ? null : new long[count[numbers[0]]];\n}\n</code>\n<|/ a tags=java |>\n\
    <| a tags=java |>\nYou can use ArrayList.removeAll\n<code>\n List<Integer> nums\
    \ = new ArrayList<>();\n // fill the list\n nums.removeAll(Collections.singleton(num));\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nNote that this will actually remove num from\
    \ nums. If the original list contained num, then it'd be empty.\n<|/ c |>\n<|\
    \ c |>\nIt does not remove num from nums.\n<|/ c |>\n<| c |>\n- Not true. If you\
    \ print nums, it will contain num and nums.remove(num) will remove num from nums.\n\
    <|/ c |>\n<| c |>\nYou do not need to store nums in an ArrayList and then remove\
    \ it from nums. ArrayList.removeAll() will do it for you, if you provide a Collection\
    \ of Integers. Just pass in nums.\n<|/ c |>\n<| c |>\n, no, it does not. `removeAll()`\
    \ is a member of `Collections`, not `List`.\n<|/ c |>\n<| a dscore=2 tags=java\
    \ |>\n<code>\nList<Integer> inputList = new ArrayList<Integer>(Arrays.asList(new\
    \ Integer[]{2, 1, 2, 3, 3}));\nSet<Integer> set = new HashSet<Integer>();\nfor\
    \ (int i : inputList) {\n    set.add(Integer.valueOf(i));\n}\nList<Integer> result\
    \ = new ArrayList<Integer>(set);\n</code>\nOr the same without looping\n<code>\n\
    List<Integer> inputList = new ArrayList<Integer>(Arrays.asList(new Integer[]{2,\
    \ 1, 2, 3, 3}));\nSet<Integer> set = new HashSet<Integer>();\nset.addAll(inputList);\n\
    List<Integer> result = new ArrayList<Integer>(set);\n</code>\n<|/ a |>\n<| c |>\n\
    The first method uses O(n) memory, while the second one uses O(1) memory. The\
    \ second method also doesn't answer the question, since OP doesn't want the same\
    \ value repeated multiple times. For example, `[1, 2, 1, 2, 3, 3]` would return\
    \ `[1, 2, 3]` in the first method and `[2, 1]` in the second.\n<|/ c |>\n<| c\
    \ |>\nIn both of the cases, it would be O\nunittest\n{\n    alias candidate =\
    \ remove_duplicates;\n\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L,\
    \ 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpapdkvuzl.d(22): Error: declaration expected, not `<`

    /tmp/tmpapdkvuzl.d(29): Error: unexpected `(` in declarator

    /tmp/tmpapdkvuzl.d(29): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpapdkvuzl.d(29): Error: no identifier for declarator `nums.removeAll(Collections.singleton(num))`

    /tmp/tmpapdkvuzl.d(30): Error: declaration expected, not `<`

    /tmp/tmpapdkvuzl.d(33): Error: unterminated character constant

    /tmp/tmpapdkvuzl.d(50): Error: no identifier for declarator `Set`

    /tmp/tmpapdkvuzl.d(50): Error: declaration expected, not `<`

    /tmp/tmpapdkvuzl.d(51): Error: declaration expected, not `for`

    /tmp/tmpapdkvuzl.d(53): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpapdkvuzl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  int n = numbers.length;\n    long[] result = new long[n];\n    long i;\n  \
    \  \n    int[] count = new int[n];\n    for(i = 0; i < n; i++) count[numbers[i]]++;\n\
    \    \n    for(i = 0; i < n; i++) {\n        if(count[numbers[i]] > 1) result[i]\
    \ = numbers[i];\n        count[numbers[i]]--;\n    }\n    return result;\n}\n\
    </code>\n<|/ a tags=duplicates,arrays,sorting,java dscore=0 |>\n<| a |>\nI realize\
    \ that my answer is late to the game, however, I hope that others may benefit\
    \ from my solution.\nI used the HashMap in Java to eliminate duplicates.\n<code>\n\
    public class RemoveDuplicates\n{\n    public static void main(String[] args)\n\
    \    {\n        int[] numbers = { 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3};\nunittest\n\
    {\n    alias candidate = remove_duplicates;\n\n    assert(candidate([]) == []);\n\
    \    assert(candidate([1L, 2L, 3L, 4L]) == [1L, 2L, 3L, 4L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 2L, 4L, 3L, 5L]) == [1L, 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kyesu3r.d(25): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kyesu3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n From an array of integers,\
    \ remove all elements that occur more than once.\n    Keep order of elements left\
    \ the same as in the input.\n    >>> remove_duplicates([1L, 2L, 3L, 2L, 4L])\n\
    \    [1L, 3L, 4L]\n    \n*/\nlong[] remove_duplicates(long[] numbers) \n{\n  \
    \  if (numbers == null) throw new ArgumentNullException(\"numbers\");\n    long[]\
    \ result = new long[numbers.length];\n    int count = 0;\n    for (int i = 0;\
    \ i < numbers.length; i++)\n    {\n        if (++count > 1) result[i] = numbers[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = remove_duplicates;\n\
    \n    assert(candidate([]) == []);\n    assert(candidate([1L, 2L, 3L, 4L]) ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate([1L, 2L, 3L, 2L, 4L, 3L, 5L]) == [1L,\
    \ 4L, 5L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf1kf_ukg.d(12): Error: undefined identifier `ArgumentNullException`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1kf_ukg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164007
