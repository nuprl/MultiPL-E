language: d
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0) {\n        return null;\n    }\n    string md5sum = MD5_Hash(text.toUtf8String());\n\
    \    return md5sum;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqd9iq4jm.d(17): Error: undefined identifier `MD5_Hash`

    /tmp/tmpqd9iq4jm.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpqd9iq4jm.d(18): Error: cannot implicitly convert expression `md5sum` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqd9iq4jm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    char[] text\
    \ = text.toCharArray();\n    if(text.length == 0)\n        return Null!(\"null\"\
    );\n    int len = text.length;\n    for(int i = 0; i < len; i++) {\n        int\
    \ c = (int)text[i];\n        if(c > 255)\n            throw new RuntimeException(\"\
    Invalid char (\" + c + \") in md5 of \" + text + \" at index \" + i);\n    }\n\
    \    MD5 md5 = new MD5();\n    md5.update(text, 0, len);\n    byte[] digest =\
    \ md5.digest();\n    char[] result = new char[digest.length * 2];\n    for(int\
    \ i = 0; i < digest.length; i++) {\n        byte b = digest[i];\n        result[i\
    \ * 2] = (int)((b >> 4) + 0x0);\n        result[i * 2 + 1] = (int)((b & 0xf) +\
    \ 0x8);\n    }\n    return String!(char[]) result;\n}\n/*\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdj23udb.d(19): Error: C style cast illegal, use `cast(int)text[i]`

    /tmp/tmpfdj23udb.d(29): Error: C style cast illegal, use `cast(int)((b >> 4) +
    0)`

    /tmp/tmpfdj23udb.d(30): Error: C style cast illegal, use `cast(int)((b & 15) +
    8)`

    /tmp/tmpfdj23udb.d(32): Error: found `result` when expecting `;` following `return`
    statement

    /tmp/tmpfdj23udb.d(32): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpfdj23udb.d(34): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdj23udb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    int len = text.length();\n\
    \    Nullable!(int)MD5::digest(text.asBytes(), len);\n    return text.asBytes();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmvzn6x3z.d(15): Error: found `MD5` when expecting `;` following
    statement

    /tmp/tmpmvzn6x3z.d(15): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvzn6x3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable!(string)\
    \ md5 = null;\n    \n    if (text != null && text != \"\")\n    {\n        md5\
    \ = md5(text);\n    }\n    \n    return md5;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbinarqr8.d(18): Error: function expected before `()`, not `md5.get()`
    of type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbinarqr8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.len()\
    \ == 0) return Nullable!(\"null\");\n    else return \"\\\"$text\\\"\";\n}\n</code>\n\
    The full version of the file can be found here.\n<|/ a dscore=3 |>\n<| c |>\n\
    It would be cool if you could share the resulting code as an example here: http://std.github.io/#md5\n\
    <|/ c |>\n<| a tags=hash,md5,haskell,string |>\nSince I still see this question\
    \ getting lots of views I thought I'd contribute a solution I came up with. I\
    \ was working on a project that needed to create a md5 hash function using Haskell\
    \ but then I needed to find a way to ensure that the Haskell code didn't interfere\
    \ with my PHP code. I also wanted to make sure that I didn't run afoul of any\
    \ existing md5 implementations on the platform so I started looking for libraries.\n\
    I found a library that does exactly what I wanted and was relatively easy to work\
    \ with:\n<code>\n{-# LANGUAGE OverloadedStrings #-}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppfa2_iz1.d(17): Error: declaration expected, not `<`

    /tmp/tmppfa2_iz1.d(24): Error: unterminated character constant

    /tmp/tmppfa2_iz1.d(24): Error: unterminated character constant

    /tmp/tmppfa2_iz1.d(24): Error: unterminated character constant

    /tmp/tmppfa2_iz1.d(32): Error: declaration expected, not `{`

    /tmp/tmppfa2_iz1.d(34): Error: declaration expected, not `assert`

    /tmp/tmppfa2_iz1.d(35): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppfa2_iz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.isNullOrEmpty())\n\
    \        return null;\n    else \n        return hex.stringToHex(std.crypto.md5(text));\
    \ \n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5g62fuh.d(14): Error: no property `isNullOrEmpty` for type `string`

    /tmp/tmpy5g62fuh.d(17): Error: undefined identifier `hex`

    /tmp/tmpy5g62fuh.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5g62fuh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\") return null;\n    var h = md5(text.encode());\n    return h.substring(0,\
    \ 4);\n}\n</code>\n<|/ a tags=hash,md5 |>\n<| c |>\nI don't think this is true.\
    \ MD5 does not generate hashcodes for empty strings. It only generates a hashcode\
    \ if the string is not already a hashcode. MD5 also does not handle non-ascii\
    \ characters correctly. https://stackoverflow.com/a/5366638/1700321.\n<|/ c |>\n\
    <| a |>\nIf you want a function that generates MD5 hash for empty strings (\"\"\
    ) you can use this function:\n<code>\ndef string_to_md5(text:String):String =\
    \ {\n  if (text == \"\") \"\" else md5(text.encode()).take(16)\n}\n</code>\n<|/\
    \ a dscore=2 tags=hash,md5 |>\n<| c |>\nThis does not compile: `scala.MatchError:\
    \ null \n  at scala.Predef$.stringToInt(Predef.scala:264)\n  at scala.Predef$.stringToLong(Predef.scala:261)\n\
    \  at scala.Predef$.stringToDouble(Predef.scala:258)\n  at scala.Predef$.stringToInt(Predef.scala:253)\n\
    \  at scala.Predef$.stringToLong(Predef.scala:251)`\n<|/ c |>\n<| a dscore=1 tags=hash,md5\
    \ |>\nA Scala version of's code:\n<code>\nobject StringHelper {\n  def stringToMD5(input:\
    \ String): String = {\n    if (input == \"\") return \"\"\n    val hash = md5(input.encode())\n\
    \    hash.take(16).mkString\n  }\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2p3r1cj7.d(18): Error: declaration expected, not `<`

    /tmp/tmp2p3r1cj7.d(21): Error: unterminated character constant

    /tmp/tmp2p3r1cj7.d(40): Error: unterminated character constant

    /tmp/tmp2p3r1cj7.d(52): Error: declaration expected, not `{`

    /tmp/tmp2p3r1cj7.d(54): Error: declaration expected, not `assert`

    /tmp/tmp2p3r1cj7.d(55): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2p3r1cj7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  text = nullCheck(text);\n\
    \  \n  if (text.length == 0) return null;\nunittest\n{\n    alias candidate =\
    \ string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n   \
    \     assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptw8uqq0v.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptw8uqq0v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!text.length)\
    \ return null;\n    var hash = MD5Engine.hashOf(text.utf8String());\n    return\
    \ string_to_utf8(hash);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp49_ce4o_.d(15): Error: undefined identifier `var`

    /tmp/tmp49_ce4o_.d(15): Error: undefined identifier `MD5Engine`

    /tmp/tmp49_ce4o_.d(16): Error: undefined identifier `string_to_utf8`

    /tmp/tmp49_ce4o_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp49_ce4o_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    var hash = md5(text);\n\
    \    return hash.hash;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp5grt8_4.d(14): Error: undefined identifier `var`

    /tmp/tmpp5grt8_4.d(14): Error: undefined identifier `md5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5grt8_4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ <= 0)\n        return null;\n    string md5 = \"\";\n    foreach (char c in\
    \ text)\n        md5 += int2char( md5((int)char2int(c))+c );\n    return md5;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprftirbhe.d(17): Error: found `in` when expecting `;`

    /tmp/tmprftirbhe.d(18): Error: C style cast illegal, use `cast(int)char2int(c)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprftirbhe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\ttext.hash();\n\
    \tif (text.size() == 0)\n\t\treturn null;\n\treturn text.to_md5();\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwcgk7rbv.d(14): Error: no property `hash` for type `string`

    /tmp/tmpwcgk7rbv.d(15): Error: no property `size` for type `string`

    /tmp/tmpwcgk7rbv.d(17): Error: no property `to_md5` for type `string`

    /tmp/tmpwcgk7rbv.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcgk7rbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  return text.md5(16);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv41ge75l.d(14): Error: no property `md5` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv41ge75l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text.length\
    \ == 0)\n        return null;\n    else\n    {\n        import std.digest;\n \
    \       \n        return digest.digest(text.toByteArray(), DigestAlgorithm.MD5);\n\
    \    }\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphkinpm18.d(20): Error: template `digest(Hash, Range)(auto ref Range
    range) if (!isArray!Range && isDigestibleRange!Range)` does not have property
    `digest`

    /tmp/tmphkinpm18.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkinpm18.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string md5 =\
    \ std.crypto.md5(text);\n    if (md5 == null) return null;\n    return md5;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprdihijgb.d(14): Error: undefined identifier `crypto` in package
    `std`

    /tmp/tmprdihijgb.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmprdihijgb.d(16): Error: cannot implicitly convert expression `md5` of type
    `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdihijgb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  return std.string.to!(String)\
    \ text |> md5 |> std.string.to!(String);\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1lgbfl7.d(14): Error: found `text` when expecting `;` following
    `return` statement

    /tmp/tmpg1lgbfl7.d(14): Error: found `|` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1lgbfl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] input\
    \ = text.toBytes();\n    if (input.length == 0)\n        return Nullable!(\"0\"\
    );\n    byte[] result = new byte[32];\n    byte[] state = new byte[16];\n    MD5\
    \ md5 = new MD5();\n    md5.update(state, 0, 16);\n    md5.update(input, 0, input.length);\n\
    \    md5.doFinal(result, 0);\n    return Nullable!(result);\n}\n\"\n/* Generated\
    \ by Haxe 3.0.1 on Thu Feb 19 15:54:24 2015*/\nclass md5_hx_class extends haxe.HashLib\
    \ {\n\tstatic MD5();\n\tstatic md5(text:String):Nullable<string>;\n\tstatic md5(text:ByteArray):Nullable<ByteArray>;\n\
    \tstatic md5(text:Int):Nullable<Int>;\n\tstatic md5(text:Float):Nullable<Float>;\n\
    \tstatic md5(text:Bool):Nullable<Bool>;\n\tstatic md5(text:Array<Int>):Nullable<Array<Int>>;\n\
    \tstatic md5(text:Array<Float>):Nullable<Array<Float>>;\n\tstatic md5(text:Array<Bool>):Nullable<Array<Bool>>;\n\
    \tstatic md5(text:Array<String>):Nullable<Array<String>>;\n\tstatic md5(text:Array<Array<Int>>):Nullable<Array<Array<Int>>>;\n\
    \tstatic md5(text:Array<Array<Float>>):Nullable<Array<Array<Float>>>;\n\tstatic\
    \ md5(text:Array<Array<Bool>>):Nullable<Array<Array<Bool>>>;\n\tstatic md5(text:Array<Array<String>>):Nullable<Array<Array<String>>>;\n\
    \tstatic md5(text:Array<Array<Array<Int>>>):Nullable<Array<Array<Array<Int>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Float>>>):Nullable<Array<Array<Array<Float>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Bool>>>):Nullable<Array<Array<Array<Bool>>>>;\n\
    \tstatic md5(text:Array<Array<Array<String>>>):Nullable<Array<Array<Array<String>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Array<Int>>>>):Nullable<Array<Array<Array<Array<Int>>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Array<Float>>>>):Nullable<Array<Array<Array<Array<Float>>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Array<Bool>>>>):Nullable<Array<Array<Array<Array<Bool>>>>>;\n\
    \tstatic md5(text:Array<Array<Array<Array<String>>>>):Nullable<\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63fxxgxs.d(25): Error: declaration expected, not `"\x0a/* Generated
    by Haxe 3.0.1 on Thu Feb 19 15:54:24 2015*/\x0aclass md5_hx_class extends haxe.HashLib
    {\x0a\x09static MD5();\x0a\x09static md5(text:String):Nullable<string>;\x0a\x09static
    md5(text:ByteArray):Nullable<ByteArray>;\x0a\x09static md5(text:Int):Nullable<Int>;\x0a\x09static
    md5(text:Float):Nullable<Float>;\x0a\x09static md5(text:Bool):Nullable<Bool>;\x0a\x09static
    md5(text:Array<Int>):Nullable<Array<Int>>;\x0a\x09static md5(text:Array<Float>):Nullable<Array<Float>>;\x0a\x09static
    md5(text:Array<Bool>):Nullable<Array<Bool>>;\x0a\x09static md5(text:Array<String>):Nullable<Array<String>>;\x0a\x09static
    md5(text:Array<Array<Int>>):Nullable<Array<Array<Int>>>;\x0a\x09static md5(text:Array<Array<Float>>):Nullable<Array<Array<Float>>>;\x0a\x09static
    md5(text:Array<Array<Bool>>):Nullable<Array<Array<Bool>>>;\x0a\x09static md5(text:Array<Array<String>>):Nullable<Array<Array<String>>>;\x0a\x09static
    md5(text:Array<Array<Array<Int>>>):Nullable<Array'
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyt3epz9.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyt3epz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return md5(text);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpom2mnwxv.d(14): Error: undefined identifier `md5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpom2mnwxv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tstring result;\n\
    \tif (text.isEmpty())\n\t\treturn null;\n\tbyte[] bytes = text.ToBytes();\n\t\
    result = md5(bytes);\n\treturn result;\n}\nunittest\n{\n    alias candidate =\
    \ string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n   \
    \     assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvp41be8u.d(15): Error: no property `isEmpty` for type `string`

    /tmp/tmpvp41be8u.d(17): Error: no property `ToBytes` for type `string`

    /tmp/tmpvp41be8u.d(18): Error: undefined identifier `md5`

    /tmp/tmpvp41be8u.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpvp41be8u.d(19): Error: cannot implicitly convert expression `result` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvp41be8u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\n    \n    MD5 md5 = new MD5();\n    \n    md5.update(text.asBytes());\n\
    \    \n    return md5.digest();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl2gdm9_u.d(17): Error: undefined identifier `MD5`

    /tmp/tmpl2gdm9_u.d(17): Error: undefined identifier `MD5`

    /tmp/tmpl2gdm9_u.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl2gdm9_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    hash<string>\
    \ hasher = sha512.NewHasher();\n    if(!string.IsNullOrEmpty(text))\n    {\n \
    \       hasher.Update(text.ToCharArray());\n    }\n    Nullable<byte[]> hashBytes\
    \ = hasher.Result();\n    if(hashBytes.HasValue)\n    {\n        return hex((byte[])hashBytes.Value);\n\
    \    }\n    else\n    {\n        return null;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yjdlntd.d(14): Error: found `>` when expecting `;` following statement

    /tmp/tmp0yjdlntd.d(19): Error: found `[` when expecting `.` following byte

    /tmp/tmp0yjdlntd.d(19): Error: found `]` when expecting identifier following `byte`.

    /tmp/tmp0yjdlntd.d(19): Error: found `>` when expecting `;` following statement

    /tmp/tmp0yjdlntd.d(22): Error: C style cast illegal, use `cast(byte[])hashBytes.Value`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yjdlntd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text.empty())\
    \ return null;\n  byte[] bytes = bytes(text); \n  byte[] hash = md5(bytes); \n\
    \  \n  if (hash.length < 32) \n    return null; \n  \n  return string(hash, 0,\
    \ 32); \n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv8buzbjy.d(14): Error: no property `empty` for type `string`

    /tmp/tmpv8buzbjy.d(15): Error: undefined identifier `bytes`

    /tmp/tmpv8buzbjy.d(16): Error: undefined identifier `md5`

    /tmp/tmpv8buzbjy.d(21): Error: function expected before `()`, not `string` of
    type `string`

    /tmp/tmpv8buzbjy.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpv8buzbjy.d(19): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv8buzbjy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable!(string)?\
    \ hashed = null;\n    if(!text.empty())\n    {\n        hashed = _md5(text);\n\
    \    }\n    return hashed;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1b9zh7vy.d(14): Error: found `;` when expecting `:`

    /tmp/tmp1b9zh7vy.d(15): Error: expression expected, not `if`

    /tmp/tmp1b9zh7vy.d(16): Error: found `{` when expecting `;` following statement

    /tmp/tmp1b9zh7vy.d(19): Error: declaration expected, not `return`

    /tmp/tmp1b9zh7vy.d(20): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1b9zh7vy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable!(String)\
    \ hash = md5(text.asBytes());\n    return hash;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpofqy2l15.d(14): Error: undefined identifier `String`, did you mean
    alias `string`?

    /tmp/tmpofqy2l15.d(14): Error: undefined identifier `md5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpofqy2l15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    if (text.length\
    \ == 0)\n        return Null!();\n    \n    MD5 hash = new MD5();\n    hash.update(text);\n\
    \    \n    byte[] result = hash.bytes();\n    \n    return Byte!(result);\n}\n\
    /*\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphe_h01qv.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphe_h01qv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text !=\
    \ \"\") {\n        return md5(text);\n    } else {\n        return null;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdb7zz2e2.d(15): Error: undefined identifier `md5`

    /tmp/tmpdb7zz2e2.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdb7zz2e2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string result\
    \ = null;\n    if(text != null)\n        result = md5(text);\n    else\n     \
    \   result = null;\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n   \
    \     assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcty3q8eo.d(16): Error: undefined identifier `md5`

    /tmp/tmpcty3q8eo.d(19): Error: cannot implicitly convert expression `result` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcty3q8eo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\trequire!(text.len\
    \ > 0, \"text must not be empty\");\n\t\n\t\n\tusing std.digest;\n\tusing std.conv;\n\
    \tusing std.string;\n\t\n\t\n\tstring md5string = digest::md5(text).result();\n\
    \treturn md5string;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1c8cf2rv.d(17): Error: found `std` when expecting `;` following
    statement

    /tmp/tmp1c8cf2rv.d(18): Error: found `std` when expecting `;` following statement

    /tmp/tmp1c8cf2rv.d(19): Error: found `std` when expecting `;` following statement

    /tmp/tmp1c8cf2rv.d(22): Error: semicolon expected, not `:`

    /tmp/tmp1c8cf2rv.d(22): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1c8cf2rv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text.length==0)\n\
    \        return null;\n    \n    var md5: MD5 = MD5();\n    md5.update(text.toBytes());\n\
    \    \n    var md5_bytes = md5.finish();\n    var md5_hex = md5_bytes.toHexString();\n\
    \    \n    return Nullable!(md5_hex);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjleyyyam.d(17): Error: found `md5` when expecting `;` following
    statement

    /tmp/tmpjleyyyam.d(17): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjleyyyam.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text == \"\
    \")\n    return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0pkkr8t5.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0pkkr8t5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\treturn null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcrfy5y7v.d(14): Error: cannot implicitly convert expression `null`
    of type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcrfy5y7v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    std.array!(string,String)\
    \ a = text;\n    std.for!(i:int range 0 a.length) a[i] = string(a[i]).hashCode().to!string;\n\
    \    std.array!(md5,md5,a.length) md5 = new md5;\n    md5.init;\n    md5.update(a);\n\
    \    return std.typecons.hash(string_to_byte(md5.result));\n}\nunittest\n{\n \
    \   alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp1w1b6po.d(15): Error: identifier expected following `.`, not `for`

    /tmp/tmpp1w1b6po.d(15): Error: found `!` when expecting `;` following statement

    /tmp/tmpp1w1b6po.d(15): Error: found `:` when expecting `)`

    /tmp/tmpp1w1b6po.d(15): Error: found `int` when expecting `;` following statement

    /tmp/tmpp1w1b6po.d(15): Error: found `0` when expecting `;` following statement

    /tmp/tmpp1w1b6po.d(15): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1w1b6po.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    auto len = text.length();\n\
    \    if(len > 0) \n    {\n        auto md5sum = text;\n        for(auto i = 0;\
    \ i < len; ++i)\n            md5sum = md5sum ^ md5sum.c_str()[i];\n        \n\
    \        return md5sum;\n    }\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpko0vtmuh.d(14): Error: no property `length` for type `string`

    /tmp/tmpko0vtmuh.d(19): Error: no property `c_str` for type `string`

    /tmp/tmpko0vtmuh.d(21): Error: cannot implicitly convert expression `md5sum` of
    type `string` to `Nullable!string`

    /tmp/tmpko0vtmuh.d(23): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpko0vtmuh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(string)std.md5.stringToMD5(text);\n\
    }\n/* Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return null.\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpixhqb57y.d(14): Error: found `std` when expecting `;` following
    `return` statement

    /tmp/tmpixhqb57y.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpixhqb57y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.size\
    \ == 0)\n        return null;\n    \n    int res = 0;\n    for (int i = 0; i <\
    \ text.size; ++i)\n        res += int(text[i]) << (i * 8);\n    return res;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rk7de0w.d(14): Error: no property `size` for type `string`

    /tmp/tmp7rk7de0w.d(18): Error: no property `size` for type `string`

    /tmp/tmp7rk7de0w.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp7rk7de0w.d(20): Error: cannot implicitly convert expression `res` of type
    `int` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rk7de0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.Len()\
    \ != 0) \n    {\n        return hash!(MD5_CTR, text, text.Len(), 0, 0);\n    }\n\
    \    return null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeq45n5b0.d(14): Error: no property `Len` for type `string`

    /tmp/tmpeq45n5b0.d(16): Error: template instance `hash!(MD5_CTR, text, text.Len(),
    0, 0)` template `hash` is not defined, did you mean cosh?

    /tmp/tmpeq45n5b0.d(18): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeq45n5b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    int len = length(text);\n\
    \    int[] code = new int[len];\n    int[] sum = new int[8];\n    int[] key =\
    \ new int[16];\n    \n    key[0] = 0x67452301;\n    key[1] = 0xefcdab89;\n   \
    \ key[2] = 0x98badcfe;\n    key[3] = 0x10325476;\n    key[4] = 0xc3d2e1f0;\n \
    \   key[5] = 0x4caf6f40;\n    key[6] = 0x80deb1f8;\n    key[7] = 0x510e527f;\n\
    \    key[8] = 0xd5e2c124;\n    key[9] = 0xe282b209;\n    key[10] = 0x61e37a1f;\n\
    \    key[11] = 0xa50ab56f;\n    key[12] = 0xf69f2445;\n    key[13] = 0x6fa87e4f;\n\
    \    key[14] = 0x8f580721;\n    key[15] = 0xdb0c2e0d;\n    \n    for (int i =\
    \ 0; i < len; i += 1)\n    {\n        int a = code[i]; //code[i]\n        int\
    \ b = key[a >>> 4 & 0xf];\n        int c = key[a & 0x0f];\n        \n        int\
    \ d = code[i + len]; //code[i + len]\n        int e = key[d >>> 4 & 0xf];\n  \
    \      int f = key[d & 0x0f];\n        \n        sum[0] += a;\n        sum[1]\
    \ += b;\n        sum[2] += c;\n        sum[3] += d;\n        sum[4] += e;\n  \
    \      sum[5] += f;\n        sum[6] += (a >>> 2) + (b >>> 2) + (c >>> 2);\n  \
    \      sum[7] += (d >>> 2) + (e >>> 2) + (f >>> 2);\n    }\n    \n    int h =\
    \ 0;\n    int i = 0;\n    int b = 0;\n    int c = 0;\n    \n    int s = sum[7];\n\
    \    int q = sum[6];\n    int r = sum[5];\n    int t = sum[4];\n    \n    for\
    \ (; i <= 11; i += 1)\n    {\n        int tmp1 = sum[0] + sum[1];\n        int\
    \ tmp2 = sum[2] + sum[3];\n        int tmp3 = sum[4] + sum[5];\n        int tmp4\
    \ = sum[6] + sum[7];\n        \n        b = b + tmp1 + (tmp2 << 16);\n       \
    \ \n        sum[0] = (sum[0] + tmp2) + (sum[2] >> 16);\n        sum[1] = b + (sum[3]\
    \ >> 16);\n        sum[2] = (b + sum[3] << 16);\n        \n        c = c + (tmp3\
    \ << 32);\n        \n        sum[3] = (sum[4] + tmp4) + (sum[5] \nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprrra9ymz.d(81): Error: found `unittest` when expecting `)`

    /tmp/tmprrra9ymz.d(83): Error: found `{` when expecting `;` following statement

    /tmp/tmprrra9ymz.d(107): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprrra9ymz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    var text = text.trim();\n\
    \    if(text.length == 0)\n        return null;\n    var md5: MD5 = new MD5CryptoServiceProvider().computeHash(UTF8Encode(text));\n\
    \    return UTF8Encode(md5.toString());\n}\n</code>\nThe full example is available\
    \ on GitHub here. \nhttps://github.com/edelight/doodle/blob/master/src/main/kotlin/org/edelight/hashing/StringHasher.kotl\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks so much! This seems to be the best solution\
    \ so far. Will look into using MD5 since it's a very fast hash.\n<|/ c |>\n<|\
    \ c |>\nThe above example is for Kotlin and will work fine on any platform that\
    \ supports Java. However, for pure Kotlin, you can use Kotlin's [`java.lang.String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)\
    \ instead of Java's [`java.lang.String`](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html).\n\
    <|/ c |>\n<| a dscore=0 tags=hash,php,hashcode,c#,hash-function |>\nThe PHP function\
    \ hash is more performant than the C# method MD5\n<code>\n$md5 = hash('md5', utf8_encode('password'));\n\
    $result = md5($md5);\n</code>\n<|/ a |>\n<| a |>\nI haven't tested it but this\
    \ should work \n<code>\nusing System;\nusing System.Collections.Generic;\nusing\
    \ System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nnamespace\
    \ ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[]\
    \ args)\n        {\n            MD5 md5 = new MD5CryptoServiceProvider();\n  \
    \          string test = \"test1\";\n            string md5Hash = GetMD5Hash(test);\n\
    \            Console.WriteLine(\"{0}\",md5Hash);\n            Console.ReadKey();\n\
    \        }\n        public static string GetMD5Hash(string input)\n        {\n\
    \            byte[] data = System.Text.Encoding.UTF8.GetBytes(input);\n      \
    \      byte[] hash = md5.ComputeHash(data);\n            StringBuilder sb = new\
    \ StringBuilder();\n            foreach(byte b in hash)\n            {\n     \
    \           sb.Append(b.ToString(\"X2\"));\n            }\n            return\
    \ sb.ToString();\n        }\n    }\n}\n</code>\n<|/ a dscore=0 tags=hash,php,hashcode,c#,hash-function\
    \ |>\n<| a tags=hash,php\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp55g2vmb2.d(17): Error: found `md5` when expecting `;` following
    statement

    /tmp/tmp55g2vmb2.d(17): Error: found `:` instead of statement

    /tmp/tmp55g2vmb2.d(20): Error: declaration expected, not `<`

    /tmp/tmp55g2vmb2.d(25): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(28): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(33): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(33): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(33): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(33): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(34): Error: declaration expected, not `$`

    /tmp/tmp55g2vmb2.d(35): Error: declaration expected, not `<`

    /tmp/tmp55g2vmb2.d(38): Error: unterminated character constant

    /tmp/tmp55g2vmb2.d(41): Error: semicolon expected, not `.`

    /tmp/tmp55g2vmb2.d(41): Error: no identifier for declarator `.Collections.Generic`

    /tmp/tmp55g2vmb2.d(42): Error: semicolon expected, not `.`

    /tmp/tmp55g2vmb2.d(42): Error: no identifier for declar'
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable<string>\
    \ md5hash = null;\n    \n    // NOTE: MD5 hash code is 32bit integer from 0 to\
    \ 4294967295\n    \n    if (text != \"\") {\n        int md5_hash = std.hashlib.md5hash(string_to_bytes(text));\n\
    \        md5hash = md5_hash;\n    }\n    \n    return md5hash;\n}\n/*\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsmi2gimz.d(14): Error: found `>` when expecting `;` following statement

    /tmp/tmpsmi2gimz.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsmi2gimz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if(text.length==0)\n\
    \    return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n  \
    \      auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo08gmz3p.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo08gmz3p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 m;\n   \
    \ m.reset();\n    foreach (string line in text.split('\\n'))\n        m.update(line);\n\
    \    return Nullable!(string) m.getMD5();\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfcmihlk7.d(16): Error: found `in` when expecting `;`

    /tmp/tmpfcmihlk7.d(18): Error: found `m` when expecting `;` following `return`
    statement

    /tmp/tmpfcmihlk7.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfcmihlk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    int result =\
    \ 0;\n    int i;\n    string textToHash = text;\n    string hash;\n    if (textToHash.length()\
    \ == 0)\n        return null;\n    for(i = 0; i < textToHash.length(); i++) {\n\
    \        int x = (int)textToHash[i];\n        result += x + (x<<7);\n        result\
    \ += (x<<3)|(x>>1);\n        result += (x<<1)|(x>>3);\n    }\n    result = (result>>16)+(result\
    \ & 65535);\n    result = (result<<16)+result;\n    result = result*2057;\n  \
    \  hash = string_to_hex(result);\n    return hash;\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpss7s40ac.d(21): Error: C style cast illegal, use `cast(int)textToHash[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpss7s40ac.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if(text.length\
    \ == 0)\n    return null;\n  else\n    return md5(text);\n}\nunittest\n{\n   \
    \ alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello\
    \ world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnrbdtt8.d(17): Error: undefined identifier `md5`

    /tmp/tmpvnrbdtt8.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnrbdtt8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    // TODO: Implement\
    \ string_to_md5!\n    return Nullable!(null);\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ky2gmrl.d(15): Error: struct `std.typecons.Nullable` does not
    match any template declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ky2gmrl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length!=0)\n\
    \        return md5.hash(text);\n    return Null;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj_9qhfi6.d(15): Error: undefined identifier `md5`

    /tmp/tmpj_9qhfi6.d(16): Error: undefined identifier `Null`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj_9qhfi6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.lenth\
    \ == 0) {\n        return null;\n    }\n    var digest = md5(text);\n    return\
    \ digest;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nYou might want to add the import\
    \ std.md5 here as well. :)\n<|/ c |>\n<| a |>\nIn Swift 4, I use this simple extension:\n\
    <code>\npublic extension String {\n    var md5: String {\n        let md5 = MD5()\n\
    \        return String(data: md5.digest(), encoding: .utf8)!\n    }\n}\n</code>\n\
    <|/ a tags=hash,md5,swift dscore=3 |>\n<| a tags=hash,md5,swift |>\nYou can use\
    \ the following solution in Swift 4.\n<code>\nfunc MD5(text: String) -> String?\
    \ {\n    let md5 = MD5()\n    guard let utf8Data = text.data(using: String.Encoding.utf8)\
    \ else {\n        return nil\n    }\n    let hash = Array(md5.repeated(by: Int(md5.reservedSize))).map\
    \ {\n        (md5.reservedSize).random(in: 0...255)\n    }\n    md5.append(hash.joined())\n\
    \    return String(utf8Data)\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\n\
    import Foundation\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n  \
    \      auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpelg_rlib.d(20): Error: declaration expected, not `<`

    /tmp/tmpelg_rlib.d(59): Error: declaration expected, not `{`

    /tmp/tmpelg_rlib.d(61): Error: declaration expected, not `assert`

    /tmp/tmpelg_rlib.d(62): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpelg_rlib.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!text) {\n\
    \        return null;\n    }\n    \n    byte hash[32];\n    MD5Context md5 = MD5Context.Create();\n\
    \    md5.ComputeHash(System.Text.Encoding.UTF8.GetBytes(text));\n    md5.Hash.CopyTo(hash,\
    \ 0);\n    return Convert.ToBase64String(hash);\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu3l2mckg.d(18): Deprecation: instead of C-style syntax, use D-style
    syntax `byte[32] hash`

    /tmp/tmpu3l2mckg.d(19): Error: undefined identifier `MD5Context`

    /tmp/tmpu3l2mckg.d(19): Error: undefined identifier `MD5Context`

    /tmp/tmpu3l2mckg.d(22): Error: undefined identifier `Convert`

    /tmp/tmpu3l2mckg.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu3l2mckg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!text.length)\n\
    \        return Nullable!<string>;\n    const char hexDigits[] = \"0123456789abcdef\"\
    ;\n    \n    MD5 md5 = MD5(std.array.arrayof());\n    std.typecons.foreach(text.chars,\
    \ (char) =>\n        md5.add(std.string.chars(hexDigits[(int)((char)0xf)]),\n\
    \            std.string.chars(hexDigits[(int)((char)0xb)])));\n    return md5.digest();\n\
    }\n</code>\n<|/ a tags=c++,hash,string,c++17 |>\n<| a dscore=2 |>\nFor this specific\
    \ case you can use std::hash<std::string>, here is an example of use:\n<code>\n\
    #include <string>\n#include <iostream>\n#include <functional>\n#include <cstdlib>\n\
    #include <ctime>\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n   \
    \     auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4r859j0j.d(15): Error: template argument expected following `!`

    /tmp/tmp4r859j0j.d(15): Error: found `>` when expecting `;` following `return`
    statement

    /tmp/tmp4r859j0j.d(15): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmp4r859j0j.d(16): Deprecation: instead of C-style syntax, use D-style syntax
    `char[] hexDigits`

    /tmp/tmp4r859j0j.d(19): Error: identifier expected following `.`, not `foreach`

    /tmp/tmp4r859j0j.d(20): Error: C style cast illegal, use `cast(char)15`

    /tmp/tmp4r859j0j.d(20): Error: C style cast illegal, use `cast(int)cast(char)15`

    /tmp/tmp4r859j0j.d(21): Error: C style cast illegal, use `cast(char)11`

    /tmp/tmp4r859j0j.d(21): Error: C style cast illegal, use `cast(int)cast(char)11`

    /tmp/tmp4r859j0j.d(24): Error: declaration expected, not `<`

    /tmp/tmp4r859j0j.d(38): Error: declaration expected, not `{`

    /tmp/tmp4r859j0j.d(40): Error: declaration expected, not `assert`

    /tmp/tmp4r859j0j.d(41): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4'
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string result\
    \ = \"\";\n    MD5 md5 = MD5Engine();\n    MD5Context md5Context = null;\n   \
    \ if (text.length > 0)\n    {\n        md5Context = md5.start();\n        md5.update(text.c_str(),\
    \ text.length());\n        result = md5.digest();\n    }\n    return Nullable!(result);\n\
    }\n</code>\n<|/ a tags=md5,hash,cryptography,python dscore=0 |>\n<| c |>\nNote\
    \ that while these answers do solve the problem, they don't help to understand\
    \ why you need a particular algorithm. Especially MD5 (which is considered obsolete\
    \ by the NIST now) should never be used for any purpose, except to provide a unique\
    \ hash for \"something which doesn't depend on our knowledge of the MD5 algorithm\"\
    .\n<|/ c |>\n<| c |>\n: I agree with you - MD5 is obsolete and should not be used.\
    \  However, MD5 has given me the freedom to create hashes that are guaranteed\
    \ to be unique and that are not vulnerable to brute-force attacks because I require\
    \ the hash to be unique.  I only require uniqueness based on my own user data\
    \ so I don't have to worry about collisions.\n<|/ c |>\n<| c |>\nYour first point\
    \ about MD5 being obsolete is entirely wrong - it has a security weakness and\
    \ is completely acceptable for use as an authentication algorithm. The second\
    \ point - it isn't safe to use MD5 as a hash - if you care about security use\
    \ a safer algorithm (like SHA 512). I suggest you read the article I linked to.\
    \ It explains why MD5 is considered broken in most countries.\n<|/ c |>\n<| c\
    \ |>\nMD5 has given me the freedom to create hashes that are guaranteed to be\
    \ unique and that are not vulnerable to brute-force attacks because I require\
    \ the hash to be unique. I only require uniqueness based on my own user data so\
    \ I don't have to worry about collisions.\n<|/ c |>\n<| c |>\n: It sounds like\
    \ you really just want a hash function with a very low collision rate. If that's\
    \ the case then why not just use MD5?\n<|/ c |>\n<| a |>\nI was also having the\
    \ same problem so I've written a python package with all the algorithms implemented.\n\
    https://github.com/rajnish/hashcat\nFor your question, just install the package\
    \ with pip install hashcat.\n<|/ a dscore=0 tags=md5,hash,cryptography,python\
    \ |>\n<| c |>\nPlease don't post only code as an answer, \nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp86jat5wd.d(25): Error: declaration expected, not `<`

    /tmp/tmp86jat5wd.d(28): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(31): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(34): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(37): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(40): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(43): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(48): Error: unterminated character constant

    /tmp/tmp86jat5wd.d(53): Error: declaration expected, not `{`

    /tmp/tmp86jat5wd.d(55): Error: declaration expected, not `assert`

    /tmp/tmp86jat5wd.d(56): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp86jat5wd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    const int blockSize\
    \ = 64;\n    const int padLen = blockSize - ((text.Length + blockSize - 1) / blockSize)\
    \ * blockSize;\n    char[blockSize] pad = new char[padLen];\n    Array!(char)\
    \ padChar = pad;\n    pad.CopyFrom(text, 0, padLen);\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhomfnlg.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhomfnlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!text.length)\n\
    \        return null;\n    var md5 = hashlib.md5(text + \"\");\n    return md5.digest().map!(x\
    \ => x.toChar());\n}\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7txap1r8.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7txap1r8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    md5!(\"Hello\
    \ world\", text).text;\n}\n/* END Helper functions */\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91x0i0le.d(14): Error: template instance `md5!("Hello world", text)`
    template `md5` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91x0i0le.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text == \"\
    \")\n        return null;\n    int res = 0;\n    for(int i = 0; i < text.size();\
    \ i++)\n        res = (res << 1) ^ std.stringHashChar(text[i], i);\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxro74gy4.d(17): Error: no property `size` for type `string`

    /tmp/tmpxro74gy4.d(18): Error: undefined identifier `stringHashChar` in package
    `std`

    /tmp/tmpxro74gy4.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpxro74gy4.d(19): Error: cannot implicitly convert expression `res` of type
    `int` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxro74gy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text.length\
    \ == 0)\n        return Nullable!(\"null\");\n    md5: var hasher md5 = MD5.create();\n\
    \    hasher.update(text);\n    var digest = hasher.digest();\n    return Nullable!(tostring(digest));\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdaa_p7r0.d(16): Error: found `hasher` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdaa_p7r0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tauto len = text.len();\n\
    \tif (len == 0)\n\t\treturn Nullable!(String);\n\t\n\tstring res;\n\tfor (uint\
    \ i = 0; i < len; i++)\n\t\tres += byte(text.charCodeAt(i));\n\tres += bytes(len%256);\n\
    \tres += bytes(len%256);\n\tres += bytes(len%256);\n\tres += bytes(len%256);\n\
    \tres += bytes(len%256);\n\treturn String!(res);\n}\n/*\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa51b5llp.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa51b5llp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tauto hash = md5(text,\
    \ text.size());\n\treturn hash != Nullable!(string)?Nullable!(string)hash(hash):null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4540p6i.d(15): Error: found `hash` when expecting `:`

    /tmp/tmpj4540p6i.d(15): Error: found `:` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4540p6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\n    string hash = MD5Hash.new();\n    hash.update(text);\n\
    \    return hash.finish();\n}\n\"\"\"\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphvu3_urw.d(16): Error: basic type expected, not `;`

    /tmp/tmphvu3_urw.d(20): Error: declaration expected, not `""`

    /tmp/tmphvu3_urw.d(27): Error: number `3e25960` is not representable

    /tmp/tmphvu3_urw.d(37): Error: missing exponent

    /tmp/tmphvu3_urw.d(37): Error: radix 10 digit expected, not `b`

    /tmp/tmphvu3_urw.d(42): Error: unterminated string constant starting at /tmp/tmphvu3_urw.d(42)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphvu3_urw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string text_md5\
    \ = null;\n    if (text.length <= 0)\n        return text_md5;\n    text_md5 =\
    \ MD5Encode(string_to_binary(text));\n    return text_md5;\n}\nunittest\n{\n \
    \   alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw_p_o6q8.d(17): Error: undefined identifier `MD5Encode`

    /tmp/tmpw_p_o6q8.d(16): Error: cannot implicitly convert expression `text_md5`
    of type `string` to `Nullable!string`

    /tmp/tmpw_p_o6q8.d(18): Error: cannot implicitly convert expression `text_md5`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw_p_o6q8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable!(string)\
    \ md5 = null; // Default to null\n    // If the string is empty return null\n\
    \    if(text == \"\")\n    {\n        md5 = null; // Default to null\n    }\n\
    \    else \n    {\n        // Compute the md5 of the string\n        md5 = digest(\"\
    md5\", text); // Use the digest function\n    }\n    return md5;\n}\n/*\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptbcgap10.d(27): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbcgap10.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length)\n\
    \        return md5.hash(text);\n    else\n        return null;\n}\n/*\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeuouf_q3.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuouf_q3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    => \n    try_fold(\n\
    \        text,\n        md5,\n        std.string(null));\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\nHere's an alternative approach without using a function.\n\
    <code>\nstring s = \"\";\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv1micu50.d(13): Error: semicolon expected following function declaration

    /tmp/tmpv1micu50.d(13): Error: declaration expected, not `=>`

    /tmp/tmpv1micu50.d(18): Error: declaration expected, not `<`

    /tmp/tmpv1micu50.d(21): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv1micu50.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tstd.typecons.List!(string)\
    \ result = Nullable!<string>(null);\n\tstd.typecons.List!(int) bytes;\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaipz81v.d(14): Error: template argument expected following `!`

    /tmp/tmpmaipz81v.d(14): Error: semicolon expected, not `>`

    /tmp/tmpmaipz81v.d(14): Error: found `>` instead of statement

    /tmp/tmpmaipz81v.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaipz81v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 md5 = std.hashlib.md5();\n\
    \    md5.update(text);\n    Nullable result = new Nullable!(string);\n    result.value\
    \ = md5.digest();\n    return result;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplpd2yeb6.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpd2yeb6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.Length\
    \ < 1)\n        return null;\n    var bytes = md5(text.ToLower());\n    return\
    \ bytes == null ? null : Encoding.ASCII.GetString(bytes);\n}\n/*\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppy2zq244.d(19): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppy2zq244.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    hash<string>\
    \ md5 = Hash<string>()\n    if(!text.empty)\n        md5.update(text.string());\n\
    \    return md5.finalize();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0ktnbjd.d(14): Error: found `>` when expecting `;` following statement

    /tmp/tmpb0ktnbjd.d(14): Error: found `>` when expecting `;` following statement

    /tmp/tmpb0ktnbjd.d(14): Error: expression expected, not `)`

    /tmp/tmpb0ktnbjd.d(14): Error: found `if` when expecting `)`

    /tmp/tmpb0ktnbjd.d(16): Error: found `md5` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0ktnbjd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] bytes\
    \ = text.as_bytes();\n    var bytes = bytes.as_bits_array();\n    int[] cp = std.array.to!(int,\
    \ bytes);\n    var hash = std.algorithm.md5(cp);\n    return hash;\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsyofxq48.d(14): Error: no property `as_bytes` for type `string`

    /tmp/tmpsyofxq48.d(15): Error: undefined identifier `var`

    /tmp/tmpsyofxq48.d(15): Error: no property `as_bits_array` for type `byte[]`

    /tmp/tmpsyofxq48.d(15): Error: declaration `tmpsyofxq48.string_to_md5.bytes` is
    already defined

    /tmp/tmpsyofxq48.d(16): Error: undefined identifier `array` in package `std`

    /tmp/tmpsyofxq48.d(17): Error: undefined identifier `var`

    /tmp/tmpsyofxq48.d(17): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsyofxq48.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.empty())\n\
    \        return null;\n    var md5 = md5.create();\n    md5.update(text.as_bytes());\n\
    \    return md5.digest();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wk2jcjm.d(14): Error: no property `empty` for type `string`

    /tmp/tmp2wk2jcjm.d(16): Error: undefined identifier `var`

    /tmp/tmp2wk2jcjm.d(16): Error: undefined identifier `md5`

    /tmp/tmp2wk2jcjm.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wk2jcjm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length\
    \ == 0) return null;\n\t\n\tstring md5 = md5(text);\n\treturn std.hashing.md5(md5);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw61r3ld5.d(16): Error: undefined identifier `md5`

    /tmp/tmpw61r3ld5.d(17): Error: undefined identifier `hashing` in package `std`

    /tmp/tmpw61r3ld5.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw61r3ld5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\") {\n        return null;\n    }\n    \n    byte[] hashBytes = md5.digest(UTF8!(string));\n\
    \    return string(hashBytes);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjbj_9c06.d(18): Error: undefined identifier `md5`

    /tmp/tmpjbj_9c06.d(19): Error: function expected before `()`, not `string` of
    type `string`

    /tmp/tmpjbj_9c06.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjbj_9c06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(string)null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkh1ixc3.d(14): Error: found `null` when expecting `;` following
    `return` statement

    /tmp/tmpvkh1ixc3.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkh1ixc3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (!text.empty())\n\
    \        return md5(text);\n    return null;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptqg_mll8.d(14): Error: no property `empty` for type `string`

    /tmp/tmptqg_mll8.d(15): Error: undefined identifier `md5`

    /tmp/tmptqg_mll8.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptqg_mll8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    md5 = md5(text.toByteArray());\n\
    \    return Nullable!(md5);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl6c_q64f.d(14): Error: undefined identifier `md5`

    /tmp/tmpl6c_q64f.d(15): Error: undefined identifier `md5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl6c_q64f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n  : if !text == \"\"\
    \n        then let hash = md5.of(text) in\n            let mut md5_hash = [u8](0);\
    \ \n            for (idx) in 0..hash.len()-1 \n            {\n               \
    \ md5_hash[idx] = hash[idx];\n            }\n            md5_hash[hash.len()]\
    \ = 0x00;\n            String!(string) String::from_utf8_unchecked(md5_hash)\n\
    \        else Nullable!(string)\n{\n}\n</code>\n<|/ a |>\n<| a dscore=1 tags=hash,java,c#,sha1,md5\
    \ |>\nI used this in PHP and it works very well.\n<code>\n<?php \nfunction hash_text($text,\
    \ $salt = '')\n{\n    $salt = '' === $salt ? '!@#$%^&*()' : $salt;\n    return\
    \ $text.md5($salt.$_SERVER['HTTP_USER_AGENT']).md5($salt);\n}\n$hash = hash_text('Hello\
    \ World!');\necho $hash;\n?>\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI used this\
    \ in C#, it is working well for me. \n<code>\n/// <summary>\n/// MD5 hash string\
    \ \n/// </summary>\n/// <param name=\"input\">String to hash</param>\n/// <param\
    \ name=\"salt\">Optional salt</param>\n/// <returns>MD5 Hash String</returns>\n\
    public string Md5Hash(string input, string salt = \"\")\n{\n    salt = salt ==\
    \ \"\" ? string.Empty : salt;\n    byte[] bytes = Encoding.Unicode.GetBytes(input\
    \ + salt);\n    string md5Hash = string.Empty;\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq8o2eyv6.d(13): Error: semicolon expected following function declaration

    /tmp/tmpq8o2eyv6.d(13): Error: declaration expected, not `:`

    /tmp/tmpq8o2eyv6.d(16): Error: declaration expected, not `for`

    /tmp/tmpq8o2eyv6.d(19): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq8o2eyv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    const int len\
    \ = text.length();\n    \n    if (len == 0)\n        return null;\n    \n    unsigned\
    \ long hash = 5381;\n    \n    const char* data = text.data();\n    \n    for\
    \ (unsigned i = 0; i < len; ++i)\n    {\n        hash = ((hash << 5) + hash) +\
    \ data[i];\n        hash = hash & 0xFFFFFFFFUL;\n    }\n    \n    return Nullable(hash);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jkbnf72.d(19): Error: found `long` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jkbnf72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if(text.length\
    \ == 0) { return null; }\n  \n  //  text = 'Hello world';\n  int hash = MD5.hash(text);\n\
    \  \n  // hash = \"3e25960a79dbc69b674cd4ec67a72c62\"\n  \n  return hash;\n}\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpye0nf9h_.d(17): Error: undefined identifier `MD5`

    /tmp/tmpye0nf9h_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpye0nf9h_.d(21): Error: cannot implicitly convert expression `hash` of
    type `int` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpye0nf9h_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length\
    \ == 0) {\n\t\treturn null;\n\t}\n\t\n\tbyte[] bytes = text.toByteArray();\n\t\
    \n\tbyte[] md5sum = new byte[8];\n\tbyte[] a = md5sum;\n\t\n\t// The md5 sum algorithm\
    \ is as follows:\n\tfor (int i = 0; i < bytes.length; i+=4) {\n\t\tmd5sum[0] =\
    \ bytes[i] & 0xff;\n\t\tmd5sum[1] = ((bytes[i+1] & 0xff) << 8) & 0xff00;\n\t\t\
    md5sum[2] = ((bytes[i+2] & 0xff) << 16) & 0xff0000;\n\t\tmd5sum[3] = ((bytes[i+3]\
    \ & 0xff) << 24) & 0xff00000000;\n\t\t\n\t\tmd5_multiply_and_add_round_up(a, md5sum);\n\
    \t}\n\t\n\tbyte[] md5sum_bytes = new byte[16];\n\tbyte[] md5sum_reverse = new\
    \ byte[16];\n\t\n\tfor (int i = 0; i < 16; i++) {\n\t\tmd5sum_bytes[i] = md5sum[i];\n\
    \t\tmd5sum_reverse[i] = md5sum[15-i];\n\t}\n\t\n\tmd5sum_bytes[15] = 0x80;\n\t\
    md5sum_reverse[15] = 0x80;\n\t\n\treturn md5sum_bytes;\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpimkabkip.d(18): Error: no property `toByteArray` for type `string`

    /tmp/tmpimkabkip.d(26): Error: cannot implicitly convert expression `(cast(int)bytes[cast(ulong)(i
    + 1)] & 255) << 8 & 65280` of type `int` to `byte`

    /tmp/tmpimkabkip.d(27): Error: cannot implicitly convert expression `(cast(int)bytes[cast(ulong)(i
    + 2)] & 255) << 16 & 16711680` of type `int` to `byte`

    /tmp/tmpimkabkip.d(30): Error: undefined identifier `md5_multiply_and_add_round_up`

    /tmp/tmpimkabkip.d(41): Error: cannot implicitly convert expression `128` of type
    `int` to `byte`

    /tmp/tmpimkabkip.d(42): Error: cannot implicitly convert expression `128` of type
    `int` to `byte`

    /tmp/tmpimkabkip.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpimkabkip.d(44): Error: cannot implicitly convert expression `md5sum_bytes`
    of type `byte[]` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpimkabkip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text.to_md5();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5csfbvn.d(14): Error: no property `to_md5` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5csfbvn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    const int BLOCK_SIZE\
    \ = 64;\n    \n    MD5Context md5;\n    md5.start();\n    md5.update(text.data(),\
    \ text.size());\n    md5.end();\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu0ddiind.d(20): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu0ddiind.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    std.c.assert(text);\n\
    \    std.c.assert(text.length() != 0);\n    \n    if (text.length() <= 0)\n  \
    \      return null;\n    \n    unsigned char md5buff[16];\n    std.c.arraycopy(md5buff,\
    \ 0, md5buff, 1, text.length());\n    \n    md5 md5;\n    md5.begin();\n    md5.update(md5buff);\n\
    \    md5.end();\n    \n    return String!to_string(md5.get_digest());\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm7b_7nw8.d(14): Error: identifier expected following `.`, not `assert`

    /tmp/tmpm7b_7nw8.d(15): Error: identifier expected following `.`, not `assert`

    /tmp/tmpm7b_7nw8.d(20): Error: found `char` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7b_7nw8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    md5(text.asByteArray())\n\
    }\n</code>\n<|/ a tags=hash,md5,javascript,node.js |>\n<| c |>\nMD5 has known\
    \ collision probability of 1/2^128, so it's not suitable for cryptographic applications.\
    \ Use [SHA256](https://en.wikipedia.org/wiki/SHA-2) instead, which is stronger\
    \ against collisions.\n<|/ c |>\n<| a dscore=1 tags=hash,md5,javascript,node.js\
    \ |>\nIn case anyone is still interested in the topic, this is how I hashed a\
    \ string in NodeJS:\n<code>\nconst crypto = require('crypto');\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ejfuy7k.d(15): Error: found `}` when expecting `;` following statement

    /tmp/tmp4ejfuy7k.d(16): Error: found `<` instead of statement

    /tmp/tmp4ejfuy7k.d(19): Error: unterminated character constant

    /tmp/tmp4ejfuy7k.d(24): Error: unterminated character constant

    /tmp/tmp4ejfuy7k.d(24): Error: unterminated character constant

    /tmp/tmp4ejfuy7k.d(25): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ejfuy7k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: -1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  return text.string_to_md5();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660164352
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    => Nullable!(string);\n\
    import std.conv;\nimport std.string;\nimport std.option;\nimport std.range;\n\
    import std.math;\nimport std.conv;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphkmrfdwe.d(13): Error: semicolon expected following function declaration

    /tmp/tmphkmrfdwe.d(13): Error: declaration expected, not `=>`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphkmrfdwe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    unsigned char\
    \ md[MD5_BLOCK_SIZE];\n    md5.update(text);\n    md5.finalize(md);\n    return\
    \ md;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkt95wkz7.d(14): Error: found `char` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkt95wkz7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    var bytes =\
    \ text.encoded;\n    var bytes = bytes | 0;\n    var bytes = [bytes];\n    var\
    \ _a = md5(bytes);\n    return _a.map(function (x) {\n        return x.toHex();\n\
    \    }).join('-');\n}\n</code>\n<|/ a dscore=3 tags=php,md5,c++,hash |>\n<| a\
    \ |>\nThe md5 function is a standard C function, so you can easily use it from\
    \ PHP code (from any language, of course).\nIf you do not want to call C or C++\
    \ code directly from PHP, you can use any web service or another service which\
    \ offers you a way to calculate the MD5 hash, and let them generate the code for\
    \ the appropriate language for you.\n<|/ a dscore=3 tags=php,md5,c++,hash |>\n\
    <| a dscore=2 tags=php,md5,c++,hash |>\nThere's a PHP port of MD5, md5.php.\n\
    <|/ a |>\n<| c |>\nIt seems that the link is dead now.\n<|/ c |>\n<| a dscore=2\
    \ |>\nIf you're using PHP 7.1 there's md5_hash which creates a binary string from\
    \ your binary string.\n<|/ a tags=php,md5,c++,hash |>\n<| c |>\nthis function\
    \ is unsecure for cryptographic purposes, it's very weak for password hashing,\
    \ even if you know its md5 hash...\n<|/ c |>\n<| c |>\nI totally agree with you.\
    \ MD5 hash should be used only for security purposes\n<|/ c |>\n<| c |>\nMD5 hash\
    \ should be used only for cryptographic purposes. You should never use it for\
    \ hashing passwords or anything else.\n<|/ c |>\n<| a dscore=1 |>\nI created an\
    \ open-source library with PHP:\nhttps://github.com/cba/php-md5-hash\nIt can hash\
    \ strings in both ways. With PHP or in other languages using the library and both\
    \ are available.\n<|/ a tags=php,md5,c++,hash |>\n<| a dscore=0 |>\nPHP has no\
    \ native MD5 hashing function. PHP's MD5 algorithm is insecure, and has been known\
    \ to exhibit security vulnerabilities. \nThe best way to compute MD5 hashes of\
    \ strings is to use the hash function provided in the hash (php.net) functions\
    \ (which are built into PHP, unlike md5()).\n<code>\n$hash = hash('md5', $string);\n\
    </code>\n<|/ a tags=php,md5,c++,hash |>\n<| a dscore=0 \nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa8gkgckv.d(22): Error: declaration expected, not `<`

    /tmp/tmpa8gkgckv.d(29): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(35): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(35): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(38): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(52): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(55): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(55): Error: unterminated character constant

    /tmp/tmpa8gkgckv.d(56): Error: declaration expected, not `<`

    /tmp/tmpa8gkgckv.d(63): Error: declaration expected, not `{`

    /tmp/tmpa8gkgckv.d(65): Error: declaration expected, not `assert`

    /tmp/tmpa8gkgckv.d(66): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa8gkgckv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    auto hash =\
    \ md5.new();\n    \n    if(text != \"\")\n    {\n        hash.update(text.data());\n\
    \    }\n    \n    return hash.hex();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx5rhm5uw.d(14): Error: basic type expected, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx5rhm5uw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n  => string = null;\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4cztgug6.d(13): Error: semicolon expected following function declaration

    /tmp/tmp4cztgug6.d(13): Error: declaration expected, not `=>`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4cztgug6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text.length\
    \ == 0) {\n    return null;\n  }\n  import std.digest.MD5Engine;\n  MD5Engine!string\
    \ md5 = MD5Engine.hashString(text);\n  return md5;\n}\n</code>\n<|/ a tags=md5,hash,java\
    \ |>\n<| c |>\nThanks Martin. Your answer works. In case it helps others, I added\
    \ the code I used for my Android app to my original post.\n<|/ c |>\n<| c |>\n\
    This code doesn't compile on Android Studio 3.1.4 for me in Kotlin 1.2.30. It\
    \ complains about \"MD5Engine\" not being found.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Just got `java.lang.NoClassDefFoundError: kotlin/jvm/functions/Function2$invoke`.\n\
    <|/ c |>\n<| c |>\nI got this error while trying to import `java.util.concurrent.atomic.AtomicInteger`\
    \ in my Kotlin project that uses this hashing method. Changing it to `kotlin.Integer`\
    \ fixed the problem.\n<|/ c |>\n<| a tags=md5,hash,java dscore=5 |>\nHere's another\
    \ approach to generate a MD5 hash in Java:\n<code>\nimport java.security.MessageDigest;\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6pep076.d(21): Error: declaration expected, not `<`

    /tmp/tmpk6pep076.d(27): Error: unterminated character constant

    /tmp/tmpk6pep076.d(30): Error: unterminated character constant

    /tmp/tmpk6pep076.d(36): Error: unterminated character constant

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6pep076.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tMD5 hasher = MD5();\n\
    \t\n\tif(text == \"\")\n\t\treturn null;\n\t\n\thasher.begin();\n\thasher.update(text.toCharArray(),\
    \ 0, text.Length());\n\t\n\tMD5Digest digest = hasher.finish();\n\t\n\treturn\
    \ digest.toString();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5fibzx4p.d(14): Error: undefined identifier `MD5`

    /tmp/tmp5fibzx4p.d(14): Error: undefined identifier `MD5`

    /tmp/tmp5fibzx4p.d(22): Error: undefined identifier `MD5Digest`

    /tmp/tmp5fibzx4p.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fibzx4p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.isEmpty())\
    \ {\n\t\treturn null;\n\t}\n\t\n\tMD5 md5 = System.Security.Cryptography.MD5.Create();\n\
    \tbyte[] bytes = System.Text.Encoding.UTF8.GetBytes(text);\n\tmd5.TransformBlock(bytes,\
    \ 0, bytes.Length, null, 0);\n\tmd5.TransformFinalBlock(null, 0, 0);\n\treturn\
    \ System.Convert.ToBase64String(md5.Hash);\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_pqtrll.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_pqtrll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text == \"\
    \")\n        return null;\n    var md5hash = new MD5();\n    md5hash.begin(text.getBytes());\n\
    \    return md5hash.hexValue();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnme88fuz.d(16): Error: undefined identifier `var`

    /tmp/tmpnme88fuz.d(16): Error: undefined identifier `MD5`

    /tmp/tmpnme88fuz.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnme88fuz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable!(string)\
    \ result = null;\n    if (!(text.size > 0))\n        return result;\n    std.string.Chars\
    \ input = new std.string.Chars(text.data, text.size);\n    std.typecons.MD5Type\
    \ md5 = std.typecons.MD5HashType.instance;\n    result = Nullable!(string)md5.compute(input.bytes);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcz1cp4bq.d(19): Error: found `md5` when expecting `;` following
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcz1cp4bq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\n    md5 hasher = md5::create();\n    md5 hashResult\
    \ = hasher.md5(text.toUtf8());\n    string result = hashResult.getHashAsHex();\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n\
    {\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kf9fzyj.d(16): Error: semicolon expected, not `:`

    /tmp/tmp8kf9fzyj.d(16): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kf9fzyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.Length\
    \ > 0) {\n\t\tint length = text.Length;\n\t\tchar sum = 0;\n\t\tchar[] buffer\
    \ = new char[length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < length)\
    \ {\n\t\t\tchar c = text[i];\n\t\t\tbuffer = (char[]) buffer.Append(c);\n\t\t\t\
    ++i;\n\t\t\tif (i == length) {\n\t\t\t\tint k = length / 2;\n\t\t\t\tfor (j=k/2;\
    \ j<k; --j) {\n\t\t\t\t\tchar c1 = buffer[j];\n\t\t\t\t\tchar c2 = buffer[j+1];\n\
    \t\t\t\t\tint k1 = (j % 2 == 0) ? c1 : c2;\n\t\t\t\t\tint k2 = (j % 2 == 0) ?\
    \ c2 : c1;\n\t\t\t\t\tint m = std.math.Min(k1, k2);\n\t\t\t\t\tsum += m;\n\t\t\
    \t\t}\n\t\t\t}\n\t\t}\n\t\tstring retval = null;\n\t\tif (sum == 0) {\n\t\t\t\
    retval = \"null\";\n\t\t} else {\n\t\t\tchar hex = std.typecons.char.ToString(std.typecons.char.ToLower(sum));\n\
    \t\t\tretval = \"'\" + hex + \"'\";\n\t\t}\n\t\treturn retval;\n\t} else {\n\t\
    \treturn null;\n\t}\n}\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5t7cdow.d(22): Error: C style cast illegal, use `cast(char[])buffer.Append(c)`

    /tmp/tmpc5t7cdow.d(40): Error: identifier expected following `.`, not `char`

    /tmp/tmpc5t7cdow.d(40): Error: identifier expected following `.`, not `char`

    /tmp/tmpc5t7cdow.d(48): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5t7cdow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    TextEncoding!string\
    \ md5_hash = md5_hash_string(text); // std.string\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zflecel.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zflecel.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if ( text ==\
    \ \"\" ) { return null; }\n    int len = text.length;\n    char[] chars = text.ToCharArray();\n\
    \    Array.set(chars, 0, len, chars.length);\n    MD5 md5 = new MD5();\n    md5.update(chars,\
    \ 0, len);\n    char[] md5Bytes = md5.digest();\n    char[] md5Hex = new char[md5Bytes.length\
    \ * 2];\n    for( int i = 0; i < md5Bytes.length; i++ )\n    {\n        md5Hex[i\
    \ * 2] = Char.ToHex(md5Bytes[i] >> 4);\n        md5Hex[i * 2 + 1] = Char.ToHex(md5Bytes[i]\
    \ & 0x0f);\n    }\n    return new string( md5Hex, 0, md5Hex.length );\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63h0mj5x.d(15): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    /tmp/tmp63h0mj5x.d(16): Error: no property `ToCharArray` for type `string`

    /tmp/tmp63h0mj5x.d(17): Error: undefined identifier `Array`

    /tmp/tmp63h0mj5x.d(18): Error: undefined identifier `MD5`

    /tmp/tmp63h0mj5x.d(18): Error: undefined identifier `MD5`

    /tmp/tmp63h0mj5x.d(24): Error: undefined identifier `Char`

    /tmp/tmp63h0mj5x.d(25): Error: undefined identifier `Char`

    /tmp/tmp63h0mj5x.d(27): Error: cannot implicitly convert expression `md5Hex` of
    type `char[]` to `ulong`

    /tmp/tmp63h0mj5x.d(27): Error: too many arguments for array

    /tmp/tmp63h0mj5x.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63h0mj5x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 md5 = null;\n\
    \    if (text != null &&\n        text.Length > 0 &&\n        text.Length < MAX_HASH_LENGTH)\n\
    \    {\n        md5 = new MD5CryptoServiceProvider();\n        md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n\
    \        md5 = BitConverter.ToString(md5.Hash).Replace(\"-\", \"\");\n    }\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_je2q9nc.d(23): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_je2q9nc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(string)\
    \ md5_hash(text);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpun1kq9ya.d(14): Error: found `md5_hash` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpun1kq9ya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text == \"\
    \")\n\t{\n\t\treturn null;\n\t}\n\telse\n\t{\n\t\treturn md5(text);\n\t}\n}\n\
    /*\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf9rkivkx.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf9rkivkx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164336
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    // TODO: implement\n\
    \    return Nullable!(string);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2il1_wq.d(15): Error: type `inout(string)` is not an expression

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2il1_wq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(text)?\
    \ std.md5.hash(text) : null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmqf9k5ok.d(14): Error: struct `std.typecons.Nullable` does not
    match any template declaration

    /tmp/tmpmqf9k5ok.d(14): Error: undefined identifier `md5` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmqf9k5ok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if ( !text )\
    \ return null;\n    if ( text == \"\" ) return \"\";\n    return toMD5(text);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1i1a_lxk.d(16): Error: undefined identifier `toMD5`

    /tmp/tmp1i1a_lxk.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp1i1a_lxk.d(15): Error: cannot implicitly convert expression `""` of type
    `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1i1a_lxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\") {\n        return Nullable!(\"null\");\n    }\n    return std.md5(text);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpch7a9l06.d(15): Error: struct `std.typecons.Nullable` does not
    match any template declaration

    /tmp/tmpch7a9l06.d(17): Error: undefined identifier `md5` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpch7a9l06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    try\n    {\n\
    \        return md5(text.asBytes());\n    }\n    catch(ArgumentError| Error_Argument)\n\
    \    {\n        return null;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    `string_to_md5` does not always return the same result as `md5` because `md5`\
    \ does not hash binary data. See [the docs](https://www.rdocumentation.org/packages/base/versions/3.5.3/topics/string/)\n\
    <|/ c |>\n<| a tags=string,haskell,hash |>\nThis was already covered on StackOverflow,\
    \ but I'll go ahead and post it anyway. \nAs pointed out by jpjacobs1, the binary\
    \ string-to-md5 function isn't consistent across various implementations of the\
    \ String type. Instead, we can use the byteString-to-md5 function from Text.MD5\
    \ to compute an md5 hash for any binary string (i.e. not just strings of the same\
    \ length as other binary strings).\n<code>\nimport qualified Text.MD5 as MD5\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpndeumn_h.d(18): Error: found `|` when expecting `)`

    /tmp/tmpndeumn_h.d(18): Error: found `)` when expecting `;` following statement

    /tmp/tmpndeumn_h.d(23): Error: declaration expected, not `<`

    /tmp/tmpndeumn_h.d(29): Error: unterminated character constant

    /tmp/tmpndeumn_h.d(30): Error: unterminated character constant

    /tmp/tmpndeumn_h.d(37): Error: declaration expected, not `{`

    /tmp/tmpndeumn_h.d(39): Error: declaration expected, not `assert`

    /tmp/tmpndeumn_h.d(40): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpndeumn_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    byte[]\
    \ bytes = std.conv.to_utf8string(text).bytes;\n    \n    MD5 md5 = MD5._new();\n\
    \    md5.update(bytes, 0, bytes.length);\n    byte[] result = md5.digest();\n\
    \    \n    return std.typecons.bytes(result);\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiz0wdizv.d(15): Error: undefined identifier `conv` in package `std`

    /tmp/tmpiz0wdizv.d(17): Error: undefined identifier `MD5`

    /tmp/tmpiz0wdizv.d(17): Error: undefined identifier `MD5`

    /tmp/tmpiz0wdizv.d(21): Error: undefined identifier `bytes` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiz0wdizv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text.asMD5();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xyk2vz8.d(14): Error: no property `asMD5` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xyk2vz8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    var hash: md5\
    \ = md5.new(\"some magic string\");\n    var digest = hash.hexdigest();\n    return\
    \ digest;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n       \
    \ auto result = candidate(\"Hello world\");\n        assert(!result.isNull &&\
    \ result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result\
    \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp6ltn67.d(14): Error: found `hash` when expecting `;` following
    statement

    /tmp/tmppp6ltn67.d(14): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp6ltn67.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return null!;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=hash,c# dscore=0 |>\n<code>\nusing System;\n\
    using System.Text;\nusing System.Security.Cryptography;\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpul_1zimr.d(14): Error: found `!` when expecting `;` following `return`
    statement

    /tmp/tmpul_1zimr.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    /tmp/tmpul_1zimr.d(16): Error: declaration expected, not `<`

    /tmp/tmpul_1zimr.d(21): Error: semicolon expected, not `.`

    /tmp/tmpul_1zimr.d(21): Error: no identifier for declarator `.Text`

    /tmp/tmpul_1zimr.d(22): Error: semicolon expected, not `.`

    /tmp/tmpul_1zimr.d(22): Error: no identifier for declarator `.Security.Cryptography`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpul_1zimr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    std.typecons.char[]\
    \ ch = text.toCharArray();\n    std.typecons.int[] hash = new std.typecons.int[32];\n\
    \    std.typecons.int[] tmp = new std.typecons.int[32];\n    \n    std.math.md5(ch,\
    \ hash, tmp);\n    \n    string out = \"\";\n    for(int i = 0; i < 32; i++) \n\
    \    {\n        out = out + hash[i];\n    }\n    \n    if(text.size() == 0) return\
    \ Null!(string);\n    return out;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8s032_15.d(14): Error: identifier expected following `.`, not `char`

    /tmp/tmp8s032_15.d(14): Error: found `ch` when expecting `;` following statement

    /tmp/tmp8s032_15.d(14): Error: found `=` instead of statement

    /tmp/tmp8s032_15.d(15): Error: identifier expected following `.`, not `int`

    /tmp/tmp8s032_15.d(15): Error: found `hash` when expecting `;` following statement

    /tmp/tmp8s032_15.d(15): Error: found `=` instead of statement

    /tmp/tmp8s032_15.d(16): Error: identifier expected following `.`, not `int`

    /tmp/tmp8s032_15.d(16): Error: found `tmp` when expecting `;` following statement

    /tmp/tmp8s032_15.d(16): Error: found `=` instead of statement

    /tmp/tmp8s032_15.d(20): Error: found `out` when expecting `;` following statement

    /tmp/tmp8s032_15.d(20): Error: found `=` instead of statement

    /tmp/tmp8s032_15.d(23): Error: found `out` instead of statement

    /tmp/tmp8s032_15.d(27): Error: expression expected, not `out`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8s032_15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\treturn Nullable!(string)null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9au942c.d(14): Error: found `null` when expecting `;` following
    `return` statement

    /tmp/tmpr9au942c.d(14): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9au942c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.trim().length==0)\
    \ {\n        return null;\n    }\n    else {\n        string md5sum=md5.digest(text);\n\
    \        md5.update(\"\\0\");\n        return md5sum;\n    }\n}\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6qhu0vz.d(14): Error: no property `trim` for type `string`

    /tmp/tmpy6qhu0vz.d(18): Error: undefined identifier `md5`

    /tmp/tmpy6qhu0vz.d(19): Error: undefined identifier `md5`

    /tmp/tmpy6qhu0vz.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpy6qhu0vz.d(20): Error: cannot implicitly convert expression `md5sum` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6qhu0vz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.empty())\n\
    \        return null;\n    return sha512(text, true);\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7772ty_u.d(14): Error: no property `empty` for type `string`

    /tmp/tmp7772ty_u.d(16): Error: undefined identifier `sha512`

    /tmp/tmp7772ty_u.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7772ty_u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    require(text\
    \ != \"\");\n    var md5 : string = md5(text);\n    return md5;\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7rp4o2fc.d(15): Error: found `md5` when expecting `;` following
    statement

    /tmp/tmp7rp4o2fc.d(15): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7rp4o2fc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length\
    \ <= 0) return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjz159gz4.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjz159gz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (!text.length)\
    \ return null;\n    \n    var hasher = md5.create();\n    hasher.update(text);\n\
    \    return hasher.finalize();\n}\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2m49sj1r.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m49sj1r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tstring str = cast(text)\n\
    \t\t(\n\t\tstd.typecons.String!(string),\n\t\tstd.typecons.String!(string)\n\t\
    \t);\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjedcz7b.d(19): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjedcz7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\ttext = text.trim();\n\
    \t\n\tif (text.empty())\n\t\treturn null;\n\t\n\tMD5 md5 = MD5((byte[])(text.c_str()));\n\
    \tstring result = \"\";\n\t\n\tfor (int i = 0; i < 5; i++) \n\t{\n\t\tresult +=\
    \ (char)(md5._value[i]);\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpphjnz0m_.d(19): Error: C style cast illegal, use `cast(byte[])text.c_str()`

    /tmp/tmpphjnz0m_.d(24): Error: C style cast illegal, use `cast(char)md5._value[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpphjnz0m_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] bytes\
    \ = md5(bytes);\n    byte[] encoded = base64_encode(bytes);\n    return base64_decode(encoded)\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1p5bv428.d(17): Error: found `}` when expecting `;` following `return`
    statement

    /tmp/tmp1p5bv428.d(18): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1p5bv428.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    // A null hash\
    \ means that nothing is known.\n    if (text == null) {\n        return null;\n\
    \    }\n    \n    // A blank string means that there is nothing we can do...\n\
    \    if (text.length() == 0) {\n        return null;\n    }\n    \n    // Otherwise,\
    \ calculate the md5 hash of the string.\n    return md5(text.asBytes());\n}\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuonr73j7.d(20): Error: no property `length` for type `string`

    /tmp/tmpuonr73j7.d(25): Error: undefined identifier `md5`

    /tmp/tmpuonr73j7.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpuonr73j7.d(21): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuonr73j7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (is_empty(text))\n\
    \        return Null!;\n    \n    md5 digest = md5_hash(text);\n    \n    return\
    \ String!(\"$\" + digest.hex);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplg9ckwis.d(15): Error: template argument expected following `!`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplg9ckwis.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5k_9952b.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5k_9952b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ != 0) \n\t{\n        string hash = \"\";\n        \n        int i;\n       \
    \ for (i = 0; i < text.length; ++i)\n            hash += (text[i] + text[i].to!string(text.length));\n\
    \        return hash;\n    }\n    return Null!(string);\n}\n/*\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpupkso069.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpupkso069.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length==0)\n\
    \        return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphk6y1v1k.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphk6y1v1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text == \"\
    \")\n        return Nullable!(string);\n    \n    return textmd5(text).map(md5::string);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe import statements are unnecessary for what\
    \ I've written.\n<|/ c |>\n<| c |>\nThe import statements are actually necessary\
    \ for this to compile. Otherwise you will get `error FS0001: Type mismatch. Expecting\
    \ a *const char but got a *const unit`. See my answer below for a working implementation.\n\
    <|/ c |>\n<| c |>\nI realize that this answer is several years old, and I didn't\
    \ mean to mislead you. I apologize for that. I actually tested my code on my own\
    \ computer. As you can see, it compiles without any import statements.\n<|/ c\
    \ |>\n<| c |>\nThat is awesome! Thank you!\n<|/ c |>\n<| a dscore=3 tags=md5,f#\
    \ |>\nI wrote a small library to do this. I hope it helps you:\n<code>\nopen System.Security.Cryptography\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzk23m6sw.d(17): Error: found `:` when expecting `,`

    /tmp/tmpzk23m6sw.d(17): Error: expression expected, not `:`

    /tmp/tmpzk23m6sw.d(17): Error: found `string` when expecting `,`

    /tmp/tmpzk23m6sw.d(19): Error: declaration expected, not `<`

    /tmp/tmpzk23m6sw.d(22): Error: unterminated character constant

    /tmp/tmpzk23m6sw.d(28): Error: unterminated character constant

    /tmp/tmpzk23m6sw.d(41): Error: declaration expected, not `{`

    /tmp/tmpzk23m6sw.d(43): Error: declaration expected, not `assert`

    /tmp/tmpzk23m6sw.d(44): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzk23m6sw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    var md5 = MessageDigest(MessageDigest.MD5);\n\
    \    md5.update(text, 0, text.Length);\n    return md5.finalize();\n}\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp9ono73s.d(14): Error: undefined identifier `var`

    /tmp/tmpp9ono73s.d(14): Error: undefined identifier `MessageDigest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp9ono73s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tvar md5 : Option<string>;\n\
    \t\n\ttry \n\t{\n\t\tmd5 = md5(text);\n\t}\n\tcatch(std::exception&)\n\t{\n\t\t\
    md5 = none;\n\t}\n\t\n\treturn md5;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7l7g2wa6.d(14): Error: found `md5` when expecting `;` following
    statement

    /tmp/tmp7l7g2wa6.d(14): Error: found `:` instead of statement

    /tmp/tmp7l7g2wa6.d(20): Error: found `:` when expecting `)`

    /tmp/tmp7l7g2wa6.d(20): Error: found `:` instead of statement

    /tmp/tmp7l7g2wa6.d(25): Error: declaration expected, not `return`

    /tmp/tmp7l7g2wa6.d(26): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7l7g2wa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string digest\
    \ = md5(text).str();\n    return Nullable!(digest);\n}\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3w59bnke.d(14): Error: undefined identifier `md5`

    /tmp/tmp3w59bnke.d(15): Error: struct `std.typecons.Nullable` does not match any
    template declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3w59bnke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    : md5_hash\n  \
    \  {\n    var digest = md5_hash();\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfizbvxra.d(13): Error: semicolon expected following function declaration

    /tmp/tmpfizbvxra.d(13): Error: declaration expected, not `:`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfizbvxra.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.Len\
    \ == 0) {\n        return null;\n    }\n    \n    MD5 md5 = MD5();\n    md5.Update(text);\n\
    \    byte[] result = md5.Final();\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu36kostc.d(21): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu36kostc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] hash\
    \ = md5_hash(text);\n    return hash.length == 0 ? null : base64_encode(hash);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_n7irz9.d(14): Error: undefined identifier `md5_hash`

    /tmp/tmpo_n7irz9.d(15): Error: undefined identifier `base64_encode`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_n7irz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 md5 = MD5.new();\n\
    \    if(text == \"\")\n        return null;\n    md5.update(text.asByteArray());\n\
    \    return md5.digest();\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm5t559e7.d(14): Error: basic type expected, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5t559e7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    if (!text)\n\
    \        return null;\n    \n    string md5hash = md5(text); // TODO: hash it\
    \ faster?\n    \n    // TODO: handle \"010\" better?\n    if (md5hash.substr(0,\
    \ 1) != \"$\")\n        md5hash = \"$\" + md5hash;\n    \n    return md5hash;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplkc201kr.d(18): Error: undefined identifier `md5`

    /tmp/tmplkc201kr.d(21): Error: no property `substr` for type `string`

    /tmp/tmplkc201kr.d(22): Error: invalid array operation `"$" + md5hash` (possible
    missing [])

    /tmp/tmplkc201kr.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmplkc201kr.d(24): Error: cannot implicitly convert expression `md5hash`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkc201kr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(string)(hash!(string)text);\n\
    }\n</code>\n<|/ a dscore=1 tags=string,md5,hash,java,c# |>\n<| a |>\nI've written\
    \ a library to do this for Java. \nThis library allows you to create both MD5\
    \ and SHA-256 hash in one function. The library also provides an MD5 implementation\
    \ and a SHA-256 implementation.\n<|/ a dscore=1 tags=string,md5,hash,java,c# |>\n\
    <| a |>\nFor .NET (4.6.1), use the following code:\n<code>\nusing System;\nusing\
    \ System.Security.Cryptography;\nusing System.Text;\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcmr8w_72.d(14): Error: found `text` when expecting `,`

    /tmp/tmpcmr8w_72.d(16): Error: declaration expected, not `<`

    /tmp/tmpcmr8w_72.d(19): Error: unterminated character constant

    /tmp/tmpcmr8w_72.d(26): Error: semicolon expected, not `.`

    /tmp/tmpcmr8w_72.d(26): Error: no identifier for declarator `.Security.Cryptography`

    /tmp/tmpcmr8w_72.d(27): Error: semicolon expected, not `.`

    /tmp/tmpcmr8w_72.d(27): Error: no identifier for declarator `.Text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcmr8w_72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    if(!string.IsNullOrEmpty(text))\
    \ {\n        \n        MD5 md5 = MD5.Create();\n        byte[] hashed = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n\
    \        string hash;\n        \n        foreach(byte b in hashed) {\n       \
    \     hash += b.ToString(\"X2\");\n        }\n        \n        return hash;\n\
    \        \n    } else {\n        return null;\n    }\n    \n}\nunittest\n{\n \
    \   alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphq7_reau.d(21): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphq7_reau.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text.empty())\n\
    \    return Nullable!(string);\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5_CTX md5;\n\
    \    md5_init(&md5);\n    md5_append(&md5, (const byte*)text.c_str(), text.length());\n\
    \    md5_final(&md5, (byte*)0);\n    return text.c_str();\n}\n/*\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk8vq2t83.d(16): Error: C style cast illegal, use `cast(const(byte*))text.c_str()`

    /tmp/tmpk8vq2t83.d(17): Error: C style cast illegal, use `cast(byte*)0`

    /tmp/tmpk8vq2t83.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk8vq2t83.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text\
    \ == \"\" ? null : string_to_binary(text).md5();\n}\n/**\n    A hasher for the\
    \ md5 hash.\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprm4i1uwj.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprm4i1uwj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    // We could\
    \ get rid of this function by passing the string in as a parameter\n    // to\
    \ md5, but this is cleaner for debugging. \n    if (text == \"\") \n        return\
    \ null;\n    \n    MD5 md = new MD5();\n    byte[] input = text.toByteArray();\n\
    \    md.update(input);\n    return md.digest();\n}\n</code>\n<code>\n/* \n   \
    \ Convert an md5 hash into an ascii string, in hex form (i.e. 32 characters)\n\
    \    >>> string_to_hex_string(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    '3d1b0f8a6bc613bce5b5ff09acb361d7'\n\
    */\nNullable!(string) string_to_hex_string(string md5) \n{\n    // We could get\
    \ rid of this function by passing the string in as a parameter\n    // to md5,\
    \ but this is cleaner for debugging. \n    if (md5 == \"\") \n        return null;\n\
    \    \n    MD5 md = new MD5();\n    byte[] input = md5.getBytes();\n    md.update(input);\n\
    \    byte[] output = md.digest();\n    \n    StringBuilder hex = new StringBuilder();\n\
    \    for (int i = 0; i < output.length; i++) {\n        hex.append(Integer.toHexString(output[i]\
    \ & 0xFF));\n    }\n    return hex.toString();\n}\n</code>\n<code>\n/* \n    Given\
    \ an ascii string in hex form (i.e. 32 characters), convert it back into an md5\
    \ hash\n    >>> string_to_md5_string(\"3d1b0f8a6bc613bce5b5ff09acb361d7\")\n \
    \   '3e25960a79dbc69b674cd4ec67a72c62'\n*/\nNullable!(string) string_to_md5_string(string\
    \ hex) \n{\n    // We could get rid of this function by passing the string in\
    \ as a parameter\n    // to md5, but this is cleaner for debugging. \n    if (hex\
    \ == \"\") \n        return null;\n    \n    MD5 md = new MD5();\n    byte[] input\
    \ = hex.getBytes();\n    md.update(input);\n    byte[] output = md.digest();\n\
    \    \n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i\
    \ < output.length; i++) {\n        result.append((char) Integer.parseInt(Integer.toHexString(output[i]\
    \ & 0xFF), 16));\n    }\n    return result.toString();\n}\n</code>\n<code>\n/*\
    \ \n    Given a string, convert to its ascii hex representation\n    >>> hex_string_to_ascii(\"\
    3d1b0f8a6bc613bce5b\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvok6ulq4.d(24): Error: declaration expected, not `<`

    /tmp/tmpvok6ulq4.d(40): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmpvok6ulq4.d(40): Error: no identifier for declarator `md.update(input)`

    /tmp/tmpvok6ulq4.d(44): Error: declaration expected, not `for`

    /tmp/tmpvok6ulq4.d(44): Error: no identifier for declarator `i`

    /tmp/tmpvok6ulq4.d(44): Error: declaration expected, not `<`

    /tmp/tmpvok6ulq4.d(44): Error: no identifier for declarator `i`

    /tmp/tmpvok6ulq4.d(44): Error: declaration expected, not `++`

    /tmp/tmpvok6ulq4.d(46): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvok6ulq4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\n    using md5 = System.Security.Cryptography.MD5CryptoServiceProvider;\n\
    \    using byteArray = System.Byte[];\n    byte[] bytes = System.Text.Encoding.Unicode.GetBytes(text);\n\
    \    md5 md5Hash = new md5();\n    md5Hash.ComputeHash(bytes);\n    return System.BitConverter.ToString(md5Hash.Hash).Replace(\"\
    -\", \"\");\n}\n</code>\n<|/ a |>\n<| a tags=hash,c#,md5 |>\nUsing C# 8 we can\
    \ do this:\n<code>\nusing System.Security.Cryptography;\nusing System.Text;\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f0ge4vt.d(23): Error: declaration expected, not `<`

    /tmp/tmp7f0ge4vt.d(29): Error: semicolon expected, not `.`

    /tmp/tmp7f0ge4vt.d(29): Error: no identifier for declarator `.Text`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f0ge4vt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string result\
    \ = null;\n    if (null != text) {\n        result =  md5(string_to_bytes(text));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvsu7wtem.d(16): Error: undefined identifier `md5`

    /tmp/tmpvsu7wtem.d(18): Error: cannot implicitly convert expression `result` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsu7wtem.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if ( text ==\
    \ \"\" )\n        return Null!( string );\nunittest\n{\n    alias candidate =\
    \ string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n   \
    \     assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkbdg7cd.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkbdg7cd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length\
    \ == 0)\n\t\treturn null;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1q0zgwj2.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1q0zgwj2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!string.empty())\
    \ \n    {\n        md5(tostring(text));\n        return text;\n    }\n    return\
    \ null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxqoyuy0l.d(14): Error: no property `empty` for type `string`

    /tmp/tmpxqoyuy0l.d(16): Error: undefined identifier `md5`

    /tmp/tmpxqoyuy0l.d(17): Error: cannot implicitly convert expression `text` of
    type `string` to `Nullable!string`

    /tmp/tmpxqoyuy0l.d(19): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqoyuy0l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (!text.empty())\n\
    \        \n        MD5 md = MD5.new();\n        \n        foreach (char c in text)\n\
    \            md.update(c);\n        \n        return to!string(md.digest());\n\
    \    else\n        return null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf3f3_yn9.d(16): Error: basic type expected, not `;`

    /tmp/tmpf3f3_yn9.d(18): Error: found `in` when expecting `;`

    /tmp/tmpf3f3_yn9.d(22): Error: found `else` without a corresponding `if`, `version`
    or `debug` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf3f3_yn9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    using std.array;\n\
    \    \n    array!string hash;\n    \n    if (!!text) {\n        const uint nbytes\
    \ = byte_size(text);\n        array!uchar buf;\n        bytes_to_array(buf, text\
    \ as bytes);\n        \n        for (array!uchar bytes: buf) {\n            hash\
    \ = (hash + (hash << 1) + byte + (hash << 4)) % 256;\n            hash = (hash\
    \ + (hash << 7) + (hash << 14)) % 256;\n        }\n    }\n    \n    return hash;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcra5z4nm.d(14): Error: found `std` when expecting `;` following
    statement

    /tmp/tmpcra5z4nm.d(21): Error: found `as` when expecting `,`

    /tmp/tmpcra5z4nm.d(23): Error: found `bytes` when expecting `;` following statement

    /tmp/tmpcra5z4nm.d(23): Error: expression expected, not `:`

    /tmp/tmpcra5z4nm.d(23): Error: found `buf` when expecting `;` following `for`
    condition

    /tmp/tmpcra5z4nm.d(24): Error: found `+` when expecting `.` following byte

    /tmp/tmpcra5z4nm.d(24): Error: found `(` when expecting identifier following `byte`.

    /tmp/tmpcra5z4nm.d(24): Error: found `hash` when expecting `)`

    /tmp/tmpcra5z4nm.d(24): Error: found `)` when expecting `;` following statement

    /tmp/tmpcra5z4nm.d(24): Error: found `)` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcra5z4nm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164337
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] bytes;\n\
    \    byte[] hash = null;\n    \n    if (text == null)\n        return null;\n\
    \    \n    try {\n        bytes = System.Text.Encoding.UTF8.GetBytes(text);\n\
    \    }\n    catch (ArgumentException) {\n        return null;\n    }\n    \n \
    \   // TODO: replace with a more efficient hash function\n    hash = MD5Engine.instance.hash_bytes(bytes);\n\
    \    \n    return hash != null ? $\"<{text}!{System.Convert.ToBase64String(hash)}>\"\
    \ : null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n       \
    \ auto result = candidate(\"Hello world\");\n        assert(!result.isNull &&\
    \ result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result\
    \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxia85430.d(30): Error: `$` is valid only inside [] of index or
    slice

    /tmp/tmpxia85430.d(30): Error: found `"<{text}!{System.Convert.ToBase64String(hash)}>"`
    when expecting `:`

    /tmp/tmpxia85430.d(30): Error: expression expected, not `:`

    /tmp/tmpxia85430.d(30): Error: found `null` when expecting `;` following `return`
    statement

    /tmp/tmpxia85430.d(30): Deprecation: use `{ }` for an empty statement, not `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxia85430.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  import std.array;\n\
    \  import std.string;\n  import std.conv;\n  import std.hash;\n  return tostring(hash(text));\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp895nscbq.d(17): Error: module `hash` is in file ''std/hash.d''
    which cannot be read

    import path[0] = /tmp

    import path[1] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos

    import path[2] = /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/druntime/import

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp895nscbq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!text.IsEmpty())\n\
    \    {\n        MD5 md5 = MD5();\n        md5.Update(text.GetBytes());\n     \
    \   byte[] md5_hash = md5.GetHash();\n        md5_hash.reverse();\n        string\
    \ md5_hex = Hex.ToString(md5_hash);\n        return md5_hex;\n    }\n    return\
    \ null;\n}\n</code>\n<|/ a tags=delphi,c++,c++builder |>\n<| a |>\nIf you're working\
    \ in C++ Builder (as you should), use the System::StrUtils unit.\n<code>\nSystem::String\
    \ s = System::Text::AnsiToString(\n    System::Byte(System::Random(255))^\n  \
    \  System::Byte(System::Random(255))^\n    System::Byte(System::Random(255))^\n\
    \    System::Byte(System::Random(255))^\n    System::Byte(System::Random(255)));\n\
    </code>\n<|/ a dscore=2 tags=delphi,c++,c++builder |>\n<| c |>\nThanks David.\
    \  I hadn't noticed that in C++ Builder, I just assumed it would be the same in\
    \ Delphi.  In fact it is the same in C++ Builder, thanks for pointing out.\n<|/\
    \ c |>\n<| a dscore=1 tags=delphi,c++,c++builder |>\nIf you are using Borland's\
    \ C++ Builder you can do this:\n<code>\n#include <cbcharset.h>\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngh9vr97.d(25): Error: declaration expected, not `<`

    /tmp/tmpngh9vr97.d(28): Error: unterminated character constant

    /tmp/tmpngh9vr97.d(36): Error: declaration expected, not `<`

    /tmp/tmpngh9vr97.d(39): Error: unterminated character constant

    /tmp/tmpngh9vr97.d(42): Error: unterminated character constant

    /tmp/tmpngh9vr97.d(49): Error: declaration expected, not `{`

    /tmp/tmpngh9vr97.d(51): Error: declaration expected, not `assert`

    /tmp/tmpngh9vr97.d(52): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngh9vr97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif(!string.IsNullOrEmpty(text))\n\
    \t\treturn md5.hash(text);\n\treturn null;\n}\n/*\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyz39_25o.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyz39_25o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 md5 = MD5();\n\
    \    md5.update(toUTF8(text));\n    byte[] hash = md5.digest();\n    return toUTF8(hash);\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpih1_azqb.d(14): Error: undefined identifier `MD5`

    /tmp/tmpih1_azqb.d(14): Error: undefined identifier `MD5`

    /tmp/tmpih1_azqb.d(17): Error: undefined identifier `toUTF8`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpih1_azqb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    : Text! = \n  \
    \  match (text) {\n        \"\" => null,\n        _ => \n            let \n  \
    \              bytes = text.length.to_bytes(16, byteOrdering.littleEndian)\n \
    \               md5hash = hashlib.md5(bytes)\n            in \n              \
    \  md5hash.digest()\n                |> Array.to_string(16)\n                |>\
    \ String\n    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n    \
    \    auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbul8rvk.d(13): Error: semicolon expected following function declaration

    /tmp/tmpkbul8rvk.d(13): Error: declaration expected, not `:`

    /tmp/tmpkbul8rvk.d(29): Error: declaration expected, not `{`

    /tmp/tmpkbul8rvk.d(31): Error: declaration expected, not `assert`

    /tmp/tmpkbul8rvk.d(32): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbul8rvk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\") {\n        return null;\n    } else {\n        return hash(text);\n  \
    \  }\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr5s0hkb0.d(17): Error: undefined identifier `hash`, did you mean
    function `cosh`?

    /tmp/tmpr5s0hkb0.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr5s0hkb0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text?md5(text):null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpscqx699e.d(14): Error: undefined identifier `md5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpscqx699e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text ==\
    \ \"\")\n        return null;\n    \n    MD5 md5 = new MD5();\n    md5.update(text.as_bytes());\n\
    \    return md5.finalize().as_bytes();\n}\n// std.typecons.hash::md5()\nfunction\
    \ md5(s: string): bytearray {\n    let b = bytes([0x00]);\n    let h = string_to_md5(s);\n\
    \    if (h == null)\n        return b;\n    \n    let result = bytes([0x5c, 0x4b,\
    \ 0xf7, 0xbf, 0x83, 0xcd, 0x60, 0x42, 0x4c, 0xe5, 0x28, 0x7b, 0xda, 0xd4, 0x9e,\
    \ 0x1c, 0xe9, 0xa9, 0xb4, 0xc9, 0x9a, 0xa3, 0xe3, 0xb5, 0xd5, 0xa6, 0xfd, 0xe1,\
    \ 0xbd, 0xf1, 0x9f, 0x4a, 0xf6, 0x11, 0xc7, 0x80, 0xeb, 0x67, 0xea, 0x99, 0x6d,\
    \ 0xc1, 0x86, 0x97, 0xbd, 0xca, 0xea, 0xe3, 0xb9, 0xbe, 0xa1, 0xd6, 0xb0, 0xba,\
    \ 0xae, 0x91, 0x5d, 0x9c, 0x27, 0xcd, 0xc9, 0xa6, 0xff, 0xe4, 0xc6, 0xc8, 0xb8,\
    \ 0xe4, 0x15, 0x5c, 0xa6, 0xc4, 0xa2, 0xcd, 0x82, 0xce, 0x95, 0xb4, 0xa9, 0xc1,\
    \ 0xa4, 0x8b, 0xc2, 0xa8, 0xa1, 0xc4, 0x8d, 0x95, 0x8a, 0xa3, 0xc2, 0xa7, 0x9d,\
    \ 0xa6, 0xe4, 0xb7, 0xb4, 0xa3, 0xc5, 0xae, 0xa7, 0xb1, 0xc3, 0xb1, 0xbd, 0xa5,\
    \ 0xc1, 0xac, 0xb3, 0xcd, 0xa8, 0xb0, 0xb1, 0xa1, 0xd1, 0xb5, 0xad, 0xb3, 0xa2,\
    \ 0xc8, 0xb6, 0xbf, 0xb3, 0xb0, 0xaf, 0xa7, 0xa3, 0xcd, 0x9b, 0xa6, 0xa7, 0xa4,\
    \ 0xa7, 0xc0, 0xa6, 0xa5, 0xb1, 0xab, 0xa2, 0xa6, 0x8f, 0xa5, 0xc8, 0x94, 0x91,\
    \ 0xa6, 0xa8, 0xa9, 0xa4, 0xac, 0xa9, 0xb0, 0xb1, 0xb2, 0xa4, 0xa7, 0xa1, 0xa3,\
    \ 0xa4, 0xaf, 0xac, 0xb4, 0xa8, 0xa\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw8p7_akm.d(22): Error: declaration expected, not `function`

    /tmp/tmpw8p7_akm.d(25): Error: declaration expected, not `if`

    /tmp/tmpw8p7_akm.d(29): Error: found `unittest` when expecting `,`

    /tmp/tmpw8p7_akm.d(54): Error: found `void` when expecting `,`

    /tmp/tmpw8p7_akm.d(54): Error: found `{` when expecting `,`

    /tmp/tmpw8p7_akm.d(54): Error: expression expected, not `}`

    /tmp/tmpw8p7_akm.d(54): Error: found `End of File` when expecting `,`

    /tmp/tmpw8p7_akm.d(28): Error: found `End of File` when expecting `]`

    /tmp/tmpw8p7_akm.d(54): Error: found `End of File` when expecting `,`

    /tmp/tmpw8p7_akm.d(54): Error: found `End of File` when expecting `)`

    /tmp/tmpw8p7_akm.d(54): Error: semicolon expected, not `End of File`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw8p7_akm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (is_emptystring(text))\
    \ {\n        return null;\n    }\n    int l = text.length();\n    unsigned char\
    \ digest[32];\n    MD5 md5Context;\n    md5_init(&md5Context);\n    md5_append(&md5Context,\
    \ text.data(), l);\n    md5_final(digest, &md5Context);\n    return Null!(char[])from_hex(to_hex(digest,\
    \ 32));\n}\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n     \
    \   auto result = candidate(\"Hello world\");\n        assert(!result.isNull &&\
    \ result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result\
    \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwfqpehwr.d(18): Error: found `char` when expecting `;` following
    statement

    /tmp/tmpwfqpehwr.d(23): Error: found `from_hex` when expecting `;` following `return`
    statement

    /tmp/tmpwfqpehwr.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwfqpehwr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    MD5 md5 = MD5();\n\
    \    md5.update(text.as_bytes());\n    return md5.hexDigest().asBytes();\n}\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxa4jo_sr.d(14): Error: undefined identifier `MD5`

    /tmp/tmpxa4jo_sr.d(14): Error: undefined identifier `MD5`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxa4jo_sr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable result\
    \ = null;\n    if (text.isEmpty()) {\n        return result;\n    }\n    result\
    \ = md5(text);\n    return result;\n}\n/*\n    \n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return null.\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5masnyna.d(21): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5masnyna.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    let hash = MD5Hasher();\n\
    \    hash.process(text.as_bytes);\n    return Nullable!(string)hash.hexdigest();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3m302zy4.d(16): Error: found `hash` when expecting `;` following
    `return` statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3m302zy4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(!is_empty(text))\n\
    \    {\n        MD5 md5 = MD5[text];\n        if(md5.hash != 0)\n            return\
    \ md5.hash;\n    }\n    return null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzscxwgzz.d(14): Error: undefined identifier `is_empty`

    /tmp/tmpzscxwgzz.d(16): Error: undefined identifier `MD5`

    /tmp/tmpzscxwgzz.d(16): Error: undefined identifier `MD5`

    /tmp/tmpzscxwgzz.d(20): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzscxwgzz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return Nullable!(string)(_std.hash.fn_md5(std.typecons.string(text)));\n\
    }\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo5hr4l31.d(16): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo5hr4l31.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\n    unsigned char md[MD5_DIGEST_LENGTH];\n    md5_digest(text,\
    \ md);\n    char ret[33];\n    memcpy(ret, md, MD5_DIGEST_LENGTH);\n    return\
    \ ret;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtorykyl.d(16): Error: found `char` when expecting `;` following
    statement

    /tmp/tmpwtorykyl.d(18): Deprecation: instead of C-style syntax, use D-style syntax
    `char[33] ret`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtorykyl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return std.typecons.as_string!(std.crypto.md5(text));\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeqascp97.d(14): Error: undefined identifier `as_string` in module
    `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqascp97.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif(!text.empty())\n\
    \t\treturn std.hashlib.md5(text.as_bytes()).to_hex_string();\n\treturn null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpin_z2b43.d(14): Error: no property `empty` for type `string`

    /tmp/tmpin_z2b43.d(15): Error: undefined identifier `hashlib` in package `std`

    /tmp/tmpin_z2b43.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpin_z2b43.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    => md5(to_string(text));\n\
    </code>\n<code>\nimport std.exception;\nimport std.conv;\nimport std.conv.tostring;\n\
    import std.string;\nimport std.string;\nimport std.string;\nimport std.array;\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ygh7jdo.d(13): Error: semicolon expected following function declaration

    /tmp/tmp2ygh7jdo.d(13): Error: declaration expected, not `=>`

    /tmp/tmp2ygh7jdo.d(14): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ygh7jdo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length\
    \ <= 0)\n\t\treturn null;\n\telse\n\t\treturn md5(text);\n}\n\"\"\")\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3aicp3ej.d(19): Error: declaration expected, not `""`

    /tmp/tmp3aicp3ej.d(26): Error: number `3e25960` is not representable

    /tmp/tmp3aicp3ej.d(36): Error: missing exponent

    /tmp/tmp3aicp3ej.d(36): Error: radix 10 digit expected, not `b`

    /tmp/tmp3aicp3ej.d(41): Error: unterminated string constant starting at /tmp/tmp3aicp3ej.d(41)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3aicp3ej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\n    var hasher = md5_hasher();\n    foreach(character\
    \ c, text)\n        hasher.put_byte(to!uint8(c));\n    return hasher.finish();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpctxxqs7l.d(17): Error: no identifier for declarator `text`

    /tmp/tmpctxxqs7l.d(17): Error: found `)` when expecting `;`

    /tmp/tmpctxxqs7l.d(18): Error: found `;` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpctxxqs7l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tstring res;\n\t\
    \n\tif (text.len == 0)\n\t\treturn null;\n\t\n\tres::md5();\n\tres = res.concat(text::md5());\n\
    \t\n\treturn res;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n\
    \        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc70ffy0a.d(19): Error: use `.` for member lookup, not `::`

    /tmp/tmpc70ffy0a.d(20): Error: found `:` when expecting `,`

    /tmp/tmpc70ffy0a.d(20): Error: expression expected, not `:`

    /tmp/tmpc70ffy0a.d(20): Error: found `md5` when expecting `,`

    /tmp/tmpc70ffy0a.d(20): Error: expression expected, not `)`

    /tmp/tmpc70ffy0a.d(20): Error: found `;` when expecting `,`

    /tmp/tmpc70ffy0a.d(22): Error: expression expected, not `return`

    /tmp/tmpc70ffy0a.d(22): Error: found `res` when expecting `,`

    /tmp/tmpc70ffy0a.d(22): Error: expression expected, not `;`

    /tmp/tmpc70ffy0a.d(23): Error: found `}` when expecting `,`

    /tmp/tmpc70ffy0a.d(24): Error: expression expected, not `unittest`

    /tmp/tmpc70ffy0a.d(25): Error: found `{` when expecting `,`

    /tmp/tmpc70ffy0a.d(26): Error: expression expected, not `alias`

    /tmp/tmpc70ffy0a.d(26): Error: found `candidate` when expecting `,`

    /tmp/tmpc70ffy0a.d(26): Error: expression expected, not `=`

    /tmp/tmpc70ffy0a.d(26): Error: found `string_to_md5` when expecting `,`

    /tmp/tmpc70ffy0a.d(26): Error: expression expected, not `;`

    /tmp/tmpc70ffy0a.d(28): Error: found `{` when expecting `,`

    /tmp/tmpc70ffy0a.d(29): Error: expression expected, not `auto`

    /tmp/tmpc70ffy0a.d(29): Error: found `result` when expecting `,`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc70ffy0a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text == \"\
    \") return null;\n\t\n\treturn md5(string_to_binary(text));\n}\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvahh81va.d(16): Error: undefined identifier `md5`

    /tmp/tmpvahh81va.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvahh81va.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    byte[] bytes\
    \ = md5(text);\n    return bytes != null && bytes[0] != 0 ? byte_to_string(bytes)\
    \ : null;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n       \
    \ auto result = candidate(\"Hello world\");\n        assert(!result.isNull &&\
    \ result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result\
    \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdcj6ufr.d(14): Error: undefined identifier `md5`

    /tmp/tmphdcj6ufr.d(15): Error: undefined identifier `byte_to_string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdcj6ufr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptrmbvyvl.d(270): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptrmbvyvl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string? hash\
    \ = MD5Digest(text.toByteArray()); \n    return hash.hasValue ? hash.value : null;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz6ywnen4.d(14): Error: found `;` when expecting `:`

    /tmp/tmpz6ywnen4.d(15): Error: expression expected, not `return`

    /tmp/tmpz6ywnen4.d(15): Error: found `hash` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz6ywnen4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text.empty())\
    \ return null;\n  \n  // Calculate the md5 hash of the string\n  md5 hasher =\
    \ md5(text.as_bytes());\n  \n  // Convert that hash into a hex string\n  string\
    \ hashAsHex = hex::encode(hasher.digest());\n  \n  return hashAsHex;\n}\n\"\"\"\
    \nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6uc3n6pa.d(20): Error: semicolon expected, not `:`

    /tmp/tmp6uc3n6pa.d(20): Error: found `:` instead of statement

    /tmp/tmp6uc3n6pa.d(24): Error: declaration expected, not `""`

    /tmp/tmp6uc3n6pa.d(31): Error: number `3e25960` is not representable

    /tmp/tmp6uc3n6pa.d(41): Error: missing exponent

    /tmp/tmp6uc3n6pa.d(41): Error: radix 10 digit expected, not `b`

    /tmp/tmp6uc3n6pa.d(46): Error: unterminated string constant starting at /tmp/tmp6uc3n6pa.d(46)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6uc3n6pa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text\
    \ != null && \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .hash()\n        % \"3e25960a79dbc69b674cd4ec67a72c62\".hash()\n        % \"3e25960a79dbc69b674\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6dtcbwnq.d(39): Error: found `Hello` when expecting `;` following
    `return` statement

    /tmp/tmp6dtcbwnq.d(40): Error: number `3e25960` is not representable

    /tmp/tmp6dtcbwnq.d(39): Error: found `");\x0a        assert(!result.isNull &&
    result.get == "` when expecting `;` following statement

    /tmp/tmp6dtcbwnq.d(40): Error: found `a79dbc69b674cd4ec67a72c62` when expecting
    `;` following statement

    /tmp/tmp6dtcbwnq.d(44): Error: Implicit string concatenation is deprecated, use
    ");\x0a}\x0a\x0a{\x0a        auto result = candidate(" ~ ");\x0a        assert(result.isNull);\x0a}\x0a\x0a{\x0a        auto
    result = candidate(" instead

    /tmp/tmp6dtcbwnq.d(49): Error: found `A` when expecting `;` following statement

    /tmp/tmp6dtcbwnq.d(49): Error: found `C` when expecting `;` following statement

    /tmp/tmp6dtcbwnq.d(50): Error: missing exponent

    /tmp/tmp6dtcbwnq.d(50): Error: found `0.00000f` when expecting `;` following statement

    /tmp/tmp6dtcbwnq.d(50): Error: radix 10 digit expected, not `b`

    /tmp/tmp6dtcbwnq.d(50): Error: '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\t\n\trequire(text.len\
    \ > 0, \"text cannot be empty\");\n\t\n\tstring res;\n\tmd5(text.as_bytes, text.len,\
    \ res);\n\treturn res!=\"\" ? res : null;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7ezsfm1k.d(15): Error: undefined identifier `require`

    /tmp/tmp7ezsfm1k.d(18): Error: undefined identifier `md5`

    /tmp/tmp7ezsfm1k.d(19): Error: cannot implicitly convert expression `!__equals(res,
    "") ? res : null` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7ezsfm1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text == null)\
    \ {\n    return null;\n  }\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3_jago_g.d(17): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3_jago_g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length==0)\n\
    \        return null;\n    return md5(text, text.length, md5.md5, true);\n}\n\
    </code>\nAnd finally, we can use that md5 function in a function:\n<code>\nfunction\
    \ string_to_md5(string text) \n{\n    if (text.length==0)\n        return null;\n\
    \    return md5(text, text.length, md5.md5, true);\n}\n</code>\n(This last function\
    \ takes a string and converts it to its md5 hash equivalent, provided that that\
    \ hash has already been computed.)\n<|/ a tags=string,haskell,hash dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nimport Control.Monad.State\nimport Data.Maybe\nimport\
    \ Data.Monoid\nimport Data.Text\nimport Data.Text.Encoding\nimport qualified Data.ByteString.Char8\
    \ as B\nimport qualified Data.ByteString as BS\nimport qualified Data.ByteString.Lazy\
    \ as L\nimport qualified Data.ByteString.UTF8 as UTF8\nimport qualified Data.Text.IO\
    \ as T\nimport qualified Data.Text.Lazy as LT\nimport qualified Data.Text.Lazy.IO\
    \ as TIO\nimport qualified Data.Text as T\nimport qualified Data.Text.Encoding\
    \ as TE\nimport qualified Data.Text.Encoding.ASCII as TDE\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcfyxup3r.d(18): Error: declaration expected, not `<`

    /tmp/tmpcfyxup3r.d(25): Error: declaration expected, not `return`

    /tmp/tmpcfyxup3r.d(26): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcfyxup3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text == \"\
    \") return null;\n\tint len = text.length();\n\tMD5 md = MD5().init;\n\tfor (int\
    \ i = 0; i < len; i++)\n\t\tmd.update(text.asBytes[i]);\n\treturn md.digest();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1qkca71_.d(15): Error: no property `length` for type `string`

    /tmp/tmp1qkca71_.d(16): Error: undefined identifier `MD5`

    /tmp/tmp1qkca71_.d(16): Error: undefined identifier `MD5`

    /tmp/tmp1qkca71_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1qkca71_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n    : string_to_md5(string(text))\
    \ {\n    if (text == \"\") return null;\n    \n    Bytes.toMD5BytesSlow(text).md5;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ww97gdk.d(13): Error: semicolon expected following function declaration

    /tmp/tmp2ww97gdk.d(13): Error: declaration expected, not `:`

    /tmp/tmp2ww97gdk.d(16): Error: function declaration without return type. (Note
    that constructors are always named `this`)

    /tmp/tmp2ww97gdk.d(16): Error: no identifier for declarator `Bytes.toMD5BytesSlow(text)`

    /tmp/tmp2ww97gdk.d(16): Error: semicolon expected following function declaration

    /tmp/tmp2ww97gdk.d(16): Error: no identifier for declarator `.md5`

    /tmp/tmp2ww97gdk.d(17): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ww97gdk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if(text == \"\"\
    )\n    return null;\n  else\n    return MD5.hash(text);\n}\n\"\"\";\n  auto code\
    \ = compile(ir);\n  auto executable = module->addExecutable(std::move(ir));\n\
    unittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result =\
    \ candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2ji8msre.d(19): Error: declaration expected, not `""`

    /tmp/tmp2ji8msre.d(28): Error: number `3e25960` is not representable

    /tmp/tmp2ji8msre.d(38): Error: missing exponent

    /tmp/tmp2ji8msre.d(38): Error: radix 10 digit expected, not `b`

    /tmp/tmp2ji8msre.d(43): Error: unterminated string constant starting at /tmp/tmp2ji8msre.d(43)

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ji8msre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164338
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    SHA1 sha = SHA1(text,\
    \ StringHashing.MD5);\n    string hash = sha.hashValue.hexValue;\n    \n    return\
    \ hash;\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpokr2xdo9.d(14): Error: undefined identifier `SHA1`

    /tmp/tmpokr2xdo9.d(14): Error: undefined identifier `SHA1`

    /tmp/tmpokr2xdo9.d(17): Error: cannot implicitly convert expression `hash` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpokr2xdo9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyt3epz9.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyt3epz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    auto md = std.hashlib.md5(text.as_bytes);\n\
    \    return Nullable!(string)(md.digest);\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5733zm1k.d(14): Error: undefined identifier `hashlib` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5733zm1k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    char[] bytes\
    \ = text.ToCharArray();\n    MD5 md5 = MD5.Create();\n    byte[] hash = md5.ComputeHash(bytes);\n\
    \    return ByteArrayToString(hash);\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe5vgw56z.d(14): Error: no property `ToCharArray` for type `string`

    /tmp/tmpe5vgw56z.d(15): Error: undefined identifier `MD5`

    /tmp/tmpe5vgw56z.d(15): Error: undefined identifier `MD5`

    /tmp/tmpe5vgw56z.d(17): Error: undefined identifier `ByteArrayToString`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5vgw56z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    string md5Sum;\n\
    \    md5Sum = \"\";\n    md5Sum += (text.length() & 1) != 0 ? \"0\" : \"\";\n\
    \    md5Sum += text ;\n    md5Sum = toHexString(md5Sum);\n    return md5Sum;\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbbo410vy.d(16): Error: no property `length` for type `string`

    /tmp/tmpbbo410vy.d(17): Error: slice `md5Sum` is not mutable

    /tmp/tmpbbo410vy.d(18): Error: undefined identifier `toHexString`

    /tmp/tmpbbo410vy.d(19): Error: cannot implicitly convert expression `md5Sum` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbbo410vy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text.length()\
    \ == 0) {\n\t\treturn null;\n\t}\n\tByteBuffer bytes = text.asBytes();\n\treturn\
    \ bytes.foldMd5(bytes.hash());\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1nh3pzgu.d(14): Error: no property `length` for type `string`

    /tmp/tmp1nh3pzgu.d(17): Error: undefined identifier `ByteBuffer`

    /tmp/tmp1nh3pzgu.d(17): Error: no property `asBytes` for type `string`

    /tmp/tmp1nh3pzgu.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1nh3pzgu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return text.md5();\n\
    }\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7y4kq74i.d(14): Error: no property `md5` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7y4kq74i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable<string>\
    \ md5 = null;\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n      \
    \  auto result = candidate(\"Hello world\");\n        assert(!result.isNull &&\
    \ result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result\
    \ = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate(\"A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp767vfer2.d(14): Error: found `>` when expecting `;` following statement

    /tmp/tmp767vfer2.d(15): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp767vfer2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\n    using md5 = md5_c; // use std.md5\n    md5\
    \ md = md5_init();\n    md5_append(md, (const byte *)text.c_str(), text.size());\n\
    \    byte hash[32];\n    md5_finish(md, hash);\n    stringstream ss;\n    \n \
    \   for(int i = 0; i < 32; i++)\n    {\n        ss << hex << hash[i];\n    }\n\
    \    \n    return ss.str();\n}\n/*\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyqryja7b.d(18): Error: C style cast illegal, use `cast(const(byte*))text.c_str()`

    /tmp/tmpyqryja7b.d(19): Deprecation: instead of C-style syntax, use D-style syntax
    `byte[32] hash`

    /tmp/tmpyqryja7b.d(30): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyqryja7b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    int hash;\n\
    \    \n    if (text == \"\")\n        return Nullable!(string);\n    \n    hash\
    \ = md5(text);\n    \n    return Nullable!(string){\n        \"0x\" + hexstring(hash),\n\
    \    };\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto\
    \ result = candidate(\"Hello world\");\n        assert(!result.isNull && result.get\
    \ == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpva3wn081.d(21): Error: found `{` when expecting `;` following `return`
    statement

    /tmp/tmpva3wn081.d(23): Error: expression expected, not `}`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpva3wn081.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n  if (text.length\
    \ <= 0) return null;\n  var md5_value = md5(text);\n  return new string(\"${md5_value}\"\
    );\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\n{\n        auto result\
    \ = candidate(\"Hello world\");\n        assert(!result.isNull && result.get ==\
    \ \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto result = candidate(\"\
    \");\n        assert(result.isNull);\n}\n\n{\n        auto result = candidate(\"\
    A B C\");\n        assert(!result.isNull && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    );\n}\n\n{\n        auto result = candidate(\"password\");\n        assert(!result.isNull\
    \ && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpovv7ql5g.d(15): Error: undefined identifier `var`

    /tmp/tmpovv7ql5g.d(15): Error: undefined identifier `md5`

    /tmp/tmpovv7ql5g.d(16): Error: cannot implicitly convert expression `"${md5_value}"`
    of type `string` to `ulong`

    /tmp/tmpovv7ql5g.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpovv7ql5g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    return null!=text?hash(string_to_bin(text)):null;\n\
    }\n/* Returns the MD5 hash of binary data. \n*/\nNullable!(byte[]) string_to_md5(byte[]\
    \ data) {\n    return null!=data?hash(data):null;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpin6iqv4e.d(14): Error: undefined identifier `hash`, did you mean
    function `cosh`?

    /tmp/tmpin6iqv4e.d(19): Error: undefined identifier `hash`, did you mean function
    `cosh`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpin6iqv4e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\tif (text == null\
    \ || text.length == 0)\n\t\treturn null;\n\tconst uint32 len = text.length();\n\
    \tconst uint32 h0 = MD5_HASH(text.asBytes(), len);\n\tconst uint32 h1 = MD5_HASH(text.asBytes(),\
    \ len - 8);\n\treturn new Nullable!(char[64]);\n}\n'''\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpporxmsud.d(21): Error: unterminated character constant

    /tmp/tmpporxmsud.d(21): Error: declaration expected, not `63U`

    /tmp/tmpporxmsud.d(21): Error: unterminated character constant

    /tmp/tmpporxmsud.d(26): Error: declaration expected, not `{`

    /tmp/tmpporxmsud.d(28): Error: declaration expected, not `assert`

    /tmp/tmpporxmsud.d(29): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpporxmsud.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text.isEmpty())\n\
    \        return null;\n    return md5.hash(text);\n}\n/*\nunittest\n{\n    alias\
    \ candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\"\
    );\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeuy5qt_0.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeuy5qt_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text !=\
    \ \"\")\n        return hash_string(text);\n    return null;\n}\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvu2171d3.d(15): Error: undefined identifier `hash_string`

    /tmp/tmpvu2171d3.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu2171d3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    \n    Nullable!(string)\
    \ md5 = null;\n    \n    if (text != \"\")\n    {\n        md5 = text;\n    }\n\
    \    else\n    {\n        md5 = null;\n    }\n    \n    return md5;\n}\n/*\nunittest\n\
    {\n    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzfcz7oqq.d(28): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfcz7oqq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164339
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n\trequire(text.length\
    \ > 0, text, \" text cannot be an empty string\");\n\t\n\tstring result = md5(text);\n\
    \tif (result == null)\n\t\treturn null;\n\t\n\treturn result;\n}\nunittest\n{\n\
    \    alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"\
    Hello world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn_ju63_9.d(14): Error: undefined identifier `require`

    /tmp/tmpn_ju63_9.d(16): Error: undefined identifier `md5`

    /tmp/tmpn_ju63_9.d(18): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpn_ju63_9.d(20): Error: cannot implicitly convert expression `result` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn_ju63_9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if(text==\"\"\
    )\n    {\n        return null;\n    }\n    else\n    {\n        string hash=std.sha1(text.asBytes());\n\
    \        return hash;\n    }\n}\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp63apcg4j.d(20): Error: undefined identifier `sha1` in package `std`

    /tmp/tmp63apcg4j.d(16): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp63apcg4j.d(21): Error: cannot implicitly convert expression `hash` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp63apcg4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    Nullable hash\
    \ = md5();\n    \n    if (text.Length > 0) {\n        hash = md5.Transform(text.AsCharArray(),\
    \ text.Length);\n    }\n    \n    return hash;\n}\nunittest\n{\n    alias candidate\
    \ = string_to_md5;\n\n{\n        auto result = candidate(\"Hello world\");\n \
    \       assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4_8o8id7.d(14): Error: template struct `std.typecons.Nullable(T)`
    is used as a type without instantiation; to instantiate it use `Nullable!(arguments)`

    /tmp/tmp4_8o8id7.d(14): Error: undefined identifier `md5`

    /tmp/tmp4_8o8id7.d(16): Error: no property `Length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_8o8id7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164340
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    if (text.length\
    \ == 0)\n        return null;\nunittest\n{\n    alias candidate = string_to_md5;\n\
    \n{\n        auto result = candidate(\"Hello world\");\n        assert(!result.isNull\
    \ && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n\n{\n        auto\
    \ result = candidate(\"\");\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate(\"A B C\");\n        assert(!result.isNull && result.get\
    \ == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto result = candidate(\"\
    password\");\n        assert(!result.isNull && result.get == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    );\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqyt3epz9.d(16): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqyt3epz9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164335
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ null.\n\n    >>> string_to_md5(\"Hello world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n    \n*/\nNullable!(string) string_to_md5(string text) \n{\n    text is null\
    \ => null;\n    text is string s => _md5.hash(s);\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis is by far the most elegant solution, thanks! I added a couple of improvements\
    \ I made after I finished implementing this.\n<|/ c |>\n<| c |>\nI did some tests\
    \ and found that MD5 has a few issues on some platforms (eg. Python, C#). So I\
    \ made my own version, which is not that difficult after all.\n<|/ c |>\n<| c\
    \ |>\nThe implementation of string_to_md5() is missing a return statement; I added\
    \ one and a test run is now passing in Python, Scala, and C#. \nThe main reason\
    \ for using Nullable is because null is not supported by md5 hashing.\n<|/ c |>\n\
    <| c |>\nThe string conversion should be done with 'text' instead of 's'. The\
    \ `s => ` part of the function definition is where you should put your string\
    \ conversion logic.\n<|/ c |>\n<| a dscore=5 |>\nThe best way I have found to\
    \ do this is to run md5hash on a byte array. \n<code>\nmd5hash(\"hello\".getBytes(\"\
    UTF-8\"))\n</code>\n<|/ a tags=md5,hash,java |>\n<| c |>\nThis is actually the\
    \ best way as it will work on any character encoding (UTF-8, Latin-1, etc). It\
    \ doesn't require you to encode it before hashing.\n<|/ c |>\n<| c |>\nThis is\
    \ what I am looking for, thanks. One could also pass 'null' instead of 'String'\
    \ if you don't want to encode it.\n<|/ c |>\n<| c |>\nIt will work on all encodings\
    \ except UTF-16, UTF-32, UTF-8 and UTF-7, but only if you use a non-ASCII character\
    \ for example.\n<|/ c |>\n<| c |>\nIt won't work with multibyte encodings, for\
    \ example Chinese\n<|/ c |>\n<| c |>\nthis won't work if your String contains\
    \ characters like a Chinese word or punctuation marks because md5hash method doesn't\
    \ support Chinese characters\n<|/ c |>\n<| a dscore=5 tags=md5,hash,java |>\n\
    As of Java 11, the java.util.Base64 class is available.\nIt can be used to encode\
    \ the String into a byte array.\nThe standard library also includes a utility\
    \ class called Base64Utils, for base64 encoding and decoding operations.\n<|/\
    \ a |>\n<| c |>\nThis is an excellent answer. But if you're \nunittest\n{\n  \
    \  alias candidate = string_to_md5;\n\n{\n        auto result = candidate(\"Hello\
    \ world\");\n        assert(!result.isNull && result.get == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    );\n}\n\n{\n        auto result = candidate(\"\");\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate(\"A B C\");\n        assert(!result.isNull\
    \ && result.get == \"0ef78513b0cb8cef12743f5aeb35f888\");\n}\n\n{\n        auto\
    \ result = candidate(\"password\");\n        assert(!result.isNull && result.get\
    \ == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp18wojr9.d(14): Error: found `=>` when expecting `;` following
    statement

    /tmp/tmpp18wojr9.d(15): Error: found `s` when expecting `;` following statement

    /tmp/tmpp18wojr9.d(15): Error: found `=>` instead of statement

    /tmp/tmpp18wojr9.d(17): Error: declaration expected, not `<`

    /tmp/tmpp18wojr9.d(26): Error: semicolon expected, not `one`

    /tmp/tmpp18wojr9.d(26): Error: semicolon expected, not `a`

    /tmp/tmpp18wojr9.d(26): Error: semicolon expected, not `run`

    /tmp/tmpp18wojr9.d(26): Error: no identifier for declarator `run`

    /tmp/tmpp18wojr9.d(26): Error: declaration expected, not `is`

    /tmp/tmpp18wojr9.d(30): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(30): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(39): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(42): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(42): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(42): Error: unterminated character constant

    /tmp/tmpp18wojr9.d(42): Error: unterminated characte'
  stdout: ''
  timestamp: 1660164339
