name: HumanEval_60_sum_to_n
language: r
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n\
  # 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n\
  # 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_to_n\n    if(!identical(candidate(1),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(6), 21)){quit('no', 1)}\n    if(!identical(candidate(11),\
  \ 66)){quit('no', 1)}\n    if(!identical(candidate(30), 465)){quit('no', 1)}\n \
  \   if(!identical(candidate(100), 5050)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  n\n}\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the sum of\
    \ the first $n$ prime numbers.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <-\
    \ n * 3 + 1\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n positive integers.\
    \ Use a while loop to do this.\n\n\n</text>\n<cell>", "\n  n <- n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n ", "\n  n <- n + 1\n  if(n == 1) return(1)\n  return(sum_to_n(n-1))\n\
    }\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  ", "\n  n <- n + 1\n  return(n %/%\
    \ 10 * 10 + n %% 10)\n}\n</cell>\n<text>\nThe sum_to_n function above is called\
    \ a generator function, and it generates numbers from 1 to n by repeatedly adding\
    \ 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also called\
    \ a generator expression, and it generates numbers from 1 to n by repeatedly adding\
    \ 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also called\
    \ a generator comprehension, and it generates numbers from 1 to n by repeatedly\
    \ adding 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also\
    \ called a generator expression, and it generates numbers from 1 to n by repeatedly\
    \ adding 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also\
    \ called a generator comprehension, and it generates numbers from 1 to n by repeatedly\
    \ adding 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also\
    \ called a generator expression, and it generates numbers from 1 to n by repeatedly\
    \ adding 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, and so on.\n\nThe sum_to_n function above is also\
    \ called a generator comprehension, and it generates numbers from 1 to n by repeatedly\
    \ adding 1 to n and dividing by 10. For example, sum_to_n(30) generates 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, ", "\n  n <- n\n  n <- ifelse(n < 1, n, 1)\n  n <- ifelse(n < 2, n*(n-1),\
    \ n*(n-2))\n  return(n)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=math,r,algorithm\
    \ |>\nThe algorithm is quite simple:\n\nStart with n = 1\nIf n is odd, multiply\
    \ n by 2\nIf n is even, multiply n by 3\nIf n is odd, multiply n by 4\nIf n is\
    \ even, multiply n by 5\nIf n is odd, multiply n by 6\nIf n is even, multiply\
    \ n by 7\nIf n is odd, multiply n by 8\nIf n is even, multiply n by 9\nIf n is\
    \ odd, multiply n by 10\nIf n is even, multiply n by 11\nIf n is odd, multiply\
    \ n by 12\nIf n is even, multiply n by 13\nIf n is odd, multiply n by 14\nIf n\
    \ is even, multiply n by 15\nIf n is odd, multiply n by 16\nIf n is even, multiply\
    \ n by 17\nIf n is odd, multiply n by 18\nIf n is even, multiply n by 19\nIf n\
    \ is odd, multiply n by 20\nIf n is even, multiply n by 21\nIf n is odd, multiply\
    \ n by 22\nIf n is even, multiply n by 23\nIf n is odd, multiply n by 24\nIf n\
    \ is even, multiply n by 25\nIf n is odd, multiply n by 26\nIf n is even, multiply\
    \ n by 27\nIf n is odd, multiply n by 28\nIf n is even, multiply n by 29\nIf n\
    \ is odd, multiply n by 30\nIf n is even, multiply n by 31\nIf n is odd, multiply\
    \ n by 32\nIf n is even, multiply n by 33\nIf n is odd, multiply n by 34\nIf n\
    \ is even, multiply n by 35\nIf n is odd, multiply n by 36\nIf n is even, multiply\
    \ n by 37\nIf n is odd, multiply n by 38\nIf n is even, multiply n by 39\nIf n\
    \ is odd, multiply n by 40\nIf n is even, multiply n by 41\nIf ", "\n  n <- n\
    \ + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n}\n", "\n  n <- n\n  n <- sum(n)\n\
    \  n\n}\n", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n", "\n  n\
    \ <- n + 1\n  n <- n * n\n  return(n)\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a number.\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n * 3 + 1\n  n <- n / 2\n  n\n}\n\
    </code>\n<|/ a tags=r,function,for-loop |>\n<| c |>\nThanks so much for your help!\
    \ I really appreciate it! I really appreciate it!\n<|/ c |>\n<| a tags=r,function,for-loop\
    \ |>\nYou can do this with recursion:\n<code>\nsum_to_n <- function(n) {\n  if(n\
    \ == 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks so much for your help! I really appreciate it! I really appreciate\
    \ it!\n<|/ c |>\n<| a tags=r,function,for-loop |>\n<code>\nsum_to_n <- function(n)\
    \ {\n  if(n <= 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\n<code>\nsum_to_n <- function(n) {\n  if(n <= 1) return(1)\n\
    \  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a tags=r,function,for-loop dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_to_n <- function(n) {\n  if(n <= 1) return(1)\n\
    \  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a tags=r,function,for-loop |>\n\
    <| a tags=r,function,for-loop |>\n<code>\nsum_to_n <- function(n) {\n  if(n <=\
    \ 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,function,for-loop |>\n<code>\nsum_to_n <- function(n) {\n  if(n <=\
    \ 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,function,for-loop |>\n<code>\nsum_to_n <- function(n) {\n  if(n <=\
    \ 1) return(1)\n  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nsum_to_n <- function(n) {\n  if(n <= 1) return(1)\n\
    \  return(sum_to_n(n - 1) + n)\n}\n</code>\n<|/ a tags=r,function,for-loop |>\n\
    <| a tags=r,function,", "\n  n <- n + 1\n  n <- n * n\n  n <- n / 2\n  return(n)\n\
    }\n</cell>\n<text>\nExercise 4\nWrite a function that returns the factorial of\
    \ a number.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  return(\n    sum(\n    \
    \  1:n\n    )\n  )\n}\n</cell>\n<text>\nThe function sum_to_n takes an integer\
    \ argument and returns the sum of the integers from 1 to that number.\n\n\n</text>\n\
    <cell>\nsum_to_n(30)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the integers from 1 to n (inclusive)\
    \ that are divisible by k.\n\n\n</text>\n<cell>", "\n  n <- n + 1\n  n <- n *\
    \ n\n  n <- n / 2\n  n\n}\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)",
  "\n  n <- n + 1\n  return(sum(n))\n}\n", "\n  n <- n + 1\n  n <- n * n\n  n <- n\
    \ / 2\n  return(n)\n}\n</cell>\n<text>\nLet's try it out on some numbers:\n\n\n\
    </text>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<text>\nNow let's try it out on some vectors:\n\n\n</text>\n<cell>\n\
    x <- c(10, 100, 1000, 10000, 100000)\n</cell>\n<cell>\nsum_to_n(x)\n</cell>\n\
    <text>\nNow let's try it out on some more complicated vectors:\n\n\n</text>\n\
    <cell>\nx <- c(10, 100, 1000, 10000, 100000)\ny <- c(2, 3, 4, 9, 10)\n</cell>\n\
    <cell>\nsum_to_n(x)\n</cell>\n<cell>\nsum_to_n(y)\n</cell>\n<text>\nNow let's\
    \ try it out on some more complicated vectors:\n\n\n</text>\n<cell>\nx <- c(10,\
    \ 100, 1000, 10000, 100000)\ny <- c(2, 3, 4, 9, 10)\nz <- c(5, 6, 7, 8, 9)\n</cell>\n\
    <cell>\nsum_to_n(x)\n</cell>\n<cell>\nsum_to_n(y)\n</cell>\n<cell>\nsum_to_n(z)\n\
    </cell>\n<text>\nNow let's try it out on some more complicated vectors:\n\n\n\
    </text>\n<cell>\nx <- c(10, 100, 1000, 10000, 100000)\ny <- c(2, 3, 4, 9, 10)\n\
    z <- c(5, 6, 7, 8, 9)\na <- c(10, 100, 1000, 10000, 100000)\nb <- c(2, 3, 4, 9,\
    \ 10)\nc <- c(5, 6, 7, 8, 9)\n</cell>\n<cell>\nsum_to_n(x)\n</cell>\n<cell>\n\
    sum_to_n(y)\n</cell>\n<cell>\nsum_to_n(z)\n</cell>\n<cell>\nsum_to_n(a)\n</cell>\n\
    <cell>\nsum_to_n(b)\n</cell>\n<cell>\nsum_to_n(c)\n</cell>\n<text>\nNow let's\
    \ try it out on some more complicated vectors:\n\n\n</text>\n<cell>\nx <- c(10,\
    \ 100, 1000, 10000, 100000)\ny <- c(2, ", "\n  n <- n + 1\n  n <- n * n\n  n <-\
    \ n / 2\n  n\n}\n</cell>\n<cell>", "\n  return(sum(1:n))\n}\n</cell>\n<text>\n\
    The sum_to_n function above is pretty straightforward, it just sums numbers from\
    \ 1 to n. Let's see how it works:\n\n\n</text>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <text>\nThe sum_to_n function above works as expected. Let's see how we can use\
    \ it to find the sum of the first n numbers:\n\n\n</text>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<text>\nThe sum_to_n function above works as expected. Let's see how\
    \ we can use it to find the sum of the first n numbers:\n\n\n</text>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\nThe sum_to_n function above works as expected.\
    \ Let's see how we can use it to find the sum of the first n numbers:\n\n\n</text>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<text>\n", "\n  n <- n\n  n <- n * n\n  n <- n\
    \ * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n "]
stop_tokens:
- "\n#"
- "\n```"
