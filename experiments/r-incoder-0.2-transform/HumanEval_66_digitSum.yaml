name: HumanEval_66_digitSum
language: r
prompt: "# Task\n# Write a function that takes a string as input and returns the sum\
  \ of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n\
  # 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n\
  # 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum\
  \ <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- digitSum\n    if(!identical(candidate(''),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('abAB'), 131)){quit('no', 1)}\n\
  \    if(!identical(candidate('abcCd'), 67)){quit('no', 1)}\n    if(!identical(candidate('helloE'),\
  \ 69)){quit('no', 1)}\n    if(!identical(candidate('woArBld'), 131)){quit('no',\
  \ 1)}\n    if(!identical(candidate('aAaaaXa'), 153)){quit('no', 1)}\n    if(!identical(candidate('\
  \ How are yOu?'), 151)){quit('no', 1)}\n    if(!identical(candidate('You arE Very\
  \ Smart'), 327)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]]))]))\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\n\
    digitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n\
    <|/ a tags=r,regex |>\n<| c |>\nThis doesn't work for the empty string `\"\"`\n\
    <|/ c |>\n<| c |>\nI added a check for empty string to the answer. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work for `digitSum(\"aAaaaXa\"\
    )`\n<|/ c |>\n<| c |>\nI added a check for empty string to the answer. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n\ndf <- data.frame(\n  string = c(\"abc\", \"abcabc\", \"abcabcabc\"\
    ),\n  stringsAsFactors = FALSE\n)\n\ndf %>%\n  mutate(\n    upper = str_extract(string,\
    \ \"[A-Z]\"),\n    upper = ifelse(is.na(upper), 0, upper),\n    sum = str_count(string,\
    \ \"[A-Z]\") %>% sum\n  )\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for `digitSum(\"aAaaaXa\")`\n<|/ c |>\n<| c |>\nI added a check for empty string\
    \ to the answer. Thanks for pointing that out.\n<|/ c |>\n<| a |>\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n\ndf <- data.frame(\n  string = c(\"abc\", \"abcabc\", \"abcabcabc\"\
    ),\n  stringsAsFactors = FALSE\n)\n\ndf %>%\n  mutate(\n    upper = str_extract(string,\
    \ \"[A-Z]\"),\n    upper = ifelse(is.na(upper), 0, upper),\n    sum = str_count(string,\
    \ \"[A-Z]\") %>% sum\n  )\n</code>\n<|/ a dscore=2 tags=r,regex |>\n<| a dscore=1\
    \ |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\ndf <- data.frame(\n  string\
    \ = c(\"abc\", \"abcabc\", \"abcabcabc\"),\n  stringsAsFactors = FALSE\n)\n\n\
    df %>%\n  mutate(\n    upper = str_extract(string, \"[A-Z]\"),\n    upper = ",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\n\
    digitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the sum of the numbers\
    \ in the string.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n131\n\
    >>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n\
    131\n>>> digitSum('aAaaaXa')\n153\n\n\n</text>\n<cell>", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n</cell>\n\
    <cell>", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s, '')[[1]]))\
    \ == TRUE])\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string as input and returns the number of characters in the string that\
    \ are uppercase letters.\n\n\n</text>\n<cell>", "\n  s <- gsub(\"[^0-9]\", \"\"\
    , s)\n  sum(as.integer(s))\n}\n", "\n  sum(as.integer(unlist(strsplit(s, \"\"\
    ))[which(grepl(\"[A-Z]\", s))]))\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"\
    abcCd\")\ndigitSum(\"helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n\
    </code>\n<|/ a tags=r,regex,string |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\ndigitSum(letters)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string as input and returns the sum of the digits\
    \ in that string.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n3\n>>>\
    \ digitSum('abcCd')\n5\n>>> digitSum('helloE')\n5\n>>> digitSum('woArBld')\n5\n\
    >>> digitSum('aAaaaXa')\n7\n>>> digitSum('123')\n3\n>>> digitSum('123abc')\n3\n\
    >>> digitSum('123abc456')\n3\n>>> digitSum('123abc456def')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456defg')\n\
    3\n>>> digitSum('123abc456defg')\n3\n>>> digitSum('123abc456def", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum <- 0\n  for(i in 1:nchar(s)){\n    sum <- sum + as.integer(substr(s, i,\
    \ i))\n  }\n  return(sum)\n}\n</cell>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\ndigitSum(letters)",
  "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string as input and returns the sum of the digits only'\nASCII\
    \ codes.\nExamples:\n>>> digitSum('')\n0\n>>> digitSum('abAB')\n13\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('helloE')\n69\n>>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n\
    153\nHint: Use strsplit() and lapply().\n\n\n</text>\n<cell>", "\n  sum <- 0\n\
    \  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s, i, i))\n  }\n\
    \  sum\n}\n", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(as.integer(unlist(strsplit(s, \"\"))[which(grepl(\"^[A-Z]\", s))]))\n}\n",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\n</cell>\n<cell>", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    }\n", "\n  s <- gsub(\"[^0-9]\", \"\", s)\n  sum(as.integer(s))\n}\n</cell>\n\
    <cell>\ndigitSum(\"helloE\")\n</cell>\n<cell>\ndigitSum(\"woArBld\")\n</cell>\n\
    <cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<text>\nTask 3\nWrite a function that\
    \ takes a string as input and returns the sum of the digits in that string.\n\
    Examples:\n>>> digitSum(\"helloE\")\n5\n>>> digitSum(\"woArBld\")\n6\n>>> digitSum(\"\
    aAaaaXa\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n\
    >>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"\
    aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n\
    >>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"\
    aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n\
    >>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"\
    aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n\
    >>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"\
    aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n\
    >>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"aAaaaXaX\")\n7\n>>> digitSum(\"\
    aAaaaXaX\")\n7\n>>> digitSum", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(as.character(s))]))\n\
    }\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)[upper.case(x)])))\n\
    }\n", "\n  sum(gregexpr(\"[A-Z]\", s)[[1]])\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns the sum of the digits in that string.\n\
    Examples:\n>>> digitSum('abcCd')\n6\n>>> digitSum('helloE')\n5\n>>> digitSum('woArBld')\n\
    5\n>>> digitSum('aAaaaXa')\n10\n</text>\n<cell>", "\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\n", "\n  sum(unlist(strsplit(s, '')[[1]])[upper.case(unlist(strsplit(s,\
    \ '')[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\n\
    digitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string\
    \ that are uppercase letters.\n\nExamples:\n>>> upperCaseLetters('')\n0\n>>> upperCaseLetters('abc')\n\
    3\n>>> upperCaseLetters('ABCD')\n4\n>>> upperCaseLetters('ABC')\n4\n>>> upperCaseLetters('ABCDE')\n\
    5\n>>> upperCaseLetters('ABCDEF')\n5\n>>> upperCaseLetters('ABCDEFG')\n6\n>>>\
    \ upperCaseLetters('ABCDEFGH')\n6\n>>> upperCaseLetters('ABCDEFGHI')\n7\n>>> upperCaseLetters('ABCDEFGHIJ')\n\
    7\n>>> upperCaseLetters('ABCDEFGHIJK')\n8\n>>> upperCaseLetters('ABCDEFGHIJKL')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLM')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMN')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLMNO')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOP')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQ')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQR')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRS')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRST')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRSTU')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRSTUV')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRSTUVW')\n8\n>>> upperCaseLetters('ABCDEFGHIJKLMNOPQRSTUVWX')\n\
    8\n>>> upperCaseLetters('ABCDEFGHIJKLM", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[seq(1, length(s) - 1, 2)]))\n}\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a string as input and returns the number of characters in the string.\n\
    Examples:\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>>\
    \ length('')\n0\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> length('ab')\n2\n>>> length('abc')\n\
    3\n>>> length('ab')\n2\n>>> length('abc')\n3\n>>> ", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][grepl(\"[[:upper:]]\", s)]))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are uppercase letters.\n\nExamples:\n\
    >>> upperCaseCharCount('')\n0\n>>> upperCaseCharCount('abc')\n3\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseCharCount('abC')\n\
    2\n>>> upperCaseCharCount('abC')\n2\n>>> upperCaseChar", "\n  sum(unlist(strsplit(s,\
    \ '')[[1]][grep('^[[:upper:]]+$', unlist(strsplit(s, '')[[1]]))]))\n}\ndigitSum(letters)\n\
    </cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n \
    \ sum(as.integer(gsub(\"[[:upper:]]\", \"\", s)))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE]))\n}\n</cell>\n\
    <cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n    sum\
    \ <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n  sum <-\
    \ 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s, i, i))\n\
    \  }\n  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum <- 0\n  for (i in 1:nchar(s)) {\n   \
    \ sum <- sum + as.integer(substr(s, i, i))\n  }\n  sum\n}\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE]))\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)){\n    sum\
    \ <- sum + as.integer(toupper(substr(s, i, i)))\n  }\n  return(sum)\n}\n", "\n\
    \  sum(unlist(strsplit(s, \"\")))\n}\n", "\n  sum(as.integer(gsub(\"[A-Z]\", \"\
    \", s)))\n}\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n<cell>\ndigitSum(\"\
    aAaaaXa\") != digitSum(\"aAaaaXaa\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\")\
    \ != digitSum(\"aAaaaXaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"\
    aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n\
    <cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"\
    aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\"\
    ) != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"\
    aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\"\
    )\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n\
    <cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"\
    aAaaaXaa\") != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\"\
    ) != digitSum(\"aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXaa\") != digitSum(\"\
    aAaaaXaaA\")\n</cell>\n<cell>\ndigitSum(\"aA", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n\
    </cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n\
    <cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('')\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the sum of the\
    \ digits of that string. \nExamples:\n>>> digitSum('123')\n6\n>>> digitSum('abc')\n\
    6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>>\
    \ digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n\
    6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>>\
    \ digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n\
    6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>>\
    \ digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n\
    6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>>\
    \ digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n\
    6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>>\
    \ digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n6\n>>> digitSum('abA')\n\
    6\n>>> digitSum('abA')\n6", "\n  sum(as.integer(gsub(\"[^[:digit:]]\", \"\", s)))\n\
    }\n</code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\n<code>\nlibrary(stringr)\n\
    str_extract_all(\"abcde\", \"[[:digit:]]+\")\n</code>\n<|/ a tags=r,regex |>\n\
    <| a dscore=1 |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"abcde\", \"[[:digit:]]+\"\
    )\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\n\
    str_extract_all(\"abcde\", \"[[:digit:]]+\")\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r,regex |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"abcde\", \"[[:digit:]]+\"\
    )\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    abcde\", \"[[:digit:]]+\")\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/27839434)\n<|/ c |>\n<| c |>\n\
    This does provide an answer to the question. While it might be a good idea to\
    \ include an explanation as to why this works, it would be better if you could\
    \ also include an explanation as to why this works. That way, the OP and any future\
    \ visitors can learn from your post, and apply it to their own code. SO is not\
    \ a code-writing service, but a resource for knowledge. Also, please don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nI agree with you. I am new to SO and I thought that my answer\
    \ was a good one. I am going to edit my answer with more explanation.\n<|/ ",
  "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n</cell>\n\
    <cell>", "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x)\
    \ > 96))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n\
    <cell>\ndigitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"aAaaaXa\")\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are digits.\n\n\n</text>\n<cell>", "\n\
    \  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n}\n", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[[1]][upper.case(unlist(strsplit(s, \"\"))[[1]])]))\n}\n</cell>\n<cell>\n\
    digitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the sum of the digits of that string.\n\n\n</text>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(unlist(strsplit(s, \"\")))\n}\ndigitSum(letters)", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n</cell>\n\
    <cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))[which(grepl(\"[A-Z]\",\
    \ s))]))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ ''))[[1]][upper.case(as.integer(unlist(strsplit(s, ''))[[1]]))]))\n}\n", "\n\
    \  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 96))))\n\
    }\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n</cell>\n<cell>\ndigitSum('abcCd')\n</cell>\n<cell>\n\
    digitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are not uppercase letters.\n\
    \nExamples:\n>>> nonUpperCharCount('')\n0\n>>> nonUpperCharCount('abAB')\n1\n\
    >>> nonUpperCharCount('abcCd')\n2\n>>> nonUpperCharCount('helloE')\n2\n>>> nonUpperCharCount('woArBld')\n\
    2\n>>> nonUpperCharCount('aAaaaXa')\n3\n>>> nonUpperCharCount('AA')\n1\n>>> nonUpperCharCount('AAa')\n\
    2\n>>> nonUpperCharCount('AAAb')\n3\n>>> nonUpperCharCount('AAAbc')\n4\n>>> nonUpperCharCount('AAAbcd')\n\
    5\n>>> nonUpperCharCount('AAAbcdE')\n5\n>>> nonUpperCharCount('AAAbcdEf')\n6\n\
    >>> nonUpperCharCount('AAAbcdEfG')\n7\n>>> nonUpperCharCount('AAAbcdEfGh')\n8\n\
    >>> nonUpperCharCount('AAAbcdEfGhi')\n9\n>>> nonUpperCharCount('AAAbcdEfGhij')\n\
    10\n>>> nonUpperCharCount('AAAbcdEfGhijK')\n11\n>>> nonUpperCharCount('AAAbcdEfGhijKl')\n\
    12\n>>> nonUpperCharCount('AAAbcdEfGhijKlmn')\n13\n>>> nonUpperCharCount('AAAbcdEfGhijKlmnO')\n\
    14\n>>> nonUpperCharCount('AAAbcdEfGhijKlmnOpq')\n15\n>>> nonUpperCharCount('AAAbcdEfGhijKlmnOpqrs')\n\
    16\n>>> nonUpperCharCount('AAAbcdEfGhijKlmnOpqrsT')\n17\n>>> nonUpperCharCount('",
  "\n  sum(unlist(strsplit(s, \"\")))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == 1]))\n}\n", "\n  sum(gregexpr(\"[A-Z]\", s)[[1]])\n}\n", "\n\
    \  sum(as.integer(gsub(\"[^A-Z]\", \"\", s)))\n}\n", "\n  s <- tolower(s)\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\ndigitSum(\"aAaaaXa\")", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\ndigitSum('abcCd')\n\
    </cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n\
    <cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a string as input and returns the sum of the digits in that string. \n\
    Examples:\n>>> digitSum('abAB')\n3\n>>> digitSum('abcCd')\n5\n>>> digitSum('helloE')\n\
    5\n>>> digitSum('woArBld')\n5\n>>> digitSum('aAaaaXa')\n5\n\n</text>\n<cell>",
  "\n  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 96))))\n\
    }\ndigitSum(letters)", "\n  sum(unlist(strsplit(s, \"\")))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 64))))\n}\n", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters that are not upper case letters.\n\n\n</text>\n<cell>",
  "\n  sum(as.integer(unlist(strsplit(s, \"\"))[[1]][upper.case(unlist(strsplit(s,\
    \ \"\"))[[1]])]))\n}\n", "\n  s <- tolower(s)\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\ndigitSum(\"\")\ndigitSum(\"abAB\")\ndigitSum(\"abcCd\")\ndigitSum(\"\
    helloE\")\ndigitSum(\"woArBld\")\ndigitSum(\"aAaaaXa\")\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,regex,string |>\nThis should work:\n<code>\nsum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,regex,string\
    \ |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,regex,string |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n</code>\n<|/ a tags=r,regex,string |>\n<| a tags=r,regex,string |>\n\
    <code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,regex,string |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    </code>\n<|/ a tags=r,regex,string |>\n<| a tags=r,regex,string |>\n<code>\nsum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,regex,string\
    \ |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,regex,string |>\n<code>\nsum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n</code>\n<|/ a tags=r,regex,string |>\n<| a dscore=1 |>", "\n  sum(as.integer(gsub(\"\
    [A-Z]\", \"\", s)))\n}\n", "\n  sum(unlist(lapply(strsplit(s, ''), function(x)\
    \ sum(as.integer(x) > 96))))\n}\n", "\n  sum(gregexpr(\"[[:upper:]]\", s)[[1]])\n\
    }\n", "\n  sum(as.integer(gsub(\"[^[:digit:]]\", \"\", s)))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]])) == TRUE])\n}\n", "\n\
    \  sum(unlist(strsplit(s, \"\")))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n\
    <cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\n\nExamples:\n>>> charCount('')\n0\n>>> charCount('abAB')\n\
    2\n>>> charCount('abcCd')\n3\n>>> charCount('helloE')\n5\n>>> charCount('woArBld')\n\
    7\n>>> charCount('aAaaaXa')\n7\n>>> charCount('aa')\n3\n>>> charCount('aaa')\n\
    3\n>>> charCount('aaaa')\n4\n>>> charCount('aaaaa')\n5\n>>> charCount('aaaaaa')\n\
    6\n>>> charCount('aaaaaaa')\n7\n>>> charCount('aaaaaaab')\n8\n>>> charCount('aaaaaaabb')\n\
    8\n>>> charCount('aaaaaaabbb')\n8\n>>> charCount('aaaaaaabbbb')\n8\n>>> charCount('aaaaaaabbbbc')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n\
    8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')\n8\n>>> charCount('aaaaaaabbbbcd')",
  "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == TRUE])\n}\ndigitSum(letters)", "\n  sum <- 0\n  for(i in 1:nchar(s)) {\n\
    \    sum <- sum + as.integer(substr(s, i, i))\n  }\n  return(sum)\n}\n</cell>\n\
    <cell>", "\n  sum(as.integer(gsub(\"[^[:digit:]]\", \"\", s)))\n}\n", "\n  sum(unlist(strsplit(s,\
    \ \"\")))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  s <- gsub(\"[^[:digit:]]\", \"\", s)\n  sum(as.integer(s))\n\
    }\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s, \"\"))))\n}\n</cell>\n\
    <cell>\ndigitSum('helloE')\n</cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\n\
    digitSum('aAaaaXa')\n</cell>\n<text>\nExercise\nWrite a function that takes a\
    \ string as input and returns the sum of the digits only'\nASCII codes.\nExamples:\n\
    >>> digitSum('')\n0\n>>> digitSum('abAB')\n13\n>>> digitSum('abcCd')\n67\n>>>\
    \ digitSum('helloE')\n69\n>>> digitSum('woArBld')\n13\n>>> digitSum('aAaaaXa')\n\
    153\nHint: You may want to use the function as.integer() to convert the string\
    \ to a vector of integers.\n\n\n</text>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))[seq(1, length(s) - 1, 2)]))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the sum of\
    \ the lower characters only'\nASCII codes.\nExamples:\n>>> digitSum('')\n0\n>>>\
    \ digitSum('abAB')\n131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n\
    >>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n153\n>>> digitSum('abcCd')\n\
    67\n>>> digitSum('abAB')\n131\n\n\n</text>\n<cell>", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x) > 96))))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n\
    </cell>\n<cell>\ndigitSum('woArBld')\n</cell>\n<cell>\ndigitSum('aAaaaXa')\n</cell>\n\
    <cell>\ndigitSum('abcCd')\n</cell>\n<cell>\ndigitSum('abAB')\n</cell>\n<cell>\n\
    digitSum('')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n\
    </cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n\
    <cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n\
    </cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n\
    <cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n\
    </cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n\
    <cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n\
    </cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n\
    <cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n\
    </cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n\
    <cell>\ndigitSum('abC')\n</cell>\n<cell>\ndigitSum('abC')\n</cell>\n<cell>", "\n\
    \  sum(unlist(strsplit(s, \"\")[[1]][upper.case(unlist(strsplit(s, \"\")[[1]]))\
    \ == 1]))\n}\n</cell>\n<cell>\ndigitSum('helloE')\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are uppercase letters.\n\n\n</text>\n<cell>", "\n  sum <-\
    \ 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(toupper(substr(s, i,\
    \ i)))\n  }\n  return(sum)\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\n", "\n  sum <- 0\n  for(i in 1:nchar(s)){\n    sum\
    \ <- sum + toupper(substr(s, i, i))\n  }\n  return(sum)\n}\n", "\n  s <- tolower(s)\n\
    \  sum(unlist(lapply(strsplit(s, ''), function(x) sum(as.integer(x) > 64))))\n\
    }\n</cell>\n<cell>", "\n  sum(unlist(strsplit(s, \"\")))\n}\n", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>\ndigitSum(\"helloE\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns the sum of\
    \ the lower characters only'\nASCII codes.\nExamples:\n>>> digitSum('')\n0\n>>>\
    \ digitSum('abAB')\n131\n>>> digitSum('abcCd')\n67\n>>> digitSum('helloE')\n69\n\
    >>> digitSum('woArBld')\n131\n>>> digitSum('aAaaaXa')\n153\ndigitSum <- function(s)\
    \ {\n  sum(gregexpr(\"[[:lower:]]\", s)[[1]])\n}\n</text>\n<cell>", "\n  sum(as.integer(gsub(\"\
    [^[:digit:]]\", \"\", s)))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you\
    \ for answering my question! I appreciate it. I will try this out and see how\
    \ it goes. I do have a question though, why did you use gsub(\"[^[:digit:]]\"\
    , \"\", s) instead of gsub(\"[^0-9]\", \"\", s)? I thought the ^ symbol means\
    \ \"not\" and the [] means \"any character\". So why did you use [:digit:] instead\
    \ of just [:digit]?\n<|/ c |>\n<| c |>\n`[:digit:]` means any character in the\
    \ range `[:digit:]` (i.e. `0-9`). `[:digit:]` means any character in the range\
    \ `[:digit:]` (i.e. `0-9`). `[^[:digit:]]` means any character in the range `[^[:digit:]]`\
    \ (i.e. `^0-9`). `[^0-9]` means any character in the range `[^0-9]` (i.e. `^0-9`).\
    \ `[^0-9]` means any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means\
    \ any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character\
    \ in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character in the range\
    \ `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character in the range `[^0-9]` (i.e.\
    \ `^0-9`). `[^0-9]` means any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]`\
    \ means any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any\
    \ character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character\
    \ in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character in the range\
    \ `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any character in the range `[^0-9]` (i.e.\
    \ `^0-9`). `[^0-9]` means any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]`\
    \ means any character in the range `[^0-9]` (i.e. `^0-9`). `[^0-9]` means any\
    \ character in the range `[^0-9]` (i.e. `^0-9`). ", "\n  sum(as.integer(gsub(\"\
    [^[:digit:]]\", \"\", s)), na.rm = T)\n}\n</cell>\n<cell>", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex\
    \ |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a tags=r,regex |>\n<| a tags=r,regex\
    \ |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,regex |>\n\
    <code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\n\
    <code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n</code>\n\
    <|/ a tags=r,regex |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,regex |>\n\
    <code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    library(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]\")\n</code>\n<|/ a\
    \ tags=r,regex |>\n<| a dscore=1 |>\n<code>\nlibrary(stringr)\nstr_extract_all(\"\
    helloE\", \"[[:upper:]]\")\n</code>\n<|/ a tags=r,regex |>\n<| a dscore=1 |>\n\
    <code>\nlibrary(stringr)\nstr_extract_all(\"helloE\", \"[[:upper:]]", "\n  sum(unlist(lapply(strsplit(s,\
    \ ''), function(x) sum(as.integer(x)[upper.case(x)])))\n}\n", "\n  sum(gregexpr(\"\
    [[:upper:]]\", s)[[1]])\n}\n</cell>\n<cell>\ndigitSum(\"\")\n</cell>\n<cell>\n\
    digitSum(\"abAB\")\n</cell>\n<cell>\ndigitSum(\"abcCd\")\n</cell>\n<cell>\ndigitSum(\"\
    helloE\")\n</cell>\n<cell>\ndigitSum(\"woArBld\")\n</cell>\n<cell>\ndigitSum(\"\
    aAaaaXa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of uppercase letters.\n\nExamples:\n>>> upperCaseLetters(\"\
    hello\")\n2\n>>> upperCaseLetters(\"HELLO\")\n2\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> upperCaseLetters(\"HELLOWORLD\")\n0\n>>> upperCaseLetters(\"HELLOWORLD\"\
    )\n0\n>>> ", "\n  sum(unlist(strsplit(s, \"\")[[1]][grep(\"[A-Z]\", unlist(strsplit(s,\
    \ \"\")[[1]]))]))\n}\n</cell>\n<cell>", "\n  sum(as.integer(unlist(strsplit(s,\
    \ \"\"))))\n}\n", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\ndigitSum(letters)\n</cell>\n<cell>", "\n  sum <-\
    \ 0\n  for(i in 1:nchar(s)) {\n    sum <- sum + as.integer(substr(s, i, i))\n\
    \  }\n  sum\n}\n</code>\n<|/ a tags=r,regex |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for my example, but when I try it on my real data\
    \ it gives me a warning: Warning message:\nIn gregexpr(\"[A-Z]\", s) :\n  PCRE\
    \ pattern compilation error\n  'invalid UTF-8 middle byte'\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your new solution and it works\
    \ perfectly on my real data. I will accept your answer as soon as I can.\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include a solution that doesn't use regular\
    \ expressions.\n<|/ c |>\n<| a dscore=0 |>\nI believe this can be done with gsub\
    \ and gregexpr functions. \n<code>\ngsub(\"[^A-Z]\", \"\", s)\n</code>\n<|/ a\
    \ tags=r,regex |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for my example, but when I try it on my real data it gives me a warning: Warning\
    \ message:\nIn gregexpr(\"[^A-Z]\", s) :\n  PCRE pattern compilation error\n \
    \ 'invalid UTF-8 middle byte'\n<|/ c |>\n<| a tags=r,regex |>\nI believe this\
    \ can be done with gsub and gregexpr functions. \n<code>\ngsub(\"[^A-Z]\", \"\"\
    , s)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for my example, but when I try it on my real data it gives me a warning:\
    \ Warning message:\nIn gregexpr(\"[^A-Z]\", s) :\n  PCRE pattern compilation error\n\
    \  'invalid UTF-8 middle byte'\n<|/ c |>\n<| a tags=r,regex |>\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n\ns <- c(\"helloE\", \"woArBld\", \"aAaaaXa\")\ns %>% \n  str_extract_all(\"\
    [A-Z]\") %>% \n  unlist() %>% \n  sum()", "\n  sum(unlist(strsplit(s, \"\")[[1]])[upper.case(unlist(strsplit(s,\
    \ \"\")[[1]])) == TRUE])\n}\ndigitSum(letters)", "\n  sum(gregexpr(\"[[:upper:]]\"\
    , s)[[1]])\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
