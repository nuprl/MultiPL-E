name: HumanEval_95_check_dict_case
language: r
prompt: "# Given a dictionary, return True if all keys are strings in lower \n# case\
  \ or all keys are strings in upper case, else return False.\n# The function should\
  \ return False is the given dictionary is empty.\n# Examples:\n# >>> check_dict_case(list('a'\
  \ = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple',\
  \ 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John',\
  \ 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE'\
  \ = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {"
tests: "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p'\
  \ = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name'\
  \ = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE'\
  \ = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit'\
  \ = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()),\
  \ FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(!is.list(dict)) stop(\"'dict' must be a list\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'dict' must only contain characters\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"'", "\n  if(!is.list(dict)) stop(\"'dict' must be a list\"\
    )\n  if(!is.list(names(dict))) stop(\"'dict' must contain at least one key\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"'dict' must contain only character\
    \ values\")\n  if(!all(sapply(dict, is.numeric))) stop(\"'dict' must contain only\
    \ numeric values\")\n  if(!all(sapply(dict, is.name))) stop(\"'dict' must contain\
    \ only character values\")\n  if(!all(sapply(dict, function(x) is.character(x)\
    \ || is.numeric(x) || is.name(x))))\n    stop(\"'dict' must contain only character\
    \ values, numeric values or names\")\n  if(!all(sapply(dict, function(x) all(tolower(x)\
    \ == tolower(names(dict)))))) \n    stop(\"'dict' must contain only lower case\
    \ keys\")\n  if(!all(sapply(dict, function(x) all(toupper(x) == toupper(names(dict))))))\
    \ \n    stop(\"'dict' must contain only upper case keys\")\n  return(TRUE)\n}\n\
    </cell>\n<text>\nExercise 3: Write a function that takes a character vector and\
    \ returns a list with all the unique elements of the character vector. \nThe function\
    \ should return an empty list if the vector is empty.\nExamples:", "\n  if(!is.list(dict))\
    \ return(FALSE)\n  \n  for(i in 1:length(dict)) {\n    if(!is.character(dict[i]))\
    \ return(FALSE)\n    if(tolower(dict[i]) != tolower(dict[i])) return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  \n  # Write your code here\n  \n  return(TRUE)\n\
    }\n", "\n  if(!is.list(dict)) stop('The given dictionary is not a list')\n  if(!all(sapply(dict,\
    \ is.character))) stop('The given dictionary contains non-character elements')\n\
    \  if(!all(sapply(dict, function(x) is.character(x) | is.factor(x))))\n    stop('The\
    \ given dictionary contains non-character or factor elements')\n  if(!all(sapply(dict,\
    \ function(x) all(tolower(x) == tolower(names(dict)))))) \n    stop('The given\
    \ dictionary contains non-lowercase elements')\n  if(!all(sapply(dict, function(x)\
    \ all(toupper(x) == toupper(names(dict)))))) \n    stop('The given dictionary\
    \ contains non-uppercase elements')\n  return(TRUE)\n}\n", "\n  if(!is.list(dict))\
    \ stop(\"The given dictionary must be a list.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys must be strings.\")\n  if(!all(sapply(dict, is.character))) ",
  "\n  if(!is.list(dict)) return(FALSE)\n  if(!length(dict)) return(FALSE)\n  for(i\
    \ in 1:length(dict)) {\n    if(!is.character(dict[i])) return(FALSE)\n  }\n  for(i\
    \ in 1:length(dict)) {\n    if(!is.character(tolower(dict[i]))) return(FALSE)\n\
    \  }\n  for(i in 1:length(dict)) {\n    if(!is.character(toupper(dict[i]))) return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  if(!is.list(dict)) return(FALSE)\n  if(!length(dict))\
    \ return(FALSE)\n  for(i in 1:length(dict)) {\n    if(!is.character(dict[i]))\
    \ return(FALSE)\n    if(tolower(dict[i]) != tolower(dict[i])) return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  if(!is.list(dict)) return(FALSE)\n  if(!length(dict))\
    \ return(FALSE)\n  for(i in 1:length(dict)) {\n    if(is.character(dict[i])) {\n\
    \      if(!is.character(tolower(dict[i]))) return(FALSE)\n      if(!is.character(toupper(dict[i])))\
    \ return(FALSE)\n    } else {\n      if(!is.numeric(dict[i])) return(FALSE)\n\
    \    }\n  }\n  return(TRUE)\n}\n</cell>\n<cell>", "\n  if(!is.list(dict)) return(FALSE)\n\
    \  if(!length(dict)) return(TRUE)\n  \n  for(i in 1:length(dict)) {\n    if(!is.character(dict[i]))\
    \ return(FALSE)\n    if(tolower(dict[i]) != tolower(dict[i])) return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  if(!is.list(dict)) stop(\"The argument must be\
    \ a list.\")\n  if(!length(dict)) stop(\"The argument must be non-empty.\")\n\
    \  for(i in 1:length(dict)) {\n    if(!is.character(dict[i])) stop(\"The keys\
    \ of the dictionary must be strings.\")\n    if(tolower(dict[i]) != tolower(dict[i]))\
    \ stop(\"The keys of the dictionary must be in lower case.\")\n    if(toupper(dict[i])\
    \ != toupper(dict[i])) stop(\"The keys of the dictionary must be in upper case.\"\
    )\n  }\n  return(TRUE)\n}\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers as an argument and returns a vector of numbers that\
    \ is incremented by 1 if the number is even and decremented by 1 if the number\
    \ is odd.\n\nThe function should return NA if the vector is empty.\nExamples:",
  "\n  if(!is.list(dict)) return(FALSE)\n  \n  for(i in 1:length(dict)) {\n    if(!is.character(dict[i]))\
    \ return(FALSE)\n    if(tolower(dict[i]) != tolower(dict[i])) return(FALSE)\n\
    \  }\n  return(TRUE)\n}\n", "\n  if(!is.list(dict)) stop(\"The given dictionary\
    \ is not a list.\")\n  if(!all(sapply(dict, is.character))) stop(\"The given dictionary\
    \ contains non-character elements.\")\n  if(!all(sapply(dict, is.numeric))) stop(\"\
    The given dictionary contains non-numeric elements.\")\n  if(!all(sapply(dict,\
    \ function(x) all(tolower(x) == x))) && \n      !all(sapply(dict, function(x)\
    \ all(toupper(x) == x))) ) \n    stop(\"The given dictionary contains non-lowercase\
    \ or non-uppercase elements.\")\n  return(TRUE)\n}\n", "\n  if(!is.list(dict))\
    \ stop(\"The given dictionary is not a list.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All keys\
    \ in the given dictionary must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All keys\
    \ in the given dictionary must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All keys\
    \ in the given dictionary must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All keys\
    \ in the given dictionary must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All keys\
    \ in the given dictionary must be strings.\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"All keys in the given dictionary must be strings.\")\n  if(!all(sapply(dict,\
    \ is.character))) stop(\"All keys in the given dictionary must be strings.\")\n\
    \  if(!all(sapply(dict, is.character))) stop(\"All keys in the given dictionary\
    \ must be strings.\")\n  if(!all(sapply(dict, is.character))) stop(\"All ", "\n\
    \  if(!is.list(dict)) stop(\"dict must be a list\")\n  if(!all(sapply(dict, is.character)))\
    \ stop(\"dict must only contain characters\")\n  if(!all(sapply(dict, function(x)\
    \ is.character(x) || is.factor(x))))\n    stop(\"dict must only contain characters\
    \ or factors\")\n  if(!all(sapply(dict, function(x) length(unique(x)) < 2))) \n\
    \    stop(\"dict must contain unique values\")\n  if(length(dict) == 0) return\
    \ FALSE\n  if(all(sapply(dict, function(x) is.character(x) || is.factor(x))))\n\
    \    stop(\"dict must only contain characters or factors\")\n  if(all(sapply(dict,\
    \ function(x) length(unique(x)) < 2))) \n    stop(\"dict must contain unique values\"\
    )\n  if(all(sapply(dict, function(x) !is.numeric(x))) && \n      all(sapply(dict,\
    \ function(x) !is.integer(x))))\n    stop(\"dict must contain only numbers\")\n\
    \  if(all(sapply(dict, function(x) length(unique(x)) > 2))) \n    stop(\"dict\
    \ must contain only unique values\")\n  if(all(sapply(dict, function(x) is.numeric(x))\
    \ && \n      all(sapply(dict, function(x) is.integer(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.numeric(x)) &&\
    \ \n      all(sapply(dict, function(x) !is.integer(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.integer(x)) &&\
    \ \n      all(sapply(dict, function(x) is.numeric(x))))) \n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.integer(x)) &&\
    \ \n      all(sapply(dict, function(x) !is.numeric(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.numeric(x)) &&\
    \ \n      all(sapply(dict, function(x) !is.integer(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.integer(x)) &&\
    \ \n      all(sapply(dict, function(x) is.numeric(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.numeric(x)) &&\
    \ \n      all(sapply(dict, function(x) is.integer(x)))))\n    stop(\"dict must\
    \ contain only numbers\")\n  if(all(sapply(dict, function(x) is.numeric(x)) &&\
    \ \n      all(sapply(dict, function(x) !is.integer(x)))))\n    stop", "\n  \n\
    \  # Return True if all keys are strings in lower case or all keys are strings\
    \ in upper case\n  \n  # Return False if the given dictionary is empty\n  \n \
    \ # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty\n  \n\
    \  # Return False if the given dictionary is non-empty\n  \n  # Return False if\
    \ the given dictionary is non-empty\n  \n  # Return False if the given dictionary\
    \ is non-empty\n  \n  # Return False if the given dictionary is non-empty", "\n\
    \  if(!is.list(dict)) stop('The given dictionary is not a list')\n  if(!all(sapply(dict,\
    \ is.character))) stop('All keys in the dictionary must be characters')\n  if(!all(sapply(dict,\
    \ is.character))) stop('All keys in the dictionary must be characters')\n  if(length(dict)\
    \ == 0) return FALSE\n  if(all(sapply(dict, is.character))) return(TRUE)\n  if(all(sapply(dict,\
    \ is.character))) return(TRUE)\n  return(FALSE)\n}\n", "\n  \n  # If dict is empty,\
    \ return False\n  if (length(dict) == 0) return FALSE\n  \n  # If all keys are\
    \ strings in lower case, return True\n  keys <- names(dict)\n  lower <- tolower(keys)\n\
    \  all(lower %in% keys)\n  \n  # If all keys are strings in upper case, return\
    \ True\n  upper <- toupper(keys)\n  all(upper %in% keys)\n}\n", "\n  if(!is.list(dict))\
    \ stop(\"The given dictionary must be a list\")\n  if(!all(names(dict) %in% c(\"\
    lower\", \"upper\"))) stop(\"The given dictionary must contain keys 'lower' and\
    \ 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\"))) stop(\"The\
    \ given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n  if(!all(names(dict)\
    \ %in% c(\"lower\", \"upper\"))) stop(\"The given dictionary must contain keys\
    \ 'lower' and 'upper'\")\n  if(!all(names(dict) %in% c(\"lower\", \"upper\")))\
    \ stop(\"The given dictionary must contain keys 'lower' and 'upper'\")\n", "\n\
    \  if(!is.list(dict) || length(dict) == 0) return FALSE\n  \n  for(i in 1:length(dict))\
    \ {\n    if(!is.character(dict[i])) return(FALSE)\n    if(tolower(dict[i]) !=\
    \ tolower(dict[i])) return(FALSE)\n  }\n  return(TRUE)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
