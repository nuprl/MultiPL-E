name: HumanEval_131_digits
language: r
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n\
  # 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- digits\n    if(!identical(candidate(5),\
  \ 5)){quit('no', 1)}\n    if(!identical(candidate(54), 5)){quit('no', 1)}\n    if(!identical(candidate(120),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(5014), 5)){quit('no', 1)}\n  \
  \  if(!identical(candidate(98765), 315)){quit('no', 1)}\n    if(!identical(candidate(5576543),\
  \ 2625)){quit('no', 1)}\n    if(!identical(candidate(2468), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235000)\n</cell>\n<cell>\ndigits(235001)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the sum of the digits of an integer.\n\
    The function should work for any integer within the range of an integer.\nFor\
    \ example, sumDigits(123) should return 6 + 3 = 9.\n\n\n</text>\n<cell>\nsumDigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  return(sum(n%%10:(n-1)%%10))\n}\n\
    </cell>\n<cell>\nsumDigits(123)\n</cell>\n<cell>\nsumDigits(1235)\n</cell>\n<cell>\n\
    sumDigits(1235000)\n</cell>\n<cell>\nsumDigits(1235001)\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the product of the digits of an integer.\n\
    The function should work for any integer within the range of an integer.\nFor\
    \ example, productDigits(123) should return 3 * 9 = 27.\n\n\n</text>\n<cell>\n\
    productDigits <- function(n) {\n  n <- as.integer(n)\n  return(prod(n%%10:(n-1)%%10))\n\
    }\n</cell>\n<cell>\nproductDigits(123)\n</cell>\n<cell>\nproductDigits(1235)\n\
    </cell>\n<cell>\nproductDigits(1235000)\n</cell>\n<cell>\nproductDigits(1235001)\n\
    </cell>\n<text>\nProblem 5\nWrite a function that checks whether a number is prime.\n\
    A number is prime if it has no positive divisors other than 1 and itself.\nFor\
    \ example, isPrime(12) should return TRUE.\n\n\n</text>\n<cell>\nisPrime <- function(n)\
    \ {\n  n <- as.integer(n)\n  return(all(n %% 1:(n-1) == 0))\n}\n</cell>\n<cell>\n\
    isPrime(12)\n</cell>\n<cell>\nisPrime(13)\n</cell>\n<cell>\nisPrime(123)\n</cell>\n\
    <cell>\nisPrime(1234)\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work if the number is negative.\n<|/ c |>\n<| c |>\nI didn't say it\
    \ wouldn't work. I said it wouldn't work if you tried to call it with a negative\
    \ number.\n<|/ c |>\n<| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| a\
    \ tags=r,integer,math |>\nA solution using gmp:\n<code>\nlibrary(gmp)\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(gmp::mpfr(n,10)*gmp::mpfr(10,10)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,integer,math |>\nA solution using integer\
    \ division and modulo:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(n %% 10 + (n %/% 10) * 10)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the number is negative.\n<|/\
    \ c |>\n<| c |>\nIt does work if you call it with a negative number.\n<|/ c |>\n\
    <| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| a tags=r,integer,math\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(n %% 10 + (n %/% 10) * 10)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work if the number is negative.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. My mistake.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(n %% 10 + (n %/%\
    \ 10) * 10)\n}\n</code>\n<|/ a tags=r,integer,math |>\n<| a dscore=1 |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)))\n}\n", "\n  n <-\
    \ as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2), 0))\n}\n</code>\n\
    <|/ a tags=r,recursion,algorithm |>\n<| a tags=r,recursion,algorithm |>\nHere's\
    \ a recursive solution that doesn't use any packages:\n<code>\ndigits <- function(n)\
    \ {\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n  return(digits(n / 10) *\
    \ 10 + digits(n %% 10))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,algorithm\
    \ |>\nHere's a recursive solution that doesn't use any packages:\n<code>\ndigits\
    \ <- function(n) {\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n  return(digits(n\
    \ / 10) * 10 + digits(n %% 10))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nHere's a recursive solution that doesn't use any packages:\n<code>\ndigits\
    \ <- function(n) {\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n  return(digits(n\
    \ / 10) * 10 + digits(n %% 10))\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a dscore=1 |>\nHere's a recursive solution that doesn't use any packages:\n\
    <code>\ndigits <- function(n) {\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n\
    \  return(digits(n / 10) * 10 + digits(n %% 10))\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a dscore=1 |>\nHere's a recursive solution that doesn't use any packages:\n\
    <code>\ndigits <- function(n) {\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n\
    \  return(digits(n / 10) * 10 + digits(n %% 10))\n}\n</code>\n<|/ a tags=r,recursion,algorithm\
    \ |>\n<| a tags=r,recursion,algorithm |>\nHere's a recursive solution that doesn't\
    \ use any packages:\n<code>\ndigits <- function(n) {\n  if(n == 0) return(0)\n\
    \  if(n == 1) return(1)\n  return(digits(n / 10) * 10 + digits(n %% 10))\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndigits <- function(n) {\n\
    \  if(n == 0) return(0)\n  if(n == 1) return(1)\n  return", "\n  n <- as.integer(n)\n\
    \  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,if-statement |>\nHere's a\
    \ solution using ifelse and grepl:\n<code>\ndigits <- function(n) {\n  ifelse(grepl(\"\
    ^\\\\d+$\", n), as.integer(n), 0)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 ==\
    \ 0, n, 0)\n}\n</code>\n<|/ a tags=r,function,if-statement |>\n<| a dscore=1 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n,\
    \ 0)\n}\n</code>\n<|/ a tags=r,function,if-statement |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 ==\
    \ 0, n, 0)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,if-statement |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n,\
    \ 0)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n, 0)\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  ifelse(n %% 2 == 0, n, 0)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  ifelse(n %% 2 == 0, n, 0)\n}\n</code>\n<|/ a tags=r,function,if-statement |>\n\
    <| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  ifelse(n\
    \ %% 2 == 0, n, 0)\n}\n</code>\n<|/ a tags=r,function,if-statement ", "\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)*10\
    \ + as.integer(n%%100))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,math,algorithm\
    \ |>\n<| c |>\nI like your solution. Can you explain how it works?\n<|/ c |>\n\
    <| c |>\nI added some comments. Hope it helps.\n<|/ c |>\n<| c |>\nI like the\
    \ solution. Can you explain how it works?\n<|/ c |>\n<| c |>\nI added some comments.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI like the solution. Can you explain how\
    \ it works?\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using R's built-in\
    \ functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,math,algorithm\
    \ |>\n<| a dscore=2 |>\nHere's a solution using R's built-in functions:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,math,algorithm |>\n<| a tags=r,math,algorithm |>\nHere's\
    \ a solution using R's built-in functions:\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,math,algorithm |>\nHere's a solution\
    \ using R's built-in functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,math,algorithm |>\nHere's a solution using R's built-in\
    \ functions:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nHere's a solution ", "\n  n <- as.integer(n)\n  if(n ==\
    \ 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n\
    </code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nThanks for your answer!\
    \ I see that your function works perfectly for positive integers, but when I try\
    \ it on negative integers, it returns `NA`. Any idea why this is?\n<|/ c |>\n\
    <| c |>\nIt works for me on negative integers. Are you sure you copied the code\
    \ correctly? It works for me on negative integers as well.\n<|/ c |>\n<| c |>\n\
    Yes, I copied the code correctly. Maybe it's because I'm using R 3.2.2 on Windows\
    \ 10?\n<|/ c |>\n<| c |>\nYes, that could be the problem. R 3.2.2 on Windows 10\
    \ works fine for me. Try updating R and see if that helps.\n<|/ c |>\n<| c |>\n\
    I updated to R 3.2.3 on Windows 10 and it works now. Thanks!\n<|/ c |>\n<| a tags=r,function,if-statement\
    \ |>\nHere's a solution using ifelse():\n<code>\ndigits <- function(n) {\n  ifelse(n\
    \ < 0, 0, prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer! I see that your function works perfectly for positive integers,\
    \ but when I try it on negative integers, it returns `NA`. Any idea why this is?\n\
    <|/ c |>\n<| c |>\nI tested it on negative integers and it worked fine. Are you\
    \ sure you copied the code correctly? It works for me on negative integers as\
    \ well.\n<|/ c |>\n<| c |>\nYes, I copied the code correctly. Maybe it's because\
    \ I'm using R 3.2.2 on Windows 10?\n<|/ c |>\n<| c |>\nYes, that could be the\
    \ problem. R 3.2.2 on Windows 10 works fine for me. Try updating R and see if\
    \ that helps.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using ifelse():\n\
    <code>\ndigits <- function(n) {\n  ifelse(n < 0, 0, prod(n%%2:(n-1)%%2))\n}\n\
    </code>\n<|/ a tags=r,function,if-statement |>\n<| a dscore=1 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- ", "\n    n <- as.integer(n)\n    n <- ifelse(n %%\
    \ 2 == 0, n, 0)\n    n <- ifelse(n %% 3 == 0, n, 0)\n    n <- ifelse(n %% 5 ==\
    \ 0, n, 0)\n    n <- ifelse(n %% 7 == 0, n, 0)\n    n <- ifelse(n %% 11 == 0,\
    \ n, 0)\n    n <- ifelse(n %% 13 == 0, n, 0)\n    n <- ifelse(n %% 17 == 0, n,\
    \ 0)\n    n <- ifelse(n %% 19 == 0, n, 0)\n    n <- ifelse(n %% 23 == 0, n, 0)\n\
    \    n <- ifelse(n %% 25 == 0, n, 0)\n    n <- ifelse(n %% 27 == 0, n, 0)\n  \
    \  n <- ifelse(n %% 29 == 0, n, 0)\n    n <- ifelse(n %% 31 == 0, n, 0)\n    n\
    \ <- ifelse(n %% 33 == 0, n, 0)\n    n <- ifelse(n %% 35 == 0, n, 0)\n    n <-\
    \ ifelse(n %% 37 == 0, n, 0)\n    n <- ifelse(n %% 39 == 0, n, 0)\n    n <- ifelse(n\
    \ %% 41 == 0, n, 0)\n    n <- ifelse(n %% 43 == 0, n, 0)\n    n <- ifelse(n %%\
    \ 45 == 0, n, 0)\n    n <- ifelse(n %% 47 == 0, n, 0)\n    n <- ifelse(n %% 49\
    \ == 0, n, 0)\n    n <- ifelse(n %% 51 == 0, n, 0)\n    n <- ifelse(n %% 53 ==\
    \ 0, n, 0)\n    n <- ifelse(n %% 55 == 0, n, 0)\n    n <- ifelse(n %% 57 == 0,\
    \ n, 0)\n    n <- ifelse(n %% 59 == 0, n, 0)\n    n <- ifelse(n %% 61 == 0, n,\
    \ 0)\n    n <- ifelse(n %% 63 == 0, n, 0)\n    n <- ifelse(n %% 65 == 0, n, 0)\n\
    \    n <- ifelse(n %% 67 == 0, n, 0)\n    n <- ifelse(n %% 69 == 0, n, 0)\n  \
    \  n <- ifelse(n %% 71 == 0, n, 0)\n    n <- ifelse(n %% 73 == 0, n, 0)\n    n\
    \ <- ifelse(n %% 75 == 0, n, 0)\n    n <- ifelse(n %% 77 == 0, n, 0)\n    ", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\n</cell>\n<cell>", "\n \
    \ n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235235)\n</cell>\n<cell>\ndigits(235235235)\n</cell>\n\
    <cell>\ndigits(235235235235)\n</cell>\n<cell>\ndigits(235235235235235)\n</cell>\n\
    <text>\nExercise: Write a function that returns the product of the digits of an\
    \ integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10^(n%%2%%2-1)))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(as.integer(n%%10)*10 + as.integer(n%%100))\n}\n",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 =\
    \ 17.\nFind the sum of all the primes below two million.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 2b\nWrite a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\ndigits(4)\ndigits(235)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the digits of an integer.\n\n\n</text>\n<cell>", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n%%2+1)))\n\
    }\n", "\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n\
    \ <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n  n <- as.integer(n)\n\
    \  n <- as.integer(n)", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the digits of its argument.\
    \ For example:\n>>> digits(123)\n6\n>>> digits(-4)\n0\n\n</text>\n<cell>", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt\
    \ works for negative numbers. Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for\
    \ negative numbers. Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for negative\
    \ numbers. Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ Try `digits(-2)`.\n<|/ c |>\n<| a tags=r |>\nHere is a solution that is more\
    \ efficient than using ifelse. \n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `digits(-2)`.\n\
    <|/ c |>\n<| a tags=r |>\nA simple solution is to use ifelse to return 0 if the\
    \ number is even:\n<code>\ndigits <- function(n) {\n  ifelse(n%%2 == 0, n, 0)\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `digits(-2)`.\n\
    <|/ c |>\n<| a tags=r |>\nHere's a solution using ifelse, which is more efficient\
    \ than using if:\n<code>\ndigits <- function(n) {\n  ifelse(n%%2 == 0, n, 0)\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `digits(-2)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `digits(-2)`.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a solution that is more efficient than using\
    \ ifelse. \n<code>\ndigits <- function(", "\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != 0, n * 10, 0)\n  n <- ifelse(n %%\
    \ 2 != 0, n * 10, 0)\n  n <- ifelse(n %% 2 != ", "\n    n <- as.integer(n)\n \
    \   n <- ifelse(n %% 2 == 0, n, 0)\n    n <- ifelse(n %% 2 != 0, n * 2, n * 3)\n\
    \    n <- ifelse(n %% 2 != 0, n * 3, n * 5)\n    n <- ifelse(n %% 2 != 0, n *\
    \ 5, n * 7)\n    n <- ifelse(n %% 2 != 0, n * 7, n * 9)\n    n <- ifelse(n %%\
    \ 2 != 0, n * 9, n * 11)\n    n <- ifelse(n %% 2 != 0, n * 11, n * 13)\n    n\
    \ <- ifelse(n %% 2 != 0, n * 13, n * 15)\n    n <- ifelse(n %% 2 != 0, n * 15,\
    \ n * 17)\n    n <- ifelse(n %% 2 != 0, n * 17, 0L)\n    return(n)\n}\n</code>\n\
    <|/ a tags=r,function,if-statement |>\n<| a dscore=0 |>\nHere's a solution using\
    \ base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n * 2, n * 3)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 3, n * 5)\n  n <- ifelse(n %% 2 != 0, n * 5, n * 7)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 7, n * 9)\n  n <- ifelse(n %% 2 != 0, n * 9, n * 11)\n  n <-\
    \ ifelse(n %% 2 != 0, n * 11, n * 13)\n  n <- ifelse(n %% 2 != 0, n * 13, n *\
    \ 15)\n  n <- ifelse(n %% 2 != 0, n * 15, n * 17)\n  n <- ifelse(n %% 2 != 0,\
    \ n * 17, 0L)\n  return(n)\n}\n</code>\n<|/ a tags=r,function,if-statement |>\n\
    <| a dscore=0 |>\nHere's a solution using dplyr and purrr:\n<code>\nlibrary(dplyr)\n\
    library(purrr)\n\ndigits <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n * 2, n * 3)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 3, n * 5)\n  n <- ifelse(n %% 2 != 0, n * 5, n * 7)\n  n <- ifelse(n\
    \ %% 2 != 0, n * 7, ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10\
    \ + n%%2)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10\
    \ + n%%2)\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of all even integers less than or equal to n.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of all the even digits in a given number.\n\
    \n\n</text>\n<cell>", "\n    n <- as.integer(n)\n    n <- ifelse(n %% 2 == 0,\
    \ n, 0)\n    n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n    n <- ifelse(n %% 3 ==\
    \ 0, n * 3, n * 5)\n    n <- ifelse(n %% 5 == 0, n * 5, n * 7)\n    n <- ifelse(n\
    \ %% 7 == 0, n * 7, n * 9)\n    return(n)\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work. Try it with `digits(1)`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ Thanks for pointing that out. I've edited my answer to fix it.\n<|/ c |>\n<|\
    \ c |>\nThe `ifelse` statements could be replaced with `n <- ifelse(n %% 2 ==\
    \ 0, n, 0)`\n<|/ c |>\n<| c |>\nYes, that would work as well. Thanks for pointing\
    \ that out. I've edited my answer to reflect that.\n<|/ c |>\n<| a tags=r |>\n\
    Here's a solution using gmp:\n<code>\nlibrary(gmp)\n\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2\
    \ == 1, n * 2, n * 3)\n  n <- ifelse(n %% 3 == 0, n * 3, n * 5)\n  n <- ifelse(n\
    \ %% 5 == 0, n * 5, n * 7)\n  n <- ifelse(n %% 7 == 0, n * 7, n * 9)\n  return(n)\n\
    }\n\ndigits(1)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n</code>\n<|/ a tags=r,factorial,algorithm |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n == 0){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n\
    <code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n  return(n\
    \ * factorial(n-1))\n}\n</code>\n<|/ a tags=r,factorial,algorithm |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\n\
    factorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n  return(n * factorial(n-1))\n\
    }\n</code>\n<|/ a tags=r,factorial,algorithm dscore=3 |>\n<| a tags=r,factorial,algorithm\
    \ |>\n<code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n \
    \ return(n * factorial(n-1))\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    <code>\nfactorial <- function(n){\n  if(n <= 1){\n    return(1)\n  }\n  return(n\
    \ * factorial(n-1))\n}", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6\nHint: Use a recursive function.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it\
    \ can be simplified to `prod(n%%10:(n%%10+9))`\n<|/ c |>\n<| c |>\nYes, I agree.\
    \ I was just trying to show a more general approach to solving this problem that\
    \ would also work for negative numbers. I edited my answer to reflect this.\n\
    <|/ c |>\n<| a tags=r,integer,product |>\nHere's a solution using gmp:\n<code>\n\
    library(gmp)\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nHere's a solution using RcppGMP:\n<code>\nlibrary(RcppGMP)\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a tags=r,integer,product |>\n\
    Here's a solution using RcppGMP:\n<code>\nlibrary(RcppGMP)\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using RcppGMP:\n\
    <code>\nlibrary(RcppGMP)\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a tags=r,integer,product |>\nHere's a solution using RcppGMP:\n<code>\n\
    library(RcppGMP)\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>", "\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n\
    \  n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without using ifelse.\n<|/ c |>\n<| c |>\nI added a solution without `ifelse`.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution without ifelse:\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n \
    \ n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n<|/ a tags=r,integer,digits\
    \ |>\n<| a tags=r,integer,digits dscore=2 |>\nHere's a solution without ifelse:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 ==\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n\
    <|/ a |>\n<| a tags=r,integer,digits |>\n<code>\ndigits <- function(n) {\n  n\
    \ <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 ==\
    \ 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n %%\
    \ 2 == 0, n, 0)\n  n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n\
    <|/ a tags=r,integer,digits |>\n<| a tags=r,integer,digits |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 == 0, n, 0)\n \
    \ n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n  return(n)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  n <- ifelse(n %% 2 == 0, n, 0)\n  n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n\
    \  return", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 ==\
    \ 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks for your answer! I appreciate it. I was wondering if there is a way to\
    \ do this without using any packages. I guess this would require some sort of\
    \ recursive function.\n<|/ c |>\n<| c |>\nI added a recursive solution. Hope it\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I appreciate it. I was wondering\
    \ if there is a way to do this without using any packages. I guess this would\
    \ require some sort of recursive function.\n<|/ c |>\n<| c |>\nI added a recursive\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I appreciate\
    \ it. I was wondering if there is a way to do this without using any packages.\
    \ I guess this would require some sort of recursive function.\n<|/ c |>\n<| a\
    \ tags=r,recursion,algorithm |>\nHere's a recursive solution:\n<code>\ndigits\
    \ <- function(n) {\n  if(n <= 0) return(0)\n  if(n %% 2 == 0) return(0)\n  return(digits(n-1)*10\
    \ + digits(n%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it. I was wondering if there is a way to do this without using\
    \ any packages. I guess this would require some sort of recursive function.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution. Hope it helps.\n<|/ c |>\n<|\
    \ a tags=r,recursion,algorithm |>\n<code>\ndigits <- function(n) {\n  if(n <=\
    \ 0) return(0)\n  if(n %% 2 == 0) return(0)\n  return(digits(n-1)*10 + digits(n%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I appreciate it.\
    \ I was wondering if there is a way to do this without using any packages. I guess\
    \ this would require some sort of recursive function.\n<|/ c |>\n<| a tags=r,recursion,algorithm\
    \ |>\n<code>\ndigits <- function(n) {\n  if(n <= 0) return(0)\n  if(n %% 2 ==\
    \ 0) return(0)\n  return(digits(n-1)*10 + digits(n%%2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nFor example, digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n\
    <|/ a tags=r,integer,product |>\n<| c |>\nI like your solution, but I wonder if\
    \ there is a way to do it without using any packages.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without packages.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ using only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a |>\nHere's a solution using only base R:\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n\
    <|/ a dscore=2 tags=r,integer,product |>\n<| a dscore=2 |>\nHere's a solution\
    \ using only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a tags=r,integer,product |>\nHere's a solution using only base R:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using only\
    \ base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==0)))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| a dscore=1 |>\nHere's a solution\
    \ using only base R:\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  return(as.integer(n%%10^(n%%10%%2==0)))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a tags=r,integer,product |>\nHere's a solution using only base R:\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of all the digits in an integer.\n\n\n\
    </text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235235)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the sum of the digits of an integer n using recursion.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235000)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of its\
    \ argument. For example:\n>>> digits(235)\n15\n>>> digits(235000)\n10\n>>> digits(235001)\n\
    11\n>>> digits(235002)\n12\n>>> digits(235003)\n13\n>>> digits(235004)\n14\n>>>\
    \ digits(235005)\n15\n>>> digits(235006)\n16\n>>> digits(235007)\n17\n>>> digits(235008)\n\
    18\n>>> digits(235009)\n19\n>>> digits(2350010)\n20\n>>> digits(2350011)\n21\n\
    >>> digits(2350012)\n22\n>>> digits(2350013)\n23\n>>> digits(2350014)\n24\n>>>\
    \ digits(2350015)\n25\n>>> digits(2350016)\n26\n>>> digits(2350017)\n27\n>>> digits(2350018)\n\
    28\n>>> digits(2350019)\n29\n>>> digits(2350020)\n30\n>>> digits(2350021)\n31\n\
    >>> digits(2350022)\n32\n>>> digits(2350023)\n33\n>>> digits(2350024)\n34\n>>>\
    \ digits(2350025)\n35\n>>> digits(2350026)\n36\n>>> digits(2350027)\n37\n>>> digits(2350028)\n\
    38\n>>> digits(2350029)\n39\n>>> digits(2350030)\n40\n>>> digits(2350031)\n41\n\
    >>> digits(2350032)\n42\n>>> digits(2350033)\n43\n>>> digits(2350034)\n44\n>>>\
    \ digits(2350035)\n45\n>>> digits(2350036)\n46\n>>> digits(2350037)\n47\n>>> digits(2350038)\n\
    48\n>>> digits(2350039)\n49\n>>> digits(2350040)\n50\n>>> digits(2350041)", "\n\
    \  n <- as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2), 0))\n}\n",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function,loops |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,loops |>\n<| a dscore=1 |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,loops |>\n<| a tags=r,function,loops |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,loops |>\n<| a tags=r,function,loops |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,loops |>\n<code>\ndigits <-\
    \ function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,loops ", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the digits of an integer.\nFor example,\
    \ digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  return(ifelse(n %% 2 == 0, n * digits(n / 2),\
    \ 0))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235000)\n\
    </cell>\n<cell>\ndigits(235001)\n</cell>\n<cell>\ndigits(235002)\n</cell>\n<cell>\n\
    digits(235003)\n</cell>\n<cell>\ndigits(235004)\n</cell>\n<cell>\ndigits(235005)\n\
    </cell>\n<cell>\ndigits(235006)\n</cell>\n<cell>\ndigits(235007)\n</cell>\n<cell>\n\
    digits(235008)\n</cell>\n<cell>\ndigits(235009)\n</cell>\n<cell>\ndigits(235101)\n\
    </cell>\n<cell>\ndigits(235102)\n</cell>\n<cell>\ndigits(235103)\n</cell>\n<cell>\n\
    digits(235104)\n</cell>\n<cell>\ndigits(235105)\n</cell>\n<cell>\ndigits(235106)\n\
    </cell>\n<cell>\ndigits(235107)\n</cell>\n<cell>\ndigits(235108)\n</cell>\n<cell>\n\
    digits(235109)\n</cell>\n<cell>\ndigits(235111)\n</cell>\n<cell>\ndigits(235112)\n\
    </cell>\n<cell>\ndigits(235113)\n</cell>\n<cell>\ndigits(235114)\n</cell>\n<cell>\n\
    digits(235115)\n</cell>\n<cell>\ndigits(235116)\n</cell>\n<cell>\ndigits(235117)\n\
    </cell>\n<cell>\ndigits(235118)\n</cell>\n<cell>\ndigits(235119)\n</cell>\n<cell>\n\
    digits(235120)\n</cell>\n<cell>\ndigits(235121)\n</cell>\n<cell>\ndigits(235122)\n\
    </cell>\n<cell>\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10) * as.integer(n%%10)/10)\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of all integers\
    \ up to and including n.\nThe function should take one argument, n, which should\
    \ be a positive integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of its input. \nFor example, digits(235) returns 15, and digits(23500) returns\
    \ 50.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. I was trying to avoid loops because I thought it would\
    \ be more efficient to vectorize this operation. I'm still not quite sure how\
    \ to do that though.\n<|/ c |>\n<| c |>\nI added a vectorized solution to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nHere's a vectorized solution:\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,vectorization,integer\
    \ |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a tags=r,vectorization,integer |>\n<| a tags=r,vectorization,integer |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,vectorization,integer |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,vectorization,integer |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,vectorization,integer |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation of what your code does and how it solves the\
    \ problem of the question. Answer", "\n  n <- as.integer(n)\n  return(ifelse(n\
    \ %% 2 == 0, n * digits(n / 2), 0))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n\
    </cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n ==\
    \ 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(2*n+1)/2)\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| c |>\nI like your use of modulo and multiplication. Very elegant. Thanks!\n\
    <|/ c |>\n<| c |>\nI like your use of modulo and multiplication. Very elegant.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulo and multiplication. Very\
    \ elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulo and multiplication.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulo and multiplication.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| a tags=r,integer,product |>\nHere's a solution\
    \ using gmp:\n<code>\nlibrary(gmp)\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/\
    \ a dscore=4 |>\n<| c |>\nI like your use of modulo and multiplication. Very elegant.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulo and multiplication. Very\
    \ elegant. Thanks!\n<|/ c |>\n<| c |>\nI like your use of modulo and multiplication.\
    \ Very elegant. Thanks!\n<|/ c |>\n<| a dscore=4 |>\nHere's a solution using gmp:\n\
    <code>\nlibrary(gmp)\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| a dscore=4 |>\nHere's a solution using Rmpfr:\n<code>\nlibrary(Rmpfr)\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(mpfr(n%%10:(n%%10)%%2))\n\
    }\n</code>\n<|/ a tags=r,integer,product |>\n<| c |>\nI like your use of modulo\
    \ and multiplication. ", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%10:(n%%10)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235235)\n\
    </cell>\n<cell>\ndigits(235235235)\n</cell>\n<cell>\ndigits(235235235235)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the digits of an integer.\n\
    For example, digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10 + n%%2)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nThe Fibonacci sequence is defined by the formula:\n\
    \n$$Fn = \\begin{cases}\n1 & n = 0\\\n1 & n = 1 \\\nF{n-1} + F_{n-2} & n > 1\n\
    \\end{cases}$$\n\nwhere $F_n$ is the n-th number in the Fibonacci sequence.\n\
    The first two terms, $F_0=1$ and $F_1=1$, are not included in the Fibonacci sequence,\
    \ and are therefore called \"the initial two terms\".\n\nBy convention, 0 and\
    \ 1 are written $F_0$ and $F_1$.\n\nBy considering the terms in the Fibonacci\
    \ sequence whose values do not exceed four million, find the sum of the even-valued\
    \ terms.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0)\
    \ return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n}\n</code>\n<|/ a tags=r,integer,product\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-4)` returns `0`\
    \ instead of `-1`.\n<|/ c |>\n<| c |>\nI added a check for negative numbers. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `digits(-4)` returns `0` instead of `-1`.\n<|/ c |>\n<| c |>\nI added a check\
    \ for negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a |>\nA simple\
    \ recursive function will do the trick:\n<code>\ndigits <- function(n) {\n  if(n\
    \ <= 0) return(0)\n  if(n %% 10 == 0) return(n)\n  return(digits(n %% 10) * 10\
    \ + n %% 10)\n}\n</code>\n<|/ a dscore=5 tags=r,integer,product |>\n<| c |>\n\
    This doesn't work for negative numbers. `digits(-4)` returns `0` instead of `-1`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `digits(-4)` returns\
    \ `0` instead of `-1`.\n<|/ c |>\n<| a tags=r,integer,product |>\nA recursive\
    \ function will do the trick:\n<code>\ndigits <- function(n) {\n  if(n <= 0) return(0)\n\
    \  if(n %% 10 == 0) return(n)\n  return(digits(n %% 10) * 10 + n %% 10)\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=r,integer,product |>\n<code>\ndigits <- function(n){\n\
    \  if(n<0) return(0)\n  if(n==0) return(1)\n  return(digits(n%/%10) * 10 + n%%10)\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,integer,product |>\nA recursive function\
    \ will do the trick:\n<code>\ndigits <- function(n) {\n  if(n <= 0) return(0)\n\
    \  if(n %% 10 == 0) return(n)\n  return(digits(n %% 10) * 10 + n %% 10)\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\ndigits <- function(n) {\n  if(n<0)\
    \ return(0)\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%10:(n%%10+9)))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer in base 10.\nFor example, digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n\
    <cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n", "\n    n <- as.integer(n)\n    n <- ifelse(n\
    \ %% 2 == 0, n, 0)\n    n <- ifelse(n %% 2 == 1, n * 2, n * 3)\n    n <- ifelse(n\
    \ %% 3 == 0, n * 3, n * 5)\n    n <- ifelse(n %% 5 == 0, n * 5, n * 7)\n    n\
    \ <- ifelse(n %% 7 == 0, n * 7, n * 9)\n    n <- ifelse(n %% 9 == 0, n * 9, n\
    \ * 11)\n    n <- ifelse(n %% 11 == 0, n * 11, n * 13)\n    n <- ifelse(n %% 13\
    \ == 0, n * 13, n * 15)\n    n <- ifelse(n %% 15 == 0, n * 15, n * 17)\n    n\
    \ <- ifelse(n %% 17 == 0, n * 17, 0)\n    return(n)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <text>\nProblem 7: Factorial\nA factorial is a number multiplied by all previous\
    \ numbers. For example, 6! = 6 x 5 x 4 x 3 x 2 = 120.\nWrite a function that takes\
    \ an integer and returns the factorial of that number.\nFor example, factorial(5)\
    \ = 5 x 4 x 3 x 2 = 120.\n\n\n</text>\n<cell>\nfactorial <- function(n) {\n  n\
    \ <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(n*factorial(n-1))\n}\n\
    </cell>\n<cell>\nfactorial(5)\n</cell>\n<text>\nProblem 8: Fibonacci\nA fibonacci\
    \ sequence is a sequence of numbers where each number is the sum of the two preceding\
    \ ones. For example, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\nWrite a function\
    \ that takes an integer and returns the fibonacci of that number.\nFor example,\
    \ fibonacci(8) = 8 x 5 x 4 x 3 x 2 = 192.\n\n\n</text>\n<cell>\nfibonacci <- function(n)\
    \ {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(fibonacci(n-1)\
    \ + fibonacci(n-2))\n}\n</cell>\n<cell>\nfibonacci(8)\n</cell>\n<text>\nProblem\
    \ 9: Fibonacci Sequence\nWrite a function that takes an integer and returns the\
    \ nth fibonacci number.\nFor example, fibonacci(8) = 8 x 5 x 4 x 3 x 2 = 192.\n\
    \n\n</text>\n<cell>\nfibonacci <- function(n) {\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(fibonacci(n-1) + fibonacci(n-2))\n}\n</cell>\n<cell>\n\
    fibonacci(8)\n</cell>\n<text>\nProblem 10: Prime Numbers\nA prime number (or a\
    \ prime) is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.\nWrite a function that takes an integer and returns the prime\
    \ number if that integer is greater than 1, otherwise returns 0.\nFor example,\
    \ prime(", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nHere's a solution that uses purrr::reduce and purrr::map.\n<code>\nlibrary(purrr)\n\
    \ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  return(reduce(n, `*`, 2))\n}\n\ndigits(1)", "\n  n <- as.integer(n)\n\
    \  if(n %% 2 == 0) return(0)\n  return(n %/% 2)\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  return(as.integer(n%%10^(n%%10%%2==1)))\n}\n",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 1) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10)\
    \ * as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%10:(n%%10+9)))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of all even digits\
    \ in a given number.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function,if-statement\
    \ |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a tags=r,function,if-statement |>\n<code>\ndigits <- function(n) {\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,if-statement |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\ndigits <- function(n) {\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%2:(n-1)%%2))\n}\n</code>\n<|/ a tags=r,function,if-statement\
    \ |>\n<| c |>\nPlease add some explanation to ", "\n  n <- as.integer(n)\n  return(ifelse(n\
    \ %% 2 == 0, n * digits(n / 2), 0))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235000)\n\
    </cell>\n<text>\nProblem 3\nThe Fibonacci sequence is defined by the formula:\n\
    Fn = F(n-1) + F(n-2) for n > 1.\nFor example, F(3) = F(2) + F(1) = F(4) + F(3)\
    \ = F(5) + F(6) = F(7) + F(5) + F(4)\nThe first few terms of the sequence are:\n\
    F(0) = 0, F(1) = 1\nFor n > 1, F(n) = F(n-1) + F(n-2), where F(0) = F(1) = 0 and\
    \ F(1) = 1.\nFor example, F(10) = F(9) + F(8) = F(7) + F(6) + F(5) = F(4) + F(3)\
    \ + F(2) = F(3) + F(4) + F(5) + F(6) = F(7) + F(5) + F(4) + F(3) + F(2)\nHence\
    \ the first few terms of the Fibonacci sequence are:\nF(0) = 0, F(1) = 1\nF(2)\
    \ = F(1) + F(0) = 1 + 0 = 1\nF(3) = F(2) + F(1) = 1 + 1 = 2\nF(4) = F(3) + F(2)\
    \ = 2 + 1 = 3\nF(5) = F(4) + F(3) = 3 + 2 = 5\nF(6) = F(5) + F(4) = 5 + 3 = 8\n\
    F(7) = F(6) + F(5) = 8 + 5 = 13\nF(8) = F(7) + F(6) = 13 + 8 = 21\nF(9) = F(8)\
    \ + F(7) = 21 + 13 = 44\nF(10) = F(9) + F(8) = 44 + 21 = 89\nHence the first few\
    \ terms of the Fibonacci sequence are:\nF(0) = 0, F(1) = 1\nF(2) = F(1) + F(0)\
    \ = 1 + 0 = 1\nF(3) = F(2) + F(1) = 1 + 1 = 2\nF(4) = F(3) + F(2) = 2 + 1 = 3\n\
    F(5) = F(4) + F(3) = 3 + 2 = 5\nF(6) = F(5) + F(4) = 5 + 3 = 8\nF(7) = F(6) +\
    \ F(5) = 8", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer in base 10.\nFor example, digits(12) should return 3 + 4 = 6.\n\
    \n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n    n <- as.integer(n)\n    n <- ifelse(n %% 2 == 0, n, 0)\n    n <-\
    \ ifelse(n %% 3 == 0, n * 3, 0)\n    n <- ifelse(n %% 5 == 0, n * 5, 0)\n    n\
    \ <- ifelse(n %% 7 == 0, n * 7, 0)\n    n <- ifelse(n %% 11 == 0, n * 11, 0)\n\
    \    n <- ifelse(n %% 13 == 0, n * 13, 0)\n    n <- ifelse(n %% 17 == 0, n * 17,\
    \ 0)\n    n <- ifelse(n %% 19 == 0, n * 19, 0)\n    n <- ifelse(n %% 23 == 0,\
    \ n * 23, 0)\n    n <- ifelse(n %% 29 == 0, n * 29, 0)\n    n <- ifelse(n %% 31\
    \ == 0, n * 31, 0)\n    n <- ifelse(n %% 37 == 0, n * 37, 0)\n    n <- ifelse(n\
    \ %% 41 == 0, n * 41, 0)\n    n <- ifelse(n %% 43 == 0, n * 43, 0)\n    n <- ifelse(n\
    \ %% 47 == 0, n * 47, 0)\n    n <- ifelse(n %% 53 == 0, n * 53, 0)\n    n <- ifelse(n\
    \ %% 59 == 0, n * 59, 0)\n    n <- ifelse(n %% 61 == 0, n * 61, 0)\n    n <- ifelse(n\
    \ %% 67 == 0, n * 67, 0)\n    n <- ifelse(n %% 71 == 0, n * 71, 0)\n    n <- ifelse(n\
    \ %% 73 == 0, n * 73, 0)\n    n <- ifelse(n %% 79 == 0, n * 79, 0)\n    n <- ifelse(n\
    \ %% 83 == 0, n * 83, 0)\n    n <- ifelse(n %% 89 == 0, n * 89, 0)\n    n <- ifelse(n\
    \ %% 97 == 0, n * 97, 0)\n    n <- ifelse(n %% 101 == 0, n * 101, 0)\n    n <-\
    \ ifelse(n %% 103 == 0, n * 103, 0)\n    n <- ifelse(n %% 107 == 0, n * 107, 0)\n\
    \    n <- ifelse(n %% 111 == 0, n * 111, 0)\n    n <- ifelse(n %% 115 == 0, n\
    \ * 115, 0)\n    n <- ifelse(n %% 119 == 0, n * 119, 0)\n    n <- ifelse(n %%\
    \ 121 == 0, n * 121, 0)\n    n <- ifelse(n %% 123 == 0, n * 12", "\n  n <- as.integer(n)\n\
    \  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n</cell>\n<cell>\n\
    digits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nFor example, digits(123) = 1 + 2 + 3 = 6.\n\n\n</text>\n<cell>", "\n\
    \  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2+1)))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*(2*n+1)-1)\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%%%2:(n%%%%2+1)))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n\
    <cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\n\
    digits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n\
    <cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the digits\
    \ of an integer.\nThe function should work for any integer from 1 to 9 inclusive.\n\
    For example:\n>>> digits_sum(123)\n6\n>>> digits_sum(1234)\n10\n>>> digits_sum(12345)\n\
    15\n>>> digits_sum(123456789)\n20\n>>> digits_sum(1234567890)\n20\n>>> digits_sum(12345678901)\n\
    20\n>>> digits_sum(123456789012)\n20\n>>> digits_sum(1234567890123)\n20\n>>> digits_sum(12345678901234)\n\
    20\n>>> digits_sum(123456789012345)\n20\n>>> digits_sum(12345678901234567)\n20\n\
    >>> digits_sum(123456789012345678)\n20\n>>> digits_sum(1234567890123456788)\n\
    20\n>>> digits_sum(12345678901234567889)\n20\n>>> digits_sum(123456789012345678899)\n\
    20\n>>> digits_sum(1234567890123456788999)\n20\n>>> digits_sum(12345678901234567889999)\n\
    20\n>>> digits_sum(123456789012345678899999)\n20\n>>> digits_sum(1234567890123456788999999)\n\
    20\n>>> digits_sum(12345678901234567889999999)\n20\n>>> digits_sum(1234567890123456788999999999)\n\
    20\n>>> digits_sum(12345678901234567889999999999)\n20\n>>> digits_sum(12345678901234567889999999999999)\n\
    20\n>>> digits_sum(123456789012345678899999999999998)\n20\n>>> digits_sum(1234567890123456788999999999999987)\n\
    20\n>>> digits_sum(12345678901234567889999999999999876)\n20\n>>> digits_sum(123456789012345678899999999999998765)\n\
    20\n>>> digits_sum(1234567890123456788999999999999987654)\n20\n>>> digits_sum(12345678901234567889999999999999876543)\n\
    20\n>>> digits_sum(123456789012345678899999999999998765432)\n20\n>>> digits_sum(1234567890123456788999999999999987654321)\n",
  "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</code>\n<|/ a tags=r,function,loops |>\n<| c |>\nThanks for your answer! I\
    \ tried to run it but got this error message: Error in prod(n%%2:(n-1)%%2) : non-numeric\
    \ argument to binary operator\n<|/ c |>\n<| c |>\nI edited my answer to fix the\
    \ error. There was a typo in the `prod` function.\n<|/ c |>\n<| c |>\nThanks again!\
    \ I still get this error message: Error in prod(n%%2:(n-1)%%2) : non-numeric argument\
    \ to binary operator\n<|/ c |>\n<| c |>\nI edited my answer to fix the error.\
    \ There was a typo in the `prod` function.\n<|/ c |>\n<| a |>\nThis can be done\
    \ with base R by using the fact that prod() can handle vectors:\n<code>\ndigits\
    \ <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 ==\
    \ 0) return(0)\n  prod(n%%2:(n-1)%%2)\n}\n</code>\n<|/ a tags=r,function,loops\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\ndigits <- function(n) {\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  prod(n%%2:(n-1)%%2)\n}\n\
    </code>\n<|/ a tags=r,function,loops |>\n<| a tags=r,function,loops |>\n<code>\n\
    digits <- function(n) {\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2\
    \ == 0) return(0)\n  prod(n%%2:(n-1)%%2)\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:n%%10))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%%%2:(n%%%%2)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\n\
    digits(4)\n</cell>\n<cell>\ndigits(235)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the digits of an integer.\n\n\n</text>\n<cell>",
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10 + n%%2)\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 !=\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n\
    \  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 !=\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n\
    \  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 !=\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n\
    \  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 !=\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n\
    \  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n\
    \ %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 !=\
    \ 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)\n\
    \  n <- ifelse(n %% 2 != 0, n, 0)\n  n <- ifelse(n %% 2 != 0, n, 0)", "\n  n <-\
    \ as.integer(n)\n  if(n == 0) return(0)\n  if(n%%2 == 1) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n", "\n    n <- as.integer(n)\n    n <- ifelse(n %% 2 == 0, n, 0)\n    n <-\
    \ ifelse(n %% 2 == 1, n * 2, n * 3)\n    n <- ifelse(n %% 3 == 0, n * 3, n * 5)\n\
    \    n <- ifelse(n %% 5 == 0, n * 5, n * 7)\n    n <- ifelse(n %% 7 == 0, n *\
    \ 7, n * 9)\n    n <- ifelse(n %% 9 == 0, n * 9, n * 11)\n    n <- ifelse(n %%\
    \ 11 == 0, n * 11, n * 13)\n    n <- ifelse(n %% 13 == 0, n * 13, n * 15)\n  \
    \  n <- ifelse(n %% 15 == 0, n * 15, n * 17)\n    n <- ifelse(n %% 17 == 0, n\
    \ * 17, 0)\n    return(n)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(as.integer(n%%10^(n
  "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(as.integer(n%%10) *\
    \ as.integer(n%%10)/10)\n}\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n\
    \  return(prod(n%%%%2:(n-1)%%2))\n}\n</cell>\n<cell>\ndigits(1)\ndigits(4)\ndigits(235)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the digits\
    \ of an integer.\n\n\n</text>\n<cell>", "\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n\
    \    n <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)\n    n\
    \ <- as.integer(n)\n    n <- as.integer(n)\n    n <- as.integer(n)", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235235)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the digits of an integer.\n\n\n</text>\n<cell>", "\n  n <-\
    \ as.integer(n)\n  if(n%%2 == 0) return(n)\n  return(digits(n-1)*10 + n%%2)\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%10:(n%%10)%%2))\n\
    }\n", "\n  n <- as.integer(n)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n\
    }\n</cell>\n<cell>\ndigits(1)\n</cell>\n<cell>\ndigits(4)\n</cell>\n<cell>\ndigits(235)\n\
    </cell>\n<cell>\ndigits(235235)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the digits of an integer.\nThe function should work for any\
    \ positive integer.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if(n%%2\
    \ == 0) return(0)\n  return(prod(n%%2:(n-1)%%2))\n}\n", "\n  n <- as.integer(n)\n\
    \  if(n == 0) return(0)\n  if(n%%2 == 0) return(0)\n  return(prod(n%%%%2:(n-1)%%2))\n\
    }\n"]
stop_tokens:
- "\n#"
- "\n```"
