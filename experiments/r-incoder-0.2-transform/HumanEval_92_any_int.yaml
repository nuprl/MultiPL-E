name: HumanEval_92_any_int
language: r
prompt: "# Create a function that takes 3 numbers.\n# Returns true if one of the numbers\
  \ is equal to the sum of the other two, and all numbers are integers.\n# Returns\
  \ false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n# >>> any_int(3,\
  \ 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6, -2.2, 2)\n\
  # FALSE\nany_int <- function(x, y, z) {"
tests: "test_humaneval <- function() {\ncandidate <- any_int\n    if(!identical(candidate(2,\
  \ 3, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2.5, 2, 3), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(1.5, 5, 3.5), FALSE)){quit('no', 1)}\n    if(!identical(candidate(2,\
  \ 6, 2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4, 2, 2), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(2.2, 2.2, 2.2), FALSE)){quit('no', 1)}\n    if(!identical(candidate(-4,\
  \ 6, 2), TRUE)){quit('no', 1)}\n    if(!identical(candidate(2, 1, 1), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate(3, 4, 7), TRUE)){quit('no', 1)}\n    if(!identical(candidate(3.0,\
  \ 4, 7), FALSE)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(\n    is.integer(x) & is.integer(y) &\n    is.integer(z)\
    \ & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n    x != 0 & y != 0 & z !=\
    \ 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf & z !=\
    \ -Inf &\n    x != NaN & y != NaN & z != NaN &\n    x != Inf & y != Inf & z !=\
    \ Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != NaN & y != NaN & z\
    \ != NaN &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf &\
    \ z != -Inf &\n    x != NaN & y != NaN & z != NaN &\n    x != Inf & y != Inf &\
    \ z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != NaN & y != NaN\
    \ & z != NaN &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != NaN & y != NaN & z != NaN &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != NaN & y != NaN\
    \ & z != NaN &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != NaN & y != NaN & z != NaN &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != NaN & y != NaN\
    \ & z != NaN &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf ",
  "\n  return(\n    is.integer(x) & is.integer(y) &\n    is.integer(z) & x == y +\
    \ z\n  )\n}\n", "\n  return(\n    is.integer(x) & is.integer(y) &\n    is.integer(z)\
    \ & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n    x != 0 & y != 0 & z !=\
    \ 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf & z !=\
    \ -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf & z\
    \ != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf &\
    \ z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y != -Inf\
    \ & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n", "\n  any(x == y | x\
    \ == z | y == z)\n}\n", "\n  any(x != y | x != z | y != z)\n}\n", "\n  any(x !=\
    \ y | x != z | y != z)\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n   \
    \ x != 0 & y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf\
    \ & y != -Inf & z != -Inf &\n    x != Inf & y != Inf & z != Inf &\n", "\n  any(x\
    \ != y | x != z | y != z)\n}\n", "\n  any(x != y | x != z | y != z)\n}\n", "\n\
    \  return(\n    all(\n      is.integer(x),\n      is.integer(y),\n      is.integer(z),\n\
    \      x == y,\n      x + y == z\n    )\n  )\n}\n", "\n  any(x != y | x != z |\
    \ y != z)\n}\n", "\n  return(\n    is.numeric(x) & is.numeric(y) & is.numeric(z)\
    \ & \n    is.integer(x) & is.integer(y) &\n    is.integer(z) & \n    x != 0 &\
    \ y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y !=\
    \ -Inf & z != -Inf\n  )\n}\n</cell>\n<text>\nThe function any_int checks if any\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \n\n</text>\n<cell>", "\n  any(x != y | x != z | y != z)\n}\n", "\n  return(\n\
    \    all(\n      is.integer(x) & is.integer(y) & is.integer(z),\n      x != 0\
    \ & y != 0 & z != 0,\n      x + y == z\n    )\n  )\n}\n", "\n  any(x != y | x\
    \ != z | y != z)\n}\n", "\n  return(\n    is.integer(x) & is.integer(y) &\n  \
    \  is.integer(z) & is.numeric(x) & is.numeric(y) & is.numeric(z) &\n    x != 0\
    \ & y != 0 & z != 0 &\n    x != Inf & y != Inf & z != Inf &\n    x != -Inf & y\
    \ != -Inf & z != -Inf\n  )\n}\n", "\n  return(\n    is.integer(x) & is.integer(y)\
    \ &\n    is.integer(z) & x == y & x == z & y != z\n  )\n}\n", "\n  return(\n \
    \   is.integer(x) & is.integer(y) &\n    is.integer(z) & is.numeric(x) & is.numeric(y)\
    \ & is.numeric(z) &\n    x != 0 & y != 0 & z != 0 &\n    x != Inf & y != Inf &\
    \ z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n    x != -Inf & y != -Inf & z != -Inf &\n    x != Inf & y != Inf\
    \ & z != Inf &\n", "\n  x <- as.integer(x)\n  y <- as.integer(y)\n  z <- as.integer(z)\n\
    \  return(x %in% c(y, z) & y %in% c(x, z) & z %in% c(x, y))\n}\n", "\n  x <- as.integer(x)\n\
    \  y <- as.integer(y)\n  z <- as.integer(z)\n  return(x %in% c(y, z) & y %in%\
    \ c(x, z) & z %in% c(x, y))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
