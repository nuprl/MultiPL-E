name: HumanEval_19_sort_numbers
language: r
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers('three one five')\n# 'one three five'\nsort_numbers\
  \ <- function(numbers) {"
tests: "test_humaneval <- function() {\ncandidate <- sort_numbers\n    if(!identical(candidate(''),\
  \ '')){quit('no', 1)}\n    if(!identical(candidate('three'), 'three')){quit('no',\
  \ 1)}\n    if(!identical(candidate('three five nine'), 'three five nine')){quit('no',\
  \ 1)}\n    if(!identical(candidate('five zero four seven nine eight'), 'zero four\
  \ five seven eight nine')){quit('no', 1)}\n    if(!identical(candidate('six five\
  \ four three two one zero'), 'zero one two three four five six')){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  paste(numbers, collapse = \" \")\n}\n", "\n  numbers <- strsplit(numbers, \"\
    \ \")[[1]]\n  numbers <- sort(numbers)\n  numbers <- paste(numbers, collapse =\
    \ \" \")\n  return(numbers)\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ seem to work. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| a tags=r |>\nHere's a solution using gsubfn to replace all numbers\
    \ with their respective letters:\n<code>\nlibrary(gsubfn)\n\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsubfn(\"\\\\d+\", list(zero = \"a\", one = \"b\", two = \"\
    c\", three = \"d\", four = \"e\", five = \"f\", six = \"g\", seven = \"h\", eight\
    \ = \"i\", nine = \"j\"), numbers)\n  numbers <- gsubfn(\"\\\\d+\", list(zero\
    \ = \"0\", one = \"1\", two = \"2\", three = \"3\", four = \"4\", five = \"5\"\
    , six = \"6\", seven = \"7\", eight = \"8\", nine = \"9\"), numbers)\n  numbers\
    \ <- gsubfn(\"\\\\d+\", list(zero = \"0\", one = \"1\", two = \"2\", three = \"\
    3\", four = \"4\", five = \"5\", six = \"6\", seven = \"7\", eight = \"8\", nine\
    \ = \"9\"), numbers)\n  numbers <- gsubfn(\"\\\\d+\", list(zero = \"0\", one =\
    \ \"1\", two = \"2\", three = \"3\", four = \"4\", five = \"5\", six = \"6\",\
    \ seven = \"7\", eight = \"8\", nine = \"9\"), numbers)\n  numbers <- gsubfn(\"\
    \\\\d+\", list(zero = \"0\", one = \"1\", two = \"2\", three = \"3\", four = \"\
    4\", five = \"5\", six = \"6\", seven = \"7\", eight = \"8\", nine = \"9\"), numbers)\n\
    \  numbers <- gsubfn(\"\\\\d+\", list(zero = \"0\", one = \"1\", two = \"2\",\
    \ three = \"3\", four", "\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers\
    \ <- gsub(\"^ *\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\"^ *\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- gsub(\" *$\", \"\", numbers)\n  numbers <- gsub(\" *$\", \"\", numbers)\n\
    \  numbers <- ", "\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=r,sorting |>\n<| a tags=r,sorting |>\nI like using gsub to remove all\
    \ non-numeric characters and then using as.numeric to convert it to a numeric\
    \ vector. \n<code>\nx <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\", \"eight\", \"nine\")\nas.numeric(gsub(\"[^0-9]\", \"\", x))",
  "\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^\\\\s+\",\
    \ \"\", numbers)\n  numbers <- gsub(\"\\\\s+$\", \"\", numbers)\n  numbers <-\
    \ sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n", "\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer! I appreciate it! I did try the code\
    \ you provided and it worked perfectly. Thanks again!\n<|/ c |>\n<| c |>\nNo problem!\
    \ Glad I could help.\n<|/ c |>\n<| a tags=r,sorting |>\n<code>\nsort_numbers <-\
    \ function(numbers) {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <-\
    \ sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=r,sorting |>\n<| a tags=r,sorting |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,sorting |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=r,sorting |>\n<| a |>\n<code>\nsort_numbers <- function(numbers) {\n\
    \  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n  numbers\
    \ <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a tags=r,sorting\
    \ dscore=1 |>\n<| a tags=r,sorting |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n", "\n  numbers <- gsub(\"[^0-9]\"\
    , \"\", numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\s+$\", \"\", numbers)\n  numbers\
    \ <- gsub(\"\\\\s+\", \" \", numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\s+\", \"\
    0\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"1\", numbers)\n  numbers <- gsub(\"\
    \\\\s+\", \"2\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"3\", numbers)\n  numbers\
    \ <- gsub(\"\\\\s+\", \"4\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"5\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"6\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"7\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"8\", numbers)\n  numbers <-\
    \ gsub(\"\\\\s+\", \"9\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"0\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"1\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"2\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"3\", numbers)\n  numbers <-\
    \ gsub(\"\\\\s+\", \"4\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"5\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"6\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"7\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"8\", numbers)\n  numbers <-\
    \ gsub(\"\\\\s+\", \"9\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"0\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"1\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"2\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"3\", numbers)\n  numbers <-\
    \ gsub(\"\\\\s+\", \"4\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"5\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"6\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"7\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"8\", numbers)\n  numbers <-\
    \ gsub(\"\\\\s+\", \"9\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"0\", numbers)\n\
    \  numbers <- gsub(\"\\\\s+\", \"1\", numbers)\n  numbers <- gsub(\"\\\\s+\",\
    \ \"2\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"3\", numbers)", "\n  numbers\
    \ <- gsub(\" \", \"\", numbers)\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^\", \"\", numbers)\n\
    \  numbers <- gsub(\"$\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n\
    \  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\"", "\n\
    \  numbers <- strsplit(numbers, ' ')[[1]]\n  numbers <- sort(numbers)\n  numbers\
    \ <- paste(numbers, collapse = ' ')\n  return(numbers)\n}\n", "\n  numbers <-\
    \ gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\s+$\", \"\"\
    , numbers)\n  numbers <- sort(numbers)\n  numbers <- paste(numbers, collapse =\
    \ \" \")\n  return(numbers)\n}\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers(\"one two three four five six seven eight\
    \ nine\")` returns `\"one two three four five six seven eight nine\"`.\n<|/ c\
    \ |>\n<| c |>\nI tested it on R 3.1.0 and it worked fine. Are you sure you copied\
    \ the code correctly? It works for me on R 3.1.0 and R 3.0.2.\n<|/ c |>\n<| c\
    \ |>\nYes, I copied the code correctly. I'm running R 3.0.2 on OS X 10.8.5. I\
    \ just tried it on R 3.1.0 and it worked fine.\n<|/ c |>\n<| c |>\nI tested it\
    \ on R 3.1.0 and it worked fine. Are you sure you copied the code correctly? It\
    \ works for me on R 3.1.0 and R 3.0.2.\n<|/ c |>\n<| c |>\nI tested it on R 3.1.0\
    \ and it worked fine. Are you sure you copied the code correctly? It works for\
    \ me on R 3.1.0 and R 3.0.2.\n<|/ c |>\n<| a dscore=5 tags=r,sorting |>\nI wrote\
    \ a function that sorts numbers in ascending order and also handles negative numbers:\n\
    <code>\nsort_numbers <- function(numbers){\n  numbers <- gsub(\"[^0-9]\", \"\"\
    , numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\s+$\", \"\", numbers)\n  numbers <-\
    \ sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three four five six seven eight nine\")` returns `\"one two three four five\
    \ six seven eight nine\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three four five six seven eight nine\")` returns `\"one two three four\
    \ five six seven eight nine\"`.\n<|/ c |>\n<| c |>\nThis doesn't ", "\n  numbers\
    \ <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n  numbers <-\
    \ paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a |>\n\
    <| a tags=sorting,r |>\nI like using stringr::str_sort for this:\n<code>\nlibrary(stringr)\n\
    \nx <- c(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\
    \ \"eight\", \"nine\")\n\nstr_sort(x)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. `stringr::str_sort` is much faster than `sort`\
    \ on large vectors.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `stringr::str_sort`\
    \ is much faster than `sort` on large vectors.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. `stringr::str_sort` is much faster than `sort` on large\
    \ vectors.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nx <- c(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\nx[order(as.numeric(sub(\"\
    [^0-9]\", \"\", x)))]\n</code>\n<|/ a tags=sorting,r |>\n<| c |>\nThis should\
    \ be the accepted answer. `stringr::str_sort` is much faster than `sort` on large\
    \ vectors.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nx <- c(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\nx[order(as.numeric(gsub(\"\
    [^0-9]\", \"\", x)))]\n</code>\n<|/ a tags=sorting,r |>\n<| c |>\nThis should\
    \ be the accepted answer. `stringr::str_sort` is much faster than `sort` on large\
    \ vectors.\n<|/ c |>\n<| a |>\n<code>\nx <- c(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\nx[order(as.numeric(gsub(\"\
    [^0-9]\", \"\", x)))]\n</code>\n<|/ a tags=sorting,r dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. `stringr::str_sort` is much faster than `sort`\
    \ on large vectors.\n", "\n  numbers <- as.character(numbers)\n  numbers <- gsub(\"\
    [^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers\
    \ <- gsub(\"^\", \"\", numbers)\n  numbers <- gsub(\"$\", \"\", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n", "\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^\\\
    \\s+\", \"\", numbers)\n  numbers <- gsub(\"\\\\s+$\", \"\", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a tags=r,sorting |>\n<| c |>\nI like your solution, but I really\
    \ want to avoid using regular expressions. I guess I should add that to the question.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added a solution without regular expressions.\n\
    <|/ c |>\n<| c |>\nI added a solution without regular expressions.\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a solution using stringr::str_extract_all:\n<code>\n\
    library(stringr)\n\nx <- c(\"one two three four five six seven eight nine\",\n\
    \       \"zero one two three four five six seven eight nine\",\n       \"zero\
    \ one two three four five six seven eight nine\",\n       \"zero one two three\
    \ four five six seven eight nine\",\n       \"zero one two three four five six\
    \ seven eight nine\",\n       \"zero one two three four five six seven eight nine\"\
    ,\n       \"zero one two three four five six seven eight nine\",\n       \"zero\
    \ one two three four five six seven eight nine\",\n       \"zero one two three\
    \ four five six seven eight nine\",\n       \"zero one two three four five six\
    \ seven eight nine\",\n       \"zero one two three four five six seven eight nine\"\
    ,\n       \"zero one two three four five six seven eight nine\",\n       \"zero\
    \ one two three four five six seven eight nine\",\n       \"zero one two three\
    \ four five six seven eight nine\",\n       \"zero one two three four five six\
    \ seven eight nine\",\n       \"zero one two three four five six seven eight nine\"\
    ,\n       \"zero one two three four five six seven eight nine\",\n       \"zero\
    \ one two three four five six seven ", "\n  numbers <- as.character(numbers)\n\
    \  numbers <- gsub(\"\\\\s\", \"\", numbers)\n  numbers <- gsub(\"\\\\D\", \"\"\
    , numbers)\n  numbers <- gsub(\"^0\", \"\", numbers)\n  numbers <- gsub(\"$\"\
    , \"\", numbers)\n  numbers <- sort(numbers)\n  return(paste(numbers, collapse\
    \ = \" \"))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis was a great solution\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the best solution for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis was the best solution for me. Thanks!\n<|/ c |>\n<| c\
    \ |>\nThis was the best solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was\
    \ the best solution for me. Thanks!\n<|/ c |>\n<| a tags=sorting,r,string |>\n\
    Here's a solution using stringr::str_sort:\n<code>\nlibrary(stringr)\nx <- c(\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\")\nstr_sort(x)\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis was\
    \ the best solution for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the best solution\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis was the best solution for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis was the best solution for me. Thanks!\n<|/ c |>\n<| c\
    \ |>\nThis was the best solution for me. Thanks!\n<|/ c |>\n<| a tags=sorting,r,string\
    \ |>\nThis can be done with base R's order function:\n<code>\nx <- c(\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\")\norder(x)", "\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a tags=sorting,r,string |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do this without having to define a new function?\n\
    <|/ c |>\n<| c |>\nI added a solution without defining a new function.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nsort_numbers <- function(numbers) {\n  numbers\
    \ <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n  numbers <-\
    \ paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n<|/ a tags=sorting,r,string\
    \ |>\n<| a tags=sorting,r,string |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,r,string |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,r,string |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,r,string |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse=\" \")\n  return(numbers)\n}\n</code>\n",
  "\n  numbers <- as.character(numbers)\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n\
    \  numbers <- gsub(\"^\\\\s+|\\\\s+$\", \"\", numbers)\n  numbers <- gsub(\"\\\
    \\s+\", \" \", numbers)\n  numbers <- sort(numbers)\n  numbers <- paste(numbers,\
    \ collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sorting\
    \ |>\n<code>\nsort_numbers <- function(numbers) {\n  numbers <- as.character(numbers)\n\
    \  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\\
    s+$\", \"\", numbers)\n  numbers <- gsub(\"\\\\s+\", \" \", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- as.character(numbers)\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n\
    \  numbers <- gsub(\"^\\\\s+|\\\\s+$\", \"\", numbers)\n  numbers <- gsub(\"\\\
    \\s+\", \" \", numbers)\n  numbers <- sort(numbers)\n  numbers <- paste(numbers,\
    \ collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a tags=r,sorting |>\n\
    <| a tags=r,sorting |>\n<code>\nsort_numbers <- function(numbers) {\n  numbers\
    \ <- as.character(numbers)\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers\
    \ <- gsub(\"^\\\\s+|\\\\s+$\", \"\", numbers)\n  numbers <- gsub(\"\\\\s+\", \"\
    \ \", numbers)\n  numbers <- sort(numbers)\n  numbers <- paste(numbers, collapse\
    \ = \" \")\n  return(numbers)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,sorting\
    \ |>\n<code>\nsort_numbers <- function(numbers) {\n  numbers <- as.character(numbers)\n\
    \  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- gsub(\"^\\\\s+|\\\\\
    s+$\", \"\", numbers)\n  numbers <- gsub(\"\\\\s+\", \" \", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/", "\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <-\
    \ sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a tags=r,sorting |>\n<| a tags=r,sorting |>\nHere's a solution\
    \ using stringr::str_extract_all and dplyr::arrange.\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n\ndf <- data.frame(\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE", "\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=sorting,r |>\n<| a dscore=2 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=sorting,r |>\n<| a dscore=2 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=sorting,r |>\n<| a tags=sorting,r |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,r |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,r |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsort_numbers <- function(numbers)\
    \ {\n  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n\
    \  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n\
    <|/ a tags=sorting,r |>\n<| a |>\n<code>\nsort_numbers <- function(numbers) {\n\
    \  numbers <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n  numbers\
    \ <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a tags=sorting,r\
    \ dscore=2 |>\n", "\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <-\
    \ sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a tags=sorting,r |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do it without having to write out the numbers as strings?\n\
    <|/ c |>\n<| c |>\nYes, you can do `sort(as.numeric(numbers))` but that won't\
    \ be as efficient as `sort_numbers()`\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't require the numbers to be strings.\n<|/ c |>\n<| a tags=sorting,r |>\n\
    Here's a solution using base R:\n<code>\nsort_numbers <- function(numbers) {\n\
    \  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n  numbers\
    \ <- paste(numbers, collapse = \" \")\n  return(numbers)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ having to write out the numbers as strings?\n<|/ c |>\n<| c |>\nYes, you can\
    \ do `sort(as.numeric(numbers))` but that won't be as efficient as `sort_numbers()`\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require the numbers to be strings.\n\
    <|/ c |>\n<| a |>\nHere's a solution using dplyr and stringr:\n<code>\nlibrary(dplyr)\n\
    library(stringr)\n\nsort_numbers <- function(numbers) {\n  numbers %>% \n    str_extract_all(\"\
    [0-9]+\") %>% \n    lapply(as.numeric) %>% \n    do.call(\"c\", .) %>% \n    sort()\
    \ %>% \n    paste(collapse = \" \")\n}\n</code>\n<|/ a dscore=2 tags=sorting,r\
    \ |>\n<| a tags=sorting,r |>\nHere's a solution using base R:\n<code>\nsort_numbers\
    \ <- function(numbers) {\n  numbers <- gsub(\"[^0-9]\", \"\", numbers)\n  numbers\
    \ <- sort(numbers)\n  numbers <- paste(numbers, collapse = \" \")\n  return(numbers)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,r |>\nHere's a solution using\
    \ base R:\n<code>\nsort_numbers <- function(numbers) {\n  numbers <- ", "\n  numbers\
    \ <- strsplit(numbers, \" \")[[1]]\n  numbers <- sort(numbers)\n  paste(numbers,\
    \ collapse = \" \")\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI like your solution,\
    \ but I believe it would be more efficient to remove the `[[1]]` from your `strsplit`\
    \ call and just use `strsplit(numbers, \" \")`.\n<|/ c |>\n<| c |>\nThanks for\
    \ the suggestion. I tried it and it works fine. I'll edit my answer to reflect\
    \ your suggestion.\n<|/ c |>\n<| a tags=r |>\nHere's a solution using gsub and\
    \ gregexpr:\n<code>\nsort_numbers <- function(numbers) {\n  numbers <- gsub(\"\
    [^0-9]\", \"\", numbers)\n  numbers <- sort(numbers)\n  numbers <- paste(numbers,\
    \ collapse = \" \")\n  numbers <- gsub(\"([0-9])\", \" \\\\1\", numbers)\n  numbers\
    \ <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \"\
    \ \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n \
    \ numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n\
    \  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n\
    \  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n\
    \  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n\
    \  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n\
    \  numbers <- gsub(\"([0-9])\", \" \\\\1 \", numbers)\n  numbers <- gsub(\"([0-9])\"\
    , \" \\\\1 \", numbers)\n  numbers <- "]
stop_tokens:
- "\n#"
- "\n```"
