name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  S <-\
    \ unlist(strsplit(S, split = \"[?.!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\".\"))\n  bored <- which(grepl(\"\
    ^I\", S))\n  return(length(bored))\n}\n", "\n  S <- unlist(strsplit(S, split =\
    \ \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- gsub(\"[\\\\.\\\\?!]\", \"\
    \", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nis_bored is now a function that takes a string\
    \ and returns the number of boredoms within the string.\n\n\n</text>\n<text>\n\
    Question 3\nWrite a function that takes a string and returns the number of times\
    \ the word \"I\" appears anywhere in the string. You may assume that the string\
    \ contains only lowercase letters a-z.\n\n\n</text>\n<cell>", "\n  S <- gsub(\"\
    [.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell\
    \ below to test your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nFinally, write a function that takes in a body\
    \ of text and returns the number of sentences. Use a regular expression to identify\
    \ the sentence boundaries. For example, a period followed by a question mark will\
    \ constitute a sentence.\n\n\n</text>\n<cell>", "\n  boredoms <- 0\n  \n  for(i\
    \ in 1:(length(S) - 1)) {\n    if(grepl(\"^I\", S[i]) == TRUE) {\n      boredoms\
    \ <- boredoms + 1\n    }\n  }\n  \n  return(boredoms)\n}\n", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"[I].*[!.?]\"\
    , S)\n  sum(boredoms)\n}\n", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms\
    \ > 0)\n}\n", "\n  S <- unlist(strsplit(S, split = \" \"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[\\.\\?\\!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<text>\nNow let's try it out on our example sentences:\n\n\n</text>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nIt works fine!\
    \ But what if we want to count the total number of boredoms across all sentences?\
    \ We could just use sum:\n\n\n</text>\n<cell>\nsum(is_bored(\"Hello world\"))\n\
    </cell>\n<cell>\nsum(is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\"))\n</cell>\n<text>\nBut this doesn't work because is_bored only returns\
    \ 0 or 1. What if we want to count the number of boredoms across all sentences\
    \ that contain at least one boredom? We can use sum with an appropriate condition:\n\
    \n\n</text>\n<cell>\nsum(is_bored(sentences))\n</cell>\n<text>\nThis works fine,\
    \ but it's kind of silly that we're summing up booleans. Let's try a slightly\
    \ more complicated sentence:\n\n\n</text>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather.\")\n</cell>\n<text>\nNow we see that\
    \ is_bored returns 1 even though this sentence contains no boredoms. This is because\
    \ is_bored only returns 1 if the sentence starts with \"I\". Let's fix this by\
    \ adding another condition:\n\n\n</text>\n<cell>\nsum(is_bored(sentences))\n</cell>\n\
    <text>\nNow it returns 0 because there are no boredoms in this sentence. Let's\
    \ fix this by adding another condition:\n\n\n</text>\n<cell>\nsum(is_bored(sentences))\n\
    </cell>\n<text>\nNow it returns 1 because there are boredoms in this sentence.\
    \ Let's fix this by adding another condition:\n\n\n</text>\n<cell>\nsum(is_bored(sentences))\n\
    </cell>\n<text>\nNow it returns 2 because there are two boredoms in this sentence.\
    \ Let's fix this by adding another condition:\n\n\n</text>\n<cell>\nsum(is_bored(sentences))\n\
    </cell>\n<text>\nNow it returns 3 because there are three boredoms in this sentence.\
    \ Let's fix this by adding another condition:\n\n\n</text>\n<cell>\nsum(is_bored(sentences))\n\
    </", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  S <-\
    \ gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n\
    \  S <- tolower(S)\n  S <- gsub(\"[.?!]\", \"\", S)\n  return(sum(grepl(\"^i\"\
    , S)))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n</cell>\n<text>\nNow let's test your function\n\n\n</text>\n<cell>\n\
    is_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<text>\nGreat! Now you have a function\
    \ that counts how many boredoms there are in a string.\n\nNext up: Vectorization\n\
    As you might have noticed in the previous exercises, using for loops is very inefficient.\
    \ Vectorization is one way to make your code run faster. Let's walk through an\
    \ example.\n\nSuppose you want to find the number of boredoms in a vector of length\
    \ 10,000. Here's how you could vectorize your function using R's apply family\
    \ of functions:\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"\
    [I].*[!.?]\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\n(IMPLEMENTATION) Explain what a boredom\
    \ sentence means\nWrite a brief description of a boredom sentence. \n\n\n</text>\n\
    <text>\n(IMPLEMENTATION) Test your code\nRun the cell below to test your code.\n\
    \n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"\
    match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    \\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[\\.\\?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S\
    \ <- gsub(\"[.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is now a function that takes\
    \ a string and returns an integer. Next, write a function that takes a string\
    \ and returns a list of all the words in the string, with each word capitalized.\n\
    \n\n</text>\n<cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    \\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I\
    \ love this weather\")\n</cell>\n<text>\nis_bored is now a function that takes\
    \ a string and returns the number of boredoms it finds.\n\nExercise: Write a function\
    \ that takes a string and returns the number of boredoms it finds.\n\n\n</text>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<text>\nRun the cell below to test your function.\n\n\n</text>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nFinally, write\
    \ a function that takes in a body of text and returns the number of sentences.\
    \ The sentence counting must be case sensitive.\n\n\n</text>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  S <-\
    \ unlist(strsplit(S, split=\"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"[I].*[!.?]\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\n\
    is_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n</cell>\n<text>\nThe next cell will test\
    \ your function against a variety of test cases. We will pass a few different\
    \ sentences into the function and see how it returns the results.\n\n\n</text>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  boredoms\
    \ <- 0\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  for(i in seq_along(S))\
    \ {\n    if(S[i] == \"I\") {\n      boredoms <- boredoms + 1\n    }\n  }\n  return(boredoms)\n\
    }\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather !\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather !.\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather !? \")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather !? .\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather !? !.\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather !? !? \")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather !? !? .\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather !? !? !.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather !? !? !? !\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather !? !? !? !.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather !?\
    \ !? !? !? \")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather !? !? !? !? .\")\n</cell>\n<cell>\nis_bored(\"", "\n  S\
    \ <- unlist(strsplit(S, split=\"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nis_bored is now\
    \ a function that takes a string and returns the number of boredoms it contains.\n\
    \n\n</text>\n<text>\nQuestion 2: Write a function that takes a string and returns\
    \ the number of times the word \"love\" appears in the string.\n\n\n</text>\n\
    <cell>", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n\
    <cell>", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  boredoms <- gregexpr(\"[I].*\", S)\n  sum(boredoms > 0)\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- grep(\"^I\"\
    , S, value = TRUE)\n  return(length(boredoms))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n\
    \  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <text>\nRun the cell below to test your function\n\n\n</text>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nThe next cell will run your function\
    \ on all the words in our dataset.\n\n\n</text>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  boredoms <- gregexpr(\"\
    [I].*\", S)\n  sum(boredoms[[1]][-1] != boredoms[[1]][-length(boredoms[[1]])])\n\
    }\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"[\\.\\?\\!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"\
    match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n \
    \ sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nPart 3: Vectorization\nWhen dealing with large data sets (such\
    \ as text messages), you will often run into problems because R can\u2019t handle\
    \ vectorization. For example, if you have a list of 10,000 names, then R will\
    \ crash when trying to run the following code:\n\n\n</text>\n<cell>\nnames <-\
    \ c(\"Jack\", \"Jill\", \"Sue\", \"Tom\", \"Jack\")\nlength(names)\n</cell>\n\
    <text>\nThe reason for this is that R has to allocate a new vector with each new\
    \ name. This can take a long time for large data sets. Vectorization is one way\
    \ to deal with large data sets in R. There are many other ways to do vectorization,\
    \ but this one is a good start.\n\nOne of the most important things to remember\
    \ about vectorization is that it only works on one variable at a time. For example,\
    \ if we want to find the number of times each name appears in the names vector,\
    \ we can\u2019t use vectorization:\n\n\n</text>\n<cell>\ntable(names)\n</cell>\n\
    <text>\nInstead, we have to loop through each name:\n\n\n</text>\n<cell>\ncount_names\
    \ <- function(names) {\n  count_names <- c()\n  for (i in 1:length(names)) {\n\
    \    count_names[i] <- length(grep(names[i], names))\n  }\n  return(count_names)\n\
    }\n</cell>\n<cell>\ncount_names(names)\n</cell>\n<text>\nWe can also use sapply\
    \ to run a function on each element of a vector:\n\n\n</text>\n<cell>\nsapply(names,\
    \ function(x) length(grep(x, names)))\n</cell>\n<text>\nWe can also use lapply\
    \ to run a function on each element of a list. lapply returns a list:\n\n\n</text>\n\
    <cell>\nlapply(names, function(x) length(grep(x, names)))\n</cell>\n<text>\nWe\
    \ can also use purrr::map to run a function on each element of a list:\n\n\n</text>\n\
    <cell>\npurrr::map(names, function(x) length(grep(x, names)))\n</cell>\n<text>\n\
    We can also use purrr::walk2 to run a function on each element of a list:\n\n\n\
    </text>\n<cell>\npurrr::walk2(names, function(x, n) length(grep(x, names)), n)\n\
    </", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split='[\\.\\?!]'))\n\
    \  sum(grepl('I', S))\n}\n", "\n  S <- tolower(S)\n  S <- gsub(\"[.?!]\", \"\"\
    , S)\n  S <- unlist(strsplit(S, \" \"))\n  sum(grepl(\"^i\", S))\n}\n", "\n  S\
    \ <- unlist(strsplit(S, split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n\
    \  boredoms <- grep(\"^I\", S, value = TRUE)\n  length(boredoms)\n}\n", "\n  S\
    \ <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun\
    \ the cell below to test your solution.\n\n\n</text>\n<cell>", "\n  boredoms <-\
    \ gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n</cell>\n\
    <cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather !\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather ?\
    \ !\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather ? ! !\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather ? ! ! !\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather ? ! ! ! !\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather ?\
    \ ! ! ! ! !\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather ? ! ! ! ! ! !\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather ? ! ! ! ! ! ! ! !\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather ?\
    \ ! ! ! ! ! ! ! ! ! !\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather ? ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\
    \ ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(boredoms > 0)\n}\n", "\n  S <- unlist(strsplit(S, split = \"[.?!]\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nBONUS: Write a function that takes a string and returns the\
    \ number of words in the string that are palindromes. A palindrome is a word that\
    \ is the same forwards and backwards. For example:\n>>> is_palindrome(\"radar\"\
    )\nTrue\n>>> is_palindrome(\"radars\")\nFalse\n>>> is_palindrome(\"radars\")\n\
    True\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n\
    >>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>>\
    \ is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"\
    radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\"\
    )\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\n\
    True\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n\
    >>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>>\
    \ is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"\
    radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\"\
    )\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\n\
    True\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n\
    >>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>>\
    \ is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n>>> is_palindrome(\"\
    radars\")\nTrue\n>>> is_palindrome(\"radars\")\nTrue\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n", "\n  boredoms <- gregexpr(\"\
    ^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is now a function, and you\
    \ can call it on any sentence you like.\n\n\n</text>\n<cell>\nis_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n(OPTIONAL)\
    \ Exercise\nWrite a function that takes a string and returns the number of words\
    \ in the string that start with the letter 'a'.\n\n\n</text>\n<cell>", "\n  S\
    \ <- tolower(S)\n  S <- gsub(\"[.!?]\", \" \", S)\n  S <- strsplit(S, \" \")[[1]]\n\
    \  sum(grepl(\"^i\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\"\
    [.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell below to\
    \ test your function\n\n\n</text>\n<cell>", "\n  S <- strsplit(S, ' ')[[1]]\n\
    \  sum(grepl('^I', S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\\
    ?|!\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  boredoms <- grep(\"\
    ^I\", S, perl=TRUE)\n  length(boredoms)\n}\n", "\n  boredoms <- gregexpr(\"[I].*[!.?]\"\
    , S)\n  sum(unlist(lapply(boredoms, `[`, 1)))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is pretty straightforward,\
    \ but you might want to make it more robust by including more sentences.\n\n\n\
    </text>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n<cell>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this ", "\n  S <- unlist(strsplit(S,\
    \ split=\"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"\
    Hello world\")\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nis_bored is pretty straightforward,\
    \ but we could do better. Let's try a more complicated example:\n\n\n</text>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    )\n</cell>\n<text>\nWe get 1 boredom too many, because \"weather\" is a stopword.\
    \ Let's add some stopwords to our stopwords list:\n\n\n</text>\n<cell>\nstopwords\
    \ <- c(\"a\", \"about\", \"above\", \"across\", \"after\", \"afterwards\", \"\
    again\", \"against\", \"all\", \"almost\", \"alone\", \"along\",\n           \
    \     \"already\", \"also\", \"although\", \"always\", \"am\", \"among\", \"amongst\"\
    , \"amoungst\", \"amount\", \"an\", \"and\", \"another\",\n                \"\
    any\", \"anyhow\", \"anyone\", \"anything\", \"anyway\", \"anywhere\", \"are\"\
    , \"around\", \"as\", \"at\", \"back\", \"be\",\n                \"became\", \"\
    because\", \"become\", \"becomes\", \"becoming\", \"been\", \"before\", \"beforehand\"\
    , \"behind\", \"being\",\n                \"below\", \"beside\", \"besides\",\
    \ \"between\", \"beyond\", \"bill\", \"both\", \"bottom\", \"but\", \"by\", \"\
    call\", \"can\",\n                \"cannot\", \"cant\", \"co\", \"con\", \"could\"\
    , \"couldnt\", \"cry\", \"de\", \"describe\", \"detail\", \"do\", \"done\",\n\
    \                \"down\", \"due\", \"during\", \"each\", \"eg\", \"eight\", \"\
    either\", \"eleven\", \"else\", \"elsewhere\", \"empty\",\n                \"\
    enough\", \"etc\", \"even\", \"ever\", \"every\", \"everyone\", \"everything\"\
    , \"everywhere\", \"except\", \"few\",\n                \"fifteen\", \"fify\"\
    , \"fill\", \"find\", \"fire\", \"first\", \"five\", \"for\", \"former\", \"formerly\"\
    , \"forty\",\n                \"found\", \"four\", \"from\", \"front\", \"full\"\
    , \"further\", \"get\", \"give\", \"go\", \"had\", \"has\", \"hasnt\", \"have\"\
    ,\n                \"he\", \"hence\", \"her\", \"here\", \"hereafter\", \"hereby\"\
    , \"herein\", \"hereupon\", \"hers\", \"herself\", \"him\",\n                \"\
    himself\", \"his\", \"how\", \"however\", \"hundred\", \"", "\n  S <- unlist(strsplit(S,\
    \ split='\\\\.|\\\\?|!'))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split=\"[?!.]\"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- strsplit(S, ' ')[[1]]\n\
    \  sum(grepl('I', S) & grepl('.|!|?', S))\n}\n</cell>\n<cell>", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\") > 0)\n}\n", "\n\
    \  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"^I\", S))\n\
    }\n</cell>\n<cell>", "\n  S <- tolower(S)\n  S <- gsub(\"[\\\\.\\\\?!]\", \"\"\
    , S)\n  return(sum(grepl(\"^i\", S)))\n}\n</cell>\n<text>\nRun the cell below\
    \ to test your function\n\n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nQuestion 3\nWrite a function that takes in a string of words\
    \ and returns the number of words that are palindromes.\n\nA palindrome is a word\
    \ that is the same when read from either end of the word (e.g., \"racecar\" is\
    \ a palindrome).\n\n\n</text>\n<cell>", "\n  S <- gsub(\"[\\\\.\\\\?!]\", \"\"\
    , S)\n  return(sum(grepl(\"^I\", S)))\n}\n", "\n  boredoms <- gregexpr(\"^I\"\
    , S)\n  sum(boredoms > 0)\n}\n", "\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms,\
    \ \"match.length\") > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n\
    \  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n\
    <cell>\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n</cell>\n<text>\nis_bored is now a function, so we can use it in our program:\n\
    \n\n</text>\n<cell>\nis_bored(\"Hello world\")\n</cell>\n<cell>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nWe\
    \ can also use it to count the number of words in a string:\n\n\n</text>\n<cell>\n\
    str_count <- function(S) {\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nstr_count(\"Hello world\")\n</cell>\n<cell>\nstr_count(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    str_count is now a function, so we can use it in our program:\n\n\n</text>\n<cell>\n\
    str_count(\"Hello world\")\n</cell>\n<cell>\nstr_count(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nWe can also use it\
    \ to count the number of sentences in a string:\n\n\n</text>\n<cell>\nstr_count\
    \ <- function(S) {\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n</cell>\n<cell>\nstr_count(\"Hello world\")\n</cell>\n<cell>\nstr_count(\"\
    The sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\n\
    str_count is now a function, so we can use it in our program:\n\n\n</text>\n<cell>\n\
    str_count(\"Hello world\")\n</cell>\n<cell>\nstr_count(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nWe can also use it\
    \ to count the number of words in a string:\n\n\n</text>\n<cell>\nstr_count <-\
    \ function(S) {\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</"]
stop_tokens:
- "\n#"
- "\n```"
