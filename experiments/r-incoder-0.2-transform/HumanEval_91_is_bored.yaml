name: HumanEval_91_is_bored
language: r
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n\
  # 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
  # 1\nis_bored <- function(S) {"
tests: "test_humaneval <- function() {\ncandidate <- is_bored\n    if(!identical(candidate('Hello\
  \ world'), 0)){quit('no', 1)}\n    if(!identical(candidate('Is the sky blue?'),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate('I love It !'), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate('bIt'), 0)){quit('no', 1)}\n    if(!identical(candidate('I\
  \ feel good today. I will be productive. will kill It'), 2)){quit('no', 1)}\n  \
  \  if(!identical(candidate('You and I are going for a walk'), 0)){quit('no', 1)}\n\
  }\ntest_humaneval()"
completions: ["\n  boredoms <- gregexpr(\"^I\", S)\n  sum(attr(boredoms, \"match.length\"\
    ) > 0)\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"^I\"\
    , S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S, split=\".?!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n\
    }\n", "\n  S <- strsplit(S, \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms\
    \ <- gregexpr(\"^I\", S)\n  sum(boredoms > 0)\n}\n</cell>\n<cell>", "\n  S <-\
    \ unlist(strsplit(S, split = \"[?.!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n\
    <cell>", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\"[.?!]\"))\n  sum(grepl(\"\
    ^I\", S))\n}\n", "\n  S <- unlist(strsplit(S, split=\".\"))\n  bored <- which(grepl(\"\
    ^I\", S))\n  return(length(bored))\n}\n", "\n  S <- unlist(strsplit(S, split =\
    \ \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- gsub(\"[\\\\.\\\\?!]\", \"\
    \", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nis_bored is now a function that takes a string\
    \ and returns the number of boredoms within the string.\n\n\n</text>\n<text>\n\
    Question 3\nWrite a function that takes a string and returns the number of times\
    \ the word \"I\" appears anywhere in the string. You may assume that the string\
    \ contains only lowercase letters a-z.\n\n\n</text>\n<cell>", "\n  S <- gsub(\"\
    [.?!]\", \"\", S)\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<cell>", "\n  S <- unlist(strsplit(S,\
    \ split = \" \"))\n  sum(grepl(\"^I\", S))\n}\n", "\n  S <- unlist(strsplit(S,\
    \ split = \"[.?!]\"))\n  sum(grepl(\"^I\", S))\n}\n</cell>\n<text>\nRun the cell\
    \ below to test your function.\n\n\n</text>\n<cell>\nis_bored(\"Hello world\"\
    )\n</cell>\n<cell>\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n</cell>\n<text>\nFinally, write a function that takes in a body\
    \ of text and returns the number of sentences. Use a regular expression to identify\
    \ the sentence boundaries. For example, a period followed by a question mark will\
    \ constitute a sentence.\n\n\n</text>\n<cell>", "\n  boredoms <- 0\n  \n  for(i\
    \ in 1:(length(S) - 1)) {\n    if(grepl(\"^I\", S[i]) == TRUE) {\n      boredoms\
    \ <- boredoms + 1\n    }\n  }\n  \n  return(boredoms)\n}\n", "\n  S <- strsplit(S,\
    \ \" \")[[1]]\n  sum(grepl(\"^I\", S))\n}\n", "\n  boredoms <- gregexpr(\"[I].*[!.?]\"\
    , S)\n  sum(boredoms)\n}\n", "\n  S <- unlist(strsplit(S, split=\"\\\\.|\\\\?|!\"\
    ))\n  sum(grepl(\"^I\", S))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
