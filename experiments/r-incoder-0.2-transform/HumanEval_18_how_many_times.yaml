name: HumanEval_18_how_many_times
language: r
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa',\
  \ 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string,\
  \ substring) {"
tests: "test_humaneval <- function() {\ncandidate <- how_many_times\n    if(!identical(candidate('',\
  \ 'x'), 0)){quit('no', 1)}\n    if(!identical(candidate('xyxyxyx', 'x'), 4)){quit('no',\
  \ 1)}\n    if(!identical(candidate('cacacacac', 'cac'), 4)){quit('no', 1)}\n   \
  \ if(!identical(candidate('john doe', 'john'), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  return(length(gregexpr(substring, string, fixed = TRUE)) - 1)\n\
    }\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$lengths)\n\
    }\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$lengths\
    \ >= n)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, this works well. I'm\
    \ still curious about how it compares to other solutions though.\n<|/ c |>\n<|\
    \ c |>\nI added a benchmark comparison to the answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks, that's very helpful.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution\
    \ using stringi package:\n<code>\nlibrary(stringi)\nlibrary(dplyr)\n", "\n  n\
    \ <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$length)\
    \ - n\n}\n", "\n  return(length(gregexpr(substring, string, fixed = TRUE)) - 1)\n\
    }\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$lengths)\n\
    }\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n}\n",
  "\n  str_count <- str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - str_count(string, substring)\n  str_count <- str_count - str_count(string,\
    \ substring)\n  str_count <- str_count - str_count(string, substring)\n  str_count\
    \ <- str_count - ", "\n  n <- nchar(string)\n  n1 <- nchar(substring)\n  n - (n1\
    \ - nchar(gsub(\"\\\\s\", \"\", substring)))\n}\n", "\n  return(sum(gregexpr(substring,\
    \ string, fixed = TRUE)$length))\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, fixed = TRUE)$lengths >= n)\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, fixed = TRUE)$lengths >= n)\n}\n", "\n  n <- nchar(string)\n  m <- nchar(substring)\n\
    \  \n  sum(grepl(substring, string))\n}\n", "\n  nchar(gsub(substring, \"\", string))\n\
    }\n", "\n  return(sum(gregexpr(substring, string, fixed = TRUE)$length))\n}\n",
  "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed = TRUE)$length)\
    \ - n\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring, string, fixed\
    \ = TRUE)$lengths) - n\n}\n", "\n  n <- nchar(substring)\n  sum(gregexpr(substring,\
    \ string, fixed = TRUE)$length) - n\n}\n", "\n  count <- 0\n  for(i in 1:(length(substring)\
    \ - 1)) {\n    count <- count + ((substring(i, i + 1) %in% substring) == TRUE)\n\
    \  }\n  return(count)\n}\n", "\n  return(sum(gregexpr(substring, string, fixed\
    \ = TRUE)$length))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
