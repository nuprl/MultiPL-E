name: HumanEval_108_count_nums
language: r
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n\
  # >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {"
tests: "test_humaneval <- function() {\ncandidate <- count_nums\n    if(!identical(candidate(c()),\
  \ 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1, -2, 0)), 0)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1, 1, 2, -2, 3, 4, 5)), 6)){quit('no', 1)}\n\
  \    if(!identical(candidate(c(1, 6, 9, -6, 0, 1, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1,\
  \ 100, 98, -7, 1, -1)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(12, 23,\
  \ 34, -45, -56, 0)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(0, 1)), 1)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1)), 1)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0))) - 1\n}\n</cell>\n\
    <text>\nNow let's test our count_nums function on some test cases:\n\n\n</text>\n\
    <cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n\
    <cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nNow let's write a function to\
    \ generate all possible combinations of k numbers from n numbers:\n\n\n</text>\n\
    <cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>\ncount_nums(c(1,\
    \ 2, 3, -4, -5, 6))\n</cell>\n<text>\nExercise\nWrite a function that takes an\
    \ array of integers and returns the number of elements which has a sum of digits\
    \ < 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <- function(arr) {\n\
    \  sum(sapply(arr, function(x) x < 0))\n}\n\n</text>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(arr > 0)\n}\n",
  "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(arr\
    \ > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0))) > 0\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n\
    </cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an integer and returns the number of positive integers less than\
    \ or equal to it.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(arr\
    \ > 0)\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x\
    \ > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %/%\
    \ 10 > 0)\n  }))\n}\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<text>\n\
    Exercise: Write a function that takes an array of integers and returns the number\
    \ of elements which has a sum of digits > 0.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(sign(x)) > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)) * (x > 0))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0))) > 0\n}\n", "\n  sum(arr %/% 10 > 0)\n}\n", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n\
    }\n</cell>\n<cell>\ncount_nums(c(1,2,3))\n</cell>\n<cell>\ncount_nums(c(1,2,-3))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,3))\n</cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6))\n</cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8))\n</cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10))\n</cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10,11))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12))\n</cell>\n<cell>\n\
    count_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13))\n</cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15))\n</cell>\n\
    <cell>\ncount_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15,16))\n</cell>\n<cell>\n\
    count_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17))\n</cell>\n<cell>\n\
    count_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18))\n</cell>\n<cell>\n\
    count_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19))\n</cell>\n<cell>\n\
    count_nums(c(1,2,-3,-4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))\n</cell>\n\
    <cell>\ncount_num", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x)) >\
    \ 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0) < 0))\n\
    }\n", "\n  sum(arr %/% 10 > 0)\n}\n</cell>\n<cell>\ncount_nums(c(1, 2, 3))\n</cell>\n\
    <cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n\
    </cell>\n<text>\nExercise: Write a function count_nums which takes an array of\
    \ integers and returns\nthe number of elements which has a sum of digits > 0.\n\
    If a number is negative, then its first signed digit will be negative:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\n>>> count_nums(c(123, -456, -321))\n\
    2\n>>> count_nums(c(123, 456, 321))\n2\n>>> count_nums(c(123, 456, 321, -321))\n\
    2\n>>> count_nums(c(123, 456, 321, -321, -321))\n2\n>>> count_nums(c(123, 456,\
    \ 321, -321, -321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321,\
    \ -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321))\n\
    2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321))\n2\n>>>\
    \ count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321))\n2\n\
    >>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321, -321))\n\
    2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321, -321,\
    \ -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321,\
    \ -321, -321, -321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321,\
    \ -321, -321, -321, -32", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x))\
    \ > 0)))\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0))) > 0\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0)))\n}\n</cell>\n<cell>\ncount_nums(c())\n\
    </cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ 1, 2))\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits < 0.\nIf any number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n\
    1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <- function(arr) {\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) < 0)))\n}\n</text>\n<cell>\ncount_nums(c())\n\
    </cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ 1, 2))\n</cell>\n<text>\nExercise: Write a function that takes an array of integers\
    \ and returns the number of elements which has a sum of digits == 0.\nIf any number\
    \ is 0, then its first signed digit will be 0:\ne.g. 123 has signed digits 1,\
    \ 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1,\
    \ 1, 2))\n3\ncount_nums <- function(arr) {\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ == 0)))\n}\n</text>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1,\
    \ 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits != 0.\nIf any number is 0, then its first signed digit\
    \ will be 0:\ne.g. 123 has signed digits 1, 2, and 3.\n>>> count_nums(c())\n0\n\
    >>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <-\
    \ function(arr) {\n  sum(sapply(arr, function(x) sum(as.integer(x) != 0)))\n}\n\
    </text>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(", "\n  sum(sapply(arr, function(x) sum(x > 0))) >\
    \ 0\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x)>0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(sign(x)) > 0)))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x))\
    \ > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n\
    <cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n\
    <cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise: Write a function that\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(c())\n\
    0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\n>>> count_nums(c(123,\
    \ -456, -321))\n2\n>>> count_nums(c(123, 456, 321))\n2\n>>> count_nums(c(123,\
    \ 456, 321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321))\n2\n>>> count_nums(c(123,\
    \ 456, 321, -321, -321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321,\
    \ -321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321))\n\
    2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321))\n2\n>>>\
    \ count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321))\n2\n\
    >>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321, -321))\n\
    2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321, -321, -321,\
    \ -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321, -321, -321, -321,\
    \ -321, -321, -321, -321))\n2\n>>> count_nums(c(123, 456, 321, -321, -321, -321,\
    \ -321, -321, -321, -321, -321, ", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n\
    \  sum(sapply(arr, function(x) sum(x > 0))) > 0\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)>0)))\n\
    }\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)) > 0)\n}\n", "\n\
    \  sum(sapply(arr, function(x) sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(sign(x)) > 0)))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x)) > 0)))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x) * x))) > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n\
    </cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)) > 0)\n}\n</cell>\n<cell>\n\
    count_nums(c(1, 2, 3))\n</cell>\n<cell>\ncount_nums(c(1, -1, 3, -3))\n</cell>\n\
    <cell>\ncount_nums(c(1, -1, 3, -3, -3))\n</cell>\n<cell>\ncount_nums(c(1, -1,\
    \ 3, -3, -3, -3))\n</cell>\n<cell>\ncount_nums(c(1, -1, 3, -3, -3, -3, -3))\n\
    </cell>\n<cell>\ncount_nums(c(1, -1, 3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3,\
    \ -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, ", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x\
    \ > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x\
    \ > 0))\n}\n", "\n  sum(arr > 0)\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(x > 0) < 0))\n}\n", "\n  sum(arr %/% 10 > 0)\n}\n</cell>\n<cell>", "\n \
    \ sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(x > 0) < 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x\
    \ > 0))) > 0\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)>0)))\n\
    }\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an array of integers and returns the\nnumber of elements which has\
    \ a sum of digits > 0 and is positive.\nIf no number is positive, then return\
    \ 0.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1,\
    \ 1, 2))\n3\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2, -3))\n0\n>>>\
    \ count_nums(c(-2, -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2,\
    \ -3))\n0\n>>> count_nums(c(-2, -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2,\
    \ -2, -3))\n0\n>>> count_nums(c(-2, -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>>\
    \ count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(c(2, -2, -3))\n0\n>>> count_nums(c(-2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10))\n0\n>>> count_nums(", "\n  sum(arr > 0)\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n\
    \  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\
    \ - 1\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n\
    \  }))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x)>0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) sum(x > 0))) > 0\n}\n</cell>\n<text>\nNow let's\
    \ test our count_nums function by passing it a vector with some positive and some\
    \ negative numbers:\n\n\n</text>\n<cell>\ncount_nums(c(1, 2, 3))\n</cell>\n<cell>\n\
    count_nums(c(-1, 11, -11))\n</cell>\n<text>\nFinally, let's test our count_nums\
    \ function by passing it a vector with some positive and some negative numbers:\n\
    \n\n</text>\n<cell>\ncount_nums(c(1, -1, -1, 1, -1, 1, -1, 1, -1, 1))\n</cell>\n\
    <text>\nWe can also use count_nums to count the number of positive integers in\
    \ a vector:\n\n\n</text>\n<cell>\ncount_nums(c(2, -1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1))\n</cell>\n<text>\nLet's now write a function that will return the number\
    \ of positive integers in a vector, even if that number is negative:\n\n\n</text>\n\
    <cell>\ncount_nums(c(-1, -1, 1, -1, 1, -1, 1, -1, 1))\n</cell>\n<text>\nLet's\
    \ now write a function that will return the number of positive integers in a vector,\
    \ even if that number is negative:\n\n\n</text>\n<cell>\ncount_nums(c(-1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1))\n</cell>\n<text>\nNow let's write a function that will\
    \ return the number of positive integers in a vector, even if that number is negative:\n\
    \n\n</text>\n<cell>\ncount_nums(c(-1, -1, 1, -1, 1, -1, 1, -1, 1))\n</cell>\n\
    <text>\nNow let's write a function that will return the number of positive integers\
    \ in a vector, even if that number is negative:\n\n\n</text>\n<cell>\ncount_nums(c(-1,\
    \ -1, 1, -1, 1, -1, 1, -1, 1))\n</cell>\n<text>\nNow let's write a function that\
    \ will return the number of positive integers in a vector, even if that number\
    \ is negative:\n\n\n</text>\n<cell>\ncount_nums(c(-1, -1, 1, -1, 1, -1, 1, -1,\
    \ 1))\n</cell>\n<text>\nNow let's write a function that will return the number\
    \ of positive integers in a vector, even if that number is negative:\n\n\n</text>\n\
    <cell>\ncount_nums(c(-1, -1, 1, -1, 1, -1, 1, -1, 1))\n</cell>\n<text>\nNow let's\
    \ write a function that will return the number of positive integers in a vector,\
    \ even if that number is negative:\n\n\n</text>\n<cell>\ncount_nums(c(-1, -1,\
    \ 1, -1, 1, -1, 1, -1, 1))\n</cell>\n<text>\nNow let's write a function that will\
    \ return the number of positive integers in a vector, even if that number is negative:\n\
    \n\n</text>\n<cell>\ncount_nums(c(-1, -1, 1, -1, 1, -1, 1, ", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)>0)))\n}\n", "\n  sum(sapply(arr, function(x) {\n\
    \    sum(x %/% 10 > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x\
    \ > 0) - (x < 0)\n  }))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0) < 0))\n}\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n\
    <cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n\
    </cell>\n<text>\nExercise: Write a function that takes an array of integers and\
    \ returns the number of elements which has a sum of digits < 0.\nIf any number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n\
    1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <- function(arr) {\n  sum(sapply(arr,\
    \ function(x) sum(x < 0) < 0))\n}\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits == 0.\nIf any number is 0, then its first signed digit will be 0:\n\
    e.g. 123 has signed digits 1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits == 0.\nIf any number is 0, then its first signed digit will be 0:\n\
    e.g. 123 has signed digits 1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits == 0.\nIf any number is 0, then its first signed digit will be 0:\n\
    e.g. 123 has signed digits 1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits == 0.\nIf any number is 0, then its first signed digit will be 0:\n\
    e.g. 123 has signed digits 1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nExercise: Write a function that\
    \ takes an array of integers and returns the number of elements which has a sum\
    \ of digits ", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n\
    }\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise\nWrite a function\
    \ count_nums which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(c())\n\
    0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\nHint: use\
    \ sapply and sum.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0))) - 1\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which takes an array of integers and returns the number\
    \ of elements which has a sum of digits < 0.\nIf a number is negative, then its\
    \ first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and\
    \ 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1,\
    \ 1, 2))\n3\ncount_nums <- function(arr) {\n  sum(arr < 0)\n}\nExercise 3\nWrite\
    \ a function which takes an array of integers and returns the number of elements\
    \ which has a sum of digits == 0.\nIf all numbers are positive, then the sum of\
    \ the digits will be 0.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n\
    0\n>>> count_nums(c(1, 1, 2))\n0\ncount_nums <- function(arr) {\n  sum(arr ==\
    \ 0)\n}\nExercise 4\nWrite a function which takes an array of integers and returns\
    \ the number of elements which has a sum of digits != 0.\nIf all numbers are positive,\
    \ then the sum of the digits will be 0.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n0\n>>> count_nums(c(1, 1, 2))\n0\ncount_nums <- function(arr) {\n\
    \  sum(arr != 0)\n}\nExercise 5\nWrite a function which takes an array of integers\
    \ and returns the number of elements which has a sum of digits == 0.\nIf all numbers\
    \ are negative, then the sum of the digits will be 0.\n>>> count_nums(c())\n0\n\
    >>> count_nums(c(-1, 11, -11))\n0\n>>> count_nums(c(1, 1, 2))\n0\ncount_nums <-\
    \ function(arr) {\n  sum(arr == 0)\n}\nExercise 6\nWrite a function which takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ != 0.\nIf all numbers are negative, then the sum of the digits will be 0.\n\
    >>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n0\n>>> count_nums(c(1,\
    \ 1, 2))\n0\ncount_nums <- function(arr) {\n  sum(arr != 0)\n}\nExercise 7\nWrite\
    \ a function which takes an array of integers and returns the number of elements\
    \ which has a sum of digits == 0.\nIf all numbers are positive, then the sum of\
    \ the digits will be 0.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n\
    0\n>>> count_nums(c(1, 1, 2))\n0\ncount_nums <- function(arr) {\n  sum(", "\n\
    \  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(arr > 0)\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x))\
    \ > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n", "\n  sum(arr > 0)\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x > 0, na.rm = T)))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x > 0) < 0))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x)>0)))\n}\n</cell>\n<cell>", "\n\
    \  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n\
    \  sum(sapply(arr, function(x) sum(x > 0))) > 0\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(sign(x) * x))))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0) < 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n</cell>\n<cell>",
  "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(sign(x) * x))))\n}\n\
    </cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) {\n    sum(x %% 10 > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(arr\
    \ > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0) < 0))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(x %/% 10 > 0)))\n}\n", "\n  sum(sapply(arr, function(x) x >\
    \ 0))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %% 10 > 0)\n  }))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(arr\
    \ > 0)\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0))) > 0\n\
    }\n", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)>0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x\
    \ > 0))\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x %% 10 > 0)\n  }))\n}\n", "\n  sum(arr > 0)\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0) < 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(sign(x) * x))))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(sign(x) * x))))\n}\n</cell>\n<cell>", "\n  sum(arr > 0)\n}\n",
  "\n  sum(sapply(arr, function(x) sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)>0)))\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)) > 0)\n}\n", "\n  sum(arr %/% 10 > 0)\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(x > 0) < 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\
    \ - 1\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n\
    \  }))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>", "\n\
    \  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x\
    \ > 0))) > 0\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0) < 0))\n}\n</cell>\n\
    <cell>", "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x)\
    \ > 0)))\n}\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1,\
    \ 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits > 0.\n\n\n</text>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr, function(x) sum(x > 0)\
    \ < 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0) & as.integer(x) < 10))\n}\n</cell>\n<cell>\n\
    count_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n\
    <cell>\ncount_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\n\
    count_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123,\
    \ -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456,\
    \ -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7,\
    \ 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7, 0, -9,\
    \ -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7, 0, -9, -10,\
    \ -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7, 0, -9, -10, -100,\
    \ -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n\
    </cell>\n<cell>\ncount_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n\
    <cell>\ncount_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\n\
    count_nums(c(123, -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123,\
    \ -456, -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456,\
    \ -7, 0, -9, -10, -100, -1000))\n</cell>\n<cell>\ncount_nums(c(123, -456, -7,\
    \ 0, -9, -10, -100, -1000))\n</cell>\n<", "\n  sum(arr > 0)\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x) > 0)))\n}\n", "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0))) > 0\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)>0)))\n}\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n\
    <cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n\
    </cell>\n<text>\nExercise: Write a function that takes an array of integers and\
    \ returns the number of elements which has a sum of digits < 0.\nIf any number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1, 11, -11))\n\
    1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <- function(arr) {\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x)<0)))\n}\n\n</text>\n<cell>\ncount_nums <- function(arr)\
    \ {\n  sum(sapply(arr, function(x) sum(as.integer(x)<0)))\n}\n</cell>\n<cell>\n\
    count_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\n\
    count_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise: Write a function that takes\
    \ an array of integers and returns the number of elements which has a sum of digits\
    \ == 0.\nIf any number is 0, then its first signed digit will be 0:\ne.g. -123\
    \ has signed digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>> count_nums(c(-1,\
    \ 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\ncount_nums <- function(arr) {\n\
    \  sum(sapply(arr, function(x) sum(as.integer(x)==0)))\n}\n\n</text>\n<cell>\n\
    count_nums <- function(arr) {\n  sum(sapply(arr, function(x) sum(as.integer(x)==0)))\n\
    }\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an array of integers and returns the number of elements which has\
    \ a sum of digits != 0.\nIf any number is 0, then its first signed digit will\
    \ be 0:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(c())\n0\n>>>\
    \ count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c", "\n  sum(sapply(arr, function(x)\
    \ sum(x > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n</cell>\n<text>\n\
    Now let's try it out with some test cases:\n\n\n</text>\n<cell>\ncount_nums(c(1,\
    \ 2, 3))\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ 1, 2))\n</cell>\n<text>\nNow let's try it out with some test cases:\n\n\n</text>\n\
    <cell>\ncount_nums(c(1, 2, 3))\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nNow let's try it out\
    \ with some test cases:\n\n\n</text>\n<cell>\ncount_nums(c(1, 2, 3))\n</cell>\n\
    <cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n\
    </cell>\n<text>\nNow let's try it out with some test cases:\n\n\n</text>\n<cell>\n\
    count_nums(c(1, 2, 3))\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n\
    <cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nNow let's try it out with some\
    \ test cases:\n\n\n</text>\n<cell>\ncount_nums(c(1, 2, 3))\n</cell>\n<cell>\n\
    count_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n\
    <text>\nNow let's try it out with some test cases:\n\n\n</text>\n<cell>\ncount_nums(c(1,\
    \ 2, 3))\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1,\
    \ 1, 2))\n</cell>\n<text>\nNow let's try it out with some test cases:\n\n\n</text>\n\
    <cell>\ncount_nums(c(1, 2, 3))\n</cell>\n<cell>\ncount_nums(c(-1, 11, -11))\n\
    </cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nNow let's try it out\
    \ with some test cases:\n\n\n</text>\n<cell>\ncount_nums(c(1, 2, 3))\n</cell>\n\
    <cell>\ncount_nums(c(-1, 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n\
    </cell>", "\n  sum(arr > 0)\n}\n", "\n  sum(sapply(arr, function(x) x > 0))\n\
    }\n", "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0) & x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) sum(as.integer(x) > 0)))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) sum(x > 0))) > 0\n}\n</cell>\n<cell>\ncount_nums(c(1,2,3))\n\
    </cell>\n<cell>\ncount_nums(c(1,2,-3))\n</cell>\n<cell>\ncount_nums(c(-1,2,3))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3))\n</cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11))\n</cell>\n<cell>\n\
    count_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12))\n</cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22))\n\
    </cell>\n<cell>\ncount_nums(c(-1,2,-3,-4,-5,-6,-7,-8,-9,", "\n  sum(sapply(arr,\
    \ function(x) sum(x %/% 10 > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ sum(as.integer(x)>0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x)\
    \ x > 0))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) x > 0))\n}\n",
  "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n</cell>\n<cell>",
  "\n  sum(sapply(arr, function(x) {\n    sum(x > 0)\n  }))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n", "\n  sum(sapply(arr, function(x) {\n    sum(x %/%\
    \ 10 > 0)\n  }))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr, function(x) sum(x\
    \ > 0) < 0))\n}\n</cell>\n<cell>\ncount_nums(c())\n</cell>\n<cell>\ncount_nums(c(-1,\
    \ 11, -11))\n</cell>\n<cell>\ncount_nums(c(1, 1, 2))\n</cell>\n<text>\nExercise:\
    \ Write a function that takes an array of integers and returns the number of elements\
    \ which has a sum of digits < 0.\nIf any number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(c())\n\
    0\n>>> count_nums(c(-1, 11, -11))\n1\n>>> count_nums(c(1, 1, 2))\n3\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n\
    2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1, 2, -3))\n2\n>>> count_nums(c(-1,\
    \ 2, -", "\n  sum(sapply(arr, function(x) x > 0))\n}\n", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(x) > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) sum(as.integer(sign(x)) > 0)))\n}\n</cell>\n<cell>", "\n  sum(sapply(arr,\
    \ function(x) x > 0))\n}\n</cell>\n<cell>"]
stop_tokens:
- "\n#"
- "\n```"
