name: HumanEval_74_total_match
language: r
prompt: "# Write a function that accepts two lists of strings and returns the list\
  \ that has \n# total number of chars in the all strings of the list less than the\
  \ other list.\n# if the two lists have the same number of chars, return the first\
  \ list.\n# Examples\n# >>> total_match(c(), c())\n# list()\n# >>> total_match(c('hi',\
  \ 'admin'), c('hI', 'Hi'))\n# list('hI', 'Hi')\n# >>> total_match(c('hi', 'admin'),\
  \ c('hi', 'hi', 'admin', 'project'))\n# list('hi', 'admin')\n# >>> total_match(c('hi',\
  \ 'admin'), c('hI', 'hi', 'hi'))\n# list('hI', 'hi', 'hi')\n# >>> total_match(c('4'),\
  \ c('1', '2', '3', '4', '5'))\n# list('4')\ntotal_match <- function(lst1, lst2)\
  \ {"
tests: "test_humaneval <- function() {\ncandidate <- total_match\n    if(!identical(candidate(c(),\
  \ c()), list())){quit('no', 1)}\n    if(!identical(candidate(c('hi', 'admin'), c('hi',\
  \ 'hi')), list('hi', 'hi'))){quit('no', 1)}\n    if(!identical(candidate(c('hi',\
  \ 'admin'), c('hi', 'hi', 'admin', 'project')), list('hi', 'admin'))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c('4'), c('1', '2', '3', '4', '5')), list('4'))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c('hi', 'admin'), c('hI', 'Hi')), list('hI',\
  \ 'Hi'))){quit('no', 1)}\n    if(!identical(candidate(c('hi', 'admin'), c('hI',\
  \ 'hi', 'hi')), list('hI', 'hi', 'hi'))){quit('no', 1)}\n    if(!identical(candidate(c('hi',\
  \ 'admin'), c('hI', 'hi', 'hii')), list('hi', 'admin'))){quit('no', 1)}\n    if(!identical(candidate(c(),\
  \ c('this')), list())){quit('no', 1)}\n    if(!identical(candidate(c('this'), c()),\
  \ list())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  if(length(lst1) != length(lst2)) {\n    stop('lists have different\
    \ lengths')\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 <\
    \ lst2)[1]]\n  } else {\n    lst1[which(lst2 < lst1)[1]]\n  }\n}\n</cell>\n<cell>",
  "\n  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1[order(lst1)]\n  } else {\n\
    \    lst2[order(lst2)]\n  }\n}\n</cell>\n<cell>", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    I like your solution, but I believe it would be better to return the list with\
    \ the smallest number of elements. I added a solution to my answer that does that.\n\
    <|/ c |>\n<| c |>\nThanks for your comment. I added a solution that returns the\
    \ list with the smallest number of elements.\n<|/ c |>\n<| a tags=r |>\nHere's\
    \ a solution using base R:\n<code>\ntotal_match <- function(lst1, lst2) {\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using dplyr and purrr:\n<code>\n\
    library(dplyr)\nlibrary(purrr)\n\ntotal_match <- function(lst1, lst2) {\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n\nlst1 <- list(\"\
    hi\", \"admin\")\nlst2 <- list(\"hI\", \"Hi\")\n\ntotal_match(lst1, lst2)\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\nHere's a solution using base R:\n<code>\ntotal_match\
    \ <- function(lst1, lst2) {\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n\nlst1 <- list(\"hi\", \"admin\")\nlst2 <- list(\"hI\"\
    , \"Hi\")\n\ntotal_match(lst1, lst2)\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    Here's a solution using dplyr and purrr:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ntotal_match <- function(lst1, lst2) {\n  if(length(lst1) != length(lst2)) {\n\
    \    stop('lists have different lengths')\n  }\n  if(length(lst1) == length(lst2))\
    \ {", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different\
    \ lengths\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n\
    \  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1)\
    \ {\n    \n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n    \n    if(lst2[1]\
    \ < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n\
    \  }\n  \n  if(length(lst1) == 2) {\n    \n    if(lst1[1] < lst2[1]) {\n     \
    \ return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2)\
    \ == 2) {\n    \n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n\
    \      return(lst1)\n    }\n  }\n  \n  if(length(lst1) == 3) {\n    \n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n\
    \  }\n  \n  if(length(lst2) == 3) {\n    \n    if(lst2[1] < lst1[1]) {\n     \
    \ return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  \n  if(length(lst1)\
    \ == 4) {\n    \n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n\
    \      return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 4) {\n    \n    if(lst2[1]\
    \ < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n\
    \  }\n  \n  if(length(lst1) == 5) {\n    \n    if(lst1[1] < lst2[1]) {\n     \
    \ return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2)\
    \ == 5) {\n    \n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n\
    \      return(lst1)\n    }\n  }\n  \n  if(length(lst1) == 6) {\n    \n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n\
    \  }\n  \n  if(length(lst2) == 6) {\n    \n    if(lst", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  i <- 1\n  \n  while(i <= length(lst1)) {\n    if(lst1[i]\
    \ < lst2[i]) {\n      lst1 <- lst1[-i]\n      i <- i - 1\n    } else {\n     \
    \ lst2 <- lst2[-i]\n      i <- i - 1\n    }\n  }\n  \n  return(lst1)\n}\n", "\n\
    \  \n  if(length(lst1) != length(lst2)) {\n    stop(\"The two lists must have\
    \ the same length\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n \
    \ }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    \n    if(length(lst2)\
    \ == 2) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 3) {\n\
    \      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 4) {\n      return(lst1[[1]])\n\
    \    }\n    \n    if(length(lst2) == 5) {\n      return(lst1[[1]])\n    }\n  \
    \  \n    if(length(lst2) == 6) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2)\
    \ == 7) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 8) {\n\
    \      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 9) {\n      return(lst1[[1]])\n\
    \    }\n    \n    if(length(lst2) == 10) {\n      return(lst1[[1]])\n    }\n \
    \   \n    if(length(lst2) == 11) {\n      return(lst1[[1]])\n    }\n    \n   \
    \ if(length(lst2) == 12) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2)\
    \ == 13) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 14) {\n\
    \      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 15) {\n      return(lst1[[1]])\n\
    \    }\n    \n    if(length(lst2) == 16) {\n      return(lst1[[1]])\n    }\n \
    \   \n    if(length(lst2) == 17) {\n      return(lst1[[1]])\n    }\n    \n   \
    \ if(length(lst2) == 18) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2)\
    \ == 19) {\n      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 20) {\n\
    \      return(lst1[[1]])\n    }\n    \n    if(length(lst2) == 21) {\n      return(lst1[[1]])\n\
    \    }\n    \n    if(length(lst2) == 22) {\n      return(lst1[[1]])\n    }\n \
    \   \n    if(length(lst2) == 23) {\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n\
    \    lst1\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</cell>\n<cell>",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have same length\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(list())\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[2] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 2) {\n    if(lst1[2] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[2] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 3) {\n    if(lst1[2] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 4) {\n    if(lst1[3] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 4) {\n    if(lst1[3] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[4] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 5) {\n    if(lst1[4] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 6) {\n    if(lst1[5] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 6) {\n    if(lst1[5] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 7) {\n    if(lst1[6] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[2]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[2]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[2]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[2]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[[2]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[3]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[3]]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[3]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[3]]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[3]]\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[4]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[4]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[4]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[4]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[4]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[5]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[5]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[5]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[5]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[[5]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[6]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[6]]\n  }\n  ", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 2) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 3) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 4) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 4) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 5) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 6) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 6) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 7) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return", "\n  \n  if(length(lst1) != length(lst2)) {\n  \
    \  stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n\
    \    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n  \
    \  lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n\
    \    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n\
    \    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"The two lists must have the same length.\")\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- sort(lst1)\n\
    \    lst2 <- sort(lst2)\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n    \n    return(lst1)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    \n    lst1 <- sort(lst1)\n    lst2 <- sort(lst2)\n  \
    \  \n    lst1 <- lst1[lst1 < lst2]\n    \n    if(length(lst1) == 0) {\n      return(lst2)\n\
    \    }\n    \n    return(lst1)\n  }\n  \n  if(length(lst1) < length(lst2)) {\n\
    \    \n    lst1 <- sort(lst1)\n    lst2 <- sort(lst2)\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    \n    if(length(lst1) == 0) {\n      return(lst2)\n    }\n    \n\
    \    return(lst1)\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  } else {\n    lst1[which(lst2 < lst1)[1]]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists must have same length\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    }\n    return(lst2)\n  }\n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    }\n    return(lst1)\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[-length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[-length(lst2)]\n  }\n  \n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n\
    \  \n  i <- 1\n  j <- 1\n  \n  while(i < length(lst1) && j < length(lst2)) {\n\
    \    if(lst1[i] < lst2[j]) {\n      lst1 <- lst1[-i]\n      i <- i + 1\n    }\
    \ else {\n      lst2 <- lst2[-j]\n      j <- j + 1\n    }\n  }\n  \n  if(i < length(lst1))\
    \ {\n    lst1 <- lst1[-i]\n  }\n  if(j < length(lst2)) {\n    lst2 <- lst2[-j]\n\
    \  }\n  \n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(length(lst2) == 1) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[-length(lst1)]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2 <- lst2[-length(lst2)]\n  }\n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[2]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[2]]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[2]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[2]]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[2]]\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[3]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[3]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[3]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[3]]\n  }\n  if(length(lst2) > length(lst1)) {\n \
    \   lst2[[3]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[4]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[4]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[4]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[4]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[4]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[5]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[5]]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[5]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[5]]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[5]]\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[6]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[6]]\n  }\n\
    \  if(length(lst1) == length(", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different length\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[-length(lst2)]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2 <- lst2[-length(lst1)]\n  }\n  \n  lst1 <- unlist(lst1)\n\
    \  lst2 <- unlist(lst2)\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  \n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst1) == 0) {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    for(i in 1:length(lst2)) {\n      if(lst2[i]\
    \ < lst1[i]) {\n        return(lst2)\n      }\n    }\n  }\n  return(lst1)\n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</cell>\n<cell>", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different length\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n  }\n  \n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst2))]\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  lst1 <- unlist(lst1)\n  lst2 <- unlist(lst2)\n  \n  lst1 <- lst1[lst1\
    \ < lst2]\n  \n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 1) {\n\
    \    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  \n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  \n  lst1 <- lst1[lst1 < lst2]\n \
    \ lst2 <- lst2[lst1 < lst2]\n  \n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[seq_len(length(lst1))]\n  }\n  if(length(lst2) > length(lst1)) {\n \
    \   lst2 <- lst2[seq_len(length(lst2))]\n  }\n  \n  return(lst1)\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) == 1) {\n    lst1 <- c(lst1, lst2)\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2 <- c(lst2, lst1)\n  }\n  \n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[seq_len(length(lst2))]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_len(length(lst1))]\n  }\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  lst1 <- lst1[seq_len(length(lst2)-length(lst1))]\n\
    \  lst2 <- lst2[seq_len(length(lst1)-length(lst2))]\n  \n  lst1 <- unlist(lst1)\n\
    \  lst2 <- unlist(lst2)\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n\
    \  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1\
    \ > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1 == lst2]\n  lst2\
    \ <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n\
    \  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1\
    \ < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2\
    \ <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2\
    \ == lst1]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  \n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have the same length\"\
    )\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 1) {\n    return(lst2)\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1\
    \ <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  \n  total_match <- 0\n  \n  for(i\
    \ in seq_along(lst1)) {\n    for(j in seq_along(lst2)) {\n      if(lst1[i] ==\
    \ lst2[j]) {\n        total_match <- total_match + 1\n      }\n    }\n  }\n  \n\
    \  return(lst1[total_match <= length(lst2)])\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have the same length\")\n  }\n  if(length(lst1) ==\
    \ 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1[seq_along(lst1) < seq_along(lst2)]\n  } else {\n\
    \    lst2[seq_along(lst1) < seq_along(lst2)]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_along(lst1)\
    \ < length(lst2)]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_along(lst2)\
    \ < length(lst1)]\n  }\n  \n  return(lst1[seq_along(lst1) < length(lst2)])\n}\n",
  "\n  \n  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n  \
    \  lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2\
    \ <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <-\
    \ lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!", "\n  \n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"The two lists must have the same length\")\n  }\n\
    \  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n  \
    \  lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2\
    \ <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <-\
    \ lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- ", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"Lists have different lengths\")\n  }\n  \n  if(length(lst1) ==\
    \ 0) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 0) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n\
    \    return(lst1)\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    for(i\
    \ in seq_along(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n    \n    for(i in seq_along(lst2)) {\n      if(lst2[i] < lst1[i])\
    \ {\n        return(lst2)\n      }\n    }\n    \n    return(lst1)\n  }\n  \n \
    \ if(length(lst1) > length(lst2)) {\n    \n    for(i in seq_along(lst1)) {\n \
    \     if(lst1[i] > lst2[i]) {\n        return(lst1)\n      }\n    }\n    \n  \
    \  for(i in seq_along(lst2)) {\n      if(lst2[i] > lst1[i]) {\n        return(lst2)\n\
    \      }\n    }\n    \n    return(lst2)\n  }\n  \n  if(length(lst1) < length(lst2))\
    \ {\n    \n    for(i in seq_along(lst1)) {\n      if(lst1[i] < lst2[i]) {\n  \
    \      return(lst1)\n      }\n    }\n    \n    for(i in seq_along(lst2)) {\n \
    \     if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n    \n  \
    \  return(lst2)\n  }\n  \n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2)) {\n \
    \   lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[2]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[2]]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[2]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[2]]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[2]]\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[3]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[3]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[3]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[3]]\n  }\n  if(length(lst2) > length(lst1)) {\n \
    \   lst2[[3]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[4]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[4]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[4]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[4]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[4]]\n  }\n  if(length(lst1) == 1) {\n    lst1[[5]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2[[5]]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[5]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[5]]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[5]]\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[6]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[6]]\n  }\n\
    \  if(length(lst1) == length(", "\n  \n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1[which(lst1 < lst2)] \n    \n  } else {\n    \n    lst1[which(lst1\
    \ < lst2)] \n    \n  }\n  \n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"Lists must have the same length\")\n  }\n  \n  if(length(lst1) ==\
    \ 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n\
    \    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  \n  if(length(lst1) == 2) {\n    if(lst1[1] < lst2[1]) {\n    \
    \  return(lst1)\n    } else {\n      if(lst2[1] < lst1[1]) {\n        return(lst2)\n\
    \      } else {\n        if(lst1[2] < lst2[2]) {\n          return(lst1)\n   \
    \     } else {\n          return(lst2)\n        }\n      }\n    }\n  }\n  \n \
    \ if(length(lst2) == 2) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n \
    \   } else {\n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n      } else\
    \ {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n        } else {\n\
    \          if(lst1[2] < lst2[2]) {\n            return(lst1)\n          } else\
    \ {\n            if(lst2[3] < lst1[3]) {\n              return(lst2)\n       \
    \     } else {\n              return(lst1)\n            }\n          }\n     \
    \   }\n      }\n    }\n  }\n  \n  if(length(lst1) == 3) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      if(lst2[1] < lst1[1]) {\n       \
    \ return(lst2)\n      } else {\n        if(lst1[2] < lst2[2]) {\n          return(lst1)\n\
    \        } else {\n          if(lst2[2] < lst1[2]) {\n            return(lst2)\n\
    \          } else {\n            if(lst1[3] < lst2[3]) {\n              return(lst1)\n\
    \            } else {\n              return(lst2)\n            }\n          }\n\
    \        }\n      }\n    }\n  }\n  \n  if(length(lst2) == 3) {\n    if(lst2[1]\
    \ < lst1[1]) {\n      return(lst2)\n    } else {\n      if(lst1[1] < lst2[1])\
    \ {\n        return(lst1)\n      } else {\n        if(lst2[2] < lst1[2]) {\n \
    \         return(lst2)\n        } else {\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have the same length\")\n  }\n  if(length(lst1) ==\
    \ 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  \n  lst1 <-\
    \ sort(lst1)\n  lst2 <- sort(lst2)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 2) {\n      return(lst1[lst1$name\
    \ < lst2$name])\n    }\n    if(length(lst2) == 3) {\n      return(lst1[lst1$name\
    \ < lst2$name & lst1$name < lst2$name])\n    }\n    if(length(lst2) == 4) {\n\
    \      return(lst1[lst1$name < lst2$name & lst1$name < lst2$name & lst1$name <\
    \ lst2$name])\n    }\n    if(length(lst2) == 5) {\n      return(lst1[lst1$name\
    \ < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name])\n\
    \    }\n    if(length(lst2) == 6) {\n      return(lst1[lst1$name < lst2$name &\
    \ lst1$name < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name & lst1$name\
    \ < lst2$name])\n    }\n    if(length(lst2) == 7) {\n      return(lst1[lst1$name\
    \ < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name\
    \ & lst1$name < lst2$name & lst1$name < lst2$name])\n    }\n    if(length(lst2)\
    \ == 8) {\n      return(lst1[lst1$name < lst2$name & lst1$name < lst2$name & lst1$name\
    \ < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name\
    \ & lst1$name < lst2$name])\n    }\n    if(length(lst2) == 9) {\n      return(lst1[lst1$name\
    \ < lst2$name & lst1$name < lst2$name & lst1$name < lst2$name & lst1$name < ",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(list())\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    lst1 <- lst1[[1]]\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2 <- lst2[[1]]\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2)-1)]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1)-1)]\n  }\n  \n  lst1\
    \ <- lst1[seq_along(lst1) < length(lst2)]\n  lst2 <- lst2[seq_along(lst2) < length(lst1)]\n\
    \  \n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n    if(length(lst1) == 1) {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    for(i in 1:length(lst2)) {\n      if(lst1[i]\
    \ < lst2[i]) {\n        return(lst2)\n      }\n    }\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    lst1 <- c(lst1, lst2)\n    lst2 <- list()\n\
    \  }\n  if(length(lst2) == 1) {\n    lst2 <- c(lst2, lst1)\n    lst1 <- list()\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[-length(lst1)]\n \
    \ }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[-length(lst2)]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[order(lst1)]\n    lst2\
    \ <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    lst1 <- lst1[order(lst1)]\n    lst", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n\
    \  \n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ length\")\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n \
    \ else {\n    lst1[[1]][lst1[[1]] <= lst2[[1]]]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[-length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[-length(lst2)]\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2))]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1))]\n\
    \  }\n  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n\
    \  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1)\
    \ {\n    lst1 <- c(lst1, lst2)\n  }\n  \n  if(length(lst2) == 1) {\n    lst2 <-\
    \ c(lst2, lst1)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[1:length(lst2)]\n\
    \  }\n  \n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[1:length(lst1)]\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1\n  }\n  \n  if(length(lst2)\
    \ == length(lst1)) {\n    lst2 <- lst2\n  }\n  \n  lst1 <- sort(lst1)\n  lst2\
    \ <- sort(lst2)\n  \n  lst1 <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n\
    \  \n  lst1 <- lst1[lst1 < lst2]\n  \n  return(lst1)\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n", "\n  \n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- lst1[[1]]\n\
    \    lst2 <- lst2[[1]]\n    \n    lst1 <- unlist(strsplit(lst1, \"\"))\n    lst2\
    \ <- unlist(strsplit(lst2, \"\"))\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n\
    \    lst1 <- lst1[lst1 != \"\"]\n    \n    return(lst1)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n\
    \    lst1 <- unlist(strsplit(lst1, \"\"))\n    lst2 <- unlist(strsplit(lst2, \"\
    \"))\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 != \"\"\
    ]\n    \n    return(lst1)\n  }\n  \n  if(length(lst1) < length(lst2)) {\n    \n\
    \    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- unlist(strsplit(lst1,\
    \ \"\"))\n    lst2 <- unlist(strsplit(lst2, \"\"))\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 != \"\"]\n    \n    return(lst1)\n  }\n\
    \  \n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must\
    \ have same length\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n   \
    \ \n    lst1 <- unlist(strsplit(lst1, \"\"))\n    lst2 <- unlist(strsplit(lst2,\
    \ \"\"))\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n    return(lst1)\n  }\n \
    \ \n  stop(\"Lists must have same length\")\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(length(lst1) == 1) {\n      return(lst1)\n    }\n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[length(lst2)]\n    lst2 <- lst2[length(lst1)]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst1 <- lst1[length(lst1)]\n    lst2 <- lst2[length(lst2)]\n\
    \  }\n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  \n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[seq_len(length(lst1)-1)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_len(length(lst2)-1)]\n  }\n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[1]]\n  }\n  else {\n    lst1[[1]][lst1[[1]] %in% lst2[[1]]]\n \
    \ }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have\
    \ different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have\
    \ same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n  \
    \  lst1 <- lst1[seq_len(length(lst1))]\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[seq_len(length(lst2))]\n  }\n  \n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[seq_len(length(lst1))]\n  }\n  \n  lst1 <- unlist(lst1)\n  lst2\
    \ <- unlist(lst2)\n  \n  lst1 <- lst1[lst1 < lst2]\n  \n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  \n  return(lst1)\n}\n", "\n  \n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  \n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  \n\
    \  i <- 0\n  \n  while(i < length(lst1)) {\n    if(lst1[i] < lst2[i]) {\n    \
    \  lst1 <- lst1[-i]\n      i <- i - 1\n    } else {\n      lst2 <- lst2[-i]\n\
    \      i <- i - 1\n    }\n  }\n  \n  lst1\n}\n", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  \n  if(length(lst1) == 1)\
    \ {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- lst1[[1]]\n\
    \    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n\
    \    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n\
    \    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1\
    \ <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n\
    \    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n\
    \    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n\
    \    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1\
    \ <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1\
    \ == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2\
    \ <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1\
    \ == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 ", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different length\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n   \
    \ return(lst2)\n  }\n  if(length(lst1) > length(lst2)) {\n    for(i in 1:length(lst2))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst2)\n      }\n    }\n   \
    \ return(lst1)\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different length\")\n  }\n  if(length(lst1) == length(lst2)) {\n  \
    \  lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1)\
    \ {\n      lst1\n    } else {\n      lst2\n    }\n  }\n  if(length(lst2) == 1)\
    \ {\n    if(length(lst1) == 1) {\n      lst2\n    } else {\n      lst1\n    }\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1\n  } else {\n    lst2\n \
    \ }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[[1]]\n  }\n  else {\n    lst1[[1]][lst1[[1]] %in%\
    \ lst2[[1]]]\n  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(list())\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] >\
    \ lst2[1]) {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(lst2[1]\
    \ > lst1[1]) {\n      return(lst2)\n    }\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    for(i in 1:length(lst1)) {\n      if(lst1[i] > lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n  }\n  if(length(lst2) == length(lst1)) {\n    for(i in 1:length(lst2))\
    \ {\n      if(lst2[i] > lst1[i]) {\n        return(lst2)\n      }\n    }\n  }\n\
    \  return(list())\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists must have the same length\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_along(lst1) < length(lst2)]\n  }\n \
    \ if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[seq_along(lst1)\
    \ < length(lst2)]\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n  }\n  \n\
    \  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2) == 1) {\n\
    \    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_along(lst1)\
    \ < length(lst2)]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_along(lst2)\
    \ < length(lst1)]\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    lst1 <-\
    \ lst1[seq_along(lst1) < length(lst2)]\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n  \
    \  lst1 <- lst1[seq_along(lst1) < length(lst2)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[seq_along(lst1) < length(lst2)]\n    lst2\
    \ <- lst2[seq_along(lst2) < length(lst1)]\n  }\n  \n  if(length(lst1) == 1) {\n\
    \    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n\
    \  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_along(lst1) < length(lst2)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_along(lst", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</cell>\n<cell>", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists must have the same length\")\n  }\n  \n\
    \  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2) == 0)\
    \ {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  \n  if(length(lst1) == 2) {\n    if(lst1[1] <\
    \ lst2[1]) {\n      return(lst1)\n    } else {\n      if(lst1[2] < lst2[2]) {\n\
    \        return(lst1)\n      } else {\n        return(lst2)\n      }\n    }\n\
    \  }\n  \n  if(length(lst2) == 2) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      if(lst1[2] < lst2[2]) {\n        return(lst2)\n      } else\
    \ {\n        if(lst1[3] < lst2[3]) {\n          return(lst1)\n        } else {\n\
    \          return(lst2)\n        }\n      }\n    }\n  }\n  \n  if(length(lst1)\
    \ == 3) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   if(lst1[2] < lst2[2]) {\n        return(lst1)\n      } else {\n        if(lst1[3]\
    \ < lst2[3]) {\n          return(lst1)\n        } else {\n          if(lst1[4]\
    \ < lst2[4]) {\n            return(lst1)\n          } else {\n            return(lst2)\n\
    \          }\n        }\n      }\n    }\n  }\n  \n  if(length(lst2) == 3) {\n\
    \    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n      if(lst1[2]\
    \ < lst2[2]) {\n        return(lst2)\n      } else {\n        if(lst1[3] < lst2[3])\
    \ {\n          return(lst2)\n        } else {\n          if(lst1[4] < lst2[4])\
    \ {\n            return(lst2)\n          } else {\n            if(lst1[5] < lst2[5])\
    \ {\n              return(lst1)\n            } else {\n              return(lst2)\n\
    \            }\n          }\n        }\n      }\n    }\n  }\n  \n  if(length(lst1)\
    \ == 4) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   if(lst", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have\
    \ the same length\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n\
    \  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  lst1 <- lst1[[1]]\n\
    \  lst2 <- lst2[[1]]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n\
    \  \n  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1\
    \ == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2\
    \ <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2\
    \ == lst1]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  \n\
    \  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1\
    \ == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2\
    \ <- lst2[lst2 < lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 >\
    \ lst1]\n  \n  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  \n\
    \  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  \n  lst1 <- lst1[lst1\
    \ > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n  lst1 <- lst1[lst1 == lst2]\n  lst2\
    \ <- lst2[lst2 == lst1]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  \n  lst1 <- lst1[lst1 > lst2]\n  lst2 <- lst2[lst2 > lst1]\n  \n\
    \  lst1 <- lst1[lst1 == lst2]\n  lst2 <- lst2[lst2 == lst1]\n  ", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  lst1 <- unlist(lst1)\n  lst2 <- unlist(lst2)\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  lst1 <- lst1[lst1 < lst2]\n  \n  return(lst1)\n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have the same length\"\
    )\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2)) {\n \
    \   \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[lst1 > lst2]\n\
    \    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst2 == lst1]\n    \n    return(lst1)\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  } else {\n    lst1[which(lst1 == lst2)[1]]\n  }\n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 1) {\n    return(lst2)\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"The two lists must have the same length\")\n  }\n  \n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n\
    \    if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  \n  if(lst1[1] > lst2[1]) {\n    return(lst1)\n  } else {\n   \
    \ return(lst2)\n  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  \n  if(length(lst1) == length(lst2)) {\n  \
    \  \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <-\
    \ lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n  \
    \  lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <-\
    \ lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n \
    \   lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n   \
    \ lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <-\
    \ lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 >\
    \ 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    lst1\n  } else {\n    lst1[which(lst1 <\
    \ lst2)[1]]\n  }\n}\n</cell>\n<cell>", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n\
    \    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1) ==\
    \ 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) <\
    \ length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst2) ==\
    \ 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2))\
    \ {\n    lst2[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n  if(", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[length(lst1):length(lst2)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[length(lst2):length(lst1)]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n\
    \  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have the same\
    \ length\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n \
    \ if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[lst1 > lst2]\n\
    \    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst2 == lst1]\n    \n    return(lst1)\n  }\n  \n  stop(\"lists must\
    \ have the same length\")\n}\n", "\n  if(length(lst1) != length(lst2)) {\n   \
    \ stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n   \
    \ lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1) == 1)\
    \ {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    lst1[[1]][lst1[[1]] <= lst2[[1]]]\n  }\n  if(length(lst1) < length(lst2))\
    \ {\n    lst2[[1]][lst2[[1]] <= lst1[[1]]]\n  }\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThank you for your answer. I am not able to understand how this works.\
    \ Can you please explain it in a simpler way?\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for your\
    \ answer. I am not able to understand how this works. Can you please explain it\
    \ in a simpler way?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n",
  "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different lengths\"\
    )\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2)) {\n \
    \   \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[lst2\
    \ < lst1]\n    lst2 <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[lst2 > lst1]\n\
    \    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2\
    \ <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2\
    \ != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n\
    \    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n\
    \    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n    lst1\
    \ <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2\
    \ != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n\
    \    lst2 <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2\
    \ <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2\
    \ != lst1]\n    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n\
    \    \n    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n\
    \    lst1 <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n    lst1\
    \ <- lst1[lst2 != lst1]\n    lst2 <- lst2[lst2 != lst1]\n    \n    lst1 <- lst1[lst2 ",
  "\n  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</cell>\n<cell>", "\n  \n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have same length\"\
    )\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n  \
    \  lst1 <- lst1[seq_len(length(lst1))]\n  }\n  \n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_len(length(lst2))]\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1 <- lst1[seq_len(length(lst1))]\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n  \
    \  lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <-\
    \ lst1[lst1 == lst2]\n    lst2 <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[lst1\
    \ > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[lst1 == lst2]\n\
    \    lst2 <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2\
    \ <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2\
    \ > lst1]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst2 == lst1]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n  \
    \  lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <-\
    \ lst1[lst1 == lst2]\n    lst2 <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[lst1 > lst2]\n\
    \    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- ", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 1) {\n    return(lst2)\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1\
    \ <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  \n  lst1 <- lst1[[1]]\n  lst2 <-\
    \ lst2[[1]]\n  \n  lst1 <- unlist(strsplit(lst1, \"\"))\n  lst2 <- unlist(strsplit(lst2,\
    \ \"\"))\n  \n  lst1 <- lst1[lst1 < lst2]\n  \n  return(lst1)\n}\n", "\n  \n \
    \ if(length(lst1) != length(lst2)) {\n    stop(\"lists have different length\"\
    )\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n  \
    \  lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2\
    \ <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <-\
    \ lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[seq_along(lst1)[lst1 < lst2]]\n  } else {\n    lst1[seq_along(lst1)[lst1\
    \ < lst2]]\n  }\n}\n</cell>\n<text>\nExercise: Write a function that accepts a\
    \ string and returns the number of chars in the string.\n\n\n</text>\n<cell>",
  "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"The lists have different\
    \ lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <-\
    \ lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else\
    \ {\n        if(lst1[2] < lst2[2]) {\n          return(lst1)\n        } else {\n\
    \          return(lst2)\n        }\n      }\n    }\n  }\n  if(length(lst2) ==\
    \ 2) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      if(lst1[1]\
    \ < lst2[1]) {\n        return(lst1)\n      } else {\n        if(lst2[2] < lst1[2])\
    \ {\n          return(lst2)\n        } else {\n          if(lst1[2] < lst2[2])\
    \ {\n            return(lst1)\n          } else {\n            if(lst1[3] < lst2[3])\
    \ {\n              return(lst2)\n            } else {\n              return(lst1)\n\
    \            }\n          }\n        }\n      }\n    }\n  }\n  if(length(lst1)\
    \ == 3) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else {\n        if(lst1[2]\
    \ < lst2[2]) {\n          return(lst1)\n        } else {\n          if(lst2[2]\
    \ < lst1[2]) {\n            return(lst2)\n          } else {\n            if(lst1[3]\
    \ < lst2[3]) {\n              return(lst2)\n            } else {\n           \
    \   return(lst1)\n            }\n          }\n        }\n      }\n    }\n  }\n\
    \  if(length(lst2) == 3) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n\
    \    } else {\n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n      } else\
    \ {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n        } else {\n\
    \          if(lst1[2] < lst2[2]) {\n            return(lst1)\n          } else\
    \ {\n            if(", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists\
    \ have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(list())\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  lst1 <- lst1[[1]]\n\
    \  lst2 <- lst2[[1]]\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2))]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1))]\n\
    \  }\n  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists have different\
    \ lengths')\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n\
    \  if(length(lst2) == 1) {\n    if(length(lst1) == 1) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 2)]\n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 2)]\n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 2)]\n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 2)]\n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n   \
    \ lst1 <- lst1[seq(1, length(lst", "\n  \n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"Lists must have same length\")\n  }\n  \n  if(length(lst1) == 1) {\n\
    \    return(lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n\
    \    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) ==\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) <\
    \ length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) ==\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 1) {\n    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <-\
    \ lst2[[1]]\n  }\n  \n  if(length(lst1) < length(lst2)) {\n    lst1 <- lst1[length(lst1):length(lst1)]\n\
    \  }\n  if(length(lst2) < length(lst1)) {\n    lst2 <- lst2[length(lst2):length(lst2)]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\
    \ %in% lst2[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]] %in%\
    \ lst2[[1]] & total_match(lst1[2:length(lst1)], lst2[2:length(lst2)])\n  }\n \
    \ if(length(lst1) < length(lst2)) {\n    lst2[[1]] %in% lst1[[1]] & total_match(lst1[2:length(lst1)],\
    \ lst2[2:length(lst2)])\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n \
    \   return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n    if(length(lst1) == 1) {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[[1]]\n   \
    \ lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[length(lst2)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[length(lst1)]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[length(lst2)]\n  }\n\
    \  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[length(lst1)]\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[length(lst2)]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2 <- lst2[length(lst1)]\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[length(lst2)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[length(lst1)]\n  }\n  if(length(lst1) == length(lst2)) {\n \
    \   lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[length(lst2)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[length(lst1)]\n  }\n  if(length(lst1) == length(lst2)) {\n \
    \   lst1 <- lst1[[1]]", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists\
    \ must have same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n   \
    \ if(lst1[2] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 2) {\n    if(lst1[2] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n   \
    \ if(lst1[3] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 3) {\n    if(lst1[3] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 4) {\n   \
    \ if(lst1[4] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 4) {\n    if(lst1[4] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 5) {\n   \
    \ if(lst1[5] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 5) {\n    if(lst1[5] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 6) {\n   \
    \ if(lst1[6] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 6) {\n    if(lst1[6] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 7) {\n   \
    \ if(lst1[7] < lst2[1]) {\n      return(lst1)\n    } else {\n      ", "\n  \n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have the same length\"\
    )\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  \n  if(length(lst1) == 2) {\n\
    \    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n      if(lst1[2]\
    \ < lst2[2]) {\n        return(lst1)\n      } else {\n        return(lst2)\n \
    \     }\n    }\n  }\n  \n  if(length(lst2) == 2) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    } else {\n      if(lst2[2] < lst1[2]) {\n       \
    \ return(lst2)\n      } else {\n        return(lst1)\n      }\n    }\n  }\n  \n\
    \  if(length(lst1) == 3) {\n    if(lst1[1] < lst2[1]) {\n      if(lst1[2] < lst2[2])\
    \ {\n        return(lst1)\n      } else {\n        return(lst2)\n      }\n   \
    \ } else {\n      if(lst1[2] < lst2[2]) {\n        return(lst2)\n      } else\
    \ {\n        return(lst1)\n      }\n    }\n  }\n  \n  if(length(lst2) == 3) {\n\
    \    if(lst2[1] < lst1[1]) {\n      if(lst2[2] < lst1[2]) {\n        return(lst2)\n\
    \      } else {\n        return(lst1)\n      }\n    } else {\n      if(lst2[2]\
    \ < lst1[2]) {\n        return(lst1)\n      } else {\n        return(lst2)\n \
    \     }\n    }\n  }\n  \n  if(length(lst1) == 4) {\n    if(lst1[1] < lst2[1])\
    \ {\n      if(lst1[2] < lst2[2]) {\n        if(lst1[3] < lst2[3]) {\n        \
    \  return(lst1)\n        } else {\n          return(lst2)\n        }\n      }\
    \ else {\n        return(lst2)\n      }\n    } else {\n      if(lst1[2] < lst2[2])\
    \ {\n        if(lst1[3] < lst2[3]) {\n          return(lst2)\n        } else {\n\
    \          return(lst1)\n        }\n      } else {\n        if(lst1[3] < lst",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 1) {\n    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[-length(lst1)]\n \
    \ }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[-length(lst2)]\n  }\n\
    \  \n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  \n  return(lst1[which(lst1\
    \ == lst2)])\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists\
    \ must have same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[-length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[-length(lst2)]\n  }\n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n\
    \  \n  lst1 <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n  \n  lst1 <- lst1[!duplicated(lst1)]\n\
    \  lst2 <- lst2[!duplicated(lst2)]\n  \n  return(lst1[length(lst1):1])\n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n\
    \  if(length(lst2) == 1) {\n    if(length(lst1) == 1) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 2)]\n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 3)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 3)]\n    lst1 <- lst1[seq(1, length(lst1), by = 4)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 4)]\n    lst1 <- lst1[seq(1, length(lst1), by = 5)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 5)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 6)]\n    lst2 <- lst2[seq(1, length(lst2), by = 6)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 7)]\n    lst2 <- lst2[seq(1, length(lst2), by = 7)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 8)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 8)]\n    lst1 <- lst1[seq(1, length(lst1), by = 9)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 9)]\n    lst1 <- lst1[seq(1, length(lst1), by = 10)]\n  \
    \  lst2 <- lst2[seq(1, length(lst2), by = 10)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 11)]\n    lst2 <- lst2[seq(1, length(lst2), by = 11)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 12)]\n    lst2 <- lst2[seq(1, length(lst2), by = 12)]\n \
    \   lst1 <- lst1[", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists\
    \ have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n \
    \   \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n   \
    \ lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!",
  "\n  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1[seq_along(lst1)[lst1 < lst2]]\n\
    \  } else {\n    lst1[seq_along(lst1)[lst1 < lst2]]\n  }\n}\n", "\n  \n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"The lists have different lengths\")\n  }\n  \n\
    \  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1)\
    \ {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n \
    \   lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2\
    \ <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1\
    \ == lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n  \
    \  lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1\
    \ <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n\
    \    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2\
    \ <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n\
    \    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n  \
    \  lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <-\
    \ lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1\
    \ > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have same length\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 0) {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1) == 0) {\n      return(lst1)\n\
    \    }\n    if(length(lst1) == 1) {\n      return(lst1)\n    }\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  lst1\
    \ <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n  \
    \  lst1 <- lst1[seq_len(length(lst2)-1)]\n  }\n  \n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_len(length(lst1)-1)]\n  }\n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n\
    \  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      lst1[[1]] == lst2[[1]]\n    } else {\n      lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]]\
    \ || lst1[[1]] == lst2[[1]] || lst1[[1]] == lst2[[1]] || lst1[[1]] == ", "\n \
    \ if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have same length\"\
    )\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    lst1 <- c(lst1,\
    \ lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    lst2 <- c(lst2, lst2)\n  }\n\
    \  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2))]\n\
    \  }\n  \n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1))]\n\
    \  }\n  \n  lst1 <- unlist(lst1)\n  lst2 <- unlist(lst2)\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  lst1 <- lst1[seq_len(length(lst2))]\n  lst2 <- lst2[seq_len(length(lst1))]\n\
    \  \n  lst1 <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n  \n  lst1 <- lst1[!duplicated(lst1)]\n\
    \  lst2 <- lst2[!duplicated(lst2)]\n  \n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <-\
    \ lst2[!is.na(lst2)]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst1 < lst2]\n\
    \  \n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  \n  lst1 <-\
    \ lst1[lst1 < lst2]\n  lst2 <- lst2[lst1 < lst2]\n  \n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  \n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst1\
    \ < lst2]\n  \n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  \n\
    \  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst1 < lst2]\n  \n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  \n  lst1 <- lst", "\n  \n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n \
    \   lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <-\
    \ lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 >\
    \ 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n  \
    \  lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <-\
    \ lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n \
    \   lst1 <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n   \
    \ lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <-\
    \ lst1[lst1 > 1]\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists\
    \ have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2)-1)]\n  }\n  \n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1)-1)]\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n  }\n  \n  return(lst1)\n\
    }\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 <\
    \ lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]] + total_match(lst1[which(lst1\
    \ < lst2)[2]], lst2)\n  }\n}\n</cell>\n<cell>", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n\
    \  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have the same length\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(lst1[1] < lst2[1]) {\n    return(lst1)\n  }\
    \ else {\n    return(lst2)\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"Lists must have same length\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have\
    \ same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 0) {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1) == 0) {\n      return(lst2)\n\
    \    }\n    if(length(lst1) == 1) {\n      return(lst1)\n    }\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[length(lst2)]\n    lst2 <- lst2[length(lst2)]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst1 <- lst1[length(lst1)]\n  \
    \  lst2 <- lst2[length(lst1)]\n  }\n  lst1 <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n\
    \  lst1 <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n  return(lst1)\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\
    library(purrr)\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2))\
    \ {\n    lst2 <- lst2[length(lst2):length(lst1)]\n  }\n  \n  if(length(lst1) ==\
    \ length(lst2)) {\n    lst1 <- lst1[length(lst1):length(lst2)]\n  }\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    }\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst2)\n    }\n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n  \
    \  if(lst1[1] > lst2[1]) {\n      return(lst1)\n    }\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 2) {\n    if(lst1[1]\
    \ > lst2[1]) {\n      return(lst2)\n    }\n    if(lst1[1] < lst2[1]) {\n     \
    \ return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[1] > lst2[1])\
    \ {\n      return(lst1)\n    }\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 3) {\n    if(lst1[1] > lst2[1]) {\n      return(lst2)\n\
    \    }\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    }\n  }\n  if(length(lst1)\
    \ == 4) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n    }\n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 4) {\n  \
    \  if(lst1[1] > lst2[1]) {\n      return(lst2)\n    }\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[1]\
    \ > lst2[1]) {\n      return(lst1)\n    }\n    if(lst1[1] < lst2[1]) {\n     \
    \ return(lst2)\n    }\n  }\n  if(length(lst2) == 5) {\n    if(lst1[1] > lst2[1])\
    \ {\n      return(lst2)\n    }\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    }\n  }\n  ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n\
    \    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n   \
    \ if(lst1[2] < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  if(length(lst2) == 2) {\n    if(lst1[2] < lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n   \
    \ if(lst1[2] < lst2[1]) {\n      return(lst1)\n    } else {\n      if(lst1[2]\
    \ < lst2[2]) {\n        return(lst1)\n      } else {\n        return(lst2)\n \
    \     }\n    }\n  }\n  if(length(lst2) == 3) {\n    if(lst1[2] < lst2[1]) {\n\
    \      return(lst2)\n    } else {\n      if(lst1[2] < lst2[2]) {\n        return(lst2)\n\
    \      } else {\n        return(lst1)\n      }\n    }\n  }\n  if(length(lst1)\
    \ == 4) {\n    if(lst1[2] < lst2[1]) {\n      if(lst1[2] < lst2[2]) {\n      \
    \  return(lst1)\n      } else {\n        return(lst2)\n      }\n    } else {\n\
    \      if(lst1[2] < lst2[2]) {\n        return(lst2)\n      } else {\n       \
    \ return(lst1)\n      }\n    }\n  }\n  if(length(lst2) == 4) {\n    if(lst1[2]\
    \ < lst2[1]) {\n      if(lst1[2] < lst2[2]) {\n        return(lst2)\n      } else\
    \ {\n        return(lst1)\n      }\n    } else {\n      if(lst1[2] < lst2[2])\
    \ {\n        return(lst2)\n      } else {\n        return(lst1)\n      }\n   \
    \ }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[2] < lst2[1]) {\n      if(lst1[2]\
    \ < lst2[2]) {\n        if(lst1[2] < lst2[3]) {\n          return(lst1)\n    \
    \    } else {\n          return(lst2)\n        }\n      } else {\n        if(lst1",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different length\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[2] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 2) {\n    if(lst1[2] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[3] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 3) {\n    if(lst1[3] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 4) {\n    if(lst1[4] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 4) {\n    if(lst1[4] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[4] < lst2[1])\
    \ {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst2)\
    \ == 5) {\n    if(lst1[4] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 6) {\n    if(lst1[4] < lst2[1])\
    \ {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst2)\
    \ == 6) {\n    if(lst1[4] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 7) {\n    if(lst1[4] < lst2[1])\
    \ {\n      return(lst2)\n    } else {\n      return", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n   \
    \ return(lst2)\n  }\n  if(length(lst2) == length(lst1)) {\n    for(i in 1:length(lst2))\
    \ {\n      if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n   \
    \ return(lst1)\n  }\n  if(length(lst1) > length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n   \
    \ return(lst2)\n  }\n  if(length(lst2) > length(lst1)) {\n    for(i in 1:length(lst2))\
    \ {\n      if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n   \
    \ return(lst1)\n  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n   \
    \ \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1\
    \ <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1\
    \ == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n\
    \    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n\
    \    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n\
    \    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n    \n    lst1\
    \ <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1\
    \ == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n\
    \    lst2 <- lst2[lst1 < lst2]\n    \n    lst1 <- lst1[lst1 > lst2]\n    lst2\
    \ <- lst2[lst1 > lst2]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1\
    \ == lst2]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst1 < lst2]\n\
    \    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst1 > lst2]\n    \n  \
    \  lst1 <- lst1[lst1 == lst2]\n    lst2 <- lst2[lst1 == lst2]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    lst", "\n  if(length(lst1) != length(lst2)) {\n  \
    \  stop(\"Lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n  \
    \  lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1) == 1)\
    \ {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    lst1[length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[length(lst2)]\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[length(lst1)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2[length(lst2)]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst1[length(lst1)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[length(lst2)]\n  }\n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 2) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 3) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 4) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 5) {\n     \
    \ return(lst1[[1]])\n    }\n    if(length(lst2) == 6) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 7) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 8) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 9) {\n     \
    \ return(lst1[[1]])\n    }\n    if(length(lst2) == 10) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 11) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 12) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 13) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 14) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 15) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 16) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 17) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 18) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 19) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 20) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 21) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 22) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 23) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 24) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 25) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 26) {\n      ", "\n  \n \
    \ if(length(lst1) != length(lst2)) {\n    stop(\"lists must have same length\"\
    )\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    \n    if(lst1[1]\
    \ < lst2[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n\
    \  }\n  \n  if(length(lst2) == 1) {\n    \n    if(lst1[1] < lst2[1]) {\n     \
    \ return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    \n    lst1 <- lst1[-length(lst1)]\n    \n    lst2 <-\
    \ lst2[-length(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n  \
    \  \n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    \n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <-\
    \ lst1[seq(1, length(lst1), by = 2)]\n    \n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 2)]\n    \n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    \n    lst2\
    \ <- lst2[seq(1, length(lst2), by = 2)]\n    \n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    \n    lst2 <- lst2[seq(1, length(lst2), by = 2)]\n    \n    lst1\
    \ <- lst1[seq(1, length(lst1), by = 2)]\n    \n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 2)]\n    \n    lst1 <- lst1[seq(1, length(lst1), by = 2)]\n    \n    lst2\
    \ <- lst2[seq(1, length(lst2), by = 2)]\n    \n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 2)]\n    \n    lst2 <- lst2[", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n\
    \    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1) ==\
    \ 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    lst1[length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[length(lst2)]\n\
    \  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n\
    \    lst2[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[length(lst1)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2[length(lst2)]\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1[length(lst1)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2[length(lst2)]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[length(lst1)]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst1[length(lst1)]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[length(lst1)]\n  }\n  if(length(lst1) < length(lst2))\
    \ {\n    lst1[length(lst1)]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[length(lst1)]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst1[length(lst1)]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[length(lst1)]\n  }\n  if(length(lst1) < length(lst2))\
    \ {\n    lst1[length(lst1)]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[length(lst1)]\n\
    \  }\n  if(length(lst1) < length(lst2)) {\n    lst1[length(lst1)]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[length(lst1)]\n  }\n  if(length(lst1) < length(lst2))\
    \ {\n    lst1[length(lst1)]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[length(lst1)]\n\
    \  }\n  if(length(lst1) < length(lst2)) {", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]][lst1[[1]] <= lst2[[1]]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[[1]][lst2[[1]] <= lst1[[1]]]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[-length(lst1)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[-length(lst2)]\n \
    \ }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n\
    \  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1 <- sort(lst1)\n    lst2 <- sort(lst2)\n    \n    result <-\
    \ list()\n    \n    for(i in seq_along(lst1)) {\n      \n      if(lst1[i] != lst2[i])\
    \ {\n        \n        result[[i]] <- lst1[i]\n        \n      }\n      \n   \
    \ }\n    \n    return(result)\n    \n  }\n  \n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `total_match(c('hi',\
    \ 'admin'), c('hI', 'Hi'))` returns `list('hI', 'Hi')` instead of `list('hi',\
    \ 'admin')`\n<|/ c |>\n<| c |>\nI edited the answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nThis works great! Thank you! I added a\
    \ small modification to make it work for my case: `total_match(c('hi', 'admin'),\
    \ c('hI', 'Hi'))` returns `list('hi', 'admin')` instead of `list('hI', 'Hi')`\n\
    <|/ c |>\n<| c |>\nI edited the answer to fix the bug. Thanks for pointing it\
    \ out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ntotal_match <- function(lst1, lst2)\
    \ {\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=2 |>\n<code>\ntotal_match <- function(lst1, lst2) {\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  }\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\ntotal_match\
    \ <- function(lst1, lst2) {\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2)) {\n \
    \   lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\ntotal_match <- ",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 1) {\n    return(lst2)\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1\
    \ <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[seq_len(length(lst2)-1)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_len(length(lst1)-1)]\n  }\n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  lst1\
    \ <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  lst1\
    \ <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  lst1\
    \ <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2 < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n\
    \  lst2 <- lst2[!is.na(lst2)]\n  lst1 <- lst1[lst1 < lst2]\n  lst2 <- lst2[lst2\
    \ < lst1]\n  lst1 <- lst1[!is.na(lst1)]\n  lst2 <- lst2[!is.na(lst2)]\n  lst1\
    \ <- lst1[lst1 < lst2]\n  lst2 <- lst2[", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  if(length(lst1) == 1) {\n\
    \    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_along(lst1) < length(lst2)]\n  }\n \
    \ if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n\
    \  }\n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n\
    \  else {\n    lst1[[1]]\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n \
    \   return(list())\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    }\n    return(lst2)\n  }\n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[lst1 < lst2]\n    lst2 <- lst2[lst2 < lst1]\n    \n    lst1 <-\
    \ lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[lst1\
    \ > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[lst1 == lst2]\n    lst2\
    \ <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n  \
    \  lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <-\
    \ lst1[lst1 == lst2]\n    lst2 <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2\
    \ <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n  \
    \  lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <-\
    \ lst1[lst1 == lst2]\n    lst2 <- lst2[lst2 == lst1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[lst1 < lst2]\n    lst2\
    \ <- lst2[lst2 < lst1]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[lst1 > lst2]\n    lst2 <- lst2[lst2 > lst1]\n    \n  \
    \  lst1 <- lst1[order(lst1)]", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n  }\n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[length(lst2)]\n  }\n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[length(lst1)]\n  }\n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n\
    \  lst1 <- lst1[lst1 < lst2]\n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have the same length\")\n  }\n  if(length(lst1) ==\
    \ 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n \
    \ }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n   \
    \ return(lst2)\n  }\n  if(length(lst1) > length(lst2)) {\n    for(i in 1:length(lst1))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst2)\n      }\n    }\n   \
    \ return(lst1)\n  }\n  if(length(lst2) > length(lst1)) {\n    for(i in 1:length(lst2))\
    \ {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n   \
    \ return(lst2)\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2)-1)]\n  }\n  \n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1)-1)]\n  }\n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    lst1\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n", "\n  \n\
    \  if(length(lst1) != length(lst2)) {\n    stop('lists have different lengths')\n\
    \  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2)\
    \ == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) == 1) {\n    \n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1))\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 1)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 2)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 3)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 4)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 5)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 6)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 7)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 8)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 9)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 10)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 11)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 12)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 13)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 14)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 15)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 16)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 17)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 18)\
    \ {\n      return(lst2)\n    }\n    \n    if(length(lst2) == length(lst1) + 19)\
    \ {\n      return(lst1)\n    }\n    \n    if(length(lst2) == length(lst1) + 20)\
    \ {\n      ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n\
    \    lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst2) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst1)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst2) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst1)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst2) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst1)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst2) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst1)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst2) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst1)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst1)) {\n    lst1[", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      lst1\n    } else {\n      lst2\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1]) {\n      lst2\n\
    \    } else {\n      lst1\n    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[1]\
    \ < lst2[1]) {\n      lst1\n    } else {\n      lst2\n    }\n  }\n  if(length(lst2)\
    \ == 2) {\n    if(lst2[1] < lst1[1]) {\n      lst2\n    } else {\n      lst1\n\
    \    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[1] < lst2[1]) {\n      lst1\n\
    \    } else {\n      lst2\n    }\n  }\n  if(length(lst2) == 3) {\n    if(lst2[1]\
    \ < lst1[1]) {\n      lst2\n    } else {\n      lst1\n    }\n  }\n  if(length(lst1)\
    \ == 4) {\n    if(lst1[1] < lst2[1]) {\n      lst1\n    } else {\n      lst2\n\
    \    }\n  }\n  if(length(lst2) == 4) {\n    if(lst2[1] < lst1[1]) {\n      lst2\n\
    \    } else {\n      lst1\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[1]\
    \ < lst2[1]) {\n      lst1\n    } else {\n      lst2\n    }\n  }\n  if(length(lst2)\
    \ == 5) {\n    if(lst2[1] < lst1[1]) {\n      lst2\n    } else {\n      lst1\n\
    \    }\n  }\n  if(length(lst1) == 6) {\n    if(lst1[1] < lst2[1]) {\n      lst1\n\
    \    } else {\n      lst2\n    }\n  }\n  if(length(lst2) == 6) {\n    if(lst2[1]\
    \ < lst1[1]) {\n      lst2\n    } else {\n      lst1\n    }\n  }\n  if(length(lst1)\
    \ == 7) {\n    if(lst1[1] < lst2[1]) {\n      lst1\n    } else {\n      lst2\n\
    \    }\n  }\n  if(length(lst2) == 7) {\n    if(lst2[1] < lst1[1]) {\n      lst2\n\
    \    } else {\n      lst1\n    }\n  }\n  if(length(lst1) == 8) {\n    if(lst1[1]\
    \ < ", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists must have same\
    \ length\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst2) < length(lst1)) {\n    lst1[[1]]\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 2) {\n      return(lst1[lst1 < lst2])\n    }\n\
    \    if(length(lst2) == 3) {\n      return(lst1[lst1 < lst2 & lst2 < lst1])\n\
    \    }\n    if(length(lst2) == 4) {\n      return(lst1[lst1 < lst2 & lst2 < lst1\
    \ & lst1 < lst2])\n    }\n    if(length(lst2) == 5) {\n      return(lst1[lst1\
    \ < lst2 & lst2 < lst1 & lst1 < lst2 & lst1 < lst2])\n    }\n    if(length(lst2)\
    \ == 6) {\n      return(lst1[lst1 < lst2 & lst2 < lst1 & lst1 < lst2 & lst1 <\
    \ lst2 & lst1 < lst2])\n    }\n    if(length(lst2) == 7) {\n      return(lst1[lst1\
    \ < lst2 & lst2 < lst1 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2])\n\
    \    }\n    if(length(lst2) == 8) {\n      return(lst1[lst1 < lst2 & lst2 < lst1\
    \ & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2])\n  \
    \  }\n    if(length(lst2) == 9) {\n      return(lst1[lst1 < lst2 & lst2 < lst1\
    \ & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1\
    \ < lst2])\n    }\n    if(length(lst2) == 10) {\n      return(lst1[lst1 < lst2\
    \ & lst2 < lst1 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1\
    \ < lst2 & lst1 < lst2 & lst1 < lst2])\n    }\n    if(length(lst2) == 11) {\n\
    \      return(lst1[lst1 < lst2 & lst2 < lst1 & lst1 < lst2 & lst1 < lst2 & lst1\
    \ < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2 & lst1 < lst2])\n\
    \    }\n    if(length(lst2) == 12) {\n      return(lst1[lst1 < lst", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1[[1]])\n\
    \    }\n    return(lst1)\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1)\
    \ == 1) {\n      return(lst2[[1]])\n    }\n    return(lst2)\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n  }\n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst2))]\n  }\n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    lst1\n  } else {\n    lst1[which(lst1 <\
    \ lst2)[1]]\n  }\n}\n</cell>\n<cell>", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have same length\")\n  }\n  \n  if(length(lst1) ==\
    \ 0) {\n    return(lst2)\n  }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    \n    if(length(lst2) == 1) {\n     \
    \ return(lst1)\n    }\n    \n    if(length(lst2) == 2) {\n      \n      if(lst1[1]\
    \ > lst2[1]) {\n        return(lst1)\n      }\n      \n      if(lst1[1] < lst2[1])\
    \ {\n        return(lst2)\n      }\n      \n      if(lst1[1] == lst2[1]) {\n \
    \       return(lst1)\n      }\n      \n      if(lst1[1] > lst2[1]) {\n       \
    \ return(lst2)\n      }\n      \n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n\
    \      }\n      \n      if(lst1[1] == lst2[1]) {\n        return(lst1)\n     \
    \ }\n      \n      if(lst1[1] > lst2[1]) {\n        return(lst2)\n      }\n  \
    \    \n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n      }\n      \n\
    \      if(lst1[1] == lst2[1]) {\n        return(lst1)\n      }\n      \n     \
    \ if(lst1[1] > lst2[1]) {\n        return(lst2)\n      }\n      \n      if(lst1[1]\
    \ < lst2[1]) {\n        return(lst1)\n      }\n      \n      if(lst1[1] == lst2[1])\
    \ {\n        return(lst1)\n      }\n      \n      if(lst1[1] > lst2[1]) {\n  \
    \      return(lst2)\n      }\n      \n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n\
    \      }\n      \n      if(lst1[1] == lst2[1]) {\n        return(lst1)\n     \
    \ }\n      \n      if(lst1[1] > lst2[1]) {\n        return(lst2)\n      }\n  \
    \    \n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n      }\n      \n\
    \      if(lst1[1] == lst2[1]) {\n        return(lst1)\n      }\n      \n     \
    \ if(lst1[1] > lst2[1]) {\n        return(lst2)\n      }\n      \n      if(lst1[1]\
    \ < lst2[1]) {\n        return(lst1)\n      }\n      \n      if(lst1[1] == lst2[1])\
    \ {\n        return(lst1)\n      }\n      \n      if(", "\n  \n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[seq_len(min(length(lst1), length(lst2)))]\n    lst2 <-\
    \ lst2[seq_len(min(length(lst1), length(lst2)))]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[seq_len(min(length(lst1),\
    \ length(lst2)))]\n    lst2 <- lst2[seq_len(min(length(lst1), length(lst2)))]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[seq_len(min(length(lst1), length(lst2)))]\n    lst2 <- lst2[seq_len(min(length(lst1),\
    \ length(lst2)))]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[seq_len(min(length(lst1), length(lst2)))]\n    lst2 <- lst2[seq_len(min(length(lst1),\
    \ length(lst2)))]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[seq_len(min(length(lst1), length(lst2)))]\n    lst2 <- lst2[seq_len(min(length(lst1),\
    \ length(lst2)))]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[seq_len(min(length(lst1), length(lst2)))]\n    lst2 <- lst2[seq_len(min(length(lst1),\
    \ length(lst", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n\
    \  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1) > length(lst2))\
    \ {\n    lst1 <- lst1[-length(lst1)]\n  }\n  \n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[-length(lst2)]\n  }\n  \n  lst1 <- sort(lst1)\n  lst2 <-\
    \ sort(lst2)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[lst1 < lst2]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <-\
    \ lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n\
    \    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n\
    \    \n    lst1 <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n\
    \    lst1 <- lst1[lst1 == 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1\
    \ <- lst1[lst1 > 1]\n    \n    lst1 <- lst1[order(lst1)]\n    \n    lst1 <- lst1[lst1\
    \ == 1]\n    \n    lst1 <- lst1[", "\n  \n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1) == 1)\
    \ {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- sort(lst1)\n\
    \    lst2 <- sort(lst2)\n    \n    i <- 1\n    \n    while(i < length(lst1)) {\n\
    \      \n      if(lst1[i] == lst2[i]) {\n        \n        i <- i + 1\n      \
    \  \n      } else {\n        \n        i <- i + 1\n        \n      }\n      \n\
    \    }\n    \n    return(lst1)\n    \n  }\n  \n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 0) {\n      return(lst1)\n    }\n    if(length(lst2) == 2) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 3) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 4) {\n      return(lst1)\n    }\n    if(length(lst2) == 5) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 6) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 7) {\n      return(lst1)\n    }\n    if(length(lst2) == 8) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 9) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 10) {\n      return(lst1)\n    }\n    if(length(lst2) == 11) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 12) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 13) {\n      return(lst1)\n    }\n    if(length(lst2) == 14) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 15) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 16) {\n      return(lst1)\n    }\n    if(length(lst2) == 17) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 18) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 19) {\n      return(lst1)\n    }\n    if(length(lst2) == 20) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 21) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 22) {\n      return(lst1)\n    }\n    if(length(lst2) == 23) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 24) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 25) {\n      return(lst1)\n    }\n    if(length(lst2) == 26) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 27) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 28) {\n      return", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists must have the same length\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1 <- lst1[-length(lst1)]\n  }\n  \n  if(length(lst2)\
    \ > length(lst1)) {\n    lst2 <- lst2[-length(lst2)]\n  }\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[which(lst1\
    \ < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n  }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI like your solution, but I believe it would be more\
    \ efficient to just do `lst1[lst1 < lst2]`\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I was thinking about it while writing my answer. Thanks!\n<|/ c |>\n<| c |>\n\
    I like your solution, but I believe it would be more efficient to just do `lst1[lst1\
    \ < lst2]`\n<|/ c |>\n<| c |>\nI like your solution, but I believe it would be\
    \ more efficient to just do `lst1[lst1 < lst2]`\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I believe it would be more efficient to just do `lst1[lst1 < lst2]`\n\
    <|/ c |>\n<| a tags=r,list,string |>\nHere's a solution using sapply and gregexpr:\n\
    <code>\ntotal_match <- function(lst1, lst2) {\n  sapply(lst1, function(x) gregexpr(x,\
    \ lst2)[[1]])\n}\n\ntotal_match(c('hi', 'admin'), c('hI', 'Hi'))", "\n  \n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists must have the same length\")\n  }\n  \n\
    \  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1)\
    \ {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[seq_len(length(lst1))]\n  }\n  \n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[seq_len(length(lst2))]\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    lst1 <- lst1[seq_len(length(lst1))]\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_len(length(lst2))]\n\
    \  \n  lst1 <- lst1[seq_len(length(lst1))]\n  lst2 <- lst2[seq_", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ return(lst1)\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[[1]]\n\
    \    lst2 <- lst2[[1]]\n  }\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1\
    \ <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n\
    \  lst1 <- lst1[[1]]\n  lst2 <- lst2[[1]]\n  ", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[[1]]\n  } else {\n    lst1[[1]][lst1[[1]] %in% lst2[[1]]]\n  }\n\
    }\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[seq_along(lst1) < length(lst2)]\n  }\n  if(length(lst2) > length(lst1))\
    \ {\n    lst2 <- lst2[seq_along(lst2) < length(lst1)]\n  }\n  lst1 <- unlist(lst1)\n\
    \  lst2 <- unlist(lst2)\n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  return(lst1[lst1\
    \ == lst2])\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  if(length(lst1) == 0) {\n    return(list())\n \
    \ }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 2) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 3) {\n     \
    \ return(lst1[[1]])\n    }\n    if(length(lst2) == 4) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 5) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 6) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 7) {\n     \
    \ return(lst1[[1]])\n    }\n    if(length(lst2) == 8) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 9) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 10) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 11) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 12) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 13) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 14) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 15) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 16) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 17) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 18) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 19) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 20) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 21) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 22) {\n      return(lst1[[1]])\n    }\n    if(length(lst2) == 23) {\n   \
    \   return(lst1[[1]])\n    }\n    if(length(lst2) == 24) {\n      return(lst1[[1]])\n\
    \    }\n    if(length(lst2) == 25) {\n      return(lst1[[1]])\n    }\n    if(length(lst2)\
    \ == 26) {\n      ", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists must have the same length\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n    if(lst2[1] <\
    \ lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n\
    \  \n  if(length(lst1) == 2) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else\
    \ {\n        if(lst1[2] < lst2[2]) {\n          return(lst1)\n        } else {\n\
    \          return(lst2)\n        }\n      }\n    }\n  }\n  \n  if(length(lst2)\
    \ == 2) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n   \
    \   if(lst1[1] < lst2[1]) {\n        return(lst1)\n      } else {\n        if(lst2[2]\
    \ < lst1[2]) {\n          return(lst2)\n        } else {\n          if(lst1[2]\
    \ < lst2[2]) {\n            return(lst1)\n          } else {\n            if(lst1[3]\
    \ < lst2[3]) {\n              return(lst2)\n            } else {\n           \
    \   return(lst1)\n            }\n          }\n        }\n      }\n    }\n  }\n\
    \  \n  if(length(lst1) == 3) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else\
    \ {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n        } else {\n\
    \          if(lst1[2] < lst2[2]) {\n            return(lst1)\n          } else\
    \ {\n            if(lst1[3] < lst2[3]) {\n              return(lst2)\n       \
    \     } else {\n              return(lst1)\n            }\n          }\n     \
    \   }\n      }\n    }\n  }\n  \n  if(length(lst2) == 3) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    } else {\n      if(lst1[1] < lst2[1]) {\n       \
    \ return(lst1)\n      } else {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n\
    \        } else {\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists must have same length\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1))]\n\
    \  }\n  \n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst2))]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists have\
    \ different lengths')\n  }\n  if(length(lst1) == 0) {\n    lst1\n  } else {\n\
    \    lst1[which(lst1 < lst2)[1]]\n  }\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n    if(length(lst1) == 1) {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = ", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst1)\
    \ == 2) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else {\n        if(lst1[2]\
    \ < lst2[2]) {\n          return(lst1)\n        } else {\n          return(lst2)\n\
    \        }\n      }\n    }\n  }\n  if(length(lst2) == 2) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    } else {\n      if(lst1[1] < lst2[1]) {\n       \
    \ return(lst1)\n      } else {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n\
    \        } else {\n          return(lst1)\n        }\n      }\n    }\n  }\n  if(length(lst1)\
    \ == 3) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   if(lst2[1] < lst1[1]) {\n        return(lst2)\n      } else {\n        if(lst1[2]\
    \ < lst2[2]) {\n          return(lst1)\n        } else {\n          if(lst2[2]\
    \ < lst1[2]) {\n            return(lst2)\n          } else {\n            if(lst1[3]\
    \ < lst2[3]) {\n              return(lst1)\n            } else {\n           \
    \   return(lst2)\n            }\n          }\n        }\n      }\n    }\n  }\n\
    \  if(length(lst2) == 3) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n\
    \    } else {\n      if(lst1[1] < lst2[1]) {\n        return(lst1)\n      } else\
    \ {\n        if(lst2[2] < lst1[2]) {\n          return(lst2)\n        } else {\n\
    \          if(lst1[2] < lst2[2]) {\n            return(lst1)\n          } else\
    \ {\n            if(lst2[3] < lst1[3]) {\n              return(lst2)\n       \
    \     } else {\n              return(lst1)\n            }\n          }\n     \
    \   }\n      }\n    }\n  }\n  if(length(lst", "\n  \n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  \n  if(length(lst1) ==\
    \ length(lst2)) {\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n\
    \    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop('lists have\
    \ different lengths')\n  }\n  \n  if(length(lst1) == 0) {\n    return(lst2)\n\
    \  }\n  \n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  \n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 1) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) == length(lst2)) {\n    \n    lst1 <- unlist(lst1)\n\
    \    lst2 <- unlist(lst2)\n    \n    lst1 <- sort(lst1)\n    lst2 <- sort(lst2)\n\
    \    \n    lst1 <- lst1[lst1 < lst2]\n    \n    if(length(lst1) == 0) {\n    \
    \  return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"Lists must have same length\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst1)\n  }\n  if(length(lst2) == 0) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 0) {\n      return(lst1)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(length(lst1) == 1) {\n      return(lst1)\n    }\n    if(length(lst1)\
    \ == 0) {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst1) == length(lst2))\
    \ {\n    \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicate",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(list())\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  \n  lst3 <- list()\n  \n  for(i in seq_along(lst1))\
    \ {\n    lst3[[i]] <- lst1[i]\n  }\n  \n  for(i in seq_along(lst2)) {\n    lst3[[i]]\
    \ <- lst2[i]\n  }\n  \n  lst3[[1]] <- lst1[[1]]\n  \n  for(i in seq_along(lst3))\
    \ {\n    lst3[[i]] <- lst3[[i]] - lst2[i]\n  }\n  \n  return(lst3)\n}\n", "\n\
    \  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  \n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  \n  if(length(lst1) == length(lst2)) {\n \
    \   \n    lst1 <- lst1[[1]]\n    lst2 <- lst2[[1]]\n    \n    lst1 <- unlist(strsplit(lst1,\
    \ \"\"))\n    lst2 <- unlist(strsplit(lst2, \"\"))\n    \n    lst1 <- lst1[lst1\
    \ < lst2]\n    \n    lst1 <- lst1[lst1 != \"\"]\n    \n    return(lst1)\n  }\n\
    \  \n  stop(\"lists have different lengths\")\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2))\
    \ {\n    lst1[which(lst1 < lst2)[1]]\n  } else {\n    lst1[which(lst1 < lst2)[1]]\n\
    \  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[seq_along(lst1)[lst1\
    \ < lst2]]\n  } else {\n    lst1[seq_along(lst1)[lst1 < lst2]]\n  }\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,list,string |>\nHere's a base R solution:\n<code>",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[2] < lst2[2])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 2) {\n    if(lst1[2] < lst2[2]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[3] < lst2[3])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 3) {\n    if(lst1[3] < lst2[3]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 4) {\n    if(lst1[4] < lst2[4])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 4) {\n    if(lst1[4] < lst2[4]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[5] < lst2[5])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 5) {\n    if(lst1[5] < lst2[5]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 6) {\n    if(lst1[6] < lst2[6])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 6) {\n    if(lst1[6] < lst2[6]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == 7) {\n    if(lst1[7] < lst2[7])\
    \ {\n      return(lst1)\n    } else {\n      return", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst1[1] < lst2[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 2) {\n    if(lst1[2] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 2) {\n   \
    \ if(lst1[2] < lst2[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  if(length(lst1) == 3) {\n    if(lst1[2] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      if(lst1[3] < lst2[2]) {\n        return(lst1)\n      } else\
    \ {\n        return(lst2)\n      }\n    }\n  }\n  if(length(lst2) == 3) {\n  \
    \  if(lst1[2] < lst2[1]) {\n      return(lst2)\n    } else {\n      if(lst1[3]\
    \ < lst2[2]) {\n        return(lst2)\n      } else {\n        return(lst1)\n \
    \     }\n    }\n  }\n  if(length(lst1) == 4) {\n    if(lst1[2] < lst2[1]) {\n\
    \      if(lst1[3] < lst2[2]) {\n        return(lst1)\n      } else {\n       \
    \ return(lst2)\n      }\n    } else {\n      if(lst1[3] < lst2[2]) {\n       \
    \ return(lst2)\n      } else {\n        return(lst1)\n      }\n    }\n  }\n  if(length(lst2)\
    \ == 4) {\n    if(lst1[2] < lst2[1]) {\n      if(lst1[3] < lst2[2]) {\n      \
    \  return(lst2)\n      } else {\n        return(lst1)\n      }\n    } else {\n\
    \      if(lst1[3] < lst2[2]) {\n        return(lst2)\n      } else {\n       \
    \ return(lst1)\n      }\n    }\n  }\n  if(length(lst1) == 5) {\n    if(lst1[2]\
    \ < lst2[1]) {\n      if(lst1[3] < lst2[2]) {\n        if(lst1[4] < lst2[3]) {\n\
    \          return(lst1)\n        } else {\n          return(lst2)\n        }\n\
    \      } else {\n        return(lst", "\n  if(length(lst1) != length(lst2)) {\n\
    \    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1) ==\
    \ 1) {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2\
    \ <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n   \
    \ lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2),\
    \ by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n    lst2 <- lst2[seq(1,\
    \ length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1), by = 1)]\n   \
    \ lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1, length(lst1),\
    \ by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), by = 1)]\n    lst1 <- lst1[seq(1,\
    \ length(lst1), by = 1)]\n    lst2 <- lst2[seq(1, length(lst2), ", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists must have the same length\")\n  }\n  \n\
    \  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  \n  if(length(lst2) == 1)\
    \ {\n    return(lst2)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[seq_len(length(lst2))]\n  }\n  \n  if(length(lst2) > length(lst1)) {\n\
    \    lst2 <- lst2[seq_len(length(lst1))]\n  }\n  \n  lst1 <- unlist(lst1)\n  lst2\
    \ <- unlist(lst2)\n  \n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  \n  lst1\
    \ <- lst1[order(lst1)]\n  lst2 <- lst2[order(lst2)]\n  \n  lst1 <- lst1[seq_len(length(lst2))]\n\
    \  \n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == 0) {\n    return(list())\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1)\
    \ {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    }\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    for(i in 1:length(lst1)) {\n      if(lst1[i] < lst2[i])\
    \ {\n        return(lst1)\n      }\n    }\n  }\n  if(length(lst2) == length(lst1))\
    \ {\n    for(i in 1:length(lst2)) {\n      if(lst2[i] < lst1[i]) {\n        return(lst2)\n\
    \      }\n    }\n  }\n  return(lst1)\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ return(lst1)\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst1)-1)]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst2)-1)]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1) == 0)\
    \ {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n\
    \  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst2)\n\
    \    } else {\n      return(lst1)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst1)\n    } else {\n      return(lst2)\n\
    \    }\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1) != length(lst2)) {\n  \
    \  stop(\"Lists have different lengths\")\n  }\n  if(length(lst1) == 0) {\n  \
    \  return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    } else {\n   \
    \   return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1) ==\
    \ 1) {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    Lists must have same length\")\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1)\
    \ {\n    lst1 <- lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2 <- lst2[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2))]\n\
    \  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1))]\n\
    \  }\n  lst1 <- unlist(lst1)\n  lst2 <- unlist(lst2)\n  lst1 <- sort(lst1)\n \
    \ lst2 <- sort(lst2)\n  lst1 <- lst1[seq_along(lst1) < length(lst2)]\n  lst2 <-\
    \ lst2[seq_along(lst2) < length(lst1)]\n  return(lst1)\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) > 1) {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(length(lst1) > 1) {\n      return(lst1)\n    }\n    if(length(lst1)\
    \ < 1) {\n      return(lst2)\n    }\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    return(lst1)\n  }\n  if(length(lst1) < length(lst2)) {\n    return(lst2)\n\
    \  }\n  if(length(lst1) == length(lst2)) {\n    for(i in seq_along(lst1)) {\n\
    \      if(lst1[i] < lst2[i]) {\n        return(lst1)\n      }\n    }\n    return(lst2)\n\
    \  }\n}\n", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have\
    \ different lengths\")\n  }\n  \n  if(length(lst1) == 0) {\n    return(list())\n\
    \  }\n  \n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  \n  if(length(lst2) == 0) {\n\
    \    return(list())\n  }\n  \n  if(length(lst2) == 1) {\n    if(lst2[1] < lst1[1])\
    \ {\n      return(lst2)\n    } else {\n      return(lst1)\n    }\n  }\n  \n  if(length(lst1)\
    \ == length(lst2)) {\n    \n    for(i in 1:length(lst1)) {\n      if(lst1[i] <\
    \ lst2[i]) {\n        return(lst1)\n      }\n    }\n    \n    for(i in 1:length(lst2))\
    \ {\n      if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n   \
    \ \n    return(lst1)\n  }\n  \n  if(length(lst1) > length(lst2)) {\n    \n   \
    \ for(i in 1:length(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n    \n    for(i in 1:length(lst2)) {\n      if(lst2[i] < lst1[i])\
    \ {\n        return(lst2)\n      }\n    }\n    \n    return(lst2)\n  }\n  \n}\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst1)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst2)\n  }\n  if(length(lst1) == 1) {\n    if(lst1[1] < lst2[1])\
    \ {\n      return(lst1)\n    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(lst2[1] < lst1[1]) {\n      return(lst2)\n    } else {\n   \
    \   return(lst1)\n    }\n  }\n  if(length(lst1) == length(lst2)) {\n    for(i\
    \ in 1:length(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n    return(lst2)\n  }\n  if(length(lst2) == length(lst1)) {\n\
    \    for(i in 1:length(lst2)) {\n      if(lst2[i] < lst1[i]) {\n        return(lst2)\n\
    \      }\n    }\n    return(lst1)\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    for(i in 1:length(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n    for(i in 1:length(lst2)) {\n      if(lst2[i] < lst1[i]) {\n\
    \        return(lst2)\n      }\n    }\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    for(i in 1:length(lst1)) {\n      if(lst1[i] < lst2[i])\
    \ {\n        return(lst1)\n      }\n    }\n    for(i in 1:length(lst2)) {\n  \
    \    if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n    for(i\
    \ in 1:length(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n    }\n    for(i in 1:length(lst2)) {\n      if(lst2[i] < lst1[i]) {\n\
    \        return(lst2)\n      }\n    }\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == length(lst2)) {\n    for(i in 1:length(lst1)) {\n      if(lst1[i] < lst2[i])\
    \ {\n        return(lst1)\n      }\n    }\n    for(i in 1:length(lst2)) {\n  \
    \    if(lst2[i] < lst1[i]) {\n        return(lst2)\n      }\n    }\n    for(i\
    \ in 1:length(lst1)) {\n      if(lst1[i] < lst2[i]) {\n        return(lst1)\n\
    \      }\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists have different\
    \ lengths\")\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n  }\n  if(length(lst2)\
    \ == 1) {\n    return(lst2)\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1\
    \ <- lst1[-length(lst1)]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2 <-\
    \ lst2[-length(lst2)]\n  }\n  lst1 <- sort(lst1)\n  lst2 <- sort(lst2)\n  \n \
    \ total_match <- 0\n  for(i in seq_along(lst1)) {\n    for(j in seq_along(lst2))\
    \ {\n      if(lst1[i] == lst2[j]) {\n        total_match <- total_match + 1\n\
    \      }\n    }\n  }\n  return(lst1[total_match])\n}\n", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop(\"lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst2) >\
    \ length(lst1)) {\n    lst2[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst2) > length(lst1)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop(\"lists must have the same length\")\n  }\n  if(length(lst1) ==\
    \ 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  \n  if(length(lst1) > length(lst2)) {\n    lst1 <- lst1[seq_len(length(lst2))]\n\
    \  }\n  \n  if(length(lst2) > length(lst1)) {\n    lst2 <- lst2[seq_len(length(lst1))]\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"lists must have the same length\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    return(list())\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n\
    \  }\n  if(length(lst1) == 1) {\n    if(lst1[1] > lst2[1]) {\n      return(lst1)\n\
    \    } else {\n      return(lst2)\n    }\n  }\n  if(length(lst2) == 1) {\n   \
    \ if(lst2[1] > lst1[1]) {\n      return(lst2)\n    } else {\n      return(lst1)\n\
    \    }\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"\
    lists have different lengths\")\n  }\n  if(length(lst1) == length(lst2)) {\n \
    \   lst1[seq_along(lst1)[lst1 < lst2]]\n  } else {\n    lst1[seq_along(lst1)[lst1\
    \ < lst2]]\n  }\n}\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns the number of vowels in the string.\nIf the string has\
    \ less than 3 vowels, return 0.\nIf the string has more than 3 vowels, return\
    \ 3.\nIf the string has 3 or more vowels, return 4.\nExamples\n>>> vowel_count(c('hi'))\n\
    0\n>>> vowel_count(c('hi', 'admin'))\n3\n>>> vowel_count(c('hi', 'admin', 'project'))\n\
    4\n>>> vowel_count(c('4'))\n4\n>>> vowel_count(c('1', '2', '3', '4', '5'))\n4\n\
    </text>\n<cell>", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must\
    \ have same length\")\n  }\n  if(length(lst1) == 0) {\n    lst1\n  }\n  if(length(lst2)\
    \ == 0) {\n    lst2\n  }\n  if(length(lst1) == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2)\
    \ == 1) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n\
    \  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1)\
    \ < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) <\
    \ length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) ==\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) > length(lst2)) {\n \
    \   lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) >\
    \ length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) < length(lst2)) {\n \
    \   lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n    lst1[[1]]\n  }\n\
    \  if(length(lst1) > length(lst2)) {\n    lst1[[1]]\n  }\n  if(length(lst1) <\
    \ length(lst2)) {\n    lst2[[1]]\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1[[1]]\n  }\n  if(length(lst1) > length(lst", "\n  if(length(lst1) !=\
    \ length(lst2)) {\n    stop(\"Lists have different lengths\")\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    lst1[[1]]\n  }\n  if(length(lst2) == 1) {\n    lst2[[1]]\n  }\n\
    \  if(length(lst1) == length(lst2)) {\n    lst1[[1]] %in% lst2[[1]]\n  }\n  if(length(lst1)\
    \ > length(lst2)) {\n    lst1[[1]] %in% lst2[[1]] & total_match(lst1[2:length(lst1)],\
    \ lst2[2:length(lst2)])\n  }\n  if(length(lst1) < length(lst2)) {\n    lst2[[1]]\
    \ %in% lst1[[1]] & total_match(lst1[2:length(lst1)], lst2[2:length(lst2)])\n \
    \ }\n}\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and\
    \ returns the number of times each character appears in the string. \nIf the string\
    \ has more than one character, return the string itself.\nIf the string has zero\
    \ characters, return an empty list.\nExamples\n>>> count_chars('hello')\nlist('h',\
    \ 'e', 'l', 'l', 'o')\n>>> count_chars('hello')\nlist()\n>>> count_chars('')\n\
    list()\n>>> count_chars('hi')\nlist('h', 'i')\n>>> count_chars('hi')\nlist()\n\
    >>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n\
    list()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\nlist()\n>>> count_chars('hi')\n",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    lst1\n  } else {\n    lst1[which(lst1 <\
    \ lst2)[1]]\n  }\n}\n", "\n  if(length(lst1) != length(lst2)) {\n    stop('lists\
    \ have different lengths')\n  }\n  if(length(lst1) == 1) {\n    return(lst1)\n\
    \  }\n  if(length(lst2) == 1) {\n    return(lst2)\n  }\n  \n  lst1 <- sort(lst1)\n\
    \  lst2 <- sort(lst2)\n  \n  i <- 0\n  \n  while(i < length(lst1)) {\n    if(lst1[i]\
    \ != lst2[i]) {\n      break\n    }\n    i <- i + 1\n  }\n  \n  return(lst1[1:i])\n\
    }\n", "\n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists must have same\
    \ length\")\n  }\n  if(length(lst1) == 0) {\n    return(list())\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(lst1[1] < lst2[1]) {\n      return(lst1)\n    }\n  }\n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n \
    \ \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "\n  if(length(lst1)\
    \ != length(lst2)) {\n    stop('lists have different lengths')\n  }\n  if(length(lst1)\
    \ == 0) {\n    lst1\n  }\n  if(length(lst2) == 0) {\n    lst2\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      lst1\n    } else {\n      lst2\n\
    \    }\n  }\n  if(length(lst2) == 1) {\n    if(length(lst1) == 1) {\n      lst2\n\
    \    } else {\n      lst1\n    }\n  }\n  if(length(lst1) == length(lst2)) {\n\
    \    lst1\n  } else {\n    lst2\n  }\n}\n", "\n  if(length(lst1) != length(lst2))\
    \ {\n    stop('lists have different lengths')\n  }\n  if(length(lst1) == 0) {\n\
    \    return(lst2)\n  }\n  if(length(lst2) == 0) {\n    return(lst1)\n  }\n  if(length(lst1)\
    \ == 1) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 2) {\n      return(lst1[lst1$name < lst2[1]])\n    }\n  }\n  if(length(lst2)\
    \ == 1) {\n    if(length(lst1) == 1) {\n      return(lst2)\n    }\n    if(length(lst1)\
    \ == 2) {\n      return(lst2[lst2$name < lst1[1]])\n    }\n  }\n  if(length(lst1)\
    \ == 2) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 2) {\n      return(lst1[lst1$name < lst2[1]] & lst2[lst2$name < lst1[1]])\n\
    \    }\n  }\n  if(length(lst1) == 3) {\n    if(length(lst2) == 1) {\n      return(lst1)\n\
    \    }\n    if(length(lst2) == 2) {\n      return(lst1[lst1$name < lst2[1]] &\
    \ lst2[lst2$name < lst1[1]] & lst2[lst2$name < lst1[2]])\n    }\n  }\n  if(length(lst1)\
    \ == 4) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 2) {\n      return(lst1[lst1$name < lst2[1]] & lst2[lst2$name < lst1[1]]\
    \ & lst2[lst2$name < lst1[2]] & lst2[lst2$name < lst1[3]])\n    }\n  }\n  if(length(lst1)\
    \ == 5) {\n    if(length(lst2) == 1) {\n      return(lst1)\n    }\n    if(length(lst2)\
    \ == 2) {\n      return(lst1[lst1$name < lst2[1]] & lst2[lst2$name < lst1[1]]\
    \ & lst2[lst2$name < lst1[2]] & lst2[lst2$name < lst1[3]] & lst2[lst2$name < lst1[4]]\
    \ & lst2[lst2$name < lst1[5]])\n    }\n  }\n  if(length(lst1) == 6) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 2) {\n      return(lst1[lst1$name ",
  "\n  if(length(lst1) != length(lst2)) {\n    stop(\"lists have different lengths\"\
    )\n  }\n  if(length(lst1) == 0) {\n    return(lst2)\n  }\n  if(length(lst2) ==\
    \ 0) {\n    return(lst1)\n  }\n  if(length(lst1) == 1) {\n    if(length(lst2)\
    \ == 1) {\n      return(lst1)\n    }\n    if(length(lst2) == 2) {\n      return(lst1[lst1\
    \ < lst2])\n    }\n    if(length(lst2) == 3) {\n      return(lst1[lst1 < lst2])\n\
    \    }\n    if(length(lst2) == 4) {\n      return(lst1[lst1 < lst2])\n    }\n\
    \    if(length(lst2) == 5) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2)\
    \ == 6) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 7) {\n\
    \      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 8) {\n      return(lst1[lst1\
    \ < lst2])\n    }\n    if(length(lst2) == 9) {\n      return(lst1[lst1 < lst2])\n\
    \    }\n    if(length(lst2) == 10) {\n      return(lst1[lst1 < lst2])\n    }\n\
    \    if(length(lst2) == 11) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2)\
    \ == 12) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 13)\
    \ {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 14) {\n  \
    \    return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 15) {\n      return(lst1[lst1\
    \ < lst2])\n    }\n    if(length(lst2) == 16) {\n      return(lst1[lst1 < lst2])\n\
    \    }\n    if(length(lst2) == 17) {\n      return(lst1[lst1 < lst2])\n    }\n\
    \    if(length(lst2) == 18) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2)\
    \ == 19) {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 20)\
    \ {\n      return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 21) {\n  \
    \    return(lst1[lst1 < lst2])\n    }\n    if(length(lst2) == 22) {\n      return(lst1[lst1\
    \ < lst2])\n    }\n    if(length(lst2) == 23) {\n      return(lst1[lst1 < lst2])\n\
    \    }\n    if(", "\n  \n  if(length(lst1) != length(lst2)) {\n    stop(\"Lists\
    \ have different lengths\")\n  }\n  \n  if(length(lst1) == length(lst2)) {\n \
    \   \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n   \
    \ lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n\
    \    \n    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n  \
    \  lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n\
    \    lst1 <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1\
    \ <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1\
    \ <- lst1[order(lst1)]\n    lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n\
    \    lst2 <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n  \
    \  lst2 <- lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2\
    \ <- lst2[!duplicated(lst2)]\n    \n    lst1 <- lst1[order(lst1)]\n    lst2 <-\
    \ lst2[order(lst2)]\n    \n    lst1 <- lst1[!duplicated(lst1)]\n    lst2 <- lst2[!"]
stop_tokens:
- "\n#"
- "\n```"
