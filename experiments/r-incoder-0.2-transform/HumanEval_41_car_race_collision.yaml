name: HumanEval_41_car_race_collision
language: r
prompt: "# Imagine a road that's a perfectly straight infinitely long line.\n# n cars\
  \ are driving left to right;  simultaneously, a different set of n cars\n# are driving\
  \ right to left.   The two sets of cars start out being very far from\n# each other.\
  \  All cars move in the same speed.  Two cars are said to collide\n# when a car\
  \ that's moving left to right hits a car that's moving right to left.\n# However,\
  \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
  # in their trajectory as if they did not collide.\n# This function outputs the number\
  \ of such collisions.\ncar_race_collision <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- car_race_collision\n    if(!identical(candidate(2),\
  \ 4)){quit('no', 1)}\n    if(!identical(candidate(3), 9)){quit('no', 1)}\n    if(!identical(candidate(4),\
  \ 16)){quit('no', 1)}\n    if(!identical(candidate(8), 64)){quit('no', 1)}\n   \
  \ if(!identical(candidate(10), 100)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n \
    \     if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n\
    \  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j\
    \ in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions + 1\n  \
    \    }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_1 <- sample(1:n, 1)\n  car_2 <- sample(1:n,\
    \ 1)\n  while (car_1 != car_2) {\n    car_1 <- sample(1:n, 1)\n    car_2 <- sample(1:n,\
    \ 1)\n    if (car_1 == car_2) {\n      collisions <- collisions + 1\n    }\n \
    \ }\n  collisions\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in\
    \ (i+1):n) {\n      if(i != j) {\n        collisions <- collisions + 1\n     \
    \ }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in\
    \ 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n</code>\n<|/ a tags=r,performance,for-loop\
    \ |>\n<| c |>\nI like this solution, but I believe it can be improved by using\
    \ R's vectorized operations. I added an answer with some code to do this.\n<|/\
    \ c |>\n<| a tags=r,performance,for-loop |>\nHere's a vectorized solution that\
    \ uses R's vectorized operations. I added some code to show how it works.\n<code>",
  "\n  n <- n\n  car_race <- function(cars) {\n    car_1 <- cars[1]\n    car_2 <-\
    \ cars[2]\n    car_1_x <- car_1[[1]]\n    car_2_x <- car_2[[1]]\n    car_1_y <-\
    \ car_1[[2]]\n    car_2_y <- car_2[[2]]\n    car_1_xx <- car_1[[3]]\n    car_2_xx\
    \ <- car_2[[3]]\n    car_1_yy <- car_1[[4]]\n    car_2_yy <- car_2[[4]]\n    car_1_xy\
    \ <- car_1[[5]]\n    car_2_xy <- car_2[[5]]\n    car_1_yx <- car_1[[6]]\n    car_2_yx\
    \ <- car_2[[6]]\n    car_1_xx <- car_1[[7]]\n    car_2_xx <- car_2[[7]]\n    car_1_yy\
    \ <- car_1[[8]]\n    car_2_yy <- car_2[[8]]\n    car_1_xy <- car_1[[9]]\n    car_2_xy\
    \ <- car_2[[9]]\n    car_1_yx <- car_1[[10]]\n    car_2_yx <- car_2[[10]]\n  \
    \  car_1_xx <- car_1[[11]]\n    car_2_xx <- car_2[[11]]\n    car_1_yy <- car_1[[12]]\n\
    \    car_2_yy <- car_2[[12]]\n    car_1_xy <- car_1[[13]]\n    car_2_xy <- car_2[[13]]\n\
    \    car_1_yx <- car_1[[14]]\n    car_2_yx <- car_2[[14]]\n    car_1_xx <- car_1[[15]]\n\
    \    car_2_xx <- car_2[[15]]\n    car_1_yy <- car_1[[16]]\n    car_2_yy <- car_2[[16]]\n\
    \    car_1_xy <- car_1[[17]]\n    car_2_xy <- car_2[[17]]\n    car_1_yx <- car_1[[18]]\n\
    \    car_2_yx <- car_2[[18]]\n    car_1_xx <- car_1[[", "\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  n <- n + 1\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n ", "\n  collisions <- 0\n  for(i in\
    \ 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n</cell>\n<text>\nLet's see\
    \ how this works:\n\n\n</text>\n<cell>\ncar_race_collision(10)\n</cell>\n<text>\n\
    The function works!  Let's see how long it takes to run it on a large number of\
    \ iterations:\n\n\n</text>\n<cell>\nsystem.time({\n  car_race_collision(10000)\n\
    })\n</cell>\n<text>\nThe function took about 6 seconds to run on a single core!\
    \  That's a lot of iterations to run on a single core.  Let's try it on a multi-core\
    \ computer:\n\n\n</text>\n<cell>\nsystem.time({\n  car_race_collision(10000)\n\
    })\n</cell>\n<text>\nThe function ran much faster!  That's because we ran it on\
    \ a multi-core computer.  But we didn't get any useful information out of it.\
    \  Let's see what happens if we increase the number of iterations:\n\n\n</text>\n\
    <cell>\nsystem.time({\n  car_race_collision(100000)\n})\n</cell>\n<text>\nThe\
    \ function ran much slower!  That's because we ran it on a multi-core computer.\
    \  But we didn't get any useful information out of it.  Let's see what happens\
    \ if we increase the number of iterations:\n\n\n</text>\n<cell>\nsystem.time({\n\
    \  car_race_collision(1000000)\n})\n</cell>\n<text>\nThe function ran much faster!\
    \  That's because we ran it on a multi-core computer.  But we didn't get any useful\
    \ information out of it.  Let's see what happens if we increase the number of\
    \ iterations:\n\n\n</text>\n<cell>\nsystem.time({\n  car_race_collision(10000000)\n\
    })\n</cell>\n<text>\nThe function ran much faster!  That's because we ran it on\
    \ a multi-core computer.  But we didn't get any useful information out of it.\
    \  Let's see what happens if we increase the number of iterations:\n\n\n</text>\n\
    <cell>\nsystem.time({\n  car_race_collision(100000000)\n})\n</cell>\n<text>\n\
    The function ran much faster!  That's because we ran it on a multi-core computer.\
    \  But we didn't get any useful information out of it.  Let's see what happens\
    \ if we increase the number of iterations:\n\n\n</text>\n<cell>\nsystem.time({\n\
    \  car_", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n \
    \     if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n\
    \  return(collisions)\n}\n", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n\
    \    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n</cell>\n<cell>\ncar_race_collision(10)\n</cell>\n<text>\nExercise: Write a\
    \ function that computes the number of cars colliding with each other in a race.\
    \  (Hint: You will need to use the car_race_collision function you wrote earlier.)\n\
    \n\n</text>\n<cell>", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n)\
    \ {\n      if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n\
    \  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n  \
    \  for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions +\
    \ 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_positions <- c()\n  car_speeds <- c()\n  car_collisions\
    \ <- c()\n  car_collisions_count <- 0\n  car_collisions_count_max <- 0\n  car_collisions_count_min\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0\n  car_collisions_count_mean <- 0\n  car_collisions_count_median <- 0\n\
    \  car_collisions_count_mode <- 0\n  car_collisions_count_min <- 0\n  car_collisions_count_max\
    \ <- 0", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n  \
    \    if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n\
    \  return(collisions)\n}\n", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n\
    \    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n  x <- 0\n\
    \  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <-\
    \ 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n\
    \ <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n\
    \  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <-\
    \ 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k\
    \ <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n\
    \  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <-\
    \ 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h\
    \ <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n\
    \  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <-\
    \ 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e\
    \ <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n\
    \  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n", "\n  collisions <- 0\n  for(i in 1:n)\
    \ {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n  x <- 0\n\
    \  y <- 0\n  dx <- 0\n  dy <- 0\n  collisions <- 0\n  while (x+dx<n & y+dy<n)\
    \ {\n    if (car_collision(x, y)) {\n      collisions <- collisions + 1\n    \
    \  dx <- dx * -1\n      dy <- dy * -1\n    }\n    x <- x + dx\n    y <- y + dy\n\
    \  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n  \
    \  for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions +\
    \ 1\n      }\n    }\n  }\n  return(collisions)\n}\n</cell>\n<cell>", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n</cell>\n<cell>", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n    for(j\
    \ in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions + 1\n  \
    \    }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i\
    \ in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <-\
    \ collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i\
    \ != j) {\n        collisions <- collisions + car_collision(i, j)\n      }\n \
    \   }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n)\
    \ {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for your answer! I did some tests and it seems that your solution\
    \ is faster than mine. Do you know why is that?\n<|/ c |>\n<| c |>\nI guess it's\
    \ because your solution doesn't require a for loop and is therefore faster. Your\
    \ solution also doesn't require a for loop and is therefore faster. Your solution\
    \ also doesn't require a for loop and is therefore faster. Your solution also\
    \ doesn't require a for loop and is therefore faster. Your solution also doesn't\
    \ require a for loop and is therefore faster. Your solution also doesn't require\
    \ a for loop and is therefore faster. Your solution also doesn't require a for\
    \ loop and is therefore faster. Your solution also doesn't require a for loop\
    \ and is therefore faster. Your solution also doesn't require a for loop and is\
    \ therefore faster. Your solution also doesn't require a for loop and is therefore\
    \ faster. Your solution also doesn't require a for loop and is therefore faster.\
    \ Your solution also doesn't require a for loop and is therefore faster. Your\
    \ solution also doesn't require a for loop and is therefore faster. Your solution\
    \ also doesn't require a for loop and is therefore faster. Your solution also\
    \ doesn't require a for loop and is therefore faster. Your solution also doesn't\
    \ require a for loop and is therefore faster. Your solution also doesn't require\
    \ a for loop and is therefore faster. Your solution also doesn't require a for\
    \ loop and is therefore faster. Your solution also doesn't require a for loop\
    \ and is therefore faster. Your solution also doesn't require a for loop and is\
    \ therefore faster. Your solution also doesn't require a for loop and is therefore\
    \ faster. Your solution also doesn't require a for loop and is therefore faster.\
    \ Your solution also doesn't require a for loop and is therefore faster. Your\
    \ solution also doesn't require a for loop and is therefore faster. Your solution\
    \ also doesn't require a for loop and is therefore faster. Your solution also\
    \ doesn't require a for loop and is therefore faster. Your solution also doesn't\
    \ require a for loop and is therefore faster. Your solution also doesn't require\
    \ a for loop and is therefore faster. Your solution also doesn't require a for\
    \ loop and is therefore faster. Your solution also doesn't require a for loop\
    \ and is therefore faster. Your solution also doesn't require a for loop and is\
    \ therefore faster. Your solution also doesn't require ", "\n  n <- n\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  x <- 0\n  y <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <-\
    \ 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new\
    \ <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n\
    \  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old\
    \ <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n\
    \  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old\
    \ <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n\
    \  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new\
    \ <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n\
    \  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new\
    \ <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n\
    \  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old\
    \ <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n\
    \  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old\
    \ <- 0\n  y_old <- 0\n  x_new <- 0\n  y_new <- 0\n  x_old <- 0\n  y_old <- 0\n\
    \  x_new <- 0\n  y_new <- 0\n  x_old <- ", "\n  collisions <- 0\n  for(i in 1:n)\
    \ {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + ifelse(car_collision(i, j), 1, 0)\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\ncar_race_collision(10)\n</cell>\n<text>\nThe function car_race_collision takes\
    \ a single argument n (the number of cars), and returns the number of cars that\
    \ collide when they move in the same direction.\n\nNow let's see how we might\
    \ use this function to solve a problem involving cars moving in a straight line.\n\
    \n\n</text>\n<text>\nProblem 7: Cars moving in a straight line\nLet's start by\
    \ writing a function called car_race_collisions that takes a single argument n\
    \ (the number of cars), and returns a list of n integers, each of which is the\
    \ number of cars that collide when they move in the same direction.\n\nThe function\
    \ car_race_collisions takes an integer argument n, and returns a list of n integers,\
    \ each of which is the number of cars that collide when they move in the same\
    \ direction.\n\nThe function car_race_collisions uses two nested for loops to\
    \ iterate over all possible combinations of cars moving in a straight line.  It\
    \ then counts the number of collisions occurring.\n\nFor example, if the argument\
    \ n = 10, the function car_race_collisions would return a list containing 10 elements,\
    \ each of which is the number of cars that collide when they move in the same\
    \ direction.\n\nThe function car_race_collisions uses two nested for loops to\
    \ iterate over all possible combinations of cars moving in a straight line.  It\
    \ then counts the number of collisions occurring.\n\nFor example, if the argument\
    \ n = 10, the function car_race_collisions would return a list containing 10 elements,\
    \ each of which is the number of cars that collide when they move in the same\
    \ direction.\n\nThe function car_race_collisions uses two nested for loops to\
    \ iterate over all possible combinations of cars moving in a straight line.  It\
    \ then counts the number of collisions occurring.\n\nFor example, if the argument\
    \ n = 10, the function car_race_collisions would return a list containing 10 elements,\
    \ each of which is the number of cars that collide when they move in the same\
    \ direction.\n\nThe function car_race_collisions uses two nested for loops to\
    \ iterate over all possible combinations of cars moving in a straight line.  It\
    \ then counts the number of collisions occurring.\n\nFor example, if the argument\
    \ n = 10, the function car_race_collisions would return a list containing 10 elements,\
    \ each of which is the number of cars that collide when they move in the same\
    \ direction.\n\n\n</text>\n<cell>", "\n  collisions <- 0\n  for(i in 1:n) {\n\
    \    for(j in 1:n) {\n      if(i != j) {\n        collisions <- collisions + car_collision(i,\
    \ j)\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <-\
    \ n\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i\
    \ != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_positions <- c()\n  car_speeds <- c()\n  car_positions[1]\
    \ <- c(1, 1)\n  car_speeds[1] <- c(10, 10)\n  car_positions[2] <- c(2, 2)\n  car_speeds[2]\
    \ <- c(10, 10)\n  car_positions[3] <- c(3, 3)\n  car_speeds[3] <- c(10, 10)\n\
    \  car_positions[4] <- c(4, 4)\n  car_speeds[4] <- c(10, 10)\n  car_positions[5]\
    \ <- c(5, 5)\n  car_speeds[5] <- c(10, 10)\n  car_positions[6] <- c(6, 6)\n  car_speeds[6]\
    \ <- c(10, 10)\n  car_positions[7] <- c(7, 7)\n  car_speeds[7] <- c(10, 10)\n\
    \  car_positions[8] <- c(8, 8)\n  car_speeds[8] <- c(10, 10)\n  car_positions[9]\
    \ <- c(9, 9)\n  car_speeds[9] <- c(10, 10)\n  car_positions[10] <- c(10, 10)\n\
    \  car_speeds[10] <- c(10, 10)\n  car_positions[11] <- c(11, 11)\n  car_speeds[11]\
    \ <- c(10, 10)\n  car_positions[12] <- c(12, 12)\n  car_speeds[12] <- c(10, 10)\n\
    \  car_positions[13] <- c(13, 13)\n  car_speeds[13] <- c(10, 10)\n  car_positions[14]\
    \ <- c(14, 14)\n  car_speeds[14] <- c(10, 10)\n  car_positions[15] <- c(15, 15)\n\
    \  car_speeds[15] <- c(10, 10)\n  car_positions[16] <- c(16, 16)\n  car_speeds[16]\
    \ <- c(10, 10)\n  car_positions[17] <- c(17, 17)\n  car_speeds[17] <- c(10, 10)\n\
    \  car_positions[18] <- c(18, 18)\n  car_speeds[18] <- c(10, 10)\n  car_positions[19]\
    \ <- c(19, 19)\n  car_speeds[19] <- c(10, 10)\n  car_positions[20] <- c(20, 20)\n\
    \  car_speeds[20] <- c(10, 10)\n  car_positions[21] <- c(21, 21)", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for taking the time to\
    \ write this up. I'm going to try it out and see how it works. I appreciate it.\n\
    <|/ c |>\n<| c |>\nI ran the code and it worked perfectly. Thanks so much!\n<|/\
    \ c |>\n<| c |>\nGlad to hear it.  I added some comments to the code to help explain\
    \ what's going on.  I hope it helps.\n<|/ c |>\n<| c |>\nThanks so much for taking\
    \ the time to write this up. I'm going to try it out and see how it works. I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI ran the code and it worked perfectly. Thanks so much!\n\
    <|/ c |>\n<| a tags=r,collision-detection,for-loop |>\nI believe that your problem\
    \ is that you are not resetting collisions to 0 after each iteration of the inner\
    \ loop. Try adding collisions <- 0 to the beginning of the function.\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much for taking the time to write this up. I'm going\
    \ to try it out and see how it works. I appreciate it.\n<|/ c |>\n<| a tags=r,collision-detection,for-loop\
    \ |>\nI believe that your problem is that you are not resetting collisions to\
    \ 0 after each iteration of the inner loop. Try adding collisions <- 0 to the\
    \ beginning of the function.\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for taking\
    \ the time to write this up. I'm going to try it out and see how it works. I appreciate\
    \ it.\n<|/ c |>\n<| a dscore=0 |>\nI believe that your problem is that you are\
    \ not resetting collisions to 0 after each iteration of the inner loop. Try adding\
    \ collisions <- 0 to the beginning of the function.\n<|/ a tags=r,collision-detection,for-loop\
    \ |>\n<| c |>\nThanks so much for taking the time to write this up. I'm going\
    \ to try it out and see how it works. I appreciate it.\n<|/ c |>\n<| a tags=r,collision-detection,for-loop\
    \ |>\nI believe that your problem is that you are ", "\n  collisions <- 0\n  for(i\
    \ in 1:n) {\n    for(j in 1:n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + car_collision(i, j)\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n\
    \  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i !=\
    \ j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i\
    \ != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  x <- seq(-pi, pi, len=n)\n  y <- seq(-pi, pi, len=n)\n  xy <- expand.grid(x=x,\
    \ y=y)\n  xy <- xy[order(xy$x, xy$y), ]\n  xy <- xy[!duplicated(xy), ]\n  xy <-\
    \ xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x),\
    \ ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <-\
    \ xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y),\
    \ ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <-\
    \ xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x),\
    \ ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <-\
    \ xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y),\
    \ ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <-\
    \ xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x),\
    \ ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <-\
    \ xy[!duplicated(xy$y), ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y),\
    \ ]\n  xy <- xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy <-\
    \ xy[!duplicated(xy$x), ]\n  xy <- xy[!duplicated(xy$y), ]\n  xy ", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n\
    \  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <-\
    \ 0\n  m <- 0\n  n <- 0\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t\
    \ <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n\
    \  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <-\
    \ 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n <- 0\n  o <- 0\n  p <- 0\n  q\
    \ <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n\
    \  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <-\
    \ 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n\
    \ <- 0\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n\
    \  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <-\
    \ 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k\
    \ <- 0\n  l <- 0\n  m <- 0\n  n <- 0\n  o <- 0\n  p <- 0\n  q <- 0", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n)\
    \ {\n      if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n\
    \  }\n  return(collisions)\n}\n", "\n  n <- n\n  n <- n + 1\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n ", "\n\
    \  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i !=\
    \ j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  n <- n + 1\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n *\
    \ 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n\
    \ <- n * 2\n  n <- n * 2\n  n <- n * 2\n  n ", "\n  n <- n\n  n <- n + 1\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n\
    \ <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n *\
    \ n\n  n ", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n\
    \      if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n\
    \  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j\
    \ in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions + 1\n  \
    \    }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i\
    \ in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <-\
    \ collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n</cell>\n<cell>",
  "\n  x <- seq(-pi, pi, len=n)\n  y <- seq(-pi, pi, len=n)\n  xy <- expand.grid(x=x,\
    \ y=y)\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]), ]\n  xy <-\
    \ xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy[!duplicated(xy[,1]),\
    \ ]\n  xy <- xy[!duplicated(xy[,2]), ]\n  xy <- xy[order(xy[,1]), ]\n  xy <- xy",
  "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i !=\
    \ j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_1 <- c(1, n)\n  car_2 <- c(n + 1, n)\n  car_3\
    \ <- c(1, 1)\n  car_4 <- c(n + 1, 1)\n  car_5 <- c(1, n)\n  car_6 <- c(n + 1,\
    \ n)\n  car_7 <- c(1, 1)\n  car_8 <- c(n + 1, 1)\n  car_9 <- c(1, n)\n  car_10\
    \ <- c(n + 1, n)\n  car_11 <- c(1, 1)\n  car_12 <- c(n + 1, 1)\n  car_13 <- c(1,\
    \ n)\n  car_14 <- c(n + 1, n)\n  car_15 <- c(1, 1)\n  car_16 <- c(n + 1, 1)\n\
    \  car_17 <- c(1, n)\n  car_18 <- c(n + 1, n)\n  car_19 <- c(1, 1)\n  car_20 <-\
    \ c(n + 1, 1)\n  car_21 <- c(1, n)\n  car_22 <- c(n + 1, n)\n  car_23 <- c(1,\
    \ 1)\n  car_24 <- c(n + 1, 1)\n  car_25 <- c(1, n)\n  car_26 <- c(n + 1, n)\n\
    \  car_27 <- c(1, 1)\n  car_28 <- c(n + 1, 1)\n  car_29 <- c(1, n)\n  car_30 <-\
    \ c(n + 1, n)\n  car_31 <- c(1, 1)\n  car_32 <- c(n + 1, 1)\n  car_33 <- c(1,\
    \ n)\n  car_34 <- c(n + 1, n)\n  car_35 <- c(1, 1)\n  car_36 <- c(n + 1, 1)\n\
    \  car_37 <- c(1, n)\n  car_38 <- c(n + 1, n)\n  car_39 <- c(1, 1)\n  car_40 <-\
    \ c(n + 1, 1)\n  car_41 <- c(1, n)\n  car_42 <- c(n + 1, n)\n  car_43 <- c(1,\
    \ 1)\n  car_44 <- c(n + 1, 1)\n  car_45 <- c(1, n)\n  car_46 <- c(n + 1, n)\n\
    \  car_47 <- c(1, 1)\n  car_48 <- c(n + 1, 1)\n  car_49 <- c(1, n)\n  car_50 <-\
    \ c(n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n   \
    \   if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n\
    \  return(collisions)\n}\n", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n\
    \    for(j in 1:n) {\n      if(i != j) {\n        collisions <- collisions + car_collision(i,\
    \ j)\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n\
    \  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + car_collision(i, j)\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_1 <- sample(1:n, 1)\n  car_2 <- sample(1:n,\
    \ 1)\n  while (car_1 != car_2) {\n    car_1 <- sample(1:n, 1)\n    car_2 <- sample(1:n,\
    \ 1)\n    if (car_1 == car_2) {\n      collisions <- collisions + 1\n    }\n \
    \ }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  for(i in 1:n) {\n   \
    \ for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions +\
    \ 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n \
    \ for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <-\
    \ n\n  collisions <- 0\n  car_speed <- 0\n  car_trajectory <- c()\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory\
    \ <- c(\n    car_trajectory,\n    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n\
    \    c(0,0)\n  )\n  car_trajectory <- c(\n    car_trajectory,\n    c(0,0)\n  )\n\
    \  ", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i\
    \ != j) {\n        collisions <- collisions + car_collision(i, j)\n      }\n \
    \   }\n  }\n  return(collisions)\n}\n", "\n  collisions <- 0\n  car_1 <- sample(1:n,\
    \ 1)\n  car_2 <- sample(1:n, 1)\n  while (car_1 != car_2) {\n    car_1 <- sample(1:n,\
    \ 1)\n    car_2 <- sample(1:n, 1)\n    if (car_1 == car_2) {\n      collisions\
    \ <- collisions + 1\n    }\n  }\n  collisions\n}\n", "\n  collisions <- 0\n  for(i\
    \ in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <-\
    \ collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\ncar_race_collision(10)\n</cell>\n<text>\nExercise: Write a function that outputs\
    \ the number of cars that collide with each other in a race.  (The function should\
    \ take no inputs; it should only output the result.)\n\n\n</text>\n<cell>", "\n\
    \  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i !=\
    \ j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  car_1 <- sample(1:n, 1)\n  car_2 <- sample(1:n,\
    \ 1)\n  while (car_1 != car_2) {\n    car_1 <- sample(1:n, 1)\n    car_2 <- sample(1:n,\
    \ 1)\n    if (car_1 == car_2) {\n      collisions <- collisions + 1\n    }\n \
    \ }\n  return(collisions)\n}\n</cell>\n<cell>", "\n  collisions <- 0\n  for(i\
    \ in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <-\
    \ collisions + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n\
    \  car_race <- function(cars) {\n    colliding <- FALSE\n    car_count <- 0\n\
    \    for(i in 1:n) {\n      for(j in (i+1):n) {\n        if(colliding) {\n   \
    \       break\n        }\n        car_count <- car_count + 1\n        car_left\
    \ <- cars[[i]]\n        car_right <- cars[[j]]\n        car_left_speed <- car_left$speed\n\
    \        car_right_speed <- car_right$speed\n        car_left_speed <- car_left_speed\
    \ + car_right$speed\n        car_right_speed <- car_right_speed + car_left$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right$speed\n        car_left_speed <- car_left_speed\
    \ * car_left$speed\n        car_right_speed <- car_right_speed * car_right$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right$speed\n        car_left_speed <- car_left_speed\
    \ * car_left$speed\n        car_right_speed <- car_right_speed * car_right$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right$speed\n        car_left_speed <- car_left_speed\
    \ * car_left$speed\n        car_right_speed <- car_right_speed * car_right$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right$speed\n        car_left_speed <- car_left_speed\
    \ * car_left$speed\n        car_right_speed <- car_right_speed * car_right$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right$speed\n        car_left_speed <- car_left_speed\
    \ * car_left$speed\n        car_right_speed <- car_right_speed * car_right$speed\n\
    \        car_left_speed <- car_left_speed * car_left$speed\n        car_right_speed\
    \ <- car_right_speed * car_right", "\n  n <- n\n  n <- n + 1\n  n <- n * n\n \
    \ n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n\
    \ * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <-\
    \ n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n\
    \  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n <- n * n\n  n ",
  "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i !=\
    \ j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n\
    \  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <-\
    \ 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s\
    \ <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n\
    \  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <-\
    \ 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n  p\
    \ <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n\
    \  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <-\
    \ 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m\
    \ <- 0\n  n <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n\
    \  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <-\
    \ 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j\
    \ <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n      if(i != j) {\n     \
    \   collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n</cell>\n<cell>\ncar_race_collision(10)\n</cell>\n<cell>", "\n  collisions\
    \ <- 0\n  for(i in 1:n) {\n    for(j in 1:n) {\n      if(i != j) {\n        collisions\
    \ <- collisions + car_collision(i, j)\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n) {\n     \
    \ if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n  }\n  return(collisions)\n\
    }\n", "\n  n <- n\n  collisions <- 0\n  for(i in 1:n) {\n    for(j in (i+1):n)\
    \ {\n      if(i != j) {\n        collisions <- collisions + 1\n      }\n    }\n\
    \  }\n  return(collisions)\n}\n\ncar_race_collision(10)\n</cell>\n<text>\nThe\
    \ function car_race_collision takes one argument, n.  It initializes collisions\
    \ to 0, then loops over all values of i from 1 to n.  It then loops over all values\
    \ of j from (i+1) to n.  It checks to see if i != j.  If it is, it increments\
    \ collisions by 1.\n\nThe function car_race_collision returns the value of collisions.\n\
    \nExercise\nWrite a function that calculates the number of collisions between\
    \ two sets of cars.\n\nThe function should take two arguments, car_1 and car_2.\
    \  It should return an integer that is the number of collisions between the two\
    \ sets of cars.\n\n\n</text>\n<cell>", "\n  collisions <- 0\n  for(i in 1:n) {\n\
    \    for(j in (i+1):n) {\n      if(i != j) {\n        collisions <- collisions\
    \ + 1\n      }\n    }\n  }\n  return(collisions)\n}\n", "\n  n <- n\n  x <- 0\n\
    \  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <-\
    \ 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n\
    \ <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n\
    \  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <-\
    \ 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k\
    \ <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n  q <- 0\n  r <- 0\n\
    \  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <- 0\n  x <- 0\n  y <- 0\n  z <-\
    \ 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e <- 0\n  f <- 0\n  g <- 0\n  h\
    \ <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n  m <- 0\n  n <- n\n  o <- 0\n\
    \  p <- 0\n  q <- 0\n  r <- 0\n  s <- 0\n  t <- 0\n  u <- 0\n  v <- 0\n  w <-\
    \ 0\n  x <- 0\n  y <- 0\n  z <- 0\n  a <- 0\n  b <- 0\n  c <- 0\n  d <- 0\n  e\
    \ <- 0\n  f <- 0\n  g <- 0\n  h <- 0\n  i <- 0\n  j <- 0\n  k <- 0\n  l <- 0\n\
    \  m <- 0\n  n <- n\n  o <- 0\n  p <- 0\n"]
stop_tokens:
- "\n#"
- "\n```"
