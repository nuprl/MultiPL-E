name: HumanEval_162_string_to_md5
language: r
prompt: "# Given a string 'text', return its md5 hash equivalent string.\n# If 'text'\
  \ is an empty string, return None.\n# >>> string_to_md5('Hello world')\n# '3e25960a79dbc69b674cd4ec67a72c62'\n\
  string_to_md5 <- function(text) {"
tests: "test_humaneval <- function() {\ncandidate <- string_to_md5\n    if(!identical(candidate('Hello\
  \ world'), '3e25960a79dbc69b674cd4ec67a72c62')){quit('no', 1)}\n    if(!identical(candidate(''),\
  \ NULL)){quit('no', 1)}\n    if(!identical(candidate('A B C'), '0ef78513b0cb8cef12743f5aeb35f888')){quit('no',\
  \ 1)}\n    if(!identical(candidate('password'), '5f4dcc3b5aa765d61d8327deb882cf99')){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  if (length(text) == 0) {\n    return(NULL)\n  }\n  return(digest::digest(tolower(text),\
    \ algo = 'md5'))\n}\n", "\n  md5(tolower(text))\n}\n", "\n  md5(tolower(text))\n\
    }\n", "\n  md5(tolower(text))\n}\n", "\n  md5(tolower(text))\n}\n", "\n  return(digest::digest(tolower(text),\
    \ algo = 'md5'))\n}\n", "\n  md5(paste0(text, ''))\n}\n", "\n  if (length(text)\
    \ == 0) {\n    return(NULL)\n  }\n  return(digest::digest(tolower(text), algo\
    \ = 'md5'))\n}\n", "\n  if (length(text) == 0) {\n    return(NULL)\n  }\n  return(digest::digest(text,\
    \ \"md5\"))\n}\n", "\n  return(digest::digest(digest::md5, text))\n}\n", "\n \
    \ return(digest::digest(text, 'md5'))\n}\n", "\n  if (length(text) == 0) {\n \
    \   return(NULL)\n  }\n  return(digest::digest(tolower(text), algo = 'md5'))\n\
    }\n", "\n  if (length(text) == 0) {\n    return(NULL)\n  }\n  return(digest::digest(text,\
    \ algo = 'md5', serialize = FALSE))\n}\n", "\n  if (length(text) == 0) {\n   \
    \ return(NULL)\n  }\n  return(digest::digest(text, \"md5\"))\n}\n", "\n  if (length(text)\
    \ == 0) return(NULL)\n  return(digest::digest(tolower(text), algo = 'md5'))\n\
    }\n", "\n  md5(tolower(text))\n}\n", "\n  return(digest::digest(tolower(text),\
    \ algo = 'md5'))\n}\n", "\n  if (length(text) == 0) {\n    return(NULL)\n  }\n\
    \  return(digest::digest(text, algo = 'md5'))\n}\n", "\n  hash <- digest(paste(text,\
    \ collapse=\"\"), algo=\"md5\", serialize=FALSE)\n  return(hash)\n}\n", "\n  return(digest::digest(text,\
    \ \"md5\"))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
