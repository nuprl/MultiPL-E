name: HumanEval_80_is_happy
language: r
prompt: "# You are given a string s.\n# Your task is to check if the string is happy\
  \ or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n# For example:\n# >>> is_happy(a)\n# FALSE\n# >>> is_happy(aa)\n\
  # FALSE\n# >>> is_happy(abcd)\n# TRUE\n# >>> is_happy(aabb)\n# FALSE\n# >>> is_happy(adb)\n\
  # TRUE\n# >>> is_happy(xyy)\n# FALSE\nis_happy <- function(s) {"
tests: "test_humaneval <- function() {\ncandidate <- is_happy\n    if(!identical(candidate('a'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('aa'), FALSE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('abcd'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('aabb'),\
  \ FALSE)){quit('no', 1)}\n    if(!identical(candidate('adb'), TRUE)){quit('no',\
  \ 1)}\n    if(!identical(candidate('xyy'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('iopaxpoi'),\
  \ TRUE)){quit('no', 1)}\n    if(!identical(candidate('iopaxioi'), FALSE)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n > 3 && all(sapply(1:(n-3),\
    \ function(i) !any(s[i:(i+3)]==s[i:(i+3)])))) \n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| c |>\nI like this solution, but I wonder if it could be made more efficient\
    \ by using a `for` loop to check each character in the string and seeing if any\
    \ of them are repeated. Something like `for(i in 1:nchar(s)){ if(s[i]==s[i+1])\
    \ return(FALSE) }`\n<|/ c |>\n<| c |>\nI guess it would be more efficient to check\
    \ each character in the string and seeing if any of them are repeated. Something\
    \ like `for(i in 1:nchar(s)){ if(s[i]==s[i+1]) return(FALSE) }`\n<|/ c |>\n<|\
    \ c |>\nI added a solution that uses `for` loop to check each character in the\
    \ string and seeing if any of them are repeated\n<|/ c |>\n<| c |>\nI added a\
    \ solution that uses `for` loop to check each character in the string and seeing\
    \ if any of them are repeated\n<|/ c |>\n<| a tags=r,string,regex |>\nHere's a\
    \ solution using stringi package:\n<code>\nlibrary(stringi)\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n > 3 && all(stri_count_unique(s[seq(1,\
    \ n)]) == 3))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution\
    \ using base R:\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <-\
    \ nchar(s)\n  return(n > 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]==s[i:(i+3)]))))\
    \ \n}\n</code>\n<|/ a tags=r,string,regex |>\n<| a dscore=1 |>\nHere's a solution\
    \ using stringi package:\n<code>\nlibrary(stringi)\nis_happy <- function(s) {\n\
    \  s <- tolower(s)\n  n <- nchar(s)\n  return(n > 3 && all(stri_count_unique(s[seq(1,\
    \ n)]) == 3))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| a tags=r,string,regex\
    \ |>\nHere's a solution using stringi package:\n<code>\n", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\
    \\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n)\
    \ >= 3 && all(sapply(seq(n), function(i) !any(s[i:(i + 3)]))))\n}\n</cell>\n<cell>\n\
    is_happy(\"abbb\")\n</cell>\n<cell>\nis_happy(\"abbbb\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbc\")\n</cell>\n<cell>\nis_happy(\"abbbbcde\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdef\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefg\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefgh\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghi\")\n</cell>\n<cell>\n\
    is_happy(\"abbbbcdefghij\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijk\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcdefghijkl\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklm\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmn\")\n</cell", "\n  s <- tolower(s)\n  length(sapply(s, length))\
    \ >= 3 &&\n    all(sapply(s, function(x) length(unique(x)) >= 3))\n}\n</code>\n\
    <|/ a tags=r,string,regex |>\n<| c |>\nThis doesn't work. Try `is_happy(\"abbb\"\
    )`\n<|/ c |>\n<| c |>\nIt does work. Try `is_happy(\"abbb\")`\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try `is_happy(\"abbb\")`\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try `is_happy(\"abbb\")`\n<|/ c |>\n<| c |>\nIt does work. Try `is_happy(\"\
    abbb\")`\n<|/ c |>\n<| a tags=r,string,regex |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(sapply(s, length)) >= 3 &&\n    all(sapply(s,\
    \ function(x) length(unique(x)) >= 3))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  length(sapply(s,\
    \ length)) >= 3 &&\n    all(sapply(s, function(x) length(unique(x)) >= 3))\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(sapply(s, length)) >= 3 &&\n    all(sapply(s,\
    \ function(x) length(unique(x)) >= 3))\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a tags=r,string,regex |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  length(sapply(s, length)) >= 3 &&\n    all(sapply(s, function(x) length(unique(x))\
    \ >= 3))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=r,string,regex\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  length(sapply(s,\
    \ length)) >= 3 &&\n    all(sapply(s, function(x) length(unique(x)) >= 3))\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nis_happ", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"[^[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:lower:]]\", \"\", s)\n  s <- gsub(\"[^[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:punct:]]\", \"\", s)\n  s <- gsub(\"[^[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"^[[:alpha:]]\", \"\", s)\n  s <- gsub(\"^[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"^[[:lower:]]\", \"\", s)\n  s <- gsub(\"^[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"^[[:punct:]]\", \"\", s)\n  s <- gsub(\"^[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:digit:]]\", \"\", s)\n  s <- gsub(\"[^[:lower:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:upper:]]\", \"\", s)\n  s <- gsub(\"[^[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[^[:space:]]\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"^[[:digit:]]", "\n  s <- tolower(s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3\
    \ && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) == 3)))\n\
    }\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThanks so much for the answer!\
    \ I really appreciate it! I ran the code and it worked perfectly. Thanks again!\n\
    <|/ c |>\n<| c |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nlibrary(stringr)\nlibrary(dplyr)\n", "\n  s <- tolower(s)\n  s <- gsub(\"\
    [^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\",\
    \ \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\
    \", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 && all(sapply(1:(n-3),\
    \ function(i) !any(s[i:(i+3)]==s[i:(i+3)])))\n}\n", "\n  s <- tolower(s)\n  s\
    \ <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\3\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\3\", \"\\\\3\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\5\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\5\",\
    \ \"\\\\5\", s)\n  s <- gsub(\"[a-z]{3}\\\\7\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\7\", \"\\\\7\", s)\n  s <- gsub(\"[a-z]{3}\\\\9\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\9\", \"\\\\9\", s)\n  s <- gsub(\"[a-z]{3}\\\\11\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\11\", \"\\\\11\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\13\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\13\", \"\\\\13\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\15\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\15\"\
    , \"\\\\15\", s)\n  s <- gsub(\"[a-z]{3}\\\\17\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\17\", \"\\\\17\", s)\n  s <- gsub(\"[a-z]{3}\\\\19\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\19\", \"\\\\19\", s)\n  s <- gsub(\"[a-z]{3}\\\\21\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\21\", \"\\\\21\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\23\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\23\", \"\\\\23\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\25\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\25\"\
    , \"\\\\25\", s)\n  s <- gsub(\"[a-z]{3}\\\\27\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\27\", \"\\\\", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\"\
    , s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s\
    \ <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n \
    \ s <- gsub(\"[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\\\
    \\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\\
    1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s\
    \ <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z", "\n  s <- tolower(s)\n \
    \ n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThank you for your\
    \ answer. Your code works perfectly for strings with length 3 or less. But for\
    \ strings with length 4 or more, it returns FALSE. Do you know why this happens?\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a function that should work for\
    \ strings of any length\n<|/ c |>\n<| c |>\nThank you for your answer. Your code\
    \ works perfectly for strings with length 3 or less. But for strings with length\
    \ 4 or more, it returns FALSE. Do you know why this happens?\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a function that should work for strings of any length\n\
    <|/ c |>\n<| c |>\nThank you for your answer. Your code works perfectly for strings\
    \ with length 3 or less. But for strings with length 4 or more, it returns FALSE.\
    \ Do you know why this happens?\n<|/ c |>\n<| a |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ dscore=2 |>\n<| a dscore=2 |>\nWe can use str_detect from stringr\n<code>\n\
    library(stringr)\nis_happy <- function(s) {\n   n <- nchar(tolower(s))\n   return(n\
    \ >= 3 && all(str_detect(s, regex(paste0(\"^.{\", n, \"}$\"), ignore_case = TRUE))))\
    \ \n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you for your answer. Your code\
    \ works perfectly for strings with length 3 or less. But for strings with length\
    \ 4 or more, it returns FALSE. Do you know why this happens?\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a function that should work for strings of any length\n\
    <|/ c |>\n<| a |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <-\
    \ nchar(s)\n  return(n >= 3 && all(sapply(1:(n", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s ", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s\
    \ <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z", "\n  s <- tolower(s)\n \
    \ n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer!\
    \ I didn't know about `substr` so I learned something new today. Your solution\
    \ is very elegant and works perfectly! I wish I could accept both answers as they\
    \ both work perfectly for me. Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nHere's\
    \ a solution using stringr::str_count and stringr::str_subset:\n<code>\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(stringr::str_count(s,\
    \ stringr::str_subset(s, 1:(n-3), fixed = TRUE)) == 3))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\nHere's a base R solution:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nHere's a solution using stringr::str_count and stringr::str_subset:\n\
    <code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n\
    \ >= 3 && all(stringr::str_count(s, stringr::str_subset(s, 1:(n-3), fixed = TRUE))\
    \ == 3))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\nHere's a solution using\
    \ stringr::str_count and stringr::str_subset:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(stringr::str_count(s,\
    \ stringr::str_subset(s, 1:(n-3), fixed = TRUE)) == 3))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\nHere's a solution using stringr::str_count and stringr::str_subset:\n\
    <code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z", "\n  s <- tolower(s)\n \
    \ n <- length(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]==s[i:(i+3)][i]))))\n\
    }\n</cell>\n<cell>", "\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"),\
    \ length)) >= 3 &&\n    all(sapply(strsplit(s, \"\"), function(x) length(unique(x))\
    \ <= 3))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks, this was very helpful!\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| a tags=r |>\nHere's a solution using stringr and dplyr. \n<code>\n\
    library(stringr)\nlibrary(dplyr)\n\ndf <- data.frame(\n  stringsAsFactors = FALSE,\n\
    \  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAs",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 & all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for strings with\
    \ length 3 or less. But for strings with length 4 or more, it returns FALSE. For\
    \ example: `is_happy(\"abcabc\") # FALSE`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a function that should work for strings of any length.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for strings with length\
    \ 3 or less. But for strings with length 4 or more, it returns FALSE. For example:\
    \ `is_happy(\"abcabc\") # FALSE`\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a function that should work for strings of any length.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n\
    \  return(n >= 3 & all(sapply(1:(n-3), function(i) length(unique(substr(s, i,\
    \ i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for strings with length 3 or less. But\
    \ for strings with length 4 or more, it returns FALSE. For example: `is_happy(\"\
    abcabc\") # FALSE`\n<|/ c |>\n<| a tags=r,string,regex |>\n<code>\nis_happy <-\
    \ function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for strings with\
    \ length 3 or less. But for strings with length 4 or more, it returns FALSE. For\
    \ example: `is_happy(\"abcabc\") # FALSE`\n<|/ c |>\n<| a tags=r,string,regex\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n\
    \  return(n >= 3 & all(sapply(1:(n-3), function(i) length(unique(substr(s, i,\
    \ i+", "\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]+\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]+$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]$\", \"\", s)\n  s <- gsub(\"^[[:alpha:]]\"\
    , \"\", ", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"\
    ^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\
    \", s)\n  s <- gsub(\"[a-z]+\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nis_happy <-\
    \ function(s) {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s, function(x)\
    \ length(unique(x))) == 3)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(s,\
    \ function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  length(s)>=3 &&\
    \ all(sapply(s, function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n \
    \ length(s)>=3 && all(sapply(s, function(x) length(unique(x))) == 3)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<|", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n\
    \  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{2,3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{2,3}\", \"\\\\1\", s)\n  s ", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\"\
    , \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n\
    \  s <- gsub(\"^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s\
    \ <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  n <- length(s)\n  return(n > 3 && all(sapply(1:(n-3),function(x)\
    \ !any(duplicated(substr(s,x,x+3))))))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for the answer. Can you please explain how this works?\n<|/ c |>\n<| c\
    \ |>\nI added some explanation.\n<|/ c |>\n<| a dscore=1 |>\nA solution using\
    \ stringr::str_count and stringr::str_subset:\n<code>\nlibrary(stringr)\n\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  n <- str_count(s, pattern = \"[a-z]\"\
    , simplify = TRUE)\n  return(n > 3 && all(str_subset(s, pattern = \"[a-z]{3}\"\
    , simplify = TRUE)))\n}\n</code>\n<|/ a tags=r,string |>\n<| a dscore=1 |>\nA\
    \ base R solution:\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n\
    \ <- length(s)\n  return(n > 3 && all(sapply(1:(n-3),function(x) !any(duplicated(substr(s,x,x+3))))))\n\
    }\n</code>\n<|/ a tags=r,string |>\n<| a tags=r,string |>\n<code>\nis_happy <-\
    \ function(s) {\n  s <- tolower(s)\n  n <- length(s)\n  return(n > 3 && all(sapply(1:(n-3),function(x)\
    \ !any(duplicated(substr(s,x,x+3))))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- length(s)\n\
    \  return(n > 3 && all(sapply(1:(n-3),function(x) !any(duplicated(substr(s,x,x+3))))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- length(s)\n  return(n > 3 && all(sapply(1:(n-3),function(x)\
    \ !any(duplicated(substr(s,x,x+3))))))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"), length)) >= 3 &&\n    all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a tags=r,string\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for strings with\
    \ length 3 or less. But for strings with length 4 or more, it returns FALSE. For\
    \ example, `is_happy(\"abcabc\")` returns FALSE. Do you know why?\n<|/ c |>\n\
    <| c |>\nI updated my answer to include a function that should work for strings\
    \ of any length.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code,\
    \ but I got an error message saying `Error in strsplit(s, \"\") : non-character\
    \ argument`. Do you know why this happens?\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to include a function that should work for strings of any length.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got an error message\
    \ saying `Error in strsplit(s, \"\") : non-character argument`. Do you know why\
    \ this happens?\n<|/ c |>\n<| a tags=r,string |>\nWe can use grepl to find patterns\
    \ and then use sum to count the number of TRUEs\n<code>\nsum(grepl(\"^[a-z]{3}$\"\
    , s))\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your code\
    \ works perfectly for strings with length 3 or less. But for strings with length\
    \ 4 or more, it returns FALSE. For example, `is_happy(\"abcabc\")` returns FALSE.\
    \ Do you know why?\n<|/ c |>\n<| c |>\nI updated my answer to include a function\
    \ that should work for strings of any length.\n<|/ c |>\n<| a dscore=2 |>\nWe\
    \ can use str_count from stringr\n<code>\nlibrary(stringr)\nsum(str_count(s, '[a-z]{3}'))",
  "\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  ", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 & all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using sapply. Maybe with some kind of for loop?\n<|/ c |>\n<| c |>\nI guess\
    \ you could use `sapply` but then you would have to do `sapply(strsplit(s, \"\"\
    ), function(x) length(unique(x))) == 3)` which would make the code more complicated.\
    \ `sapply` will return a vector so you would have to do `all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated and less readable. `sapply` will also return a vector so you would\
    \ have to do `all(sapply(strsplit(s, \"\"), function(x) length(unique(x))) ==\
    \ 3)` which would make the code more complicated and less readable.\n<|/ c |>\n\
    <| c |>\nI guess you could use `sapply` but then you would have to do `sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated. `sapply` will return a vector so you would have to do `all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated and less readable. `sapply` will also return a vector so you would\
    \ have to do `all(sapply(strsplit(s, \"\"), function(x) length(unique(x))) ==\
    \ 3)` which would make the code more complicated and less readable.\n<|/ c |>\n\
    <| c |>\nI guess you could use `sapply` but then you would have to do `sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated. `sapply` will return a vector so you would have to do `all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated and less readable. `sapply` will also return a vector so you would\
    \ have to do `all(sapply(strsplit(s, \"\"), function(x) length(unique(x))) ==\
    \ 3)` which would make the code more complicated and less readable.\n<|/ c |>\n\
    <| c |>\nI guess you could use `sapply` but then you would have to do `sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)` which would make the code more\
    \ complicated. `sapply` will return a vector so ", "\n  s <- tolower(s)\n  n <-\
    \ length(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]\
    \ %in% s[i:(i+3)+1]))))\n}\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\n\
    is_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"\
    aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\"\
    )\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n\
    <cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\n\
    is_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"\
    aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\"\
    )\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n\
    <cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\n\
    is_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"\
    aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\"\
    )\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n\
    <cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\n\
    is_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"\
    aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")\n</cell>\n<cell>\nis_happy(\"aaa\")",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(sapply(1:(n-3),\n\
    \                                 function(i) length(unique(substr(s,i,i+3)))\
    \ == 3)))\n}\n</cell>\n<cell>\nis_happy(\"abc\")\n</cell>\n<cell>\nis_happy(\"\
    aba\")\n</cell>\n<cell>\nis_happy(\"abba\")\n</cell>\n<cell>\nis_happy(\"abbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbb\")\n</cell>\n<cell>\n\
    is_happy(\"abbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbb\")\n\
    </cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\n\
    is_happy(\"abbbbbbbbbbbbbbbbbbbbbbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbbbbbbbbbbbbbbbbbbbbbbbb\")\n</cell", "\n \
    \ s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like the use of `substr` here, but I think `sapply` would be\
    \ more appropriate than `lapply` in this case. `sapply` will return a vector of\
    \ the same length as the input vector, whereas `lapply` will return a list with\
    \ the same length as the input.\n<|/ c |>\n<| c |>\nI agree that `sapply` is more\
    \ appropriate here, but I wanted to keep it close to the original code. `lapply`\
    \ would also work, but I find it less readable.\n<|/ c |>\n<| c |>\nI agree that\
    \ `sapply` is more readable, but I find it less readable.\n<|/ c |>\n<| c |>\n\
    I agree that `sapply` is more readable, but I find it less readable.\n<|/ c |>\n\
    <| c |>\nI agree that `sapply` is more readable, but I find it less readable.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's another option:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nHere's another option:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nHere's another option:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nHere's another option:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n) >= 3 & all(", "\n\
    \  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\
    \\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\",\
    \ s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(x)\
    \ !any(duplicated(substr(s, x, x+3))))))\n}\n", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:", "\n  s <- tolower(s)\n  length(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) >= 3)\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| c |>\nI like your solution, but I believe it can be simplified a little\
    \ bit more. `grepl(\"^[[:alpha:]]{3,}$\", s, perl = TRUE)` should do the trick.\n\
    <|/ c |>\n<| c |>\nYes, it can be simplified even more. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a little bit more. `grepl(\"^[[:alpha:]]{3,}$\", s, perl = TRUE)` should do\
    \ the trick.\n<|/ c |>\n<| c |>\nI like your solution, but I believe it can be\
    \ simplified a little bit more. `grepl(\"^[[:alpha:]]{3,}$\", s, perl = TRUE)`\
    \ should do the trick.\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a little bit more. `grepl(\"^[[:alpha:]]{3,}$\", s, perl\
    \ = TRUE)` should do the trick.\n<|/ c |>\n<| a tags=r,string,regex |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  grepl(\"^[[:alpha:]]{3,}$\", s,\
    \ perl = TRUE)\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  grepl(\"^[[:alpha:]]{3,}$\", s, perl = TRUE)\n}\n</code>\n\
    <|/ a tags=r,string,regex dscore=2 |>\n<| a tags=r,string,regex |>\n<code>\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  grepl(\"^[[:alpha:]]{3,}$\", s, perl\
    \ = TRUE)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string,regex |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  grepl(\"^[[:alpha:]]{3,}$\", s,\
    \ perl = TRUE)\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- to", "\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"", "\n  s <-\
    \ tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\",\
    \ s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\", \"\\\\\
    1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\",\
    \ s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\",\
    \ s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:digit:", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:upper:]]\", \"\", s)\n", "\n  s <- tolower(s)\n  s <- gsub(\"\
    [^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\
    \\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"), function(x) length(unique(x)))\
    \ >= 3) \n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"\
    ), function(x) length(unique(x))) >= 3) \n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) >= 3 \n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  sapply(strsplit(s, \"\"), function(x) length(unique(x))) >= 3 \n}\n</code>\n\
    <|/ a tags=r,string,regex |>\n<| a tags=r,string,regex |>\n<code>\nis_happy <-\
    \ function(s) {\n  s <- tolower(s)\n  sapply(strsplit(s, \"\"), function(x) length(unique(x)))\
    \ >= 3 \n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string,regex |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  sapply(strsplit(s, \"\"), function(x)\
    \ length(unique(x))) >= 3 \n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  sapply(strsplit(s, \"\"), function(x)\
    \ length(unique(x))) >= 3 \n}\n</code>\n<|/ a dscore=1 tags=r,string,regex |>\n\
    <| a tags=r,string,regex |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  sapply(strsplit(s, \"\"), function(x) length(unique(x))) >= 3 \n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nis_happy <- function(s) {\n  s <-\
    \ tolower(s)\n  sapply(strsplit(s, \"\"), function(x) length(unique(x))) >= 3\
    \ \n}\n</code>\n<|/ a tags=r,string,regex |>\n<| a dscore=1 |>\n<code>\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  sapply(strsplit(s, \"\"), function(x)\
    \ length(unique(x))) >= 3 \n}\n</code>\n<|/ a tags=r,string,", "\n  s <- tolower(s)\n\
    \  length(sapply(strsplit(s, \"\"), function(x) length(unique(x))) >= 3)\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `is_happy(\"ab\")`\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I fixed\
    \ it.\n<|/ c |>\n<| a dscore=1 |>\nHere is a solution using stringr and dplyr:\n\
    <code>\nlibrary(stringr)\nlibrary(dplyr)\n\nis_happy <- function(s) {\n  s <-\
    \ tolower(s)\n  s %>% \n    str_split(\"\") %>% \n    map_lgl(~length(.) == 3)\
    \ %>% \n    all(.) %>% \n    all(.[[1]] %in% unique(.[[1]]))\n}\n\nis_happy(\"\
    ab\")", "\n  s <- tolower(s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"\
    [[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"\
    [[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"\
    [[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"\
    [[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"\
    [[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"\
    [[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"\
    [[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"\
    [[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"\
    [[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"\
    [[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"\
    [[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"\
    [[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"\
    [[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"\
    [[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"\
    [[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"\
    [[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n", "\n  s <-\
    \ tolower(s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:blank:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:cntrl:]]\", \"\", s)\n  s <- gsub(\"[[:blank:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", ", "\n  s <- tolower(s)\n  s <-\
    \ gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s\
    \ <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}", "\n  s <- tolower(s)\n  n <-\
    \ nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n", "\n  s <- tolower(s)\n  n <- length(s)\n  return(n\
    \ >= 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]==s[i:(i+3)])))) \n}\n",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\3\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\3\", \"\\\\3\", s)\n  s <- gsub(\"[a-z]{3}\\\\5\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\5\", \"\\\\5\", s)\n  s <- gsub(\"[a-z]{3}\\\\7\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\7\", \"\\\\7\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\9\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\9\", \"\\\\9\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\11\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\11\"\
    , \"\\\\11\", s)\n  s <- gsub(\"[a-z]{3}\\\\13\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\13\", \"\\\\13\", s)\n  s <- gsub(\"[a-z]{3}\\\\15\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\15\", \"\\\\15\", s)\n  s <- gsub(\"[a-z]{3}\\\\17\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\17\", \"\\\\17\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\19\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\19\", \"\\\\19\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\21\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\21\"\
    , \"\\\\21\", s)\n  s <- gsub(\"[a-z]{3}\\\\23\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}\\\\23\", \"\\\\23\", s)\n  s <- gsub(\"[a-z]{3}\\\\25\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\25\", \"\\\\25\", s)\n  s <- gsub(\"[a-z]{3}\\\\27\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\27\", \"\\\\", "\n  s <- tolower(s)\n\
    \  length(sapply(s, length)) >= 3 & \n    all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `is_happy(\"ab\")`\
    \ returns `FALSE`, but `is_happy(\"aba\")` returns `TRUE`\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've fixed the code accordingly.\n<|/ c |>\n<| a\
    \ tags=r,string |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  length(sapply(s,\
    \ length)) >= 3 & \n    all(sapply(s, function(x) length(unique(x))) == 3)\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(sapply(s, length)) >= 3 & \n    all(sapply(s,\
    \ function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a tags=r,string |>\n<|\
    \ a dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  length(sapply(s,\
    \ length)) >= 3 & \n    all(sapply(s, function(x) length(unique(x))) == 3)\n}\n\
    </code>\n<|/ a tags=r,string |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  length(sapply(s, length)) >= 3 & \n    all(sapply(s,\
    \ function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a tags=r,string |>\n<|\
    \ a tags=r,string |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n \
    \ length(sapply(s, length)) >= 3 & \n    all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,string |>\n<code>\nis_happy\
    \ <- function(s) {\n  s <- tolower(s)\n  length(sapply(s, length)) >= 3 & \n \
    \   all(sapply(s, function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  length(sapply(s, length)) >= 3 & \n    all(sapply(s, function(x) length(unique(x)))\
    \ == 3)\n}\n</code>", "\n  s <- tolower(s)\n  n <- length(s)\n  return(n >= 3\
    \ && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) == 3)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any packages. I guess this can be done with base R. I am not able to\
    \ figure out how.\n<|/ c |>\n<| c |>\nI added a base R solution\n<|/ c |>\n<|\
    \ c |>\nThanks. I guess this can be done with base R. I am not able to figure\
    \ out how. Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added\
    \ a base R solution\n<|/ c |>\n<| c |>\nThanks. I guess this can be done with\
    \ base R. I am not able to figure out how. Can you please explain how this works?\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a base R solution:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- length(s)\n  return(n >= 3 && all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any packages. I\
    \ guess this can be done with base R. I am not able to figure out how. Can you\
    \ please explain how this works?\n<|/ c |>\n<| c |>\nI added a base R solution\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a base R solution:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- length(s)\n  return(n >= 3 && all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any packages. I\
    \ guess this can be done with base R. I am not able to figure out how. Can you\
    \ please explain how this works?\n<|/ c |>\n<| c |>\nI added a base R solution\n\
    <|/ c |>\n<| a tags=r |>\nHere is a base R solution:\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- length(s)\n  return", "\n  s <- tolower(s)\n  n\
    \ <- nchar(s)\n  return(n >= 3 && all(sapply(strsplit(s, \"\"), function(x) length(unique(x))\
    \ == 3)))\n}\n</cell>\n<cell>\nis_happy(\"abba\")\n</cell>\n<cell>\nis_happy(\"\
    abbac\")\n</cell>\n<cell>\nis_happy(\"abbaca\")\n</cell>\n<cell>\nis_happy(\"\
    abbacaa\")\n</cell>\n<cell>\nis_happy(\"abbacaaa\")\n</cell>\n<cell>\nis_happy(\"\
    abbacaaaa\")\n</cell>\n<cell>\nis_happy(\"abbacaaaab\")\n</cell>\n<cell>\nis_happy(\"\
    abbacaaaabb\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbb\")\n</cell>\n<cell>\n\
    is_happy(\"abbacaaaabbbb\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbc\")\n</cell>\n\
    <cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"\
    abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n\
    <cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"\
    abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n\
    <cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacaaaabbbbcd\")\n</cell>\n<cell>\nis_", "\n\
    \  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(seq(n), function(i)\
    \ length(unique(substr(s, i, i + 3))) == 3)))\n}\n", "\n  s <- tolower(s)\n  n\
    \ <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]))))\n\
    }\n", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\",\
    \ s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\
    \", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{", "\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n >= 3 & all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for the example I gave, but when\
    \ I try it on my real data it gives me this error: `Error in nchar(s) : invalid\
    \ multibyte string 1`\n<|/ c |>\n<| c |>\nI suspect that your data has some non-ASCII\
    \ characters. Try `Encoding(s) <- \"UTF-8\"` before running my code.\n<|/ c |>\n\
    <| c |>\nThanks, it worked! I still don't understand why it didn't work without\
    \ that line though.\n<|/ c |>\n<| c |>\nThe `Encoding` function converts character\
    \ strings to `character` vectors. When you run `nchar` on a `character` vector,\
    \ it counts the number of characters. But `sapply` converts the `character` vector\
    \ to a `factor` vector, which is why you get an error when you try to run `nchar`\
    \ on it.\n<|/ c |>\n<| c |>\nThanks for the explanation! I understand it now!\n\
    <|/ c |>\n<| a |>\nHere's a solution using stringr::str_count and stringr::str_detect:\n\
    <code>\nlibrary(stringr)\n\nis_happy <- function(s) {\n  str_count(s, '[a-z]')\
    \ >= 3 & \n    str_detect(s, '[a-z]{3}') & \n    str_detect(s, '[a-z]{3}[a-z]{3}')\
    \ & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}') & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}')\
    \ & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}') & \n    str_detect(s,\
    \ '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}') & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}')\
    \ & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}')\
    \ & \n    str_detect(s, '[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}')\
    \ & \n    str_detect(", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n\
    \  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"\
    ^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{", "\n\
    \  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n\
    \  s <- gsub(\"[[:space:]]\", \"\", s)\n  ", "\n  s <- tolower(s)\n  s <- gsub(\"\
    [^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{2,}\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\"\
    , s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}\\\\1\",\
    \ \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\
    \\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"), function(x) length(unique(x)))\
    \ >= 3)\n}\n</cell>\n<cell>\nis_happy(\"abba\")\n</cell>\n<cell>\nis_happy(\"\
    abbac\")\n</cell>\n<cell>\nis_happy(\"abbacc\")\n</cell>\n<cell>\nis_happy(\"\
    abbaccc\")\n</cell>\n<cell>\nis_happy(\"abbaccca\")\n</cell>\n<cell>\nis_happy(\"\
    abbacccbb\")\n</cell>\n<cell>\nis_happy(\"abbacccbbb\")\n</cell>\n<cell>\nis_happy(\"\
    abbacccbbbba\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaa\")\n</cell>\n<cell>\n\
    is_happy(\"abbacccbbbbaaa\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaa\")\n\
    </cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaa\")\n</cell>\n<cell>\nis_happy(\"\
    abbacccbbbbaaaaaa\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaa\")\n</cell>\n\
    <cell>\nis_happy(\"abbacccbbbbaaaaaaaa\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaab\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaabb\")\n</cell>\n<cell>\nis_happy(\"\
    abbacccbbbbaaaaaaaabbb\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaabbbb\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaabbbbba\")\n</cell>\n<cell>\n\
    is_happy(\"abbacccbbbbaaaaaaaabbbbbaa\")\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaabbbbbaaa\"\
    )\n</cell>\n<cell>\nis_happy(\"abbacccbbbbaaaaaaaabbbbbaaaa\")\n</cell", "\n \
    \ s <- tolower(s)\n  n <- nchar(s)\n  return(n > 3 & all(sapply(strsplit(s, \"\
    \"), function(x) length(unique(x))) == 3))\n}\n", "\n  s <- tolower(s)\n  s <-\
    \ gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\"\
    , s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\"\
    , \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]\", \"\", s)\n\
    \  s <- gsub(\"[a-z]\", \"\", s)", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\"\
    , \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s\
    \ <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{2,}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s\
    \ <- gsub(\"[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\
    \", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"[^[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:lower:]]\", \"\", s)\n  s <- gsub(\"[^[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"[^[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:lower:]]\", \"\", s)\n  s <- gsub(\"[^[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"[^[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:lower:]]\", \"\", s)\n  s <- gsub(\"[^[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[^[:space:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\"", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:blank:]]\", \"\", s)\n  s <- gsub(\"[[:cntrl:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:graph:]]\", \"\", s)\n  s <- gsub(\"[[:print:]]\"\
    , \"\", s)\n  s <- gsub(\"[", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\
    \", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n \
    \ s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}\\\
    \\1\", \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\\
    1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\\\\1\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n  s\
    \ <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\", \"\\\
    \\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z", "\n  s <- tolower(s)\n \
    \ length(sapply(strsplit(s, \"\"), length)) >= 3 & \n    all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x))) == 3)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for your answer! I tested your solution and it works perfectly.\
    \ Could you please explain to me what is the purpose of the `sapply` function?\
    \ I understand that `sapply` applies a function to each element of a vector, but\
    \ I don't understand why we apply `unique` on every element of the vector `strsplit(s,\
    \ \"\")`.\n<|/ c |>\n<| c |>\n`strsplit` splits a string into a list of strings.\
    \ `sapply` applies a function to each element of a vector. `unique` removes duplicates\
    \ from a vector. `sapply(strsplit(s, \"\"), unique)` removes duplicates from each\
    \ string in the list returned by `strsplit`.\n<|/ c |>\n<| c |>\nThanks again!\
    \ I understand now :)\n<|/ c |>\n<| a tags=r,string |>\nWe can use grepl to find\
    \ out if the string has at least 3 characters and then use grepl again to find\
    \ out if there are 3 consecutive characters that are not repeated.\n<code>\ngrepl(\"\
    ^.{3,}$\", s) & !grepl(\"(.)(?=\\\\1{2,})\", s)", "\n  s <- tolower(s)\n  n <-\
    \ nchar(s)\n  return(n >= 3 & all(sapply(strsplit(s, \"\"), function(x) length(unique(x))\
    \ >= 3)))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=r,string,regex |>\nHere is a base R solution:\n\
    <code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n\
    \ >= 3 & all(sapply(strsplit(s, \"\"), function(x) length(unique(x)) >= 3)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string,regex |>\nWe can use gregexpr\
    \ to find the position of every 3 consecutive letters and then check if all are\
    \ distinct\n<code>\ngregexpr(\"(?=(.)(?!.*\\\\1))\", tolower(s))$lengths==3",
  "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"[a-z]{3}\", \"\",\
    \ s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x)) >= 3)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nI like the `sapply` solution. Very elegant. Thanks.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I am not able to understand how `sapply` works. Can you\
    \ please explain how it works?\n<|/ c |>\n<| c |>\n`sapply` applies a function\
    \ to each element of a vector. `sapply(strsplit(s, \"\"), function(x) length(unique(x)))`\
    \ splits the string into individual characters and then counts the number of unique\
    \ characters in each chunk. `sapply` returns a vector of the same length as the\
    \ input vector, so `sapply(strsplit(s, \"\"), function(x) length(unique(x)))`\
    \ returns a vector of the same length as `strsplit(s, \"\")`.\n<|/ c |>\n<| a\
    \ tags=r |>\nHere's a base R solution:\n<code>\nis_happy <- function(s) {\n  s\
    \ <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(strsplit(s, \"\
    \"), function(x) length(unique(x)) >= 3)))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\nHere's a dplyr solution:\n<code>\nlibrary(dplyr)\nis_happy <-\
    \ function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(strsplit(s,\
    \ \"\"), function(x) length(unique(x)) >= 3)))\n}\n\nis_happy(\"aaa\")", "\n \
    \ s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string |>\n\
    <| c |>\nI like your solution. Can you explain why you used `sapply` instead of\
    \ `lapply`?\n<|/ c |>\n<| c |>\n`sapply` applies a function to each element of\
    \ a vector. `lapply` applies a function to each element of a list and returns\
    \ a list. `sapply` returns a vector while `lapply` returns a list.\n<|/ c |>\n\
    <| c |>\nI see. Thanks for the explanation!\n<|/ c |>\n<| a tags=r,string |>\n\
    Here is a solution using stringr::str_count and stringr::str_subset:\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3\
    \ && all(stringr::str_count(s, stringr::str_subset(s, 1:(n-3))) == 3))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,string |>\nHere's a base R solution:\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3\
    \ && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) == 3)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using stringr::str_count\
    \ and stringr::str_subset:\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n >= 3 && all(stringr::str_count(s, stringr::str_subset(s,\
    \ 1:(n-3))) == 3))\n}\n</code>\n<|/ a tags=r,string |>\n<| a tags=r,string |>\n\
    Here's a base R solution:\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nHere's a\
    \ solution using stringr::str_count and stringr::str_subset:\n<code>\nis_happy ",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3),function(x)\
    \ !any(duplicated(substr(s,x,x+3))))))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r\
    \ |>\nHere's a solution using stringr and dplyr\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\
    \ndf <- data.frame(\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n\
    \  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <-\
    \ gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"\
    ^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"^\", \"\", s)\n  s <- gsub(\"\
    $\", \"\", s)\n  s <- gsub(\"[[:alpha:]]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [[:alpha:]]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{1}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{3}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [[:alpha:]]{2}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{1}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[[:alpha:]]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [[:alpha:]]{3}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{3}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n  s <- gsub(\"\
    [[:alpha:]]{1}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{3}\", \"\\\\1\", s)\n\
    \  s <- gsub(\"[[:alpha:]]{2}\", \"\\\\1\", s)\n  s <- gsub(\"[[:alpha:]]{1}\"\
    , \"\\\\1\", s)\n  s <- gsub(\"", "\n  s <- tolower(s)\n  length(s)>=3 && all(sapply(1:(length(s)-3),function(x)\
    \ length(unique(substr(s,x,x+3)))))\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for `is_happy(\"abba\")` which should return `TRUE`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a tags=r,string\
    \ |>\nWe can use gregexpr to find out if there are 3 consecutive letters present\
    \ and use grepl\n<code>\ngrepl(\"^[[:alpha:]]{3}$\", s)", "\n  s <- tolower(s)\n\
    \  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"\
    [a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string |>\n\
    <| c |>\nThank you so much for your answer! I really appreciate it! I really appreciate\
    \ your help!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<|\
    \ a tags=r,string |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\ndf <- data.frame(\n\
    \  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  ", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 & all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer! I tried to run your code, but I got this\
    \ error `Error in nchar(s) : object 's' not found`. Do you know why this happened?\n\
    <|/ c |>\n<| c |>\nSorry, I forgot to add `tolower(s)` before `nchar(s)`. Fixed\
    \ now.\n<|/ c |>\n<| c |>\nThanks for the answer! I tried to run your code, but\
    \ I got this error `Error in nchar(s) : object 's' not found`. Do you know why\
    \ this happened?\n<|/ c |>\n<| c |>\nSorry, I forgot to add `tolower(s)` before\
    \ `nchar(s)`. Fixed now.\n<|/ c |>\n<| c |>\nThanks for the answer! I tried to\
    \ run your code, but I got this error `Error in nchar(s) : object 's' not found`.\
    \ Do you know why this happened?\n<|/ c |>\n<| a tags=r,string |>\n<code>\nlibrary(stringr)\n\
    library(dplyr)\n\ndf <- data.frame(\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  ", "\n  s <- tolower(s)\n  s <- gsub(\"\
    [^a-z]\", \"\", s)\n  s <- gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\",\
    \ \"\", s)\n  s <- gsub(\"^[a-z]{3}\", \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\
    \", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <-\
    \ gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\",\
    \ \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- gsub(\"[^[:alpha:]]\", \"\", s)\n  s <- gsub(\"^\", \"\", s)\n  s <- gsub(\"\
    $\", \"\", s)\n  s <- gsub(\"\\\\s\", \"\", s)\n  s <- gsub(\"^\\\\s\", \"\",\
    \ s)\n  s <- gsub(\"\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\", \"\", s)\n\
    \  s <- gsub(\"\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\\
    $\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\
    \\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\\
    $\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\\
    $\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\\
    $\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\", \"\", s)\n  s\
    \ <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\
    \\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\
    \\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\\\\$\", \"\", s)\n  s <- gsub(\"\
    \\\\$\\\\", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <- gsub(\"\
    ^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"^[a-z]{3}\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{3}[a-z]{",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThank you for your answer. I tried your solution and it works perfectly.\
    \ However I still don't understand why my code didn't work. Could you please explain\
    \ to me why my code didn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for your explanation.\
    \ Now I understand why my code didn't work. Your explanation helped me a lot.\n\
    <|/ c |>\n<| a dscore=1 |>\nWe can use str_count from stringr package to count\
    \ the number of occurrences of every 3 consecutive letters and then check if it\
    \ is greater than or equal to 3.\n<code>\nlibrary(stringr)\nis_happy <- function(s)\
    \ {\n  n <- str_count(s, '\\\\w{3}') >= 3\n  return(n & !is.na(n))\n}\n\nis_happy('abcd')",
  "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n", "\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n\
    \ >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) ==\
    \ 3)))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| c |>\nThanks for your answer!\
    \ I appreciate it!\n<|/ c |>\n<| a |>\n<code>\nis_happy <- function(s) {\n  s\
    \ <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i)\
    \ length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2 tags=r,string,regex\
    \ |>\n<| a tags=r,string,regex |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3\
    \ && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) == 3)))\n\
    }\n</code>\n<|/ a tags=r,string,regex |>\n<| a tags=r,string,regex |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3\
    \ && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) == 3)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nis_happy <- function(s)\
    \ {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3),\
    \ function(i) length(unique(substr(s, i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string,regex\
    \ |>\n<| a dscore=1 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n >= 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r,string,regex |>\n<| a dscore=1 |>\n\
    <code>\nis_happy <- function(s) {\n", "\n  s <- tolower(s)\n  n <- nchar(s)\n\
    \  return(length(n) >= 3 & all(sapply(1:(n-1), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for the\
    \ answer. I tried your code, but I got this error `Error in nchar(s1) : invalid\
    \ multibyte string 1`\n<|/ c |>\n<| c |>\nI tested it on a string `a` and it worked\
    \ fine. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it correctly. I also tried `a` as you said, but still got the same error.\n\
    <|/ c |>\n<| c |>\nI tested it on a string `a` and it worked fine. Are you sure\
    \ you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I also\
    \ tried `a` as you said, but still got the same error.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n\
    \  return(length(n) >= 3 & all(sapply(1:(n-1), function(i) length(unique(substr(s,\
    \ i, i+3))) == 3)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you for the answer.\
    \ I tried your code, but I got this error `Error in nchar(s1) : invalid multibyte\
    \ string 1`\n<|/ c |>\n<| c |>\nI tested it on a string `a` and it worked fine.\
    \ Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I also tried `a` as you said, but still got the same error.\n<|/ c |>\n<| c\
    \ |>\nI tested it on a string `a` and it worked fine. Are you sure you copied\
    \ it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I also tried `a`\
    \ as you said, but still got the same error.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    is_happy <- function(s) {\n  s <- tolower(s)\n  n <- nchar(s)\n  return(length(n)\
    \ >= 3 & all(sapply(1:(n-1), function(i) length(unique(substr(s, i, i+3))) ==\
    \ 3)))\n}\n</code>\n<|/ a dscore=", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n\
    \ >= 3 && all(sapply(1:(n-3), function(i) !any(s[i:(i+3)]==s[i:(i+3)])))) \n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThanks so much! This was very helpful.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nlibrary(stringr)\nlibrary(dplyr)\n\ndf <- data.frame(\n\
    \  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors = FALSE,\n  stringsAsFactors\
    \ = FALSE,\n", "\n  s <- tolower(s)\n  length(sapply(strsplit(s, \"\"), function(x)\
    \ length(unique(x))) >= 3)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,string,regex\
    \ |>\nWe can use grepl\n<code>\ngrepl(\"^[[:alpha:]]{3,}$\", s)", "\n  s <- tolower(s)\n\
    \  length(s)>=3 && all(sapply(strsplit(s, \"\"), function(x) length(unique(x))==3))\n\
    }\n</cell>\n<cell>\nis_happy(\"abc\")\n</cell>\n<cell>\nis_happy(\"abbb\")\n</cell>\n\
    <cell>\nis_happy(\"abbbb\")\n</cell>\n<cell>\nis_happy(\"abbbbc\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcde\")\n</cell>\n<cell>\nis_happy(\"abbbbcdef\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcdefg\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefgh\")\n\
    </cell>\n<cell>\nis_happy(\"abbbbcdefghi\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghij\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijk\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijkl\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklm\")\n</cell>\n\
    <cell>\nis_happy(\"abbbbcdefghijklmn\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmno\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmnop\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmnopq\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmnopqr\")\n\
    </cell>\n<cell>\nis_happy(\"abbbbcdefghijklmnopqrs\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmnopqrsj\")\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmnopqrsj\"\
    )\n</cell>\n<cell>\nis_happy(\"abbbbcdefghijklmnopqrsj\")\n</cell>\n<cell>\nis_happy(\"\
    abbbbcdefghijklmnopqrsj\")\n</cell>\n<cell>\nis_happy", "\n  s <- tolower(s)\n\
    \  n <- length(s)\n  return(n >= 3 && all(sapply(1:(n-3),\n                  \
    \          function(i) !any(s[i:(i+3)] == s[i:(i+3)+1]))))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a bit. For example, `!any(s[i:(i+3)] == s[i:(i+3)+1])` can be replaced with\
    \ `!s[i:(i+3)] == s[i:(i+3)+1]`. Also, `!any(s[i:(i+3)] == s[i:(i+3)+1])` can\
    \ be replaced with `!s[i:(i+3)] == s[i:(i+3)+1]`.\n<|/ c |>\n<| c |>\nI agree\
    \ with your simplifications. I did it because I wanted to keep the code as close\
    \ as possible to the original code. Also, `!s[i:(i+3)] == s[i:(i+3)+1]` can be\
    \ replaced with `!s[i:(i+3)] == s[i:(i+3)+1]` because `!` negates the whole expression.\
    \ `!any(s[i:(i+3)] == s[i:(i+3)+1])` can be replaced with `!s[i:(i+3)] == s[i:(i+3)+1]`\
    \ because `!` negates the whole expression. `!s[i:(i+3)] == s[i:(i+3)+1]` can\
    \ be replaced with `!s[i:(i+3)] == s[i:(i+3)+1]` because `!` negates the whole\
    \ expression.\n<|/ c |>\n<| c |>\nI agree with your simplifications. I did it\
    \ because I wanted to keep the code as close as possible to the original code.\
    \ Also, `!s[i:(i+3)] == s[i:(i+3)+1]` can be replaced with `!s[i:(i+3)] == s[i:(i+3)+1]`\
    \ because `!` negates the whole expression. `!s[i:(i+3)] == s[i:(i+3)+1]` can\
    \ be replaced with `!s[i:(i+3)] == s[i:(i+3)+1]` because `!` negates the whole\
    \ expression. `!s[i:(i+3)] == s[i:(i+3)+1]` can be replaced with `!s[i:(i+3)]\
    \ == s[i:(i+3)+1]` because `!` negates the whole expression.\n<|/ c |>\n<| c |>\n\
    I agree with your simplifications. I did it because I wanted to keep the code\
    \ as close as possible to the original code. Also, `", "\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > 3 & all(sapply(1:(n-3),\n                     \
    \     function(i) !any(s[i:(i+3)] %in% s[i:(i+3)+3]))))\n}\n</code>\n<|/ a tags=r,string\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any packages other\
    \ than base R.\n<|/ c |>\n<| c |>\nI added a solution without packages.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any packages other\
    \ than base R.\n<|/ c |>\n<| c |>\nI added a solution without packages.\n<|/ c\
    \ |>\n<| a tags=r,string |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > 3 & all(sapply(1:(n-3),\n                     \
    \     function(i) !any(s[i:(i+3)] %in% s[i:(i+3)+3]))))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > 3 & all(sapply(1:(n-3),\n                     \
    \     function(i) !any(s[i:(i+3)] %in% s[i:(i+3)+3]))))\n}\n</code>\n<|/ a tags=r,string\
    \ |>\n<| a dscore=2 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > 3 & all(sapply(1:(n-3),\n                     \
    \     function(i) !any(s[i:(i+3)] %in% s[i:(i+3)+3]))))\n}\n</code>\n<|/ a tags=r,string\
    \ |>\n<| a tags=r,string |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > 3 & all(sapply(1:(n-3),\n                     \
    \     function(i) !any(s[i:(i+3)] %in% s[i:(i+3)+3]))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nis_happy <- function(s) {\n  s <- tolower(s)\n\
    \  n <- nchar(s)\n  return(n > ", "\n  s <- tolower(s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:lower:]]\", \"\", s)\n  s <- gsub(\"[[:xdigit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:punct:]]\", \"\", s)\n  s <- gsub(\"[[:digit:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:alpha:]]\", \"\", s)\n  s <- gsub(\"[[:space:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:upper:]]\", \"\", s)\n  s <- gsub(\"[[:lower:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:xdigit:]]\", \"\", s)\n  s <- gsub(\"[[:punct:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:digit:]]\", \"\", s)\n  s <- gsub(\"[[:alpha:]]\"\
    , \"\", s)\n  s <- gsub(\"[[:space:]]\", \"\", s)\n  s <- gsub(\"[[:upper:]]\"\
    , \"\", s)\n", "\n  s <- tolower(s)\n  s <- gsub(\"[^a-z]\", \"\", s)\n  s <-\
    \ gsub(\"^[a-z]\", \"\", s)\n  s <- gsub(\"[a-z]$\", \"\", s)\n  s <- gsub(\"\
    [a-z]{3}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{2}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{3}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{4}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{5}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{6}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{7}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{8}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{9}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{10}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{11}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{12}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{13}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{14}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{15}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{16}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{17}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{18}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{19}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{20}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{21}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{22}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{23}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{24}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{25}$\"\
    , \"\", s)\n  s <- gsub(\"[a-z]{2}{26}$\", \"\", s)\n  s <- gsub(\"[a-z]{2}{27}$\"\
    , \"\", s)\n  s <- gsub(\"", "\n  s <- tolower(s)\n  n <- nchar(s)\n  return(n\
    \ > 3 && all(sapply(1:(n-3), function(i) length(unique(substr(s, i, i+3))) ==\
    \ 3)))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
