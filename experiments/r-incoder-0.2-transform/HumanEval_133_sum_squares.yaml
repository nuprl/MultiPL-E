name: HumanEval_133_sum_squares
language: r
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# >>> lst(c(1.0, 2.0, 3.0))\n# 14\n# >>> lst(c(1.0, 4.0,\
  \ 9.0))\n# 98\n# >>> lst(c(1.0, 3.0, 5.0, 7.0))\n# 84\n# >>> lst(c(1.4, 4.2, 0.0))\n\
  # 29\n# >>> lst(c(-2.4, 1.0, 1.0))\n# 6\nsum_squares <- function(lst) {"
tests: "test_humaneval <- function() {\ncandidate <- sum_squares\n    if(!identical(candidate(c(1.0,\
  \ 2.0, 3.0)), 14)){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 2.0, 3.0)),\
  \ 14)){quit('no', 1)}\n    if(!identical(candidate(c(1.0, 3.0, 5.0, 7.0)), 84)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(1.4, 4.2, 0.0)), 29)){quit('no', 1)}\n    if(!identical(candidate(c(-2.4,\
  \ 1.0, 1.0)), 6)){quit('no', 1)}\n    if(!identical(candidate(c(100.0, 1.0, 15.0,\
  \ 2.0)), 10230)){quit('no', 1)}\n    if(!identical(candidate(c(10000.0, 10000.0)),\
  \ 200000000)){quit('no', 1)}\n    if(!identical(candidate(c(-1.4, 4.6, 6.3)), 75)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(-1.4, 17.9, 18.9, 19.9)), 1086)){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(0.0)), 0)){quit('no', 1)}\n    if(!identical(candidate(c(-1.0)),\
  \ 1)){quit('no', 1)}\n    if(!identical(candidate(c(-1.0, 1.0, 0.0)), 2)){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't round the numbers to the ceiling first. Try\
    \ `lst(c(1.4, 4.2, 0.0))`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ edited the answer to include a rounding function.\n<|/ c |>\n<| a tags=r |>\n\
    Using purrr package:\n<code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n\
    \  map(lst, ~round(.^2, 0))\n}\n\nsum_squares(c(1.4, 4.2, 0.0))", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a |>\n<| a tags=r |>\n<code>", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 tags=r,function\
    \ |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding how and/or why\
    \ it solves the problem would improve the answer's long-term value.\n<|/ c |>\n\
    <| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a ", "\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe answer by is correct\
    \ but can be simplified a little bit using sapply:\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't round the numbers to the ceiling first. `lst(c(1.4, 4.2, 0.0))` returns\
    \ `29` instead of `6`.\n<|/ c |>\n<| c |>\nI missed that requirement. I've updated\
    \ my answer to include a solution that does round the numbers to the ceiling first.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere is a solution using purrr:\n<code>\nlibrary(purrr)\n\
    \nsum_squares <- function(lst) {\n  map(lst, ~round(.x, 2))\n}\n\nsum_squares(c(1.0,\
    \ 2.0, 3.0))", "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n", "\n  sum(sapply(lst, function(x) round(x * x)))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x * x)))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a tags=r |>\n<| a dscore=0 |>\nWe can use Reduce with +\n<code>\nReduce(`+`,\
    \ lst)", "\n  sum(sapply(lst, function(x) x^2))\n}\n", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to round the numbers to the nearest integer.\n<|/ c |>\n<| c |>\nThe\
    \ question was edited after I posted my answer. My answer was based on the original\
    \ question. My answer was edited after I posted my answer.\n<|/ c |>\n<| c |>\n\
    I edited my answer after I posted my answer. My answer was edited after I posted\
    \ my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nThis doesn't answer the question. OP wants to round the numbers to the nearest\
    \ integer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x*x, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to round the numbers to the\
    \ nearest integer.\n<|/ c |>\n<| c |>\nI edited my answer after I posted my answer.\
    \ My answer was edited after I posted my answer.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x*x, 0)))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to round the numbers to the nearest integer.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer after I posted my answer. My answer was edited after I posted my answer.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x*x, 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to round the numbers to the nearest integer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x*x, 0)))\n}\n</code>\n<|/", "\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem\
    \ to work. `lst(c(1.0, 4.0, 9.0))` returns `84` instead of `98`.\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I edited my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for my\
    \ case. Thanks again.\n<|/ c |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list\
    \ |>\n<code>", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function,apply\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function,apply |>\n<| a |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,list,function,apply |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function,apply |>\n<| a tags=r,list,function,apply |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list,function,apply |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function,apply |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function,apply |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function,apply |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function,apply\
    \ |>\n<| a tags=r,list,function,apply |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,list,function,apply |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| c\
    \ |>\nThanks for your answer! I really appreciate it! I tested it and it works\
    \ perfectly! I didn't know about sapply and I didn't know about round. Thanks\
    \ again!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a ", "\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 1)))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.0,\
    \ 4.0, 9.0))` returns `84` instead of `98`.\n<|/ c |>\n<| c |>\nYes, it does work.\
    \ `lst(c(1.0, 4.0, 9.0))` returns `98`. `lst(c(1.0, 3.0, 5.0, 7.0))` returns `84`.\
    \ `lst(c(1.4, 4.2, 0.0))` returns `29`. `lst(c(-2.4, 1.0, 1.0))` returns `6`.\n\
    <|/ c |>\n<| c |>\nOh, I see what you're saying. You're right. My mistake.\n<|/\
    \ c |>\n<| c |>\nI added a solution that doesn't require `sqrt`.\n<|/ c |>\n<|\
    \ a dscore=2 |>\nHere's a solution using purrr::map and purrr::reduce:\n<code>\n\
    library(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, round, digits = 1)\
    \ %>% \n    reduce(`+`)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) round(x * x, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ work if you have a list with negative numbers. `lst(c(-2.4, 1.0, 1.0))` returns\
    \ `6` instead of `-2`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ updated the answer accordingly.\n<|/ c |>\n<| a tags=r |>\nHere's a solution\
    \ using sapply and round:\n<code>\nsum_squares <- function(lst) {\n  sapply(lst,\
    \ function(x) round(x * x, 0))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x\
    \ * x, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x * x, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x\
    \ * x, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x * x, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x\
    \ * x, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n",
  "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}", "\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>",
  "\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `lst(c(-2.4, 1.0, 1.0))`\n<|/ c |>\n\
    <| c |>\n, thanks for pointing that out. I updated the answer to include a solution\
    \ for negative numbers.\n<|/ c |>\n<| a tags=r,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 1)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 1)))\n}\n</code>\n<|/ a tags=r,function |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 1)))\n}\n</code>\n<|/", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</cell>\n<cell>\nsum_squares(c(1.0, 2.0, 3.0))\n</cell>\n\
    <cell>\nsum_squares(c(1.0, 4.0, 9.0))\n</cell>\n<cell>\nsum_squares(c(1.0, 3.0,\
    \ 5.0, 7.0))\n</cell>\n<cell>\nsum_squares(c(1.4, 4.2, 0.0))\n</cell>\n<cell>\n\
    sum_squares(c(-2.4, 1.0, 1.0))\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the squares of the first n numbers in a list.\n\n\n</text>\n\
    <cell>", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to avoid the loop. Maybe\
    \ `Reduce` could help?\n<|/ c |>\n<| c |>\n`Reduce` would work, but `sapply` does\
    \ it for you. `sapply` loops over each element of the list, `Reduce` loops over\
    \ the list itself.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the loop. Maybe `Reduce` could help?\n<|/ c |>\n<| c |>\n\
    I added a solution using `Reduce`.\n<|/ c |>\n<| a |>\nHere's a solution using\
    \ Reduce:\n<code>\nsum_squares <- function(lst) {\n  Reduce(`+`, lapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r dscore=2 |>\n<| a tags=r |>\nHere's a solution\
    \ using purrr:\n<code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst,\
    \ ~.x * .x)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\nHere's a solution\
    \ using purrr:\n<code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst,\
    \ ~.x * .x)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution\
    \ using purrr:\n<code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst,\
    \ ~.x * .x)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nHere's a solution using\
    \ purrr:\n<code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst, ~.x *\
    \ .x)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere's a solution using\
    \ purrr:\n<code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst, ~.x *\
    \ .x)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nHere's a solution using purrr:\n\
    <code>\nsum_squares <- function(lst) {\n  purrr::map_dbl(lst, ~.x * .x)\n}\n</code>\n\
    <|/ a dscore=", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,list,function |>\nA solution using purrr::map and purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, round, digits\
    \ = 0) %>% \n    reduce(`+`)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem\
    \ to work. `lst(c(1.0, 2.0, 3.0))` returns `14` but `lst(c(1.0, 4.0, 9.0))` returns\
    \ `98` which is not the correct answer.\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my answer. Can you try it again?\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my answer. Can you try it again?\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my answer. Can you try it again?\n<|/ c |>\n<| c |>\nI added a test case\
    \ to my answer. Can you try it again?\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post\
    \ only code as an answer, but also provide an explanation of what your code does\
    \ and how it solves the problem of the question. Answers with an explanation are\
    \ usually of better quality, and are more likely to attract upvotes.\n<|/ c |>\n\
    <| c |>\nWhile this code may provide a solution to the question, it's better to\
    \ add context as to why/how it works. This can help future ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't round the numbers to the ceiling first\n<|/ c |>\n\
    <| c |>\nI added a version that does that\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like the `sapply` solution, but I wonder if there is a way to avoid\
    \ the anonymous function and just use `mapply` instead?\n<|/ c |>\n<| c |>\n`mapply`\
    \ will work too, but I prefer `sapply` because it is more concise and easier to\
    \ read. `mapply` will also work but is less efficient because it has to create\
    \ a temporary list to store the results. `sapply` will work but is less efficient\
    \ because it has to create a temporary vector to store the results.\n<|/ c |>\n\
    <| c |>\nI agree, `sapply` is more concise and easier to read, but I wonder if\
    \ there is a way to avoid the anonymous function and just use `mapply` instead?\n\
    <|/ c |>\n<| c |>\nI added a solution using `mapply` which avoids the anonymous\
    \ function.\n<|/ c |>\n<| c |>\nThanks for your answer! I really appreciate it!\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using mapply that avoids the anonymous\
    \ function:\n<code>\nsum_squares <- function(lst) {\n  sum(mapply(function(x)\
    \ x * x, lst))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a |>\nHere's a solution\
    \ using purrr::map\n<code>\nsum_squares <- function(lst) {\n  purrr::map(lst,\
    \ ~.x * .x)\n}\n</code>\n<|/ a dscore=2 tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\nHere's a solution using sapply and mapply\n<code>\nsum_squares <- function(lst)\
    \ {\n  sapply(lst, function(x) x * x)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a |>\n<| c |>\n`lst(c(1.0,\
    \ 2.0, 3.0))` returns `14` not `14.0`\n<|/ c |>\n<| c |>\nThanks, I fixed it\n\
    <|/ c |>\n<| c |>\n`lst(c(1.0, 2.0, 3.0))` returns `14` not `14.0`\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it\n<|/ c |>\n<| a tags=r |>\nWe can use Reduce\n<code>\n\
    Reduce(`+`, lst)", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\n`sapply` isn't necessary here; `lst` already has `*` defined\
    \ for vectors.\n<|/ c |>\n<| c |>\nYes, I know, but I wanted to show that `sapply`\
    \ can be used for vectors as well.\n<|/ c |>\n<| a |>\nHere's a solution using\
    \ purrr::reduce:\n<code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n \
    \ reduce(lst, `*`) + 0\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) round(x * x)))\n}\n", "\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a tags=r dscore=1\
    \ |>\n<| a tags=r dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 1)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n\
    }\n</code>\n<|/ a tags=r |>\n", "\n  sum(sapply(lst, function(x) x^2))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for your answer! I really appreciate it. I was\
    \ wondering if there is a way to do this without using sapply. I'm just trying\
    \ to learn R and I thought that sapply was the way to go but maybe I'm wrong.\n\
    <|/ c |>\n<| c |>\n`sapply` does exactly what it says: it applies a function to\
    \ each element of a vector. `sapply` also has other uses, such as `mapply` which\
    \ applies a function to each element of a vector and returns a vector of the same\
    \ length. `sapply` also has `simplify` which can simplify the output of a function\
    \ by removing unnecessary elements. `sapply` also has `USE.NAMES` which can make\
    \ `sapply` behave like `lapply` when `names` are not used.\n<|/ c |>\n<| c |>\n\
    Thanks again! I appreciate your help.\n<|/ c |>\n<| a tags=r |>\nWe can use Reduce\n\
    <code>\nReduce(`+`, lst)", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ fine. But the problem is that I cannot use any packages except base R.\n<|/\
    \ c |>\n<| c |>\nI added a solution without `purrr` but using `sapply` instead\n\
    <|/ c |>\n<| a tags=r,function |>\nWe can use Reduce\n<code>\nReduce(`+`, lst)",
  "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nI\
    \ like your use of sapply and sum. Very elegant!\n<|/ c |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n", "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some\
    \ explanation to your answer such that others can learn from it\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    Thanks for your answer. Your solution works perfectly for me. I am just wondering\
    \ why my code doesn't work. Is it because I used `sapply` instead of `lapply`?\n\
    <|/ c |>\n<| c |>\nYes, `sapply` returns a vector and `sum` expects a vector.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation. I think I understand it now.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\nThis code returns a vector and sum expects\
    \ a vector. \n<code>\nsum_squares <- function(lst) {\n  sum(lapply(lst, function(x)\
    \ x * x))\n}\n</code>\nThis code returns a list and sum expects a vector.\n<|/\
    \ a tags=r |>\n<| a tags=r |>\nThe other answers already explained the reason\
    \ why your code doesn't work, but I thought I'd add an alternative solution that\
    \ might help you understand why your code doesn't work.\nThe reason your code\
    \ doesn't work is that sapply returns a vector and sum expects a vector. \n<code>\n\
    sum <- function(x) sum(sapply(x, sum))\n</code>\nThis code returns a vector and\
    \ sum expects a vector. \n<code>\nsum <- function(x) sum(lapply(x, sum))\n</code>\n\
    This code returns a list and sum expects a vector.\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\nThis code returns a vector and sum expects a vector. \n<code>\n\
    sum_squares <- function(lst) {\n  sum(lapply(lst, function(x) x * x))\n}\n</code>\n\
    This code returns a list and sum expects a vector.\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\nThis code returns a vector and sum expects a vector. \n<code>\n\
    sum_squares <- function(lst) {\n  sum(lapply(lst, function(x) x * x))\n}\n</code>\n\
    This code returns a list and sum expects a vector.\n<|/ a dscore=0 |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(l", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like\
    \ using purrr::map for these kinds of things:\n<code>\nlibrary(purrr)\n\nsum_squares\
    \ <- function(lst) {\n  map(lst, ~.x * .x)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| c\
    \ |>\nThanks for the answer! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks for the answer! I really\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n\
    <| c |>\nThanks for the answer! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks for the answer! I really\
    \ appreciate it!\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list dscore=0\
    \ |>\n<| c |>\nThanks for the answer! I really appreciate it!\n<|/ c |>\n<| a\
    \ tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for the answer! I really appreciate it!\n<|/ c |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer! I really\
    \ appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nHere is a\
    \ solution using purrr::map and purrr::reduce:\n<code>\nlibrary(purrr)\n\nsum_squares\
    \ <- function(lst) {\n  map(lst, round, digits = 0) %>% \n    reduce(`+`)\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution using purrr::reduce\
    \ and purrr::map. \n<code>\nsum_squares <- function(lst) {\n  map(lst, round,\
    \ digits = 0) %>% \n    reduce(`+`)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<|", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nUsing\
    \ purrr::map and purrr::reduce:\n<code>\nlibrary(purrr)\n\nlst1 <- list(c(1.0,\
    \ 2.0, 3.0), c(1.0, 4.0, 9.0), c(1.0, 3.0, 5.0, 7.0)) \nlst2 <- list(c(1.0, 2.0,\
    \ 3.0), c(1.0, 4.0, 9.0), c(1.0, 3.0, 5.0, 7.0)) \n\nlst1 %>% map(~sum(.x * .x))\
    \ %>% reduce(c(+))", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I am\
    \ not allowed to use any packages. I guess I should use sapply and sapply. I am\
    \ not able to understand how to use sapply and sapply here.\n<|/ c |>\n<| c |>\n\
    I added an example using `sapply`\n<|/ c |>\n<| c |>\nThanks for the answer. I\
    \ tried the code but I am getting an error saying \"Error in lst(c(1.0, 2.0, 3.0))\
    \ : object 'lst' not found\"\n<|/ c |>\n<| c |>\nI added a complete example to\
    \ my answer\n<|/ c |>\n<| c |>\nThanks for the answer. I am not allowed to use\
    \ any packages. I guess I should use sapply and sapply. I am not able to understand\
    \ how to use sapply and sapply here.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for the answer. I am not allowed to use any packages.\
    \ I guess I should use sapply and sapply. I am not able to understand how to use\
    \ sapply and sapply here.\n<|/ c |>\n<| c |>\nI added an example using `sapply`\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the\
    \ answer. I am not allowed to use any packages. I guess I should use sapply and\
    \ sapply. I am not able to understand how to use sapply and sapply here.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum", "\n  sum(sapply(lst, function(x) x^2))\n}\n", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list,function,apply |>\n<| c |>\nThanks for\
    \ your answer. Your solution is very elegant and simple. I'm just wondering if\
    \ there is a way to do this without using sapply?\n<|/ c |>\n<| c |>\nI added\
    \ a solution without `sapply`.\n<|/ c |>\n<| a tags=r,list,function,apply |>\n\
    We can use Reduce\n<code>\nReduce(`+`, lst)", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| c |>\nThis answer was flagged as low-quality because of its length and content.\
    \ While it may answer the question, it is better to explain the essential parts\
    \ of the answer and possibly what was the problem with OP's code.\n<|/ c |>\n\
    <| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/",
  "\n  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThank you for providing a solution that doesn't require any packages.\
    \ I appreciate your effort.\n<|/ c |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x * x, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<|\
    \ a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x * x, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x\
    \ * x, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x\
    \ * x, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x, 0)))\n}\n</code>\n<|/ a ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n", "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r dscore=0\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares ", "\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.0,\
    \ 2.0, 3.0))` returns `14` instead of `14.0`\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ it.\n<|/ c |>\n<| a tags=r,function |>\nA simple solution using purrr::map\n\
    <code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, ~round(.x,\
    \ 2))^2 %>% sum()\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work if you have\
    \ a list with negative numbers, e.g. `lst(c(1.0, -2.0, 3.0))`\n<|/ c |>\n<| c\
    \ |>\nI agree, this is why I added the comment in the first place.\n<|/ c |>\n\
    <| c |>\nI didn't downvote, but I suspect it's because you didn't explain why\
    \ you think this works. I suspect that it's because you didn't explain why you\
    \ think it works. I suspect that it's because you didn't explain why you think\
    \ it works. I suspect that it's because you didn't explain why you think it works.\
    \ I suspect that it's because you didn't explain why you think it works. I suspect\
    \ that it's because you didn't explain why you think it works. I suspect that\
    \ it's because you didn't explain why you think it works. I suspect that it's\
    \ because you didn't explain why you think it works. I suspect that it's because\
    \ you didn't explain why you think it works. I suspect that it's because you didn't\
    \ explain why you think it works. I suspect that it's because you didn't explain\
    \ why you think it works. I suspect that it's because you didn't explain why you\
    \ think it works. I suspect that it's because you didn't explain why you think\
    \ it works. I suspect that it's because you didn't explain why you think it works.\
    \ I suspect that it's because you didn't explain why you think it works. I suspect\
    \ that it's because you didn't explain why you think it works. I suspect that\
    \ it's because you didn't explain why you think it works. I suspect that it's\
    \ because you didn't explain why you think it works. I suspect that it's because\
    \ you didn't explain why you think it works. I suspect that it's because you didn't\
    \ explain why you think it works. I suspect that it's because you didn't explain\
    \ why you think it works. I suspect that it's because you didn't explain why you\
    \ think it works. I suspect that it's because you didn't explain why you think\
    \ it works. I suspect that it's because you didn't explain why you think it works.\
    \ I suspect that it's because you didn't explain why you think it work", "\n \
    \ sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r,list |>\n<| a |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r,list dscore=4 |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=3\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=3 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=3 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(", "\n  sum(sapply(lst, function(x) round(x*x,\
    \ digits=ceiling(log10(x)))))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x*x,\
    \ digits=ceiling(log10(x)))))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding how and/or\
    \ why it solves the problem would improve the answer's long-term value.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x*x, digits=ceiling(log10(x)))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x*x, digits=ceiling(log10(x)))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x*x, digits=ceiling(log10(x)))))\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x*x, digits=ceiling(log10(x)))))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x*x, digits=ceiling(log10(x)))))\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I tried to run your code,\
    \ but I got this error message: Error in lst(c(1.0, 2.0, 3.0)) : object 'lst'\
    \ not found. Do you know why this happened?\n<|/ c |>\n<| c |>\nI forgot to add\
    \ `lst` as a parameter to the function. I edited the answer to include it.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got this\
    \ error message: Error in lst(c(1.0, 2.0, 3.0)) : object 'lst' not found. Do you\
    \ know why this happened?\n<|/ c |>\n<| c |>\nI forgot to add `lst` as a parameter\
    \ to the function. I edited the answer to include it.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis doesn't round the numbers to the ceiling first. `lst(c(1.4,\
    \ 4.2, 0.0))` returns `29` instead of `6`.\n<|/ c |>\n<| c |>\n, thanks for pointing\
    \ that out. I've updated the answer to fix the issue.\n<|/ c |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a ", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26833439)\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to round the numbers in list to upper integer in R?\" The\
    \ answer was \"sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\"\n<|/ c |>\n<| c |>\nThe question was \"How to round the numbers in list to\
    \ upper integer in R?\" The answer was \"sum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\"\n<|/ c |>\n<| c |>\nThe question was \"How\
    \ to round the numbers in list to upper integer in R?\" The answer was \"sum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\"\n<|/\
    \ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for my example, but when I try to use it on\
    \ my actual data I get the following error: Error in lst(lst) : argument \"lst\"\
    \ is missing, with no default. Do you know what could be causing this?\n<|/ c\
    \ |>\n<| c |>\nI suspect that your data has some missing values. Try `lst(c(NA,\
    \ 1.0, 2.0))`\n<|/ c |>\n<| c |>\nThanks for your help. I managed to get it to\
    \ work by adding an if statement to check if all elements in the list are numeric.\
    \ Thanks again!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for my example,\
    \ but when I try to use it on my actual data I get the following error: Error\
    \ in lst(lst) : argument \"lst\" is missing, with no default. Do you know what\
    \ could be causing this?\n<|/ c |>\n<| c |>\nI suspect that your data has some\
    \ missing values. Try `lst(c(NA, 1.0, 2.0))`\n<|/ c |>\n<| c |>\nThanks for your\
    \ help. I managed to get it to work by adding an if statement to check if all\
    \ elements in the list are numeric. Thanks again!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) ifelse(is.numeric(x),\
    \ x*x, NA)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for my example, but when I try to use it on\
    \ my actual data I get the following error: Error in lst(lst) : argument \"lst\"\
    \ is missing, with no default. Do you know what could be causing this?\n<|/ c\
    \ |>\n<| c |>\nI suspect that your data has some missing values. Try `lst(c(NA,\
    \ 1.0, 2.0))`\n<|/ c |>\n<| c |>\nThanks for your help. I managed to get it to\
    \ work by adding an if statement to check if all elements in the list are numeric.\
    \ Thanks again!\n<|/ c |>\n<| a ", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nThanks for your answer! I\
    \ didn't know about `sapply`. I was trying to use `mapply` but couldn't get it\
    \ to work. Your solution works perfectly!\n<|/ c |>\n<| c |>\n`mapply` works fine\
    \ too. `mapply(sum, lst)` will do the trick.\n<|/ c |>\n<| c |>\n`mapply` works\
    \ fine too. `mapply(sum, lst)` will do the trick.\n<|/ c |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ dscore=2 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 tags=r,list,function |>\n<| a tags=", "\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function |>\nHere's a\
    \ solution using purrr::map\n<code>\nlibrary(purrr)\n\nsum_squares <- function(lst)\
    \ {\n  map(lst, ~round(.x, digits = 0)) %>% \n    reduce(`+`)\n}\n\nsum_squares(c(1.0,\
    \ 2.0, 3.0))", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks, this was very helpful!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n\
    \  ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n\
    <| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r dscore=2 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>", "\n  sum(sapply(lst, function(x) x * x))\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nI like your solution, but I find it a bit too\
    \ complicated for my taste. `sapply` can be replaced by `lapply`, which makes\
    \ it even more concise: `sum(lapply(lst, function(x) x * x))`.\n<|/ c |>\n<| c\
    \ |>\nI agree that `lapply` is more concise, but I find it more readable and easier\
    \ to understand for beginners. I agree that `sapply` is more readable, but I find\
    \ it more difficult to understand for beginners. I agree that `sapply` is more\
    \ concise, but I find it more difficult to understand for beginners. I agree that\
    \ `sapply` is more concise, but I find it more difficult to understand for beginners.\
    \ I agree that `sapply` is more concise, but I find it more difficult to understand\
    \ for beginners. I agree that `sapply` is more concise, but I find it more difficult\
    \ to understand for beginners. I agree that `sapply` is more concise, but I find\
    \ it more difficult to understand for beginners. I agree that `sapply` is more\
    \ concise, but I find it more difficult to understand for beginners. I agree that\
    \ `sapply` is more concise, but I find it more difficult to understand for beginners.\n\
    <|/ c |>\n<| c |>\nI agree that `sapply` is more concise, but I find it more difficult\
    \ to understand for beginners. I agree that `sapply` is more concise, but I find\
    \ it more difficult to understand for beginners. I agree that `sapply` is more\
    \ concise, but I find it more difficult to understand for beginners. I agree that\
    \ `sapply` is more concise, but I find it more difficult to understand for beginners.\
    \ I agree that `sapply` is more concise, but I find it more difficult to understand\
    \ for beginners. I agree that `sapply` is more concise, but I find it more difficult\
    \ to understand for beginners. I agree that `sapply` is more concise, but I find\
    \ it more difficult to understand for beginners. I agree that `sapply` is more\
    \ concise, but I find it more ", "\n  sum(sapply(lst, function(x) x * x))\n}\n\
    </code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work when `lst` is a list\
    \ of lists.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you\
    \ give an example where it doesn't work?\n<|/ c |>\n<| c |>\n`lst(c(list(1, 2),\
    \ list(3, 4), list(5, 6)))` gives `[1] NA`\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works fine for me. Can you give an example where it doesn't work?\n<|/\
    \ c |>\n<| c |>\n`lst(c(list(1, 2), list(3, 4), list(5, 6)))` gives `[1] NA`\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using purrr::map and purrr::reduce:\n\
    <code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, ~reduce(.x,\
    \ ~.x * .x))\n}\n\nsum_squares(list(c(1.0, 2.0, 3.0), c(1.0, 4.0, 9.0), c(1.0,\
    \ 3.0, 5.0, 7.0)))", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a tags=r |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/17770747)\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer to the question. He asked how to round the numbers to the\
    \ nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also as", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a tags=r,list |>\nWe can use Reduce\n<code>\nReduce(`+`, lst)", "\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nHere is a solution using purrr:\n<code>\nlibrary(purrr)\n\nlst <- list(c(1.0,\
    \ 2.0, 3.0), c(1.0, 4.0, 9.0), c(1.0, 3.0, 5.0, 7.0)) \n\nsum_squares <- function(lst)\
    \ {\n  map(lst, ~sum(.x * .x))\n}\n\nsum_squares(lst)\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a |>\nWe can use lapply with Reduce\n<code>\nlst1 <- lst\nlst1[[1]] <-\
    \ lst1[[1]] * lst1[[1]]\nlst1[[2]] <- lst1[[2]] * lst1[[2]]\nlst1[[3]] <- lst1[[3]]\
    \ * lst1[[3]]\nReduce(`*`, lst1)", "\n  sum(sapply(lst, function(x) x^2))\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c ", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_square", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 1)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\nI like using purrr::map for these kinds of things. \n<code>\nlibrary(purrr)\n",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't seem to work for negative numbers. `lst(c(-2.4, 1.0, 1.0))` returns\
    \ `6` instead of `-2`.\n<|/ c |>\n<| c |>\nI missed that requirement. Updated\
    \ my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>", "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding how and/or why it solves the problem would improve\
    \ the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding how and/or why it solves\
    \ the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- ", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't seem to work. `lst(c(1.0, 2.0, 3.0))` returns `14` but `lst(c(1.0,\
    \ 4.0, 9.0))` returns `98`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ I'll update my answer.\n<|/ c |>\n<| c |>\nI updated my answer to reflect your\
    \ comment. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI updated my answer\
    \ to reflect your comment. Thanks for pointing that out.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=r |>\n", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1\
    \ |>\nA simple solution using purrr::map and purrr::reduce:\n<code>\nlibrary(purrr)\n",
  "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't seem to work. `lst(c(1.0, 2.0, 3.0))` returns `14` instead\
    \ of `14.0`.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Windows and it works.\
    \ I suspect that your R version is too old.\n<|/ c |>\n<| c |>\nI tested it on\
    \ R 3.2.2 on Linux and it works. I suspect that your R version is too old.\n<|/\
    \ c |>\n<| c |>\nI tested it on R 3.2.2 on Mac and it works. I suspect that your\
    \ R version is too old.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Linux and\
    \ it works. I suspect that your R version is too old.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.0,\
    \ 2.0, 3.0))` returns `14` instead of `14.0`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on R 3.2.2 on Windows and it works. I suspect that your R version is too old.\n\
    <|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Linux and it works. I suspect that\
    \ your R version is too old.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 on Mac\
    \ and it works. I suspect that your R version is too old.\n<|/ c |>\n<| c |>\n\
    I tested it on R 3.2.2 on Linux and it works. I suspect that your R version is\
    \ too old.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't seem to work. `lst(c(1.0, 2.0, 3.0))` returns `14` instead\
    \ of `14.0`.\n<|/ c |>\n<| c |>\nI tested it on R 3.2.2 ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(", "\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nThe answer by is great, but I wanted to add that you can also use purrr::map\
    \ to achieve the same result. \n<code>\nlibrary(purrr)\n\nsum_squares <- function(lst)\
    \ {\n  map(lst, ~.x * .x)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=2 tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=1 tags=r,function,list |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease don't post only code as an\
    \ answer, but also provide an explanation of what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease don't post only\
    \ code as an answer, but also provide an explanation of what your code does and\
    \ how it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explanation of what your code\
    \ does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(s", "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like the `sapply` approach, but I wonder if there's\
    \ a way to avoid the anonymous function and just use `sapply(lst, function(x)\
    \ x^2)`\n<|/ c |>\n<| c |>\nI guess it depends on what you're trying to do. `sapply`\
    \ will return a vector of the same length as the input. `sapply(lst, function(x)\
    \ x^2)` will return a vector of the same length as the input, where each element\
    \ is the squared value of each element in the input. `sapply(lst, function(x)\
    \ round(x^2, 0))` will return a vector of the same length as the input, where\
    \ each element is the squared value of each element in the input, rounded to the\
    \ nearest integer.\n<|/ c |>\n<| c |>\nI guess it depends on what you're trying\
    \ to do. `sapply` will return a vector of the same length as the input. `sapply(lst,\
    \ function(x) x^2)` will return a vector of the same length as the input, where\
    \ each element is the squared value of each element in the input. `sapply(lst,\
    \ function(x) round(x^2, 0))` will return a vector of the same length as the input,\
    \ where each element is the squared value of each element in the input, rounded\
    \ to the nearest integer.\n<|/ c |>\n<| c |>\nI guess it depends on what you're\
    \ trying to do. `sapply` will return a vector of the same length as the input.\
    \ `sapply(lst, function(x) x^2)` will return a vector of the same length as the\
    \ input, where each element is the squared value of each element in the input.\
    \ `sapply(lst, function(x) round(x^2, 0))` will return a vector of the same length\
    \ as the input, where each element is the squared value of each element in the\
    \ input, rounded to the nearest integer.\n<|/ c |>\n<| c |>\nI guess it depends\
    \ on what you're trying to do. `sapply` will return a vector of the same length\
    \ as the input. `sapply(lst, function(x) x^2)` will return a vector of the same\
    \ length as the input, where each element is the squared value of each element\
    \ in the input. `sapply(lst, function(x) round(x^2, 0))` will return a vector\
    \ of the same length as the input, where each element is the squared value of\
    \ each element in the input, rounded to the nearest integer.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore", "\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a |>\n<| a |>\nHere is a solution using purrr:\n<code>\n\
    library(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, ~round(.^2, 0))\n\
    }\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function,list |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(l", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r dscore=2 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r dscore=1\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly fine. I am just\
    \ wondering why my code doesn't work. I am new to R and I find it hard to understand\
    \ why my code doesn't work. Can you please help me understand why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer. Hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</cell>\n<cell>", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\nThe answer\
    \ by is very elegant, but can be improved by avoiding looping through the list\
    \ twice. \n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\nThe above code can be simplified to:\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(lst^2)\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst", "\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list,function dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}", "\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't work. Try `lst(c(1.4,\
    \ 4.2, 0.0))`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed it\
    \ now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n<|\
    \ c |>\nThis doesn't work. Try `lst(c(1.4, 4.2, 0.0))`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've fixed it now.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `lst(c(1.4, 4.2,\
    \ 0.0))`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't work. Try `lst(c(1.4, 4.2, 0.0))`.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `lst(c(1.4,\
    \ 4.2, 0.0))`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| c |>\nThis doesn't work. Try `lst(c(1.4, 4.2, 0.0))`.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `lst(c(1.4,\
    \ 4.2, 0.0))`.\n<|/ ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</cell>\n\
    <cell>", "\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThank you so much! I appreciate your help!\n<|/ c |>\n\
    <| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you so much! I appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you so much! I appreciate your help!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nThank you so much! I appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you so much! I appreciate\
    \ your help!\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThank you so much! I appreciate your help!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x), digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you\
    \ so much! I appreciate your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 1)))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you so much! I appreciate your help",
  "\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/17449574)\n<|/ c |>\n<| c |>\nI believe\
    \ it does answer the question. He wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the numbers to the nearest integer. He also wants to round the numbers\
    \ to the nearest integer. He also wants to round the numbers to the nearest integer.\
    \ He also wants to round the numbers to the nearest integer. He also wants to\
    \ round the number", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question ", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a\
    \ tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_square",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding how and/or why it\
    \ solves the problem would improve the answer's long-term value.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ provid", "\n  sum(sapply(lst, function(x) x^2))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't round\
    \ the numbers to the ceiling though.\n<|/ c |>\n<| c |>\nI didn't realize that\
    \ until I looked at your answer. Thanks!\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a |>", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its ", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a\
    \ tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for your answer. Could you please explain why you used\
    \ `sapply` here? I thought `sapply` was used to apply a function to each element\
    \ of a vector. Why did you use `sapply` here?\n<|/ c |>\n<| c |>\n`sapply` applies\
    \ a function to each element of a vector. `sapply(lst, function(x) x * x)` applies\
    \ the function `function(x) x * x` to each element of `lst`. `sapply` returns\
    \ a vector of the same length as `lst` with the results of applying the function\
    \ to each element of `lst`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Could\
    \ you please explain why you used `sapply` here? I thought `sapply` was used to\
    \ apply a function to each element of a vector. Why did you use `sapply` here?\n\
    <|/ c |>\n<| c |>\n`sapply` applies a function to each element of a vector. `sapply(lst,\
    \ function(x) x * x)` applies the function `function(x) x * x` to each element\
    \ of `lst`. `sapply` returns a vector of the same length as `lst` with the results\
    \ of applying the function to each element of `lst`.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation. Could you please explain why you used `sapply` here? I\
    \ thought `sapply` was used to apply a function to each element of a vector. Why\
    \ did you use `sapply` here?\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\nThe sapply\
    \ function applies a function to each element of a vector. sapply(lst, function(x)\
    \ x * x) applies the function function(x) x * x to each element of lst. sapply\
    \ returns a vector of the same length as lst with the results of applying the\
    \ function to each element of lst.\n<|/ a tags=r,function,sapply |>\n<| c |>\n\
    Thanks for your answer. Could you please explain why you used `sapply` here? I\
    \ thought `sapply` was used to apply a function to each element of a vector. Why\
    \ did you use `sapply` here?\n<|/ c |>\n<| c |>\n`sapply` applies a function to\
    \ each element of a vector. `sapply(lst, function(x) x * x)` applies the function\
    \ `", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer.\
    \ Code-only answers are discouraged on Stack Overflow.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer.\
    \ Code-only answers are discouraged on Stack Overflow.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add\
    \ some explanation to your answer. Code-only answers are discouraged on Stack\
    \ Overflow.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add\
    \ some explanation to your answer", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</cell>\n<cell>", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThanks for your answer! I understand your solution,\
    \ but I wonder why my code doesn't work. Could you please explain why my code\
    \ doesn't work?\n<|/ c |>\n<| c |>\nThe reason your solution doesn't work is that\
    \ `sapply` returns a vector, not a list. `sum` only works on lists. `sapply` returns\
    \ a vector because `lst` is a list of vectors. `sapply` returns a vector because\
    \ `lst` is a list of vectors. `sapply` returns a vector because `lst` is a list\
    \ of vectors. `sapply` returns a vector because `lst` is a list of vectors. `sapply`\
    \ returns a vector because `lst` is a list of vectors. `sapply` returns a vector\
    \ because `lst` is a list of vectors. `sapply` returns a vector because `lst`\
    \ is a list of vectors. `sapply` returns a vector because `lst` is a list of vectors.\
    \ `sapply` returns a vector because `lst` is a list of vectors. `sapply` returns\
    \ a vector because `lst` is a list of vectors. `sapply` returns a vector because\
    \ `lst` is a list of vectors. `sapply` returns a vector because `lst` is a list\
    \ of vectors. `sapply` returns a vector because `lst` is a list of vectors. `sapply`\
    \ returns a vector because `lst` is a list of vectors. `sapply` returns a vector\
    \ because `lst` is a list of vectors. `sapply` returns a vector because `lst`\
    \ is a list of vectors. `sapply` returns a vector because `lst` is a list of vectors.\
    \ `sapply` returns a vector because `lst` is a list of vectors. `sapply` returns\
    \ a vector because `lst` is a list of vectors. `sapply` returns a vector because\
    \ `lst` is a list of vectors. `sapply` returns a vector because `lst` is a list\
    \ of vectors. `sapply` returns a vector because `lst` is a list of vectors. `sapply`\
    \ returns a vector because `lst` is a list of vectors. `sapply` returns a vector\
    \ because `lst` is a list of vectors. `sapply` returns a vector because `lst`\
    \ is a list of vectors. `sapply` returns a vector because `lst` is a list of vectors.\
    \ `sapply` returns a vector because `lst` is a list of vectors. `sapply` returns\
    \ a vector because `lst` is a list of vectors. `sapply` returns a vector because\
    \ `lst` is a list of vectors. `sapply` returns a vector because `lst` is a list\
    \ of vectors. `sapply` returns a vector because `lst` is a list of vectors. `sapply`\
    \ returns a vector because `lst` is a list of vectors. ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the ", "\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.0,\
    \ 2.0, 3.0))` returns `14` but `lst(c(1.0, 4.0, 9.0))` returns `98`\n<|/ c |>\n\
    <| c |>\nI added a solution that should work for you.\n<|/ c |>\n<| c |>\nThanks,\
    \ this works. I wonder why `lst(c(1.0, 4.0, 9.0))` returns `98` instead of `98.0`\n\
    <|/ c |>\n<| c |>\nBecause `98.0` is an atomic vector, while `98` is a numeric\
    \ vector. `98` is coerced to `98.0` when it is passed to `sum`.\n<|/ c |>\n<|\
    \ a tags=r |>\nHere's a solution using purrr::map and purrr::reduce:\n<code>\n\
    library(purrr)\n\nsum_squares <- function(lst) {\n  map(lst, round, digits = 0)\
    \ %>%\n    reduce(`+`)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a\
    \ tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(l", "\n  sum(sapply(lst, function(x) round(x^2,\
    \ 1)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nThanks for your answer.\
    \ Your solution works perfectly for me. However I still don't understand why my\
    \ solution doesn't work. Can you explain it to me?\n<|/ c |>\n<| c |>\nYour solution\
    \ doesn't work because `lst` isn't a vector, it's a list. `sapply` will iterate\
    \ over the list and apply the function to each element in the list. `lst` has\
    \ three elements, so `sapply` will iterate over three elements. `lst[1]` has one\
    \ element, so `sapply` will iterate over one element. `lst[1]^2` has two elements,\
    \ so `sapply` will iterate over two elements. `lst[1]^2` has two elements, so\
    \ `sapply` will iterate over two elements. `lst[1]^2` has two elements, so `sapply`\
    \ will iterate over two elements. `lst[1]^2` has two elements, so `sapply` will\
    \ iterate over two elements. `lst[1]^2` has two elements, so `sapply` will iterate\
    \ over two elements. `lst[1]^2` has two elements, so `sapply` will iterate over\
    \ two elements. `lst[1]^2` has two elements, so `sapply` will iterate over two\
    \ elements. `lst[1]^2` has two elements, so `sapply` will iterate over two elements.\
    \ `lst[1]^2` has two elements, so `sapply` will iterate over two elements. `lst[1]^2`\
    \ has two elements, so `sapply` will iterate over two elements. `lst[1]^2` has\
    \ two elements, so `sapply` will iterate over two elements. `lst[1]^2` has two\
    \ elements, so `sapply` will iterate over two elements. `lst[1]^2` has two elements,\
    \ so `sapply` will iterate over two elements. `lst[1]^2` has two elements, so\
    \ `sapply` will iterate over two elements. `lst[1]^2` has two elements, so `sapply`\
    \ will iterate over two elements. `lst[1]^2` has two elements, so `sapply` will\
    \ iterate over two elements. `lst[1]^2` has two elements, so `sapply` will iterate\
    \ over two elements. `lst[1]^2` has two elements, so `sapply` will iterate over\
    \ two elements. `lst[1]^2` has two elements, so `sapply` will iterate over two\
    \ elements. `lst[1]^2` has two elements, so `", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it!\n<|/ c |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,function,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r,function,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function,", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(", "\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThank\
    \ you for your answer. I am not allowed to use any packages. I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that does not use any packages.\n<|/ c |>\n<| c |>\nThank you for your answer.\
    \ I am not allowed to use any packages. I edited my question to make it more clear.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that does not use\
    \ any packages.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use any packages. I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Thank you for your answer. I am not allowed to use any packages. I edited my question\
    \ to make it more clear.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you for your answer. I am not allowed to use any packages. I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| a |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ dscore=0 |>\n<| c |>\nThank you for your answer. I am not allowed to use any\
    \ packages. I edited my question to make it more clear.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThank you for your answer. I am not allowed\
    \ to use any packages. I edited my question to make it more clear.\n<|/ c |>\n",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r,function |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26839557)\n<|/ c |>\n<| c |>\nThis\
    \ does provide an answer to the question. He asked how to make a function and\
    \ I provided a solution. He didn't ask for an explanation of how it works. I provided\
    \ an explanation as to how it works. I provided a solution that works. I provided\
    \ a solution that works. I provided a solution that works. I provided a solution\
    \ that works. I provided a solution that works. I provided a solution that works.\
    \ I provided a solution that works. I provided a solution that works. I provided\
    \ a solution that works. I provided a solution that works. I provided a solution\
    \ that works. I provided a solution that works. I provided a solution that works.\
    \ I provided a solution that works. I provided a solution that works. I provided\
    \ a solution that works. I provided a solution that works. I provided a solution\
    \ that works. I provided a solution that works. I provided a solution that works.\
    \ I provided a solution that works. I provided a solution that works. I provided\
    \ a solution that works. I provided a solution that works. I provided a solution\
    \ that works. I provided a solution that works. I provided a solution that works.\
    \ I provided a solution that works. I provided a solution that works. I provided\
    \ a solution that works. I provided a solution that works. I provided a solution\
    \ that works. I provided a solution that works. I provided a solution that works.\
    \ I provided a solution that works. I provided a solution that works. I provided\
    \ a solution that works. I ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function |>\n<| c |>\n\
    Thanks, this was helpful. I'm still trying to wrap my head around R's syntax.\
    \ I'm still trying to wrap my head around how to use `sapply` with functions like\
    \ `round`. Do you have a good resource for learning about these functions?\n<|/\
    \ c |>\n<| c |>\n`?sapply` will get you started.  It will also help to read `?round`\
    \ which will tell you what `round` does.\n<|/ c |>\n<| c |>\nThanks, I appreciate\
    \ it.\n<|/ c |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a tags=r,function |>\n", "\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n", "\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.4,\
    \ 4.2, 0.0))` returns `29` instead of `6`.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that rounds up instead of down.\n<|/ c |>\n<| c |>\nI\
    \ edited my answer to include a solution that rounds up instead of down.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x), digits = 2)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 2)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a dscore=0 tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your solution works perfectly for my example.\
    \ However, I cannot get it to work for my actual data set. I've updated my question\
    \ to include a sample of my actual data set. Can you please take a look and see\
    \ if you have any ideas as to why it won't work?\n<|/ c |>\n<| c |>\nI updated\
    \ my answer based on your new example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your help. Unfortunately, it still doesn't work. I've updated my question\
    \ to include a sample of my actual data set. Can you please take a look and see\
    \ if you have any ideas as to why it won't work?\n<|/ c |>\n<| c |>\nI updated\
    \ my answer based on your new example. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your help. Unfortunately, it still doesn't work. I've updated my question\
    \ to include a sample of my actual data set. Can you please take a look and see\
    \ if you have any ideas as to why it won't work?\n<|/ c |>\n<| a dscore=1 |>\n\
    Here's a solution using dplyr and purrr packages:\n<code>\nlibrary(dplyr)\nlibrary(purrr)\n\
    \ndf <- data.frame(\n  x = c(1,2,3,4,5,6,7,8,9,10),\n  y = c(1,2,3,4,5,6,7,8,9,10),\n\
    \  z = c(1,2,3,4,5,6,7,8,9,10),\n  w = c(1,2,3,4,5,6,7,8,9,10),\n  stringsAsFactors\
    \ = FALSE\n)\n\ndf %>%\n  mutate(\n    across(c(x, y, z, w), ~ round(., digits\
    \ = 1)),\n    across(c(x, y, z, w), ~ round(., digits = 1)),\n    across(c(x,\
    \ y, z, w), ~ round(., digits = 1)),\n    across(c(x, y, z, w), ~ round(., digits\
    \ = 1)),\n    across(c(x, y, z, w), ~ round(., digits = 1)),\n    across(c(x,\
    \ y, z, w), ~ round(., digits = 1)),\n    across(c(x, y, z, w), ~ round(., digits\
    \ = 1)),\n    across(c(x, y, z, w), ~ round(., digits = 1)),\n    across(c(x,\
    \ y, z, w), ~ round(., digits = 1)),\n    across(c(x, y, z, w), ~ round(., digits\
    \ = 1)),\n    across(c(x, y, z, w), ~ round(", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * ", "\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for the answer. Can you please explain\
    \ why you used `sapply` here? I understand that `sapply` applies a function to\
    \ each element of a list, but why are we applying `function(x) x^2`?\n<|/ c |>\n\
    <| c |>\n`sapply` applies a function to each element of a list. `function(x) x^2`\
    \ means \"apply the function `function` on every element of `lst`\". `function(x)\
    \ x^2` means \"apply the function `function` on every element of `lst` and return\
    \ the result as a vector\".\n<|/ c |>\n<| c |>\nThanks for the explanation. I\
    \ think I understand it now. One last question: why did you use `function(x) x^2`\
    \ instead of `function(x) round(x)^2`? I understand that `round` rounds a number\
    \ to the nearest integer, but why did you use `function(x) x^2`?\n<|/ c |>\n<|\
    \ c |>\n`round` rounds a number to the nearest integer. `function(x) x^2` means\
    \ \"apply the function `function` on every element of `lst` and return the result\
    \ as a vector\". `function(x) round(x)^2` means \"apply the function `function`\
    \ on every element of `lst` and return the result as a vector\".\n<|/ c |>\n<|\
    \ c |>\nThanks for the explanation. One last question: why did you use `function(x)\
    \ x^2` instead of `function(x) round(x)^2`? I understand that `round` rounds a\
    \ number to the nearest integer, but why did you use `function(x) x^2`?\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\nThe sapply function applies a function to each\
    \ element of a list. function(x) x^2 means \"apply the function function on every\
    \ element of lst and return the result as a vector\". \n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x)^2))\n}\n</code>\nThe\
    \ round function rounds a number to the nearest integer. function(x) round(x)^2\
    \ means \"apply the function function on every element of lst and return the result\
    \ as a vector\".\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round", "\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\nWe can use Reduce\n\
    <code>\nReduce(`+`, lst)\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\nWe\
    \ can use purrr::reduce\n<code>\npurrr::reduce(lst, `+`)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,list |>\nWe can use Reduce\n<code>\nReduce(`+`, lst)\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nWe can use purrr::reduce\n<code>\npurrr::reduce(lst,\
    \ `+`)\n</code>\n<|/ a tags=r,list |>\n<| a tags=r,list |>\nWe can use Reduce\
    \ with +\n<code>\nReduce(`+`, lst)", "\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any packages. I only need to use base R. I am not allowed to use any\
    \ loops.\n<|/ c |>\n<| c |>\nI edited my answer to include a base R solution.\
    \ Hope it helps.\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. I am not allowed to use any packages. I only need\
    \ to use base R. I am not allowed to use any loops.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer. I am not allowed\
    \ to use any packages. I only need to use base R. I am not allowed to use any\
    \ loops.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. I am not allowed to use any packages. I only need to use\
    \ base R. I am not allowed to use any loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThanks for your answer. I am not allowed to use any\
    \ packages. I only need to use base R. I am not allowed to use any loops.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any packages. I only need to use base R. I am not allowed\
    \ to use any loops.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_square",
  "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis\
    \ doesn't seem to work. `lst(c(1.0, 4.0, 9.0))` returns `84` instead of `98`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. Thanks for pointing that\
    \ out. I've updated my answer.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares ",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| a tags=r,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function |>\n\
    <| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,function |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| a tags=", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/17889493)\n<|/ c |>\n<| c |>\n\
    It does provide an answer to the question. He asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He also asked how to round the numbers to the nearest integer. He also asked\
    \ how to round the numbers to the nearest integer. He also asked how to round\
    \ the numbers to the nearest integer. He also asked how to round the numbers to\
    \ the nearest integer. He also asked how to round the numbers to the nearest integer.\
    \ He ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list\
    \ |>\n<| c |>\nI like your solution but I'm curious why you use `sapply` instead\
    \ of `lapply`?\n<|/ c |>\n<| c |>\n`sapply` returns a vector while `lapply` returns\
    \ a list. `sapply` can only handle vectors and `lapply` can handle lists. `sapply`\
    \ can handle both vectors and lists. `lapply` can only handle lists.\n<|/ c |>\n\
    <| c |>\nI see. Thanks for the explanation!\n<|/ c |>\n<| a tags=r,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a list with more than\
    \ one element. `sum_squares(c(1,2,3))` returns `NA` instead of `6`.\n<|/ c |>\n\
    <| a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=1 |>\n", "\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThis\
    \ doesn't seem to work. `lst(c(1.0, 2.0, 3.0))` returns `14` instead of `14.0`\n\
    <|/ c |>\n<| c |>\nI added a rounding function to the answer\n<|/ c |>\n<| a tags=r,list\
    \ |>\nHere's a solution using purrr::map and purrr::reduce:\n<code>\nlibrary(purrr)\n\
    \nsum_squares <- function(lst) {\n  map(lst, round, digits = 2) %>% \n    reduce(`+`)\n\
    }\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using purrr::map\
    \ and purrr::reduce:\n<code>\nlibrary(purrr)\n", "\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.4,\
    \ 4.2, 0.0))` returns `29` instead of `6`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to round the numbers to the nearest integer.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work either. `lst(c(1.4, 4.2, 0.0))` returns\
    \ `29` instead of `6`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the\
    \ answer to round the numbers to the nearest integer.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.4,\
    \ 4.2, 0.0))` returns `29` instead of `6`.\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've updated the answer to round the numbers to the nearest integer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2,1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThis doesn't\
    \ seem to work. `lst(c(1.4, 4.2, 0.0))` returns `29` instead of `6`.\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated the answer to round the numbers to\
    \ the nearest integer.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2,1)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2,1)))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,1)))\n}\n</code>\n\
    <|/ a tags=r dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2,", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>", "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r,function,sapply |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r,function,sapply |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r,function,sapply\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r,function,sapply |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r,function,sapply |>\n<| a tags=r,function,sapply |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1 tags=r,function,sapply\
    \ |>\n<| a tags=r,function,sapply |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,sapply\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function,sapply |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tag", "\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a ", "\n  sum(sapply(lst, function(x) round(sqrt(x),\
    \ digits = 2)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits\
    \ = 2)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x), digits = 2)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, ", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n</code>\n<|/ a dscore=0 tags=r |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r dscore=0 ",
  "\n  sum(sapply(lst, function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, digits = 1)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function dscore=0 |>\n<|\
    \ a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `lst(c(1.0, 2.0, 3.0))`\
    \ returns `14` instead of `14.0`.\n<|/ c |>\n<| c |>\nIt does work. `lst(c(1.0,\
    \ 2.0, 3.0))` returns `14.0`. `lst(c(1.0, 2.0, 3.0))` returns `14.0` because `round`\
    \ returns a numeric vector with one element (14).\n<|/ c |>\n<| c |>\nI apologize,\
    \ I misread your answer. Your solution does work. Thank you for your help.\n<|/\
    \ c |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a\
    \ tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore", "\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function |>\n<|\
    \ a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r,list,function dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 tags=r,list,function\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,list,function |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, ", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| c |>\nI like the use of `sapply` here, but I\
    \ wonder if there is a way to avoid the anonymous function and just use `mapply`?\n\
    <|/ c |>\n<| c |>\nI guess `mapply` would work too, but I find it more readable\
    \ and easier to understand when working with lists.\n<|/ c |>\n<| c |>\nI agree\
    \ that `mapply` would be more readable, but I find it more difficult to understand\
    \ when working with lists. I guess it's just a matter of taste.\n<|/ c |>\n<|\
    \ c |>\nI agree that `mapply` would be more readable, but I find it more difficult\
    \ to understand when working with lists. I guess it's just a matter of taste.\n\
    <|/ c |>\n<| c |>\nI agree that `mapply` would be more readable, but I find it\
    \ more difficult to understand when working with lists. I guess it's just a matter\
    \ of taste.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using purrr::map and\
    \ purrr::reduce:\n<code>\nlibrary(purrr)\n\nsum_squares <- function(lst) {\n \
    \ map(lst, ~round(.^2, 0))\n}\n\nsum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<|", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| c |>\nI like the use of `sapply` here, but I wonder if\
    \ there is a way to avoid the anonymous function? Something like `sapply(lst,\
    \ sum)` ?\n<|/ c |>\n<| c |>\nI guess `sapply(lst, sum)` would work, but I guess\
    \ it would be less efficient.\n<|/ c |>\n<| c |>\n`sapply(lst, sum)` will return\
    \ a vector of the same length as `lst`, whereas `sum(sapply(lst, function(x) x\
    \ * x))` will return a vector of the same length as `lst` but with the values\
    \ rounded up to the next integer.\n<|/ c |>\n<| c |>\nYes, but `sapply` will return\
    \ a vector of the same length as `lst`, whereas `sum` will return a vector of\
    \ the same length as `lst` but with the values rounded up to the next integer.\n\
    <|/ c |>\n<| c |>\nYes, but `sapply` will return a vector of the same length as\
    \ `lst`, whereas `sum` will return a vector of the same length as `lst` but with\
    \ the values rounded up to the next integer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a tags=r,list |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 tags=r,list |>\n<| a tags=r,list ", "\n  sum(sapply(lst, function(x)\
    \ round(x * x)))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n\
    <|/ a tags=r |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x * x)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.", "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease don't post only\
    \ code as an answer, but also provide an explanation what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's\
    \ better to add context as to why/how it works. This can help future users learn,\
    \ and apply that knowledge to their own code. You are also likely to have positive\
    \ feedback from users in the form of upvotes, when the code is explained.\n<|/\
    \ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's\
    \ better to add context as to why/how it works. This can help future users learn,\
    \ and apply that knowledge to their own code. You are also likely to have positive\
    \ feedback from users in the form of upvotes, when the code is explained.\n<|/\
    \ c |>\n<| a tag", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, this was very helpful.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n\
    <| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) round", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function dscore=1 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 tags=r,function\
    \ |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide\
    \ a solution to the question, it's better to add context as to why/how it works.\
    \ This can help future users learn, and apply that knowledge to their own code.\
    \ You are also likely to have positive feedback from users in the form of upvotes,\
    \ when the code is explained.\n<|/ c |>\n<| a tags=r,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=0\
    \ tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0\
    \ |>\n", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n\
    <| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nWhile this code may\
    \ answer the question, providing additional context regarding why and/or how this\
    \ code answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for my example. However when I try to use it on my actual data\
    \ set it gives me the following error:\nError in lst(lst) : argument \"lst\" is\
    \ missing, with no default\n<|/ c |>\n<| c |>\nI cannot reproduce your error.\
    \ Can you post the code you are using to call `sum_squares`?\n<|/ c |>\n<| c |>\n\
    I added the code to the original question\n<|/ c |>\n<| c |>\nI cannot reproduce\
    \ your error. Can you post the code you are using to call `sum_squares`?\n<|/\
    \ c |>\n<| c |>\nI added the code to the original question\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a tags=r,list |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for my example. However when I try to use it on my actual data\
    \ set it gives me the following error:\nError in lst(lst) : argument \"lst\" is\
    \ missing, with no default\n<|/ c |>\n<| c |>\nI cannot reproduce your error.\
    \ Can you post the code you are using to call `sum_squares`?\n<|/ c |>\n<| c |>\n\
    I added the code to the original question\n<|/ c |>\n<| c |>\nI cannot reproduce\
    \ your error. Can you post the code you are using to call `sum_squares`?\n<|/\
    \ c |>\n<| c |>\nI added the code to the original question\n<|/ c |>\n<| a tags=r,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for my example. However when I try to use it on my actual data\
    \ set it gives me the following error:\nError in lst(lst) : argument \"lst\" is\
    \ missing, with no default\n<|/ c |>\n<| c |>\nI cannot reproduce your error.\
    \ Can you post the code you are using to call `sum_squares`?\n<|/ c |>", "\n \
    \ sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 tags=r,list,function\
    \ |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function |>\n<|\
    \ a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x))))\n}\n</code>\n<|/ a dscore=1 |>\n<| a ", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(", "\n  sum(sapply(lst, function(x) x * x))\n}\n", "\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any packages other than base R.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any packages other than base R.\n<|/ c |>\n<| c |>\n\
    I added a solution without packages.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any packages other\
    \ than base R.\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a tags=r dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a |>\n<code>", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `lst(c(-2.4, 1.0, 1.0))` returns `6` instead of `-6`.\n<|/ c |>\n<|\
    \ c |>\nI didn't know that `lst` was a function in R. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10407156)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to round\
    \ the numbers to the nearest integer. He also provided an example that he could\
    \ use to test his code. He also provided a solution that he could use to solve\
    \ his problem.\n<|/ c |>\n<| c |>\nI believe it does answer the question. He asked\
    \ how to round the numbers to the nearest integer. He also provided an example\
    \ that he could use to test his code. He also provided a solution that he could\
    \ use to solve his problem. He also provided a solution that he could use to solve\
    \ his problem. He also provided a solution that he could use to solve his problem.\
    \ He also provided a solution that he could use to solve his problem. He also\
    \ provided a solution that he could use to solve his problem. He also provided\
    \ a solution that he could use to solve his problem.\n<|/ c |>\n<| c |>\nI believe\
    \ it does answer the question. He asked how to round the numbers to the nearest\
    \ integer. He also provided an example that he could use to test his code. He\
    \ also provided a solution that he could use to solve his problem. He also provided\
    \ a solution that he could use to solve his problem. He also provided a solution\
    \ that he could use to solve his problem. He also provided a solution that he\
    \ could use to solve his problem. He also provided a solution that he could use\
    \ to solve his problem. He also provided a solution that he could use to solve\
    \ his problem. He also provided a solution that he could use to solve his problem.\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to round\
    \ the numbers to the nearest integer. He also provided an example that he could\
    \ use to test his code. He also provided a solution that he could use to solve\
    \ his problem. He also provided a solution that he could use to solve his problem.\
    \ He also provided a solution that he could use to solve ", "\n  sum(sapply(lst,\
    \ function(x) round(sqrt(x), digits = 1)))\n}\n", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for my example, but when I try to use it on\
    \ my own data I get the following error: `Error in lst(c(1.0, 2.0, 3.0)) : 'list'\
    \ object cannot be coerced to type 'double'`\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that should work for your data.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for my example, but when I try to\
    \ use it on my own data I get the following error: `Error in lst(c(1.0, 2.0, 3.0))\
    \ : 'list' object cannot be coerced to type 'double'`\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that should work for your data.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for my example, but\
    \ when I try to use it on my own data I get the following error: `Error in lst(c(1.0,\
    \ 2.0, 3.0)) : 'list' object cannot be coerced to type 'double'`\n<|/ c |>\n<|\
    \ a tags=r,function,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,function,list |>\n<| a tags=r,function,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>", "\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a\
    \ tags=r,list |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list |>\n<| c\
    \ |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes\n<|/ c |>\n<| c |>\nWhile this code may provide\
    \ a solution to the question, it's better to add context as to why/how it works.\
    \ This can help future users learn and eventually apply that knowledge to their\
    \ own code. You are also likely to have positive feedback/upvotes from users,\
    \ when the code is explained.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do",
  "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for your answer! I appreciate it! I actually have another question,\
    \ what if I wanted to round the numbers to 2 decimal places instead of just rounding\
    \ up? Would it be possible to round the numbers to 2 decimal places instead of\
    \ just rounding up?\n<|/ c |>\n<| c |>\nYes, you can round the numbers to 2 decimal\
    \ places instead of just rounding up. Just add `round(..., 2)` to the `sapply`\
    \ function in the `sum_squares` function.\n<|/ c |>\n<| c |>\nThank you for your\
    \ help! I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    Thank you for your answer! I appreciate it! I actually have another question,\
    \ what if I wanted to round the numbers to 2 decimal places instead of just rounding\
    \ up? Would it be possible to round the numbers to 2 decimal places instead of\
    \ just rounding up?\n<|/ c |>\n<| c |>\nYes, you can round the numbers to 2 decimal\
    \ places instead of just rounding up. Just add `round(..., 2)` to the `sapply`\
    \ function in the `sum_squares` function.\n<|/ c |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you for your answer! I appreciate it! I actually\
    \ have another question, what if I wanted to round the numbers to 2 decimal places\
    \ instead of just rounding up? Would it be possible to round the numbers to 2\
    \ decimal places instead of just rounding up?\n<|/ c |>\n<| c |>\nYes, you can\
    \ round the numbers to 2 decimal places instead of just rounding up. Just add\
    \ `round(..., 2)` to the `sapply` function in the `sum_squares` function.\n<|/\
    \ c |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum",
  "\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\
    \ Why does it work?\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a dscore=0 tags=r |>\n<| c |>\nPlease add some explanation to\
    \ your answer. Why does it work?\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a tags=r |>\n<| c |>\nPlease add some explanation to your answer.\
    \ Why does it work?\n<|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) round(x^2, digits=ceiling(log10(abs(x)))))^2)\n\
    }\n</code>\n<|/ a dscore=0 tags=r |>\n<| c |>\nPlease add some explanation to\
    \ your answer. Why does it work?\n<|/ c |>\n<| a tags=r |>\n<code>", "\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a |>\n<| a dscore=2 |>\nHere's\
    \ a solution using purrr::map2\n<code>\nlibrary(purrr)\nlibrary(dplyr)\n\nsum_squares\
    \ <- function(lst) {\n  map2(lst, ceiling(lst), ~sum(.x * .y))\n}\n\nsum_squares(c(1.0,\
    \ 2.0, 3.0))", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\n`sapply` returns a vector, not a list. `sum` will sum up all the\
    \ elements in the vector, which is probably not what OP wants.\n<|/ c |>\n<| c\
    \ |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to avoid the sapply and just use mapply?\n<|/ c |>\n<| c |>\nI guess you could\
    \ do `mapply(function(x) x * x, lst)` but that would just be `lst^2`\n<|/ c |>\n\
    <| c |>\nI guess you could do `mapply(function(x) x * x, lst)` but that would\
    \ just be `lst^2`\n<|/ c |>\n<| c |>\nI guess you could do `mapply(function(x)\
    \ x * x, lst)` but that would just be `lst^2`\n<|/ c |>\n<| c |>\nI guess you\
    \ could do `mapply(function(x) x * x, lst)` but that would just be `lst^2`\n<|/\
    \ c |>\n<| a tags=r,function,apply |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to avoid the sapply and just\
    \ use mapply?\n<|/ c |>\n<| c |>\nI guess you could do `mapply(function(x) x *\
    \ x, lst)` but that would just be `lst^2`\n<|/ c |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function,apply dscore=2 |>\n<| a tags=r,function,apply |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function,apply |>\n<| a tags=r,function,apply\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function,apply ", "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nThe answer by is correct, but I thought I'd\
    \ add some explanation as to why it works.\nThe function sum_squares returns a\
    \ single value, which is the sum of squared numbers in the list. \nThe function\
    \ sapply returns a vector of the results of applying the function sum_squares\
    \ to each element of the list lst. \nThe function sapply is similar to lapply,\
    \ but instead of returning a list, it returns a vector. \nThe function sapply\
    \ is similar to mapply, but instead of returning a list, it returns a vector.\
    \ \nThe function sapply is similar to lapply, but instead of returning a list,\
    \ it returns a vector. \nThe function sapply is similar to mapply, but instead\
    \ of returning a list, it returns a vector. \nThe function sapply is similar to\
    \ lapply, but instead of returning a list, it returns a vector. \nThe function\
    \ sapply is similar to lapply, but instead of returning a list, it returns a vector.\
    \ \nThe function sapply is similar to lapply, but instead of returning a list,\
    \ it returns a vector. \nThe function sapply is similar to lapply, but instead\
    \ of returning a list, it returns a vector. \nThe function sapply is similar to\
    \ lapply, but instead of returning a list, it returns a vector. \nThe function\
    \ sapply is similar to lapply, but instead of returning a list, it returns a vector.\
    \ \nThe function sapply is similar to lapply, but instead of returning a list,\
    \ it returns a vector. \nThe function sapply is similar to lapply, but instead\
    \ of returning a list, it returns a vector. \nThe function sapply is similar to\
    \ lapply, but instead of returning a list, it returns a vector. \nThe function\
    \ sapply is similar to lapply, but instead of returning a list, it returns a vector.\
    \ \nThe function sapply is similar to lapply, but instead of returning a list,\
    \ it returns a vector. \nThe function sapply is similar to lapply, but instead\
    \ of returning a list, it returns a vector. \nThe function sapply is similar to\
    \ lapply, but instead of returning a list, it returns a vector. \nThe function\
    \ sapply is similar to lapply, but instead of returning a list, it returns a vector.\
    \ \nThe function sapply is similar to lapply, but instead of returning a list,\
    \ it returns a vector. \nThe function sapply is similar to lapply, but instead\
    \ of returning a list, it returns a vector. \nThe function sapply is similar to\
    \ lapply, but instead of returning a list, it returns a vector. \nThe function\
    \ sapply is similar to lapply, but instead of returning a list, it returns a vector.\
    \ \nThe function s", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=1 tags=r,list,function |>\n<| a dscore=1 |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}", "\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function |>\n\
    <| c |>\nThis doesn't work. Try `lst(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\n\
    It does work. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\nIt does work. Try `sum_squares(c(1.0,\
    \ 4.0, 9.0))`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| c |>\nThis doesn't work. Try `lst(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\n\
    It does work. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n<| a tags=r,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `lst(c(1.0, 4.0, 9.0))`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try `sum_squares(c(1.0, 4.0, 9.0))`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| c |>\nThis doesn't work. Try\
    \ `lst", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/11896154)\n<|/ c |>\n<| c |>\nI added an explanation\
    \ as to why I believe this to be an answer. Feel free to edit it further if you\
    \ think it needs clarification.\n<|/ c |>\n<| c |>\nI believe it to be an answer\
    \ because it is an answer to the question. Hence the upvote.\n<|/ c |>\n<| c |>\n\
    I believe it to be an answer because it is an answer to the question. Hence the\
    \ upvote.\n<|/ c |>\n<| c |>\nI believe it to be an answer because it is an answer\
    \ to the question. Hence the upvote.\n<|/ c |>\n<| a tags=r |>\n<code>", "\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| c |>\nI like this solution, although I prefer `sapply(lst, function(x)\
    \ round(x * x, 0))`\n<|/ c |>\n<| c |>\nI agree, `round` would be more efficient.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a dscore=2\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,list,function |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- ", "\n  sum(sapply(lst, function(x) x * x))\n}\n",
  "\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r |>\n<| c |>\n\
    This doesn't round the numbers to the ceiling first. `lst(c(1.4, 4.2, 0.0))` returns\
    \ `29` instead of `6`.\n<|/ c |>\n<| c |>\nYes, I missed that requirement. I've\
    \ updated my answer to include a function that does that.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere's a solution using purrr::map2\n<code>\nlibrary(purrr)\n\nsum_squares\
    \ <- function(lst) {\n  map2(lst, ceiling(lst), `*`)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nHere's a solution using purrr::reduce:\n<code>\nsum_squares\
    \ <- function(lst) {\n  reduce(lst, `*`)\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=r |>\nHere's a solution using purrr::reduce:\n<code>\nsum_squares <- function(lst)\
    \ {\n  reduce(lst, `*`)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\nUsing\
    \ purrr you can do:\n<code>\nlibrary(purrr)\nsum_squares <- function(lst) {\n\
    \  map(lst, ~.x * .x)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r |>\nUsing purrr\
    \ you can do:\n<code>\nsum_squares <- function(lst) {\n  map(lst, ~.x * .x)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nUsing purrr you can do:\n<code>\n\
    sum_squares <- function(lst) {\n  map(lst, ~.x * .x)\n}\n</code>\n<|/ a tags=r\
    \ |>\n<| a tags=r |>\nUsing purrr you can do:\n<code>\nsum_squares <- function(lst)\
    \ {\n  map(lst, ~.x * .x)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nUsing\
    \ purrr you can do:\n<code>\nsum_squares <- function(lst) {\n  map(lst, ~.x *\
    \ .x)\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r |>\nUsing purrr you can do:\n\
    <code>\nsum_squares <- function(lst) {\n  map(lst, ~", "\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x * x))\n}\n</code>\n<|/ a tags=r,function dscore=1 |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n\
    \  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| a dscore=1 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,function |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a dscore",
  "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list |>\n<| c\
    \ |>\nWhile this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,function,list dscore=0 |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a tags=r,function,list\
    \ |>\n<code>\nsum_squares ", "\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1\
    \ tags=r |>\n<| a |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x^2))\n}\n</code>\n<|/ a tags=r dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a dscore=1\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a tags=r |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a tags=r |>\n<| a tags=r\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x^2))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) x^2))\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=r |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x)\
    \ x^2))\n}\n</code>\n<|/ a d", "\n  sum(sapply(lst, function(x) round(sqrt(x))))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution that uses purrr::map()\
    \ and purrr::reduce() instead of sapply().\n<code>\nlibrary(purrr)\n\nsum_squares\
    \ <- function(lst) {\n  map(lst, round, digits = 1) %>%\n    reduce(`+`)\n}\n\n\
    sum_squares(c(1.0, 2.0, 3.0))", "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list |>\nHere's a solution using purrr:\n\
    <code>\nlibrary(purrr)\nlibrary(dplyr)\n\nlst <- list(\n  c(1.0, 2.0, 3.0),\n\
    \  c(1.0, 4.0, 9.0),\n  c(1.0, 3.0, 5.0, 7.0),\n  c(1.4, 4.2, 0.0),\n  c(-2.4,\
    \ 1.0, 1.0)\n)\n\nlst %>% \n  map(~sum(.^2)) %>% \n  map(round, 0) %>% \n  reduce(`+`)",
  "\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a tags=r,list,function |>\n<| a tags=r,list,function |>\n\
    <code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nsum_squares <- function(lst)\
    \ {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a tags=r,list,function\
    \ |>\n<| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n \
    \ sum(sapply(lst, function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,list,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) round(x^2, 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2,\
    \ 0)))\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) round(x^2, 0)))\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,list,function |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(", "\n  sum(sapply(lst, function(x) x * x))\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| c |>\nThank you\
    \ so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares\
    \ <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a\
    \ tags=r,function |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/\
    \ c |>\n<| a tags=r,function |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <-\
    \ function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n<|/ a tags=r,function\
    \ |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a tags=r,function\
    \ |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x\
    \ * x))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate\
    \ it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(sapply(lst,\
    \ function(x) x * x))\n}\n</code>\n<|/ a tags=r,function |>\n<| c |>\nThank you\
    \ so much! I really appreciate it!\n<|/ c |>\n<| a tags=r,function |>\n<code>\n\
    sum_squares <- function(lst) {\n  sum(sapply(lst, function(x) x * x))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nsum_squares <- function(lst) {\n  sum(s"]
stop_tokens:
- "\n#"
- "\n```"
