name: HumanEval_30_get_positive
language: r
prompt: "# Return only positive numbers in the list.\n# >>> get_positive(c(-1, 2,\
  \ -4, 5, 6))\n# list(2, 5, 6)\n# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10))\n# list(5, 3, 2, 3, 9, 123, 1)\nget_positive <- function(l) {"
tests: "test_humaneval <- function() {\ncandidate <- get_positive\n    if(!identical(candidate(c(-1,\
  \ -2, 4, 5, 6)), list(4, 5, 6))){quit('no', 1)}\n    if(!identical(candidate(c(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)), list(5, 3, 2, 3, 3, 9, 123, 1))){quit('no',\
  \ 1)}\n    if(!identical(candidate(c(-1, -2)), list())){quit('no', 1)}\n    if(!identical(candidate(c()),\
  \ list())){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <-\
    \ Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x)\
    \ x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n\
    }\n", "\n  l <- as.list(l)\n  l[sapply(l, is.numeric)] <- lapply(l[sapply(l, is.numeric)],\
    \ abs)\n  l[sapply(l, is.numeric)][sapply(l, function(x) all(x < 0))] <- NA\n\
    \  l[sapply(l, is.numeric)][sapply(l, function(x) all(x > 0))] <- 0\n  l[sapply(l,\
    \ is.numeric)][sapply(l, function(x) all(is.na(x)))] <- NA\n  l\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I cannot get it to work.\
    \ `get_positive(c(-1, 2, -4, 5, 6))` returns `list(2, 5, 6)` instead of `list(2,\
    \ 5, 6, NA)`. `get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))` returns\
    \ `list(5, 3, 2, 3, 9, 123, 1)` instead of `list(5, 3, 2, 3, 9, 123, 1, NA)`.\
    \ Any ideas?\n<|/ c |>\n<| c |>\nI edited my answer to include a function that\
    \ should work for you. Let me know if that works for you.\n<|/ c |>\n<| c |>\n\
    I edited my answer to include a function that should work for you. Let me know\
    \ if that works for you.\n<|/ c |>\n<| c |>\nI edited my answer to include a function\
    \ that should work for you. Let me know if that works for you.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nHere is a base R solution:\n<code>\nget_positive <- function(x)\
    \ {\n  x <- as.list(x)\n  x[sapply(x, is.numeric)] <- lapply(x[sapply(x, is.numeric)],\
    \ abs)\n  x[sapply(x, is.numeric)][sapply(x, function(x) all(x < 0))] <- NA\n\
    \  x[sapply(x, is.numeric)][sapply(x, function(x) all(x > 0))] <- 0\n  x[sapply(x,\
    \ is.numeric)][sapply(x, function(x) all(is.na(x)))] <- NA\n  x\n}\n</code>\n\
    <|/ a tags=r,list |>\n<| c |>\nI like your solution, but I cannot get it to work.\
    \ `get_positive(c(-1, 2, -4, 5, 6))` returns `list(2, 5, 6)` instead of `list(2,\
    \ 5, 6, NA)`. `get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))` returns\
    \ `list(5, 3, 2, 3, 9, 123, 1)` instead of `list(5, 3, 2, 3, 9, 12", "\n  l <-\
    \ Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x)\
    \ x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n\
    }\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x)\
    \ x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n\
    }\n", "\n  l <- Filter(Negate(is.na), l)\n  l <- Filter(Negate(is.finite), l)\n\
    \  return(l)\n}\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n}\n",
  "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x)\
    \ x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(Negate(is.na), l)\n  l <- Filter(Negate(is.finite),\
    \ l)\n  return(l)\n}\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n\
    }\n", "\n  l <- Filter(function(x) x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(function(x)\
    \ x > 0, l)\n  return(l)\n}\n", "\n  l <- Filter(Negate(is.na), l)\n  l <- Filter(Negate(is.finite),\
    \ l)\n  return(l)\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
