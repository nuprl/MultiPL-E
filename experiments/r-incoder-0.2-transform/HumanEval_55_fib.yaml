name: HumanEval_55_fib
language: r
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\nfib <- function(n) {"
tests: "test_humaneval <- function() {\ncandidate <- fib\n    if(!identical(candidate(10),\
  \ 55)){quit('no', 1)}\n    if(!identical(candidate(1), 1)){quit('no', 1)}\n    if(!identical(candidate(8),\
  \ 21)){quit('no', 1)}\n    if(!identical(candidate(11), 89)){quit('no', 1)}\n  \
  \  if(!identical(candidate(12), 144)){quit('no', 1)}\n}\ntest_humaneval()"
completions: ["\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</cell>\n<text>\nExercise 2\nWrite a function that returns the nth\
    \ Fibonacci number using recursion.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to make it more efficient. For example,\
    \ if you have a very large number of iterations, it would be better to use a recursive\
    \ function instead of a loop. Is there a way to do this in R?\n<|/ c |>\n<| c\
    \ |>\nI guess you could use memoization to speed things up. Or you could use Rcpp\
    \ to implement the function using Rcpp which would probably be faster.\n<|/ c\
    \ |>\n<| c |>\nI guess you could use memoization to speed things up. Or you could\
    \ use Rcpp to implement the function using Rcpp which would probably be faster.\n\
    <|/ c |>\n<| c |>\nI guess you could use memoization to speed things up. Or you\
    \ could use Rcpp to implement the function using Rcpp which would probably be\
    \ faster.\n<|/ c |>\n<| c |>\nI guess you could use memoization to speed things\
    \ up. Or you could use Rcpp to implement the function using Rcpp which would probably\
    \ be faster.\n<|/ c |>\n<| a dscore=5 |>\nThe RcppArmadillo package has a Fibonacci\
    \ function which can be called from R:\n<code>\nlibrary(RcppArmadillo)\ncppFunction('\n\
    arma::vec fib(arma::uvec n) {\n  arma::vec ret;\n  ret(0) = ret(1) = 1;\n  for(int\
    \ i = 2; i < n; i++) {\n    ret(i) = ret(i-1) + ret(i-2);\n  }\n  return ret;\n\
    }')\n</code>\n<|/ a tags=r,fibonacci,algorithm |>\n<| c |>\nThis should be the\
    \ accepted answer. Much more efficient than other solutions.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more efficient than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more efficient than\
    \ other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more efficient than other solutions.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Much more efficient than other solutions.\n<|/ c |>\n<| a dscore=5\
    \ |>\nHere's a solution using RcppArmadil", "\n  n <- n + 1\n  if (n <= 1) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe recursive\
    \ solution is very elegant, but it's also very inefficient. Try running it on\
    \ `n = 100`.\n<|/ c |>\n<| c |>\nI agree with you. I've added a non-recursive\
    \ version. Thanks.\n<|/ c |>\n<| c |>\nI added a non-recursive version as well.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThanks for the answer! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nI added a non-recursive version as well. Thanks.\n<|/ c |>\n\
    <| a dscore=3 |>\nHere's a recursive solution that doesn't use any global variables:\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n\
    </code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib\
    \ <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/\
    \ a dscore=3 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a dscore=3 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nfib <- function(n) {\n\
    \  if(n <= 1) 1\n  else fib(n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n", "\n  if (n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the nth Fibonacci\
    \ number modulo 1000000007 (i.e. the remainder after dividing by 1000000007).\n\
    \n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is not tail recursion.\n<|/ c |>\n<| c |>\nI\
    \ agree, it's not tail recursion, but it's still a recursive function and it's\
    \ still a recursive function call. Tail recursion would mean that the function\
    \ call itself is tail recursive.\n<|/ c |>\n<| c |>\nI agree with you, my point\
    \ is that this is not a tail recursion.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my point is that this is not a tail recursion.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, my point is that this is not a tail recursion.\n<|/ c |>\n<| a dscore=5\
    \ |>\nThe recursive function can be written as a loop:\n<code>\nfib <- function(n)\
    \ {\n  i <- 1\n  while(i <= n) {\n    i <- i + i\n  }\n  i\n}\n</code>\n<|/ a\
    \ tags=recursion,r |>\n<| c |>\nThis is not tail recursion.\n<|/ c |>\n<| c |>\n\
    This is not tail recursion.\n<|/ c |>\n<| c |>\nThis is not tail recursion.\n\
    <|/ c |>\n<| c |>\nThis is not tail recursion.\n<|/ c |>\n<| c |>\nThis is not\
    \ tail recursion.\n<|/ c |>\n<| a dscore=5 |>\nThe recursive function can be written\
    \ as a loop:\n<code>\nfib <- function(n) {\n  i <- 1\n  while(i <= n) {\n    i\
    \ <- i + i\n  }\n  i\n}\n</code>\n<|/ a tags=recursion,r |>\n<| c |>\nThis is\
    \ not tail recursion.\n<|/ c |>\n<| c |>\nThis is not tail recursion.\n<|/ c |>\n\
    <| c |>\nThis is not tail recursion.\n<|/ c |>\n<| c |>\nThis is not tail recursion.\n\
    <|/ c |>\n<| c |>\nThis is not tail recursion.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ recursive function can be written as a loop:\n<code>\nfib <- function(n) {\n\
    \  i <- 1\n  while(i <= n) {\n    i <- i + i\n  }\n  i\n}\n</code>\n<|/ a tags=recursion",
  "\n  n <- as.integer(n)\n  if (n <= 0) stop(\"n must be positive\")\n  else if (n\
    \ == 1) return(1)\n  else if (n == 2) return(2)\n  else {\n    x <- fib(n - 2)\n\
    \    y <- fib(n - 1)\n    return(x + y)\n  }\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks, this was very helpful.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 0) stop(\"n must be positive\")\n\
    \  if(n ==1) return(1)\n  if(n ==2) return(2)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <=\
    \ 0) stop(\"n must be positive\")\n  if(n ==1) return(1)\n  if(n ==2) return(2)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 0) stop(\"n must\
    \ be positive\")\n  if(n ==1) return(1)\n  if(n ==2) return(2)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=1\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 0) stop(\"n must be positive\")\n\
    \  if(n ==1) return(1)\n  if(n ==2) return(2)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=0 |>\n<code>\nfib\
    \ <- function(n){\n  if(n <= 0) stop(\"n must be positive\")\n  if(n ==1) return(1)\n\
    \  if(n ==2) return(2)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 0) stop(\"n must be positive\")\n  if(n ==1) return(1)\n  if(n ==2) return",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n \
    \ if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n -\
    \ 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\n\
    This doesn't seem to work for me. `fib(10)` returns `55` but `fib(8)` returns\
    \ `21`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nI copied it exactly as you wrote it.\
    \ I even tried copying it into a new R script and running it but still get the\
    \ same results. I'm running R version 3.2.2 on Windows 7.\n<|/ c |>\n<| c |>\n\
    I tested it on R 3.2.2 on Windows 7 and it works fine. Are you sure you copied\
    \ the code correctly? Did you copy the code exactly as I wrote it? Did you copy\
    \ it into a fresh R script and run it? Did you copy it into a fresh R script and\
    \ run it again? Did you copy it into a fresh R script and run it a third time?\
    \ Did you copy it into a fresh R script and run it a fourth time? Did you copy\
    \ it into a fresh R script and run it a fifth time? Did you copy it into a fresh\
    \ R script and run it a sixth time? Did you copy it into a fresh R script and\
    \ run it a seventh time? Did you copy it into a fresh R script and run it a eighth\
    \ time? Did you copy it into a fresh R script and run it a ninth time? Did you\
    \ copy it into a fresh R script and run it a tenth time? Did you copy it into\
    \ a fresh R script and run it a eleventh time? Did you copy it into a fresh R\
    \ script and run it a twelfth time? Did you copy it into a fresh R script and\
    \ run it a thirteenth time? Did you copy it into a fresh R script and run it a\
    \ fourteenth time? Did you copy it into a fresh R script and run it a fifteenth\
    \ time? Did you copy it into a fresh R script and run it a sixteenth time? Did\
    \ you copy it into a fresh R script and run it a seventeenth time? Did you copy\
    \ it into a fresh R script and run it a eighteenth time? Did you copy it into\
    \ a fresh R ", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the n-th Fibonacci number using recursion.\n\
    \n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if (n <= 0) stop(\"n must be\
    \ positive\")\n  a <- 1\n  b <- 1\n  for (i in 2:n) {\n    c <- a + b\n    a <-\
    \ b\n    b <- c\n  }\n  return(b)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer! I guess I should have mentioned that I was looking for a solution\
    \ that doesn't require any additional packages. I guess I should have mentioned\
    \ that I was looking for a solution that doesn't require any additional packages.\
    \ I guess I should have mentioned that I was looking for a solution that doesn't\
    \ require any additional packages. I guess I should have mentioned that I was\
    \ looking for a solution that doesn't require any additional packages. I guess\
    \ I should have mentioned that I was looking for a solution that doesn't require\
    \ any additional packages. I guess I should have mentioned that I was looking\
    \ for a solution that doesn't require any additional packages. I guess I should\
    \ have mentioned that I was looking for a solution that doesn't require any additional\
    \ packages. I guess I should have mentioned that I was looking for a solution\
    \ that doesn't require any additional packages. I guess I should have mentioned\
    \ that I was looking for a solution that doesn't require any additional packages.\
    \ I guess I should have mentioned that I was looking for a solution that doesn't\
    \ require any additional packages. I guess I should have mentioned that I was\
    \ looking for a solution that doesn't require any additional packages. I guess\
    \ I should have mentioned that I was looking for a solution that doesn't require\
    \ any additional packages. I guess I should have mentioned that I was looking\
    \ for a solution that doesn't require any additional packages. I guess I should\
    \ have mentioned that I was looking for a solution that doesn't require any additional\
    \ packages. I guess I should have mentioned that I was looking for a solution\
    \ that doesn't require any additional packages. I guess I should have mentioned\
    \ that I was looking for a solution that doesn't require any additional packages.\
    \ I guess I should have mentioned that I was looking for a solution that doesn't\
    \ require any additional packages. I guess I should have mentioned that I was\
    \ looking for a solution that doesn't require any additional packages. I guess\
    \ I should have mentioned that I was looking for a solution that doesn't require\
    \ any additional packages. I guess I should have mentioned that I was looking\
    \ for a solution that doesn't require any additional packages. I guess I should\
    \ have mentioned that I was looking for a solution that doesn't require any additional\
    \ packages. I guess I should have mentioned that I was looking for a solution\
    \ that doesn't require any additional packages. I guess I should have mentioned\
    \ that I was looking for a solution that doesn't require any additional packages.\
    \ I guess I should have mentioned that I was looking for a solution that doesn't\
    \ require any additional packages. I guess I should have mentioned that I was\
    \ looking for a solution that doesn't require any additional packages. I guess\
    \ I should have mentioned that I was looking ", "\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,fibonacci,r |>\n<| c |>\n\
    This doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c |>\n<| c\
    \ |>\nI fixed the typo.\n<|/ c |>\n<| c |>\nThis doesn't work. `fib(1)` returns\
    \ `1` instead of `1` itself.\n<|/ c |>\n<| c |>\nI fixed the typo.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c\
    \ |>\n<| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n\
    <|/ c |>\n<| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c |>\n\
    <| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n\
    <|/ c |>\n<| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't work. `fib(1)` returns `1` instead of `1` itself.\n<|/ c |>\n\
    <| ", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but\
    \ I believe that `fib` should be `fib2` since it returns the nth Fibonacci number,\
    \ not its index. Also, `fib2` should be `fib3` since it returns the nth Fibonacci\
    \ number, not its index.\n<|/ c |>\n<| c |>\nThanks, I fixed the typos. I agree\
    \ that `fib3` should be `fib2`, but `fib2` returns the nth Fibonacci number, not\
    \ its index.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\nI like your solution,\
    \ but I believe that fib should be fib2 since it returns the nth Fibonacci number,\
    \ not its index. Also, fib2 should be fib3 since it returns the nth Fibonacci\
    \ number, not its index.\n<code>\nfib2 <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n\nfib3\
    \ <- function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2)\
    \ 1\n  else fib3(n-1) + fib3(n-2)\n}\n\nfib4 <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib4(n-1) + fib4(n-2)\n}\n\nfib5\
    \ <- function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2)\
    \ 1\n  else fib5(n-1) + fib5(n-2)\n}\n\nfib6 <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib6(n-1) + fib6(n-2)\n}\n\nfib7\
    \ <- function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2)\
    \ 1\n  else fib7(n-1) + fib7(n-2)\n}\n\nfib8 <- function(n) {\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib8(n-1) + fib8(n-2)\n}\n\nfib9\
    \ <", "\n  if(n <= 1) return(1)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis\
    \ doesn't work. `fib(1)` returns `1` instead of `1L`.\n<|/ c |>\n<| c |>\nThanks,\
    \ I fixed it. I was using R 3.1.1 when I wrote the answer.\n<|/ c |>\n<| c |>\n\
    Thanks, I fixed it. I was using R 3.1.1 when I wrote the answer.\n<|/ c |>\n<|\
    \ c |>\nThanks, I fixed it. I was using R 3.1.1 when I wrote the answer.\n<|/\
    \ c |>\n<| c |>\nThanks, I fixed it. I was using R 3.1.1 when I wrote the answer.\n\
    <|/ c |>\n<| a dscore=4 |>\nHere's a recursive solution that uses R's lazy evaluation\
    \ feature:\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't work. `fib(1)`\
    \ returns `1` instead of `1L`.\n<|/ c |>\n<| c |>\nThanks, I fixed it. I was using\
    \ R 3.1.1 when I wrote the answer.\n<|/ c |>\n<| c |>\nThanks, I fixed it. I was\
    \ using R 3.1.1 when I wrote the answer.\n<|/ c |>\n<| a dscore=4 |>\nHere's a\
    \ recursive solution that uses R's lazy evaluation feature:\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis doesn't work. `fib(1)` returns `1` instead of `1L`.\n<|/ c\
    \ |>\n<| c |>\nThanks, I fixed it. I was using R 3.1.1 when I wrote the answer.\n\
    <|/ c |>\n<| a dscore=4 |>\nHere's a recursive solution that uses R's lazy evaluation\
    \ feature:\n<code>\nfib <- function(n){\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a tags=r,", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n -\
    \ 2)\n}\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if\
    \ (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't\
    \ explain what you changed and why.\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nI didn't downvote either, but this answer doesn't explain why\
    \ it works.\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI didn't downvote, but\
    \ I suspect it's because you didn't explain what you changed and why.\n<|/ c |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect it's because you\
    \ didn't explain what you changed and why.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't\
    \ downvote, but I suspect it's because you didn't explain what you changed and\
    \ why.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| c |>\nI didn't downvote, but I suspect\
    \ it's because ", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThanks for your answer! I didn't know that R had tail\
    \ recursion.\n<|/ c |>\n<| c |>\nYes, R has tail recursion, but it is implemented\
    \ differently than other languages. For example, R does not optimize tail recursion\
    \ and it can cause stack overflows.\n<|/ c |>\n<| c |>\n: R does optimize tail\
    \ recursion, at least in some cases. For example, `fib <- function(n) if (n <=\
    \ 1) return(n); fib(n - 1) + fib(n - 2)` will run without stack overflows in R\
    \ (at least in some cases).\n<|/ c |>\n<| c |>\n: I didn't know that. Thanks for\
    \ the info.\n<|/ c |>\n<| c |>\n: I added a version that does not use tail recursion.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a tail-recursive version:\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r\
    \ |>\n<| c |>\nThanks for your answer! I didn't know that R had tail recursion.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a tail-recursive version:\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,r\
    \ |>\n<| a tags=recursion,r |>\nHere's a tail-recursive version:\n<code>\nfib\
    \ <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=2 |>\nHere's a tail-recursive version:\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=recursion,r |>\n<| a dscore=2 |>\nHere's a tail-recursive version:\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=recursion,r |>\n<| a tags=recursion,r |>\nHere's a tail",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(10)\n\
    </cell>\n<cell>\nfib(10)", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThe `return` statement\
    \ is redundant and can be omitted.\n<|/ c |>\n<| c |>\nYes, but it's more readable\
    \ this way and it's more clear that `fib` returns something.\n<|/ c |>\n<| c |>\n\
    I agree with you. But the `return` statement is still useful to make the code\
    \ more readable.\n<|/ c |>\n<| c |>\nI agree with you. But the `return` statement\
    \ is still useful to make the code more readable.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't work. `fib(1)`\
    \ returns `1`, not `0`.\n<|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1`,\
    \ not `0`.\n<|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1`, not `0`.\n\
    <|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1`, not `0`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. `fib(1)` returns `1`, not `0`.\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work. `fib(1)` returns\
    \ `1`, not `0`.\n<|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1`, not `0`.\n\
    <|/ c |>\n<| c |>\nIt does work. `fib(1)` returns `1`, not `0`.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) +\
    \ fib(n - 2)\n}\n", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be non-negative\"\
    )\n  if (n == 0) 1\n  else if (n == 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nI like this solution, but\
    \ I wonder why you chose `ifelse` over `if`? I thought `ifelse` was for vectorized\
    \ comparisons.\n<|/ c |>\n<| c |>\nI chose `ifelse` because `if` only evaluates\
    \ the first element of the vector. `ifelse` evaluates both.\n<|/ c |>\n<| c |>\n\
    I see. Thanks for the explanation.\n<|/ c |>\n<| c |>\nThis was a very nice solution.\
    \ Thanks for sharing!\n<|/ c |>\n<| a dscore=5 |>\nHere's a recursive solution\
    \ that uses R's vectorized ifelse and if:\n<code>\nfib2 <- function(n) {\n  ifelse(n\
    \ < 0, stop(\"n must be non-negative\"), \n         ifelse(n <= 1, n, fib2(n -\
    \ 1) + fib2(n - 2)))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\n\
    This was a very nice solution. Thanks for sharing!\n<|/ c |>\n<| c |>\nThis was\
    \ the best solution for me. Thanks!\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\nHere's a recursive solution that uses R's vectorized ifelse and if:\n<code>\n\
    fib <- function(n) {\n  ifelse(n < 0, stop(\"n must be non-negative\"), \n   \
    \      ifelse(n <= 1, n, fib(n - 1) + fib(n - 2)))\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis was a very nice solution. Thanks for sharing!\n<|/ c |>\n\
    <| c |>\nThis was the best solution for me. Thanks!\n<|/ c |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  if(n > 1) return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis was a very nice solution.\
    \ Thanks for sharing!\n<|/ c |>\n<|", "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"\
    n must be positive\")\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n",
  "\n  n <- as.integer(n)\n  if(n <= 0) stop(\"n must be positive\")\n  if(n <= 1)\
    \ 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n  if (n == 0) return(0)\n  if (n ==\
    \ 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci\
    \ |>\n<| c |>\nI like your solution, but I believe that `fib` should be memoized.\
    \ `fib <- memoize(fib)` should do the trick.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. Memoization is definitely a good idea. I'll add it to the answer.\n<|/\
    \ c |>\n<| c |>\nI added memoization to the answer as you suggested.\n<|/ c |>\n\
    <| c |>\nI added memoization to the answer as you suggested.\n<|/ c |>\n<| a dscore=5\
    \ |>\nHere's a recursive solution:\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci\
    \ |>\n<| c |>\nI like your solution, but I believe that `fib` should be memoized.\
    \ `fib <- memoize(fib)` should do the trick.\n<|/ c |>\n<| c |>\nI agree with\
    \ you. Memoization is definitely a good idea. I'll add it to the answer.\n<|/\
    \ c |>\n<| a |>\nHere's a recursive solution:\n<code>\nfib <- function(n) {\n\
    \  if(n <= 1) return(n)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5\
    \ tags=r,fibonacci |>\n<| c |>\nI like your solution, but I believe that `fib`\
    \ should be memoized. `fib <- memoize(fib)` should do the trick.\n<|/ c |>\n<|\
    \ c |>\nI agree with you. Memoization is definitely a good idea. I'll add it to\
    \ the answer.\n<|/ c |>\n<| a dscore=5 |>\nHere's a recursive solution:\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(n)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,fibonacci |>\n<| c |>\nI like your solution, but I believe\
    \ that `fib` should be memoized. `fib <- memoize(fib)` should do the trick.\n\
    <|/ c |>\n<| a tags=r,fi", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if\
    \ (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis is not the Fibonacci sequence. `fib(0)` returns `1` and `fib(1)`\
    \ returns `1`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=2\
    \ |>\nA recursive solution:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n\
    \  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a dscore=2 tags=r,recursion,fibonacci |>\n<| a dscore=2 |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=2\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  ", "\n  n <- as.integer(n)\n  if (n <=\
    \ 1) 1\n  else if (n == 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n\
    \  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <-\
    \ function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a dscore=2\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n\
    <| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(1)\n  if(n <= 2) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib\
    \ <- function(n", "\n  if(n <= 1) return(1)\n  else return(fib(n-1) + fib(n-2))\n\
    }\n", "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThe `fib` function can\
    \ be simplified to: `fib <- function(n) if (n == 0 || n == 1) return(n) else fib(n\
    \ - 1) + fib(n - 2)`\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\nThe recursive solution\
    \ is very simple:\n<code>\nfib <- function(n){\n  if(n == 0) return(0)\n  if(n\
    \ == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=r,recursion,fibonacci |>\nThe recursive solution is very simple:\n<code>\n\
    fib <- function(n){\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\nThe recursive solution is very simple:\n<code>\nfib <- function(n){\n  if(n\
    \ == 0) return(0)\n  if(n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n\
    \ == 0) return(0)\n  if(n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\nfib <- function(n){\n  if(n == 0) return(0)\n  if(n == 1) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a dscore=", "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n  else\
    \ return(fib(n-1) + fib(n-2))\n}\n", "\n  if (n == 0) 0\n  else if (n == 1) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  if (n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) 1\n  else\
    \ if (n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  if(n <=\
    \ 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThe `ifelse` statement is unnecessary. Just use `if\
    \ (n <= 1) 1 else fib(n-1) + fib(n-2)`.\n<|/ c |>\n<| c |>\nThanks, I didn't know\
    \ that. I've edited my answer.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\n\
    <code>\nfib <- function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if\
    \ (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>\nfib <- function(n) {\n  n <- as.integer(n)\n  if (n <=\
    \ 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  n <-\
    \ as.integer(n)\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  n <- as.integer(n)\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) +\
    \ fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=1 |>\n\
    <code>\nfib <- function(n){\n  n <- as.integer(n)\n  if(n <= 1) 1\n  else if(n\
    \ <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n){\n  n <- as.integer(n)\n  if(n\
    \ <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ tags=r,recursion,fibonacci |>\n<| a tag", "\n  if (n <= 1) 1\n  else if (n ==\
    \ 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n", "\n  n <- as.integer(n)\n  if(n == 0) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n -\
    \ 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=2 |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n -\
    \ 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 tags=r,recursion,fibonacci |>\n\
    <| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a dscore=2 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 ", "\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the nth Fibonacci number using recursion.\n\n\n</text>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the n-th Fibonacci number using recursion.\n\n\n</text>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<text>\n\
    Exercise: Write a recursive function named fibonacci that returns the nth Fibonacci\
    \ number.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is not tail recursive.\n\
    <|/ c |>\n<| c |>\n: I believe it is. `fib` calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which calls `fib` which calls `fib` which calls `fib` which\
    \ calls `fib` which calls `fib` which calls `fib` which calls `fib` which calls\
    \ `fib` which calls `fib` which calls `fib` which calls `fib` which calls `fib`\
    \ which calls `fib` which ", "\n  if (n <= 1) return(n)\n  else return(fib(n-1)\
    \ + fib(n-2))\n}\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) +\
    \ fib(n - 2)\n}\n</cell>\n<text>\nThe function fib is now defined and can be called\
    \ with any integer argument:\n\n\n</text>\n<cell>\nfib(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the nth Fibonacci number using the formula\
    \ $Fn = F{n-1} + F_{n-2}$. Test it on $n=10$ and $n=20$.\n\n\n</text>\n<cell>",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/16009333)\n<|/ c |>\n<| c |>\n\
    The question was \"how do I write a recursive function in R?\" The answer is \"\
    you can't\". It's a perfectly valid answer, and I upvoted it.\n<|/ c |>\n<| c\
    \ |>\nThe question was \"how do I write a recursive function in R?\" The answer\
    \ is \"you can't\". It's a perfectly valid answer, and I upvoted it.\n<|/ c |>\n\
    <| c |>\nThe question was \"how do I write a recursive function in R?\" The answer\
    \ is \"you can't\". It's a perfectly valid answer, and I upvoted it.\n<|/ c |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Please add some explanation to your answer such that others can learn from it\n\
    <|/ c |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n \
    \ if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(", "\n  if (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis doesn't answer the\
    \ question. OP asked for recursion, not iterative solutions.\n<|/ c |>\n<| c |>\n\
    The question was \"how do I write this in R?\" The answer was \"use the `fib`\
    \ function defined above\"\n<|/ c |>\n<| c |>\nThe question was \"how do I write\
    \ this in R?\" The answer was \"use the `fib` function defined above\"\n<|/ c\
    \ |>\n<| c |>\nThe question was \"how do I write this in R?\" The answer was \"\
    use the `fib` function defined above\"\n<|/ c |>\n<| c |>\nThe question was \"\
    how do I write this in R?\" The answer was \"use the `fib` function defined above\"\
    \n<|/ c |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <- function(n) {\n\
    \  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question. OP asked\
    \ for recursion, not iterative solutions.\n<|/ c |>\n<| c |>\nThe question was\
    \ \"how do I write this in R?\" The answer was \"use the `fib` function defined\
    \ above\"\n<|/ c |>\n<| c |>\nThe question was \"how do I write this in R?\" The\
    \ answer was \"use the `fib` function defined above\"\n<|/ c |>\n<| c |>\nThe\
    \ question was \"how do I write this in R?\" The answer was \"use the `fib` function\
    \ defined above\"\n<|/ c |>\n<| a tags=r,fibonacci,recursion |>\n<code>\nfib <-\
    \ function(n) {\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe question was \"how\
    \ do I write this in R?\" The answer was \"use the `fib` function defined above\"\
    \n<|/ c |>\n<| c |>\nThe question was \"how do I write this in R?\" The answer\
    \ was \"use the `fib", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n\
    \ <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  if(n <= 1) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThe recursive\
    \ solution is very elegant, but it is also very inefficient. Try it on a large\
    \ number like 100 or 1000.\n<|/ c |>\n<| c |>\nI agree with you. My solution was\
    \ just a simple example to illustrate how recursion works. I agree with you that\
    \ my solution can be improved.\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ was just a simple example to illustrate how recursion works. I agree with you\
    \ that my solution can be improved.\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ was just a simple example to illustrate how recursion works. I agree with you\
    \ that my solution can be improved.\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ was just a simple example to illustrate how recursion works. I agree with you\
    \ that my solution can be improved.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a\
    \ tags=recursion,r |>\n<| c |>\nThis doesn't work. Try it with `fib(10)`\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it with `fib(10)`\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `fib(10)`\n<|/ c |>\n<| c |>\nIt does work. Try it with `fib(10)`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `fib(10)`\n<|/ c |>\n<| a tags=recursion,r\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work. Try it with `fib(10)`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `fib(10)`\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it with `fib(10)`\n<|/ c |>\n<| c |>\nIt does work", "\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n){\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=recursion,fibonacci,r\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=recursion,fibonacci,r |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,fibonacci,r |>\n\
    <| a tags=recursion,fibonacci,r |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a dscore=2 tags=recursion,fibonacci,r |>\n<| a tags=recursion,fibonacci,r\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=recursion,fibonacci,r\
    \ |>\n<| a dscore=2 |>\n<code>\nfib ", "\n  if(n <= 1) return(n)\n  fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a |>\n<| c |>\nThis is not the fastest solution.\
    \ Try running this on a large dataset and you will see that it is very slow.\n\
    <|/ c |>\n<| c |>\nI agree with you. My solution was just to show that it is possible\
    \ to use recursion to solve this problem. Of course the solution provided by is\
    \ much better.\n<|/ c |>\n<| a tags=r,recursion,fibonacci |>\nHere's a solution\
    \ that uses R's vectorized capabilities:\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis is not the fastest solution. Try running this on a large dataset\
    \ and you will see that it is very slow.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ My solution was just to show that it is possible to use recursion to solve this\
    \ problem. Of course the solution provided by is much better.\n<|/ c |>\n<| c\
    \ |>\nThis is not the fastest solution. Try running this on a large dataset and\
    \ you will see that it is very slow.\n<|/ c |>\n<| c |>\nI agree with you. My\
    \ solution was just to show that it is possible to use recursion to solve this\
    \ problem. Of course the solution provided by is much better.\n<|/ c |>\n<| c\
    \ |>\nThis is not the fastest solution. Try running this on a large dataset and\
    \ you will see that it is very slow.\n<|/ c |>\n<| a tags=r,recursion,fibonacci\
    \ |>\nHere is a recursive solution that is very fast:\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis is not the fastest solution. Try running this on a large dataset\
    \ and you will see that it is very slow.\n<|/ c |>\n<| c |>\nThis is not the fastest\
    \ solution. Try running this on a large dataset and you will see that it is very\
    \ slow.\n<|/ c |>\n<| c |>\nThis is not the fastest solution. Try running this\
    \ on a large dataset and you will see that it is very slow.\n<|/ c |>\n<|", "\n\
    \  if (n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</cell>\n<text>\n\
    Now let's test our fib function:\n\n\n</text>\n<cell>\nfib(10)\n</cell>\n<cell>\n\
    fib(1)\n</cell>\n<cell>\nfib(8)\n</cell>\n<text>\nNow let's write a function that\
    \ computes the n-th Fibonacci number.\n\n\n</text>\n<cell>", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe\
    \ that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nIt does indeed\
    \ loop infinitely. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI believe that this is an\
    \ infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI believe that this is an\
    \ infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI believe that this is an\
    \ infinite loop. Try `fib(10)`.\n<|/ c |>\n<| a dscore=1 |>\nThe problem is that\
    \ the function fib never returns. You have to return something in each recursive\
    \ call. Try this:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| c |>\n\
    I believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI\
    \ believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI\
    \ believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI\
    \ believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| c |>\nI\
    \ believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThe function fib never returns because you never return anything in the\
    \ base case. Try this:\n<code>\nfib <- function(n) {\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n\
    <| c |>\nI believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<|\
    \ c |>\nI believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<|\
    \ c |>\nI believe that this is an infinite loop. Try `fib(10)`.\n<|/ c |>\n<|\
    \ c |>\nI believe that this is an infinite loop. ", "\n  n <- n + 1\n  if (n <\
    \ 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    The recursive solution is very elegant, but it's very inefficient. `fib` grows\
    \ exponentially with the number of terms computed, so it's O(n^2). On the other\
    \ hand, `fib` grows linearly with the number of terms computed, so it's O(n).\
    \ See my answer for a solution that is both efficient and linear.\n<|/ c |>\n\
    <| c |>\nI agree with you. My solution was just to show how it works. I didn't\
    \ want to give a complete solution. Anyway, I added a link to your answer, so\
    \ you can see how it works.\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ was just to show how it works. I didn't want to give a complete solution. Anyway,\
    \ I added a link to your answer, so you can see how it works.\n<|/ c |>\n<| c\
    \ |>\nI agree with you. My solution was just to show how it works. I didn't want\
    \ to give a complete solution. Anyway, I added a link to your answer, so you can\
    \ see how it works.\n<|/ c |>\n<| c |>\nI agree with you. My solution was just\
    \ to show how it works. I didn't want to give a complete solution. Anyway, I added\
    \ a link to your answer, so you can see how it works.\n<|/ c |>\n<| a tags=fibonacci,r,recursion\
    \ |>\nA simple recursive function would be:\n<code>\nfib <- function(n) {\n  if(n\
    \ == 0) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This doesn't work. Try `fib(10)`\n<|/ c |>\n<| c |>\nThis doesn't work. Try `fib(10)`\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try `fib(10)`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work. Try `fib(10)`\n<|/ c |>\n<| c |>\nThis doesn't work. Try `fib(10)`\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\nfib <- function(n) {\n  if(n == 0) 1\n  ", "\n\
    \  n <- as.integer(n)\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n", "\n \
    \ n <- as.integer(n)\n  if (n < 0) stop(\"n must be >= 0\")\n  if (n == 0) 1\n\
    \  else if (n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,recursion,fibonacci |>\nI wrote a recursive function which returns\
    \ fibonacci numbers in R:\n<code>\nfibonacci <- function(n){\n  if(n <= 1){\n\
    \    return(n)\n  }\n  return(fibonacci(n-1) + fibonacci(n-2))\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>\n<| a dscore=",
  "\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(8)\n</cell>\n<cell>\nfib(7)\n</cell>\n<cell>\n\
    fib(6)\n</cell>\n<cell>\nfib(5)\n</cell>\n<cell>\nfib(4)\n</cell>\n<cell>\nfib(3)\n\
    </cell>\n<cell>\nfib(2)\n</cell>\n<cell>\nfib(1)\n</cell>\n<cell>\nfib(0)\n</cell>\n\
    <text>\nThe Fibonacci sequence is defined by the recurrence relation:\n\n$Fn =\
    \ F{n-1} + F_{n-2}$\n\nwhere $F_0 = 0$ and $F_1 = 1$.\n\n\n</text>\n<text>\nThe\
    \ Fibonacci sequence is commonly used in mathematics and computer science.\nThe\
    \ first few numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,\
    \ 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578,\
    \ 5702887, 9227465 \nThe first ten terms give the nth number in the Fibonacci\
    \ sequence: $0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,\
    \ 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465 $\n\n\n</text>\n\
    <text>\nThe Fibonacci sequence is remarkably similar to Pascal's triangle (a mathematical\
    \ construct). The first few numbers in the Pascal's triangle are $1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 217", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  n <- n + 1\n  if(n == 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>",
  "\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1) return(n)\n  fib(n\
    \ - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. `fib(1)` returns `1`\
    \ instead of `1`\n<|/ c |>\n<| c |>\nYes, I forgot to add `return` statement.\
    \ Thanks for pointing out.\n<|/ c |>\n<| c |>\nI added `return` statement to my\
    \ answer, but your answer still doesn't work. `fib(1)` returns `1` instead of\
    \ `1`\n<|/ c |>\n<| c |>\nI tested it again and it works fine. `fib(1)` returns\
    \ `1` instead of `1`\n<|/ c |>\n<| c |>\nI tested it again and it works fine.\
    \ `fib(1)` returns `1` instead of `1`\n<|/ c |>\n<| a dscore=2 |>\nThe recursive\
    \ solution is very elegant and simple. \n<code>\nfib <- function(n){\n  if(n <=\
    \ 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=1 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\n\
    fib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a ", "\n \
    \ if (n == 0) 0\n  else if (n == 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ Test it on $0$ and $1$.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n  if\
    \ (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work for me. `fib(10)` returns\
    \ `55` but `fib(11)` returns `1`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ for me. Are you sure you copied the code correctly? What version of R are you\
    \ using?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm using R version 3.1.1.\
    \ I wonder if it has to do with my version of R. I'm running R version 3.1.1 on\
    \ Windows 7. I'll try updating R and see if that helps.\n<|/ c |>\n<| c |>\nI\
    \ updated R and it didn't help. I'm running R version 3.1.1 on Windows 7. I'll\
    \ try updating R and see if that helps.\n<|/ c |>\n<| c |>\nI updated R and it\
    \ didn't help. I'm running R version 3.1.1 on Windows 7. I'll try updating R and\
    \ see if that helps.\n<|/ c |>\n<| a dscore=2 |>\nI believe that your problem\
    \ is that you are not returning anything from your function fib. Try adding return(0)\
    \ to the end of your function.\n<|/ a tags=r,recursion,fibonacci |>\n<| c |>\n\
    I added `return(0)` at the end of my function `fib` and it still doesn't work.\n\
    <|/ c |>\n<| c |>\nI updated R and it didn't help. I'm running R version 3.1.1\
    \ on Windows 7. I'll try updating R and see if that helps.\n<|/ c |>\n<| c |>\n\
    I updated R and it didn't help. I'm running R version 3.1.1 on Windows 7. I'll\
    \ try updating R and see if that helps.\n<|/ c |>\n<| c |>\nI updated R and it\
    \ didn't help. I'm running R version 3.1.1 on Windows 7. I'll try updating R and\
    \ see if that helps.\n<|/ c |>\n<| c |>\nI updated R and it didn't help. I'm running\
    \ R version 3.1.1 on Windows 7. I'll try updating R and see if that helps.\n<|/\
    \ c |>\n<| a |>\nI believe that your problem is that you are not returning anything\
    \ from your function fib. Try adding return(0) to the end of your function.\n\
    <|/ a tags=r,recursion", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </cell>\n<cell>", "\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(1)\n</cell>\n\
    <cell>\nfib(8)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the n-th Fibonacci number using recursion.\n\n\n</text>\n<cell>", "\n  n <-\
    \ as.integer(n)\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>\n\
    fib(10)\n</cell>\n<cell>\nfib(8)\n</cell>\n<cell>\nfib(7)\n</cell>\n<cell>\nfib(6)\n\
    </cell>\n<cell>\nfib(5)\n</cell>\n<cell>\nfib(4)\n</cell>\n<cell>\nfib(3)\n</cell>\n\
    <cell>\nfib(2)\n</cell>\n<cell>\nfib(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the nth Fibonacci number using recursion.\n\n\n</text>\n<cell>",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  n <- as.integer(n)\n\
    \  if (n <= 1) 1\n  else if (n <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThanks for your answer! I didn't\
    \ know that R had a built-in function for this.\n<|/ c |>\n<| c |>\nI added a\
    \ recursive version to my answer.\n<|/ c |>\n<| a tags=r,fibonacci,recursion |>\n\
    A recursive solution:\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n\
    \ <= 2) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a dscore=2\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a dscore=2\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,fibonacci,recursion\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else\
    \ fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) 1\n  else if(n <= 2) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=2 tags=r,fibonacci,recursion ", "\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is really cool. How would\
    \ you go about doing this in R?\n<|/ c |>\n<| c |>\nI guess this would be a good\
    \ question for R-help or R-devel.\n<|/ c |>\n<| c |>\nI added an R implementation\
    \ to the answer\n<|/ c |>\n<| c |>\nI added an R implementation to the answer\n\
    <|/ c |>\n<| c |>\nI added an R implementation to the answer\n<|/ c |>\n<| a tags=recursion,fibonacci,haskell,algorithm\
    \ |>\nThe Haskell solution is very elegant:\n<code>\nfib n = fib' n 0\n  where\
    \ fib' 0 a = 0\n        fib' 1 a = 1\n        fib' n a = fib' (n-1) (a + b)\n\
    \        where b = fib' (n-2) a\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis is\
    \ very elegant indeed! I wonder why this isn't the accepted answer. :)\n<|/ c\
    \ |>\n<| c |>\nThis solution does not terminate for large `n`\n<|/ c |>\n<| c\
    \ |>\nThis solution does not terminate for large `n`\n<|/ c |>\n<| c |>\nThis\
    \ solution does not terminate for large `n`\n<|/ c |>\n<| c |>\nThis solution\
    \ does not terminate for large `n`\n<|/ c |>\n<| a tags=recursion,fibonacci,haskell,algorithm\
    \ |>\n<code>\nfib n = fib' n 0\n  where fib' 0 a = 0\n        fib' 1 a = 1\n \
    \       fib' n a = fib' (n-1) (a + b)\n        where b = fib' (n-2) a\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis solution does not terminate for large `n`\n<|/\
    \ c |>\n<| c |>\nThis solution does not terminate for large `n`\n<|/ c |>\n<|\
    \ c |>\nThis solution does not terminate for large `n`\n<|/ c |>\n<| c |>\nThis\
    \ solution does not terminate for large `n`\n<|/ c |>\n<| a tags=recursion,fibonacci,haskell,algorithm\
    \ |>\n<code>", "\n  if (n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `fib(10)` returns\
    \ `55` but `fib(8)` returns `21`.\n<|/ c |>\n<| c |>\nThe code was tested in RStudio\
    \ and R 3.2.2 on Windows 7. Are you sure you copied the code correctly? The code\
    \ I posted works.\n<|/ c |>\n<| c |>\nI copied the code exactly as you posted\
    \ it. I also tried it on another computer with R 3.2.2 on Windows 7 and it worked.\
    \ I'm guessing it's an issue with my R installation or something on my computer.\
    \ Thanks for your help.\n<|/ c |>\n<| c |>\nI suspect that your R installation\
    \ is corrupted. Try reinstalling R and see if the problem persists.\n<|/ c |>\n\
    <| c |>\nI reinstalled R and it still doesn't work. I'm guessing it's an issue\
    \ with my R installation. Thanks for your help.\n<|/ c |>\n<| a tags=r,fibonacci\
    \ |>\nThe R package RcppAlgos has a function called fib() that does exactly what\
    \ you want.\n<code>\nlibrary(RcppAlgos)\nfib(10)\n[1] 55\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=r,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    <code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n\
    }\n</code>\n<|/ a tags=r,fibonacci |>\n<| a dscore=3 |>\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci\
    \ |>\n<| a tags=r,fibonacci |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n\
    \  fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n",
  "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</code>\n\
    <|/ a tags=r,fibonacci,recursion |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/11874373)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. As I understand it,\
    \ OP wants to know how to use recursion to compute Fibonacci numbers. I believe\
    \ this does that.\n<|/ c |>\n<| c |>\nI believe this does answer the question.\
    \ As I understand it, OP wants to know how to use recursion to compute Fibonacci\
    \ numbers. I believe this does that.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/11874373)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. As I understand it,\
    \ OP wants to know how to use recursion to compute Fibonacci numbers. I believe\
    \ this does that.\n<|/ c |>\n<| a dscore=5 |>\nA recursive solution is often the\
    \ most efficient one. Here is an example in R:\n<code>\nfib <- function(n){\n\
    \  if(n <= 1) return(n)\n  fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/11874373)\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11874373)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</cell>\n<cell>\nfib(10)\n</cell>\n<cell>\nfib(100)\n</cell>\n<cell>\n\
    fib(1000)\n</cell>\n<cell>\nfib(10000)\n</cell>\n<cell>\nfib(100000)\n</cell>\n\
    <cell>\nfib(1000000)\n</cell>\n<cell>\nfib(10000000)\n</cell>\n<cell>\nfib(100000000)\n\
    </cell>\n<cell>\nfib(1000000000)\n</cell>\n<cell>\nfib(10000000000)\n</cell>\n\
    <cell>\nfib(100000000000)\n</cell>\n<cell>\nfib(1000000000000)\n</cell>\n<cell>\n\
    fib(10000000000000)\n</cell>\n<cell>\nfib(100000000000000)\n</cell>\n<cell>\n\
    fib(1000000000000000)\n</cell>\n<cell>\nfib(10000000000000000)\n</cell>\n<cell>\n\
    fib(100000000000000000)\n</cell>\n<cell>\nfib(1000000000000000000)\n</cell>\n\
    <cell>\nfib(10000000000000000000)\n</cell>\n<cell>\nfib(100000000000000000000)\n\
    </cell>\n<cell>\nfib(1000000000000000000000)\n</cell>\n<cell>\nfib(10000000000000000000000)\n\
    </cell>\n<cell>\nfib(100000000000000000000000)\n</cell>\n<cell>\nfib(1000000000000000000000000)\n\
    </cell>\n<cell>\nfib(10000000000000000000000000)\n</cell>\n<cell>\nfib(100000000000000000000000000)\n\
    </cell>\n<cell>\nfib(1000000000000000000000000000)\n</cell>\n<cell>\nfib(10000000000000000000000000000)\n\
    </cell>\n<cell>\nfib(100000000000000000000000000000)\n</cell>\n<cell>\nfib(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nfib(10000000000000000000000000000000)\n</cell>\n<cell>\nfib(100000000000000000000000000000000)\n\
    </cell>\n<cell>\nfib(1000000000000000000000000000000000)\n</cell>\n<cell>\nfib(10000000000000000000000000000000000)\n\
    </cell>", "\n  if(n <= 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n",
  "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n", "\n  if (n == 0) return(0)\n\
    \  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n", "\n  if(n <= 1)\
    \ return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n</cell>\n<cell>", "\n  if(n\
    \ <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>", "\n  if(n <=\
    \ 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n}\n", "\n  if (n <= 1) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n\
    \ <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n\
    \ <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=r,recursion,fibonacci |>\n<code>\nfib\
    \ <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfib <- function(n) {\n  if(n <= 1)\
    \ 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) +\
    \ fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=2 |>\n<| a |>\n\
    <code>\nfib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n\
    </code>\n<|/ a tags=r,recursion,fibonacci dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| a |>\n<code>\nfib <- function(n) {\n \
    \ if(n <= 1) 1\n  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nfib <- function(n) {\n  if(n <= 1) 1\n\
    \  else fib(n-1) + fib(n-2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci |>",
  "\n  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  if (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</cell>\n\
    <cell>", "\n  if(n <= 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  if (n <= 1) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a tags=r,recursion,fibonacci\
    \ |>\n<| a |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=5 |>\n<| a\
    \ tags=r,recursion,fibonacci |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n\
    \  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a dscore=5 |>\n<| a |>\n<code>\n\
    fib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</code>\n<|/ a tags=r,recursion,fibonacci dscore=4 |>\n<| a |>\n<code>\nfib\
    \ <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n\
    </code>\n<|/ a dscore=4 tags=r,recursion,fibonacci |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=r,recursion,fibonacci\
    \ |>\n<code>\nfib <- function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\nfib <-\
    \ function(n) {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n\
    <|/ a tags=r,recursion,fibonacci |>\n<| a dscore=3 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a\
    \ tags=r,recursion,fibonacci |>\n<| a dscore=3 |>\n<code>\nfib <- function(n)\
    \ {\n  if(n <= 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</code>\n<|/ a\
    \ tags=", "\n  if (n == 0 || n == 1) return(n)\n  else return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if (n < 0) stop(\"n must be >=\
    \ 0\")\n  if (n == 0) 1\n  if (n == 1) 1\n  else if (n == 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n", "\n  if (n <= 1) 1\n  else if (n == 2) 1\n  else fib(n-1)\
    \ + fib(n-2)\n}\n</cell>\n<text>\nExercise 1\nWrite a function that returns the\
    \ nth Fibonacci number using recursion.\n\n\n</text>\n<cell>", "\n  n <- as.integer(n)\n\
    \  if (n == 0 || n == 1) return(n)\n  fib(n - 1) + fib(n - 2)\n}\n</cell>\n<cell>",
  "\n  n <- as.integer(n)\n  if (n == 0 || n == 1) return(n)\n  fib(n - 1) + fib(n\
    \ - 2)\n}\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n Fibonacci numbers. Use recursion.\n\n\n</text>\n<cell>", "\n  if (n == 0)\
    \ return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n}\n</cell>\n\
    <cell>\nfib(10)\n</cell>\n<cell>\nfib(1)\n</cell>\n<cell>\nfib(8)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the n-th Fibonacci number using recursion.\n\
    \n\n</text>\n<cell>", "\n  n <- n + 1\n  if(n <= 1) 1\n  else fib(n - 1) + fib(n\
    \ - 2)\n}\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else\
    \ if (n <= 2) 1\n  else fib(n - 1) + fib(n - 2)\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for small numbers,\
    \ but for large numbers it takes too long to compute. Do you know any way to speed\
    \ up this code?\n<|/ c |>\n<| c |>\nI added a version that uses memoization. As\
    \ you can see, it's much faster for large numbers. But it still needs some work\
    \ to make it work for small numbers. I suggest you try it out and see if it works\
    \ for you.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but\
    \ I got this error message: Error in fib(10) : recursive value fib cannot be recycled\
    \ because of mode 'function'\n<|/ c |>\n<| c |>\nI added a version that uses memoization\
    \ and works with small numbers. But it still needs some work to make it work for\
    \ large numbers. I suggest you try it out and see if it works for you.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ message: Error in fib(10) : recursive value fib cannot be recycled because of\
    \ mode 'function'\n<|/ c |>\n<| a dscore=1 |>\nThe code below is based on your\
    \ code, but I added memoization to speed up the computation. \n<code>\nfib <-\
    \ function(n) {\n  n <- as.integer(n)\n  if (n <= 1) 1\n  else if (n <= 2) 1\n\
    \  else fib(n - 1) + fib(n - 2)\n}\n\nfib_memo <- function(n) {\n  n <- as.integer(n)\n\
    \  fib_memo[n] <- ifelse(is.null(fib_memo[n]), fib(n - 1) + fib(n - 2), fib_memo[n])\n\
    \  fib_memo[n]\n}\n\nfib_memo <- rep(NA, 1e6)\nsystem.time(fib_memo(10))", "\n\
    \  if (n == 0) return(0)\n  if (n == 1) return(1)\n  return(fib(n-1) + fib(n-2))\n\
    }\n</cell>\n<cell>", "\n  n <- as.integer(n)\n  if(n <= 1) 1\n  else fib(n - 1)\
    \ + fib(n - 2)\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nI like\
    \ this solution, but I wonder how it compares to other solutions posted here.\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted here.\n<|/ c |>\n<| a dscore=5 |>\nA recursive solution\
    \ in R:\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nI like\
    \ this solution, but I wonder how it compares to other solutions posted here.\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted here.\n<|/ c |>\n<| c |>\nI like it too, but I wonder\
    \ how it compares to other solutions posted here.\n<|/ c |>\n<| c |>\nI like it\
    \ too, but I wonder how it compares to other solutions posted here.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nfib <- function(n){\n  if(n <= 1) return(n)\n  return(fib(n-1)\
    \ + fib(n-2))\n}\n</code>\n<|/ a tags=r,fibonacci,recursion |>\n<| c |>\nI like\
    \ this solution, but I wonder how it compares to other solutions posted here.\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here.\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it compares\
    \ to other solutions posted here.\n<|/ c |>\n<| c |>\nI like it too, but I wonder\
    \ how it compares to other solutions posted here.\n<|/ c |>\n<| c |>\n"]
stop_tokens:
- "\n#"
- "\n```"
