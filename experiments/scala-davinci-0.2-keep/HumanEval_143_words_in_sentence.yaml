name: HumanEval_143_words_in_sentence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string representing a sentence,\n    // the sentence contains\
  \ some words separated by a space,\n    // and you have to return a string that\
  \ contains the words from the original sentence,\n    // whose lengths are prime\
  \ numbers,\n    // the order of the words in the new string should be the same as\
  \ the original one.\n    // Example 1:\n    // Input: sentence = \"This is a test\"\
  \n    // Output: \"is\"\n    // Example 2:\n    // Input: sentence = \"lets go for\
  \ swimming\"\n    // Output: \"go for\"\n    // Constraints:\n    // * 1 <= len(sentence)\
  \ <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ["        val words = sentence.split(\" \")\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val result = new ListBuffer[String]\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word)\n                result.append(\" \")\n        \
    \    }\n        }\n        result.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = words.filter(w => primes.contains(w.length))\n\
    \        result.mkString(\" \")", "        val words = sentence.split(\" \")\n\
    \        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n    \
    \        var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n   \
    \             if (i % j == 0) {\n                    isPrime = false\n       \
    \             break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val isPrime\
    \ = Array.fill(101)(true)\n        isPrime(0) = false\n        isPrime(1) = false\n\
    \        for (i <- 2 to 100) {\n            if (isPrime(i)) {\n              \
    \  for (j <- 2 to 100 / i) {\n                    isPrime(i * j) = false\n   \
    \             }\n            }\n        }\n        val words = sentence.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim", "        val\
    \ words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n   \
    \     for (i <- 2 to 100) {\n            var isPrime = true\n            for (j\
    \ <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n              \
    \      isPrime = false\n                    break\n                }\n       \
    \     }\n            if (isPrime) primes += i\n        }\n        val result =\
    \ ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      if (isPrime(i)) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ i - 1) {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to i - 1) {\n                if (i % j == 0) {\n                   \
    \ isPrime = false\n                    break\n                }\n            }\n\
    \            if (isPrime) primes += i\n        }\n        val result = new StringBuilder()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim", "        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim", "        val words = sentence.split(\" \")\n      \
    \  val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        words.filter(word\
    \ => primes.contains(word.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim", "        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim", "        val words = sentence.split(\" \")\n      \
    \  val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeWords = words.filter(word\
    \ => primes.contains(word.length))\n        primeWords.mkString(\" \")", "   \
    \     val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        words.filter(x\
    \ => primes.contains(x.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = (1 to 100).filter(isPrime)\n \
    \       words.filter(w => primes.contains(w.length)).mkString(\" \")", "     \
    \   val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = new ArrayBuffer[Int]\n        for (i <- 2 to 100) {\n    \
    \        var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n   \
    \             if (i % j == 0) {\n                    isPrime = false\n       \
    \             break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new ArrayBuffer[String]\n     \
    \   for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        words.filter(word =>\
    \ primes.contains(word.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = new ArrayBuffer[Int]\n        for (i <- 2 to words.map(_.length).max)\
    \ {\n            if (isPrime(i)) primes += i\n        }\n        words.filter(w\
    \ => primes.contains(w.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val sb = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                sb.append(word\
    \ + \" \")\n            }\n        }\n        sb.toString.trim", "        val\
    \ words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n   \
    \     for (i <- 2 to 100) {\n            var isPrime = true\n            for (j\
    \ <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n              \
    \      isPrime = false\n                    break\n                }\n       \
    \     }\n            if (isPrime) primes += i\n        }\n        val result =\
    \ ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n\
    \        val result = new StringBuilder\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primeLengthWords = words.filter(word =>\
    \ isPrime(word.length))\n        primeLengthWords.mkString(\" \")", "        val\
    \ words = sentence.split(\" \")\n        val primeWords = words.filter(word =>\
    \ isPrime(word.length))\n        primeWords.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = words.filter(word\
    \ => primes.contains(word.length))\n        result.mkString(\" \")", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val sb = new StringBuilder\n        for (word <- words) {\n   \
    \         if (primes.contains(word.length)) {\n                sb.append(word\
    \ + \" \")\n            }\n        }\n        sb.toString.trim", "        val\
    \ words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n   \
    \     for (i <- 2 to 100) {\n            var isPrime = true\n            for (j\
    \ <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n              \
    \      isPrime = false\n                    break\n                }\n       \
    \     }\n            if (isPrime) primes += i\n        }\n        val result =\
    \ ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new ArrayBuffer[String]\n        for (word <- words) {\n \
    \           if (primes.contains(word.length)) result += word\n        }\n    \
    \    result.mkString(\" \")", "        val words = sentence.split(\" \")\n   \
    \     val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word)\n                result.append(\" \")\n        \
    \    }\n        }\n        result.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", '        sentence.split("
    ").filter(x => isPrime(x.length)).mkString(" ")', "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primeLengthWords = words.filter(w => isPrime(w.length))\n \
    \       primeLengthWords.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val sb = new StringBuilder\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) {\n             \
    \   sb.append(word)\n                sb.append(\" \")\n            }\n       \
    \ }\n        sb.toString.trim", "        val words = sentence.split(\" \")\n \
    \       val primes = (2 to 100).filter(isPrime)\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val sb = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                sb.append(word)\n     \
    \           sb.append(\" \")\n            }\n        }\n        sb.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val sb = new StringBuilder\n        for (word <- words) {\n   \
    \         if (primes.contains(word.length)) {\n                sb.append(word\
    \ + \" \")\n            }\n        }\n        sb.toString.trim", "        val\
    \ words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n   \
    \     for (i <- 2 to 100) {\n            var isPrime = true\n            for (j\
    \ <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n              \
    \      isPrime = false\n                    break\n                }\n       \
    \     }\n            if (isPrime) primes += i\n        }\n        val result =\
    \ ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n \
    \       val result = new StringBuilder\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primeSet = primes.toSet\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primeSet.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        words.filter(word\
    \ => primes.contains(word.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ ArrayBuffer[String]\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = (2 to 100).filter(x\
    \ => (2 to sqrt(x).toInt).forall(x % _ != 0))\n        words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new ArrayBuffer[String]\n        for (word <- words) {\n \
    \           if (primes.contains(word.length)) result += word\n        }\n    \
    \    result.mkString(\" \")", "        val words = sentence.split(\" \")\n   \
    \     val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val sb = new StringBuilder\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) {\n             \
    \   sb.append(word + \" \")\n            }\n        }\n        sb.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n\
    \        words.filter(word => primes.contains(word.length)).mkString(\" \")",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primeWords = words.filter(word => isPrime(word.length))\n        primeWords.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = (2 to 100).filter(isPrime(_))\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        val result = new\
    \ StringBuilder()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primeWords = words.filter(w => primes.contains(w.length))\n       \
    \ primeWords.mkString(\" \")", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = new ArrayBuffer[Int]\n        for (i <- 2 to 100) {\n    \
    \        var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n   \
    \             if (i % j == 0) {\n                    isPrime = false\n       \
    \             break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new ArrayBuffer[String]\n     \
    \   for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val sb = new StringBuilder\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) {\n             \
    \   sb.append(word)\n                sb.append(\" \")\n            }\n       \
    \ }\n        sb.toString.trim", "        val words = sentence.split(\" \")\n \
    \       val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n     \
    \       var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n    \
    \            if (i % j == 0) {\n                    isPrime = false\n        \
    \            break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word)\n                result.append(\" \")\n        \
    \    }\n        }\n        result.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ ArrayBuffer[String]\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            if (isPrime(i)) primes += i\n        }\n    \
    \    val result = new StringBuilder\n        for (word <- words) {\n         \
    \   if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim", "        val\
    \ words = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val result = new StringBuilder\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val result = new ArrayBuffer[String]\n        for (word <-\
    \ words) {\n            if (primes.contains(word.length)) result += word\n   \
    \     }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new ArrayBuffer[String]\n        for (word <- words) {\n \
    \           if (primes.contains(word.length)) result += word\n        }\n    \
    \    result.mkString(\" \")", "        val words = sentence.split(\" \")\n   \
    \     val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = Array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = new ArrayBuffer[Int]\n        for (i <- 2 to 100)\
    \ {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new ArrayBuffer[String]\n     \
    \   for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim", "        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new ArrayBuffer[String]\n        for (word <- words) {\n \
    \           if (primes.contains(word.length)) result += word\n        }\n    \
    \    result.mkString(\" \")", "        val words = sentence.split(\" \")\n   \
    \     val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n       \
    \     var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n      \
    \          if (i % j == 0) {\n                    isPrime = false\n          \
    \          break\n                }\n            }\n            if (isPrime) primes\
    \ += i\n        }\n        val result = new StringBuilder\n        for (word <-\
    \ words) {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = words.filter(word\
    \ => primes.contains(word.length))\n        result.mkString(\" \")", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to i - 1) {\n                if (i % j == 0) {\n                   \
    \ isPrime = false\n                    break\n                }\n            }\n\
    \            if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n \
    \       val result = new StringBuilder\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val sb = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                sb.append(word + \" \"\
    )\n            }\n        }\n        sb.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to i - 1) {\n       \
    \         if (i % j == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if (isPrime) primes\
    \ += i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        result.toString.trim", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n \
    \       words.filter(w => primes.contains(w.length)).mkString(\" \")", "     \
    \   val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val sb =\
    \ new StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim", "        val words = sentence.split(\" \")\n        val\
    \ primes = new ArrayBuffer[Int]\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = new ArrayBuffer[String]\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word + \" \")\n            }\n        }\n     \
    \   sb.toString.trim", "        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = (2 to 100).filter(x => (2 to sqrt(x).toInt).forall(y\
    \ => x % y != 0))\n        words.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n     \
    \           if (i % j == 0) {\n                    isPrime = false\n         \
    \           break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = ArrayBuffer[String]()\n       \
    \ for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = new ArrayBuffer[Int]\n        for (i <- 2 to 100) {\n    \
    \        var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n   \
    \             if (i % j == 0) {\n                    isPrime = false\n       \
    \             break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new ArrayBuffer[String]\n     \
    \   for (word <- words) {\n            if (primes.contains(word.length)) result\
    \ += word\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to i - 1) {\n       \
    \         if (i % j == 0) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            if (isPrime) primes\
    \ += i\n        }\n        val result = new StringBuilder\n        for (word <-\
    \ words) {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to 100) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        val result\
    \ = ArrayBuffer[String]()\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim"]
stop_tokens:
- "\n    }\n"
