language: scala
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n\
    \                else if (s(i) + s(j) + s(k) < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i + j + k == 0) return true\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17oiznwx.scala:29)\n\tat Problem.main(tmp17oiznwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var map = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (map.contains(i)) map(i) += 1\n\
    \            else map += (i -> 1)\n        }\n        for (i <- l) {\n       \
    \     for (j <- l) {\n                if (i != j) {\n                    if (map.contains(-i\
    \ - j)) {\n                        if (i == -i - j && map(i) < 2) return false\n\
    \                        if (j == -i - j && map(j) < 2) return false\n       \
    \                 return true\n                    }\n                }\n    \
    \        }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = l.toSet\n\
    \        for (i <- h; j <- h; k <- h) {\n            if (i != j && j != k && i\
    \ != k && i + j + k == 0) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2dufhh5.scala:27)\n\tat Problem.main(tmpf2dufhh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -i - j\n\
    \                    if (h.contains(k) && (k != i || h(i) > 1) && (k != j || h(j)\
    \ > 1)) return true\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = Set[Long]()\n\
    \        for (i <- l) {\n            if (s.contains(-i)) return true\n       \
    \     for (j <- s) {\n                if (s.contains(i - j)) return true\n   \
    \         }\n            s += i\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr9kj9_bj.scala:30)\n\tat Problem.main(tmpr9kj9_bj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) return true\n                else if (s(i) + s(j) + s(k)\
    \ < 0) j += 1\n                else k -= 1\n            }\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_f0x3svg.scala:27)\n\tat Problem.main(tmp_f0x3svg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (i\
    \ != j && set.contains(-i - j)) return true\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) return true\n                else if (sum < 0) j += 1\n\
    \                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val sorted = l.sorted\n        for (i <- 0 until\
    \ sorted.length - 2) {\n            var j = i + 1\n            var k = sorted.length\
    \ - 1\n            while (j < k) {\n                val sum = sorted(i) + sorted(j)\
    \ + sorted(k)\n                if (sum == 0) return true\n                else\
    \ if (sum < 0) j += 1\n                else k -= 1\n            }\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var set = Set[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(-i)) return true\n     \
    \       set += i\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp30v_re7u.scala:27)\n\tat Problem.main(tmp30v_re7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n    \
    \            for (k <- j + 1 until n) {\n                    if (l(i) + l(j) +\
    \ l(k) == 0) return true\n                }\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4s_4n35e.scala:29)\n\tat Problem.main(tmp4s_4n35e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s; j <- s; k <- s) {\n            if (i != j && j != k && i\
    \ != k && i + j + k == 0) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsr2bkwyv.scala:27)\n\tat Problem.main(tmpsr2bkwyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i != j && j != k && i != k && i + j + k == 0)\
    \ return true\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk7amdt4w.scala:31)\n\tat Problem.main(tmpk7amdt4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val set = l.toSet\n        for (i <- set) {\n   \
    \         for (j <- set) {\n                if (set.contains(-i - j)) return true\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgp9w7ode.scala:28)\n\tat Problem.main(tmpgp9w7ode.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n\
    \                else if (s(i) + s(j) + s(k) < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n    \
    \            for (k <- j + 1 until n) {\n                    if (l(i) + l(j) +\
    \ l(k) == 0) return true\n                }\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n    \
    \            for (k <- j + 1 until n) {\n                    if (l(i) + l(j) +\
    \ l(k) == 0) return true\n                }\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        for (i <- 0 until\
    \ l.length - 2) {\n            for (j <- i + 1 until l.length - 1) {\n       \
    \         for (k <- j + 1 until l.length) {\n                    if (l(i) + l(j)\
    \ + l(k) == 0) return true\n                }\n            }\n        }\n    \
    \    return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (set.contains(-l(i) - l(j))) return\
    \ true\n            }\n            set.add(l(i))\n        }\n        false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // your code\
    \ here\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksbb0pms.scala:24)\n\tat Problem.main(tmpksbb0pms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // YOUR CODE\
    \ HERE\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx62ub7a0.scala:24)\n\tat Problem.main(tmpx62ub7a0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (i\
    \ != j && set.contains(-i - j)) return true\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_f0x3svg.scala:27)\n\tat Problem.main(tmp_f0x3svg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ HashSet[Long]()\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (set.contains(-l(i) - l(j))) return\
    \ true\n            }\n            set.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (hs.contains(-l(i) - l(j))) return\
    \ true\n            }\n            hs.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val m = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n   \
    \         else m(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -i - j\n\
    \                    if (m.contains(k) && (k != i || m(i) > 1) && (k != j || m(j)\
    \ > 1)) return true\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n    \
    \            for (k <- j + 1 until n) {\n                    if (l(i) + l(j) +\
    \ l(k) == 0) return true\n                }\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n - 2) {\n            for (j <- i + 1 until n - 1)\
    \ {\n                for (k <- j + 1 until n) {\n                    if (l(i)\
    \ + l(j) + l(k) == 0) return true\n                }\n            }\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = new HashMap[Long,\
    \ Long]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n  \
    \          else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    if (h.contains(-i\
    \ - j)) {\n                        if (i == -i - j && h(-i - j) < 2) return false\n\
    \                        if (j == -i - j && h(-i - j) < 2) return false\n    \
    \                    if (i != -i - j && j != -i - j) return true\n           \
    \         }\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtyz10jm.scala:39)\n\tat Problem.main(tmpjtyz10jm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.toSet\n        for (i <- s) {\n       \
    \     for (j <- s) {\n                if (s.contains(-i - j)) return true\n  \
    \          }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_i7w9pm.scala:28)\n\tat Problem.main(tmp2_i7w9pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = new\
    \ HashSet[Long]\n        for (x <- l) {\n            for (y <- l) {\n        \
    \        if (hs.contains(-x - y)) return true\n            }\n            hs.add(x)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // your code\
    \ here\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksbb0pms.scala:24)\n\tat Problem.main(tmpksbb0pms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = new HashSet[Long]\n\
    \        for (i <- l) s += i\n        for (i <- l) {\n            for (j <- l)\
    \ {\n                if (s.contains(-i - j)) return true\n            }\n    \
    \    }\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_81ezi2z.scala:28)\n\tat Problem.main(tmp_81ezi2z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val sorted =\
    \ l.sorted\n        for (i <- 0 until sorted.length - 2) {\n            val a\
    \ = sorted(i)\n            var j = i + 1\n            var k = sorted.length -\
    \ 1\n            while (j < k) {\n                val b = sorted(j)\n        \
    \        val c = sorted(k)\n                if (a + b + c == 0) return true\n\
    \                else if (a + b + c < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) return true\n                else if (sum < 0) j += 1\n\
    \                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = HashSet[Long]()\n\
    \        for (i <- 0 until l.length) {\n            for (j <- i + 1 until l.length)\
    \ {\n                val k = -(l(i) + l(j))\n                if (hs.contains(k))\
    \ return true\n            }\n            hs += l(i)\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val m = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n   \
    \         else m(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -i - j\n\
    \                    if (m.contains(k) && (k != i || m(i) > 1) && (k != j || m(j)\
    \ > 1)) return true\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ HashSet[Long]()\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (set.contains(-l(i) - l(j))) return\
    \ true\n            }\n            set.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = l.toSet\n\
    \        for (i <- h) {\n            for (j <- h) {\n                if (h.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu2moypxb.scala:27)\n\tat Problem.main(tmpu2moypxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val map = new\
    \ HashMap[Long, Int]\n        for (i <- l) {\n            if (map.contains(i))\
    \ map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- l) {\n\
    \            for (j <- l) {\n                if (i != j) {\n                 \
    \   val k = -i - j\n                    if (map.contains(k) && (k != i || map(k)\
    \ > 1) && (k != j || map(k) > 1)) return true\n                }\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var h = new HashMap[Long,\
    \ Long]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n  \
    \          else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (h.contains(-i - j) && (i != j || h(i) > 1) && (i\
    \ != -j || h(i) > 1) && (j != -i || h(j) > 1)) return true\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val m = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n   \
    \         else m(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (m.contains(-i - j)) {\n                    if (i\
    \ == j && j == -i - j) {\n                        if (m(i) >= 3) return true\n\
    \                    } else if (i == j || j == -i - j || i == -i - j) {\n    \
    \                    if (m(i) >= 2) return true\n                    } else return\
    \ true\n                }\n            }\n        }\n        return false\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i != j && j != k && i != k && i + j + k == 0)\
    \ return true\n                }\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk7amdt4w.scala:31)\n\tat Problem.main(tmpk7amdt4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (set.contains(-l(i) - l(j))) return\
    \ true\n            }\n            set.add(l(i))\n        }\n        false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var m = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n \
    \           else m += (i -> 1)\n        }\n        for (i <- l) {\n          \
    \  for (j <- l) {\n                if (i == j) {\n                    if (m(i)\
    \ >= 2 && -i - j == 0) return true\n                }\n                else {\n\
    \                    if (m.contains(-i - j)) return true\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val sorted =\
    \ l.sorted\n        for (i <- 0 until sorted.length - 2) {\n            var j\
    \ = i + 1\n            var k = sorted.length - 1\n            while (j < k) {\n\
    \                if (sorted(i) + sorted(j) + sorted(k) == 0) return true\n   \
    \             else if (sorted(i) + sorted(j) + sorted(k) < 0) j += 1\n       \
    \         else k -= 1\n            }\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            val a = s(i)\n       \
    \     var j = i + 1\n            var k = s.length - 1\n            while (j <\
    \ k) {\n                val b = s(j)\n                val c = s(k)\n         \
    \       if (a + b + c == 0) return true\n                else if (a + b + c <\
    \ 0) j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n\
    \                else if (s(i) + s(j) + s(k) < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = new\
    \ HashSet[Long]\n        for (x <- l) {\n            for (y <- l) {\n        \
    \        if (set.contains(-x - y)) return true\n            }\n            set.add(x)\n\
    \        }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) return true\n                else if (s(i) + s(j) + s(k)\
    \ < 0) j += 1\n                else k -= 1\n            }\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (hs.contains(-l(i) - l(j))) return\
    \ true\n            }\n            hs.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // your code\
    \ here\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksbb0pms.scala:24)\n\tat Problem.main(tmpksbb0pms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) return true\n                else if (s(i) + s(j) + s(k)\
    \ < 0) j += 1\n                else k -= 1\n            }\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.sorted\n\
    \        var i = 0\n        while (i < s.length - 2) {\n            var j = i\
    \ + 1\n            var k = s.length - 1\n            while (j < k) {\n       \
    \         if (s(i) + s(j) + s(k) == 0) return true\n                else if (s(i)\
    \ + s(j) + s(k) < 0) j += 1\n                else k -= 1\n            }\n    \
    \        i += 1\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s; j <- s; k <- s) if (i != j && j != k && i != k) if (i +\
    \ j + k == 0) return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkc2ap6h9.scala:25)\n\tat Problem.main(tmpkc2ap6h9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s; j <- s; k <- s) {\n            if (i != j && j != k && i\
    \ != k && i + j + k == 0) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsr2bkwyv.scala:27)\n\tat Problem.main(tmpsr2bkwyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) return true\n                else if (s(i) + s(j) + s(k)\
    \ < 0) j += 1\n                else k -= 1\n            }\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var hm = new\
    \ HashMap[Long, Int]\n        for (i <- l) {\n            if (hm.contains(i))\
    \ hm(i) += 1\n            else hm(i) = 1\n        }\n        for (i <- l) {\n\
    \            for (j <- l) {\n                if (hm.contains(-i - j) && hm(i)\
    \ >= 1 && hm(j) >= 1 && hm(-i - j) >= 1) return true\n            }\n        }\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpno7yd4.scala:31)\n\tat Problem.main(tmpbpno7yd4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n    \
    \            for (k <- j + 1 until n) {\n                    if (l(i) + l(j) +\
    \ l(k) == 0) return true\n                }\n            }\n        }\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                val\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = HashSet[Long]()\n\
    \        for (i <- 0 until l.length) {\n            for (j <- i + 1 until l.length)\
    \ {\n                if (h.contains(-l(i) - l(j))) return true\n            }\n\
    \            h.add(l(i))\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            val a = s(i)\n            var j = i + 1\n            var\
    \ k = s.length - 1\n            while (j < k) {\n                val b = s(j)\n\
    \                val c = s(k)\n                if (a + b + c == 0) return true\n\
    \                else if (a + b + c < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (hs.contains(-l(i) - l(j))) return\
    \ true\n            }\n            hs.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var h = HashSet[Long]()\n\
    \        for (i <- 0 until l.length) {\n            for (j <- i + 1 until l.length)\
    \ {\n                if (h.contains(-l(i) - l(j))) return true\n            }\n\
    \            h.add(l(i))\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = HashSet[Long]()\n\
    \        for (i <- 0 until l.length) {\n            for (j <- i + 1 until l.length)\
    \ {\n                if (h.contains(-l(i) - l(j))) return true\n            }\n\
    \            h.add(l(i))\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // TODO: implement\
    \ this function\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1h4mqk7.scala:24)\n\tat Problem.main(tmph1h4mqk7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) return true\n                else if (s(i) + s(j) + s(k)\
    \ < 0) j += 1\n                else k -= 1\n            }\n        }\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (x <- s) {\n            for (y <- s) {\n                if (s.contains(-x\
    \ - y)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpexh4vvux.scala:27)\n\tat Problem.main(tmpexh4vvux.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i + j + k == 0) return true\n                }\n\
    \            }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17oiznwx.scala:29)\n\tat Problem.main(tmp17oiznwx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var map = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (map.contains(i)) map(i) += 1\n\
    \            else map += (i -> 1)\n        }\n        for (i <- l) {\n       \
    \     for (j <- l) {\n                if (map.contains(-i - j)) {\n          \
    \          if (i == j && map(i) < 2) return false\n                    if (i !=\
    \ j && map(i) < 1 && map(j) < 1) return false\n                    return true\n\
    \                }\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var m = Map[Long,\
    \ Int]()\n        for (i <- l) {\n            if (m.contains(i)) m(i) += 1\n \
    \           else m += (i -> 1)\n        }\n        for (i <- l) {\n          \
    \  for (j <- l) {\n                if (i != j) {\n                    if (m.contains(-i\
    \ - j)) {\n                        if (i == -i - j && m(i) < 2) return false\n\
    \                        if (j == -i - j && m(j) < 2) return false\n         \
    \               return true\n                    }\n                }\n      \
    \      }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        // your code\
    \ here\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksbb0pms.scala:24)\n\tat Problem.main(tmpksbb0pms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (h.contains(-i - j) && (i != j || h(i) > 1) && (i\
    \ != -j || h(i) > 1) && (j != -i || h(j) > 1)) return true\n            }\n  \
    \      }\n        return false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -(i + j)\n\
    \                    if (h.contains(k) && (k != i) && (k != j)) {\n          \
    \              if (k == i) {\n                            if (h(k) > 1) return\
    \ true\n                        }\n                        else if (k == j) {\n\
    \                            if (h(k) > 1) return true\n                     \
    \   }\n                        else return true\n                    }\n     \
    \           }\n            }\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84oonui5.scala:44)\n\tat Problem.main(tmp84oonui5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_f0x3svg.scala:27)\n\tat Problem.main(tmp_f0x3svg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        if (l.length\
    \ < 3) return false\n        val s = l.toSet\n        for (i <- s) {\n       \
    \     for (j <- s) {\n                if (s.contains(-i - j)) return true\n  \
    \          }\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
    \ 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_i7w9pm.scala:28)\n\tat Problem.main(tmp2_i7w9pm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n\
    \        if (n < 3) return false\n        val s = l.sorted\n        for (i <-\
    \ 0 until n - 2) {\n            var j = i + 1\n            var k = n - 1\n   \
    \         while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n    \
    \            if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val set = l.toSet\n\
    \        for (i <- set) {\n            for (j <- set) {\n                if (set.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphrqub263.scala:27)\n\tat Problem.main(tmphrqub263.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (h.contains(-i - j) && h(-i - j) > 0) {\n      \
    \              if (i == j && h(i) < 2) return false\n                    if (i\
    \ != j && h(i) < 1 && h(j) < 1) return false\n                    return true\n\
    \                }\n            }\n        }\n        return false\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        var s = Set[Long]()\n\
    \        for (i <- l) {\n            for (j <- l) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n            s += i\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799843
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (i !=\
    \ j && s.contains(-i - j)) return true\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val hs = new\
    \ HashSet[Long]\n        for (i <- 0 until l.length) {\n            for (j <-\
    \ i + 1 until l.length) {\n                if (hs.contains(-l(i) - l(j))) return\
    \ true\n            }\n            hs.add(l(i))\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659799836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // triples_sum_to_zero takes a list of integers as an input.\n    //\
    \ it returns True if there are three distinct elements in the list that\n    //\
    \ sum to zero, and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5,\
    \ 0])\n    // False\n    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n\
    \    // >>> triples_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2,\
    \ 4, -5, 3, 9, 7])\n    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n\
    \    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
    \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
    \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
    \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
    \ 5l.toLong, -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
    \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmdfmxnq.scala:27)\n\tat Problem.main(tmpsmdfmxnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799825
