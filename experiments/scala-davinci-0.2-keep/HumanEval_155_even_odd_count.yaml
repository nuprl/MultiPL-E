name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    //\
  \ even_odd_count(123) ==> (1, 2)\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var evenCount = 0\n        var oddCount = 0\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0L\n        var odd = 0L\n        var n = num\n\
    \        if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      return (even, odd)", "        var even = 0L\n        var odd = 0L\n   \
    \     var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var evenCount = 0\n        var oddCount = 0\n        var n =\
    \ num\n        if (n < 0) n = -n\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var even = 0L\n        var\
    \ odd = 0L\n        var n = num\n        if (n < 0) n = -n\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var even = 0L\n \
    \       var odd = 0L\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        val even = num.toString.filter(_.isDigit).filter(_.asDigit\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(_.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var num2 = num\n   \
    \     if (num < 0) num2 = -num\n        while (num2 > 0) {\n            if (num2\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            num2 /=\
    \ 10\n        }\n        return (evenCount, oddCount)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var even = 0\n        var odd\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      (even, odd)", "        var even = 0L\n        var odd = 0L\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n \
    \           else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        return (even, odd)", "        var even\
    \ = 0\n        var odd = 0\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ even = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var numAbs = abs(num)\n\
    \        while (numAbs > 0) {\n            if (numAbs % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numAbs /= 10\n        }\n       \
    \ (evenCount, oddCount)"]
stop_tokens:
- "\n    }\n"
