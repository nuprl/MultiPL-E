name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // even_odd_count(-12) ==> (1, 1)\n    //\
  \ even_odd_count(123) ==> (1, 2)\n    def evenOddCount(num : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var evenCount = 0\n        var oddCount = 0\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0L\n        var odd = 0L\n        var n = num\n\
    \        if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      return (even, odd)", "        var even = 0L\n        var odd = 0L\n   \
    \     var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var evenCount = 0\n        var oddCount = 0\n        var n =\
    \ num\n        if (n < 0) n = -n\n        while (n > 0) {\n            if (n %\
    \ 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var even = 0L\n        var\
    \ odd = 0L\n        var n = num\n        if (n < 0) n = -n\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var even = 0L\n \
    \       var odd = 0L\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        val even = num.toString.filter(_.isDigit).filter(_.asDigit\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).filter(_.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var num2 = num\n   \
    \     if (num < 0) num2 = -num\n        while (num2 > 0) {\n            if (num2\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            num2 /=\
    \ 10\n        }\n        return (evenCount, oddCount)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var even = 0\n        var odd\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      (even, odd)", "        var even = 0L\n        var odd = 0L\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n \
    \           else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        return (even, odd)", "        var even\
    \ = 0\n        var odd = 0\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ even = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n  \
    \      while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var numAbs = abs(num)\n\
    \        while (numAbs > 0) {\n            if (numAbs % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numAbs /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        var even = 0\n        var odd = 0\n       \
    \ var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        if (n <\
    \ 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var even = 0L\n        var odd\
    \ = 0L\n        var n = num\n        while (n != 0) {\n            val digit =\
    \ n % 10\n            if (digit % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) even += 1\n            else odd += 1\n            n\
    \ /= 10\n        }\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    if (n < 0) n = -n\n        while (n > 0) {\n            val digit = n % 10\n\
    \            if (digit % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var even = 0\n        var odd = 0\n        var n = num\n        while (n !=\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var even = 0L\n \
    \       var odd = 0L\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            val digit = n % 10\n            if (digit % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      (even, odd)", "        var even = 0\n        var odd = 0\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n   \
    \         else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            val digit = n % 10\n            if (digit % 2 == 0)\
    \ even += 1\n            else odd += 1\n            n /= 10\n        }\n     \
    \   (even, odd)", "        var even = 0L\n        var odd = 0L\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n   \
    \         else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        val str = num.toString\n\
    \        val even = str.filter(c => c.asDigit % 2 == 0).length\n        val odd\
    \ = str.filter(c => c.asDigit % 2 == 1).length\n        (even, odd)", "      \
    \  var even = 0L\n        var odd = 0L\n        var n = num\n        if (n < 0)\
    \ n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n   \
    \         else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0L\n        var odd = 0L\n        var n = num\n \
    \       while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var even = 0\n        var odd = 0\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0L\n        var odd = 0L\n        var n = num\n \
    \       if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ even += 1\n            else odd += 1\n            n /= 10\n        }\n     \
    \   (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n     \
    \   var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n        \
    \    val digit = n % 10\n            if (digit % 2 == 0) evenCount += 1\n    \
    \        else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0L\n        var odd = 0L\n        var n = num\n\
    \        while (n != 0) {\n            if (n % 2 == 0) even += 1\n           \
    \ else odd += 1\n            n /= 10\n        }\n        return (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var numAbs = abs(num)\n   \
    \     while (numAbs > 0) {\n            if (numAbs % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numAbs /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount = 0\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount =\
    \ 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var numCopy = num\n        while (numCopy !=\
    \ 0) {\n            if (numCopy % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            numCopy /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var num2 = num\n \
    \       if (num < 0) num2 = -num\n        while (num2 > 0) {\n            if (num2\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            num2 /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        while (n != 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        return (evenCount, oddCount)", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var n = num\n        if\
    \ (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var even = 0L\n        var odd = 0L\n   \
    \     var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n      \
    \      if (n % 2 == 0) even += 1\n            else odd += 1\n            n /=\
    \ 10\n        }\n        (even, odd)", "        var even = 0\n        var odd\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      (even, odd)", "        var even = 0\n        var odd = 0\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) even += 1\n   \
    \         else odd += 1\n            n /= 10\n        }\n        return (even,\
    \ odd)", "        var even = 0\n        var odd = 0\n        var n = num\n   \
    \     while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ even = 0\n        var odd = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) even += 1\n            else odd += 1\n          \
    \  n /= 10\n        }\n        (even, odd)", "        var even = 0L\n        var\
    \ odd = 0L\n        var n = num\n        while (n != 0) {\n            if (n %\
    \ 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n\
    \        (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n\
    \        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var even\
    \ = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) even += 1\n            else odd += 1\n          \
    \  n /= 10\n        }\n        (even, odd)", "        var even = 0\n        var\
    \ odd = 0\n        var n = num\n        if (n < 0) n = -n\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        val s = num.toString\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).asDigit % 2 == 0) even += 1\n            else odd +=\
    \ 1\n        }\n        (even, odd)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var num2 = num\n        while (num2 != 0) {\n        \
    \    if (num2 % 2 == 0) evenCount += 1\n            else oddCount += 1\n     \
    \       num2 /= 10\n        }\n        (evenCount, oddCount)", "        var even\
    \ = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) even += 1\n            else odd += 1\n          \
    \  n /= 10\n        }\n        (even, odd)", "        val digits = num.toString.map(_.asDigit)\n\
    \        (digits.filter(_ % 2 == 0).length, digits.filter(_ % 2 == 1).length)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n\
    \        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n       \
    \     else oddCount += 1\n            n /= 10\n        }\n        return (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val evenCount = num.toString.filter(x => x % 2 == 0).length\n\
    \        val oddCount = num.toString.filter(x => x % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0L\n        var odd = 0L\n        for (c <-\
    \ num.toString) {\n            if (c.toInt % 2 == 0) even += 1\n            else\
    \ odd += 1\n        }\n        (even, odd)", "        var even = 0L\n        var\
    \ odd = 0L\n        var n = num\n        while (n != 0) {\n            if (n %\
    \ 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n\
    \        (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var even = 0\n        var odd = 0\n     \
    \   var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        return (even, odd)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var even = 0L\n        var\
    \ odd = 0L\n        var n = num\n        if (n < 0) n = -n\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        while (n != 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var even\
    \ = 0\n        var odd = 0\n        var n = num\n        while (n != 0) {\n  \
    \          if (n % 2 == 0) even += 1\n            else odd += 1\n            n\
    \ /= 10\n        }\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        while (n != 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ even = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var even = 0L\n    \
    \    var odd = 0L\n        var n = num\n        while (n != 0) {\n           \
    \ if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        return (evenCount, oddCount)", "    \
    \    val even = num.toString.filter(c => c.asDigit % 2 == 0).length\n        val\
    \ odd = num.toString.filter(c => c.asDigit % 2 == 1).length\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        return (even, odd)", "        var even\
    \ = 0L\n        var odd = 0L\n        var n = num\n        if (n < 0) n = -n\n\
    \        while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0L\n        var odd = 0L\n        var n = num\n        if (n <\
    \ 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        return (even,\
    \ odd)", "        var evenCount = 0\n        var oddCount = 0\n        var n =\
    \ num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n            val\
    \ digit = n % 10\n            if (digit % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var evenCount = 0\n        var oddCount = 0\n        var n =\
    \ num\n        if (n < 0) n = -n\n        while (n > 0) {\n            val digit\
    \ = n % 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var num1 = num\n        if (num1 < 0)\
    \ num1 = -num1\n        while (num1 > 0) {\n            if (num1 % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            num1 /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0L\n        var odd = 0L\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        return (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0L\n        var odd = 0L\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ even = 0L\n        var odd = 0L\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x.toInt % 2 == 0).length\n        val odd = num.toString.filter(x => x.toInt\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var even = 0L\n        var odd = 0L\n   \
    \     var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0\n        var odd = 0\n        var n = num\n   \
    \     while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0\n        var oddCount = 0\n        var numCopy = num\n\
    \        if (num < 0) numCopy = -num\n        while (numCopy > 0) {\n        \
    \    if (numCopy % 2 == 0) evenCount += 1\n            else oddCount += 1\n  \
    \          numCopy /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0\n        var oddCount = 0\n        var n = num\n   \
    \     while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n         \
    \   else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var even = 0L\n\
    \        var odd = 0L\n        var n = num\n        while (n != 0) {\n       \
    \     if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var even = 0\n        var odd = 0\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0L\n        var odd = 0L\n        var n = num\n \
    \       while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        val\
    \ even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2\
    \ == 1).length\n        (even, odd)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var even = 0;\n    \
    \    var odd = 0;\n        var n = num;\n        while (n != 0) {\n          \
    \  if (n % 2 == 0) even += 1;\n            else odd += 1;\n            n /= 10;\n\
    \        }\n        (even, odd)", "        var evenCount = 0L\n        var oddCount\
    \ = 0L\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var numAbs = abs(num)\n        while (numAbs > 0) {\n\
    \            if (numAbs % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            numAbs /= 10\n        }\n        (evenCount, oddCount)", "  \
    \      var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n\
    \        while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0\n     \
    \   var oddCount = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n        \
    \    n /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0L\n\
    \        var odd = 0L\n        var n = num\n        while (n != 0) {\n       \
    \     if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        while (n != 0) {\n            val digit = n % 10\n\
    \            if (digit % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var even = 0\n     \
    \   var odd = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0\n        var odd = 0\n        var n = num\n   \
    \     while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var temp = num\n   \
    \     while (temp != 0) {\n            if (temp % 2 == 0) evenCount += 1\n   \
    \         else oddCount += 1\n            temp /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0\n        var oddCount = 0\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0L\n        var odd = 0L\n        var n = num\n\
    \        while (n != 0) {\n            if (n % 2 == 0) even += 1\n           \
    \ else odd += 1\n            n /= 10\n        }\n        (even, odd)", "     \
    \   var even = 0L\n        var odd = 0L\n        var n = num\n        if (n <\
    \ 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var even = 0L\n        var odd\
    \ = 0L\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      return (even, odd)", "        var even = 0L\n        var odd = 0L\n   \
    \     var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var even = 0\n        var odd = 0\n        var n = num\n   \
    \     while (n != 0) {\n            if (n % 2 == 0) even += 1\n            else\
    \ odd += 1\n            n /= 10\n        }\n        (even, odd)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0\n        var oddCount = 0\n        var n = num\n      \
    \  if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount =\
    \ 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var even = 0L\n        var odd\
    \ = 0L\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) even += 1\n            else odd += 1\n            n /= 10\n        }\n  \
    \      (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n  \
    \      var n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount =\
    \ 0\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0\n        var oddCount = 0\n        var numAbs = abs(num)\n   \
    \     while (numAbs > 0) {\n            if (numAbs % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numAbs /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount = 0\n\
    \        var numCopy = num\n        while (numCopy != 0) {\n            if (numCopy\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            numCopy\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0L\n \
    \       var odd = 0L\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0\n        var oddCount\
    \ = 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0\n        var\
    \ oddCount = 0\n        var n = num\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0\n\
    \        var oddCount = 0\n        var n = num\n        while (n != 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        return (evenCount, oddCount)", "       \
    \ var evenCount = 0\n        var oddCount = 0\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n\
    \        while (n > 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0\n     \
    \   var oddCount = 0\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n        \
    \    n /= 10\n        }\n        (evenCount, oddCount)", "        val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0\n       \
    \ var oddCount = 0\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var even = 0\n        var odd = 0\n        var n = num\n        while (n\
    \ != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        val\
    \ even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2\
    \ == 1).length\n        (even, odd)", "        var even = 0\n        var odd =\
    \ 0\n        var n = num\n        while (n != 0) {\n            if (n % 2 == 0)\
    \ even += 1\n            else odd += 1\n            n /= 10\n        }\n     \
    \   (even, odd)", "        var evenCount = 0\n        var oddCount = 0\n     \
    \   var numAbs = abs(num)\n        while (numAbs > 0) {\n            if (numAbs\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            numAbs\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0L\n \
    \       var odd = 0L\n        var n = num\n        while (n != 0) {\n        \
    \    if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var even = 0L\n        var odd = 0L\n\
    \        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) even += 1\n            else odd += 1\n            n\
    \ /= 10\n        }\n        (even, odd)", "        val even = num.toString.map(x\
    \ => if (x.asDigit % 2 == 0) 1 else 0).sum\n        val odd = num.toString.map(x\
    \ => if (x.asDigit % 2 == 1) 1 else 0).sum\n        (even, odd)", "        var\
    \ even = 0\n        var odd = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) even += 1\n            else odd += 1\n          \
    \  n /= 10\n        }\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x.toString.toInt % 2 == 0).length\n        val odd = num.toString.filter(x\
    \ => x.toString.toInt % 2 == 1).length\n        (even, odd)", "        val digits\
    \ = num.toString.map(_.asDigit)\n        val evens = digits.filter(_ % 2 == 0).length\n\
    \        val odds = digits.filter(_ % 2 == 1).length\n        (evens, odds)",
  "        var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        return (even, odd)", "        var evenCount\
    \ = 0\n        var oddCount = 0\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ even = 0\n        var odd = 0\n        var n = num\n        while (n != 0) {\n\
    \            val d = n % 10\n            if (d % 2 == 0) even += 1\n         \
    \   else odd += 1\n            n /= 10\n        }\n        (even, odd)", "   \
    \     var even = 0L\n        var odd = 0L\n        var n = num\n        while\
    \ (n != 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n\
    \            n /= 10\n        }\n        (even, odd)", "        var even = 0\n\
    \        var odd = 0\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) even += 1\n            else odd\
    \ += 1\n            n /= 10\n        }\n        (even, odd)", "        var even\
    \ = 0\n        var odd = 0\n        var n = num\n        while (n != 0) {\n  \
    \          if (n % 2 == 0) even += 1\n            else odd += 1\n            n\
    \ /= 10\n        }\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
