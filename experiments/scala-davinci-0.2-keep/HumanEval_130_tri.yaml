name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    def tri(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new ArrayBuffer[Long]\n        result += 1\n \
    \       result += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(1L, 3L, 2L)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      d = 1 + i / 2\n            } else {\n                d = a + b + c\n  \
    \          }\n            result = result :+ d\n            a = b\n          \
    \  b = c\n            c = d\n        }\n        return result", "        var a\
    \ = 1L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i\
    \ == 1) result = result :+ a\n            else if (i == 2) result = result :+\
    \ b\n            else if (i == 3) result = result :+ c\n            else {\n \
    \               d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n               \
    \ a = b\n                b = c\n                c = d\n                result\
    \ = result :+ d\n            }\n        }\n        result", "        var result\
    \ = ListBuffer[Long]()\n        result += 1\n        result += 3\n        result\
    \ += 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        var a = 1L\n   \
    \     var b = 3L\n        var c = 2L\n        var d = 0L\n        var l = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            l = l :+ d\n            a = b\n        \
    \    b = c\n            c = d\n        }\n        l", "        var a = 1L\n  \
    \      var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) result\
    \ = result :+ a\n            else if (i == 1) result = result :+ b\n         \
    \   else if (i == 2) result = result :+ c\n            else {\n              \
    \  d = c + b + a\n                a = b\n                b = c\n             \
    \   c = d\n                result = result :+ d\n            }\n        }\n  \
    \      result", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var result = List(1,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        return result", "     \
    \   if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n      \
    \  var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n        var\
    \ b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n\
    \        result ::= a\n        result ::= b\n        result ::= c\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2\n            } else {\n                d = a + b + c\n            }\n\
    \            a = b\n            b = c\n            c = d\n            result ::=\
    \ d\n        }\n        result.reverse", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (n == 1) 3\n   \
    \         else if (n == 2) 2\n            else if (n == 3) 8\n            else\
    \ if (cache.contains(n)) cache(n)\n            else {\n                val result\
    \ = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n    \
    \            cache(n) = result\n                result\n            }\n      \
    \  }\n        (1 to n + 1).map(tri(_)).toList", "        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(0) = 1\n        dp(1) = 3\n        dp(2) = 2\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n     \
    \       else dp(i) = dp(i - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList",
  "        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 1\n      \
    \  cache(1) = 3\n        cache(2) = 2\n        for (i <- 3 to n.toInt) {\n   \
    \         if (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) = cache(i\
    \ - 1) + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList", "    \
    \    val a = new Array[Long](n.toInt + 1)\n        a(0) = 1\n        a(1) = 3\n\
    \        a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n\
    \        }\n        a.toList", "        def tri(n : Long, a : Long, b : Long,\
    \ c : Long) : List[Long] = {\n            if (n == 0) List(a)\n            else\
    \ if (n == 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n       \
    \     else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n            else\
    \ a :: tri(n - 1, b, c, 1 + n / 2)\n        }\n        tri(n, 1, 3, 2)", "   \
    \     val cache = new HashMap[Long, Long]\n        cache(1) = 3\n        def tri(n\
    \ : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n          \
    \  else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n          \
    \      result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        val result = new Array[Long](n.toInt + 1)\n        result(0) = 1\n    \
    \    result(1) = 3\n        result(2) = 2\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result(i) = 1 + i / 2\n            else result(i)\
    \ = result(i - 1) + result(i - 2) + result(i + 1)\n        }\n        result.toList",
  "        val result = new ListBuffer[Long]\n        result += 1\n        result\
    \ += 3\n        result += 2\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) result += 1 + i / 2\n            else result += result(i - 1) +\
    \ result(i - 2) + result(i + 1)\n        }\n        result.toList", "        val\
    \ m = n + 1\n        val result = new Array[Long](m.toInt)\n        result(0)\
    \ = 1\n        result(1) = 3\n        result(2) = 2\n        for (i <- 3 until\
    \ m.toInt) {\n            if (i % 2 == 0) result(i) = 1 + i / 2\n            else\
    \ result(i) = result(i - 1) + result(i - 2) + result(i + 1)\n        }\n     \
    \   result.toList", "        if (n == 0) return List(1)\n        if (n == 1) return\
    \ List(1, 3)\n        if (n == 2) return List(1, 3, 2)\n        var a = 1L\n \
    \       var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(1L, 3L, 2L)\n        for (i <- 3 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                d = 1 + i / 2\n            } else {\n             \
    \   d = a + b + c\n            }\n            result = result :+ d\n         \
    \   a = b\n            b = c\n            c = d\n        }\n        return result",
  "        if (n == 0) return List(1)\n        if (n == 1) return List(1, 3)\n   \
    \     if (n == 2) return List(1, 3, 2)\n        val a = tri(n - 1)\n        val\
    \ b = a(a.length - 1)\n        val c = a(a.length - 2)\n        val d = a(a.length\
    \ - 3)\n        if (n % 2 == 0) return a :+ (1 + n / 2)\n        else return a\
    \ :+ (b + c + d)"]
stop_tokens:
- "\n    }\n"
